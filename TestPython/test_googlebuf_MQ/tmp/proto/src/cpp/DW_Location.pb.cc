// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DW_Location.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DW_Location.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DW_Location {

namespace {

const ::google::protobuf::Descriptor* user_identification_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_identification_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_overdue_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_overdue_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandedAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandedAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* yuliu_common_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yuliu_common_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* yuliu_platform_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yuliu_platform_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* platform_register_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  platform_register_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminalContactList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminalContactList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sex_proportion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sex_proportion_reflection_ = NULL;
const ::google::protobuf::Descriptor* degree_proportion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  degree_proportion_reflection_ = NULL;
const ::google::protobuf::Descriptor* email_proportion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  email_proportion_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobilePhoneListExt_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobilePhoneListExt_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobilePhoneListExt_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobilePhoneListExt_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* adressbook_chonghe_rate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adressbook_chonghe_rate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* adressbook_chonghe_rate_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adressbook_chonghe_rate_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* adressbook_chonghe_rate_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adressbook_chonghe_rate_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* DW_userinfo_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DW_userinfo_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* DW_userinfo_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DW_userinfo_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* DW_location_track_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DW_location_track_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* DW_location_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DW_location_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* DW_load_days_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DW_load_days_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* static_report_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  static_report_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_profiles_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_profiles_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_profiles_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_profiles_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_basic_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_basic_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* wei_dan_bao_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wei_dan_bao_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* wei_dan_bao_base_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wei_dan_bao_base_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* wei_dan_bao_base_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wei_dan_bao_base_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* wei_dan_bao_success_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wei_dan_bao_success_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* wei_dan_bao_all_success_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wei_dan_bao_all_success_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* wei_dan_bao_all_success_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wei_dan_bao_all_success_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* guarantee_amount_use_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guarantee_amount_use_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* avg_diligence_guarantee_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avg_diligence_guarantee_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* avg_diligence_guarantee_score_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avg_diligence_guarantee_score_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* avg_diligence_guarantee_score_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avg_diligence_guarantee_score_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* guarantee_amount_use_score_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guarantee_amount_use_score_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* guarantee_amount_use_score_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guarantee_amount_use_score_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* rate_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rate_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* rate_score_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rate_score_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* rate_score_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rate_score_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* covers_time_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  covers_time_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* covers_time_score_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  covers_time_score_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* covers_time_score_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  covers_time_score_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* follow_guarantee_invest_rank_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  follow_guarantee_invest_rank_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* follow_guarantee_invest_rank_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  follow_guarantee_invest_rank_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* follow_guarantee_invest_rank_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  follow_guarantee_invest_rank_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* borrower_evaluate_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  borrower_evaluate_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* borrower_evaluate_score_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  borrower_evaluate_score_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* borrower_evaluate_score_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  borrower_evaluate_score_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* diligence_pass_score_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  diligence_pass_score_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* diligence_pass_score_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  diligence_pass_score_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* diligence_pass_score_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  diligence_pass_score_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_contacts_coincide_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_contacts_coincide_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_contacts_coincide_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_contacts_coincide_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* batch_userinfo_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  batch_userinfo_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* chatlog_userinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatlog_userinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* batch_userinfo_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  batch_userinfo_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DW_ask_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* platform_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* overdue_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* static_report_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* avg_suc_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rate_score_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* covers_time_score_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DW_5fLocation_2eproto() {
  protobuf_AddDesc_DW_5fLocation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DW_Location.proto");
  GOOGLE_CHECK(file != NULL);
  user_identification_list_descriptor_ = file->message_type(0);
  static const int user_identification_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_identification_list, user_info_list_),
  };
  user_identification_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_identification_list_descriptor_,
      user_identification_list::default_instance_,
      user_identification_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_identification_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_identification_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_identification_list));
  user_overdue_info_descriptor_ = file->message_type(1);
  static const int user_overdue_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_info, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_info, is_loan_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_info, is_assure_overdue_),
  };
  user_overdue_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_overdue_info_descriptor_,
      user_overdue_info::default_instance_,
      user_overdue_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_overdue_info));
  LandedAccount_descriptor_ = file->message_type(2);
  static const int LandedAccount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandedAccount, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandedAccount, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandedAccount, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandedAccount, last_login_time_),
  };
  LandedAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandedAccount_descriptor_,
      LandedAccount::default_instance_,
      LandedAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandedAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandedAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandedAccount));
  yuliu_common_user_info_descriptor_ = file->message_type(3);
  static const int yuliu_common_user_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, relation_),
  };
  yuliu_common_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yuliu_common_user_info_descriptor_,
      yuliu_common_user_info::default_instance_,
      yuliu_common_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yuliu_common_user_info));
  yuliu_platform_user_info_descriptor_ = file->message_type(4);
  static const int yuliu_platform_user_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, user_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, sex_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, chonghe_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, is_in_adressbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, adressbook_remark_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, comm_info_),
  };
  yuliu_platform_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yuliu_platform_user_info_descriptor_,
      yuliu_platform_user_info::default_instance_,
      yuliu_platform_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yuliu_platform_user_info));
  platform_register_user_info_descriptor_ = file->message_type(5);
  static const int platform_register_user_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, adressbook_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, platfom_type_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, overdue_type_enum_),
  };
  platform_register_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      platform_register_user_info_descriptor_,
      platform_register_user_info::default_instance_,
      platform_register_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(platform_register_user_info));
  TerminalContactList_descriptor_ = file->message_type(6);
  static const int TerminalContactList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, mobile_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, iscommon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, constacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, landed_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, platform_register_user_),
  };
  TerminalContactList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminalContactList_descriptor_,
      TerminalContactList::default_instance_,
      TerminalContactList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminalContactList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminalContactList));
  sex_proportion_descriptor_ = file->message_type(7);
  static const int sex_proportion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sex_proportion, male_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sex_proportion, girl_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sex_proportion, nuknow_num_),
  };
  sex_proportion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sex_proportion_descriptor_,
      sex_proportion::default_instance_,
      sex_proportion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sex_proportion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sex_proportion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sex_proportion));
  degree_proportion_descriptor_ = file->message_type(8);
  static const int degree_proportion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, technical_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, college_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, university_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, graduate_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, doctor_num_),
  };
  degree_proportion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      degree_proportion_descriptor_,
      degree_proportion::default_instance_,
      degree_proportion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(degree_proportion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(degree_proportion));
  email_proportion_descriptor_ = file->message_type(9);
  static const int email_proportion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(email_proportion, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(email_proportion, email_num_),
  };
  email_proportion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      email_proportion_descriptor_,
      email_proportion::default_instance_,
      email_proportion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(email_proportion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(email_proportion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(email_proportion));
  MobilePhoneListExt_ask_descriptor_ = file->message_type(10);
  static const int MobilePhoneListExt_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ask, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ask, mobile_phone_),
  };
  MobilePhoneListExt_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobilePhoneListExt_ask_descriptor_,
      MobilePhoneListExt_ask::default_instance_,
      MobilePhoneListExt_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobilePhoneListExt_ask));
  MobilePhoneListExt_ans_descriptor_ = file->message_type(11);
  static const int MobilePhoneListExt_ans_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, user_info__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, terminal_contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, yuliu_common_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, yuliu_platform_user_),
  };
  MobilePhoneListExt_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobilePhoneListExt_ans_descriptor_,
      MobilePhoneListExt_ans::default_instance_,
      MobilePhoneListExt_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobilePhoneListExt_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobilePhoneListExt_ans));
  adressbook_chonghe_rate_info_descriptor_ = file->message_type(12);
  static const int adressbook_chonghe_rate_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_info, original_device_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_info, other_device_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_info, chonghe_rate_),
  };
  adressbook_chonghe_rate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adressbook_chonghe_rate_info_descriptor_,
      adressbook_chonghe_rate_info::default_instance_,
      adressbook_chonghe_rate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adressbook_chonghe_rate_info));
  adressbook_chonghe_rate_ask_descriptor_ = file->message_type(13);
  static const int adressbook_chonghe_rate_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ask, original_mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ask, other_mobile_phone_),
  };
  adressbook_chonghe_rate_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adressbook_chonghe_rate_ask_descriptor_,
      adressbook_chonghe_rate_ask::default_instance_,
      adressbook_chonghe_rate_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adressbook_chonghe_rate_ask));
  adressbook_chonghe_rate_ans_descriptor_ = file->message_type(14);
  static const int adressbook_chonghe_rate_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ans, adressbook_chonghe_rate_),
  };
  adressbook_chonghe_rate_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adressbook_chonghe_rate_ans_descriptor_,
      adressbook_chonghe_rate_ans::default_instance_,
      adressbook_chonghe_rate_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adressbook_chonghe_rate_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adressbook_chonghe_rate_ans));
  DW_userinfo_ask_descriptor_ = file->message_type(15);
  static const int DW_userinfo_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, ask_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, user_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, user_id_),
  };
  DW_userinfo_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DW_userinfo_ask_descriptor_,
      DW_userinfo_ask::default_instance_,
      DW_userinfo_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DW_userinfo_ask));
  DW_userinfo_ans_descriptor_ = file->message_type(16);
  static const int DW_userinfo_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ans, user_overdue_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ans, result_),
  };
  DW_userinfo_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DW_userinfo_ans_descriptor_,
      DW_userinfo_ans::default_instance_,
      DW_userinfo_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_userinfo_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DW_userinfo_ans));
  DW_location_track_ans_descriptor_ = file->message_type(17);
  static const int DW_location_track_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_track_ans, loc_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_track_ans, result_),
  };
  DW_location_track_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DW_location_track_ans_descriptor_,
      DW_location_track_ans::default_instance_,
      DW_location_track_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_track_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_track_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DW_location_track_ans));
  DW_location_info_ans_descriptor_ = file->message_type(18);
  static const int DW_location_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_info_ans, user_basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_info_ans, result_),
  };
  DW_location_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DW_location_info_ans_descriptor_,
      DW_location_info_ans::default_instance_,
      DW_location_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_location_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DW_location_info_ans));
  DW_load_days_info_ans_descriptor_ = file->message_type(19);
  static const int DW_load_days_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_load_days_info_ans, loaddays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_load_days_info_ans, error_),
  };
  DW_load_days_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DW_load_days_info_ans_descriptor_,
      DW_load_days_info_ans::default_instance_,
      DW_load_days_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_load_days_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DW_load_days_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DW_load_days_info_ans));
  static_report_result_descriptor_ = file->message_type(20);
  static const int static_report_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(static_report_result, static_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(static_report_result, static_number_),
  };
  static_report_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      static_report_result_descriptor_,
      static_report_result::default_instance_,
      static_report_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(static_report_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(static_report_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(static_report_result));
  user_profiles_ask_descriptor_ = file->message_type(21);
  static const int user_profiles_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ask, ask_header_),
  };
  user_profiles_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_profiles_ask_descriptor_,
      user_profiles_ask::default_instance_,
      user_profiles_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_profiles_ask));
  user_profiles_ans_descriptor_ = file->message_type(22);
  static const int user_profiles_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, static_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, emaillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, error_),
  };
  user_profiles_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_profiles_ans_descriptor_,
      user_profiles_ans::default_instance_,
      user_profiles_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_profiles_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_profiles_ans));
  user_basic_info_ask_descriptor_ = file->message_type(23);
  static const int user_basic_info_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, json_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, ask_header_),
  };
  user_basic_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_info_ask_descriptor_,
      user_basic_info_ask::default_instance_,
      user_basic_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_info_ask));
  user_basic_info_ans_descriptor_ = file->message_type(24);
  static const int user_basic_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, json_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, result_),
  };
  user_basic_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_info_ans_descriptor_,
      user_basic_info_ans::default_instance_,
      user_basic_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_info_ans));
  wei_dan_bao_base_info_descriptor_ = file->message_type(25);
  static const int wei_dan_bao_base_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, corporation_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, create_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, audit_pass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, guarantee_stacking_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, guarantee_used_),
  };
  wei_dan_bao_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wei_dan_bao_base_info_descriptor_,
      wei_dan_bao_base_info::default_instance_,
      wei_dan_bao_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wei_dan_bao_base_info));
  wei_dan_bao_base_info_ask_descriptor_ = file->message_type(26);
  static const int wei_dan_bao_base_info_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ask, ask_header_),
  };
  wei_dan_bao_base_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wei_dan_bao_base_info_ask_descriptor_,
      wei_dan_bao_base_info_ask::default_instance_,
      wei_dan_bao_base_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wei_dan_bao_base_info_ask));
  wei_dan_bao_base_info_ans_descriptor_ = file->message_type(27);
  static const int wei_dan_bao_base_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ans, all_info_),
  };
  wei_dan_bao_base_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wei_dan_bao_base_info_ans_descriptor_,
      wei_dan_bao_base_info_ans::default_instance_,
      wei_dan_bao_base_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_base_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wei_dan_bao_base_info_ans));
  wei_dan_bao_success_info_descriptor_ = file->message_type(28);
  static const int wei_dan_bao_success_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_success_info, success_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_success_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_success_info, wei_dan_bao_city_name_),
  };
  wei_dan_bao_success_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wei_dan_bao_success_info_descriptor_,
      wei_dan_bao_success_info::default_instance_,
      wei_dan_bao_success_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_success_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_success_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wei_dan_bao_success_info));
  wei_dan_bao_all_success_info_ask_descriptor_ = file->message_type(29);
  static const int wei_dan_bao_all_success_info_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ask, all_wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ask, days_before_),
  };
  wei_dan_bao_all_success_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wei_dan_bao_all_success_info_ask_descriptor_,
      wei_dan_bao_all_success_info_ask::default_instance_,
      wei_dan_bao_all_success_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wei_dan_bao_all_success_info_ask));
  wei_dan_bao_all_success_info_ans_descriptor_ = file->message_type(30);
  static const int wei_dan_bao_all_success_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ans, info_),
  };
  wei_dan_bao_all_success_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wei_dan_bao_all_success_info_ans_descriptor_,
      wei_dan_bao_all_success_info_ans::default_instance_,
      wei_dan_bao_all_success_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wei_dan_bao_all_success_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wei_dan_bao_all_success_info_ans));
  guarantee_amount_use_score_info_descriptor_ = file->message_type(31);
  static const int guarantee_amount_use_score_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_info, cur_already_use_guarantee_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_info, cur_guarantee_amount_),
  };
  guarantee_amount_use_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guarantee_amount_use_score_info_descriptor_,
      guarantee_amount_use_score_info::default_instance_,
      guarantee_amount_use_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guarantee_amount_use_score_info));
  avg_diligence_guarantee_score_info_descriptor_ = file->message_type(32);
  static const int avg_diligence_guarantee_score_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_info, dan_bao_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_info, bid_loan_amount_),
  };
  avg_diligence_guarantee_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avg_diligence_guarantee_score_info_descriptor_,
      avg_diligence_guarantee_score_info::default_instance_,
      avg_diligence_guarantee_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avg_diligence_guarantee_score_info));
  avg_diligence_guarantee_score_ask_descriptor_ = file->message_type(33);
  static const int avg_diligence_guarantee_score_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ask, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ask, days_before_),
  };
  avg_diligence_guarantee_score_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avg_diligence_guarantee_score_ask_descriptor_,
      avg_diligence_guarantee_score_ask::default_instance_,
      avg_diligence_guarantee_score_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avg_diligence_guarantee_score_ask));
  avg_diligence_guarantee_score_ans_descriptor_ = file->message_type(34);
  static const int avg_diligence_guarantee_score_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ans, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ans, info_),
  };
  avg_diligence_guarantee_score_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avg_diligence_guarantee_score_ans_descriptor_,
      avg_diligence_guarantee_score_ans::default_instance_,
      avg_diligence_guarantee_score_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avg_diligence_guarantee_score_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avg_diligence_guarantee_score_ans));
  guarantee_amount_use_score_ask_descriptor_ = file->message_type(35);
  static const int guarantee_amount_use_score_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ask, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ask, days_before_),
  };
  guarantee_amount_use_score_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guarantee_amount_use_score_ask_descriptor_,
      guarantee_amount_use_score_ask::default_instance_,
      guarantee_amount_use_score_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guarantee_amount_use_score_ask));
  guarantee_amount_use_score_ans_descriptor_ = file->message_type(36);
  static const int guarantee_amount_use_score_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ans, info_),
  };
  guarantee_amount_use_score_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guarantee_amount_use_score_ans_descriptor_,
      guarantee_amount_use_score_ans::default_instance_,
      guarantee_amount_use_score_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guarantee_amount_use_score_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guarantee_amount_use_score_ans));
  rate_score_info_descriptor_ = file->message_type(37);
  static const int rate_score_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, kind_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, already_expires_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, kind_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, already_expires_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, max_expires_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, ans_type_),
  };
  rate_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rate_score_info_descriptor_,
      rate_score_info::default_instance_,
      rate_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rate_score_info));
  rate_score_ask_descriptor_ = file->message_type(38);
  static const int rate_score_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ask, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ask, days_before_),
  };
  rate_score_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rate_score_ask_descriptor_,
      rate_score_ask::default_instance_,
      rate_score_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rate_score_ask));
  rate_score_ans_descriptor_ = file->message_type(39);
  static const int rate_score_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ans, info_),
  };
  rate_score_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rate_score_ans_descriptor_,
      rate_score_ans::default_instance_,
      rate_score_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rate_score_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rate_score_ans));
  covers_time_score_info_descriptor_ = file->message_type(40);
  static const int covers_time_score_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_info, which_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_info, covers_period_),
  };
  covers_time_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      covers_time_score_info_descriptor_,
      covers_time_score_info::default_instance_,
      covers_time_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(covers_time_score_info));
  covers_time_score_ask_descriptor_ = file->message_type(41);
  static const int covers_time_score_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ask, wei_dan_bao_id_),
  };
  covers_time_score_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      covers_time_score_ask_descriptor_,
      covers_time_score_ask::default_instance_,
      covers_time_score_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(covers_time_score_ask));
  covers_time_score_ans_descriptor_ = file->message_type(42);
  static const int covers_time_score_ans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ans, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ans, wei_dan_bao_id_),
  };
  covers_time_score_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      covers_time_score_ans_descriptor_,
      covers_time_score_ans::default_instance_,
      covers_time_score_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(covers_time_score_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(covers_time_score_ans));
  follow_guarantee_invest_rank_info_descriptor_ = file->message_type(43);
  static const int follow_guarantee_invest_rank_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_info, follow_dan_bao_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_info, follow_tou_zi_count_),
  };
  follow_guarantee_invest_rank_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      follow_guarantee_invest_rank_info_descriptor_,
      follow_guarantee_invest_rank_info::default_instance_,
      follow_guarantee_invest_rank_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(follow_guarantee_invest_rank_info));
  follow_guarantee_invest_rank_ask_descriptor_ = file->message_type(44);
  static const int follow_guarantee_invest_rank_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ask, wei_dan_bao_id_),
  };
  follow_guarantee_invest_rank_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      follow_guarantee_invest_rank_ask_descriptor_,
      follow_guarantee_invest_rank_ask::default_instance_,
      follow_guarantee_invest_rank_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(follow_guarantee_invest_rank_ask));
  follow_guarantee_invest_rank_ans_descriptor_ = file->message_type(45);
  static const int follow_guarantee_invest_rank_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ans, info_),
  };
  follow_guarantee_invest_rank_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      follow_guarantee_invest_rank_ans_descriptor_,
      follow_guarantee_invest_rank_ans::default_instance_,
      follow_guarantee_invest_rank_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(follow_guarantee_invest_rank_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(follow_guarantee_invest_rank_ans));
  borrower_evaluate_score_info_descriptor_ = file->message_type(46);
  static const int borrower_evaluate_score_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_info, borrower_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_info, evaluate_total_num_),
  };
  borrower_evaluate_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      borrower_evaluate_score_info_descriptor_,
      borrower_evaluate_score_info::default_instance_,
      borrower_evaluate_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(borrower_evaluate_score_info));
  borrower_evaluate_score_ask_descriptor_ = file->message_type(47);
  static const int borrower_evaluate_score_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ask, wei_dan_bao_id_),
  };
  borrower_evaluate_score_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      borrower_evaluate_score_ask_descriptor_,
      borrower_evaluate_score_ask::default_instance_,
      borrower_evaluate_score_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(borrower_evaluate_score_ask));
  borrower_evaluate_score_ans_descriptor_ = file->message_type(48);
  static const int borrower_evaluate_score_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ans, info_),
  };
  borrower_evaluate_score_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      borrower_evaluate_score_ans_descriptor_,
      borrower_evaluate_score_ans::default_instance_,
      borrower_evaluate_score_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrower_evaluate_score_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(borrower_evaluate_score_ans));
  diligence_pass_score_info_descriptor_ = file->message_type(49);
  static const int diligence_pass_score_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_info, wei_dan_bao_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_info, passed_diligence_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_info, commit_diligence_total_num_),
  };
  diligence_pass_score_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      diligence_pass_score_info_descriptor_,
      diligence_pass_score_info::default_instance_,
      diligence_pass_score_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(diligence_pass_score_info));
  diligence_pass_score_ask_descriptor_ = file->message_type(50);
  static const int diligence_pass_score_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ask, wei_dan_bao_id_),
  };
  diligence_pass_score_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      diligence_pass_score_ask_descriptor_,
      diligence_pass_score_ask::default_instance_,
      diligence_pass_score_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(diligence_pass_score_ask));
  diligence_pass_score_ans_descriptor_ = file->message_type(51);
  static const int diligence_pass_score_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ans, info_),
  };
  diligence_pass_score_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      diligence_pass_score_ans_descriptor_,
      diligence_pass_score_ans::default_instance_,
      diligence_pass_score_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diligence_pass_score_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(diligence_pass_score_ans));
  blacklist_contacts_coincide_ask_descriptor_ = file->message_type(52);
  static const int blacklist_contacts_coincide_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ask, blacklist_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ask, coincide_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ask, user_info_),
  };
  blacklist_contacts_coincide_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_contacts_coincide_ask_descriptor_,
      blacklist_contacts_coincide_ask::default_instance_,
      blacklist_contacts_coincide_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_contacts_coincide_ask));
  blacklist_contacts_coincide_ans_descriptor_ = file->message_type(53);
  static const int blacklist_contacts_coincide_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ans, is_black_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ans, result_),
  };
  blacklist_contacts_coincide_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_contacts_coincide_ans_descriptor_,
      blacklist_contacts_coincide_ans::default_instance_,
      blacklist_contacts_coincide_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_contacts_coincide_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_contacts_coincide_ans));
  batch_userinfo_ask_descriptor_ = file->message_type(54);
  static const int batch_userinfo_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ask, user_id_),
  };
  batch_userinfo_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      batch_userinfo_ask_descriptor_,
      batch_userinfo_ask::default_instance_,
      batch_userinfo_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(batch_userinfo_ask));
  chatlog_userinfo_descriptor_ = file->message_type(55);
  static const int chatlog_userinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, user_id_),
  };
  chatlog_userinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatlog_userinfo_descriptor_,
      chatlog_userinfo::default_instance_,
      chatlog_userinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatlog_userinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatlog_userinfo));
  batch_userinfo_ans_descriptor_ = file->message_type(56);
  static const int batch_userinfo_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ans, info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ans, result_),
  };
  batch_userinfo_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      batch_userinfo_ans_descriptor_,
      batch_userinfo_ans::default_instance_,
      batch_userinfo_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_userinfo_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(batch_userinfo_ans));
  DW_ask_type_descriptor_ = file->enum_type(0);
  platform_type_descriptor_ = file->enum_type(1);
  overdue_type_descriptor_ = file->enum_type(2);
  static_report_type_descriptor_ = file->enum_type(3);
  avg_suc_type_descriptor_ = file->enum_type(4);
  rate_score_type_descriptor_ = file->enum_type(5);
  covers_time_score_type_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DW_5fLocation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_identification_list_descriptor_, &user_identification_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_overdue_info_descriptor_, &user_overdue_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandedAccount_descriptor_, &LandedAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yuliu_common_user_info_descriptor_, &yuliu_common_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yuliu_platform_user_info_descriptor_, &yuliu_platform_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    platform_register_user_info_descriptor_, &platform_register_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminalContactList_descriptor_, &TerminalContactList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sex_proportion_descriptor_, &sex_proportion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    degree_proportion_descriptor_, &degree_proportion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    email_proportion_descriptor_, &email_proportion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobilePhoneListExt_ask_descriptor_, &MobilePhoneListExt_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobilePhoneListExt_ans_descriptor_, &MobilePhoneListExt_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adressbook_chonghe_rate_info_descriptor_, &adressbook_chonghe_rate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adressbook_chonghe_rate_ask_descriptor_, &adressbook_chonghe_rate_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adressbook_chonghe_rate_ans_descriptor_, &adressbook_chonghe_rate_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DW_userinfo_ask_descriptor_, &DW_userinfo_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DW_userinfo_ans_descriptor_, &DW_userinfo_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DW_location_track_ans_descriptor_, &DW_location_track_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DW_location_info_ans_descriptor_, &DW_location_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DW_load_days_info_ans_descriptor_, &DW_load_days_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    static_report_result_descriptor_, &static_report_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_profiles_ask_descriptor_, &user_profiles_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_profiles_ans_descriptor_, &user_profiles_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_info_ask_descriptor_, &user_basic_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_info_ans_descriptor_, &user_basic_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wei_dan_bao_base_info_descriptor_, &wei_dan_bao_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wei_dan_bao_base_info_ask_descriptor_, &wei_dan_bao_base_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wei_dan_bao_base_info_ans_descriptor_, &wei_dan_bao_base_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wei_dan_bao_success_info_descriptor_, &wei_dan_bao_success_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wei_dan_bao_all_success_info_ask_descriptor_, &wei_dan_bao_all_success_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wei_dan_bao_all_success_info_ans_descriptor_, &wei_dan_bao_all_success_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guarantee_amount_use_score_info_descriptor_, &guarantee_amount_use_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avg_diligence_guarantee_score_info_descriptor_, &avg_diligence_guarantee_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avg_diligence_guarantee_score_ask_descriptor_, &avg_diligence_guarantee_score_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avg_diligence_guarantee_score_ans_descriptor_, &avg_diligence_guarantee_score_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guarantee_amount_use_score_ask_descriptor_, &guarantee_amount_use_score_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guarantee_amount_use_score_ans_descriptor_, &guarantee_amount_use_score_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rate_score_info_descriptor_, &rate_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rate_score_ask_descriptor_, &rate_score_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rate_score_ans_descriptor_, &rate_score_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    covers_time_score_info_descriptor_, &covers_time_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    covers_time_score_ask_descriptor_, &covers_time_score_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    covers_time_score_ans_descriptor_, &covers_time_score_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    follow_guarantee_invest_rank_info_descriptor_, &follow_guarantee_invest_rank_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    follow_guarantee_invest_rank_ask_descriptor_, &follow_guarantee_invest_rank_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    follow_guarantee_invest_rank_ans_descriptor_, &follow_guarantee_invest_rank_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    borrower_evaluate_score_info_descriptor_, &borrower_evaluate_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    borrower_evaluate_score_ask_descriptor_, &borrower_evaluate_score_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    borrower_evaluate_score_ans_descriptor_, &borrower_evaluate_score_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    diligence_pass_score_info_descriptor_, &diligence_pass_score_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    diligence_pass_score_ask_descriptor_, &diligence_pass_score_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    diligence_pass_score_ans_descriptor_, &diligence_pass_score_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_contacts_coincide_ask_descriptor_, &blacklist_contacts_coincide_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_contacts_coincide_ans_descriptor_, &blacklist_contacts_coincide_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    batch_userinfo_ask_descriptor_, &batch_userinfo_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatlog_userinfo_descriptor_, &chatlog_userinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    batch_userinfo_ans_descriptor_, &batch_userinfo_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DW_5fLocation_2eproto() {
  delete user_identification_list::default_instance_;
  delete user_identification_list_reflection_;
  delete user_overdue_info::default_instance_;
  delete user_overdue_info_reflection_;
  delete LandedAccount::default_instance_;
  delete LandedAccount_reflection_;
  delete yuliu_common_user_info::default_instance_;
  delete yuliu_common_user_info_reflection_;
  delete yuliu_platform_user_info::default_instance_;
  delete yuliu_platform_user_info_reflection_;
  delete platform_register_user_info::default_instance_;
  delete platform_register_user_info_reflection_;
  delete TerminalContactList::default_instance_;
  delete TerminalContactList_reflection_;
  delete sex_proportion::default_instance_;
  delete sex_proportion_reflection_;
  delete degree_proportion::default_instance_;
  delete degree_proportion_reflection_;
  delete email_proportion::default_instance_;
  delete email_proportion_reflection_;
  delete MobilePhoneListExt_ask::default_instance_;
  delete MobilePhoneListExt_ask_reflection_;
  delete MobilePhoneListExt_ans::default_instance_;
  delete MobilePhoneListExt_ans_reflection_;
  delete adressbook_chonghe_rate_info::default_instance_;
  delete adressbook_chonghe_rate_info_reflection_;
  delete adressbook_chonghe_rate_ask::default_instance_;
  delete adressbook_chonghe_rate_ask_reflection_;
  delete adressbook_chonghe_rate_ans::default_instance_;
  delete adressbook_chonghe_rate_ans_reflection_;
  delete DW_userinfo_ask::default_instance_;
  delete DW_userinfo_ask_reflection_;
  delete DW_userinfo_ans::default_instance_;
  delete DW_userinfo_ans_reflection_;
  delete DW_location_track_ans::default_instance_;
  delete DW_location_track_ans_reflection_;
  delete DW_location_info_ans::default_instance_;
  delete DW_location_info_ans_reflection_;
  delete DW_load_days_info_ans::default_instance_;
  delete DW_load_days_info_ans_reflection_;
  delete static_report_result::default_instance_;
  delete static_report_result_reflection_;
  delete user_profiles_ask::default_instance_;
  delete user_profiles_ask_reflection_;
  delete user_profiles_ans::default_instance_;
  delete user_profiles_ans_reflection_;
  delete user_basic_info_ask::default_instance_;
  delete user_basic_info_ask_reflection_;
  delete user_basic_info_ans::default_instance_;
  delete user_basic_info_ans_reflection_;
  delete wei_dan_bao_base_info::default_instance_;
  delete wei_dan_bao_base_info_reflection_;
  delete wei_dan_bao_base_info_ask::default_instance_;
  delete wei_dan_bao_base_info_ask_reflection_;
  delete wei_dan_bao_base_info_ans::default_instance_;
  delete wei_dan_bao_base_info_ans_reflection_;
  delete wei_dan_bao_success_info::default_instance_;
  delete wei_dan_bao_success_info_reflection_;
  delete wei_dan_bao_all_success_info_ask::default_instance_;
  delete wei_dan_bao_all_success_info_ask_reflection_;
  delete wei_dan_bao_all_success_info_ans::default_instance_;
  delete wei_dan_bao_all_success_info_ans_reflection_;
  delete guarantee_amount_use_score_info::default_instance_;
  delete guarantee_amount_use_score_info_reflection_;
  delete avg_diligence_guarantee_score_info::default_instance_;
  delete avg_diligence_guarantee_score_info_reflection_;
  delete avg_diligence_guarantee_score_ask::default_instance_;
  delete avg_diligence_guarantee_score_ask_reflection_;
  delete avg_diligence_guarantee_score_ans::default_instance_;
  delete avg_diligence_guarantee_score_ans_reflection_;
  delete guarantee_amount_use_score_ask::default_instance_;
  delete guarantee_amount_use_score_ask_reflection_;
  delete guarantee_amount_use_score_ans::default_instance_;
  delete guarantee_amount_use_score_ans_reflection_;
  delete rate_score_info::default_instance_;
  delete rate_score_info_reflection_;
  delete rate_score_ask::default_instance_;
  delete rate_score_ask_reflection_;
  delete rate_score_ans::default_instance_;
  delete rate_score_ans_reflection_;
  delete covers_time_score_info::default_instance_;
  delete covers_time_score_info_reflection_;
  delete covers_time_score_ask::default_instance_;
  delete covers_time_score_ask_reflection_;
  delete covers_time_score_ans::default_instance_;
  delete covers_time_score_ans_reflection_;
  delete follow_guarantee_invest_rank_info::default_instance_;
  delete follow_guarantee_invest_rank_info_reflection_;
  delete follow_guarantee_invest_rank_ask::default_instance_;
  delete follow_guarantee_invest_rank_ask_reflection_;
  delete follow_guarantee_invest_rank_ans::default_instance_;
  delete follow_guarantee_invest_rank_ans_reflection_;
  delete borrower_evaluate_score_info::default_instance_;
  delete borrower_evaluate_score_info_reflection_;
  delete borrower_evaluate_score_ask::default_instance_;
  delete borrower_evaluate_score_ask_reflection_;
  delete borrower_evaluate_score_ans::default_instance_;
  delete borrower_evaluate_score_ans_reflection_;
  delete diligence_pass_score_info::default_instance_;
  delete diligence_pass_score_info_reflection_;
  delete diligence_pass_score_ask::default_instance_;
  delete diligence_pass_score_ask_reflection_;
  delete diligence_pass_score_ans::default_instance_;
  delete diligence_pass_score_ans_reflection_;
  delete blacklist_contacts_coincide_ask::default_instance_;
  delete blacklist_contacts_coincide_ask_reflection_;
  delete blacklist_contacts_coincide_ans::default_instance_;
  delete blacklist_contacts_coincide_ans_reflection_;
  delete batch_userinfo_ask::default_instance_;
  delete batch_userinfo_ask_reflection_;
  delete chatlog_userinfo::default_instance_;
  delete chatlog_userinfo_reflection_;
  delete batch_userinfo_ans::default_instance_;
  delete batch_userinfo_ans_reflection_;
}

void protobuf_AddDesc_DW_5fLocation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::UBAS_niiwoo::protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DW_Location.proto\022\013DW_Location\032\014common"
    ".proto\032\021UBAS_niiwoo.proto\"U\n\030user_identi"
    "fication_list\0229\n\016user_info_list\030\001 \003(\0132!."
    "common.user_basic_identification\"}\n\021user"
    "_overdue_info\0224\n\tuser_info\030\001 \001(\0132!.commo"
    "n.user_basic_identification\022\027\n\017is_loan_o"
    "verdue\030\002 \001(\010\022\031\n\021is_assure_overdue\030\003 \001(\010\""
    "g\n\rLandedAccount\022\023\n\013mobilephone\030\001 \001(\014\022\025\n"
    "\ridentity_card\030\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\022"
    "\027\n\017last_login_time\030\004 \001(\014\"K\n\026yuliu_common"
    "_user_info\022\014\n\004name\030\001 \001(\014\022\021\n\tphone_num\030\002 "
    "\001(\014\022\020\n\010relation\030\003 \001(\014\"\244\002\n\030yuliu_platform"
    "_user_info\022\016\n\006avatar\030\001 \001(\014\022\025\n\ruser_nickn"
    "ame\030\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\022\035\n\010sex_type"
    "\030\004 \001(\0162\013.common.sex\022\'\n\004type\030\005 \001(\0162\031.DW_L"
    "ocation.overdue_type\022\024\n\014chonghe_rate\030\006 \001"
    "(\002\022\030\n\020is_in_adressbook\030\007 \001(\010\022\036\n\026adressbo"
    "ok_remark_name\030\010 \001(\014\0226\n\tcomm_info\030\t \001(\0132"
    "#.DW_Location.yuliu_common_user_info\"\266\001\n"
    "\033platform_register_user_info\022\027\n\017adressbo"
    "ok_name\030\001 \001(\014\022\021\n\tphone_num\030\002 \001(\014\0225\n\021plat"
    "fom_type_enum\030\003 \001(\0162\032.DW_Location.platfo"
    "rm_type\0224\n\021overdue_type_enum\030\004 \001(\0162\031.DW_"
    "Location.overdue_type\"\371\001\n\023TerminalContac"
    "tList\022\014\n\004imei\030\001 \001(\014\022\024\n\014mobile_brand\030\002 \001("
    "\014\022\020\n\010iscommon\030\003 \001(\005\022.\n\tconstacts\030\004 \003(\0132\033"
    ".UBAS_niiwoo.user_contact_t\0222\n\016landed_ac"
    "count\030\005 \003(\0132\032.DW_Location.LandedAccount\022"
    "H\n\026platform_register_user\030\006 \003(\0132(.DW_Loc"
    "ation.platform_register_user_info\"H\n\016sex"
    "_proportion\022\020\n\010male_num\030\001 \001(\005\022\020\n\010girl_nu"
    "m\030\002 \001(\005\022\022\n\nnuknow_num\030\003 \001(\005\"\201\001\n\021degree_p"
    "roportion\022\025\n\rtechnical_num\030\001 \001(\005\022\023\n\013coll"
    "ege_num\030\002 \001(\005\022\026\n\016university_num\030\003 \001(\005\022\024\n"
    "\014graduate_num\030\004 \001(\005\022\022\n\ndoctor_num\030\005 \001(\005\""
    "4\n\020email_proportion\022\r\n\005email\030\001 \001(\014\022\021\n\tem"
    "ail_num\030\002 \001(\005\"t\n\026MobilePhoneListExt_ask\022"
    "-\n\nask_header\030\001 \001(\0132\031.common.common_ask_"
    "header\022\025\n\ridentity_card\030\002 \001(\014\022\024\n\014mobile_"
    "phone\030\003 \001(\014\"\314\002\n\026MobilePhoneListExt_ans\022!"
    "\n\006result\030\001 \001(\0132\021.common.errorinfo\022%\n\nuse"
    "r_info_\030\002 \001(\0132\021.common.user_info\022;\n\021term"
    "inal_contacts\030\003 \003(\0132 .DW_Location.Termin"
    "alContactList\022\'\n\004type\030\004 \001(\0162\031.DW_Locatio"
    "n.overdue_type\022>\n\021yuliu_common_user\030\005 \003("
    "\0132#.DW_Location.yuliu_common_user_info\022B"
    "\n\023yuliu_platform_user\030\006 \003(\0132%.DW_Locatio"
    "n.yuliu_platform_user_info\"i\n\034adressbook"
    "_chonghe_rate_info\022\032\n\022original_device_no"
    "\030\001 \001(\014\022\027\n\017other_device_no\030\002 \001(\014\022\024\n\014chong"
    "he_rate\030\003 \001(\002\"\207\001\n\033adressbook_chonghe_rat"
    "e_ask\022-\n\nask_header\030\001 \001(\0132\031.common.commo"
    "n_ask_header\022\035\n\025original_mobile_phone\030\002 "
    "\001(\014\022\032\n\022other_mobile_phone\030\003 \001(\014\"\214\001\n\033adre"
    "ssbook_chonghe_rate_ans\022!\n\006result\030\001 \001(\0132"
    "\021.common.errorinfo\022J\n\027adressbook_chonghe"
    "_rate\030\002 \003(\0132).DW_Location.adressbook_cho"
    "nghe_rate_info\"\230\002\n\017DW_userinfo_ask\022-\n\nas"
    "k_header\030\001 \001(\0132\031.common.common_ask_heade"
    "r\022*\n\010ask_type\030\002 \001(\0162\030.DW_Location.DW_ask"
    "_type\022\022\n\nstart_time\030\003 \001(\014\022\020\n\010end_time\030\004 "
    "\001(\014\022=\n\016user_info_list\030\005 \001(\0132%.DW_Locatio"
    "n.user_identification_list\0224\n\tuser_info\030"
    "\006 \001(\0132!.common.user_basic_identification"
    "\022\017\n\007user_id\030\007 \001(\014\"p\n\017DW_userinfo_ans\022:\n\022"
    "user_overdue_infos\030\001 \003(\0132\036.DW_Location.u"
    "ser_overdue_info\022!\n\006result\030\002 \001(\0132\021.commo"
    "n.errorinfo\"c\n\025DW_location_track_ans\022\'\n\010"
    "loc_info\030\001 \003(\0132\025.common.location_info\022!\n"
    "\006result\030\002 \001(\0132\021.common.errorinfo\"e\n\024DW_l"
    "ocation_info_ans\022*\n\017user_basic_info\030\001 \001("
    "\0132\021.common.user_info\022!\n\006result\030\002 \001(\0132\021.c"
    "ommon.errorinfo\"K\n\025DW_load_days_info_ans"
    "\022\020\n\010loadDays\030\001 \001(\005\022 \n\005error\030\002 \001(\0132\021.comm"
    "on.errorinfo\"c\n\024static_report_result\0224\n\013"
    "static_type\030\001 \001(\0162\037.DW_Location.static_r"
    "eport_type\022\025\n\rstatic_number\030\002 \001(\005\"B\n\021use"
    "r_profiles_ask\022-\n\nask_header\030\001 \001(\0132\031.com"
    "mon.common_ask_header\"\373\001\n\021user_profiles_"
    "ans\0228\n\rstatic_result\030\001 \003(\0132!.DW_Location"
    ".static_report_result\022(\n\003sex\030\002 \001(\0132\033.DW_"
    "Location.sex_proportion\022.\n\006degree\030\003 \001(\0132"
    "\036.DW_Location.degree_proportion\0220\n\temail"
    "list\030\004 \003(\0132\035.DW_Location.email_proportio"
    "n\022 \n\005error\030\005 \001(\0132\021.common.errorinfo\"Z\n\023u"
    "ser_basic_info_ask\022\024\n\014json_request\030\001 \001(\014"
    "\022-\n\nask_header\030\002 \001(\0132\031.common.common_ask"
    "_header\"Q\n\023user_basic_info_ans\022\025\n\rjson_r"
    "esponse\030\001 \001(\014\022#\n\006result\030\002 \001(\0132\023.common.r"
    "esult_info\"\263\001\n\025wei_dan_bao_base_info\022\026\n\016"
    "wei_dan_bao_id\030\001 \002(\t\022\030\n\020corporation_name"
    "\030\002 \002(\t\022\026\n\016create_user_id\030\003 \002(\t\022\027\n\017audit_"
    "pass_time\030\004 \002(\t\022\037\n\027guarantee_stacking_li"
    "ne\030\005 \002(\001\022\026\n\016guarantee_used\030\006 \002(\001\"J\n\031wei_"
    "dan_bao_base_info_ask\022-\n\nask_header\030\001 \001("
    "\0132\031.common.common_ask_header\"v\n\031wei_dan_"
    "bao_base_info_ans\022#\n\006result\030\001 \002(\0132\023.comm"
    "on.result_info\0224\n\010all_info\030\002 \003(\0132\".DW_Lo"
    "cation.wei_dan_bao_base_info\"h\n\030wei_dan_"
    "bao_success_info\022\025\n\rsuccess_count\030\001 \001(\005\022"
    "\026\n\016wei_dan_bao_id\030\002 \001(\t\022\035\n\025wei_dan_bao_c"
    "ity_name\030\003 \001(\t\"\263\001\n wei_dan_bao_all_succe"
    "ss_info_ask\022-\n\nask_header\030\001 \001(\0132\031.common"
    ".common_ask_header\022/\n\014request_type\030\002 \001(\016"
    "2\031.DW_Location.avg_suc_type\022\032\n\022all_wei_d"
    "an_bao_id\030\003 \003(\t\022\023\n\013days_before\030\004 \001(\005\"|\n "
    "wei_dan_bao_all_success_info_ans\022#\n\006resu"
    "lt\030\001 \001(\0132\023.common.result_info\0223\n\004info\030\002 "
    "\003(\0132%.DW_Location.wei_dan_bao_success_in"
    "fo\"\201\001\n\037guarantee_amount_use_score_info\022\026"
    "\n\016wei_dan_bao_id\030\001 \001(\014\022(\n cur_already_us"
    "e_guarantee_amount\030\002 \001(\014\022\034\n\024cur_guarante"
    "e_amount\030\003 \001(\014\"U\n\"avg_diligence_guarante"
    "e_score_info\022\026\n\016dan_bao_amount\030\001 \001(\002\022\027\n\017"
    "bid_loan_amount\030\002 \001(\002\"\177\n!avg_diligence_g"
    "uarantee_score_ask\022-\n\nask_header\030\001 \001(\0132\031"
    ".common.common_ask_header\022\026\n\016wei_dan_bao"
    "_id\030\002 \001(\014\022\023\n\013days_before\030\003 \001(\005\"\237\001\n!avg_d"
    "iligence_guarantee_score_ans\022#\n\006result\030\001"
    " \001(\0132\023.common.result_info\022\026\n\016wei_dan_bao"
    "_id\030\002 \001(\014\022=\n\004info\030\003 \003(\0132/.DW_Location.av"
    "g_diligence_guarantee_score_info\"|\n\036guar"
    "antee_amount_use_score_ask\022-\n\nask_header"
    "\030\001 \001(\0132\031.common.common_ask_header\022\026\n\016wei"
    "_dan_bao_id\030\002 \003(\014\022\023\n\013days_before\030\003 \001(\005\"\201"
    "\001\n\036guarantee_amount_use_score_ans\022#\n\006res"
    "ult\030\001 \001(\0132\023.common.result_info\022:\n\004info\030\002"
    " \003(\0132,.DW_Location.guarantee_amount_use_"
    "score_info\"\333\001\n\017rate_score_info\022\023\n\013kind_c"
    "ounts\030\001 \001(\005\022\035\n\025already_expires_count\030\002 \001"
    "(\005\022\023\n\013kind_amount\030\003 \001(\002\022\036\n\026already_expir"
    "es_amount\030\004 \001(\002\022\026\n\016wei_dan_bao_id\030\005 \001(\014\022"
    "\027\n\017max_expires_day\030\006 \001(\005\022.\n\010ans_type\030\007 \001"
    "(\0162\034.DW_Location.rate_score_type\"\240\001\n\016rat"
    "e_score_ask\022-\n\nask_header\030\001 \001(\0132\031.common"
    ".common_ask_header\0222\n\014request_type\030\002 \001(\016"
    "2\034.DW_Location.rate_score_type\022\026\n\016wei_da"
    "n_bao_id\030\003 \003(\014\022\023\n\013days_before\030\004 \001(\005\"a\n\016r"
    "ate_score_ans\022#\n\006result\030\001 \001(\0132\023.common.r"
    "esult_info\022*\n\004info\030\002 \003(\0132\034.DW_Location.r"
    "ate_score_info\"B\n\026covers_time_score_info"
    "\022\021\n\twhich_day\030\001 \001(\005\022\025\n\rcovers_period\030\002 \001"
    "(\005\"^\n\025covers_time_score_ask\022-\n\nask_heade"
    "r\030\001 \001(\0132\031.common.common_ask_header\022\026\n\016we"
    "i_dan_bao_id\030\002 \001(\014\"\272\001\n\025covers_time_score"
    "_ans\022#\n\006result\030\001 \001(\0132\023.common.result_inf"
    "o\0221\n\004info\030\002 \003(\0132#.DW_Location.covers_tim"
    "e_score_info\0221\n\004type\030\003 \001(\0162#.DW_Location"
    ".covers_time_score_type\022\026\n\016wei_dan_bao_i"
    "d\030\004 \001(\014\"v\n!follow_guarantee_invest_rank_"
    "info\022\026\n\016wei_dan_bao_id\030\001 \001(\014\022\034\n\024follow_d"
    "an_bao_count\030\002 \001(\005\022\033\n\023follow_tou_zi_coun"
    "t\030\003 \001(\005\"i\n follow_guarantee_invest_rank_"
    "ask\022-\n\nask_header\030\001 \001(\0132\031.common.common_"
    "ask_header\022\026\n\016wei_dan_bao_id\030\002 \003(\014\"\205\001\n f"
    "ollow_guarantee_invest_rank_ans\022#\n\006resul"
    "t\030\001 \001(\0132\023.common.result_info\022<\n\004info\030\002 \003"
    "(\0132..DW_Location.follow_guarantee_invest"
    "_rank_info\"j\n\034borrower_evaluate_score_in"
    "fo\022\026\n\016wei_dan_bao_id\030\001 \001(\014\022\026\n\016borrower_s"
    "core\030\002 \001(\002\022\032\n\022evaluate_total_num\030\003 \001(\005\"d"
    "\n\033borrower_evaluate_score_ask\022-\n\nask_hea"
    "der\030\001 \001(\0132\031.common.common_ask_header\022\026\n\016"
    "wei_dan_bao_id\030\002 \003(\014\"{\n\033borrower_evaluat"
    "e_score_ans\022#\n\006result\030\001 \001(\0132\023.common.res"
    "ult_info\0227\n\004info\030\002 \003(\0132).DW_Location.bor"
    "rower_evaluate_score_info\"y\n\031diligence_p"
    "ass_score_info\022\026\n\016wei_dan_bao_id\030\001 \001(\014\022 "
    "\n\030passed_diligence_numbers\030\002 \001(\005\022\"\n\032comm"
    "it_diligence_total_num\030\003 \001(\005\"a\n\030diligenc"
    "e_pass_score_ask\022-\n\nask_header\030\001 \001(\0132\031.c"
    "ommon.common_ask_header\022\026\n\016wei_dan_bao_i"
    "d\030\002 \003(\014\"u\n\030diligence_pass_score_ans\022#\n\006r"
    "esult\030\001 \001(\0132\023.common.result_info\0224\n\004info"
    "\030\002 \003(\0132&.DW_Location.diligence_pass_scor"
    "e_info\"\266\001\n\037blacklist_contacts_coincide_a"
    "sk\022-\n\nask_header\030\001 \001(\0132\031.common.common_a"
    "sk_header\022\026\n\016blacklist_type\030\002 \001(\005\022\026\n\016coi"
    "ncide_value\030\003 \001(\002\0224\n\tuser_info\030\004 \001(\0132!.c"
    "ommon.user_basic_identification\"_\n\037black"
    "list_contacts_coincide_ans\022\027\n\017is_black_f"
    "riend\030\001 \001(\010\022#\n\006result\030\002 \001(\0132\023.common.res"
    "ult_info\"T\n\022batch_userinfo_ask\022-\n\nask_he"
    "ader\030\001 \001(\0132\031.common.common_ask_header\022\017\n"
    "\007user_id\030\002 \003(\014\"\205\001\n\020chatlog_userinfo\022\021\n\tr"
    "eal_name\030\001 \001(\014\022\024\n\014mobile_phone\030\002 \001(\014\022\025\n\r"
    "identity_card\030\003 \001(\014\022\020\n\010nickname\030\004 \001(\014\022\016\n"
    "\006avatar\030\005 \001(\014\022\017\n\007user_id\030\006 \001(\014\"k\n\022batch_"
    "userinfo_ans\0220\n\tinfo_list\030\001 \003(\0132\035.DW_Loc"
    "ation.chatlog_userinfo\022#\n\006result\030\002 \001(\0132\023"
    ".common.result_info*e\n\013DW_ask_type\022\023\n\017ba"
    "tch_user_info\020\001\022\027\n\023user_location_track\020\002"
    "\022\024\n\020user_basic_info_\020\003\022\022\n\016user_load_days"
    "\020\004*S\n\rplatform_type\022\017\n\013niiwoo_type\020\001\022\020\n\014"
    "tuandai_type\020\002\022\r\n\tboth_type\020\003\022\020\n\014neither"
    "_type\020\004*c\n\014overdue_type\022\027\n\023borrow_overdu"
    "e_type\020\001\022\027\n\023dianfu_overdue_type\020\002\022\020\n\014bot"
    "h_overdue\020\003\022\017\n\013not_overdue\020\004*\320\001\n\022static_"
    "report_type\022\022\n\016user_total_num\020\000\022\027\n\023phone"
    "_bind_user_num\020\001\022\032\n\026realname_auth_user_n"
    "um\020\002\022\021\n\rloan_user_num\020\003\022\023\n\017money_dabao_n"
    "um\020\004\022\025\n\021money_xiaobao_num\020\005\022\023\n\017sesame_nu"
    "m_type\020\006\022\016\n\ndegree_num\020\007\022\r\n\temail_num\020\010*"
    "J\n\014avg_suc_type\022\034\n\030month_suc_diligence_t"
    "ype\020\001\022\034\n\030month_suc_guarantee_type\020\002*w\n\017r"
    "ate_score_type\022\024\n\020cur_overdue_type\020\001\022\024\n\020"
    "cur_baddebt_type\020\002\022\033\n\027accumulate_overdue"
    "_type\020\003\022\033\n\027accumulate_baddebt_type\020\004*}\n\026"
    "covers_time_score_type\022\023\n\017not_expired_bi"
    "d\020\001\022\027\n\023expired_not_overdue\020\002\022\037\n\033borrower"
    "overduebutnotdianfu\020\003\022\024\n\020never_not_dianf"
    "u\020\004", 8443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DW_Location.proto", &protobuf_RegisterTypes);
  user_identification_list::default_instance_ = new user_identification_list();
  user_overdue_info::default_instance_ = new user_overdue_info();
  LandedAccount::default_instance_ = new LandedAccount();
  yuliu_common_user_info::default_instance_ = new yuliu_common_user_info();
  yuliu_platform_user_info::default_instance_ = new yuliu_platform_user_info();
  platform_register_user_info::default_instance_ = new platform_register_user_info();
  TerminalContactList::default_instance_ = new TerminalContactList();
  sex_proportion::default_instance_ = new sex_proportion();
  degree_proportion::default_instance_ = new degree_proportion();
  email_proportion::default_instance_ = new email_proportion();
  MobilePhoneListExt_ask::default_instance_ = new MobilePhoneListExt_ask();
  MobilePhoneListExt_ans::default_instance_ = new MobilePhoneListExt_ans();
  adressbook_chonghe_rate_info::default_instance_ = new adressbook_chonghe_rate_info();
  adressbook_chonghe_rate_ask::default_instance_ = new adressbook_chonghe_rate_ask();
  adressbook_chonghe_rate_ans::default_instance_ = new adressbook_chonghe_rate_ans();
  DW_userinfo_ask::default_instance_ = new DW_userinfo_ask();
  DW_userinfo_ans::default_instance_ = new DW_userinfo_ans();
  DW_location_track_ans::default_instance_ = new DW_location_track_ans();
  DW_location_info_ans::default_instance_ = new DW_location_info_ans();
  DW_load_days_info_ans::default_instance_ = new DW_load_days_info_ans();
  static_report_result::default_instance_ = new static_report_result();
  user_profiles_ask::default_instance_ = new user_profiles_ask();
  user_profiles_ans::default_instance_ = new user_profiles_ans();
  user_basic_info_ask::default_instance_ = new user_basic_info_ask();
  user_basic_info_ans::default_instance_ = new user_basic_info_ans();
  wei_dan_bao_base_info::default_instance_ = new wei_dan_bao_base_info();
  wei_dan_bao_base_info_ask::default_instance_ = new wei_dan_bao_base_info_ask();
  wei_dan_bao_base_info_ans::default_instance_ = new wei_dan_bao_base_info_ans();
  wei_dan_bao_success_info::default_instance_ = new wei_dan_bao_success_info();
  wei_dan_bao_all_success_info_ask::default_instance_ = new wei_dan_bao_all_success_info_ask();
  wei_dan_bao_all_success_info_ans::default_instance_ = new wei_dan_bao_all_success_info_ans();
  guarantee_amount_use_score_info::default_instance_ = new guarantee_amount_use_score_info();
  avg_diligence_guarantee_score_info::default_instance_ = new avg_diligence_guarantee_score_info();
  avg_diligence_guarantee_score_ask::default_instance_ = new avg_diligence_guarantee_score_ask();
  avg_diligence_guarantee_score_ans::default_instance_ = new avg_diligence_guarantee_score_ans();
  guarantee_amount_use_score_ask::default_instance_ = new guarantee_amount_use_score_ask();
  guarantee_amount_use_score_ans::default_instance_ = new guarantee_amount_use_score_ans();
  rate_score_info::default_instance_ = new rate_score_info();
  rate_score_ask::default_instance_ = new rate_score_ask();
  rate_score_ans::default_instance_ = new rate_score_ans();
  covers_time_score_info::default_instance_ = new covers_time_score_info();
  covers_time_score_ask::default_instance_ = new covers_time_score_ask();
  covers_time_score_ans::default_instance_ = new covers_time_score_ans();
  follow_guarantee_invest_rank_info::default_instance_ = new follow_guarantee_invest_rank_info();
  follow_guarantee_invest_rank_ask::default_instance_ = new follow_guarantee_invest_rank_ask();
  follow_guarantee_invest_rank_ans::default_instance_ = new follow_guarantee_invest_rank_ans();
  borrower_evaluate_score_info::default_instance_ = new borrower_evaluate_score_info();
  borrower_evaluate_score_ask::default_instance_ = new borrower_evaluate_score_ask();
  borrower_evaluate_score_ans::default_instance_ = new borrower_evaluate_score_ans();
  diligence_pass_score_info::default_instance_ = new diligence_pass_score_info();
  diligence_pass_score_ask::default_instance_ = new diligence_pass_score_ask();
  diligence_pass_score_ans::default_instance_ = new diligence_pass_score_ans();
  blacklist_contacts_coincide_ask::default_instance_ = new blacklist_contacts_coincide_ask();
  blacklist_contacts_coincide_ans::default_instance_ = new blacklist_contacts_coincide_ans();
  batch_userinfo_ask::default_instance_ = new batch_userinfo_ask();
  chatlog_userinfo::default_instance_ = new chatlog_userinfo();
  batch_userinfo_ans::default_instance_ = new batch_userinfo_ans();
  user_identification_list::default_instance_->InitAsDefaultInstance();
  user_overdue_info::default_instance_->InitAsDefaultInstance();
  LandedAccount::default_instance_->InitAsDefaultInstance();
  yuliu_common_user_info::default_instance_->InitAsDefaultInstance();
  yuliu_platform_user_info::default_instance_->InitAsDefaultInstance();
  platform_register_user_info::default_instance_->InitAsDefaultInstance();
  TerminalContactList::default_instance_->InitAsDefaultInstance();
  sex_proportion::default_instance_->InitAsDefaultInstance();
  degree_proportion::default_instance_->InitAsDefaultInstance();
  email_proportion::default_instance_->InitAsDefaultInstance();
  MobilePhoneListExt_ask::default_instance_->InitAsDefaultInstance();
  MobilePhoneListExt_ans::default_instance_->InitAsDefaultInstance();
  adressbook_chonghe_rate_info::default_instance_->InitAsDefaultInstance();
  adressbook_chonghe_rate_ask::default_instance_->InitAsDefaultInstance();
  adressbook_chonghe_rate_ans::default_instance_->InitAsDefaultInstance();
  DW_userinfo_ask::default_instance_->InitAsDefaultInstance();
  DW_userinfo_ans::default_instance_->InitAsDefaultInstance();
  DW_location_track_ans::default_instance_->InitAsDefaultInstance();
  DW_location_info_ans::default_instance_->InitAsDefaultInstance();
  DW_load_days_info_ans::default_instance_->InitAsDefaultInstance();
  static_report_result::default_instance_->InitAsDefaultInstance();
  user_profiles_ask::default_instance_->InitAsDefaultInstance();
  user_profiles_ans::default_instance_->InitAsDefaultInstance();
  user_basic_info_ask::default_instance_->InitAsDefaultInstance();
  user_basic_info_ans::default_instance_->InitAsDefaultInstance();
  wei_dan_bao_base_info::default_instance_->InitAsDefaultInstance();
  wei_dan_bao_base_info_ask::default_instance_->InitAsDefaultInstance();
  wei_dan_bao_base_info_ans::default_instance_->InitAsDefaultInstance();
  wei_dan_bao_success_info::default_instance_->InitAsDefaultInstance();
  wei_dan_bao_all_success_info_ask::default_instance_->InitAsDefaultInstance();
  wei_dan_bao_all_success_info_ans::default_instance_->InitAsDefaultInstance();
  guarantee_amount_use_score_info::default_instance_->InitAsDefaultInstance();
  avg_diligence_guarantee_score_info::default_instance_->InitAsDefaultInstance();
  avg_diligence_guarantee_score_ask::default_instance_->InitAsDefaultInstance();
  avg_diligence_guarantee_score_ans::default_instance_->InitAsDefaultInstance();
  guarantee_amount_use_score_ask::default_instance_->InitAsDefaultInstance();
  guarantee_amount_use_score_ans::default_instance_->InitAsDefaultInstance();
  rate_score_info::default_instance_->InitAsDefaultInstance();
  rate_score_ask::default_instance_->InitAsDefaultInstance();
  rate_score_ans::default_instance_->InitAsDefaultInstance();
  covers_time_score_info::default_instance_->InitAsDefaultInstance();
  covers_time_score_ask::default_instance_->InitAsDefaultInstance();
  covers_time_score_ans::default_instance_->InitAsDefaultInstance();
  follow_guarantee_invest_rank_info::default_instance_->InitAsDefaultInstance();
  follow_guarantee_invest_rank_ask::default_instance_->InitAsDefaultInstance();
  follow_guarantee_invest_rank_ans::default_instance_->InitAsDefaultInstance();
  borrower_evaluate_score_info::default_instance_->InitAsDefaultInstance();
  borrower_evaluate_score_ask::default_instance_->InitAsDefaultInstance();
  borrower_evaluate_score_ans::default_instance_->InitAsDefaultInstance();
  diligence_pass_score_info::default_instance_->InitAsDefaultInstance();
  diligence_pass_score_ask::default_instance_->InitAsDefaultInstance();
  diligence_pass_score_ans::default_instance_->InitAsDefaultInstance();
  blacklist_contacts_coincide_ask::default_instance_->InitAsDefaultInstance();
  blacklist_contacts_coincide_ans::default_instance_->InitAsDefaultInstance();
  batch_userinfo_ask::default_instance_->InitAsDefaultInstance();
  chatlog_userinfo::default_instance_->InitAsDefaultInstance();
  batch_userinfo_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DW_5fLocation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DW_5fLocation_2eproto {
  StaticDescriptorInitializer_DW_5fLocation_2eproto() {
    protobuf_AddDesc_DW_5fLocation_2eproto();
  }
} static_descriptor_initializer_DW_5fLocation_2eproto_;
const ::google::protobuf::EnumDescriptor* DW_ask_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DW_ask_type_descriptor_;
}
bool DW_ask_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* platform_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_type_descriptor_;
}
bool platform_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* overdue_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return overdue_type_descriptor_;
}
bool overdue_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* static_report_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return static_report_type_descriptor_;
}
bool static_report_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* avg_suc_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avg_suc_type_descriptor_;
}
bool avg_suc_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rate_score_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rate_score_type_descriptor_;
}
bool rate_score_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* covers_time_score_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return covers_time_score_type_descriptor_;
}
bool covers_time_score_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int user_identification_list::kUserInfoListFieldNumber;
#endif  // !_MSC_VER

user_identification_list::user_identification_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.user_identification_list)
}

void user_identification_list::InitAsDefaultInstance() {
}

user_identification_list::user_identification_list(const user_identification_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.user_identification_list)
}

void user_identification_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_identification_list::~user_identification_list() {
  // @@protoc_insertion_point(destructor:DW_Location.user_identification_list)
  SharedDtor();
}

void user_identification_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_identification_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_identification_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_identification_list_descriptor_;
}

const user_identification_list& user_identification_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

user_identification_list* user_identification_list::default_instance_ = NULL;

user_identification_list* user_identification_list::New() const {
  return new user_identification_list;
}

void user_identification_list::Clear() {
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_identification_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.user_identification_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.user_basic_identification user_info_list = 1;
      case 1: {
        if (tag == 10) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_info_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.user_identification_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.user_identification_list)
  return false;
#undef DO_
}

void user_identification_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.user_identification_list)
  // repeated .common.user_basic_identification user_info_list = 1;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.user_identification_list)
}

::google::protobuf::uint8* user_identification_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.user_identification_list)
  // repeated .common.user_basic_identification user_info_list = 1;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.user_identification_list)
  return target;
}

int user_identification_list::ByteSize() const {
  int total_size = 0;

  // repeated .common.user_basic_identification user_info_list = 1;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_identification_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_identification_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_identification_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_identification_list::MergeFrom(const user_identification_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_identification_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_identification_list::CopyFrom(const user_identification_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_identification_list::IsInitialized() const {

  return true;
}

void user_identification_list::Swap(user_identification_list* other) {
  if (other != this) {
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_identification_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_identification_list_descriptor_;
  metadata.reflection = user_identification_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_overdue_info::kUserInfoFieldNumber;
const int user_overdue_info::kIsLoanOverdueFieldNumber;
const int user_overdue_info::kIsAssureOverdueFieldNumber;
#endif  // !_MSC_VER

user_overdue_info::user_overdue_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.user_overdue_info)
}

void user_overdue_info::InitAsDefaultInstance() {
  user_info_ = const_cast< ::common::user_basic_identification*>(&::common::user_basic_identification::default_instance());
}

user_overdue_info::user_overdue_info(const user_overdue_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.user_overdue_info)
}

void user_overdue_info::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  is_loan_overdue_ = false;
  is_assure_overdue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_overdue_info::~user_overdue_info() {
  // @@protoc_insertion_point(destructor:DW_Location.user_overdue_info)
  SharedDtor();
}

void user_overdue_info::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
  }
}

void user_overdue_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_overdue_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_overdue_info_descriptor_;
}

const user_overdue_info& user_overdue_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

user_overdue_info* user_overdue_info::default_instance_ = NULL;

user_overdue_info* user_overdue_info::New() const {
  return new user_overdue_info;
}

void user_overdue_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_overdue_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_loan_overdue_, is_assure_overdue_);
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::common::user_basic_identification::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_overdue_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.user_overdue_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.user_basic_identification user_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_loan_overdue;
        break;
      }

      // optional bool is_loan_overdue = 2;
      case 2: {
        if (tag == 16) {
         parse_is_loan_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_loan_overdue_)));
          set_has_is_loan_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_assure_overdue;
        break;
      }

      // optional bool is_assure_overdue = 3;
      case 3: {
        if (tag == 24) {
         parse_is_assure_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assure_overdue_)));
          set_has_is_assure_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.user_overdue_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.user_overdue_info)
  return false;
#undef DO_
}

void user_overdue_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.user_overdue_info)
  // optional .common.user_basic_identification user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // optional bool is_loan_overdue = 2;
  if (has_is_loan_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_loan_overdue(), output);
  }

  // optional bool is_assure_overdue = 3;
  if (has_is_assure_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_assure_overdue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.user_overdue_info)
}

::google::protobuf::uint8* user_overdue_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.user_overdue_info)
  // optional .common.user_basic_identification user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // optional bool is_loan_overdue = 2;
  if (has_is_loan_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_loan_overdue(), target);
  }

  // optional bool is_assure_overdue = 3;
  if (has_is_assure_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_assure_overdue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.user_overdue_info)
  return target;
}

int user_overdue_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.user_basic_identification user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional bool is_loan_overdue = 2;
    if (has_is_loan_overdue()) {
      total_size += 1 + 1;
    }

    // optional bool is_assure_overdue = 3;
    if (has_is_assure_overdue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_overdue_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_overdue_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_overdue_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_overdue_info::MergeFrom(const user_overdue_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::common::user_basic_identification::MergeFrom(from.user_info());
    }
    if (from.has_is_loan_overdue()) {
      set_is_loan_overdue(from.is_loan_overdue());
    }
    if (from.has_is_assure_overdue()) {
      set_is_assure_overdue(from.is_assure_overdue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_overdue_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_overdue_info::CopyFrom(const user_overdue_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_overdue_info::IsInitialized() const {

  return true;
}

void user_overdue_info::Swap(user_overdue_info* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(is_loan_overdue_, other->is_loan_overdue_);
    std::swap(is_assure_overdue_, other->is_assure_overdue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_overdue_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_overdue_info_descriptor_;
  metadata.reflection = user_overdue_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandedAccount::kMobilephoneFieldNumber;
const int LandedAccount::kIdentityCardFieldNumber;
const int LandedAccount::kRealNameFieldNumber;
const int LandedAccount::kLastLoginTimeFieldNumber;
#endif  // !_MSC_VER

LandedAccount::LandedAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.LandedAccount)
}

void LandedAccount::InitAsDefaultInstance() {
}

LandedAccount::LandedAccount(const LandedAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.LandedAccount)
}

void LandedAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandedAccount::~LandedAccount() {
  // @@protoc_insertion_point(destructor:DW_Location.LandedAccount)
  SharedDtor();
}

void LandedAccount::SharedDtor() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (this != default_instance_) {
  }
}

void LandedAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandedAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandedAccount_descriptor_;
}

const LandedAccount& LandedAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

LandedAccount* LandedAccount::default_instance_ = NULL;

LandedAccount* LandedAccount::New() const {
  return new LandedAccount;
}

void LandedAccount::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_last_login_time()) {
      if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_login_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandedAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.LandedAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mobilephone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_login_time;
        break;
      }

      // optional bytes last_login_time = 4;
      case 4: {
        if (tag == 34) {
         parse_last_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_login_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.LandedAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.LandedAccount)
  return false;
#undef DO_
}

void LandedAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.LandedAccount)
  // optional bytes mobilephone = 1;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->mobilephone(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional bytes last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->last_login_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.LandedAccount)
}

::google::protobuf::uint8* LandedAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.LandedAccount)
  // optional bytes mobilephone = 1;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mobilephone(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional bytes last_login_time = 4;
  if (has_last_login_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->last_login_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.LandedAccount)
  return target;
}

int LandedAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mobilephone = 1;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_login_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandedAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandedAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandedAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandedAccount::MergeFrom(const LandedAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandedAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandedAccount::CopyFrom(const LandedAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandedAccount::IsInitialized() const {

  return true;
}

void LandedAccount::Swap(LandedAccount* other) {
  if (other != this) {
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandedAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandedAccount_descriptor_;
  metadata.reflection = LandedAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yuliu_common_user_info::kNameFieldNumber;
const int yuliu_common_user_info::kPhoneNumFieldNumber;
const int yuliu_common_user_info::kRelationFieldNumber;
#endif  // !_MSC_VER

yuliu_common_user_info::yuliu_common_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.yuliu_common_user_info)
}

void yuliu_common_user_info::InitAsDefaultInstance() {
}

yuliu_common_user_info::yuliu_common_user_info(const yuliu_common_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.yuliu_common_user_info)
}

void yuliu_common_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yuliu_common_user_info::~yuliu_common_user_info() {
  // @@protoc_insertion_point(destructor:DW_Location.yuliu_common_user_info)
  SharedDtor();
}

void yuliu_common_user_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relation_;
  }
  if (this != default_instance_) {
  }
}

void yuliu_common_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yuliu_common_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yuliu_common_user_info_descriptor_;
}

const yuliu_common_user_info& yuliu_common_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

yuliu_common_user_info* yuliu_common_user_info::default_instance_ = NULL;

yuliu_common_user_info* yuliu_common_user_info::New() const {
  return new yuliu_common_user_info;
}

void yuliu_common_user_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_num_->clear();
      }
    }
    if (has_relation()) {
      if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yuliu_common_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.yuliu_common_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional bytes phone_num = 2;
      case 2: {
        if (tag == 18) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relation;
        break;
      }

      // optional bytes relation = 3;
      case 3: {
        if (tag == 26) {
         parse_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.yuliu_common_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.yuliu_common_user_info)
  return false;
#undef DO_
}

void yuliu_common_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.yuliu_common_user_info)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone_num(), output);
  }

  // optional bytes relation = 3;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.yuliu_common_user_info)
}

::google::protobuf::uint8* yuliu_common_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.yuliu_common_user_info)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone_num(), target);
  }

  // optional bytes relation = 3;
  if (has_relation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.yuliu_common_user_info)
  return target;
}

int yuliu_common_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_num());
    }

    // optional bytes relation = 3;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yuliu_common_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yuliu_common_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yuliu_common_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yuliu_common_user_info::MergeFrom(const yuliu_common_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yuliu_common_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yuliu_common_user_info::CopyFrom(const yuliu_common_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yuliu_common_user_info::IsInitialized() const {

  return true;
}

void yuliu_common_user_info::Swap(yuliu_common_user_info* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yuliu_common_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yuliu_common_user_info_descriptor_;
  metadata.reflection = yuliu_common_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yuliu_platform_user_info::kAvatarFieldNumber;
const int yuliu_platform_user_info::kUserNicknameFieldNumber;
const int yuliu_platform_user_info::kRealNameFieldNumber;
const int yuliu_platform_user_info::kSexTypeFieldNumber;
const int yuliu_platform_user_info::kTypeFieldNumber;
const int yuliu_platform_user_info::kChongheRateFieldNumber;
const int yuliu_platform_user_info::kIsInAdressbookFieldNumber;
const int yuliu_platform_user_info::kAdressbookRemarkNameFieldNumber;
const int yuliu_platform_user_info::kCommInfoFieldNumber;
#endif  // !_MSC_VER

yuliu_platform_user_info::yuliu_platform_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.yuliu_platform_user_info)
}

void yuliu_platform_user_info::InitAsDefaultInstance() {
  comm_info_ = const_cast< ::DW_Location::yuliu_common_user_info*>(&::DW_Location::yuliu_common_user_info::default_instance());
}

yuliu_platform_user_info::yuliu_platform_user_info(const yuliu_platform_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.yuliu_platform_user_info)
}

void yuliu_platform_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_type_ = 1;
  type_ = 1;
  chonghe_rate_ = 0;
  is_in_adressbook_ = false;
  adressbook_remark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comm_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yuliu_platform_user_info::~yuliu_platform_user_info() {
  // @@protoc_insertion_point(destructor:DW_Location.yuliu_platform_user_info)
  SharedDtor();
}

void yuliu_platform_user_info::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_remark_name_;
  }
  if (this != default_instance_) {
    delete comm_info_;
  }
}

void yuliu_platform_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yuliu_platform_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yuliu_platform_user_info_descriptor_;
}

const yuliu_platform_user_info& yuliu_platform_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

yuliu_platform_user_info* yuliu_platform_user_info::default_instance_ = NULL;

yuliu_platform_user_info* yuliu_platform_user_info::New() const {
  return new yuliu_platform_user_info;
}

void yuliu_platform_user_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<yuliu_platform_user_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(chonghe_rate_, is_in_adressbook_);
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_user_nickname()) {
      if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nickname_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    sex_type_ = 1;
    type_ = 1;
    if (has_adressbook_remark_name()) {
      if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adressbook_remark_name_->clear();
      }
    }
  }
  if (has_comm_info()) {
    if (comm_info_ != NULL) comm_info_->::DW_Location::yuliu_common_user_info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yuliu_platform_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.yuliu_platform_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes avatar = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_nickname;
        break;
      }

      // optional bytes user_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_user_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex_type;
        break;
      }

      // optional .common.sex sex_type = 4;
      case 4: {
        if (tag == 32) {
         parse_sex_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex_type(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .DW_Location.overdue_type type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::overdue_type_IsValid(value)) {
            set_type(static_cast< ::DW_Location::overdue_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_chonghe_rate;
        break;
      }

      // optional float chonghe_rate = 6;
      case 6: {
        if (tag == 53) {
         parse_chonghe_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chonghe_rate_)));
          set_has_chonghe_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_in_adressbook;
        break;
      }

      // optional bool is_in_adressbook = 7;
      case 7: {
        if (tag == 56) {
         parse_is_in_adressbook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_adressbook_)));
          set_has_is_in_adressbook();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_adressbook_remark_name;
        break;
      }

      // optional bytes adressbook_remark_name = 8;
      case 8: {
        if (tag == 66) {
         parse_adressbook_remark_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adressbook_remark_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_comm_info;
        break;
      }

      // optional .DW_Location.yuliu_common_user_info comm_info = 9;
      case 9: {
        if (tag == 74) {
         parse_comm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.yuliu_platform_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.yuliu_platform_user_info)
  return false;
#undef DO_
}

void yuliu_platform_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.yuliu_platform_user_info)
  // optional bytes avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->avatar(), output);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_nickname(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional .common.sex sex_type = 4;
  if (has_sex_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sex_type(), output);
  }

  // optional .DW_Location.overdue_type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional float chonghe_rate = 6;
  if (has_chonghe_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->chonghe_rate(), output);
  }

  // optional bool is_in_adressbook = 7;
  if (has_is_in_adressbook()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_in_adressbook(), output);
  }

  // optional bytes adressbook_remark_name = 8;
  if (has_adressbook_remark_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->adressbook_remark_name(), output);
  }

  // optional .DW_Location.yuliu_common_user_info comm_info = 9;
  if (has_comm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->comm_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.yuliu_platform_user_info)
}

::google::protobuf::uint8* yuliu_platform_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.yuliu_platform_user_info)
  // optional bytes avatar = 1;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->avatar(), target);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_nickname(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional .common.sex sex_type = 4;
  if (has_sex_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sex_type(), target);
  }

  // optional .DW_Location.overdue_type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional float chonghe_rate = 6;
  if (has_chonghe_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->chonghe_rate(), target);
  }

  // optional bool is_in_adressbook = 7;
  if (has_is_in_adressbook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_in_adressbook(), target);
  }

  // optional bytes adressbook_remark_name = 8;
  if (has_adressbook_remark_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->adressbook_remark_name(), target);
  }

  // optional .DW_Location.yuliu_common_user_info comm_info = 9;
  if (has_comm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->comm_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.yuliu_platform_user_info)
  return target;
}

int yuliu_platform_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes user_nickname = 2;
    if (has_user_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nickname());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional .common.sex sex_type = 4;
    if (has_sex_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex_type());
    }

    // optional .DW_Location.overdue_type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float chonghe_rate = 6;
    if (has_chonghe_rate()) {
      total_size += 1 + 4;
    }

    // optional bool is_in_adressbook = 7;
    if (has_is_in_adressbook()) {
      total_size += 1 + 1;
    }

    // optional bytes adressbook_remark_name = 8;
    if (has_adressbook_remark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->adressbook_remark_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DW_Location.yuliu_common_user_info comm_info = 9;
    if (has_comm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comm_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yuliu_platform_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yuliu_platform_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yuliu_platform_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yuliu_platform_user_info::MergeFrom(const yuliu_platform_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_user_nickname()) {
      set_user_nickname(from.user_nickname());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_sex_type()) {
      set_sex_type(from.sex_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chonghe_rate()) {
      set_chonghe_rate(from.chonghe_rate());
    }
    if (from.has_is_in_adressbook()) {
      set_is_in_adressbook(from.is_in_adressbook());
    }
    if (from.has_adressbook_remark_name()) {
      set_adressbook_remark_name(from.adressbook_remark_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comm_info()) {
      mutable_comm_info()->::DW_Location::yuliu_common_user_info::MergeFrom(from.comm_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yuliu_platform_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yuliu_platform_user_info::CopyFrom(const yuliu_platform_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yuliu_platform_user_info::IsInitialized() const {

  return true;
}

void yuliu_platform_user_info::Swap(yuliu_platform_user_info* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(user_nickname_, other->user_nickname_);
    std::swap(real_name_, other->real_name_);
    std::swap(sex_type_, other->sex_type_);
    std::swap(type_, other->type_);
    std::swap(chonghe_rate_, other->chonghe_rate_);
    std::swap(is_in_adressbook_, other->is_in_adressbook_);
    std::swap(adressbook_remark_name_, other->adressbook_remark_name_);
    std::swap(comm_info_, other->comm_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yuliu_platform_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yuliu_platform_user_info_descriptor_;
  metadata.reflection = yuliu_platform_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int platform_register_user_info::kAdressbookNameFieldNumber;
const int platform_register_user_info::kPhoneNumFieldNumber;
const int platform_register_user_info::kPlatfomTypeEnumFieldNumber;
const int platform_register_user_info::kOverdueTypeEnumFieldNumber;
#endif  // !_MSC_VER

platform_register_user_info::platform_register_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.platform_register_user_info)
}

void platform_register_user_info::InitAsDefaultInstance() {
}

platform_register_user_info::platform_register_user_info(const platform_register_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.platform_register_user_info)
}

void platform_register_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adressbook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platfom_type_enum_ = 1;
  overdue_type_enum_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

platform_register_user_info::~platform_register_user_info() {
  // @@protoc_insertion_point(destructor:DW_Location.platform_register_user_info)
  SharedDtor();
}

void platform_register_user_info::SharedDtor() {
  if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_name_;
  }
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (this != default_instance_) {
  }
}

void platform_register_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* platform_register_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_register_user_info_descriptor_;
}

const platform_register_user_info& platform_register_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

platform_register_user_info* platform_register_user_info::default_instance_ = NULL;

platform_register_user_info* platform_register_user_info::New() const {
  return new platform_register_user_info;
}

void platform_register_user_info::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_adressbook_name()) {
      if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adressbook_name_->clear();
      }
    }
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_num_->clear();
      }
    }
    platfom_type_enum_ = 1;
    overdue_type_enum_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool platform_register_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.platform_register_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes adressbook_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adressbook_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional bytes phone_num = 2;
      case 2: {
        if (tag == 18) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platfom_type_enum;
        break;
      }

      // optional .DW_Location.platform_type platfom_type_enum = 3;
      case 3: {
        if (tag == 24) {
         parse_platfom_type_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::platform_type_IsValid(value)) {
            set_platfom_type_enum(static_cast< ::DW_Location::platform_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overdue_type_enum;
        break;
      }

      // optional .DW_Location.overdue_type overdue_type_enum = 4;
      case 4: {
        if (tag == 32) {
         parse_overdue_type_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::overdue_type_IsValid(value)) {
            set_overdue_type_enum(static_cast< ::DW_Location::overdue_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.platform_register_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.platform_register_user_info)
  return false;
#undef DO_
}

void platform_register_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.platform_register_user_info)
  // optional bytes adressbook_name = 1;
  if (has_adressbook_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->adressbook_name(), output);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone_num(), output);
  }

  // optional .DW_Location.platform_type platfom_type_enum = 3;
  if (has_platfom_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platfom_type_enum(), output);
  }

  // optional .DW_Location.overdue_type overdue_type_enum = 4;
  if (has_overdue_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->overdue_type_enum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.platform_register_user_info)
}

::google::protobuf::uint8* platform_register_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.platform_register_user_info)
  // optional bytes adressbook_name = 1;
  if (has_adressbook_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->adressbook_name(), target);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone_num(), target);
  }

  // optional .DW_Location.platform_type platfom_type_enum = 3;
  if (has_platfom_type_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platfom_type_enum(), target);
  }

  // optional .DW_Location.overdue_type overdue_type_enum = 4;
  if (has_overdue_type_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->overdue_type_enum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.platform_register_user_info)
  return target;
}

int platform_register_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes adressbook_name = 1;
    if (has_adressbook_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->adressbook_name());
    }

    // optional bytes phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_num());
    }

    // optional .DW_Location.platform_type platfom_type_enum = 3;
    if (has_platfom_type_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platfom_type_enum());
    }

    // optional .DW_Location.overdue_type overdue_type_enum = 4;
    if (has_overdue_type_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->overdue_type_enum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void platform_register_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const platform_register_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const platform_register_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void platform_register_user_info::MergeFrom(const platform_register_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adressbook_name()) {
      set_adressbook_name(from.adressbook_name());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_platfom_type_enum()) {
      set_platfom_type_enum(from.platfom_type_enum());
    }
    if (from.has_overdue_type_enum()) {
      set_overdue_type_enum(from.overdue_type_enum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void platform_register_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform_register_user_info::CopyFrom(const platform_register_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform_register_user_info::IsInitialized() const {

  return true;
}

void platform_register_user_info::Swap(platform_register_user_info* other) {
  if (other != this) {
    std::swap(adressbook_name_, other->adressbook_name_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(platfom_type_enum_, other->platfom_type_enum_);
    std::swap(overdue_type_enum_, other->overdue_type_enum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata platform_register_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = platform_register_user_info_descriptor_;
  metadata.reflection = platform_register_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminalContactList::kImeiFieldNumber;
const int TerminalContactList::kMobileBrandFieldNumber;
const int TerminalContactList::kIscommonFieldNumber;
const int TerminalContactList::kConstactsFieldNumber;
const int TerminalContactList::kLandedAccountFieldNumber;
const int TerminalContactList::kPlatformRegisterUserFieldNumber;
#endif  // !_MSC_VER

TerminalContactList::TerminalContactList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.TerminalContactList)
}

void TerminalContactList::InitAsDefaultInstance() {
}

TerminalContactList::TerminalContactList(const TerminalContactList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.TerminalContactList)
}

void TerminalContactList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iscommon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminalContactList::~TerminalContactList() {
  // @@protoc_insertion_point(destructor:DW_Location.TerminalContactList)
  SharedDtor();
}

void TerminalContactList::SharedDtor() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (mobile_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_brand_;
  }
  if (this != default_instance_) {
  }
}

void TerminalContactList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminalContactList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminalContactList_descriptor_;
}

const TerminalContactList& TerminalContactList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

TerminalContactList* TerminalContactList::default_instance_ = NULL;

TerminalContactList* TerminalContactList::New() const {
  return new TerminalContactList;
}

void TerminalContactList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_mobile_brand()) {
      if (mobile_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_brand_->clear();
      }
    }
    iscommon_ = 0;
  }
  constacts_.Clear();
  landed_account_.Clear();
  platform_register_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminalContactList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.TerminalContactList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes imei = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imei()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_brand;
        break;
      }

      // optional bytes mobile_brand = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iscommon;
        break;
      }

      // optional int32 iscommon = 3;
      case 3: {
        if (tag == 24) {
         parse_iscommon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscommon_)));
          set_has_iscommon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_constacts;
        break;
      }

      // repeated .UBAS_niiwoo.user_contact_t constacts = 4;
      case 4: {
        if (tag == 34) {
         parse_constacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_constacts;
        if (input->ExpectTag(42)) goto parse_landed_account;
        break;
      }

      // repeated .DW_Location.LandedAccount landed_account = 5;
      case 5: {
        if (tag == 42) {
         parse_landed_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landed_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_landed_account;
        if (input->ExpectTag(50)) goto parse_platform_register_user;
        break;
      }

      // repeated .DW_Location.platform_register_user_info platform_register_user = 6;
      case 6: {
        if (tag == 50) {
         parse_platform_register_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_platform_register_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_platform_register_user;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.TerminalContactList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.TerminalContactList)
  return false;
#undef DO_
}

void TerminalContactList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.TerminalContactList)
  // optional bytes imei = 1;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->imei(), output);
  }

  // optional bytes mobile_brand = 2;
  if (has_mobile_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_brand(), output);
  }

  // optional int32 iscommon = 3;
  if (has_iscommon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iscommon(), output);
  }

  // repeated .UBAS_niiwoo.user_contact_t constacts = 4;
  for (int i = 0; i < this->constacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->constacts(i), output);
  }

  // repeated .DW_Location.LandedAccount landed_account = 5;
  for (int i = 0; i < this->landed_account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->landed_account(i), output);
  }

  // repeated .DW_Location.platform_register_user_info platform_register_user = 6;
  for (int i = 0; i < this->platform_register_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->platform_register_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.TerminalContactList)
}

::google::protobuf::uint8* TerminalContactList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.TerminalContactList)
  // optional bytes imei = 1;
  if (has_imei()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->imei(), target);
  }

  // optional bytes mobile_brand = 2;
  if (has_mobile_brand()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_brand(), target);
  }

  // optional int32 iscommon = 3;
  if (has_iscommon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iscommon(), target);
  }

  // repeated .UBAS_niiwoo.user_contact_t constacts = 4;
  for (int i = 0; i < this->constacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->constacts(i), target);
  }

  // repeated .DW_Location.LandedAccount landed_account = 5;
  for (int i = 0; i < this->landed_account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->landed_account(i), target);
  }

  // repeated .DW_Location.platform_register_user_info platform_register_user = 6;
  for (int i = 0; i < this->platform_register_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->platform_register_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.TerminalContactList)
  return target;
}

int TerminalContactList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes imei = 1;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imei());
    }

    // optional bytes mobile_brand = 2;
    if (has_mobile_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_brand());
    }

    // optional int32 iscommon = 3;
    if (has_iscommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscommon());
    }

  }
  // repeated .UBAS_niiwoo.user_contact_t constacts = 4;
  total_size += 1 * this->constacts_size();
  for (int i = 0; i < this->constacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constacts(i));
  }

  // repeated .DW_Location.LandedAccount landed_account = 5;
  total_size += 1 * this->landed_account_size();
  for (int i = 0; i < this->landed_account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landed_account(i));
  }

  // repeated .DW_Location.platform_register_user_info platform_register_user = 6;
  total_size += 1 * this->platform_register_user_size();
  for (int i = 0; i < this->platform_register_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platform_register_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminalContactList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminalContactList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminalContactList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminalContactList::MergeFrom(const TerminalContactList& from) {
  GOOGLE_CHECK_NE(&from, this);
  constacts_.MergeFrom(from.constacts_);
  landed_account_.MergeFrom(from.landed_account_);
  platform_register_user_.MergeFrom(from.platform_register_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_mobile_brand()) {
      set_mobile_brand(from.mobile_brand());
    }
    if (from.has_iscommon()) {
      set_iscommon(from.iscommon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminalContactList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminalContactList::CopyFrom(const TerminalContactList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminalContactList::IsInitialized() const {

  return true;
}

void TerminalContactList::Swap(TerminalContactList* other) {
  if (other != this) {
    std::swap(imei_, other->imei_);
    std::swap(mobile_brand_, other->mobile_brand_);
    std::swap(iscommon_, other->iscommon_);
    constacts_.Swap(&other->constacts_);
    landed_account_.Swap(&other->landed_account_);
    platform_register_user_.Swap(&other->platform_register_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TerminalContactList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminalContactList_descriptor_;
  metadata.reflection = TerminalContactList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sex_proportion::kMaleNumFieldNumber;
const int sex_proportion::kGirlNumFieldNumber;
const int sex_proportion::kNuknowNumFieldNumber;
#endif  // !_MSC_VER

sex_proportion::sex_proportion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.sex_proportion)
}

void sex_proportion::InitAsDefaultInstance() {
}

sex_proportion::sex_proportion(const sex_proportion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.sex_proportion)
}

void sex_proportion::SharedCtor() {
  _cached_size_ = 0;
  male_num_ = 0;
  girl_num_ = 0;
  nuknow_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sex_proportion::~sex_proportion() {
  // @@protoc_insertion_point(destructor:DW_Location.sex_proportion)
  SharedDtor();
}

void sex_proportion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sex_proportion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sex_proportion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sex_proportion_descriptor_;
}

const sex_proportion& sex_proportion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

sex_proportion* sex_proportion::default_instance_ = NULL;

sex_proportion* sex_proportion::New() const {
  return new sex_proportion;
}

void sex_proportion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<sex_proportion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(male_num_, nuknow_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sex_proportion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.sex_proportion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 male_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &male_num_)));
          set_has_male_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_girl_num;
        break;
      }

      // optional int32 girl_num = 2;
      case 2: {
        if (tag == 16) {
         parse_girl_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &girl_num_)));
          set_has_girl_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nuknow_num;
        break;
      }

      // optional int32 nuknow_num = 3;
      case 3: {
        if (tag == 24) {
         parse_nuknow_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nuknow_num_)));
          set_has_nuknow_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.sex_proportion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.sex_proportion)
  return false;
#undef DO_
}

void sex_proportion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.sex_proportion)
  // optional int32 male_num = 1;
  if (has_male_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->male_num(), output);
  }

  // optional int32 girl_num = 2;
  if (has_girl_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->girl_num(), output);
  }

  // optional int32 nuknow_num = 3;
  if (has_nuknow_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nuknow_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.sex_proportion)
}

::google::protobuf::uint8* sex_proportion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.sex_proportion)
  // optional int32 male_num = 1;
  if (has_male_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->male_num(), target);
  }

  // optional int32 girl_num = 2;
  if (has_girl_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->girl_num(), target);
  }

  // optional int32 nuknow_num = 3;
  if (has_nuknow_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nuknow_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.sex_proportion)
  return target;
}

int sex_proportion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 male_num = 1;
    if (has_male_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->male_num());
    }

    // optional int32 girl_num = 2;
    if (has_girl_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->girl_num());
    }

    // optional int32 nuknow_num = 3;
    if (has_nuknow_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nuknow_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sex_proportion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sex_proportion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sex_proportion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sex_proportion::MergeFrom(const sex_proportion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_male_num()) {
      set_male_num(from.male_num());
    }
    if (from.has_girl_num()) {
      set_girl_num(from.girl_num());
    }
    if (from.has_nuknow_num()) {
      set_nuknow_num(from.nuknow_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sex_proportion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sex_proportion::CopyFrom(const sex_proportion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sex_proportion::IsInitialized() const {

  return true;
}

void sex_proportion::Swap(sex_proportion* other) {
  if (other != this) {
    std::swap(male_num_, other->male_num_);
    std::swap(girl_num_, other->girl_num_);
    std::swap(nuknow_num_, other->nuknow_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sex_proportion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sex_proportion_descriptor_;
  metadata.reflection = sex_proportion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int degree_proportion::kTechnicalNumFieldNumber;
const int degree_proportion::kCollegeNumFieldNumber;
const int degree_proportion::kUniversityNumFieldNumber;
const int degree_proportion::kGraduateNumFieldNumber;
const int degree_proportion::kDoctorNumFieldNumber;
#endif  // !_MSC_VER

degree_proportion::degree_proportion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.degree_proportion)
}

void degree_proportion::InitAsDefaultInstance() {
}

degree_proportion::degree_proportion(const degree_proportion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.degree_proportion)
}

void degree_proportion::SharedCtor() {
  _cached_size_ = 0;
  technical_num_ = 0;
  college_num_ = 0;
  university_num_ = 0;
  graduate_num_ = 0;
  doctor_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

degree_proportion::~degree_proportion() {
  // @@protoc_insertion_point(destructor:DW_Location.degree_proportion)
  SharedDtor();
}

void degree_proportion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void degree_proportion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* degree_proportion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return degree_proportion_descriptor_;
}

const degree_proportion& degree_proportion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

degree_proportion* degree_proportion::default_instance_ = NULL;

degree_proportion* degree_proportion::New() const {
  return new degree_proportion;
}

void degree_proportion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<degree_proportion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(technical_num_, doctor_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool degree_proportion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.degree_proportion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 technical_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &technical_num_)));
          set_has_technical_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_college_num;
        break;
      }

      // optional int32 college_num = 2;
      case 2: {
        if (tag == 16) {
         parse_college_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &college_num_)));
          set_has_college_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_university_num;
        break;
      }

      // optional int32 university_num = 3;
      case 3: {
        if (tag == 24) {
         parse_university_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &university_num_)));
          set_has_university_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_graduate_num;
        break;
      }

      // optional int32 graduate_num = 4;
      case 4: {
        if (tag == 32) {
         parse_graduate_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &graduate_num_)));
          set_has_graduate_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_doctor_num;
        break;
      }

      // optional int32 doctor_num = 5;
      case 5: {
        if (tag == 40) {
         parse_doctor_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doctor_num_)));
          set_has_doctor_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.degree_proportion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.degree_proportion)
  return false;
#undef DO_
}

void degree_proportion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.degree_proportion)
  // optional int32 technical_num = 1;
  if (has_technical_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->technical_num(), output);
  }

  // optional int32 college_num = 2;
  if (has_college_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->college_num(), output);
  }

  // optional int32 university_num = 3;
  if (has_university_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->university_num(), output);
  }

  // optional int32 graduate_num = 4;
  if (has_graduate_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->graduate_num(), output);
  }

  // optional int32 doctor_num = 5;
  if (has_doctor_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->doctor_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.degree_proportion)
}

::google::protobuf::uint8* degree_proportion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.degree_proportion)
  // optional int32 technical_num = 1;
  if (has_technical_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->technical_num(), target);
  }

  // optional int32 college_num = 2;
  if (has_college_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->college_num(), target);
  }

  // optional int32 university_num = 3;
  if (has_university_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->university_num(), target);
  }

  // optional int32 graduate_num = 4;
  if (has_graduate_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->graduate_num(), target);
  }

  // optional int32 doctor_num = 5;
  if (has_doctor_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->doctor_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.degree_proportion)
  return target;
}

int degree_proportion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 technical_num = 1;
    if (has_technical_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->technical_num());
    }

    // optional int32 college_num = 2;
    if (has_college_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->college_num());
    }

    // optional int32 university_num = 3;
    if (has_university_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->university_num());
    }

    // optional int32 graduate_num = 4;
    if (has_graduate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->graduate_num());
    }

    // optional int32 doctor_num = 5;
    if (has_doctor_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doctor_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void degree_proportion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const degree_proportion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const degree_proportion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void degree_proportion::MergeFrom(const degree_proportion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_technical_num()) {
      set_technical_num(from.technical_num());
    }
    if (from.has_college_num()) {
      set_college_num(from.college_num());
    }
    if (from.has_university_num()) {
      set_university_num(from.university_num());
    }
    if (from.has_graduate_num()) {
      set_graduate_num(from.graduate_num());
    }
    if (from.has_doctor_num()) {
      set_doctor_num(from.doctor_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void degree_proportion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void degree_proportion::CopyFrom(const degree_proportion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool degree_proportion::IsInitialized() const {

  return true;
}

void degree_proportion::Swap(degree_proportion* other) {
  if (other != this) {
    std::swap(technical_num_, other->technical_num_);
    std::swap(college_num_, other->college_num_);
    std::swap(university_num_, other->university_num_);
    std::swap(graduate_num_, other->graduate_num_);
    std::swap(doctor_num_, other->doctor_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata degree_proportion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = degree_proportion_descriptor_;
  metadata.reflection = degree_proportion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int email_proportion::kEmailFieldNumber;
const int email_proportion::kEmailNumFieldNumber;
#endif  // !_MSC_VER

email_proportion::email_proportion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.email_proportion)
}

void email_proportion::InitAsDefaultInstance() {
}

email_proportion::email_proportion(const email_proportion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.email_proportion)
}

void email_proportion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

email_proportion::~email_proportion() {
  // @@protoc_insertion_point(destructor:DW_Location.email_proportion)
  SharedDtor();
}

void email_proportion::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void email_proportion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* email_proportion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return email_proportion_descriptor_;
}

const email_proportion& email_proportion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

email_proportion* email_proportion::default_instance_ = NULL;

email_proportion* email_proportion::New() const {
  return new email_proportion;
}

void email_proportion::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    email_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool email_proportion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.email_proportion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_email_num;
        break;
      }

      // optional int32 email_num = 2;
      case 2: {
        if (tag == 16) {
         parse_email_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_num_)));
          set_has_email_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.email_proportion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.email_proportion)
  return false;
#undef DO_
}

void email_proportion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.email_proportion)
  // optional bytes email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->email(), output);
  }

  // optional int32 email_num = 2;
  if (has_email_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->email_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.email_proportion)
}

::google::protobuf::uint8* email_proportion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.email_proportion)
  // optional bytes email = 1;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->email(), target);
  }

  // optional int32 email_num = 2;
  if (has_email_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->email_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.email_proportion)
  return target;
}

int email_proportion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

    // optional int32 email_num = 2;
    if (has_email_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void email_proportion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const email_proportion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const email_proportion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void email_proportion::MergeFrom(const email_proportion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_email_num()) {
      set_email_num(from.email_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void email_proportion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void email_proportion::CopyFrom(const email_proportion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool email_proportion::IsInitialized() const {

  return true;
}

void email_proportion::Swap(email_proportion* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(email_num_, other->email_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata email_proportion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = email_proportion_descriptor_;
  metadata.reflection = email_proportion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobilePhoneListExt_ask::kAskHeaderFieldNumber;
const int MobilePhoneListExt_ask::kIdentityCardFieldNumber;
const int MobilePhoneListExt_ask::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

MobilePhoneListExt_ask::MobilePhoneListExt_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.MobilePhoneListExt_ask)
}

void MobilePhoneListExt_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

MobilePhoneListExt_ask::MobilePhoneListExt_ask(const MobilePhoneListExt_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.MobilePhoneListExt_ask)
}

void MobilePhoneListExt_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobilePhoneListExt_ask::~MobilePhoneListExt_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.MobilePhoneListExt_ask)
  SharedDtor();
}

void MobilePhoneListExt_ask::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void MobilePhoneListExt_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobilePhoneListExt_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobilePhoneListExt_ask_descriptor_;
}

const MobilePhoneListExt_ask& MobilePhoneListExt_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

MobilePhoneListExt_ask* MobilePhoneListExt_ask::default_instance_ = NULL;

MobilePhoneListExt_ask* MobilePhoneListExt_ask::New() const {
  return new MobilePhoneListExt_ask;
}

void MobilePhoneListExt_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobilePhoneListExt_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.MobilePhoneListExt_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.MobilePhoneListExt_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.MobilePhoneListExt_ask)
  return false;
#undef DO_
}

void MobilePhoneListExt_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.MobilePhoneListExt_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.MobilePhoneListExt_ask)
}

::google::protobuf::uint8* MobilePhoneListExt_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.MobilePhoneListExt_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.MobilePhoneListExt_ask)
  return target;
}

int MobilePhoneListExt_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobilePhoneListExt_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobilePhoneListExt_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobilePhoneListExt_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobilePhoneListExt_ask::MergeFrom(const MobilePhoneListExt_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobilePhoneListExt_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobilePhoneListExt_ask::CopyFrom(const MobilePhoneListExt_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobilePhoneListExt_ask::IsInitialized() const {

  return true;
}

void MobilePhoneListExt_ask::Swap(MobilePhoneListExt_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobilePhoneListExt_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobilePhoneListExt_ask_descriptor_;
  metadata.reflection = MobilePhoneListExt_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobilePhoneListExt_ans::kResultFieldNumber;
const int MobilePhoneListExt_ans::kUserInfoFieldNumber;
const int MobilePhoneListExt_ans::kTerminalContactsFieldNumber;
const int MobilePhoneListExt_ans::kTypeFieldNumber;
const int MobilePhoneListExt_ans::kYuliuCommonUserFieldNumber;
const int MobilePhoneListExt_ans::kYuliuPlatformUserFieldNumber;
#endif  // !_MSC_VER

MobilePhoneListExt_ans::MobilePhoneListExt_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.MobilePhoneListExt_ans)
}

void MobilePhoneListExt_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
  user_info__ = const_cast< ::common::user_info*>(&::common::user_info::default_instance());
}

MobilePhoneListExt_ans::MobilePhoneListExt_ans(const MobilePhoneListExt_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.MobilePhoneListExt_ans)
}

void MobilePhoneListExt_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  user_info__ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobilePhoneListExt_ans::~MobilePhoneListExt_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.MobilePhoneListExt_ans)
  SharedDtor();
}

void MobilePhoneListExt_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete user_info__;
  }
}

void MobilePhoneListExt_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobilePhoneListExt_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobilePhoneListExt_ans_descriptor_;
}

const MobilePhoneListExt_ans& MobilePhoneListExt_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

MobilePhoneListExt_ans* MobilePhoneListExt_ans::default_instance_ = NULL;

MobilePhoneListExt_ans* MobilePhoneListExt_ans::New() const {
  return new MobilePhoneListExt_ans;
}

void MobilePhoneListExt_ans::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_result()) {
      if (result_ != NULL) result_->::common::errorinfo::Clear();
    }
    if (has_user_info_()) {
      if (user_info__ != NULL) user_info__->::common::user_info::Clear();
    }
    type_ = 1;
  }
  terminal_contacts_.Clear();
  yuliu_common_user_.Clear();
  yuliu_platform_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobilePhoneListExt_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.MobilePhoneListExt_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_;
        break;
      }

      // optional .common.user_info user_info_ = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terminal_contacts;
        break;
      }

      // repeated .DW_Location.TerminalContactList terminal_contacts = 3;
      case 3: {
        if (tag == 26) {
         parse_terminal_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_terminal_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terminal_contacts;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .DW_Location.overdue_type type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::overdue_type_IsValid(value)) {
            set_type(static_cast< ::DW_Location::overdue_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_yuliu_common_user;
        break;
      }

      // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 5;
      case 5: {
        if (tag == 42) {
         parse_yuliu_common_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yuliu_common_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_yuliu_common_user;
        if (input->ExpectTag(50)) goto parse_yuliu_platform_user;
        break;
      }

      // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 6;
      case 6: {
        if (tag == 50) {
         parse_yuliu_platform_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yuliu_platform_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_yuliu_platform_user;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.MobilePhoneListExt_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.MobilePhoneListExt_ans)
  return false;
#undef DO_
}

void MobilePhoneListExt_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.MobilePhoneListExt_ans)
  // optional .common.errorinfo result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .common.user_info user_info_ = 2;
  if (has_user_info_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info_(), output);
  }

  // repeated .DW_Location.TerminalContactList terminal_contacts = 3;
  for (int i = 0; i < this->terminal_contacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->terminal_contacts(i), output);
  }

  // optional .DW_Location.overdue_type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 5;
  for (int i = 0; i < this->yuliu_common_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->yuliu_common_user(i), output);
  }

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 6;
  for (int i = 0; i < this->yuliu_platform_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->yuliu_platform_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.MobilePhoneListExt_ans)
}

::google::protobuf::uint8* MobilePhoneListExt_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.MobilePhoneListExt_ans)
  // optional .common.errorinfo result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .common.user_info user_info_ = 2;
  if (has_user_info_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_info_(), target);
  }

  // repeated .DW_Location.TerminalContactList terminal_contacts = 3;
  for (int i = 0; i < this->terminal_contacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->terminal_contacts(i), target);
  }

  // optional .DW_Location.overdue_type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 5;
  for (int i = 0; i < this->yuliu_common_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->yuliu_common_user(i), target);
  }

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 6;
  for (int i = 0; i < this->yuliu_platform_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->yuliu_platform_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.MobilePhoneListExt_ans)
  return target;
}

int MobilePhoneListExt_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .common.user_info user_info_ = 2;
    if (has_user_info_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info_());
    }

    // optional .DW_Location.overdue_type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .DW_Location.TerminalContactList terminal_contacts = 3;
  total_size += 1 * this->terminal_contacts_size();
  for (int i = 0; i < this->terminal_contacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terminal_contacts(i));
  }

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 5;
  total_size += 1 * this->yuliu_common_user_size();
  for (int i = 0; i < this->yuliu_common_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yuliu_common_user(i));
  }

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 6;
  total_size += 1 * this->yuliu_platform_user_size();
  for (int i = 0; i < this->yuliu_platform_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yuliu_platform_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobilePhoneListExt_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobilePhoneListExt_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobilePhoneListExt_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobilePhoneListExt_ans::MergeFrom(const MobilePhoneListExt_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  terminal_contacts_.MergeFrom(from.terminal_contacts_);
  yuliu_common_user_.MergeFrom(from.yuliu_common_user_);
  yuliu_platform_user_.MergeFrom(from.yuliu_platform_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::errorinfo::MergeFrom(from.result());
    }
    if (from.has_user_info_()) {
      mutable_user_info_()->::common::user_info::MergeFrom(from.user_info_());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobilePhoneListExt_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobilePhoneListExt_ans::CopyFrom(const MobilePhoneListExt_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobilePhoneListExt_ans::IsInitialized() const {

  return true;
}

void MobilePhoneListExt_ans::Swap(MobilePhoneListExt_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_info__, other->user_info__);
    terminal_contacts_.Swap(&other->terminal_contacts_);
    std::swap(type_, other->type_);
    yuliu_common_user_.Swap(&other->yuliu_common_user_);
    yuliu_platform_user_.Swap(&other->yuliu_platform_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobilePhoneListExt_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobilePhoneListExt_ans_descriptor_;
  metadata.reflection = MobilePhoneListExt_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adressbook_chonghe_rate_info::kOriginalDeviceNoFieldNumber;
const int adressbook_chonghe_rate_info::kOtherDeviceNoFieldNumber;
const int adressbook_chonghe_rate_info::kChongheRateFieldNumber;
#endif  // !_MSC_VER

adressbook_chonghe_rate_info::adressbook_chonghe_rate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.adressbook_chonghe_rate_info)
}

void adressbook_chonghe_rate_info::InitAsDefaultInstance() {
}

adressbook_chonghe_rate_info::adressbook_chonghe_rate_info(const adressbook_chonghe_rate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.adressbook_chonghe_rate_info)
}

void adressbook_chonghe_rate_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  original_device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chonghe_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adressbook_chonghe_rate_info::~adressbook_chonghe_rate_info() {
  // @@protoc_insertion_point(destructor:DW_Location.adressbook_chonghe_rate_info)
  SharedDtor();
}

void adressbook_chonghe_rate_info::SharedDtor() {
  if (original_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_device_no_;
  }
  if (other_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete other_device_no_;
  }
  if (this != default_instance_) {
  }
}

void adressbook_chonghe_rate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adressbook_chonghe_rate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adressbook_chonghe_rate_info_descriptor_;
}

const adressbook_chonghe_rate_info& adressbook_chonghe_rate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

adressbook_chonghe_rate_info* adressbook_chonghe_rate_info::default_instance_ = NULL;

adressbook_chonghe_rate_info* adressbook_chonghe_rate_info::New() const {
  return new adressbook_chonghe_rate_info;
}

void adressbook_chonghe_rate_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_original_device_no()) {
      if (original_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        original_device_no_->clear();
      }
    }
    if (has_other_device_no()) {
      if (other_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        other_device_no_->clear();
      }
    }
    chonghe_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adressbook_chonghe_rate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.adressbook_chonghe_rate_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes original_device_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_device_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_other_device_no;
        break;
      }

      // optional bytes other_device_no = 2;
      case 2: {
        if (tag == 18) {
         parse_other_device_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other_device_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_chonghe_rate;
        break;
      }

      // optional float chonghe_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_chonghe_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chonghe_rate_)));
          set_has_chonghe_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.adressbook_chonghe_rate_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.adressbook_chonghe_rate_info)
  return false;
#undef DO_
}

void adressbook_chonghe_rate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.adressbook_chonghe_rate_info)
  // optional bytes original_device_no = 1;
  if (has_original_device_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->original_device_no(), output);
  }

  // optional bytes other_device_no = 2;
  if (has_other_device_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->other_device_no(), output);
  }

  // optional float chonghe_rate = 3;
  if (has_chonghe_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->chonghe_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.adressbook_chonghe_rate_info)
}

::google::protobuf::uint8* adressbook_chonghe_rate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.adressbook_chonghe_rate_info)
  // optional bytes original_device_no = 1;
  if (has_original_device_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->original_device_no(), target);
  }

  // optional bytes other_device_no = 2;
  if (has_other_device_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->other_device_no(), target);
  }

  // optional float chonghe_rate = 3;
  if (has_chonghe_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->chonghe_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.adressbook_chonghe_rate_info)
  return target;
}

int adressbook_chonghe_rate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes original_device_no = 1;
    if (has_original_device_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_device_no());
    }

    // optional bytes other_device_no = 2;
    if (has_other_device_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->other_device_no());
    }

    // optional float chonghe_rate = 3;
    if (has_chonghe_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adressbook_chonghe_rate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adressbook_chonghe_rate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adressbook_chonghe_rate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adressbook_chonghe_rate_info::MergeFrom(const adressbook_chonghe_rate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_original_device_no()) {
      set_original_device_no(from.original_device_no());
    }
    if (from.has_other_device_no()) {
      set_other_device_no(from.other_device_no());
    }
    if (from.has_chonghe_rate()) {
      set_chonghe_rate(from.chonghe_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adressbook_chonghe_rate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adressbook_chonghe_rate_info::CopyFrom(const adressbook_chonghe_rate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adressbook_chonghe_rate_info::IsInitialized() const {

  return true;
}

void adressbook_chonghe_rate_info::Swap(adressbook_chonghe_rate_info* other) {
  if (other != this) {
    std::swap(original_device_no_, other->original_device_no_);
    std::swap(other_device_no_, other->other_device_no_);
    std::swap(chonghe_rate_, other->chonghe_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adressbook_chonghe_rate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adressbook_chonghe_rate_info_descriptor_;
  metadata.reflection = adressbook_chonghe_rate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adressbook_chonghe_rate_ask::kAskHeaderFieldNumber;
const int adressbook_chonghe_rate_ask::kOriginalMobilePhoneFieldNumber;
const int adressbook_chonghe_rate_ask::kOtherMobilePhoneFieldNumber;
#endif  // !_MSC_VER

adressbook_chonghe_rate_ask::adressbook_chonghe_rate_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.adressbook_chonghe_rate_ask)
}

void adressbook_chonghe_rate_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

adressbook_chonghe_rate_ask::adressbook_chonghe_rate_ask(const adressbook_chonghe_rate_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.adressbook_chonghe_rate_ask)
}

void adressbook_chonghe_rate_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  original_mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adressbook_chonghe_rate_ask::~adressbook_chonghe_rate_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.adressbook_chonghe_rate_ask)
  SharedDtor();
}

void adressbook_chonghe_rate_ask::SharedDtor() {
  if (original_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_mobile_phone_;
  }
  if (other_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete other_mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void adressbook_chonghe_rate_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adressbook_chonghe_rate_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adressbook_chonghe_rate_ask_descriptor_;
}

const adressbook_chonghe_rate_ask& adressbook_chonghe_rate_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

adressbook_chonghe_rate_ask* adressbook_chonghe_rate_ask::default_instance_ = NULL;

adressbook_chonghe_rate_ask* adressbook_chonghe_rate_ask::New() const {
  return new adressbook_chonghe_rate_ask;
}

void adressbook_chonghe_rate_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_original_mobile_phone()) {
      if (original_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        original_mobile_phone_->clear();
      }
    }
    if (has_other_mobile_phone()) {
      if (other_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        other_mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adressbook_chonghe_rate_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.adressbook_chonghe_rate_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_original_mobile_phone;
        break;
      }

      // optional bytes original_mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_original_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_other_mobile_phone;
        break;
      }

      // optional bytes other_mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_other_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.adressbook_chonghe_rate_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.adressbook_chonghe_rate_ask)
  return false;
#undef DO_
}

void adressbook_chonghe_rate_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.adressbook_chonghe_rate_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes original_mobile_phone = 2;
  if (has_original_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->original_mobile_phone(), output);
  }

  // optional bytes other_mobile_phone = 3;
  if (has_other_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->other_mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.adressbook_chonghe_rate_ask)
}

::google::protobuf::uint8* adressbook_chonghe_rate_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.adressbook_chonghe_rate_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes original_mobile_phone = 2;
  if (has_original_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->original_mobile_phone(), target);
  }

  // optional bytes other_mobile_phone = 3;
  if (has_other_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->other_mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.adressbook_chonghe_rate_ask)
  return target;
}

int adressbook_chonghe_rate_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes original_mobile_phone = 2;
    if (has_original_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_mobile_phone());
    }

    // optional bytes other_mobile_phone = 3;
    if (has_other_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->other_mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adressbook_chonghe_rate_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adressbook_chonghe_rate_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adressbook_chonghe_rate_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adressbook_chonghe_rate_ask::MergeFrom(const adressbook_chonghe_rate_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_original_mobile_phone()) {
      set_original_mobile_phone(from.original_mobile_phone());
    }
    if (from.has_other_mobile_phone()) {
      set_other_mobile_phone(from.other_mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adressbook_chonghe_rate_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adressbook_chonghe_rate_ask::CopyFrom(const adressbook_chonghe_rate_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adressbook_chonghe_rate_ask::IsInitialized() const {

  return true;
}

void adressbook_chonghe_rate_ask::Swap(adressbook_chonghe_rate_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(original_mobile_phone_, other->original_mobile_phone_);
    std::swap(other_mobile_phone_, other->other_mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adressbook_chonghe_rate_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adressbook_chonghe_rate_ask_descriptor_;
  metadata.reflection = adressbook_chonghe_rate_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adressbook_chonghe_rate_ans::kResultFieldNumber;
const int adressbook_chonghe_rate_ans::kAdressbookChongheRateFieldNumber;
#endif  // !_MSC_VER

adressbook_chonghe_rate_ans::adressbook_chonghe_rate_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.adressbook_chonghe_rate_ans)
}

void adressbook_chonghe_rate_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

adressbook_chonghe_rate_ans::adressbook_chonghe_rate_ans(const adressbook_chonghe_rate_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.adressbook_chonghe_rate_ans)
}

void adressbook_chonghe_rate_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adressbook_chonghe_rate_ans::~adressbook_chonghe_rate_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.adressbook_chonghe_rate_ans)
  SharedDtor();
}

void adressbook_chonghe_rate_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void adressbook_chonghe_rate_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adressbook_chonghe_rate_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adressbook_chonghe_rate_ans_descriptor_;
}

const adressbook_chonghe_rate_ans& adressbook_chonghe_rate_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

adressbook_chonghe_rate_ans* adressbook_chonghe_rate_ans::default_instance_ = NULL;

adressbook_chonghe_rate_ans* adressbook_chonghe_rate_ans::New() const {
  return new adressbook_chonghe_rate_ans;
}

void adressbook_chonghe_rate_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::errorinfo::Clear();
  }
  adressbook_chonghe_rate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adressbook_chonghe_rate_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.adressbook_chonghe_rate_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adressbook_chonghe_rate;
        break;
      }

      // repeated .DW_Location.adressbook_chonghe_rate_info adressbook_chonghe_rate = 2;
      case 2: {
        if (tag == 18) {
         parse_adressbook_chonghe_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adressbook_chonghe_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adressbook_chonghe_rate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.adressbook_chonghe_rate_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.adressbook_chonghe_rate_ans)
  return false;
#undef DO_
}

void adressbook_chonghe_rate_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.adressbook_chonghe_rate_ans)
  // optional .common.errorinfo result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.adressbook_chonghe_rate_info adressbook_chonghe_rate = 2;
  for (int i = 0; i < this->adressbook_chonghe_rate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->adressbook_chonghe_rate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.adressbook_chonghe_rate_ans)
}

::google::protobuf::uint8* adressbook_chonghe_rate_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.adressbook_chonghe_rate_ans)
  // optional .common.errorinfo result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.adressbook_chonghe_rate_info adressbook_chonghe_rate = 2;
  for (int i = 0; i < this->adressbook_chonghe_rate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->adressbook_chonghe_rate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.adressbook_chonghe_rate_ans)
  return target;
}

int adressbook_chonghe_rate_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.adressbook_chonghe_rate_info adressbook_chonghe_rate = 2;
  total_size += 1 * this->adressbook_chonghe_rate_size();
  for (int i = 0; i < this->adressbook_chonghe_rate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adressbook_chonghe_rate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adressbook_chonghe_rate_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adressbook_chonghe_rate_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adressbook_chonghe_rate_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adressbook_chonghe_rate_ans::MergeFrom(const adressbook_chonghe_rate_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  adressbook_chonghe_rate_.MergeFrom(from.adressbook_chonghe_rate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::errorinfo::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adressbook_chonghe_rate_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adressbook_chonghe_rate_ans::CopyFrom(const adressbook_chonghe_rate_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adressbook_chonghe_rate_ans::IsInitialized() const {

  return true;
}

void adressbook_chonghe_rate_ans::Swap(adressbook_chonghe_rate_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    adressbook_chonghe_rate_.Swap(&other->adressbook_chonghe_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adressbook_chonghe_rate_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adressbook_chonghe_rate_ans_descriptor_;
  metadata.reflection = adressbook_chonghe_rate_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DW_userinfo_ask::kAskHeaderFieldNumber;
const int DW_userinfo_ask::kAskTypeFieldNumber;
const int DW_userinfo_ask::kStartTimeFieldNumber;
const int DW_userinfo_ask::kEndTimeFieldNumber;
const int DW_userinfo_ask::kUserInfoListFieldNumber;
const int DW_userinfo_ask::kUserInfoFieldNumber;
const int DW_userinfo_ask::kUserIdFieldNumber;
#endif  // !_MSC_VER

DW_userinfo_ask::DW_userinfo_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.DW_userinfo_ask)
}

void DW_userinfo_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
  user_info_list_ = const_cast< ::DW_Location::user_identification_list*>(&::DW_Location::user_identification_list::default_instance());
  user_info_ = const_cast< ::common::user_basic_identification*>(&::common::user_basic_identification::default_instance());
}

DW_userinfo_ask::DW_userinfo_ask(const DW_userinfo_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.DW_userinfo_ask)
}

void DW_userinfo_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  ask_type_ = 1;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_list_ = NULL;
  user_info_ = NULL;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DW_userinfo_ask::~DW_userinfo_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.DW_userinfo_ask)
  SharedDtor();
}

void DW_userinfo_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
    delete user_info_list_;
    delete user_info_;
  }
}

void DW_userinfo_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DW_userinfo_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DW_userinfo_ask_descriptor_;
}

const DW_userinfo_ask& DW_userinfo_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

DW_userinfo_ask* DW_userinfo_ask::default_instance_ = NULL;

DW_userinfo_ask* DW_userinfo_ask::New() const {
  return new DW_userinfo_ask;
}

void DW_userinfo_ask::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    ask_type_ = 1;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_user_info_list()) {
      if (user_info_list_ != NULL) user_info_list_->::DW_Location::user_identification_list::Clear();
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::common::user_basic_identification::Clear();
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DW_userinfo_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.DW_userinfo_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ask_type;
        break;
      }

      // optional .DW_Location.DW_ask_type ask_type = 2;
      case 2: {
        if (tag == 16) {
         parse_ask_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::DW_ask_type_IsValid(value)) {
            set_ask_type(static_cast< ::DW_Location::DW_ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_time;
        break;
      }

      // optional bytes start_time = 3;
      case 3: {
        if (tag == 26) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 4;
      case 4: {
        if (tag == 34) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_info_list;
        break;
      }

      // optional .DW_Location.user_identification_list user_info_list = 5;
      case 5: {
        if (tag == 42) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_info;
        break;
      }

      // optional .common.user_basic_identification user_info = 6;
      case 6: {
        if (tag == 50) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 7;
      case 7: {
        if (tag == 58) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.DW_userinfo_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.DW_userinfo_ask)
  return false;
#undef DO_
}

void DW_userinfo_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.DW_userinfo_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .DW_Location.DW_ask_type ask_type = 2;
  if (has_ask_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ask_type(), output);
  }

  // optional bytes start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_time(), output);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_time(), output);
  }

  // optional .DW_Location.user_identification_list user_info_list = 5;
  if (has_user_info_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_info_list(), output);
  }

  // optional .common.user_basic_identification user_info = 6;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user_info(), output);
  }

  // optional bytes user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.DW_userinfo_ask)
}

::google::protobuf::uint8* DW_userinfo_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.DW_userinfo_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .DW_Location.DW_ask_type ask_type = 2;
  if (has_ask_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ask_type(), target);
  }

  // optional bytes start_time = 3;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_time(), target);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_time(), target);
  }

  // optional .DW_Location.user_identification_list user_info_list = 5;
  if (has_user_info_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_info_list(), target);
  }

  // optional .common.user_basic_identification user_info = 6;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->user_info(), target);
  }

  // optional bytes user_id = 7;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.DW_userinfo_ask)
  return target;
}

int DW_userinfo_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .DW_Location.DW_ask_type ask_type = 2;
    if (has_ask_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ask_type());
    }

    // optional bytes start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional .DW_Location.user_identification_list user_info_list = 5;
    if (has_user_info_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info_list());
    }

    // optional .common.user_basic_identification user_info = 6;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional bytes user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DW_userinfo_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DW_userinfo_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DW_userinfo_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DW_userinfo_ask::MergeFrom(const DW_userinfo_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_ask_type()) {
      set_ask_type(from.ask_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_user_info_list()) {
      mutable_user_info_list()->::DW_Location::user_identification_list::MergeFrom(from.user_info_list());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::common::user_basic_identification::MergeFrom(from.user_info());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DW_userinfo_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DW_userinfo_ask::CopyFrom(const DW_userinfo_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DW_userinfo_ask::IsInitialized() const {

  return true;
}

void DW_userinfo_ask::Swap(DW_userinfo_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(ask_type_, other->ask_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(user_info_list_, other->user_info_list_);
    std::swap(user_info_, other->user_info_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DW_userinfo_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DW_userinfo_ask_descriptor_;
  metadata.reflection = DW_userinfo_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DW_userinfo_ans::kUserOverdueInfosFieldNumber;
const int DW_userinfo_ans::kResultFieldNumber;
#endif  // !_MSC_VER

DW_userinfo_ans::DW_userinfo_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.DW_userinfo_ans)
}

void DW_userinfo_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

DW_userinfo_ans::DW_userinfo_ans(const DW_userinfo_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.DW_userinfo_ans)
}

void DW_userinfo_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DW_userinfo_ans::~DW_userinfo_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.DW_userinfo_ans)
  SharedDtor();
}

void DW_userinfo_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DW_userinfo_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DW_userinfo_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DW_userinfo_ans_descriptor_;
}

const DW_userinfo_ans& DW_userinfo_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

DW_userinfo_ans* DW_userinfo_ans::default_instance_ = NULL;

DW_userinfo_ans* DW_userinfo_ans::New() const {
  return new DW_userinfo_ans;
}

void DW_userinfo_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::errorinfo::Clear();
  }
  user_overdue_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DW_userinfo_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.DW_userinfo_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DW_Location.user_overdue_info user_overdue_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_user_overdue_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_overdue_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_overdue_infos;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.errorinfo result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.DW_userinfo_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.DW_userinfo_ans)
  return false;
#undef DO_
}

void DW_userinfo_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.DW_userinfo_ans)
  // repeated .DW_Location.user_overdue_info user_overdue_infos = 1;
  for (int i = 0; i < this->user_overdue_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_overdue_infos(i), output);
  }

  // optional .common.errorinfo result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.DW_userinfo_ans)
}

::google::protobuf::uint8* DW_userinfo_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.DW_userinfo_ans)
  // repeated .DW_Location.user_overdue_info user_overdue_infos = 1;
  for (int i = 0; i < this->user_overdue_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_overdue_infos(i), target);
  }

  // optional .common.errorinfo result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.DW_userinfo_ans)
  return target;
}

int DW_userinfo_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.user_overdue_info user_overdue_infos = 1;
  total_size += 1 * this->user_overdue_infos_size();
  for (int i = 0; i < this->user_overdue_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_overdue_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DW_userinfo_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DW_userinfo_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DW_userinfo_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DW_userinfo_ans::MergeFrom(const DW_userinfo_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_overdue_infos_.MergeFrom(from.user_overdue_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::errorinfo::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DW_userinfo_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DW_userinfo_ans::CopyFrom(const DW_userinfo_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DW_userinfo_ans::IsInitialized() const {

  return true;
}

void DW_userinfo_ans::Swap(DW_userinfo_ans* other) {
  if (other != this) {
    user_overdue_infos_.Swap(&other->user_overdue_infos_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DW_userinfo_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DW_userinfo_ans_descriptor_;
  metadata.reflection = DW_userinfo_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DW_location_track_ans::kLocInfoFieldNumber;
const int DW_location_track_ans::kResultFieldNumber;
#endif  // !_MSC_VER

DW_location_track_ans::DW_location_track_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.DW_location_track_ans)
}

void DW_location_track_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

DW_location_track_ans::DW_location_track_ans(const DW_location_track_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.DW_location_track_ans)
}

void DW_location_track_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DW_location_track_ans::~DW_location_track_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.DW_location_track_ans)
  SharedDtor();
}

void DW_location_track_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DW_location_track_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DW_location_track_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DW_location_track_ans_descriptor_;
}

const DW_location_track_ans& DW_location_track_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

DW_location_track_ans* DW_location_track_ans::default_instance_ = NULL;

DW_location_track_ans* DW_location_track_ans::New() const {
  return new DW_location_track_ans;
}

void DW_location_track_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::errorinfo::Clear();
  }
  loc_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DW_location_track_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.DW_location_track_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.location_info loc_info = 1;
      case 1: {
        if (tag == 10) {
         parse_loc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loc_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loc_info;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.errorinfo result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.DW_location_track_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.DW_location_track_ans)
  return false;
#undef DO_
}

void DW_location_track_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.DW_location_track_ans)
  // repeated .common.location_info loc_info = 1;
  for (int i = 0; i < this->loc_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loc_info(i), output);
  }

  // optional .common.errorinfo result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.DW_location_track_ans)
}

::google::protobuf::uint8* DW_location_track_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.DW_location_track_ans)
  // repeated .common.location_info loc_info = 1;
  for (int i = 0; i < this->loc_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loc_info(i), target);
  }

  // optional .common.errorinfo result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.DW_location_track_ans)
  return target;
}

int DW_location_track_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .common.location_info loc_info = 1;
  total_size += 1 * this->loc_info_size();
  for (int i = 0; i < this->loc_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loc_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DW_location_track_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DW_location_track_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DW_location_track_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DW_location_track_ans::MergeFrom(const DW_location_track_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  loc_info_.MergeFrom(from.loc_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::errorinfo::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DW_location_track_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DW_location_track_ans::CopyFrom(const DW_location_track_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DW_location_track_ans::IsInitialized() const {

  return true;
}

void DW_location_track_ans::Swap(DW_location_track_ans* other) {
  if (other != this) {
    loc_info_.Swap(&other->loc_info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DW_location_track_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DW_location_track_ans_descriptor_;
  metadata.reflection = DW_location_track_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DW_location_info_ans::kUserBasicInfoFieldNumber;
const int DW_location_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

DW_location_info_ans::DW_location_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.DW_location_info_ans)
}

void DW_location_info_ans::InitAsDefaultInstance() {
  user_basic_info_ = const_cast< ::common::user_info*>(&::common::user_info::default_instance());
  result_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

DW_location_info_ans::DW_location_info_ans(const DW_location_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.DW_location_info_ans)
}

void DW_location_info_ans::SharedCtor() {
  _cached_size_ = 0;
  user_basic_info_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DW_location_info_ans::~DW_location_info_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.DW_location_info_ans)
  SharedDtor();
}

void DW_location_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete user_basic_info_;
    delete result_;
  }
}

void DW_location_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DW_location_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DW_location_info_ans_descriptor_;
}

const DW_location_info_ans& DW_location_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

DW_location_info_ans* DW_location_info_ans::default_instance_ = NULL;

DW_location_info_ans* DW_location_info_ans::New() const {
  return new DW_location_info_ans;
}

void DW_location_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_basic_info()) {
      if (user_basic_info_ != NULL) user_basic_info_->::common::user_info::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DW_location_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.DW_location_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.user_info user_basic_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_basic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.errorinfo result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.DW_location_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.DW_location_info_ans)
  return false;
#undef DO_
}

void DW_location_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.DW_location_info_ans)
  // optional .common.user_info user_basic_info = 1;
  if (has_user_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_basic_info(), output);
  }

  // optional .common.errorinfo result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.DW_location_info_ans)
}

::google::protobuf::uint8* DW_location_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.DW_location_info_ans)
  // optional .common.user_info user_basic_info = 1;
  if (has_user_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_basic_info(), target);
  }

  // optional .common.errorinfo result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.DW_location_info_ans)
  return target;
}

int DW_location_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.user_info user_basic_info = 1;
    if (has_user_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_basic_info());
    }

    // optional .common.errorinfo result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DW_location_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DW_location_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DW_location_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DW_location_info_ans::MergeFrom(const DW_location_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_basic_info()) {
      mutable_user_basic_info()->::common::user_info::MergeFrom(from.user_basic_info());
    }
    if (from.has_result()) {
      mutable_result()->::common::errorinfo::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DW_location_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DW_location_info_ans::CopyFrom(const DW_location_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DW_location_info_ans::IsInitialized() const {

  return true;
}

void DW_location_info_ans::Swap(DW_location_info_ans* other) {
  if (other != this) {
    std::swap(user_basic_info_, other->user_basic_info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DW_location_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DW_location_info_ans_descriptor_;
  metadata.reflection = DW_location_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DW_load_days_info_ans::kLoadDaysFieldNumber;
const int DW_load_days_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

DW_load_days_info_ans::DW_load_days_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.DW_load_days_info_ans)
}

void DW_load_days_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

DW_load_days_info_ans::DW_load_days_info_ans(const DW_load_days_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.DW_load_days_info_ans)
}

void DW_load_days_info_ans::SharedCtor() {
  _cached_size_ = 0;
  loaddays_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DW_load_days_info_ans::~DW_load_days_info_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.DW_load_days_info_ans)
  SharedDtor();
}

void DW_load_days_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void DW_load_days_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DW_load_days_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DW_load_days_info_ans_descriptor_;
}

const DW_load_days_info_ans& DW_load_days_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

DW_load_days_info_ans* DW_load_days_info_ans::default_instance_ = NULL;

DW_load_days_info_ans* DW_load_days_info_ans::New() const {
  return new DW_load_days_info_ans;
}

void DW_load_days_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    loaddays_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DW_load_days_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.DW_load_days_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 loadDays = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loaddays_)));
          set_has_loaddays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.DW_load_days_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.DW_load_days_info_ans)
  return false;
#undef DO_
}

void DW_load_days_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.DW_load_days_info_ans)
  // optional int32 loadDays = 1;
  if (has_loaddays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loaddays(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.DW_load_days_info_ans)
}

::google::protobuf::uint8* DW_load_days_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.DW_load_days_info_ans)
  // optional int32 loadDays = 1;
  if (has_loaddays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loaddays(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.DW_load_days_info_ans)
  return target;
}

int DW_load_days_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 loadDays = 1;
    if (has_loaddays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loaddays());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DW_load_days_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DW_load_days_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DW_load_days_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DW_load_days_info_ans::MergeFrom(const DW_load_days_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loaddays()) {
      set_loaddays(from.loaddays());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DW_load_days_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DW_load_days_info_ans::CopyFrom(const DW_load_days_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DW_load_days_info_ans::IsInitialized() const {

  return true;
}

void DW_load_days_info_ans::Swap(DW_load_days_info_ans* other) {
  if (other != this) {
    std::swap(loaddays_, other->loaddays_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DW_load_days_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DW_load_days_info_ans_descriptor_;
  metadata.reflection = DW_load_days_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int static_report_result::kStaticTypeFieldNumber;
const int static_report_result::kStaticNumberFieldNumber;
#endif  // !_MSC_VER

static_report_result::static_report_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.static_report_result)
}

void static_report_result::InitAsDefaultInstance() {
}

static_report_result::static_report_result(const static_report_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.static_report_result)
}

void static_report_result::SharedCtor() {
  _cached_size_ = 0;
  static_type_ = 0;
  static_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

static_report_result::~static_report_result() {
  // @@protoc_insertion_point(destructor:DW_Location.static_report_result)
  SharedDtor();
}

void static_report_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void static_report_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* static_report_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return static_report_result_descriptor_;
}

const static_report_result& static_report_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

static_report_result* static_report_result::default_instance_ = NULL;

static_report_result* static_report_result::New() const {
  return new static_report_result;
}

void static_report_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<static_report_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(static_type_, static_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool static_report_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.static_report_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DW_Location.static_report_type static_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::static_report_type_IsValid(value)) {
            set_static_type(static_cast< ::DW_Location::static_report_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_static_number;
        break;
      }

      // optional int32 static_number = 2;
      case 2: {
        if (tag == 16) {
         parse_static_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &static_number_)));
          set_has_static_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.static_report_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.static_report_result)
  return false;
#undef DO_
}

void static_report_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.static_report_result)
  // optional .DW_Location.static_report_type static_type = 1;
  if (has_static_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->static_type(), output);
  }

  // optional int32 static_number = 2;
  if (has_static_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->static_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.static_report_result)
}

::google::protobuf::uint8* static_report_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.static_report_result)
  // optional .DW_Location.static_report_type static_type = 1;
  if (has_static_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->static_type(), target);
  }

  // optional int32 static_number = 2;
  if (has_static_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->static_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.static_report_result)
  return target;
}

int static_report_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DW_Location.static_report_type static_type = 1;
    if (has_static_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->static_type());
    }

    // optional int32 static_number = 2;
    if (has_static_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->static_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void static_report_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const static_report_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const static_report_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void static_report_result::MergeFrom(const static_report_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_static_type()) {
      set_static_type(from.static_type());
    }
    if (from.has_static_number()) {
      set_static_number(from.static_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void static_report_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void static_report_result::CopyFrom(const static_report_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool static_report_result::IsInitialized() const {

  return true;
}

void static_report_result::Swap(static_report_result* other) {
  if (other != this) {
    std::swap(static_type_, other->static_type_);
    std::swap(static_number_, other->static_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata static_report_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = static_report_result_descriptor_;
  metadata.reflection = static_report_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_profiles_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_profiles_ask::user_profiles_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.user_profiles_ask)
}

void user_profiles_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_profiles_ask::user_profiles_ask(const user_profiles_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.user_profiles_ask)
}

void user_profiles_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_profiles_ask::~user_profiles_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.user_profiles_ask)
  SharedDtor();
}

void user_profiles_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_profiles_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_profiles_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_profiles_ask_descriptor_;
}

const user_profiles_ask& user_profiles_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

user_profiles_ask* user_profiles_ask::default_instance_ = NULL;

user_profiles_ask* user_profiles_ask::New() const {
  return new user_profiles_ask;
}

void user_profiles_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_profiles_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.user_profiles_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.user_profiles_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.user_profiles_ask)
  return false;
#undef DO_
}

void user_profiles_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.user_profiles_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.user_profiles_ask)
}

::google::protobuf::uint8* user_profiles_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.user_profiles_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.user_profiles_ask)
  return target;
}

int user_profiles_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_profiles_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_profiles_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_profiles_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_profiles_ask::MergeFrom(const user_profiles_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_profiles_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_profiles_ask::CopyFrom(const user_profiles_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_profiles_ask::IsInitialized() const {

  return true;
}

void user_profiles_ask::Swap(user_profiles_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_profiles_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_profiles_ask_descriptor_;
  metadata.reflection = user_profiles_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_profiles_ans::kStaticResultFieldNumber;
const int user_profiles_ans::kSexFieldNumber;
const int user_profiles_ans::kDegreeFieldNumber;
const int user_profiles_ans::kEmaillistFieldNumber;
const int user_profiles_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_profiles_ans::user_profiles_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.user_profiles_ans)
}

void user_profiles_ans::InitAsDefaultInstance() {
  sex_ = const_cast< ::DW_Location::sex_proportion*>(&::DW_Location::sex_proportion::default_instance());
  degree_ = const_cast< ::DW_Location::degree_proportion*>(&::DW_Location::degree_proportion::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_profiles_ans::user_profiles_ans(const user_profiles_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.user_profiles_ans)
}

void user_profiles_ans::SharedCtor() {
  _cached_size_ = 0;
  sex_ = NULL;
  degree_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_profiles_ans::~user_profiles_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.user_profiles_ans)
  SharedDtor();
}

void user_profiles_ans::SharedDtor() {
  if (this != default_instance_) {
    delete sex_;
    delete degree_;
    delete error_;
  }
}

void user_profiles_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_profiles_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_profiles_ans_descriptor_;
}

const user_profiles_ans& user_profiles_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

user_profiles_ans* user_profiles_ans::default_instance_ = NULL;

user_profiles_ans* user_profiles_ans::New() const {
  return new user_profiles_ans;
}

void user_profiles_ans::Clear() {
  if (_has_bits_[0 / 32] & 22) {
    if (has_sex()) {
      if (sex_ != NULL) sex_->::DW_Location::sex_proportion::Clear();
    }
    if (has_degree()) {
      if (degree_ != NULL) degree_->::DW_Location::degree_proportion::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  static_result_.Clear();
  emaillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_profiles_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.user_profiles_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DW_Location.static_report_result static_result = 1;
      case 1: {
        if (tag == 10) {
         parse_static_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_static_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_static_result;
        if (input->ExpectTag(18)) goto parse_sex;
        break;
      }

      // optional .DW_Location.sex_proportion sex = 2;
      case 2: {
        if (tag == 18) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_degree;
        break;
      }

      // optional .DW_Location.degree_proportion degree = 3;
      case 3: {
        if (tag == 26) {
         parse_degree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_degree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_emaillist;
        break;
      }

      // repeated .DW_Location.email_proportion emaillist = 4;
      case 4: {
        if (tag == 34) {
         parse_emaillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emaillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_emaillist;
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.user_profiles_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.user_profiles_ans)
  return false;
#undef DO_
}

void user_profiles_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.user_profiles_ans)
  // repeated .DW_Location.static_report_result static_result = 1;
  for (int i = 0; i < this->static_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->static_result(i), output);
  }

  // optional .DW_Location.sex_proportion sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sex(), output);
  }

  // optional .DW_Location.degree_proportion degree = 3;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->degree(), output);
  }

  // repeated .DW_Location.email_proportion emaillist = 4;
  for (int i = 0; i < this->emaillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->emaillist(i), output);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.user_profiles_ans)
}

::google::protobuf::uint8* user_profiles_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.user_profiles_ans)
  // repeated .DW_Location.static_report_result static_result = 1;
  for (int i = 0; i < this->static_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->static_result(i), target);
  }

  // optional .DW_Location.sex_proportion sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sex(), target);
  }

  // optional .DW_Location.degree_proportion degree = 3;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->degree(), target);
  }

  // repeated .DW_Location.email_proportion emaillist = 4;
  for (int i = 0; i < this->emaillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->emaillist(i), target);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.user_profiles_ans)
  return target;
}

int user_profiles_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .DW_Location.sex_proportion sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sex());
    }

    // optional .DW_Location.degree_proportion degree = 3;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->degree());
    }

    // optional .common.errorinfo error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .DW_Location.static_report_result static_result = 1;
  total_size += 1 * this->static_result_size();
  for (int i = 0; i < this->static_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->static_result(i));
  }

  // repeated .DW_Location.email_proportion emaillist = 4;
  total_size += 1 * this->emaillist_size();
  for (int i = 0; i < this->emaillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emaillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_profiles_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_profiles_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_profiles_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_profiles_ans::MergeFrom(const user_profiles_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  static_result_.MergeFrom(from.static_result_);
  emaillist_.MergeFrom(from.emaillist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sex()) {
      mutable_sex()->::DW_Location::sex_proportion::MergeFrom(from.sex());
    }
    if (from.has_degree()) {
      mutable_degree()->::DW_Location::degree_proportion::MergeFrom(from.degree());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_profiles_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_profiles_ans::CopyFrom(const user_profiles_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_profiles_ans::IsInitialized() const {

  return true;
}

void user_profiles_ans::Swap(user_profiles_ans* other) {
  if (other != this) {
    static_result_.Swap(&other->static_result_);
    std::swap(sex_, other->sex_);
    std::swap(degree_, other->degree_);
    emaillist_.Swap(&other->emaillist_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_profiles_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_profiles_ans_descriptor_;
  metadata.reflection = user_profiles_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_basic_info_ask::kJsonRequestFieldNumber;
const int user_basic_info_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_basic_info_ask::user_basic_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.user_basic_info_ask)
}

void user_basic_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_basic_info_ask::user_basic_info_ask(const user_basic_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.user_basic_info_ask)
}

void user_basic_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_info_ask::~user_basic_info_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.user_basic_info_ask)
  SharedDtor();
}

void user_basic_info_ask::SharedDtor() {
  if (json_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_request_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_basic_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_info_ask_descriptor_;
}

const user_basic_info_ask& user_basic_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

user_basic_info_ask* user_basic_info_ask::default_instance_ = NULL;

user_basic_info_ask* user_basic_info_ask::New() const {
  return new user_basic_info_ask;
}

void user_basic_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_json_request()) {
      if (json_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_request_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.user_basic_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.user_basic_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.user_basic_info_ask)
  return false;
#undef DO_
}

void user_basic_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.user_basic_info_ask)
  // optional bytes json_request = 1;
  if (has_json_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json_request(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.user_basic_info_ask)
}

::google::protobuf::uint8* user_basic_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.user_basic_info_ask)
  // optional bytes json_request = 1;
  if (has_json_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json_request(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.user_basic_info_ask)
  return target;
}

int user_basic_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes json_request = 1;
    if (has_json_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_request());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_info_ask::MergeFrom(const user_basic_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_request()) {
      set_json_request(from.json_request());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_info_ask::CopyFrom(const user_basic_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_info_ask::IsInitialized() const {

  return true;
}

void user_basic_info_ask::Swap(user_basic_info_ask* other) {
  if (other != this) {
    std::swap(json_request_, other->json_request_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_info_ask_descriptor_;
  metadata.reflection = user_basic_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_basic_info_ans::kJsonResponseFieldNumber;
const int user_basic_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_basic_info_ans::user_basic_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.user_basic_info_ans)
}

void user_basic_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_basic_info_ans::user_basic_info_ans(const user_basic_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.user_basic_info_ans)
}

void user_basic_info_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_info_ans::~user_basic_info_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.user_basic_info_ans)
  SharedDtor();
}

void user_basic_info_ans::SharedDtor() {
  if (json_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_response_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void user_basic_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_info_ans_descriptor_;
}

const user_basic_info_ans& user_basic_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

user_basic_info_ans* user_basic_info_ans::default_instance_ = NULL;

user_basic_info_ans* user_basic_info_ans::New() const {
  return new user_basic_info_ans;
}

void user_basic_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_json_response()) {
      if (json_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_response_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.user_basic_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.user_basic_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.user_basic_info_ans)
  return false;
#undef DO_
}

void user_basic_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.user_basic_info_ans)
  // optional bytes json_response = 1;
  if (has_json_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json_response(), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.user_basic_info_ans)
}

::google::protobuf::uint8* user_basic_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.user_basic_info_ans)
  // optional bytes json_response = 1;
  if (has_json_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json_response(), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.user_basic_info_ans)
  return target;
}

int user_basic_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes json_response = 1;
    if (has_json_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_response());
    }

    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_info_ans::MergeFrom(const user_basic_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_response()) {
      set_json_response(from.json_response());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_info_ans::CopyFrom(const user_basic_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_info_ans::IsInitialized() const {

  return true;
}

void user_basic_info_ans::Swap(user_basic_info_ans* other) {
  if (other != this) {
    std::swap(json_response_, other->json_response_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_info_ans_descriptor_;
  metadata.reflection = user_basic_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wei_dan_bao_base_info::kWeiDanBaoIdFieldNumber;
const int wei_dan_bao_base_info::kCorporationNameFieldNumber;
const int wei_dan_bao_base_info::kCreateUserIdFieldNumber;
const int wei_dan_bao_base_info::kAuditPassTimeFieldNumber;
const int wei_dan_bao_base_info::kGuaranteeStackingLineFieldNumber;
const int wei_dan_bao_base_info::kGuaranteeUsedFieldNumber;
#endif  // !_MSC_VER

wei_dan_bao_base_info::wei_dan_bao_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.wei_dan_bao_base_info)
}

void wei_dan_bao_base_info::InitAsDefaultInstance() {
}

wei_dan_bao_base_info::wei_dan_bao_base_info(const wei_dan_bao_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.wei_dan_bao_base_info)
}

void wei_dan_bao_base_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  corporation_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audit_pass_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guarantee_stacking_line_ = 0;
  guarantee_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wei_dan_bao_base_info::~wei_dan_bao_base_info() {
  // @@protoc_insertion_point(destructor:DW_Location.wei_dan_bao_base_info)
  SharedDtor();
}

void wei_dan_bao_base_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (corporation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete corporation_name_;
  }
  if (create_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_user_id_;
  }
  if (audit_pass_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audit_pass_time_;
  }
  if (this != default_instance_) {
  }
}

void wei_dan_bao_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wei_dan_bao_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wei_dan_bao_base_info_descriptor_;
}

const wei_dan_bao_base_info& wei_dan_bao_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

wei_dan_bao_base_info* wei_dan_bao_base_info::default_instance_ = NULL;

wei_dan_bao_base_info* wei_dan_bao_base_info::New() const {
  return new wei_dan_bao_base_info;
}

void wei_dan_bao_base_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<wei_dan_bao_base_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(guarantee_stacking_line_, guarantee_used_);
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
    if (has_corporation_name()) {
      if (corporation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        corporation_name_->clear();
      }
    }
    if (has_create_user_id()) {
      if (create_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        create_user_id_->clear();
      }
    }
    if (has_audit_pass_time()) {
      if (audit_pass_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        audit_pass_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wei_dan_bao_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.wei_dan_bao_base_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string wei_dan_bao_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wei_dan_bao_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wei_dan_bao_id().data(), this->wei_dan_bao_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wei_dan_bao_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_corporation_name;
        break;
      }

      // required string corporation_name = 2;
      case 2: {
        if (tag == 18) {
         parse_corporation_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_corporation_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->corporation_name().data(), this->corporation_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "corporation_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_user_id;
        break;
      }

      // required string create_user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_create_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_user_id().data(), this->create_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_audit_pass_time;
        break;
      }

      // required string audit_pass_time = 4;
      case 4: {
        if (tag == 34) {
         parse_audit_pass_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audit_pass_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audit_pass_time().data(), this->audit_pass_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "audit_pass_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_guarantee_stacking_line;
        break;
      }

      // required double guarantee_stacking_line = 5;
      case 5: {
        if (tag == 41) {
         parse_guarantee_stacking_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &guarantee_stacking_line_)));
          set_has_guarantee_stacking_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_guarantee_used;
        break;
      }

      // required double guarantee_used = 6;
      case 6: {
        if (tag == 49) {
         parse_guarantee_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &guarantee_used_)));
          set_has_guarantee_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.wei_dan_bao_base_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.wei_dan_bao_base_info)
  return false;
#undef DO_
}

void wei_dan_bao_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.wei_dan_bao_base_info)
  // required string wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wei_dan_bao_id().data(), this->wei_dan_bao_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wei_dan_bao_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wei_dan_bao_id(), output);
  }

  // required string corporation_name = 2;
  if (has_corporation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->corporation_name().data(), this->corporation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "corporation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->corporation_name(), output);
  }

  // required string create_user_id = 3;
  if (has_create_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_user_id().data(), this->create_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->create_user_id(), output);
  }

  // required string audit_pass_time = 4;
  if (has_audit_pass_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audit_pass_time().data(), this->audit_pass_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "audit_pass_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->audit_pass_time(), output);
  }

  // required double guarantee_stacking_line = 5;
  if (has_guarantee_stacking_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->guarantee_stacking_line(), output);
  }

  // required double guarantee_used = 6;
  if (has_guarantee_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->guarantee_used(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.wei_dan_bao_base_info)
}

::google::protobuf::uint8* wei_dan_bao_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.wei_dan_bao_base_info)
  // required string wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wei_dan_bao_id().data(), this->wei_dan_bao_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wei_dan_bao_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wei_dan_bao_id(), target);
  }

  // required string corporation_name = 2;
  if (has_corporation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->corporation_name().data(), this->corporation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "corporation_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->corporation_name(), target);
  }

  // required string create_user_id = 3;
  if (has_create_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_user_id().data(), this->create_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->create_user_id(), target);
  }

  // required string audit_pass_time = 4;
  if (has_audit_pass_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audit_pass_time().data(), this->audit_pass_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "audit_pass_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audit_pass_time(), target);
  }

  // required double guarantee_stacking_line = 5;
  if (has_guarantee_stacking_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->guarantee_stacking_line(), target);
  }

  // required double guarantee_used = 6;
  if (has_guarantee_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->guarantee_used(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.wei_dan_bao_base_info)
  return target;
}

int wei_dan_bao_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string wei_dan_bao_id = 1;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wei_dan_bao_id());
    }

    // required string corporation_name = 2;
    if (has_corporation_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->corporation_name());
    }

    // required string create_user_id = 3;
    if (has_create_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_user_id());
    }

    // required string audit_pass_time = 4;
    if (has_audit_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audit_pass_time());
    }

    // required double guarantee_stacking_line = 5;
    if (has_guarantee_stacking_line()) {
      total_size += 1 + 8;
    }

    // required double guarantee_used = 6;
    if (has_guarantee_used()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wei_dan_bao_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wei_dan_bao_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wei_dan_bao_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wei_dan_bao_base_info::MergeFrom(const wei_dan_bao_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_corporation_name()) {
      set_corporation_name(from.corporation_name());
    }
    if (from.has_create_user_id()) {
      set_create_user_id(from.create_user_id());
    }
    if (from.has_audit_pass_time()) {
      set_audit_pass_time(from.audit_pass_time());
    }
    if (from.has_guarantee_stacking_line()) {
      set_guarantee_stacking_line(from.guarantee_stacking_line());
    }
    if (from.has_guarantee_used()) {
      set_guarantee_used(from.guarantee_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wei_dan_bao_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wei_dan_bao_base_info::CopyFrom(const wei_dan_bao_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wei_dan_bao_base_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void wei_dan_bao_base_info::Swap(wei_dan_bao_base_info* other) {
  if (other != this) {
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(corporation_name_, other->corporation_name_);
    std::swap(create_user_id_, other->create_user_id_);
    std::swap(audit_pass_time_, other->audit_pass_time_);
    std::swap(guarantee_stacking_line_, other->guarantee_stacking_line_);
    std::swap(guarantee_used_, other->guarantee_used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wei_dan_bao_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wei_dan_bao_base_info_descriptor_;
  metadata.reflection = wei_dan_bao_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wei_dan_bao_base_info_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

wei_dan_bao_base_info_ask::wei_dan_bao_base_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.wei_dan_bao_base_info_ask)
}

void wei_dan_bao_base_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

wei_dan_bao_base_info_ask::wei_dan_bao_base_info_ask(const wei_dan_bao_base_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.wei_dan_bao_base_info_ask)
}

void wei_dan_bao_base_info_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wei_dan_bao_base_info_ask::~wei_dan_bao_base_info_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.wei_dan_bao_base_info_ask)
  SharedDtor();
}

void wei_dan_bao_base_info_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void wei_dan_bao_base_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wei_dan_bao_base_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wei_dan_bao_base_info_ask_descriptor_;
}

const wei_dan_bao_base_info_ask& wei_dan_bao_base_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

wei_dan_bao_base_info_ask* wei_dan_bao_base_info_ask::default_instance_ = NULL;

wei_dan_bao_base_info_ask* wei_dan_bao_base_info_ask::New() const {
  return new wei_dan_bao_base_info_ask;
}

void wei_dan_bao_base_info_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wei_dan_bao_base_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.wei_dan_bao_base_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.wei_dan_bao_base_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.wei_dan_bao_base_info_ask)
  return false;
#undef DO_
}

void wei_dan_bao_base_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.wei_dan_bao_base_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.wei_dan_bao_base_info_ask)
}

::google::protobuf::uint8* wei_dan_bao_base_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.wei_dan_bao_base_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.wei_dan_bao_base_info_ask)
  return target;
}

int wei_dan_bao_base_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wei_dan_bao_base_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wei_dan_bao_base_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wei_dan_bao_base_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wei_dan_bao_base_info_ask::MergeFrom(const wei_dan_bao_base_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wei_dan_bao_base_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wei_dan_bao_base_info_ask::CopyFrom(const wei_dan_bao_base_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wei_dan_bao_base_info_ask::IsInitialized() const {

  return true;
}

void wei_dan_bao_base_info_ask::Swap(wei_dan_bao_base_info_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wei_dan_bao_base_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wei_dan_bao_base_info_ask_descriptor_;
  metadata.reflection = wei_dan_bao_base_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wei_dan_bao_base_info_ans::kResultFieldNumber;
const int wei_dan_bao_base_info_ans::kAllInfoFieldNumber;
#endif  // !_MSC_VER

wei_dan_bao_base_info_ans::wei_dan_bao_base_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.wei_dan_bao_base_info_ans)
}

void wei_dan_bao_base_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

wei_dan_bao_base_info_ans::wei_dan_bao_base_info_ans(const wei_dan_bao_base_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.wei_dan_bao_base_info_ans)
}

void wei_dan_bao_base_info_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wei_dan_bao_base_info_ans::~wei_dan_bao_base_info_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.wei_dan_bao_base_info_ans)
  SharedDtor();
}

void wei_dan_bao_base_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void wei_dan_bao_base_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wei_dan_bao_base_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wei_dan_bao_base_info_ans_descriptor_;
}

const wei_dan_bao_base_info_ans& wei_dan_bao_base_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

wei_dan_bao_base_info_ans* wei_dan_bao_base_info_ans::default_instance_ = NULL;

wei_dan_bao_base_info_ans* wei_dan_bao_base_info_ans::New() const {
  return new wei_dan_bao_base_info_ans;
}

void wei_dan_bao_base_info_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  all_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wei_dan_bao_base_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.wei_dan_bao_base_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_all_info;
        break;
      }

      // repeated .DW_Location.wei_dan_bao_base_info all_info = 2;
      case 2: {
        if (tag == 18) {
         parse_all_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_all_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.wei_dan_bao_base_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.wei_dan_bao_base_info_ans)
  return false;
#undef DO_
}

void wei_dan_bao_base_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.wei_dan_bao_base_info_ans)
  // required .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.wei_dan_bao_base_info all_info = 2;
  for (int i = 0; i < this->all_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.wei_dan_bao_base_info_ans)
}

::google::protobuf::uint8* wei_dan_bao_base_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.wei_dan_bao_base_info_ans)
  // required .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.wei_dan_bao_base_info all_info = 2;
  for (int i = 0; i < this->all_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.wei_dan_bao_base_info_ans)
  return target;
}

int wei_dan_bao_base_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.wei_dan_bao_base_info all_info = 2;
  total_size += 1 * this->all_info_size();
  for (int i = 0; i < this->all_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wei_dan_bao_base_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wei_dan_bao_base_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wei_dan_bao_base_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wei_dan_bao_base_info_ans::MergeFrom(const wei_dan_bao_base_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_info_.MergeFrom(from.all_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wei_dan_bao_base_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wei_dan_bao_base_info_ans::CopyFrom(const wei_dan_bao_base_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wei_dan_bao_base_info_ans::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->all_info())) return false;
  return true;
}

void wei_dan_bao_base_info_ans::Swap(wei_dan_bao_base_info_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    all_info_.Swap(&other->all_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wei_dan_bao_base_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wei_dan_bao_base_info_ans_descriptor_;
  metadata.reflection = wei_dan_bao_base_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wei_dan_bao_success_info::kSuccessCountFieldNumber;
const int wei_dan_bao_success_info::kWeiDanBaoIdFieldNumber;
const int wei_dan_bao_success_info::kWeiDanBaoCityNameFieldNumber;
#endif  // !_MSC_VER

wei_dan_bao_success_info::wei_dan_bao_success_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.wei_dan_bao_success_info)
}

void wei_dan_bao_success_info::InitAsDefaultInstance() {
}

wei_dan_bao_success_info::wei_dan_bao_success_info(const wei_dan_bao_success_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.wei_dan_bao_success_info)
}

void wei_dan_bao_success_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_count_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wei_dan_bao_city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wei_dan_bao_success_info::~wei_dan_bao_success_info() {
  // @@protoc_insertion_point(destructor:DW_Location.wei_dan_bao_success_info)
  SharedDtor();
}

void wei_dan_bao_success_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_city_name_;
  }
  if (this != default_instance_) {
  }
}

void wei_dan_bao_success_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wei_dan_bao_success_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wei_dan_bao_success_info_descriptor_;
}

const wei_dan_bao_success_info& wei_dan_bao_success_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

wei_dan_bao_success_info* wei_dan_bao_success_info::default_instance_ = NULL;

wei_dan_bao_success_info* wei_dan_bao_success_info::New() const {
  return new wei_dan_bao_success_info;
}

void wei_dan_bao_success_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    success_count_ = 0;
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
    if (has_wei_dan_bao_city_name()) {
      if (wei_dan_bao_city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_city_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wei_dan_bao_success_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.wei_dan_bao_success_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 success_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_count_)));
          set_has_success_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // optional string wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wei_dan_bao_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wei_dan_bao_id().data(), this->wei_dan_bao_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wei_dan_bao_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wei_dan_bao_city_name;
        break;
      }

      // optional string wei_dan_bao_city_name = 3;
      case 3: {
        if (tag == 26) {
         parse_wei_dan_bao_city_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wei_dan_bao_city_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wei_dan_bao_city_name().data(), this->wei_dan_bao_city_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wei_dan_bao_city_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.wei_dan_bao_success_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.wei_dan_bao_success_info)
  return false;
#undef DO_
}

void wei_dan_bao_success_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.wei_dan_bao_success_info)
  // optional int32 success_count = 1;
  if (has_success_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success_count(), output);
  }

  // optional string wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wei_dan_bao_id().data(), this->wei_dan_bao_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wei_dan_bao_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wei_dan_bao_id(), output);
  }

  // optional string wei_dan_bao_city_name = 3;
  if (has_wei_dan_bao_city_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wei_dan_bao_city_name().data(), this->wei_dan_bao_city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wei_dan_bao_city_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wei_dan_bao_city_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.wei_dan_bao_success_info)
}

::google::protobuf::uint8* wei_dan_bao_success_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.wei_dan_bao_success_info)
  // optional int32 success_count = 1;
  if (has_success_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success_count(), target);
  }

  // optional string wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wei_dan_bao_id().data(), this->wei_dan_bao_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wei_dan_bao_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wei_dan_bao_id(), target);
  }

  // optional string wei_dan_bao_city_name = 3;
  if (has_wei_dan_bao_city_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wei_dan_bao_city_name().data(), this->wei_dan_bao_city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wei_dan_bao_city_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->wei_dan_bao_city_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.wei_dan_bao_success_info)
  return target;
}

int wei_dan_bao_success_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 success_count = 1;
    if (has_success_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_count());
    }

    // optional string wei_dan_bao_id = 2;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wei_dan_bao_id());
    }

    // optional string wei_dan_bao_city_name = 3;
    if (has_wei_dan_bao_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wei_dan_bao_city_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wei_dan_bao_success_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wei_dan_bao_success_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wei_dan_bao_success_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wei_dan_bao_success_info::MergeFrom(const wei_dan_bao_success_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success_count()) {
      set_success_count(from.success_count());
    }
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_wei_dan_bao_city_name()) {
      set_wei_dan_bao_city_name(from.wei_dan_bao_city_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wei_dan_bao_success_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wei_dan_bao_success_info::CopyFrom(const wei_dan_bao_success_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wei_dan_bao_success_info::IsInitialized() const {

  return true;
}

void wei_dan_bao_success_info::Swap(wei_dan_bao_success_info* other) {
  if (other != this) {
    std::swap(success_count_, other->success_count_);
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(wei_dan_bao_city_name_, other->wei_dan_bao_city_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wei_dan_bao_success_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wei_dan_bao_success_info_descriptor_;
  metadata.reflection = wei_dan_bao_success_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wei_dan_bao_all_success_info_ask::kAskHeaderFieldNumber;
const int wei_dan_bao_all_success_info_ask::kRequestTypeFieldNumber;
const int wei_dan_bao_all_success_info_ask::kAllWeiDanBaoIdFieldNumber;
const int wei_dan_bao_all_success_info_ask::kDaysBeforeFieldNumber;
#endif  // !_MSC_VER

wei_dan_bao_all_success_info_ask::wei_dan_bao_all_success_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.wei_dan_bao_all_success_info_ask)
}

void wei_dan_bao_all_success_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

wei_dan_bao_all_success_info_ask::wei_dan_bao_all_success_info_ask(const wei_dan_bao_all_success_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.wei_dan_bao_all_success_info_ask)
}

void wei_dan_bao_all_success_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  request_type_ = 1;
  days_before_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wei_dan_bao_all_success_info_ask::~wei_dan_bao_all_success_info_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.wei_dan_bao_all_success_info_ask)
  SharedDtor();
}

void wei_dan_bao_all_success_info_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void wei_dan_bao_all_success_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wei_dan_bao_all_success_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wei_dan_bao_all_success_info_ask_descriptor_;
}

const wei_dan_bao_all_success_info_ask& wei_dan_bao_all_success_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

wei_dan_bao_all_success_info_ask* wei_dan_bao_all_success_info_ask::default_instance_ = NULL;

wei_dan_bao_all_success_info_ask* wei_dan_bao_all_success_info_ask::New() const {
  return new wei_dan_bao_all_success_info_ask;
}

void wei_dan_bao_all_success_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    request_type_ = 1;
    days_before_ = 0;
  }
  all_wei_dan_bao_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wei_dan_bao_all_success_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.wei_dan_bao_all_success_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_type;
        break;
      }

      // optional .DW_Location.avg_suc_type request_type = 2;
      case 2: {
        if (tag == 16) {
         parse_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::avg_suc_type_IsValid(value)) {
            set_request_type(static_cast< ::DW_Location::avg_suc_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_all_wei_dan_bao_id;
        break;
      }

      // repeated string all_wei_dan_bao_id = 3;
      case 3: {
        if (tag == 26) {
         parse_all_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_all_wei_dan_bao_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->all_wei_dan_bao_id(this->all_wei_dan_bao_id_size() - 1).data(),
            this->all_wei_dan_bao_id(this->all_wei_dan_bao_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "all_wei_dan_bao_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_all_wei_dan_bao_id;
        if (input->ExpectTag(32)) goto parse_days_before;
        break;
      }

      // optional int32 days_before = 4;
      case 4: {
        if (tag == 32) {
         parse_days_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_before_)));
          set_has_days_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.wei_dan_bao_all_success_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.wei_dan_bao_all_success_info_ask)
  return false;
#undef DO_
}

void wei_dan_bao_all_success_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.wei_dan_bao_all_success_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .DW_Location.avg_suc_type request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_type(), output);
  }

  // repeated string all_wei_dan_bao_id = 3;
  for (int i = 0; i < this->all_wei_dan_bao_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->all_wei_dan_bao_id(i).data(), this->all_wei_dan_bao_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "all_wei_dan_bao_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->all_wei_dan_bao_id(i), output);
  }

  // optional int32 days_before = 4;
  if (has_days_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->days_before(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.wei_dan_bao_all_success_info_ask)
}

::google::protobuf::uint8* wei_dan_bao_all_success_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.wei_dan_bao_all_success_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .DW_Location.avg_suc_type request_type = 2;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->request_type(), target);
  }

  // repeated string all_wei_dan_bao_id = 3;
  for (int i = 0; i < this->all_wei_dan_bao_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->all_wei_dan_bao_id(i).data(), this->all_wei_dan_bao_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "all_wei_dan_bao_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->all_wei_dan_bao_id(i), target);
  }

  // optional int32 days_before = 4;
  if (has_days_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->days_before(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.wei_dan_bao_all_success_info_ask)
  return target;
}

int wei_dan_bao_all_success_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .DW_Location.avg_suc_type request_type = 2;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

    // optional int32 days_before = 4;
    if (has_days_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_before());
    }

  }
  // repeated string all_wei_dan_bao_id = 3;
  total_size += 1 * this->all_wei_dan_bao_id_size();
  for (int i = 0; i < this->all_wei_dan_bao_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->all_wei_dan_bao_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wei_dan_bao_all_success_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wei_dan_bao_all_success_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wei_dan_bao_all_success_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wei_dan_bao_all_success_info_ask::MergeFrom(const wei_dan_bao_all_success_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_wei_dan_bao_id_.MergeFrom(from.all_wei_dan_bao_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_days_before()) {
      set_days_before(from.days_before());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wei_dan_bao_all_success_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wei_dan_bao_all_success_info_ask::CopyFrom(const wei_dan_bao_all_success_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wei_dan_bao_all_success_info_ask::IsInitialized() const {

  return true;
}

void wei_dan_bao_all_success_info_ask::Swap(wei_dan_bao_all_success_info_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(request_type_, other->request_type_);
    all_wei_dan_bao_id_.Swap(&other->all_wei_dan_bao_id_);
    std::swap(days_before_, other->days_before_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wei_dan_bao_all_success_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wei_dan_bao_all_success_info_ask_descriptor_;
  metadata.reflection = wei_dan_bao_all_success_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wei_dan_bao_all_success_info_ans::kResultFieldNumber;
const int wei_dan_bao_all_success_info_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

wei_dan_bao_all_success_info_ans::wei_dan_bao_all_success_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.wei_dan_bao_all_success_info_ans)
}

void wei_dan_bao_all_success_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

wei_dan_bao_all_success_info_ans::wei_dan_bao_all_success_info_ans(const wei_dan_bao_all_success_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.wei_dan_bao_all_success_info_ans)
}

void wei_dan_bao_all_success_info_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wei_dan_bao_all_success_info_ans::~wei_dan_bao_all_success_info_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.wei_dan_bao_all_success_info_ans)
  SharedDtor();
}

void wei_dan_bao_all_success_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void wei_dan_bao_all_success_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wei_dan_bao_all_success_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wei_dan_bao_all_success_info_ans_descriptor_;
}

const wei_dan_bao_all_success_info_ans& wei_dan_bao_all_success_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

wei_dan_bao_all_success_info_ans* wei_dan_bao_all_success_info_ans::default_instance_ = NULL;

wei_dan_bao_all_success_info_ans* wei_dan_bao_all_success_info_ans::New() const {
  return new wei_dan_bao_all_success_info_ans;
}

void wei_dan_bao_all_success_info_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wei_dan_bao_all_success_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.wei_dan_bao_all_success_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.wei_dan_bao_success_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.wei_dan_bao_all_success_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.wei_dan_bao_all_success_info_ans)
  return false;
#undef DO_
}

void wei_dan_bao_all_success_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.wei_dan_bao_all_success_info_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.wei_dan_bao_success_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.wei_dan_bao_all_success_info_ans)
}

::google::protobuf::uint8* wei_dan_bao_all_success_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.wei_dan_bao_all_success_info_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.wei_dan_bao_success_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.wei_dan_bao_all_success_info_ans)
  return target;
}

int wei_dan_bao_all_success_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.wei_dan_bao_success_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wei_dan_bao_all_success_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wei_dan_bao_all_success_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wei_dan_bao_all_success_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wei_dan_bao_all_success_info_ans::MergeFrom(const wei_dan_bao_all_success_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wei_dan_bao_all_success_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wei_dan_bao_all_success_info_ans::CopyFrom(const wei_dan_bao_all_success_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wei_dan_bao_all_success_info_ans::IsInitialized() const {

  return true;
}

void wei_dan_bao_all_success_info_ans::Swap(wei_dan_bao_all_success_info_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wei_dan_bao_all_success_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wei_dan_bao_all_success_info_ans_descriptor_;
  metadata.reflection = wei_dan_bao_all_success_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guarantee_amount_use_score_info::kWeiDanBaoIdFieldNumber;
const int guarantee_amount_use_score_info::kCurAlreadyUseGuaranteeAmountFieldNumber;
const int guarantee_amount_use_score_info::kCurGuaranteeAmountFieldNumber;
#endif  // !_MSC_VER

guarantee_amount_use_score_info::guarantee_amount_use_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.guarantee_amount_use_score_info)
}

void guarantee_amount_use_score_info::InitAsDefaultInstance() {
}

guarantee_amount_use_score_info::guarantee_amount_use_score_info(const guarantee_amount_use_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.guarantee_amount_use_score_info)
}

void guarantee_amount_use_score_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_already_use_guarantee_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_guarantee_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guarantee_amount_use_score_info::~guarantee_amount_use_score_info() {
  // @@protoc_insertion_point(destructor:DW_Location.guarantee_amount_use_score_info)
  SharedDtor();
}

void guarantee_amount_use_score_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (cur_already_use_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_already_use_guarantee_amount_;
  }
  if (cur_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_guarantee_amount_;
  }
  if (this != default_instance_) {
  }
}

void guarantee_amount_use_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guarantee_amount_use_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guarantee_amount_use_score_info_descriptor_;
}

const guarantee_amount_use_score_info& guarantee_amount_use_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

guarantee_amount_use_score_info* guarantee_amount_use_score_info::default_instance_ = NULL;

guarantee_amount_use_score_info* guarantee_amount_use_score_info::New() const {
  return new guarantee_amount_use_score_info;
}

void guarantee_amount_use_score_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
    if (has_cur_already_use_guarantee_amount()) {
      if (cur_already_use_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cur_already_use_guarantee_amount_->clear();
      }
    }
    if (has_cur_guarantee_amount()) {
      if (cur_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cur_guarantee_amount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guarantee_amount_use_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.guarantee_amount_use_score_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes wei_dan_bao_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cur_already_use_guarantee_amount;
        break;
      }

      // optional bytes cur_already_use_guarantee_amount = 2;
      case 2: {
        if (tag == 18) {
         parse_cur_already_use_guarantee_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cur_already_use_guarantee_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cur_guarantee_amount;
        break;
      }

      // optional bytes cur_guarantee_amount = 3;
      case 3: {
        if (tag == 26) {
         parse_cur_guarantee_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cur_guarantee_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.guarantee_amount_use_score_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.guarantee_amount_use_score_info)
  return false;
#undef DO_
}

void guarantee_amount_use_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.guarantee_amount_use_score_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wei_dan_bao_id(), output);
  }

  // optional bytes cur_already_use_guarantee_amount = 2;
  if (has_cur_already_use_guarantee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cur_already_use_guarantee_amount(), output);
  }

  // optional bytes cur_guarantee_amount = 3;
  if (has_cur_guarantee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cur_guarantee_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.guarantee_amount_use_score_info)
}

::google::protobuf::uint8* guarantee_amount_use_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.guarantee_amount_use_score_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wei_dan_bao_id(), target);
  }

  // optional bytes cur_already_use_guarantee_amount = 2;
  if (has_cur_already_use_guarantee_amount()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cur_already_use_guarantee_amount(), target);
  }

  // optional bytes cur_guarantee_amount = 3;
  if (has_cur_guarantee_amount()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cur_guarantee_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.guarantee_amount_use_score_info)
  return target;
}

int guarantee_amount_use_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes wei_dan_bao_id = 1;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

    // optional bytes cur_already_use_guarantee_amount = 2;
    if (has_cur_already_use_guarantee_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cur_already_use_guarantee_amount());
    }

    // optional bytes cur_guarantee_amount = 3;
    if (has_cur_guarantee_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cur_guarantee_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guarantee_amount_use_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guarantee_amount_use_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guarantee_amount_use_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guarantee_amount_use_score_info::MergeFrom(const guarantee_amount_use_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_cur_already_use_guarantee_amount()) {
      set_cur_already_use_guarantee_amount(from.cur_already_use_guarantee_amount());
    }
    if (from.has_cur_guarantee_amount()) {
      set_cur_guarantee_amount(from.cur_guarantee_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guarantee_amount_use_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guarantee_amount_use_score_info::CopyFrom(const guarantee_amount_use_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guarantee_amount_use_score_info::IsInitialized() const {

  return true;
}

void guarantee_amount_use_score_info::Swap(guarantee_amount_use_score_info* other) {
  if (other != this) {
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(cur_already_use_guarantee_amount_, other->cur_already_use_guarantee_amount_);
    std::swap(cur_guarantee_amount_, other->cur_guarantee_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guarantee_amount_use_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guarantee_amount_use_score_info_descriptor_;
  metadata.reflection = guarantee_amount_use_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avg_diligence_guarantee_score_info::kDanBaoAmountFieldNumber;
const int avg_diligence_guarantee_score_info::kBidLoanAmountFieldNumber;
#endif  // !_MSC_VER

avg_diligence_guarantee_score_info::avg_diligence_guarantee_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.avg_diligence_guarantee_score_info)
}

void avg_diligence_guarantee_score_info::InitAsDefaultInstance() {
}

avg_diligence_guarantee_score_info::avg_diligence_guarantee_score_info(const avg_diligence_guarantee_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.avg_diligence_guarantee_score_info)
}

void avg_diligence_guarantee_score_info::SharedCtor() {
  _cached_size_ = 0;
  dan_bao_amount_ = 0;
  bid_loan_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avg_diligence_guarantee_score_info::~avg_diligence_guarantee_score_info() {
  // @@protoc_insertion_point(destructor:DW_Location.avg_diligence_guarantee_score_info)
  SharedDtor();
}

void avg_diligence_guarantee_score_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void avg_diligence_guarantee_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avg_diligence_guarantee_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avg_diligence_guarantee_score_info_descriptor_;
}

const avg_diligence_guarantee_score_info& avg_diligence_guarantee_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

avg_diligence_guarantee_score_info* avg_diligence_guarantee_score_info::default_instance_ = NULL;

avg_diligence_guarantee_score_info* avg_diligence_guarantee_score_info::New() const {
  return new avg_diligence_guarantee_score_info;
}

void avg_diligence_guarantee_score_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<avg_diligence_guarantee_score_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dan_bao_amount_, bid_loan_amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avg_diligence_guarantee_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.avg_diligence_guarantee_score_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dan_bao_amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dan_bao_amount_)));
          set_has_dan_bao_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bid_loan_amount;
        break;
      }

      // optional float bid_loan_amount = 2;
      case 2: {
        if (tag == 21) {
         parse_bid_loan_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bid_loan_amount_)));
          set_has_bid_loan_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.avg_diligence_guarantee_score_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.avg_diligence_guarantee_score_info)
  return false;
#undef DO_
}

void avg_diligence_guarantee_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.avg_diligence_guarantee_score_info)
  // optional float dan_bao_amount = 1;
  if (has_dan_bao_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dan_bao_amount(), output);
  }

  // optional float bid_loan_amount = 2;
  if (has_bid_loan_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bid_loan_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.avg_diligence_guarantee_score_info)
}

::google::protobuf::uint8* avg_diligence_guarantee_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.avg_diligence_guarantee_score_info)
  // optional float dan_bao_amount = 1;
  if (has_dan_bao_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dan_bao_amount(), target);
  }

  // optional float bid_loan_amount = 2;
  if (has_bid_loan_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bid_loan_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.avg_diligence_guarantee_score_info)
  return target;
}

int avg_diligence_guarantee_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float dan_bao_amount = 1;
    if (has_dan_bao_amount()) {
      total_size += 1 + 4;
    }

    // optional float bid_loan_amount = 2;
    if (has_bid_loan_amount()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avg_diligence_guarantee_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avg_diligence_guarantee_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avg_diligence_guarantee_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avg_diligence_guarantee_score_info::MergeFrom(const avg_diligence_guarantee_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dan_bao_amount()) {
      set_dan_bao_amount(from.dan_bao_amount());
    }
    if (from.has_bid_loan_amount()) {
      set_bid_loan_amount(from.bid_loan_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avg_diligence_guarantee_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avg_diligence_guarantee_score_info::CopyFrom(const avg_diligence_guarantee_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avg_diligence_guarantee_score_info::IsInitialized() const {

  return true;
}

void avg_diligence_guarantee_score_info::Swap(avg_diligence_guarantee_score_info* other) {
  if (other != this) {
    std::swap(dan_bao_amount_, other->dan_bao_amount_);
    std::swap(bid_loan_amount_, other->bid_loan_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avg_diligence_guarantee_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avg_diligence_guarantee_score_info_descriptor_;
  metadata.reflection = avg_diligence_guarantee_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avg_diligence_guarantee_score_ask::kAskHeaderFieldNumber;
const int avg_diligence_guarantee_score_ask::kWeiDanBaoIdFieldNumber;
const int avg_diligence_guarantee_score_ask::kDaysBeforeFieldNumber;
#endif  // !_MSC_VER

avg_diligence_guarantee_score_ask::avg_diligence_guarantee_score_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.avg_diligence_guarantee_score_ask)
}

void avg_diligence_guarantee_score_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

avg_diligence_guarantee_score_ask::avg_diligence_guarantee_score_ask(const avg_diligence_guarantee_score_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.avg_diligence_guarantee_score_ask)
}

void avg_diligence_guarantee_score_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  days_before_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avg_diligence_guarantee_score_ask::~avg_diligence_guarantee_score_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.avg_diligence_guarantee_score_ask)
  SharedDtor();
}

void avg_diligence_guarantee_score_ask::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void avg_diligence_guarantee_score_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avg_diligence_guarantee_score_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avg_diligence_guarantee_score_ask_descriptor_;
}

const avg_diligence_guarantee_score_ask& avg_diligence_guarantee_score_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

avg_diligence_guarantee_score_ask* avg_diligence_guarantee_score_ask::default_instance_ = NULL;

avg_diligence_guarantee_score_ask* avg_diligence_guarantee_score_ask::New() const {
  return new avg_diligence_guarantee_score_ask;
}

void avg_diligence_guarantee_score_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
    days_before_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avg_diligence_guarantee_score_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.avg_diligence_guarantee_score_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // optional bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_days_before;
        break;
      }

      // optional int32 days_before = 3;
      case 3: {
        if (tag == 24) {
         parse_days_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_before_)));
          set_has_days_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.avg_diligence_guarantee_score_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.avg_diligence_guarantee_score_ask)
  return false;
#undef DO_
}

void avg_diligence_guarantee_score_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.avg_diligence_guarantee_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->wei_dan_bao_id(), output);
  }

  // optional int32 days_before = 3;
  if (has_days_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->days_before(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.avg_diligence_guarantee_score_ask)
}

::google::protobuf::uint8* avg_diligence_guarantee_score_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.avg_diligence_guarantee_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->wei_dan_bao_id(), target);
  }

  // optional int32 days_before = 3;
  if (has_days_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->days_before(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.avg_diligence_guarantee_score_ask)
  return target;
}

int avg_diligence_guarantee_score_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes wei_dan_bao_id = 2;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

    // optional int32 days_before = 3;
    if (has_days_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_before());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avg_diligence_guarantee_score_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avg_diligence_guarantee_score_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avg_diligence_guarantee_score_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avg_diligence_guarantee_score_ask::MergeFrom(const avg_diligence_guarantee_score_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_days_before()) {
      set_days_before(from.days_before());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avg_diligence_guarantee_score_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avg_diligence_guarantee_score_ask::CopyFrom(const avg_diligence_guarantee_score_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avg_diligence_guarantee_score_ask::IsInitialized() const {

  return true;
}

void avg_diligence_guarantee_score_ask::Swap(avg_diligence_guarantee_score_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(days_before_, other->days_before_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avg_diligence_guarantee_score_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avg_diligence_guarantee_score_ask_descriptor_;
  metadata.reflection = avg_diligence_guarantee_score_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avg_diligence_guarantee_score_ans::kResultFieldNumber;
const int avg_diligence_guarantee_score_ans::kWeiDanBaoIdFieldNumber;
const int avg_diligence_guarantee_score_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

avg_diligence_guarantee_score_ans::avg_diligence_guarantee_score_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.avg_diligence_guarantee_score_ans)
}

void avg_diligence_guarantee_score_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

avg_diligence_guarantee_score_ans::avg_diligence_guarantee_score_ans(const avg_diligence_guarantee_score_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.avg_diligence_guarantee_score_ans)
}

void avg_diligence_guarantee_score_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avg_diligence_guarantee_score_ans::~avg_diligence_guarantee_score_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.avg_diligence_guarantee_score_ans)
  SharedDtor();
}

void avg_diligence_guarantee_score_ans::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void avg_diligence_guarantee_score_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avg_diligence_guarantee_score_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avg_diligence_guarantee_score_ans_descriptor_;
}

const avg_diligence_guarantee_score_ans& avg_diligence_guarantee_score_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

avg_diligence_guarantee_score_ans* avg_diligence_guarantee_score_ans::default_instance_ = NULL;

avg_diligence_guarantee_score_ans* avg_diligence_guarantee_score_ans::New() const {
  return new avg_diligence_guarantee_score_ans;
}

void avg_diligence_guarantee_score_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avg_diligence_guarantee_score_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.avg_diligence_guarantee_score_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // optional bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .DW_Location.avg_diligence_guarantee_score_info info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.avg_diligence_guarantee_score_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.avg_diligence_guarantee_score_ans)
  return false;
#undef DO_
}

void avg_diligence_guarantee_score_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.avg_diligence_guarantee_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional bytes wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->wei_dan_bao_id(), output);
  }

  // repeated .DW_Location.avg_diligence_guarantee_score_info info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.avg_diligence_guarantee_score_ans)
}

::google::protobuf::uint8* avg_diligence_guarantee_score_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.avg_diligence_guarantee_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional bytes wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->wei_dan_bao_id(), target);
  }

  // repeated .DW_Location.avg_diligence_guarantee_score_info info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.avg_diligence_guarantee_score_ans)
  return target;
}

int avg_diligence_guarantee_score_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional bytes wei_dan_bao_id = 2;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

  }
  // repeated .DW_Location.avg_diligence_guarantee_score_info info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avg_diligence_guarantee_score_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avg_diligence_guarantee_score_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avg_diligence_guarantee_score_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avg_diligence_guarantee_score_ans::MergeFrom(const avg_diligence_guarantee_score_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avg_diligence_guarantee_score_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avg_diligence_guarantee_score_ans::CopyFrom(const avg_diligence_guarantee_score_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avg_diligence_guarantee_score_ans::IsInitialized() const {

  return true;
}

void avg_diligence_guarantee_score_ans::Swap(avg_diligence_guarantee_score_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avg_diligence_guarantee_score_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avg_diligence_guarantee_score_ans_descriptor_;
  metadata.reflection = avg_diligence_guarantee_score_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guarantee_amount_use_score_ask::kAskHeaderFieldNumber;
const int guarantee_amount_use_score_ask::kWeiDanBaoIdFieldNumber;
const int guarantee_amount_use_score_ask::kDaysBeforeFieldNumber;
#endif  // !_MSC_VER

guarantee_amount_use_score_ask::guarantee_amount_use_score_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.guarantee_amount_use_score_ask)
}

void guarantee_amount_use_score_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

guarantee_amount_use_score_ask::guarantee_amount_use_score_ask(const guarantee_amount_use_score_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.guarantee_amount_use_score_ask)
}

void guarantee_amount_use_score_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  days_before_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guarantee_amount_use_score_ask::~guarantee_amount_use_score_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.guarantee_amount_use_score_ask)
  SharedDtor();
}

void guarantee_amount_use_score_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void guarantee_amount_use_score_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guarantee_amount_use_score_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guarantee_amount_use_score_ask_descriptor_;
}

const guarantee_amount_use_score_ask& guarantee_amount_use_score_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

guarantee_amount_use_score_ask* guarantee_amount_use_score_ask::default_instance_ = NULL;

guarantee_amount_use_score_ask* guarantee_amount_use_score_ask::New() const {
  return new guarantee_amount_use_score_ask;
}

void guarantee_amount_use_score_ask::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    days_before_ = 0;
  }
  wei_dan_bao_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guarantee_amount_use_score_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.guarantee_amount_use_score_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // repeated bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        if (input->ExpectTag(24)) goto parse_days_before;
        break;
      }

      // optional int32 days_before = 3;
      case 3: {
        if (tag == 24) {
         parse_days_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_before_)));
          set_has_days_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.guarantee_amount_use_score_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.guarantee_amount_use_score_ask)
  return false;
#undef DO_
}

void guarantee_amount_use_score_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.guarantee_amount_use_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->wei_dan_bao_id(i), output);
  }

  // optional int32 days_before = 3;
  if (has_days_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->days_before(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.guarantee_amount_use_score_ask)
}

::google::protobuf::uint8* guarantee_amount_use_score_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.guarantee_amount_use_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->wei_dan_bao_id(i), target);
  }

  // optional int32 days_before = 3;
  if (has_days_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->days_before(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.guarantee_amount_use_score_ask)
  return target;
}

int guarantee_amount_use_score_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 days_before = 3;
    if (has_days_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_before());
    }

  }
  // repeated bytes wei_dan_bao_id = 2;
  total_size += 1 * this->wei_dan_bao_id_size();
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->wei_dan_bao_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guarantee_amount_use_score_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guarantee_amount_use_score_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guarantee_amount_use_score_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guarantee_amount_use_score_ask::MergeFrom(const guarantee_amount_use_score_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  wei_dan_bao_id_.MergeFrom(from.wei_dan_bao_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_days_before()) {
      set_days_before(from.days_before());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guarantee_amount_use_score_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guarantee_amount_use_score_ask::CopyFrom(const guarantee_amount_use_score_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guarantee_amount_use_score_ask::IsInitialized() const {

  return true;
}

void guarantee_amount_use_score_ask::Swap(guarantee_amount_use_score_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    wei_dan_bao_id_.Swap(&other->wei_dan_bao_id_);
    std::swap(days_before_, other->days_before_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guarantee_amount_use_score_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guarantee_amount_use_score_ask_descriptor_;
  metadata.reflection = guarantee_amount_use_score_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guarantee_amount_use_score_ans::kResultFieldNumber;
const int guarantee_amount_use_score_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

guarantee_amount_use_score_ans::guarantee_amount_use_score_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.guarantee_amount_use_score_ans)
}

void guarantee_amount_use_score_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

guarantee_amount_use_score_ans::guarantee_amount_use_score_ans(const guarantee_amount_use_score_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.guarantee_amount_use_score_ans)
}

void guarantee_amount_use_score_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guarantee_amount_use_score_ans::~guarantee_amount_use_score_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.guarantee_amount_use_score_ans)
  SharedDtor();
}

void guarantee_amount_use_score_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void guarantee_amount_use_score_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guarantee_amount_use_score_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guarantee_amount_use_score_ans_descriptor_;
}

const guarantee_amount_use_score_ans& guarantee_amount_use_score_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

guarantee_amount_use_score_ans* guarantee_amount_use_score_ans::default_instance_ = NULL;

guarantee_amount_use_score_ans* guarantee_amount_use_score_ans::New() const {
  return new guarantee_amount_use_score_ans;
}

void guarantee_amount_use_score_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guarantee_amount_use_score_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.guarantee_amount_use_score_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.guarantee_amount_use_score_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.guarantee_amount_use_score_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.guarantee_amount_use_score_ans)
  return false;
#undef DO_
}

void guarantee_amount_use_score_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.guarantee_amount_use_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.guarantee_amount_use_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.guarantee_amount_use_score_ans)
}

::google::protobuf::uint8* guarantee_amount_use_score_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.guarantee_amount_use_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.guarantee_amount_use_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.guarantee_amount_use_score_ans)
  return target;
}

int guarantee_amount_use_score_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.guarantee_amount_use_score_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guarantee_amount_use_score_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guarantee_amount_use_score_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guarantee_amount_use_score_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guarantee_amount_use_score_ans::MergeFrom(const guarantee_amount_use_score_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guarantee_amount_use_score_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guarantee_amount_use_score_ans::CopyFrom(const guarantee_amount_use_score_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guarantee_amount_use_score_ans::IsInitialized() const {

  return true;
}

void guarantee_amount_use_score_ans::Swap(guarantee_amount_use_score_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guarantee_amount_use_score_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guarantee_amount_use_score_ans_descriptor_;
  metadata.reflection = guarantee_amount_use_score_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rate_score_info::kKindCountsFieldNumber;
const int rate_score_info::kAlreadyExpiresCountFieldNumber;
const int rate_score_info::kKindAmountFieldNumber;
const int rate_score_info::kAlreadyExpiresAmountFieldNumber;
const int rate_score_info::kWeiDanBaoIdFieldNumber;
const int rate_score_info::kMaxExpiresDayFieldNumber;
const int rate_score_info::kAnsTypeFieldNumber;
#endif  // !_MSC_VER

rate_score_info::rate_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.rate_score_info)
}

void rate_score_info::InitAsDefaultInstance() {
}

rate_score_info::rate_score_info(const rate_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.rate_score_info)
}

void rate_score_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_counts_ = 0;
  already_expires_count_ = 0;
  kind_amount_ = 0;
  already_expires_amount_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_expires_day_ = 0;
  ans_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rate_score_info::~rate_score_info() {
  // @@protoc_insertion_point(destructor:DW_Location.rate_score_info)
  SharedDtor();
}

void rate_score_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
  }
}

void rate_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rate_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rate_score_info_descriptor_;
}

const rate_score_info& rate_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

rate_score_info* rate_score_info::default_instance_ = NULL;

rate_score_info* rate_score_info::New() const {
  return new rate_score_info;
}

void rate_score_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<rate_score_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(kind_counts_, already_expires_amount_);
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
    max_expires_day_ = 0;
    ans_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rate_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.rate_score_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kind_counts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_counts_)));
          set_has_kind_counts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_already_expires_count;
        break;
      }

      // optional int32 already_expires_count = 2;
      case 2: {
        if (tag == 16) {
         parse_already_expires_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_expires_count_)));
          set_has_already_expires_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_kind_amount;
        break;
      }

      // optional float kind_amount = 3;
      case 3: {
        if (tag == 29) {
         parse_kind_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kind_amount_)));
          set_has_kind_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_already_expires_amount;
        break;
      }

      // optional float already_expires_amount = 4;
      case 4: {
        if (tag == 37) {
         parse_already_expires_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &already_expires_amount_)));
          set_has_already_expires_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wei_dan_bao_id;
        break;
      }

      // optional bytes wei_dan_bao_id = 5;
      case 5: {
        if (tag == 42) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_expires_day;
        break;
      }

      // optional int32 max_expires_day = 6;
      case 6: {
        if (tag == 48) {
         parse_max_expires_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_expires_day_)));
          set_has_max_expires_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ans_type;
        break;
      }

      // optional .DW_Location.rate_score_type ans_type = 7;
      case 7: {
        if (tag == 56) {
         parse_ans_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::rate_score_type_IsValid(value)) {
            set_ans_type(static_cast< ::DW_Location::rate_score_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.rate_score_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.rate_score_info)
  return false;
#undef DO_
}

void rate_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.rate_score_info)
  // optional int32 kind_counts = 1;
  if (has_kind_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind_counts(), output);
  }

  // optional int32 already_expires_count = 2;
  if (has_already_expires_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->already_expires_count(), output);
  }

  // optional float kind_amount = 3;
  if (has_kind_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kind_amount(), output);
  }

  // optional float already_expires_amount = 4;
  if (has_already_expires_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->already_expires_amount(), output);
  }

  // optional bytes wei_dan_bao_id = 5;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->wei_dan_bao_id(), output);
  }

  // optional int32 max_expires_day = 6;
  if (has_max_expires_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_expires_day(), output);
  }

  // optional .DW_Location.rate_score_type ans_type = 7;
  if (has_ans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ans_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.rate_score_info)
}

::google::protobuf::uint8* rate_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.rate_score_info)
  // optional int32 kind_counts = 1;
  if (has_kind_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind_counts(), target);
  }

  // optional int32 already_expires_count = 2;
  if (has_already_expires_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->already_expires_count(), target);
  }

  // optional float kind_amount = 3;
  if (has_kind_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kind_amount(), target);
  }

  // optional float already_expires_amount = 4;
  if (has_already_expires_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->already_expires_amount(), target);
  }

  // optional bytes wei_dan_bao_id = 5;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->wei_dan_bao_id(), target);
  }

  // optional int32 max_expires_day = 6;
  if (has_max_expires_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_expires_day(), target);
  }

  // optional .DW_Location.rate_score_type ans_type = 7;
  if (has_ans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ans_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.rate_score_info)
  return target;
}

int rate_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kind_counts = 1;
    if (has_kind_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind_counts());
    }

    // optional int32 already_expires_count = 2;
    if (has_already_expires_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_expires_count());
    }

    // optional float kind_amount = 3;
    if (has_kind_amount()) {
      total_size += 1 + 4;
    }

    // optional float already_expires_amount = 4;
    if (has_already_expires_amount()) {
      total_size += 1 + 4;
    }

    // optional bytes wei_dan_bao_id = 5;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

    // optional int32 max_expires_day = 6;
    if (has_max_expires_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_expires_day());
    }

    // optional .DW_Location.rate_score_type ans_type = 7;
    if (has_ans_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ans_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rate_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rate_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rate_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rate_score_info::MergeFrom(const rate_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind_counts()) {
      set_kind_counts(from.kind_counts());
    }
    if (from.has_already_expires_count()) {
      set_already_expires_count(from.already_expires_count());
    }
    if (from.has_kind_amount()) {
      set_kind_amount(from.kind_amount());
    }
    if (from.has_already_expires_amount()) {
      set_already_expires_amount(from.already_expires_amount());
    }
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_max_expires_day()) {
      set_max_expires_day(from.max_expires_day());
    }
    if (from.has_ans_type()) {
      set_ans_type(from.ans_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rate_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rate_score_info::CopyFrom(const rate_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rate_score_info::IsInitialized() const {

  return true;
}

void rate_score_info::Swap(rate_score_info* other) {
  if (other != this) {
    std::swap(kind_counts_, other->kind_counts_);
    std::swap(already_expires_count_, other->already_expires_count_);
    std::swap(kind_amount_, other->kind_amount_);
    std::swap(already_expires_amount_, other->already_expires_amount_);
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(max_expires_day_, other->max_expires_day_);
    std::swap(ans_type_, other->ans_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rate_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rate_score_info_descriptor_;
  metadata.reflection = rate_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rate_score_ask::kAskHeaderFieldNumber;
const int rate_score_ask::kRequestTypeFieldNumber;
const int rate_score_ask::kWeiDanBaoIdFieldNumber;
const int rate_score_ask::kDaysBeforeFieldNumber;
#endif  // !_MSC_VER

rate_score_ask::rate_score_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.rate_score_ask)
}

void rate_score_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

rate_score_ask::rate_score_ask(const rate_score_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.rate_score_ask)
}

void rate_score_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  request_type_ = 1;
  days_before_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rate_score_ask::~rate_score_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.rate_score_ask)
  SharedDtor();
}

void rate_score_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void rate_score_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rate_score_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rate_score_ask_descriptor_;
}

const rate_score_ask& rate_score_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

rate_score_ask* rate_score_ask::default_instance_ = NULL;

rate_score_ask* rate_score_ask::New() const {
  return new rate_score_ask;
}

void rate_score_ask::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    request_type_ = 1;
    days_before_ = 0;
  }
  wei_dan_bao_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rate_score_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.rate_score_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_type;
        break;
      }

      // optional .DW_Location.rate_score_type request_type = 2;
      case 2: {
        if (tag == 16) {
         parse_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::rate_score_type_IsValid(value)) {
            set_request_type(static_cast< ::DW_Location::rate_score_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wei_dan_bao_id;
        break;
      }

      // repeated bytes wei_dan_bao_id = 3;
      case 3: {
        if (tag == 26) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wei_dan_bao_id;
        if (input->ExpectTag(32)) goto parse_days_before;
        break;
      }

      // optional int32 days_before = 4;
      case 4: {
        if (tag == 32) {
         parse_days_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_before_)));
          set_has_days_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.rate_score_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.rate_score_ask)
  return false;
#undef DO_
}

void rate_score_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.rate_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .DW_Location.rate_score_type request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_type(), output);
  }

  // repeated bytes wei_dan_bao_id = 3;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->wei_dan_bao_id(i), output);
  }

  // optional int32 days_before = 4;
  if (has_days_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->days_before(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.rate_score_ask)
}

::google::protobuf::uint8* rate_score_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.rate_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .DW_Location.rate_score_type request_type = 2;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->request_type(), target);
  }

  // repeated bytes wei_dan_bao_id = 3;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->wei_dan_bao_id(i), target);
  }

  // optional int32 days_before = 4;
  if (has_days_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->days_before(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.rate_score_ask)
  return target;
}

int rate_score_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .DW_Location.rate_score_type request_type = 2;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

    // optional int32 days_before = 4;
    if (has_days_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_before());
    }

  }
  // repeated bytes wei_dan_bao_id = 3;
  total_size += 1 * this->wei_dan_bao_id_size();
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->wei_dan_bao_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rate_score_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rate_score_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rate_score_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rate_score_ask::MergeFrom(const rate_score_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  wei_dan_bao_id_.MergeFrom(from.wei_dan_bao_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_days_before()) {
      set_days_before(from.days_before());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rate_score_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rate_score_ask::CopyFrom(const rate_score_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rate_score_ask::IsInitialized() const {

  return true;
}

void rate_score_ask::Swap(rate_score_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(request_type_, other->request_type_);
    wei_dan_bao_id_.Swap(&other->wei_dan_bao_id_);
    std::swap(days_before_, other->days_before_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rate_score_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rate_score_ask_descriptor_;
  metadata.reflection = rate_score_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rate_score_ans::kResultFieldNumber;
const int rate_score_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

rate_score_ans::rate_score_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.rate_score_ans)
}

void rate_score_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

rate_score_ans::rate_score_ans(const rate_score_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.rate_score_ans)
}

void rate_score_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rate_score_ans::~rate_score_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.rate_score_ans)
  SharedDtor();
}

void rate_score_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void rate_score_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rate_score_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rate_score_ans_descriptor_;
}

const rate_score_ans& rate_score_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

rate_score_ans* rate_score_ans::default_instance_ = NULL;

rate_score_ans* rate_score_ans::New() const {
  return new rate_score_ans;
}

void rate_score_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rate_score_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.rate_score_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.rate_score_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.rate_score_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.rate_score_ans)
  return false;
#undef DO_
}

void rate_score_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.rate_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.rate_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.rate_score_ans)
}

::google::protobuf::uint8* rate_score_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.rate_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.rate_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.rate_score_ans)
  return target;
}

int rate_score_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.rate_score_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rate_score_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rate_score_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rate_score_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rate_score_ans::MergeFrom(const rate_score_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rate_score_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rate_score_ans::CopyFrom(const rate_score_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rate_score_ans::IsInitialized() const {

  return true;
}

void rate_score_ans::Swap(rate_score_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rate_score_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rate_score_ans_descriptor_;
  metadata.reflection = rate_score_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int covers_time_score_info::kWhichDayFieldNumber;
const int covers_time_score_info::kCoversPeriodFieldNumber;
#endif  // !_MSC_VER

covers_time_score_info::covers_time_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.covers_time_score_info)
}

void covers_time_score_info::InitAsDefaultInstance() {
}

covers_time_score_info::covers_time_score_info(const covers_time_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.covers_time_score_info)
}

void covers_time_score_info::SharedCtor() {
  _cached_size_ = 0;
  which_day_ = 0;
  covers_period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

covers_time_score_info::~covers_time_score_info() {
  // @@protoc_insertion_point(destructor:DW_Location.covers_time_score_info)
  SharedDtor();
}

void covers_time_score_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void covers_time_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* covers_time_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return covers_time_score_info_descriptor_;
}

const covers_time_score_info& covers_time_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

covers_time_score_info* covers_time_score_info::default_instance_ = NULL;

covers_time_score_info* covers_time_score_info::New() const {
  return new covers_time_score_info;
}

void covers_time_score_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<covers_time_score_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(which_day_, covers_period_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool covers_time_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.covers_time_score_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 which_day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &which_day_)));
          set_has_which_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_covers_period;
        break;
      }

      // optional int32 covers_period = 2;
      case 2: {
        if (tag == 16) {
         parse_covers_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &covers_period_)));
          set_has_covers_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.covers_time_score_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.covers_time_score_info)
  return false;
#undef DO_
}

void covers_time_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.covers_time_score_info)
  // optional int32 which_day = 1;
  if (has_which_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->which_day(), output);
  }

  // optional int32 covers_period = 2;
  if (has_covers_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->covers_period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.covers_time_score_info)
}

::google::protobuf::uint8* covers_time_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.covers_time_score_info)
  // optional int32 which_day = 1;
  if (has_which_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->which_day(), target);
  }

  // optional int32 covers_period = 2;
  if (has_covers_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->covers_period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.covers_time_score_info)
  return target;
}

int covers_time_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 which_day = 1;
    if (has_which_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->which_day());
    }

    // optional int32 covers_period = 2;
    if (has_covers_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->covers_period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void covers_time_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const covers_time_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const covers_time_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void covers_time_score_info::MergeFrom(const covers_time_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_which_day()) {
      set_which_day(from.which_day());
    }
    if (from.has_covers_period()) {
      set_covers_period(from.covers_period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void covers_time_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void covers_time_score_info::CopyFrom(const covers_time_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool covers_time_score_info::IsInitialized() const {

  return true;
}

void covers_time_score_info::Swap(covers_time_score_info* other) {
  if (other != this) {
    std::swap(which_day_, other->which_day_);
    std::swap(covers_period_, other->covers_period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata covers_time_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = covers_time_score_info_descriptor_;
  metadata.reflection = covers_time_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int covers_time_score_ask::kAskHeaderFieldNumber;
const int covers_time_score_ask::kWeiDanBaoIdFieldNumber;
#endif  // !_MSC_VER

covers_time_score_ask::covers_time_score_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.covers_time_score_ask)
}

void covers_time_score_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

covers_time_score_ask::covers_time_score_ask(const covers_time_score_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.covers_time_score_ask)
}

void covers_time_score_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

covers_time_score_ask::~covers_time_score_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.covers_time_score_ask)
  SharedDtor();
}

void covers_time_score_ask::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void covers_time_score_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* covers_time_score_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return covers_time_score_ask_descriptor_;
}

const covers_time_score_ask& covers_time_score_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

covers_time_score_ask* covers_time_score_ask::default_instance_ = NULL;

covers_time_score_ask* covers_time_score_ask::New() const {
  return new covers_time_score_ask;
}

void covers_time_score_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool covers_time_score_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.covers_time_score_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // optional bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.covers_time_score_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.covers_time_score_ask)
  return false;
#undef DO_
}

void covers_time_score_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.covers_time_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->wei_dan_bao_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.covers_time_score_ask)
}

::google::protobuf::uint8* covers_time_score_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.covers_time_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes wei_dan_bao_id = 2;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->wei_dan_bao_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.covers_time_score_ask)
  return target;
}

int covers_time_score_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes wei_dan_bao_id = 2;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void covers_time_score_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const covers_time_score_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const covers_time_score_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void covers_time_score_ask::MergeFrom(const covers_time_score_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void covers_time_score_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void covers_time_score_ask::CopyFrom(const covers_time_score_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool covers_time_score_ask::IsInitialized() const {

  return true;
}

void covers_time_score_ask::Swap(covers_time_score_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata covers_time_score_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = covers_time_score_ask_descriptor_;
  metadata.reflection = covers_time_score_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int covers_time_score_ans::kResultFieldNumber;
const int covers_time_score_ans::kInfoFieldNumber;
const int covers_time_score_ans::kTypeFieldNumber;
const int covers_time_score_ans::kWeiDanBaoIdFieldNumber;
#endif  // !_MSC_VER

covers_time_score_ans::covers_time_score_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.covers_time_score_ans)
}

void covers_time_score_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

covers_time_score_ans::covers_time_score_ans(const covers_time_score_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.covers_time_score_ans)
}

void covers_time_score_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  type_ = 1;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

covers_time_score_ans::~covers_time_score_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.covers_time_score_ans)
  SharedDtor();
}

void covers_time_score_ans::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void covers_time_score_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* covers_time_score_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return covers_time_score_ans_descriptor_;
}

const covers_time_score_ans& covers_time_score_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

covers_time_score_ans* covers_time_score_ans::default_instance_ = NULL;

covers_time_score_ans* covers_time_score_ans::New() const {
  return new covers_time_score_ans;
}

void covers_time_score_ans::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
    type_ = 1;
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool covers_time_score_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.covers_time_score_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.covers_time_score_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .DW_Location.covers_time_score_type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::covers_time_score_type_IsValid(value)) {
            set_type(static_cast< ::DW_Location::covers_time_score_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wei_dan_bao_id;
        break;
      }

      // optional bytes wei_dan_bao_id = 4;
      case 4: {
        if (tag == 34) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.covers_time_score_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.covers_time_score_ans)
  return false;
#undef DO_
}

void covers_time_score_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.covers_time_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.covers_time_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .DW_Location.covers_time_score_type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional bytes wei_dan_bao_id = 4;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->wei_dan_bao_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.covers_time_score_ans)
}

::google::protobuf::uint8* covers_time_score_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.covers_time_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.covers_time_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .DW_Location.covers_time_score_type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional bytes wei_dan_bao_id = 4;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->wei_dan_bao_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.covers_time_score_ans)
  return target;
}

int covers_time_score_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .DW_Location.covers_time_score_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes wei_dan_bao_id = 4;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

  }
  // repeated .DW_Location.covers_time_score_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void covers_time_score_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const covers_time_score_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const covers_time_score_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void covers_time_score_ans::MergeFrom(const covers_time_score_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void covers_time_score_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void covers_time_score_ans::CopyFrom(const covers_time_score_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool covers_time_score_ans::IsInitialized() const {

  return true;
}

void covers_time_score_ans::Swap(covers_time_score_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(type_, other->type_);
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata covers_time_score_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = covers_time_score_ans_descriptor_;
  metadata.reflection = covers_time_score_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int follow_guarantee_invest_rank_info::kWeiDanBaoIdFieldNumber;
const int follow_guarantee_invest_rank_info::kFollowDanBaoCountFieldNumber;
const int follow_guarantee_invest_rank_info::kFollowTouZiCountFieldNumber;
#endif  // !_MSC_VER

follow_guarantee_invest_rank_info::follow_guarantee_invest_rank_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.follow_guarantee_invest_rank_info)
}

void follow_guarantee_invest_rank_info::InitAsDefaultInstance() {
}

follow_guarantee_invest_rank_info::follow_guarantee_invest_rank_info(const follow_guarantee_invest_rank_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.follow_guarantee_invest_rank_info)
}

void follow_guarantee_invest_rank_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  follow_dan_bao_count_ = 0;
  follow_tou_zi_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

follow_guarantee_invest_rank_info::~follow_guarantee_invest_rank_info() {
  // @@protoc_insertion_point(destructor:DW_Location.follow_guarantee_invest_rank_info)
  SharedDtor();
}

void follow_guarantee_invest_rank_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
  }
}

void follow_guarantee_invest_rank_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* follow_guarantee_invest_rank_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return follow_guarantee_invest_rank_info_descriptor_;
}

const follow_guarantee_invest_rank_info& follow_guarantee_invest_rank_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

follow_guarantee_invest_rank_info* follow_guarantee_invest_rank_info::default_instance_ = NULL;

follow_guarantee_invest_rank_info* follow_guarantee_invest_rank_info::New() const {
  return new follow_guarantee_invest_rank_info;
}

void follow_guarantee_invest_rank_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<follow_guarantee_invest_rank_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(follow_dan_bao_count_, follow_tou_zi_count_);
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool follow_guarantee_invest_rank_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.follow_guarantee_invest_rank_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes wei_dan_bao_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_follow_dan_bao_count;
        break;
      }

      // optional int32 follow_dan_bao_count = 2;
      case 2: {
        if (tag == 16) {
         parse_follow_dan_bao_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &follow_dan_bao_count_)));
          set_has_follow_dan_bao_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_follow_tou_zi_count;
        break;
      }

      // optional int32 follow_tou_zi_count = 3;
      case 3: {
        if (tag == 24) {
         parse_follow_tou_zi_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &follow_tou_zi_count_)));
          set_has_follow_tou_zi_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.follow_guarantee_invest_rank_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.follow_guarantee_invest_rank_info)
  return false;
#undef DO_
}

void follow_guarantee_invest_rank_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.follow_guarantee_invest_rank_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wei_dan_bao_id(), output);
  }

  // optional int32 follow_dan_bao_count = 2;
  if (has_follow_dan_bao_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->follow_dan_bao_count(), output);
  }

  // optional int32 follow_tou_zi_count = 3;
  if (has_follow_tou_zi_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->follow_tou_zi_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.follow_guarantee_invest_rank_info)
}

::google::protobuf::uint8* follow_guarantee_invest_rank_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.follow_guarantee_invest_rank_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wei_dan_bao_id(), target);
  }

  // optional int32 follow_dan_bao_count = 2;
  if (has_follow_dan_bao_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->follow_dan_bao_count(), target);
  }

  // optional int32 follow_tou_zi_count = 3;
  if (has_follow_tou_zi_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->follow_tou_zi_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.follow_guarantee_invest_rank_info)
  return target;
}

int follow_guarantee_invest_rank_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes wei_dan_bao_id = 1;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

    // optional int32 follow_dan_bao_count = 2;
    if (has_follow_dan_bao_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->follow_dan_bao_count());
    }

    // optional int32 follow_tou_zi_count = 3;
    if (has_follow_tou_zi_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->follow_tou_zi_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void follow_guarantee_invest_rank_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const follow_guarantee_invest_rank_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const follow_guarantee_invest_rank_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void follow_guarantee_invest_rank_info::MergeFrom(const follow_guarantee_invest_rank_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_follow_dan_bao_count()) {
      set_follow_dan_bao_count(from.follow_dan_bao_count());
    }
    if (from.has_follow_tou_zi_count()) {
      set_follow_tou_zi_count(from.follow_tou_zi_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void follow_guarantee_invest_rank_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void follow_guarantee_invest_rank_info::CopyFrom(const follow_guarantee_invest_rank_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool follow_guarantee_invest_rank_info::IsInitialized() const {

  return true;
}

void follow_guarantee_invest_rank_info::Swap(follow_guarantee_invest_rank_info* other) {
  if (other != this) {
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(follow_dan_bao_count_, other->follow_dan_bao_count_);
    std::swap(follow_tou_zi_count_, other->follow_tou_zi_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata follow_guarantee_invest_rank_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = follow_guarantee_invest_rank_info_descriptor_;
  metadata.reflection = follow_guarantee_invest_rank_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int follow_guarantee_invest_rank_ask::kAskHeaderFieldNumber;
const int follow_guarantee_invest_rank_ask::kWeiDanBaoIdFieldNumber;
#endif  // !_MSC_VER

follow_guarantee_invest_rank_ask::follow_guarantee_invest_rank_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.follow_guarantee_invest_rank_ask)
}

void follow_guarantee_invest_rank_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

follow_guarantee_invest_rank_ask::follow_guarantee_invest_rank_ask(const follow_guarantee_invest_rank_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.follow_guarantee_invest_rank_ask)
}

void follow_guarantee_invest_rank_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

follow_guarantee_invest_rank_ask::~follow_guarantee_invest_rank_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.follow_guarantee_invest_rank_ask)
  SharedDtor();
}

void follow_guarantee_invest_rank_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void follow_guarantee_invest_rank_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* follow_guarantee_invest_rank_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return follow_guarantee_invest_rank_ask_descriptor_;
}

const follow_guarantee_invest_rank_ask& follow_guarantee_invest_rank_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

follow_guarantee_invest_rank_ask* follow_guarantee_invest_rank_ask::default_instance_ = NULL;

follow_guarantee_invest_rank_ask* follow_guarantee_invest_rank_ask::New() const {
  return new follow_guarantee_invest_rank_ask;
}

void follow_guarantee_invest_rank_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  wei_dan_bao_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool follow_guarantee_invest_rank_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.follow_guarantee_invest_rank_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // repeated bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.follow_guarantee_invest_rank_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.follow_guarantee_invest_rank_ask)
  return false;
#undef DO_
}

void follow_guarantee_invest_rank_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.follow_guarantee_invest_rank_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->wei_dan_bao_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.follow_guarantee_invest_rank_ask)
}

::google::protobuf::uint8* follow_guarantee_invest_rank_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.follow_guarantee_invest_rank_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->wei_dan_bao_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.follow_guarantee_invest_rank_ask)
  return target;
}

int follow_guarantee_invest_rank_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated bytes wei_dan_bao_id = 2;
  total_size += 1 * this->wei_dan_bao_id_size();
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->wei_dan_bao_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void follow_guarantee_invest_rank_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const follow_guarantee_invest_rank_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const follow_guarantee_invest_rank_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void follow_guarantee_invest_rank_ask::MergeFrom(const follow_guarantee_invest_rank_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  wei_dan_bao_id_.MergeFrom(from.wei_dan_bao_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void follow_guarantee_invest_rank_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void follow_guarantee_invest_rank_ask::CopyFrom(const follow_guarantee_invest_rank_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool follow_guarantee_invest_rank_ask::IsInitialized() const {

  return true;
}

void follow_guarantee_invest_rank_ask::Swap(follow_guarantee_invest_rank_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    wei_dan_bao_id_.Swap(&other->wei_dan_bao_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata follow_guarantee_invest_rank_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = follow_guarantee_invest_rank_ask_descriptor_;
  metadata.reflection = follow_guarantee_invest_rank_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int follow_guarantee_invest_rank_ans::kResultFieldNumber;
const int follow_guarantee_invest_rank_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

follow_guarantee_invest_rank_ans::follow_guarantee_invest_rank_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.follow_guarantee_invest_rank_ans)
}

void follow_guarantee_invest_rank_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

follow_guarantee_invest_rank_ans::follow_guarantee_invest_rank_ans(const follow_guarantee_invest_rank_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.follow_guarantee_invest_rank_ans)
}

void follow_guarantee_invest_rank_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

follow_guarantee_invest_rank_ans::~follow_guarantee_invest_rank_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.follow_guarantee_invest_rank_ans)
  SharedDtor();
}

void follow_guarantee_invest_rank_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void follow_guarantee_invest_rank_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* follow_guarantee_invest_rank_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return follow_guarantee_invest_rank_ans_descriptor_;
}

const follow_guarantee_invest_rank_ans& follow_guarantee_invest_rank_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

follow_guarantee_invest_rank_ans* follow_guarantee_invest_rank_ans::default_instance_ = NULL;

follow_guarantee_invest_rank_ans* follow_guarantee_invest_rank_ans::New() const {
  return new follow_guarantee_invest_rank_ans;
}

void follow_guarantee_invest_rank_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool follow_guarantee_invest_rank_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.follow_guarantee_invest_rank_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.follow_guarantee_invest_rank_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.follow_guarantee_invest_rank_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.follow_guarantee_invest_rank_ans)
  return false;
#undef DO_
}

void follow_guarantee_invest_rank_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.follow_guarantee_invest_rank_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.follow_guarantee_invest_rank_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.follow_guarantee_invest_rank_ans)
}

::google::protobuf::uint8* follow_guarantee_invest_rank_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.follow_guarantee_invest_rank_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.follow_guarantee_invest_rank_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.follow_guarantee_invest_rank_ans)
  return target;
}

int follow_guarantee_invest_rank_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.follow_guarantee_invest_rank_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void follow_guarantee_invest_rank_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const follow_guarantee_invest_rank_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const follow_guarantee_invest_rank_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void follow_guarantee_invest_rank_ans::MergeFrom(const follow_guarantee_invest_rank_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void follow_guarantee_invest_rank_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void follow_guarantee_invest_rank_ans::CopyFrom(const follow_guarantee_invest_rank_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool follow_guarantee_invest_rank_ans::IsInitialized() const {

  return true;
}

void follow_guarantee_invest_rank_ans::Swap(follow_guarantee_invest_rank_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata follow_guarantee_invest_rank_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = follow_guarantee_invest_rank_ans_descriptor_;
  metadata.reflection = follow_guarantee_invest_rank_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int borrower_evaluate_score_info::kWeiDanBaoIdFieldNumber;
const int borrower_evaluate_score_info::kBorrowerScoreFieldNumber;
const int borrower_evaluate_score_info::kEvaluateTotalNumFieldNumber;
#endif  // !_MSC_VER

borrower_evaluate_score_info::borrower_evaluate_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.borrower_evaluate_score_info)
}

void borrower_evaluate_score_info::InitAsDefaultInstance() {
}

borrower_evaluate_score_info::borrower_evaluate_score_info(const borrower_evaluate_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.borrower_evaluate_score_info)
}

void borrower_evaluate_score_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrower_score_ = 0;
  evaluate_total_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

borrower_evaluate_score_info::~borrower_evaluate_score_info() {
  // @@protoc_insertion_point(destructor:DW_Location.borrower_evaluate_score_info)
  SharedDtor();
}

void borrower_evaluate_score_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
  }
}

void borrower_evaluate_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* borrower_evaluate_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return borrower_evaluate_score_info_descriptor_;
}

const borrower_evaluate_score_info& borrower_evaluate_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

borrower_evaluate_score_info* borrower_evaluate_score_info::default_instance_ = NULL;

borrower_evaluate_score_info* borrower_evaluate_score_info::New() const {
  return new borrower_evaluate_score_info;
}

void borrower_evaluate_score_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<borrower_evaluate_score_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(borrower_score_, evaluate_total_num_);
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool borrower_evaluate_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.borrower_evaluate_score_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes wei_dan_bao_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_borrower_score;
        break;
      }

      // optional float borrower_score = 2;
      case 2: {
        if (tag == 21) {
         parse_borrower_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrower_score_)));
          set_has_borrower_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_evaluate_total_num;
        break;
      }

      // optional int32 evaluate_total_num = 3;
      case 3: {
        if (tag == 24) {
         parse_evaluate_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evaluate_total_num_)));
          set_has_evaluate_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.borrower_evaluate_score_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.borrower_evaluate_score_info)
  return false;
#undef DO_
}

void borrower_evaluate_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.borrower_evaluate_score_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wei_dan_bao_id(), output);
  }

  // optional float borrower_score = 2;
  if (has_borrower_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->borrower_score(), output);
  }

  // optional int32 evaluate_total_num = 3;
  if (has_evaluate_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->evaluate_total_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.borrower_evaluate_score_info)
}

::google::protobuf::uint8* borrower_evaluate_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.borrower_evaluate_score_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wei_dan_bao_id(), target);
  }

  // optional float borrower_score = 2;
  if (has_borrower_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->borrower_score(), target);
  }

  // optional int32 evaluate_total_num = 3;
  if (has_evaluate_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->evaluate_total_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.borrower_evaluate_score_info)
  return target;
}

int borrower_evaluate_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes wei_dan_bao_id = 1;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

    // optional float borrower_score = 2;
    if (has_borrower_score()) {
      total_size += 1 + 4;
    }

    // optional int32 evaluate_total_num = 3;
    if (has_evaluate_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evaluate_total_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void borrower_evaluate_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const borrower_evaluate_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const borrower_evaluate_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void borrower_evaluate_score_info::MergeFrom(const borrower_evaluate_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_borrower_score()) {
      set_borrower_score(from.borrower_score());
    }
    if (from.has_evaluate_total_num()) {
      set_evaluate_total_num(from.evaluate_total_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void borrower_evaluate_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void borrower_evaluate_score_info::CopyFrom(const borrower_evaluate_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool borrower_evaluate_score_info::IsInitialized() const {

  return true;
}

void borrower_evaluate_score_info::Swap(borrower_evaluate_score_info* other) {
  if (other != this) {
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(borrower_score_, other->borrower_score_);
    std::swap(evaluate_total_num_, other->evaluate_total_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata borrower_evaluate_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = borrower_evaluate_score_info_descriptor_;
  metadata.reflection = borrower_evaluate_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int borrower_evaluate_score_ask::kAskHeaderFieldNumber;
const int borrower_evaluate_score_ask::kWeiDanBaoIdFieldNumber;
#endif  // !_MSC_VER

borrower_evaluate_score_ask::borrower_evaluate_score_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.borrower_evaluate_score_ask)
}

void borrower_evaluate_score_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

borrower_evaluate_score_ask::borrower_evaluate_score_ask(const borrower_evaluate_score_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.borrower_evaluate_score_ask)
}

void borrower_evaluate_score_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

borrower_evaluate_score_ask::~borrower_evaluate_score_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.borrower_evaluate_score_ask)
  SharedDtor();
}

void borrower_evaluate_score_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void borrower_evaluate_score_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* borrower_evaluate_score_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return borrower_evaluate_score_ask_descriptor_;
}

const borrower_evaluate_score_ask& borrower_evaluate_score_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

borrower_evaluate_score_ask* borrower_evaluate_score_ask::default_instance_ = NULL;

borrower_evaluate_score_ask* borrower_evaluate_score_ask::New() const {
  return new borrower_evaluate_score_ask;
}

void borrower_evaluate_score_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  wei_dan_bao_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool borrower_evaluate_score_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.borrower_evaluate_score_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // repeated bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.borrower_evaluate_score_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.borrower_evaluate_score_ask)
  return false;
#undef DO_
}

void borrower_evaluate_score_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.borrower_evaluate_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->wei_dan_bao_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.borrower_evaluate_score_ask)
}

::google::protobuf::uint8* borrower_evaluate_score_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.borrower_evaluate_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->wei_dan_bao_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.borrower_evaluate_score_ask)
  return target;
}

int borrower_evaluate_score_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated bytes wei_dan_bao_id = 2;
  total_size += 1 * this->wei_dan_bao_id_size();
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->wei_dan_bao_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void borrower_evaluate_score_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const borrower_evaluate_score_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const borrower_evaluate_score_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void borrower_evaluate_score_ask::MergeFrom(const borrower_evaluate_score_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  wei_dan_bao_id_.MergeFrom(from.wei_dan_bao_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void borrower_evaluate_score_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void borrower_evaluate_score_ask::CopyFrom(const borrower_evaluate_score_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool borrower_evaluate_score_ask::IsInitialized() const {

  return true;
}

void borrower_evaluate_score_ask::Swap(borrower_evaluate_score_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    wei_dan_bao_id_.Swap(&other->wei_dan_bao_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata borrower_evaluate_score_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = borrower_evaluate_score_ask_descriptor_;
  metadata.reflection = borrower_evaluate_score_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int borrower_evaluate_score_ans::kResultFieldNumber;
const int borrower_evaluate_score_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

borrower_evaluate_score_ans::borrower_evaluate_score_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.borrower_evaluate_score_ans)
}

void borrower_evaluate_score_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

borrower_evaluate_score_ans::borrower_evaluate_score_ans(const borrower_evaluate_score_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.borrower_evaluate_score_ans)
}

void borrower_evaluate_score_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

borrower_evaluate_score_ans::~borrower_evaluate_score_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.borrower_evaluate_score_ans)
  SharedDtor();
}

void borrower_evaluate_score_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void borrower_evaluate_score_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* borrower_evaluate_score_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return borrower_evaluate_score_ans_descriptor_;
}

const borrower_evaluate_score_ans& borrower_evaluate_score_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

borrower_evaluate_score_ans* borrower_evaluate_score_ans::default_instance_ = NULL;

borrower_evaluate_score_ans* borrower_evaluate_score_ans::New() const {
  return new borrower_evaluate_score_ans;
}

void borrower_evaluate_score_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool borrower_evaluate_score_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.borrower_evaluate_score_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.borrower_evaluate_score_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.borrower_evaluate_score_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.borrower_evaluate_score_ans)
  return false;
#undef DO_
}

void borrower_evaluate_score_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.borrower_evaluate_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.borrower_evaluate_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.borrower_evaluate_score_ans)
}

::google::protobuf::uint8* borrower_evaluate_score_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.borrower_evaluate_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.borrower_evaluate_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.borrower_evaluate_score_ans)
  return target;
}

int borrower_evaluate_score_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.borrower_evaluate_score_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void borrower_evaluate_score_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const borrower_evaluate_score_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const borrower_evaluate_score_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void borrower_evaluate_score_ans::MergeFrom(const borrower_evaluate_score_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void borrower_evaluate_score_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void borrower_evaluate_score_ans::CopyFrom(const borrower_evaluate_score_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool borrower_evaluate_score_ans::IsInitialized() const {

  return true;
}

void borrower_evaluate_score_ans::Swap(borrower_evaluate_score_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata borrower_evaluate_score_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = borrower_evaluate_score_ans_descriptor_;
  metadata.reflection = borrower_evaluate_score_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int diligence_pass_score_info::kWeiDanBaoIdFieldNumber;
const int diligence_pass_score_info::kPassedDiligenceNumbersFieldNumber;
const int diligence_pass_score_info::kCommitDiligenceTotalNumFieldNumber;
#endif  // !_MSC_VER

diligence_pass_score_info::diligence_pass_score_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.diligence_pass_score_info)
}

void diligence_pass_score_info::InitAsDefaultInstance() {
}

diligence_pass_score_info::diligence_pass_score_info(const diligence_pass_score_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.diligence_pass_score_info)
}

void diligence_pass_score_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passed_diligence_numbers_ = 0;
  commit_diligence_total_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

diligence_pass_score_info::~diligence_pass_score_info() {
  // @@protoc_insertion_point(destructor:DW_Location.diligence_pass_score_info)
  SharedDtor();
}

void diligence_pass_score_info::SharedDtor() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (this != default_instance_) {
  }
}

void diligence_pass_score_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* diligence_pass_score_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return diligence_pass_score_info_descriptor_;
}

const diligence_pass_score_info& diligence_pass_score_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

diligence_pass_score_info* diligence_pass_score_info::default_instance_ = NULL;

diligence_pass_score_info* diligence_pass_score_info::New() const {
  return new diligence_pass_score_info;
}

void diligence_pass_score_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<diligence_pass_score_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(passed_diligence_numbers_, commit_diligence_total_num_);
    if (has_wei_dan_bao_id()) {
      if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wei_dan_bao_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool diligence_pass_score_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.diligence_pass_score_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes wei_dan_bao_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_passed_diligence_numbers;
        break;
      }

      // optional int32 passed_diligence_numbers = 2;
      case 2: {
        if (tag == 16) {
         parse_passed_diligence_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passed_diligence_numbers_)));
          set_has_passed_diligence_numbers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit_diligence_total_num;
        break;
      }

      // optional int32 commit_diligence_total_num = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_diligence_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commit_diligence_total_num_)));
          set_has_commit_diligence_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.diligence_pass_score_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.diligence_pass_score_info)
  return false;
#undef DO_
}

void diligence_pass_score_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.diligence_pass_score_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wei_dan_bao_id(), output);
  }

  // optional int32 passed_diligence_numbers = 2;
  if (has_passed_diligence_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passed_diligence_numbers(), output);
  }

  // optional int32 commit_diligence_total_num = 3;
  if (has_commit_diligence_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->commit_diligence_total_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.diligence_pass_score_info)
}

::google::protobuf::uint8* diligence_pass_score_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.diligence_pass_score_info)
  // optional bytes wei_dan_bao_id = 1;
  if (has_wei_dan_bao_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wei_dan_bao_id(), target);
  }

  // optional int32 passed_diligence_numbers = 2;
  if (has_passed_diligence_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passed_diligence_numbers(), target);
  }

  // optional int32 commit_diligence_total_num = 3;
  if (has_commit_diligence_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->commit_diligence_total_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.diligence_pass_score_info)
  return target;
}

int diligence_pass_score_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes wei_dan_bao_id = 1;
    if (has_wei_dan_bao_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wei_dan_bao_id());
    }

    // optional int32 passed_diligence_numbers = 2;
    if (has_passed_diligence_numbers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passed_diligence_numbers());
    }

    // optional int32 commit_diligence_total_num = 3;
    if (has_commit_diligence_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commit_diligence_total_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void diligence_pass_score_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const diligence_pass_score_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const diligence_pass_score_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void diligence_pass_score_info::MergeFrom(const diligence_pass_score_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wei_dan_bao_id()) {
      set_wei_dan_bao_id(from.wei_dan_bao_id());
    }
    if (from.has_passed_diligence_numbers()) {
      set_passed_diligence_numbers(from.passed_diligence_numbers());
    }
    if (from.has_commit_diligence_total_num()) {
      set_commit_diligence_total_num(from.commit_diligence_total_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void diligence_pass_score_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void diligence_pass_score_info::CopyFrom(const diligence_pass_score_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool diligence_pass_score_info::IsInitialized() const {

  return true;
}

void diligence_pass_score_info::Swap(diligence_pass_score_info* other) {
  if (other != this) {
    std::swap(wei_dan_bao_id_, other->wei_dan_bao_id_);
    std::swap(passed_diligence_numbers_, other->passed_diligence_numbers_);
    std::swap(commit_diligence_total_num_, other->commit_diligence_total_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata diligence_pass_score_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = diligence_pass_score_info_descriptor_;
  metadata.reflection = diligence_pass_score_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int diligence_pass_score_ask::kAskHeaderFieldNumber;
const int diligence_pass_score_ask::kWeiDanBaoIdFieldNumber;
#endif  // !_MSC_VER

diligence_pass_score_ask::diligence_pass_score_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.diligence_pass_score_ask)
}

void diligence_pass_score_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

diligence_pass_score_ask::diligence_pass_score_ask(const diligence_pass_score_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.diligence_pass_score_ask)
}

void diligence_pass_score_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

diligence_pass_score_ask::~diligence_pass_score_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.diligence_pass_score_ask)
  SharedDtor();
}

void diligence_pass_score_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void diligence_pass_score_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* diligence_pass_score_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return diligence_pass_score_ask_descriptor_;
}

const diligence_pass_score_ask& diligence_pass_score_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

diligence_pass_score_ask* diligence_pass_score_ask::default_instance_ = NULL;

diligence_pass_score_ask* diligence_pass_score_ask::New() const {
  return new diligence_pass_score_ask;
}

void diligence_pass_score_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  wei_dan_bao_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool diligence_pass_score_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.diligence_pass_score_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        break;
      }

      // repeated bytes wei_dan_bao_id = 2;
      case 2: {
        if (tag == 18) {
         parse_wei_dan_bao_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_wei_dan_bao_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wei_dan_bao_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.diligence_pass_score_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.diligence_pass_score_ask)
  return false;
#undef DO_
}

void diligence_pass_score_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.diligence_pass_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->wei_dan_bao_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.diligence_pass_score_ask)
}

::google::protobuf::uint8* diligence_pass_score_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.diligence_pass_score_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // repeated bytes wei_dan_bao_id = 2;
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->wei_dan_bao_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.diligence_pass_score_ask)
  return target;
}

int diligence_pass_score_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated bytes wei_dan_bao_id = 2;
  total_size += 1 * this->wei_dan_bao_id_size();
  for (int i = 0; i < this->wei_dan_bao_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->wei_dan_bao_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void diligence_pass_score_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const diligence_pass_score_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const diligence_pass_score_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void diligence_pass_score_ask::MergeFrom(const diligence_pass_score_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  wei_dan_bao_id_.MergeFrom(from.wei_dan_bao_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void diligence_pass_score_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void diligence_pass_score_ask::CopyFrom(const diligence_pass_score_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool diligence_pass_score_ask::IsInitialized() const {

  return true;
}

void diligence_pass_score_ask::Swap(diligence_pass_score_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    wei_dan_bao_id_.Swap(&other->wei_dan_bao_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata diligence_pass_score_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = diligence_pass_score_ask_descriptor_;
  metadata.reflection = diligence_pass_score_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int diligence_pass_score_ans::kResultFieldNumber;
const int diligence_pass_score_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

diligence_pass_score_ans::diligence_pass_score_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.diligence_pass_score_ans)
}

void diligence_pass_score_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

diligence_pass_score_ans::diligence_pass_score_ans(const diligence_pass_score_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.diligence_pass_score_ans)
}

void diligence_pass_score_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

diligence_pass_score_ans::~diligence_pass_score_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.diligence_pass_score_ans)
  SharedDtor();
}

void diligence_pass_score_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void diligence_pass_score_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* diligence_pass_score_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return diligence_pass_score_ans_descriptor_;
}

const diligence_pass_score_ans& diligence_pass_score_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

diligence_pass_score_ans* diligence_pass_score_ans::default_instance_ = NULL;

diligence_pass_score_ans* diligence_pass_score_ans::New() const {
  return new diligence_pass_score_ans;
}

void diligence_pass_score_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool diligence_pass_score_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.diligence_pass_score_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DW_Location.diligence_pass_score_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.diligence_pass_score_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.diligence_pass_score_ans)
  return false;
#undef DO_
}

void diligence_pass_score_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.diligence_pass_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .DW_Location.diligence_pass_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.diligence_pass_score_ans)
}

::google::protobuf::uint8* diligence_pass_score_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.diligence_pass_score_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .DW_Location.diligence_pass_score_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.diligence_pass_score_ans)
  return target;
}

int diligence_pass_score_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.diligence_pass_score_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void diligence_pass_score_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const diligence_pass_score_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const diligence_pass_score_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void diligence_pass_score_ans::MergeFrom(const diligence_pass_score_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void diligence_pass_score_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void diligence_pass_score_ans::CopyFrom(const diligence_pass_score_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool diligence_pass_score_ans::IsInitialized() const {

  return true;
}

void diligence_pass_score_ans::Swap(diligence_pass_score_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata diligence_pass_score_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = diligence_pass_score_ans_descriptor_;
  metadata.reflection = diligence_pass_score_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_contacts_coincide_ask::kAskHeaderFieldNumber;
const int blacklist_contacts_coincide_ask::kBlacklistTypeFieldNumber;
const int blacklist_contacts_coincide_ask::kCoincideValueFieldNumber;
const int blacklist_contacts_coincide_ask::kUserInfoFieldNumber;
#endif  // !_MSC_VER

blacklist_contacts_coincide_ask::blacklist_contacts_coincide_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.blacklist_contacts_coincide_ask)
}

void blacklist_contacts_coincide_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
  user_info_ = const_cast< ::common::user_basic_identification*>(&::common::user_basic_identification::default_instance());
}

blacklist_contacts_coincide_ask::blacklist_contacts_coincide_ask(const blacklist_contacts_coincide_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.blacklist_contacts_coincide_ask)
}

void blacklist_contacts_coincide_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  blacklist_type_ = 0;
  coincide_value_ = 0;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_contacts_coincide_ask::~blacklist_contacts_coincide_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.blacklist_contacts_coincide_ask)
  SharedDtor();
}

void blacklist_contacts_coincide_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
    delete user_info_;
  }
}

void blacklist_contacts_coincide_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_contacts_coincide_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_contacts_coincide_ask_descriptor_;
}

const blacklist_contacts_coincide_ask& blacklist_contacts_coincide_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

blacklist_contacts_coincide_ask* blacklist_contacts_coincide_ask::default_instance_ = NULL;

blacklist_contacts_coincide_ask* blacklist_contacts_coincide_ask::New() const {
  return new blacklist_contacts_coincide_ask;
}

void blacklist_contacts_coincide_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<blacklist_contacts_coincide_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(blacklist_type_, coincide_value_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::common::user_basic_identification::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_contacts_coincide_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.blacklist_contacts_coincide_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blacklist_type;
        break;
      }

      // optional int32 blacklist_type = 2;
      case 2: {
        if (tag == 16) {
         parse_blacklist_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklist_type_)));
          set_has_blacklist_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_coincide_value;
        break;
      }

      // optional float coincide_value = 3;
      case 3: {
        if (tag == 29) {
         parse_coincide_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coincide_value_)));
          set_has_coincide_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // optional .common.user_basic_identification user_info = 4;
      case 4: {
        if (tag == 34) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.blacklist_contacts_coincide_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.blacklist_contacts_coincide_ask)
  return false;
#undef DO_
}

void blacklist_contacts_coincide_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.blacklist_contacts_coincide_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 blacklist_type = 2;
  if (has_blacklist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blacklist_type(), output);
  }

  // optional float coincide_value = 3;
  if (has_coincide_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coincide_value(), output);
  }

  // optional .common.user_basic_identification user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.blacklist_contacts_coincide_ask)
}

::google::protobuf::uint8* blacklist_contacts_coincide_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.blacklist_contacts_coincide_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 blacklist_type = 2;
  if (has_blacklist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blacklist_type(), target);
  }

  // optional float coincide_value = 3;
  if (has_coincide_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coincide_value(), target);
  }

  // optional .common.user_basic_identification user_info = 4;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.blacklist_contacts_coincide_ask)
  return target;
}

int blacklist_contacts_coincide_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 blacklist_type = 2;
    if (has_blacklist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklist_type());
    }

    // optional float coincide_value = 3;
    if (has_coincide_value()) {
      total_size += 1 + 4;
    }

    // optional .common.user_basic_identification user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_contacts_coincide_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_contacts_coincide_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_contacts_coincide_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_contacts_coincide_ask::MergeFrom(const blacklist_contacts_coincide_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_blacklist_type()) {
      set_blacklist_type(from.blacklist_type());
    }
    if (from.has_coincide_value()) {
      set_coincide_value(from.coincide_value());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::common::user_basic_identification::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_contacts_coincide_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_contacts_coincide_ask::CopyFrom(const blacklist_contacts_coincide_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_contacts_coincide_ask::IsInitialized() const {

  return true;
}

void blacklist_contacts_coincide_ask::Swap(blacklist_contacts_coincide_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(blacklist_type_, other->blacklist_type_);
    std::swap(coincide_value_, other->coincide_value_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_contacts_coincide_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_contacts_coincide_ask_descriptor_;
  metadata.reflection = blacklist_contacts_coincide_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_contacts_coincide_ans::kIsBlackFriendFieldNumber;
const int blacklist_contacts_coincide_ans::kResultFieldNumber;
#endif  // !_MSC_VER

blacklist_contacts_coincide_ans::blacklist_contacts_coincide_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.blacklist_contacts_coincide_ans)
}

void blacklist_contacts_coincide_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

blacklist_contacts_coincide_ans::blacklist_contacts_coincide_ans(const blacklist_contacts_coincide_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.blacklist_contacts_coincide_ans)
}

void blacklist_contacts_coincide_ans::SharedCtor() {
  _cached_size_ = 0;
  is_black_friend_ = false;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_contacts_coincide_ans::~blacklist_contacts_coincide_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.blacklist_contacts_coincide_ans)
  SharedDtor();
}

void blacklist_contacts_coincide_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void blacklist_contacts_coincide_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_contacts_coincide_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_contacts_coincide_ans_descriptor_;
}

const blacklist_contacts_coincide_ans& blacklist_contacts_coincide_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

blacklist_contacts_coincide_ans* blacklist_contacts_coincide_ans::default_instance_ = NULL;

blacklist_contacts_coincide_ans* blacklist_contacts_coincide_ans::New() const {
  return new blacklist_contacts_coincide_ans;
}

void blacklist_contacts_coincide_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    is_black_friend_ = false;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_contacts_coincide_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.blacklist_contacts_coincide_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_black_friend = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_black_friend_)));
          set_has_is_black_friend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.blacklist_contacts_coincide_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.blacklist_contacts_coincide_ans)
  return false;
#undef DO_
}

void blacklist_contacts_coincide_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.blacklist_contacts_coincide_ans)
  // optional bool is_black_friend = 1;
  if (has_is_black_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_black_friend(), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.blacklist_contacts_coincide_ans)
}

::google::protobuf::uint8* blacklist_contacts_coincide_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.blacklist_contacts_coincide_ans)
  // optional bool is_black_friend = 1;
  if (has_is_black_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_black_friend(), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.blacklist_contacts_coincide_ans)
  return target;
}

int blacklist_contacts_coincide_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_black_friend = 1;
    if (has_is_black_friend()) {
      total_size += 1 + 1;
    }

    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_contacts_coincide_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_contacts_coincide_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_contacts_coincide_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_contacts_coincide_ans::MergeFrom(const blacklist_contacts_coincide_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_black_friend()) {
      set_is_black_friend(from.is_black_friend());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_contacts_coincide_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_contacts_coincide_ans::CopyFrom(const blacklist_contacts_coincide_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_contacts_coincide_ans::IsInitialized() const {

  return true;
}

void blacklist_contacts_coincide_ans::Swap(blacklist_contacts_coincide_ans* other) {
  if (other != this) {
    std::swap(is_black_friend_, other->is_black_friend_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_contacts_coincide_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_contacts_coincide_ans_descriptor_;
  metadata.reflection = blacklist_contacts_coincide_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int batch_userinfo_ask::kAskHeaderFieldNumber;
const int batch_userinfo_ask::kUserIdFieldNumber;
#endif  // !_MSC_VER

batch_userinfo_ask::batch_userinfo_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.batch_userinfo_ask)
}

void batch_userinfo_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

batch_userinfo_ask::batch_userinfo_ask(const batch_userinfo_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.batch_userinfo_ask)
}

void batch_userinfo_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

batch_userinfo_ask::~batch_userinfo_ask() {
  // @@protoc_insertion_point(destructor:DW_Location.batch_userinfo_ask)
  SharedDtor();
}

void batch_userinfo_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void batch_userinfo_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* batch_userinfo_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return batch_userinfo_ask_descriptor_;
}

const batch_userinfo_ask& batch_userinfo_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

batch_userinfo_ask* batch_userinfo_ask::default_instance_ = NULL;

batch_userinfo_ask* batch_userinfo_ask::New() const {
  return new batch_userinfo_ask;
}

void batch_userinfo_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool batch_userinfo_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.batch_userinfo_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // repeated bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.batch_userinfo_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.batch_userinfo_ask)
  return false;
#undef DO_
}

void batch_userinfo_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.batch_userinfo_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // repeated bytes user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.batch_userinfo_ask)
}

::google::protobuf::uint8* batch_userinfo_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.batch_userinfo_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // repeated bytes user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.batch_userinfo_ask)
  return target;
}

int batch_userinfo_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated bytes user_id = 2;
  total_size += 1 * this->user_id_size();
  for (int i = 0; i < this->user_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->user_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void batch_userinfo_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const batch_userinfo_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const batch_userinfo_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void batch_userinfo_ask::MergeFrom(const batch_userinfo_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void batch_userinfo_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void batch_userinfo_ask::CopyFrom(const batch_userinfo_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool batch_userinfo_ask::IsInitialized() const {

  return true;
}

void batch_userinfo_ask::Swap(batch_userinfo_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata batch_userinfo_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = batch_userinfo_ask_descriptor_;
  metadata.reflection = batch_userinfo_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chatlog_userinfo::kRealNameFieldNumber;
const int chatlog_userinfo::kMobilePhoneFieldNumber;
const int chatlog_userinfo::kIdentityCardFieldNumber;
const int chatlog_userinfo::kNicknameFieldNumber;
const int chatlog_userinfo::kAvatarFieldNumber;
const int chatlog_userinfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

chatlog_userinfo::chatlog_userinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.chatlog_userinfo)
}

void chatlog_userinfo::InitAsDefaultInstance() {
}

chatlog_userinfo::chatlog_userinfo(const chatlog_userinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.chatlog_userinfo)
}

void chatlog_userinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatlog_userinfo::~chatlog_userinfo() {
  // @@protoc_insertion_point(destructor:DW_Location.chatlog_userinfo)
  SharedDtor();
}

void chatlog_userinfo::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void chatlog_userinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatlog_userinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatlog_userinfo_descriptor_;
}

const chatlog_userinfo& chatlog_userinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

chatlog_userinfo* chatlog_userinfo::default_instance_ = NULL;

chatlog_userinfo* chatlog_userinfo::New() const {
  return new chatlog_userinfo;
}

void chatlog_userinfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatlog_userinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.chatlog_userinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 3;
      case 3: {
        if (tag == 26) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 6;
      case 6: {
        if (tag == 50) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.chatlog_userinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.chatlog_userinfo)
  return false;
#undef DO_
}

void chatlog_userinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.chatlog_userinfo)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes identity_card = 3;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->identity_card(), output);
  }

  // optional bytes nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->nickname(), output);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->avatar(), output);
  }

  // optional bytes user_id = 6;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.chatlog_userinfo)
}

::google::protobuf::uint8* chatlog_userinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.chatlog_userinfo)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes identity_card = 3;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->identity_card(), target);
  }

  // optional bytes nickname = 4;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->nickname(), target);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  // optional bytes user_id = 6;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.chatlog_userinfo)
  return target;
}

int chatlog_userinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes identity_card = 3;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes user_id = 6;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatlog_userinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatlog_userinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatlog_userinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatlog_userinfo::MergeFrom(const chatlog_userinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatlog_userinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatlog_userinfo::CopyFrom(const chatlog_userinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatlog_userinfo::IsInitialized() const {

  return true;
}

void chatlog_userinfo::Swap(chatlog_userinfo* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(nickname_, other->nickname_);
    std::swap(avatar_, other->avatar_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatlog_userinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatlog_userinfo_descriptor_;
  metadata.reflection = chatlog_userinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int batch_userinfo_ans::kInfoListFieldNumber;
const int batch_userinfo_ans::kResultFieldNumber;
#endif  // !_MSC_VER

batch_userinfo_ans::batch_userinfo_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DW_Location.batch_userinfo_ans)
}

void batch_userinfo_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

batch_userinfo_ans::batch_userinfo_ans(const batch_userinfo_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DW_Location.batch_userinfo_ans)
}

void batch_userinfo_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

batch_userinfo_ans::~batch_userinfo_ans() {
  // @@protoc_insertion_point(destructor:DW_Location.batch_userinfo_ans)
  SharedDtor();
}

void batch_userinfo_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void batch_userinfo_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* batch_userinfo_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return batch_userinfo_ans_descriptor_;
}

const batch_userinfo_ans& batch_userinfo_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DW_5fLocation_2eproto();
  return *default_instance_;
}

batch_userinfo_ans* batch_userinfo_ans::default_instance_ = NULL;

batch_userinfo_ans* batch_userinfo_ans::New() const {
  return new batch_userinfo_ans;
}

void batch_userinfo_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool batch_userinfo_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DW_Location.batch_userinfo_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DW_Location.chatlog_userinfo info_list = 1;
      case 1: {
        if (tag == 10) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DW_Location.batch_userinfo_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DW_Location.batch_userinfo_ans)
  return false;
#undef DO_
}

void batch_userinfo_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DW_Location.batch_userinfo_ans)
  // repeated .DW_Location.chatlog_userinfo info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DW_Location.batch_userinfo_ans)
}

::google::protobuf::uint8* batch_userinfo_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DW_Location.batch_userinfo_ans)
  // repeated .DW_Location.chatlog_userinfo info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DW_Location.batch_userinfo_ans)
  return target;
}

int batch_userinfo_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .DW_Location.chatlog_userinfo info_list = 1;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void batch_userinfo_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const batch_userinfo_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const batch_userinfo_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void batch_userinfo_ans::MergeFrom(const batch_userinfo_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void batch_userinfo_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void batch_userinfo_ans::CopyFrom(const batch_userinfo_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool batch_userinfo_ans::IsInitialized() const {

  return true;
}

void batch_userinfo_ans::Swap(batch_userinfo_ans* other) {
  if (other != this) {
    info_list_.Swap(&other->info_list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata batch_userinfo_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = batch_userinfo_ans_descriptor_;
  metadata.reflection = batch_userinfo_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DW_Location

// @@protoc_insertion_point(global_scope)
