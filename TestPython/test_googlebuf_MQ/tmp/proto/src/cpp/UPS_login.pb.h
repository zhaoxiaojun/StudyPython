// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UPS_login.proto

#ifndef PROTOBUF_UPS_5flogin_2eproto__INCLUDED
#define PROTOBUF_UPS_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace UPS_login {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UPS_5flogin_2eproto();
void protobuf_AssignDesc_UPS_5flogin_2eproto();
void protobuf_ShutdownFile_UPS_5flogin_2eproto();

class login_info;
class login_info_ask;
class login_info_ans;

// ===================================================================

class login_info : public ::google::protobuf::Message {
 public:
  login_info();
  virtual ~login_info();

  login_info(const login_info& from);

  inline login_info& operator=(const login_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_info& default_instance();

  void Swap(login_info* other);

  // implements Message ----------------------------------------------

  login_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_info& from);
  void MergeFrom(const login_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_image_url = 1;
  inline bool has_user_image_url() const;
  inline void clear_user_image_url();
  static const int kUserImageUrlFieldNumber = 1;
  inline const ::std::string& user_image_url() const;
  inline void set_user_image_url(const ::std::string& value);
  inline void set_user_image_url(const char* value);
  inline void set_user_image_url(const void* value, size_t size);
  inline ::std::string* mutable_user_image_url();
  inline ::std::string* release_user_image_url();
  inline void set_allocated_user_image_url(::std::string* user_image_url);

  // optional bytes user_label1 = 2;
  inline bool has_user_label1() const;
  inline void clear_user_label1();
  static const int kUserLabel1FieldNumber = 2;
  inline const ::std::string& user_label1() const;
  inline void set_user_label1(const ::std::string& value);
  inline void set_user_label1(const char* value);
  inline void set_user_label1(const void* value, size_t size);
  inline ::std::string* mutable_user_label1();
  inline ::std::string* release_user_label1();
  inline void set_allocated_user_label1(::std::string* user_label1);

  // optional bytes user_label2 = 3;
  inline bool has_user_label2() const;
  inline void clear_user_label2();
  static const int kUserLabel2FieldNumber = 3;
  inline const ::std::string& user_label2() const;
  inline void set_user_label2(const ::std::string& value);
  inline void set_user_label2(const char* value);
  inline void set_user_label2(const void* value, size_t size);
  inline ::std::string* mutable_user_label2();
  inline ::std::string* release_user_label2();
  inline void set_allocated_user_label2(::std::string* user_label2);

  // optional bytes user_label3 = 4;
  inline bool has_user_label3() const;
  inline void clear_user_label3();
  static const int kUserLabel3FieldNumber = 4;
  inline const ::std::string& user_label3() const;
  inline void set_user_label3(const ::std::string& value);
  inline void set_user_label3(const char* value);
  inline void set_user_label3(const void* value, size_t size);
  inline ::std::string* mutable_user_label3();
  inline ::std::string* release_user_label3();
  inline void set_allocated_user_label3(::std::string* user_label3);

  // @@protoc_insertion_point(class_scope:UPS_login.login_info)
 private:
  inline void set_has_user_image_url();
  inline void clear_has_user_image_url();
  inline void set_has_user_label1();
  inline void clear_has_user_label1();
  inline void set_has_user_label2();
  inline void clear_has_user_label2();
  inline void set_has_user_label3();
  inline void clear_has_user_label3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_image_url_;
  ::std::string* user_label1_;
  ::std::string* user_label2_;
  ::std::string* user_label3_;
  friend void  protobuf_AddDesc_UPS_5flogin_2eproto();
  friend void protobuf_AssignDesc_UPS_5flogin_2eproto();
  friend void protobuf_ShutdownFile_UPS_5flogin_2eproto();

  void InitAsDefaultInstance();
  static login_info* default_instance_;
};
// -------------------------------------------------------------------

class login_info_ask : public ::google::protobuf::Message {
 public:
  login_info_ask();
  virtual ~login_info_ask();

  login_info_ask(const login_info_ask& from);

  inline login_info_ask& operator=(const login_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_info_ask& default_instance();

  void Swap(login_info_ask* other);

  // implements Message ----------------------------------------------

  login_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_info_ask& from);
  void MergeFrom(const login_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 user_number = 1;
  inline bool has_user_number() const;
  inline void clear_user_number();
  static const int kUserNumberFieldNumber = 1;
  inline ::google::protobuf::int32 user_number() const;
  inline void set_user_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_login.login_info_ask)
 private:
  inline void set_has_user_number();
  inline void clear_has_user_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 user_number_;
  friend void  protobuf_AddDesc_UPS_5flogin_2eproto();
  friend void protobuf_AssignDesc_UPS_5flogin_2eproto();
  friend void protobuf_ShutdownFile_UPS_5flogin_2eproto();

  void InitAsDefaultInstance();
  static login_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class login_info_ans : public ::google::protobuf::Message {
 public:
  login_info_ans();
  virtual ~login_info_ans();

  login_info_ans(const login_info_ans& from);

  inline login_info_ans& operator=(const login_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_info_ans& default_instance();

  void Swap(login_info_ans* other);

  // implements Message ----------------------------------------------

  login_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_info_ans& from);
  void MergeFrom(const login_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UPS_login.login_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UPS_login::login_info& info(int index) const;
  inline ::UPS_login::login_info* mutable_info(int index);
  inline ::UPS_login::login_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_login::login_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_login::login_info >*
      mutable_info();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_login.login_info_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UPS_login::login_info > info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5flogin_2eproto();
  friend void protobuf_AssignDesc_UPS_5flogin_2eproto();
  friend void protobuf_ShutdownFile_UPS_5flogin_2eproto();

  void InitAsDefaultInstance();
  static login_info_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// login_info

// optional bytes user_image_url = 1;
inline bool login_info::has_user_image_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_info::set_has_user_image_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_info::clear_has_user_image_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_info::clear_user_image_url() {
  if (user_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_image_url_->clear();
  }
  clear_has_user_image_url();
}
inline const ::std::string& login_info::user_image_url() const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info.user_image_url)
  return *user_image_url_;
}
inline void login_info::set_user_image_url(const ::std::string& value) {
  set_has_user_image_url();
  if (user_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_image_url_ = new ::std::string;
  }
  user_image_url_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_login.login_info.user_image_url)
}
inline void login_info::set_user_image_url(const char* value) {
  set_has_user_image_url();
  if (user_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_image_url_ = new ::std::string;
  }
  user_image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_login.login_info.user_image_url)
}
inline void login_info::set_user_image_url(const void* value, size_t size) {
  set_has_user_image_url();
  if (user_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_image_url_ = new ::std::string;
  }
  user_image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_login.login_info.user_image_url)
}
inline ::std::string* login_info::mutable_user_image_url() {
  set_has_user_image_url();
  if (user_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_login.login_info.user_image_url)
  return user_image_url_;
}
inline ::std::string* login_info::release_user_image_url() {
  clear_has_user_image_url();
  if (user_image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_image_url_;
    user_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_info::set_allocated_user_image_url(::std::string* user_image_url) {
  if (user_image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_image_url_;
  }
  if (user_image_url) {
    set_has_user_image_url();
    user_image_url_ = user_image_url;
  } else {
    clear_has_user_image_url();
    user_image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_login.login_info.user_image_url)
}

// optional bytes user_label1 = 2;
inline bool login_info::has_user_label1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_info::set_has_user_label1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_info::clear_has_user_label1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_info::clear_user_label1() {
  if (user_label1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label1_->clear();
  }
  clear_has_user_label1();
}
inline const ::std::string& login_info::user_label1() const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info.user_label1)
  return *user_label1_;
}
inline void login_info::set_user_label1(const ::std::string& value) {
  set_has_user_label1();
  if (user_label1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label1_ = new ::std::string;
  }
  user_label1_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_login.login_info.user_label1)
}
inline void login_info::set_user_label1(const char* value) {
  set_has_user_label1();
  if (user_label1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label1_ = new ::std::string;
  }
  user_label1_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_login.login_info.user_label1)
}
inline void login_info::set_user_label1(const void* value, size_t size) {
  set_has_user_label1();
  if (user_label1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label1_ = new ::std::string;
  }
  user_label1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_login.login_info.user_label1)
}
inline ::std::string* login_info::mutable_user_label1() {
  set_has_user_label1();
  if (user_label1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_login.login_info.user_label1)
  return user_label1_;
}
inline ::std::string* login_info::release_user_label1() {
  clear_has_user_label1();
  if (user_label1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_label1_;
    user_label1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_info::set_allocated_user_label1(::std::string* user_label1) {
  if (user_label1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_label1_;
  }
  if (user_label1) {
    set_has_user_label1();
    user_label1_ = user_label1;
  } else {
    clear_has_user_label1();
    user_label1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_login.login_info.user_label1)
}

// optional bytes user_label2 = 3;
inline bool login_info::has_user_label2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_info::set_has_user_label2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void login_info::clear_has_user_label2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void login_info::clear_user_label2() {
  if (user_label2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label2_->clear();
  }
  clear_has_user_label2();
}
inline const ::std::string& login_info::user_label2() const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info.user_label2)
  return *user_label2_;
}
inline void login_info::set_user_label2(const ::std::string& value) {
  set_has_user_label2();
  if (user_label2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label2_ = new ::std::string;
  }
  user_label2_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_login.login_info.user_label2)
}
inline void login_info::set_user_label2(const char* value) {
  set_has_user_label2();
  if (user_label2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label2_ = new ::std::string;
  }
  user_label2_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_login.login_info.user_label2)
}
inline void login_info::set_user_label2(const void* value, size_t size) {
  set_has_user_label2();
  if (user_label2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label2_ = new ::std::string;
  }
  user_label2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_login.login_info.user_label2)
}
inline ::std::string* login_info::mutable_user_label2() {
  set_has_user_label2();
  if (user_label2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_login.login_info.user_label2)
  return user_label2_;
}
inline ::std::string* login_info::release_user_label2() {
  clear_has_user_label2();
  if (user_label2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_label2_;
    user_label2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_info::set_allocated_user_label2(::std::string* user_label2) {
  if (user_label2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_label2_;
  }
  if (user_label2) {
    set_has_user_label2();
    user_label2_ = user_label2;
  } else {
    clear_has_user_label2();
    user_label2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_login.login_info.user_label2)
}

// optional bytes user_label3 = 4;
inline bool login_info::has_user_label3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void login_info::set_has_user_label3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void login_info::clear_has_user_label3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void login_info::clear_user_label3() {
  if (user_label3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label3_->clear();
  }
  clear_has_user_label3();
}
inline const ::std::string& login_info::user_label3() const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info.user_label3)
  return *user_label3_;
}
inline void login_info::set_user_label3(const ::std::string& value) {
  set_has_user_label3();
  if (user_label3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label3_ = new ::std::string;
  }
  user_label3_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_login.login_info.user_label3)
}
inline void login_info::set_user_label3(const char* value) {
  set_has_user_label3();
  if (user_label3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label3_ = new ::std::string;
  }
  user_label3_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_login.login_info.user_label3)
}
inline void login_info::set_user_label3(const void* value, size_t size) {
  set_has_user_label3();
  if (user_label3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label3_ = new ::std::string;
  }
  user_label3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_login.login_info.user_label3)
}
inline ::std::string* login_info::mutable_user_label3() {
  set_has_user_label3();
  if (user_label3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_label3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_login.login_info.user_label3)
  return user_label3_;
}
inline ::std::string* login_info::release_user_label3() {
  clear_has_user_label3();
  if (user_label3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_label3_;
    user_label3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_info::set_allocated_user_label3(::std::string* user_label3) {
  if (user_label3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_label3_;
  }
  if (user_label3) {
    set_has_user_label3();
    user_label3_ = user_label3;
  } else {
    clear_has_user_label3();
    user_label3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_login.login_info.user_label3)
}

// -------------------------------------------------------------------

// login_info_ask

// optional int32 user_number = 1;
inline bool login_info_ask::has_user_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_info_ask::set_has_user_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_info_ask::clear_has_user_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_info_ask::clear_user_number() {
  user_number_ = 0;
  clear_has_user_number();
}
inline ::google::protobuf::int32 login_info_ask::user_number() const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info_ask.user_number)
  return user_number_;
}
inline void login_info_ask::set_user_number(::google::protobuf::int32 value) {
  set_has_user_number();
  user_number_ = value;
  // @@protoc_insertion_point(field_set:UPS_login.login_info_ask.user_number)
}

// -------------------------------------------------------------------

// login_info_ans

// repeated .UPS_login.login_info info = 1;
inline int login_info_ans::info_size() const {
  return info_.size();
}
inline void login_info_ans::clear_info() {
  info_.Clear();
}
inline const ::UPS_login::login_info& login_info_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info_ans.info)
  return info_.Get(index);
}
inline ::UPS_login::login_info* login_info_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_login.login_info_ans.info)
  return info_.Mutable(index);
}
inline ::UPS_login::login_info* login_info_ans::add_info() {
  // @@protoc_insertion_point(field_add:UPS_login.login_info_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_login::login_info >&
login_info_ans::info() const {
  // @@protoc_insertion_point(field_list:UPS_login.login_info_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_login::login_info >*
login_info_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:UPS_login.login_info_ans.info)
  return &info_;
}

// optional .common.errorinfo error = 2;
inline bool login_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& login_info_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_login.login_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* login_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_login.login_info_ans.error)
  return error_;
}
inline ::common::errorinfo* login_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void login_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_login.login_info_ans.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UPS_login

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UPS_5flogin_2eproto__INCLUDED
