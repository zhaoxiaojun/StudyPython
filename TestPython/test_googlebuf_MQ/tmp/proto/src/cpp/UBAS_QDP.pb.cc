// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UBAS_QDP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UBAS_QDP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BUAS_QDP {

namespace {

const ::google::protobuf::Descriptor* LocationPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location2Position_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location2Position_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location2Position_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location2Position_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhimaDataFlowReflux_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhimaDataFlowReflux_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoanRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoanRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssureRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssureRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhimaDataFlowReflux_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhimaDataFlowReflux_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserCredentialsType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UBAS_5fQDP_2eproto() {
  protobuf_AddDesc_UBAS_5fQDP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UBAS_QDP.proto");
  GOOGLE_CHECK(file != NULL);
  LocationPoint_descriptor_ = file->message_type(0);
  static const int LocationPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPoint, lng_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPoint, localid_),
  };
  LocationPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationPoint_descriptor_,
      LocationPoint::default_instance_,
      LocationPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationPoint));
  Location2Position_ask_descriptor_ = file->message_type(1);
  static const int Location2Position_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ask, lng_lat_list_),
  };
  Location2Position_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location2Position_ask_descriptor_,
      Location2Position_ask::default_instance_,
      Location2Position_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location2Position_ask));
  LocationInfo_descriptor_ = file->message_type(2);
  static const int LocationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, position_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, lng_lat_),
  };
  LocationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationInfo_descriptor_,
      LocationInfo::default_instance_,
      LocationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationInfo));
  Location2Position_ans_descriptor_ = file->message_type(3);
  static const int Location2Position_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ans, position_info_),
  };
  Location2Position_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location2Position_ans_descriptor_,
      Location2Position_ans::default_instance_,
      Location2Position_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location2Position_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location2Position_ans));
  ZhimaDataFlowReflux_ask_descriptor_ = file->message_type(4);
  static const int ZhimaDataFlowReflux_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ask, user_credentials_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ask, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ask, mobile_phone_),
  };
  ZhimaDataFlowReflux_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhimaDataFlowReflux_ask_descriptor_,
      ZhimaDataFlowReflux_ask::default_instance_,
      ZhimaDataFlowReflux_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhimaDataFlowReflux_ask));
  LoanRecordInfo_descriptor_ = file->message_type(5);
  static const int LoanRecordInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, orderno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, biztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, gmtorderstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, gmtdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, payfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, paymonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, gmtovddate_),
  };
  LoanRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoanRecordInfo_descriptor_,
      LoanRecordInfo::default_instance_,
      LoanRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoanRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoanRecordInfo));
  AssureRecordInfo_descriptor_ = file->message_type(6);
  static const int AssureRecordInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssureRecordInfo, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssureRecordInfo, orderno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssureRecordInfo, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssureRecordInfo, guaamt_),
  };
  AssureRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssureRecordInfo_descriptor_,
      AssureRecordInfo::default_instance_,
      AssureRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssureRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssureRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssureRecordInfo));
  ZhimaDataFlowReflux_ans_descriptor_ = file->message_type(7);
  static const int ZhimaDataFlowReflux_ans_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, user_credentials_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, loan_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, assure_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, remindcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, amtoverdue_),
  };
  ZhimaDataFlowReflux_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhimaDataFlowReflux_ans_descriptor_,
      ZhimaDataFlowReflux_ans::default_instance_,
      ZhimaDataFlowReflux_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhimaDataFlowReflux_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhimaDataFlowReflux_ans));
  UserCredentialsType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UBAS_5fQDP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationPoint_descriptor_, &LocationPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location2Position_ask_descriptor_, &Location2Position_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationInfo_descriptor_, &LocationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location2Position_ans_descriptor_, &Location2Position_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhimaDataFlowReflux_ask_descriptor_, &ZhimaDataFlowReflux_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoanRecordInfo_descriptor_, &LoanRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssureRecordInfo_descriptor_, &AssureRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhimaDataFlowReflux_ans_descriptor_, &ZhimaDataFlowReflux_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UBAS_5fQDP_2eproto() {
  delete LocationPoint::default_instance_;
  delete LocationPoint_reflection_;
  delete Location2Position_ask::default_instance_;
  delete Location2Position_ask_reflection_;
  delete LocationInfo::default_instance_;
  delete LocationInfo_reflection_;
  delete Location2Position_ans::default_instance_;
  delete Location2Position_ans_reflection_;
  delete ZhimaDataFlowReflux_ask::default_instance_;
  delete ZhimaDataFlowReflux_ask_reflection_;
  delete LoanRecordInfo::default_instance_;
  delete LoanRecordInfo_reflection_;
  delete AssureRecordInfo::default_instance_;
  delete AssureRecordInfo_reflection_;
  delete ZhimaDataFlowReflux_ans::default_instance_;
  delete ZhimaDataFlowReflux_ans_reflection_;
}

void protobuf_AddDesc_UBAS_5fQDP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016UBAS_QDP.proto\022\010BUAS_QDP\032\014common.proto"
    "\"1\n\rLocationPoint\022\017\n\007lng_lat\030\001 \001(\014\022\017\n\007lo"
    "calID\030\002 \001(\014\"F\n\025Location2Position_ask\022-\n\014"
    "lng_lat_list\030\001 \003(\0132\027.BUAS_QDP.LocationPo"
    "int\"G\n\014LocationInfo\022\025\n\rposition_info\030\001 \001"
    "(\014\022\017\n\007localID\030\002 \001(\014\022\017\n\007lng_lat\030\003 \001(\014\"h\n\025"
    "Location2Position_ans\022 \n\005error\030\001 \001(\0132\021.c"
    "ommon.errorinfo\022-\n\rposition_info\030\002 \003(\0132\026"
    ".BUAS_QDP.LocationInfo\"\227\001\n\027ZhimaDataFlow"
    "Reflux_ask\022<\n\025user_credentials_type\030\001 \001("
    "\0162\035.BUAS_QDP.UserCredentialsType\022\025\n\riden"
    "tity_card\030\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\022\024\n\014mo"
    "bile_phone\030\004 \001(\014\"\243\001\n\016LoanRecordInfo\022\017\n\007o"
    "rderNo\030\001 \001(\014\022\021\n\torderType\030\002 \001(\014\022\017\n\007bizTy"
    "pe\030\003 \001(\014\022\025\n\rgmtOrderStart\030\004 \001(\014\022\016\n\006gmtDu"
    "e\030\005 \001(\014\022\017\n\007payFreq\030\006 \001(\014\022\020\n\010payMonth\030\007 \001"
    "(\014\022\022\n\ngmtOvdDate\030\010 \001(\014\"X\n\020AssureRecordIn"
    "fo\022\020\n\010identity\030\001 \001(\014\022\017\n\007orderNo\030\002 \001(\014\022\021\n"
    "\torderType\030\003 \001(\014\022\016\n\006guaAmt\030\004 \001(\014\"\234\002\n\027Zhi"
    "maDataFlowReflux_ans\022<\n\025user_credentials"
    "_type\030\001 \001(\0162\035.BUAS_QDP.UserCredentialsTy"
    "pe\022\025\n\ridentity_card\030\002 \001(\014\022\021\n\treal_name\030\003"
    " \001(\014\022\024\n\014mobile_phone\030\004 \001(\014\022+\n\tloan_info\030"
    "\005 \003(\0132\030.BUAS_QDP.LoanRecordInfo\022/\n\013assur"
    "e_info\030\006 \003(\0132\032.BUAS_QDP.AssureRecordInfo"
    "\022\021\n\tremindCnt\030\007 \001(\014\022\022\n\namtOverdue\030\010 \001(\014*"
    ".\n\023UserCredentialsType\022\013\n\007Unknown\020\000\022\n\n\006I"
    "DCard\020\001", 1087);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UBAS_QDP.proto", &protobuf_RegisterTypes);
  LocationPoint::default_instance_ = new LocationPoint();
  Location2Position_ask::default_instance_ = new Location2Position_ask();
  LocationInfo::default_instance_ = new LocationInfo();
  Location2Position_ans::default_instance_ = new Location2Position_ans();
  ZhimaDataFlowReflux_ask::default_instance_ = new ZhimaDataFlowReflux_ask();
  LoanRecordInfo::default_instance_ = new LoanRecordInfo();
  AssureRecordInfo::default_instance_ = new AssureRecordInfo();
  ZhimaDataFlowReflux_ans::default_instance_ = new ZhimaDataFlowReflux_ans();
  LocationPoint::default_instance_->InitAsDefaultInstance();
  Location2Position_ask::default_instance_->InitAsDefaultInstance();
  LocationInfo::default_instance_->InitAsDefaultInstance();
  Location2Position_ans::default_instance_->InitAsDefaultInstance();
  ZhimaDataFlowReflux_ask::default_instance_->InitAsDefaultInstance();
  LoanRecordInfo::default_instance_->InitAsDefaultInstance();
  AssureRecordInfo::default_instance_->InitAsDefaultInstance();
  ZhimaDataFlowReflux_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UBAS_5fQDP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UBAS_5fQDP_2eproto {
  StaticDescriptorInitializer_UBAS_5fQDP_2eproto() {
    protobuf_AddDesc_UBAS_5fQDP_2eproto();
  }
} static_descriptor_initializer_UBAS_5fQDP_2eproto_;
const ::google::protobuf::EnumDescriptor* UserCredentialsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCredentialsType_descriptor_;
}
bool UserCredentialsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LocationPoint::kLngLatFieldNumber;
const int LocationPoint::kLocalIDFieldNumber;
#endif  // !_MSC_VER

LocationPoint::LocationPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.LocationPoint)
}

void LocationPoint::InitAsDefaultInstance() {
}

LocationPoint::LocationPoint(const LocationPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.LocationPoint)
}

void LocationPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lng_lat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationPoint::~LocationPoint() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.LocationPoint)
  SharedDtor();
}

void LocationPoint::SharedDtor() {
  if (lng_lat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lng_lat_;
  }
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localid_;
  }
  if (this != default_instance_) {
  }
}

void LocationPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationPoint_descriptor_;
}

const LocationPoint& LocationPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

LocationPoint* LocationPoint::default_instance_ = NULL;

LocationPoint* LocationPoint::New() const {
  return new LocationPoint;
}

void LocationPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_lng_lat()) {
      if (lng_lat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lng_lat_->clear();
      }
    }
    if (has_localid()) {
      if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.LocationPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes lng_lat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lng_lat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_localID;
        break;
      }

      // optional bytes localID = 2;
      case 2: {
        if (tag == 18) {
         parse_localID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.LocationPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.LocationPoint)
  return false;
#undef DO_
}

void LocationPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.LocationPoint)
  // optional bytes lng_lat = 1;
  if (has_lng_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->lng_lat(), output);
  }

  // optional bytes localID = 2;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->localid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.LocationPoint)
}

::google::protobuf::uint8* LocationPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.LocationPoint)
  // optional bytes lng_lat = 1;
  if (has_lng_lat()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->lng_lat(), target);
  }

  // optional bytes localID = 2;
  if (has_localid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->localid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.LocationPoint)
  return target;
}

int LocationPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes lng_lat = 1;
    if (has_lng_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lng_lat());
    }

    // optional bytes localID = 2;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->localid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationPoint::MergeFrom(const LocationPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lng_lat()) {
      set_lng_lat(from.lng_lat());
    }
    if (from.has_localid()) {
      set_localid(from.localid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationPoint::CopyFrom(const LocationPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationPoint::IsInitialized() const {

  return true;
}

void LocationPoint::Swap(LocationPoint* other) {
  if (other != this) {
    std::swap(lng_lat_, other->lng_lat_);
    std::swap(localid_, other->localid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationPoint_descriptor_;
  metadata.reflection = LocationPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location2Position_ask::kLngLatListFieldNumber;
#endif  // !_MSC_VER

Location2Position_ask::Location2Position_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.Location2Position_ask)
}

void Location2Position_ask::InitAsDefaultInstance() {
}

Location2Position_ask::Location2Position_ask(const Location2Position_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.Location2Position_ask)
}

void Location2Position_ask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location2Position_ask::~Location2Position_ask() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.Location2Position_ask)
  SharedDtor();
}

void Location2Position_ask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location2Position_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location2Position_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location2Position_ask_descriptor_;
}

const Location2Position_ask& Location2Position_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

Location2Position_ask* Location2Position_ask::default_instance_ = NULL;

Location2Position_ask* Location2Position_ask::New() const {
  return new Location2Position_ask;
}

void Location2Position_ask::Clear() {
  lng_lat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location2Position_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.Location2Position_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BUAS_QDP.LocationPoint lng_lat_list = 1;
      case 1: {
        if (tag == 10) {
         parse_lng_lat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lng_lat_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lng_lat_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.Location2Position_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.Location2Position_ask)
  return false;
#undef DO_
}

void Location2Position_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.Location2Position_ask)
  // repeated .BUAS_QDP.LocationPoint lng_lat_list = 1;
  for (int i = 0; i < this->lng_lat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lng_lat_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.Location2Position_ask)
}

::google::protobuf::uint8* Location2Position_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.Location2Position_ask)
  // repeated .BUAS_QDP.LocationPoint lng_lat_list = 1;
  for (int i = 0; i < this->lng_lat_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lng_lat_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.Location2Position_ask)
  return target;
}

int Location2Position_ask::ByteSize() const {
  int total_size = 0;

  // repeated .BUAS_QDP.LocationPoint lng_lat_list = 1;
  total_size += 1 * this->lng_lat_list_size();
  for (int i = 0; i < this->lng_lat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lng_lat_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location2Position_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location2Position_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location2Position_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location2Position_ask::MergeFrom(const Location2Position_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  lng_lat_list_.MergeFrom(from.lng_lat_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location2Position_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location2Position_ask::CopyFrom(const Location2Position_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location2Position_ask::IsInitialized() const {

  return true;
}

void Location2Position_ask::Swap(Location2Position_ask* other) {
  if (other != this) {
    lng_lat_list_.Swap(&other->lng_lat_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location2Position_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location2Position_ask_descriptor_;
  metadata.reflection = Location2Position_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocationInfo::kPositionInfoFieldNumber;
const int LocationInfo::kLocalIDFieldNumber;
const int LocationInfo::kLngLatFieldNumber;
#endif  // !_MSC_VER

LocationInfo::LocationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.LocationInfo)
}

void LocationInfo::InitAsDefaultInstance() {
}

LocationInfo::LocationInfo(const LocationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.LocationInfo)
}

void LocationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lng_lat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationInfo::~LocationInfo() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.LocationInfo)
  SharedDtor();
}

void LocationInfo::SharedDtor() {
  if (position_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_info_;
  }
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localid_;
  }
  if (lng_lat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lng_lat_;
  }
  if (this != default_instance_) {
  }
}

void LocationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationInfo_descriptor_;
}

const LocationInfo& LocationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

LocationInfo* LocationInfo::default_instance_ = NULL;

LocationInfo* LocationInfo::New() const {
  return new LocationInfo;
}

void LocationInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_position_info()) {
      if (position_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_info_->clear();
      }
    }
    if (has_localid()) {
      if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localid_->clear();
      }
    }
    if (has_lng_lat()) {
      if (lng_lat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lng_lat_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.LocationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes position_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_localID;
        break;
      }

      // optional bytes localID = 2;
      case 2: {
        if (tag == 18) {
         parse_localID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lng_lat;
        break;
      }

      // optional bytes lng_lat = 3;
      case 3: {
        if (tag == 26) {
         parse_lng_lat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lng_lat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.LocationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.LocationInfo)
  return false;
#undef DO_
}

void LocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.LocationInfo)
  // optional bytes position_info = 1;
  if (has_position_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->position_info(), output);
  }

  // optional bytes localID = 2;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->localid(), output);
  }

  // optional bytes lng_lat = 3;
  if (has_lng_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->lng_lat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.LocationInfo)
}

::google::protobuf::uint8* LocationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.LocationInfo)
  // optional bytes position_info = 1;
  if (has_position_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->position_info(), target);
  }

  // optional bytes localID = 2;
  if (has_localid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->localid(), target);
  }

  // optional bytes lng_lat = 3;
  if (has_lng_lat()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->lng_lat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.LocationInfo)
  return target;
}

int LocationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes position_info = 1;
    if (has_position_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position_info());
    }

    // optional bytes localID = 2;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->localid());
    }

    // optional bytes lng_lat = 3;
    if (has_lng_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lng_lat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationInfo::MergeFrom(const LocationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_info()) {
      set_position_info(from.position_info());
    }
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_lng_lat()) {
      set_lng_lat(from.lng_lat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationInfo::CopyFrom(const LocationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationInfo::IsInitialized() const {

  return true;
}

void LocationInfo::Swap(LocationInfo* other) {
  if (other != this) {
    std::swap(position_info_, other->position_info_);
    std::swap(localid_, other->localid_);
    std::swap(lng_lat_, other->lng_lat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationInfo_descriptor_;
  metadata.reflection = LocationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location2Position_ans::kErrorFieldNumber;
const int Location2Position_ans::kPositionInfoFieldNumber;
#endif  // !_MSC_VER

Location2Position_ans::Location2Position_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.Location2Position_ans)
}

void Location2Position_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

Location2Position_ans::Location2Position_ans(const Location2Position_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.Location2Position_ans)
}

void Location2Position_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location2Position_ans::~Location2Position_ans() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.Location2Position_ans)
  SharedDtor();
}

void Location2Position_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void Location2Position_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location2Position_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location2Position_ans_descriptor_;
}

const Location2Position_ans& Location2Position_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

Location2Position_ans* Location2Position_ans::default_instance_ = NULL;

Location2Position_ans* Location2Position_ans::New() const {
  return new Location2Position_ans;
}

void Location2Position_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  position_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location2Position_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.Location2Position_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position_info;
        break;
      }

      // repeated .BUAS_QDP.LocationInfo position_info = 2;
      case 2: {
        if (tag == 18) {
         parse_position_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.Location2Position_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.Location2Position_ans)
  return false;
#undef DO_
}

void Location2Position_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.Location2Position_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // repeated .BUAS_QDP.LocationInfo position_info = 2;
  for (int i = 0; i < this->position_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.Location2Position_ans)
}

::google::protobuf::uint8* Location2Position_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.Location2Position_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // repeated .BUAS_QDP.LocationInfo position_info = 2;
  for (int i = 0; i < this->position_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.Location2Position_ans)
  return target;
}

int Location2Position_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .BUAS_QDP.LocationInfo position_info = 2;
  total_size += 1 * this->position_info_size();
  for (int i = 0; i < this->position_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location2Position_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location2Position_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location2Position_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location2Position_ans::MergeFrom(const Location2Position_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_info_.MergeFrom(from.position_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location2Position_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location2Position_ans::CopyFrom(const Location2Position_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location2Position_ans::IsInitialized() const {

  return true;
}

void Location2Position_ans::Swap(Location2Position_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    position_info_.Swap(&other->position_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location2Position_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location2Position_ans_descriptor_;
  metadata.reflection = Location2Position_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhimaDataFlowReflux_ask::kUserCredentialsTypeFieldNumber;
const int ZhimaDataFlowReflux_ask::kIdentityCardFieldNumber;
const int ZhimaDataFlowReflux_ask::kRealNameFieldNumber;
const int ZhimaDataFlowReflux_ask::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

ZhimaDataFlowReflux_ask::ZhimaDataFlowReflux_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.ZhimaDataFlowReflux_ask)
}

void ZhimaDataFlowReflux_ask::InitAsDefaultInstance() {
}

ZhimaDataFlowReflux_ask::ZhimaDataFlowReflux_ask(const ZhimaDataFlowReflux_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.ZhimaDataFlowReflux_ask)
}

void ZhimaDataFlowReflux_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_credentials_type_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhimaDataFlowReflux_ask::~ZhimaDataFlowReflux_ask() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.ZhimaDataFlowReflux_ask)
  SharedDtor();
}

void ZhimaDataFlowReflux_ask::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
  }
}

void ZhimaDataFlowReflux_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhimaDataFlowReflux_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhimaDataFlowReflux_ask_descriptor_;
}

const ZhimaDataFlowReflux_ask& ZhimaDataFlowReflux_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

ZhimaDataFlowReflux_ask* ZhimaDataFlowReflux_ask::default_instance_ = NULL;

ZhimaDataFlowReflux_ask* ZhimaDataFlowReflux_ask::New() const {
  return new ZhimaDataFlowReflux_ask;
}

void ZhimaDataFlowReflux_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_credentials_type_ = 0;
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhimaDataFlowReflux_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.ZhimaDataFlowReflux_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BUAS_QDP::UserCredentialsType_IsValid(value)) {
            set_user_credentials_type(static_cast< ::BUAS_QDP::UserCredentialsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.ZhimaDataFlowReflux_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.ZhimaDataFlowReflux_ask)
  return false;
#undef DO_
}

void ZhimaDataFlowReflux_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.ZhimaDataFlowReflux_ask)
  // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
  if (has_user_credentials_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->user_credentials_type(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.ZhimaDataFlowReflux_ask)
}

::google::protobuf::uint8* ZhimaDataFlowReflux_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.ZhimaDataFlowReflux_ask)
  // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
  if (has_user_credentials_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->user_credentials_type(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.ZhimaDataFlowReflux_ask)
  return target;
}

int ZhimaDataFlowReflux_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
    if (has_user_credentials_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_credentials_type());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 4;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhimaDataFlowReflux_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhimaDataFlowReflux_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhimaDataFlowReflux_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhimaDataFlowReflux_ask::MergeFrom(const ZhimaDataFlowReflux_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_credentials_type()) {
      set_user_credentials_type(from.user_credentials_type());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhimaDataFlowReflux_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhimaDataFlowReflux_ask::CopyFrom(const ZhimaDataFlowReflux_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhimaDataFlowReflux_ask::IsInitialized() const {

  return true;
}

void ZhimaDataFlowReflux_ask::Swap(ZhimaDataFlowReflux_ask* other) {
  if (other != this) {
    std::swap(user_credentials_type_, other->user_credentials_type_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhimaDataFlowReflux_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhimaDataFlowReflux_ask_descriptor_;
  metadata.reflection = ZhimaDataFlowReflux_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoanRecordInfo::kOrderNoFieldNumber;
const int LoanRecordInfo::kOrderTypeFieldNumber;
const int LoanRecordInfo::kBizTypeFieldNumber;
const int LoanRecordInfo::kGmtOrderStartFieldNumber;
const int LoanRecordInfo::kGmtDueFieldNumber;
const int LoanRecordInfo::kPayFreqFieldNumber;
const int LoanRecordInfo::kPayMonthFieldNumber;
const int LoanRecordInfo::kGmtOvdDateFieldNumber;
#endif  // !_MSC_VER

LoanRecordInfo::LoanRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.LoanRecordInfo)
}

void LoanRecordInfo::InitAsDefaultInstance() {
}

LoanRecordInfo::LoanRecordInfo(const LoanRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.LoanRecordInfo)
}

void LoanRecordInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  biztype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmtorderstart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmtdue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payfreq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paymonth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmtovddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoanRecordInfo::~LoanRecordInfo() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.LoanRecordInfo)
  SharedDtor();
}

void LoanRecordInfo::SharedDtor() {
  if (orderno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderno_;
  }
  if (ordertype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ordertype_;
  }
  if (biztype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete biztype_;
  }
  if (gmtorderstart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmtorderstart_;
  }
  if (gmtdue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmtdue_;
  }
  if (payfreq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payfreq_;
  }
  if (paymonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paymonth_;
  }
  if (gmtovddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmtovddate_;
  }
  if (this != default_instance_) {
  }
}

void LoanRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoanRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoanRecordInfo_descriptor_;
}

const LoanRecordInfo& LoanRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

LoanRecordInfo* LoanRecordInfo::default_instance_ = NULL;

LoanRecordInfo* LoanRecordInfo::New() const {
  return new LoanRecordInfo;
}

void LoanRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_orderno()) {
      if (orderno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderno_->clear();
      }
    }
    if (has_ordertype()) {
      if (ordertype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ordertype_->clear();
      }
    }
    if (has_biztype()) {
      if (biztype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        biztype_->clear();
      }
    }
    if (has_gmtorderstart()) {
      if (gmtorderstart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmtorderstart_->clear();
      }
    }
    if (has_gmtdue()) {
      if (gmtdue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmtdue_->clear();
      }
    }
    if (has_payfreq()) {
      if (payfreq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payfreq_->clear();
      }
    }
    if (has_paymonth()) {
      if (paymonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        paymonth_->clear();
      }
    }
    if (has_gmtovddate()) {
      if (gmtovddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmtovddate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoanRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.LoanRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes orderNo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orderType;
        break;
      }

      // optional bytes orderType = 2;
      case 2: {
        if (tag == 18) {
         parse_orderType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordertype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bizType;
        break;
      }

      // optional bytes bizType = 3;
      case 3: {
        if (tag == 26) {
         parse_bizType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_biztype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gmtOrderStart;
        break;
      }

      // optional bytes gmtOrderStart = 4;
      case 4: {
        if (tag == 34) {
         parse_gmtOrderStart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gmtorderstart()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gmtDue;
        break;
      }

      // optional bytes gmtDue = 5;
      case 5: {
        if (tag == 42) {
         parse_gmtDue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gmtdue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_payFreq;
        break;
      }

      // optional bytes payFreq = 6;
      case 6: {
        if (tag == 50) {
         parse_payFreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payfreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_payMonth;
        break;
      }

      // optional bytes payMonth = 7;
      case 7: {
        if (tag == 58) {
         parse_payMonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_paymonth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gmtOvdDate;
        break;
      }

      // optional bytes gmtOvdDate = 8;
      case 8: {
        if (tag == 66) {
         parse_gmtOvdDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gmtovddate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.LoanRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.LoanRecordInfo)
  return false;
#undef DO_
}

void LoanRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.LoanRecordInfo)
  // optional bytes orderNo = 1;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->orderno(), output);
  }

  // optional bytes orderType = 2;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ordertype(), output);
  }

  // optional bytes bizType = 3;
  if (has_biztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->biztype(), output);
  }

  // optional bytes gmtOrderStart = 4;
  if (has_gmtorderstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->gmtorderstart(), output);
  }

  // optional bytes gmtDue = 5;
  if (has_gmtdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->gmtdue(), output);
  }

  // optional bytes payFreq = 6;
  if (has_payfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->payfreq(), output);
  }

  // optional bytes payMonth = 7;
  if (has_paymonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->paymonth(), output);
  }

  // optional bytes gmtOvdDate = 8;
  if (has_gmtovddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->gmtovddate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.LoanRecordInfo)
}

::google::protobuf::uint8* LoanRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.LoanRecordInfo)
  // optional bytes orderNo = 1;
  if (has_orderno()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->orderno(), target);
  }

  // optional bytes orderType = 2;
  if (has_ordertype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ordertype(), target);
  }

  // optional bytes bizType = 3;
  if (has_biztype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->biztype(), target);
  }

  // optional bytes gmtOrderStart = 4;
  if (has_gmtorderstart()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->gmtorderstart(), target);
  }

  // optional bytes gmtDue = 5;
  if (has_gmtdue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->gmtdue(), target);
  }

  // optional bytes payFreq = 6;
  if (has_payfreq()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->payfreq(), target);
  }

  // optional bytes payMonth = 7;
  if (has_paymonth()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->paymonth(), target);
  }

  // optional bytes gmtOvdDate = 8;
  if (has_gmtovddate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->gmtovddate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.LoanRecordInfo)
  return target;
}

int LoanRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes orderNo = 1;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderno());
    }

    // optional bytes orderType = 2;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordertype());
    }

    // optional bytes bizType = 3;
    if (has_biztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->biztype());
    }

    // optional bytes gmtOrderStart = 4;
    if (has_gmtorderstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gmtorderstart());
    }

    // optional bytes gmtDue = 5;
    if (has_gmtdue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gmtdue());
    }

    // optional bytes payFreq = 6;
    if (has_payfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payfreq());
    }

    // optional bytes payMonth = 7;
    if (has_paymonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->paymonth());
    }

    // optional bytes gmtOvdDate = 8;
    if (has_gmtovddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gmtovddate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoanRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoanRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoanRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoanRecordInfo::MergeFrom(const LoanRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderno()) {
      set_orderno(from.orderno());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_biztype()) {
      set_biztype(from.biztype());
    }
    if (from.has_gmtorderstart()) {
      set_gmtorderstart(from.gmtorderstart());
    }
    if (from.has_gmtdue()) {
      set_gmtdue(from.gmtdue());
    }
    if (from.has_payfreq()) {
      set_payfreq(from.payfreq());
    }
    if (from.has_paymonth()) {
      set_paymonth(from.paymonth());
    }
    if (from.has_gmtovddate()) {
      set_gmtovddate(from.gmtovddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoanRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoanRecordInfo::CopyFrom(const LoanRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoanRecordInfo::IsInitialized() const {

  return true;
}

void LoanRecordInfo::Swap(LoanRecordInfo* other) {
  if (other != this) {
    std::swap(orderno_, other->orderno_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(biztype_, other->biztype_);
    std::swap(gmtorderstart_, other->gmtorderstart_);
    std::swap(gmtdue_, other->gmtdue_);
    std::swap(payfreq_, other->payfreq_);
    std::swap(paymonth_, other->paymonth_);
    std::swap(gmtovddate_, other->gmtovddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoanRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoanRecordInfo_descriptor_;
  metadata.reflection = LoanRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssureRecordInfo::kIdentityFieldNumber;
const int AssureRecordInfo::kOrderNoFieldNumber;
const int AssureRecordInfo::kOrderTypeFieldNumber;
const int AssureRecordInfo::kGuaAmtFieldNumber;
#endif  // !_MSC_VER

AssureRecordInfo::AssureRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.AssureRecordInfo)
}

void AssureRecordInfo::InitAsDefaultInstance() {
}

AssureRecordInfo::AssureRecordInfo(const AssureRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.AssureRecordInfo)
}

void AssureRecordInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guaamt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssureRecordInfo::~AssureRecordInfo() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.AssureRecordInfo)
  SharedDtor();
}

void AssureRecordInfo::SharedDtor() {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (orderno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderno_;
  }
  if (ordertype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ordertype_;
  }
  if (guaamt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guaamt_;
  }
  if (this != default_instance_) {
  }
}

void AssureRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssureRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssureRecordInfo_descriptor_;
}

const AssureRecordInfo& AssureRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

AssureRecordInfo* AssureRecordInfo::default_instance_ = NULL;

AssureRecordInfo* AssureRecordInfo::New() const {
  return new AssureRecordInfo;
}

void AssureRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_identity()) {
      if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_->clear();
      }
    }
    if (has_orderno()) {
      if (orderno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderno_->clear();
      }
    }
    if (has_ordertype()) {
      if (ordertype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ordertype_->clear();
      }
    }
    if (has_guaamt()) {
      if (guaamt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guaamt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssureRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.AssureRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orderNo;
        break;
      }

      // optional bytes orderNo = 2;
      case 2: {
        if (tag == 18) {
         parse_orderNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orderType;
        break;
      }

      // optional bytes orderType = 3;
      case 3: {
        if (tag == 26) {
         parse_orderType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordertype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guaAmt;
        break;
      }

      // optional bytes guaAmt = 4;
      case 4: {
        if (tag == 34) {
         parse_guaAmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guaamt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.AssureRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.AssureRecordInfo)
  return false;
#undef DO_
}

void AssureRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.AssureRecordInfo)
  // optional bytes identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identity(), output);
  }

  // optional bytes orderNo = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->orderno(), output);
  }

  // optional bytes orderType = 3;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ordertype(), output);
  }

  // optional bytes guaAmt = 4;
  if (has_guaamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->guaamt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.AssureRecordInfo)
}

::google::protobuf::uint8* AssureRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.AssureRecordInfo)
  // optional bytes identity = 1;
  if (has_identity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identity(), target);
  }

  // optional bytes orderNo = 2;
  if (has_orderno()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->orderno(), target);
  }

  // optional bytes orderType = 3;
  if (has_ordertype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ordertype(), target);
  }

  // optional bytes guaAmt = 4;
  if (has_guaamt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->guaamt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.AssureRecordInfo)
  return target;
}

int AssureRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity());
    }

    // optional bytes orderNo = 2;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderno());
    }

    // optional bytes orderType = 3;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordertype());
    }

    // optional bytes guaAmt = 4;
    if (has_guaamt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guaamt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssureRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssureRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssureRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssureRecordInfo::MergeFrom(const AssureRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_orderno()) {
      set_orderno(from.orderno());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_guaamt()) {
      set_guaamt(from.guaamt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssureRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssureRecordInfo::CopyFrom(const AssureRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssureRecordInfo::IsInitialized() const {

  return true;
}

void AssureRecordInfo::Swap(AssureRecordInfo* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    std::swap(orderno_, other->orderno_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(guaamt_, other->guaamt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssureRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssureRecordInfo_descriptor_;
  metadata.reflection = AssureRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhimaDataFlowReflux_ans::kUserCredentialsTypeFieldNumber;
const int ZhimaDataFlowReflux_ans::kIdentityCardFieldNumber;
const int ZhimaDataFlowReflux_ans::kRealNameFieldNumber;
const int ZhimaDataFlowReflux_ans::kMobilePhoneFieldNumber;
const int ZhimaDataFlowReflux_ans::kLoanInfoFieldNumber;
const int ZhimaDataFlowReflux_ans::kAssureInfoFieldNumber;
const int ZhimaDataFlowReflux_ans::kRemindCntFieldNumber;
const int ZhimaDataFlowReflux_ans::kAmtOverdueFieldNumber;
#endif  // !_MSC_VER

ZhimaDataFlowReflux_ans::ZhimaDataFlowReflux_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BUAS_QDP.ZhimaDataFlowReflux_ans)
}

void ZhimaDataFlowReflux_ans::InitAsDefaultInstance() {
}

ZhimaDataFlowReflux_ans::ZhimaDataFlowReflux_ans(const ZhimaDataFlowReflux_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BUAS_QDP.ZhimaDataFlowReflux_ans)
}

void ZhimaDataFlowReflux_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_credentials_type_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remindcnt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amtoverdue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhimaDataFlowReflux_ans::~ZhimaDataFlowReflux_ans() {
  // @@protoc_insertion_point(destructor:BUAS_QDP.ZhimaDataFlowReflux_ans)
  SharedDtor();
}

void ZhimaDataFlowReflux_ans::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (remindcnt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remindcnt_;
  }
  if (amtoverdue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete amtoverdue_;
  }
  if (this != default_instance_) {
  }
}

void ZhimaDataFlowReflux_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhimaDataFlowReflux_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhimaDataFlowReflux_ans_descriptor_;
}

const ZhimaDataFlowReflux_ans& ZhimaDataFlowReflux_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fQDP_2eproto();
  return *default_instance_;
}

ZhimaDataFlowReflux_ans* ZhimaDataFlowReflux_ans::default_instance_ = NULL;

ZhimaDataFlowReflux_ans* ZhimaDataFlowReflux_ans::New() const {
  return new ZhimaDataFlowReflux_ans;
}

void ZhimaDataFlowReflux_ans::Clear() {
  if (_has_bits_[0 / 32] & 207) {
    user_credentials_type_ = 0;
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_remindcnt()) {
      if (remindcnt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remindcnt_->clear();
      }
    }
    if (has_amtoverdue()) {
      if (amtoverdue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        amtoverdue_->clear();
      }
    }
  }
  loan_info_.Clear();
  assure_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhimaDataFlowReflux_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BUAS_QDP.ZhimaDataFlowReflux_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BUAS_QDP::UserCredentialsType_IsValid(value)) {
            set_user_credentials_type(static_cast< ::BUAS_QDP::UserCredentialsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loan_info;
        break;
      }

      // repeated .BUAS_QDP.LoanRecordInfo loan_info = 5;
      case 5: {
        if (tag == 42) {
         parse_loan_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loan_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loan_info;
        if (input->ExpectTag(50)) goto parse_assure_info;
        break;
      }

      // repeated .BUAS_QDP.AssureRecordInfo assure_info = 6;
      case 6: {
        if (tag == 50) {
         parse_assure_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assure_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_assure_info;
        if (input->ExpectTag(58)) goto parse_remindCnt;
        break;
      }

      // optional bytes remindCnt = 7;
      case 7: {
        if (tag == 58) {
         parse_remindCnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remindcnt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_amtOverdue;
        break;
      }

      // optional bytes amtOverdue = 8;
      case 8: {
        if (tag == 66) {
         parse_amtOverdue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_amtoverdue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BUAS_QDP.ZhimaDataFlowReflux_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BUAS_QDP.ZhimaDataFlowReflux_ans)
  return false;
#undef DO_
}

void ZhimaDataFlowReflux_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BUAS_QDP.ZhimaDataFlowReflux_ans)
  // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
  if (has_user_credentials_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->user_credentials_type(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mobile_phone(), output);
  }

  // repeated .BUAS_QDP.LoanRecordInfo loan_info = 5;
  for (int i = 0; i < this->loan_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->loan_info(i), output);
  }

  // repeated .BUAS_QDP.AssureRecordInfo assure_info = 6;
  for (int i = 0; i < this->assure_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->assure_info(i), output);
  }

  // optional bytes remindCnt = 7;
  if (has_remindcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->remindcnt(), output);
  }

  // optional bytes amtOverdue = 8;
  if (has_amtoverdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->amtoverdue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BUAS_QDP.ZhimaDataFlowReflux_ans)
}

::google::protobuf::uint8* ZhimaDataFlowReflux_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BUAS_QDP.ZhimaDataFlowReflux_ans)
  // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
  if (has_user_credentials_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->user_credentials_type(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mobile_phone(), target);
  }

  // repeated .BUAS_QDP.LoanRecordInfo loan_info = 5;
  for (int i = 0; i < this->loan_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->loan_info(i), target);
  }

  // repeated .BUAS_QDP.AssureRecordInfo assure_info = 6;
  for (int i = 0; i < this->assure_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->assure_info(i), target);
  }

  // optional bytes remindCnt = 7;
  if (has_remindcnt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->remindcnt(), target);
  }

  // optional bytes amtOverdue = 8;
  if (has_amtoverdue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->amtoverdue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BUAS_QDP.ZhimaDataFlowReflux_ans)
  return target;
}

int ZhimaDataFlowReflux_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BUAS_QDP.UserCredentialsType user_credentials_type = 1;
    if (has_user_credentials_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_credentials_type());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 4;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes remindCnt = 7;
    if (has_remindcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remindcnt());
    }

    // optional bytes amtOverdue = 8;
    if (has_amtoverdue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->amtoverdue());
    }

  }
  // repeated .BUAS_QDP.LoanRecordInfo loan_info = 5;
  total_size += 1 * this->loan_info_size();
  for (int i = 0; i < this->loan_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loan_info(i));
  }

  // repeated .BUAS_QDP.AssureRecordInfo assure_info = 6;
  total_size += 1 * this->assure_info_size();
  for (int i = 0; i < this->assure_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assure_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhimaDataFlowReflux_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhimaDataFlowReflux_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhimaDataFlowReflux_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhimaDataFlowReflux_ans::MergeFrom(const ZhimaDataFlowReflux_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  loan_info_.MergeFrom(from.loan_info_);
  assure_info_.MergeFrom(from.assure_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_credentials_type()) {
      set_user_credentials_type(from.user_credentials_type());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_remindcnt()) {
      set_remindcnt(from.remindcnt());
    }
    if (from.has_amtoverdue()) {
      set_amtoverdue(from.amtoverdue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhimaDataFlowReflux_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhimaDataFlowReflux_ans::CopyFrom(const ZhimaDataFlowReflux_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhimaDataFlowReflux_ans::IsInitialized() const {

  return true;
}

void ZhimaDataFlowReflux_ans::Swap(ZhimaDataFlowReflux_ans* other) {
  if (other != this) {
    std::swap(user_credentials_type_, other->user_credentials_type_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    loan_info_.Swap(&other->loan_info_);
    assure_info_.Swap(&other->assure_info_);
    std::swap(remindcnt_, other->remindcnt_);
    std::swap(amtoverdue_, other->amtoverdue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhimaDataFlowReflux_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhimaDataFlowReflux_ans_descriptor_;
  metadata.reflection = ZhimaDataFlowReflux_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BUAS_QDP

// @@protoc_insertion_point(global_scope)
