// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ODP_main_frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ODP_main_frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ODP_main_frame {

namespace {

const ::google::protobuf::Descriptor* Pay_Withdraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pay_Withdraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_under_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_under_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_bid_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_bid_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* unfinished_bid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unfinished_bid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_distribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_distribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_trading_volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_trading_volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_province_trading_volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_province_trading_volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_registration_volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_registration_volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_trading_count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_trading_count_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_trading_volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_trading_volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* registration_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  registration_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* charge_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  charge_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* real_fund_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  real_fund_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* fund_flow_type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fund_flow_type_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_acount_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_acount_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* top_ten_user_acount_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  top_ten_user_acount_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_count_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_count_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_analyze_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_analyze_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_freshness_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_freshness_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_retain_rate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_retain_rate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_retain_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_retain_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_version_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_version_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* app_version_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  app_version_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* download_src_user_acount_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  download_src_user_acount_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* download_src_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  download_src_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_time_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_time_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_count_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_count_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_interval_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_interval_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* third_party_login_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  third_party_login_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pay_Withdraw_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pay_Withdraw_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pay_Withdraw_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pay_Withdraw_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* unfinished_bid_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unfinished_bid_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* unfinished_bid_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unfinished_bid_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_bid_count_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_bid_count_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_bid_count_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_bid_count_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_distribution_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_distribution_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_distribution_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_distribution_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_trading_volume_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_trading_volume_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_trading_volume_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_trading_volume_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_province_trading_volume_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_province_trading_volume_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_province_trading_volume_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_province_trading_volume_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* Real_time_registration_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Real_time_registration_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Real_time_registration_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Real_time_registration_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_registration_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_registration_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_registration_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_registration_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* real_time_charge_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  real_time_charge_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* real_time_charge_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  real_time_charge_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_trading_count_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_trading_count_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_trading_count_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_trading_count_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_trading_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_trading_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_trading_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_trading_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_fund_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_fund_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* cur_fund_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cur_fund_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_fund_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_fund_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_fund_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_fund_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_fund_flow_type_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_fund_flow_type_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_fund_flow_type_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_fund_flow_type_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_tendency_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_tendency_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_tendency_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_tendency_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_distribution_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_distribution_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_distribution_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_distribution_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_distribution_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_distribution_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_distribution_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_distribution_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_distribution_detail_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_distribution_detail_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_versions_distribution_detail_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_versions_distribution_detail_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_count_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_count_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_count_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_count_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_count_analyze_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_count_analyze_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* start_count_analyze_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  start_count_analyze_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* new_add_user_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  new_add_user_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* new_add_user_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  new_add_user_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* new_add_user_analyze_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  new_add_user_analyze_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* new_add_user_analyze_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  new_add_user_analyze_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* active_user_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  active_user_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* active_user_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  active_user_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* active_user_analyze_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  active_user_analyze_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* active_user_analyze_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  active_user_analyze_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_freshness_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_freshness_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_freshness_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_freshness_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_freshness_analyze_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_freshness_analyze_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_freshness_analyze_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_freshness_analyze_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_retain_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_retain_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_retain_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_retain_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_time_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_time_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_time_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_time_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_count_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_count_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_count_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_count_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_interval_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_interval_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* use_interval_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  use_interval_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* download_src_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  download_src_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* download_src_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  download_src_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* download_src_analyze_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  download_src_analyze_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* download_src_analyze_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  download_src_analyze_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* third_party_login_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  third_party_login_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* third_party_login_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  third_party_login_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* third_party_login_analyze_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  third_party_login_analyze_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* third_party_login_analyze_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  third_party_login_analyze_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* operation_report_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operation_report_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* operation_report_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operation_report_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* operation_report_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operation_report_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* doc_row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  doc_row_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_certification_list_row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_certification_list_row_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_certification_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_certification_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_certification_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_certification_ans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ODP_5fmain_5fframe_2eproto() {
  protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ODP_main_frame.proto");
  GOOGLE_CHECK(file != NULL);
  Pay_Withdraw_descriptor_ = file->message_type(0);
  static const int Pay_Withdraw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw, cur_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw, pay_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw, withdraw_amount_),
  };
  Pay_Withdraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pay_Withdraw_descriptor_,
      Pay_Withdraw::default_instance_,
      Pay_Withdraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pay_Withdraw));
  province_under_count_descriptor_ = file->message_type(1);
  static const int province_under_count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_under_count, province_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_under_count, under_count_),
  };
  province_under_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      province_under_count_descriptor_,
      province_under_count::default_instance_,
      province_under_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_under_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_under_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(province_under_count));
  city_bid_count_descriptor_ = file->message_type(2);
  static const int city_bid_count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count, bid_count_),
  };
  city_bid_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_bid_count_descriptor_,
      city_bid_count::default_instance_,
      city_bid_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_bid_count));
  unfinished_bid_info_descriptor_ = file->message_type(3);
  static const int unfinished_bid_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_info, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_info, role_city_name_),
  };
  unfinished_bid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unfinished_bid_info_descriptor_,
      unfinished_bid_info::default_instance_,
      unfinished_bid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unfinished_bid_info));
  user_distribution_descriptor_ = file->message_type(4);
  static const int user_distribution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution, user_count_),
  };
  user_distribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_distribution_descriptor_,
      user_distribution::default_instance_,
      user_distribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_distribution));
  cur_trading_volume_descriptor_ = file->message_type(5);
  static const int cur_trading_volume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume, trading_volume_),
  };
  cur_trading_volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_trading_volume_descriptor_,
      cur_trading_volume::default_instance_,
      cur_trading_volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_trading_volume));
  cur_province_trading_volume_descriptor_ = file->message_type(6);
  static const int cur_province_trading_volume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume, province_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume, trading_volume_),
  };
  cur_province_trading_volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_province_trading_volume_descriptor_,
      cur_province_trading_volume::default_instance_,
      cur_province_trading_volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_province_trading_volume));
  month_registration_volume_descriptor_ = file->message_type(7);
  static const int month_registration_volume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_volume, year_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_volume, regist_volume_),
  };
  month_registration_volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_registration_volume_descriptor_,
      month_registration_volume::default_instance_,
      month_registration_volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month_registration_volume));
  cur_trading_count_descriptor_ = file->message_type(8);
  static const int cur_trading_count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count, trading_count_),
  };
  cur_trading_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_trading_count_descriptor_,
      cur_trading_count::default_instance_,
      cur_trading_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_trading_count));
  month_trading_volume_descriptor_ = file->message_type(9);
  static const int month_trading_volume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_volume, year_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_volume, trading_volume_),
  };
  month_trading_volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_trading_volume_descriptor_,
      month_trading_volume::default_instance_,
      month_trading_volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month_trading_volume));
  registration_info_descriptor_ = file->message_type(10);
  static const int registration_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registration_info, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registration_info, count_),
  };
  registration_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      registration_info_descriptor_,
      registration_info::default_instance_,
      registration_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registration_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registration_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(registration_info));
  charge_info_descriptor_ = file->message_type(11);
  static const int charge_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_info, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_info, charge_amount_),
  };
  charge_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      charge_info_descriptor_,
      charge_info::default_instance_,
      charge_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(charge_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(charge_info));
  real_fund_detail_descriptor_ = file->message_type(12);
  static const int real_fund_detail_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, fund_serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, fund_serial_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, telno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, to_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, fund_serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, fund_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, fund_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, fund_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, update_time_),
  };
  real_fund_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      real_fund_detail_descriptor_,
      real_fund_detail::default_instance_,
      real_fund_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_fund_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(real_fund_detail));
  fund_flow_type_descriptor_ = file->message_type(13);
  static const int fund_flow_type_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fund_flow_type, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fund_flow_type, title_),
  };
  fund_flow_type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fund_flow_type_descriptor_,
      fund_flow_type::default_instance_,
      fund_flow_type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fund_flow_type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fund_flow_type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fund_flow_type));
  user_acount_info_descriptor_ = file->message_type(14);
  static const int user_acount_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_acount_info, user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_acount_info, date_tick_),
  };
  user_acount_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_acount_info_descriptor_,
      user_acount_info::default_instance_,
      user_acount_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_acount_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_acount_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_acount_info));
  top_ten_user_acount_info_descriptor_ = file->message_type(15);
  static const int top_ten_user_acount_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_ten_user_acount_info, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_ten_user_acount_info, info_),
  };
  top_ten_user_acount_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      top_ten_user_acount_info_descriptor_,
      top_ten_user_acount_info::default_instance_,
      top_ten_user_acount_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_ten_user_acount_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_ten_user_acount_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(top_ten_user_acount_info));
  start_count_info_descriptor_ = file->message_type(16);
  static const int start_count_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_info, start_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_info, start_count_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_info, date_tick_),
  };
  start_count_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_count_info_descriptor_,
      start_count_info::default_instance_,
      start_count_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_count_info));
  user_analyze_info_descriptor_ = file->message_type(17);
  static const int user_analyze_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_analyze_info, user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_analyze_info, user_count_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_analyze_info, date_tick_),
  };
  user_analyze_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_analyze_info_descriptor_,
      user_analyze_info::default_instance_,
      user_analyze_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_analyze_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_analyze_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_analyze_info));
  user_freshness_info_descriptor_ = file->message_type(18);
  static const int user_freshness_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_info, new_add_user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_info, active_user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_info, new_add_count_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_info, date_tick_),
  };
  user_freshness_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_freshness_info_descriptor_,
      user_freshness_info::default_instance_,
      user_freshness_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_freshness_info));
  user_retain_rate_info_descriptor_ = file->message_type(19);
  static const int user_retain_rate_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, oneday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, twoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, threeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, fourday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, fiveday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, sixday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, sevenday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, fourteenday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, thirtyday_),
  };
  user_retain_rate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_retain_rate_info_descriptor_,
      user_retain_rate_info::default_instance_,
      user_retain_rate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_rate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_retain_rate_info));
  user_retain_info_descriptor_ = file->message_type(20);
  static const int user_retain_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_info, new_add_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_info, user_retain_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_info, first_use_date_),
  };
  user_retain_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_retain_info_descriptor_,
      user_retain_info::default_instance_,
      user_retain_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_retain_info));
  app_version_statistics_descriptor_ = file->message_type(21);
  static const int app_version_statistics_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, total_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, total_user_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, new_add_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, new_add_user_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, upgrade_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, upgrade_user_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, new_upgrade_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, new_upgrade_user_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, active_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, active_user_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, start_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, start_acount_rate_),
  };
  app_version_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      app_version_statistics_descriptor_,
      app_version_statistics::default_instance_,
      app_version_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(app_version_statistics));
  app_version_detail_descriptor_ = file->message_type(22);
  static const int app_version_detail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, date_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, new_add_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, upgrade_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, active_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, acumulate_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, start_acount_),
  };
  app_version_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      app_version_detail_descriptor_,
      app_version_detail::default_instance_,
      app_version_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(app_version_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(app_version_detail));
  download_src_user_acount_info_descriptor_ = file->message_type(23);
  static const int download_src_user_acount_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_user_acount_info, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_user_acount_info, info_),
  };
  download_src_user_acount_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      download_src_user_acount_info_descriptor_,
      download_src_user_acount_info::default_instance_,
      download_src_user_acount_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_user_acount_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_user_acount_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(download_src_user_acount_info));
  download_src_detail_descriptor_ = file->message_type(24);
  static const int download_src_detail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, new_add_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, new_add_user_acount_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, active_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, active_user_acount_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, total_user_acount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, total_user_acount_rate_),
  };
  download_src_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      download_src_detail_descriptor_,
      download_src_detail::default_instance_,
      download_src_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(download_src_detail));
  use_time_info_descriptor_ = file->message_type(25);
  static const int use_time_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_info, time_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_info, start_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_info, start_rate_),
  };
  use_time_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_time_info_descriptor_,
      use_time_info::default_instance_,
      use_time_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_time_info));
  use_count_info_descriptor_ = file->message_type(26);
  static const int use_count_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_info, count_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_info, user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_info, user_count_rate_),
  };
  use_count_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_count_info_descriptor_,
      use_count_info::default_instance_,
      use_count_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_count_info));
  use_interval_info_descriptor_ = file->message_type(27);
  static const int use_interval_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_info, interval_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_info, start_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_info, start_count_rate_),
  };
  use_interval_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_interval_info_descriptor_,
      use_interval_info::default_instance_,
      use_interval_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_interval_info));
  third_party_login_info_descriptor_ = file->message_type(28);
  static const int third_party_login_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, platform_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, new_add_user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, new_add_user_count_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, total_user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, total_user_count_rate_),
  };
  third_party_login_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      third_party_login_info_descriptor_,
      third_party_login_info::default_instance_,
      third_party_login_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(third_party_login_info));
  Pay_Withdraw_ask_descriptor_ = file->message_type(29);
  static const int Pay_Withdraw_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ask, ask_header_),
  };
  Pay_Withdraw_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pay_Withdraw_ask_descriptor_,
      Pay_Withdraw_ask::default_instance_,
      Pay_Withdraw_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pay_Withdraw_ask));
  Pay_Withdraw_ans_descriptor_ = file->message_type(30);
  static const int Pay_Withdraw_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ans, cur_pay_withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ans, error_),
  };
  Pay_Withdraw_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pay_Withdraw_ans_descriptor_,
      Pay_Withdraw_ans::default_instance_,
      Pay_Withdraw_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pay_Withdraw_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pay_Withdraw_ans));
  unfinished_bid_ask_descriptor_ = file->message_type(31);
  static const int unfinished_bid_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ask, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ask, ask_header_),
  };
  unfinished_bid_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unfinished_bid_ask_descriptor_,
      unfinished_bid_ask::default_instance_,
      unfinished_bid_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unfinished_bid_ask));
  unfinished_bid_ans_descriptor_ = file->message_type(32);
  static const int unfinished_bid_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ans, error_),
  };
  unfinished_bid_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unfinished_bid_ans_descriptor_,
      unfinished_bid_ans::default_instance_,
      unfinished_bid_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unfinished_bid_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unfinished_bid_ans));
  city_bid_count_ask_descriptor_ = file->message_type(33);
  static const int city_bid_count_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ask, bid_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ask, ask_header_),
  };
  city_bid_count_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_bid_count_ask_descriptor_,
      city_bid_count_ask::default_instance_,
      city_bid_count_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_bid_count_ask));
  city_bid_count_ans_descriptor_ = file->message_type(34);
  static const int city_bid_count_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ans, count_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ans, error_),
  };
  city_bid_count_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_bid_count_ans_descriptor_,
      city_bid_count_ans::default_instance_,
      city_bid_count_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_bid_count_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_bid_count_ans));
  user_distribution_ask_descriptor_ = file->message_type(35);
  static const int user_distribution_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ask, user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ask, ask_header_),
  };
  user_distribution_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_distribution_ask_descriptor_,
      user_distribution_ask::default_instance_,
      user_distribution_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_distribution_ask));
  user_distribution_ans_descriptor_ = file->message_type(36);
  static const int user_distribution_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ans, error_),
  };
  user_distribution_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_distribution_ans_descriptor_,
      user_distribution_ans::default_instance_,
      user_distribution_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_distribution_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_distribution_ans));
  cur_trading_volume_ask_descriptor_ = file->message_type(37);
  static const int cur_trading_volume_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ask, start_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ask, end_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ask, ask_header_),
  };
  cur_trading_volume_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_trading_volume_ask_descriptor_,
      cur_trading_volume_ask::default_instance_,
      cur_trading_volume_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_trading_volume_ask));
  cur_trading_volume_ans_descriptor_ = file->message_type(38);
  static const int cur_trading_volume_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ans, error_),
  };
  cur_trading_volume_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_trading_volume_ans_descriptor_,
      cur_trading_volume_ans::default_instance_,
      cur_trading_volume_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_volume_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_trading_volume_ans));
  cur_province_trading_volume_ask_descriptor_ = file->message_type(39);
  static const int cur_province_trading_volume_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ask, ask_header_),
  };
  cur_province_trading_volume_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_province_trading_volume_ask_descriptor_,
      cur_province_trading_volume_ask::default_instance_,
      cur_province_trading_volume_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_province_trading_volume_ask));
  cur_province_trading_volume_ans_descriptor_ = file->message_type(40);
  static const int cur_province_trading_volume_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ans, error_),
  };
  cur_province_trading_volume_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_province_trading_volume_ans_descriptor_,
      cur_province_trading_volume_ans::default_instance_,
      cur_province_trading_volume_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_province_trading_volume_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_province_trading_volume_ans));
  Real_time_registration_ask_descriptor_ = file->message_type(41);
  static const int Real_time_registration_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ask, ask_header_),
  };
  Real_time_registration_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Real_time_registration_ask_descriptor_,
      Real_time_registration_ask::default_instance_,
      Real_time_registration_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Real_time_registration_ask));
  Real_time_registration_ans_descriptor_ = file->message_type(42);
  static const int Real_time_registration_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ans, error_),
  };
  Real_time_registration_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Real_time_registration_ans_descriptor_,
      Real_time_registration_ans::default_instance_,
      Real_time_registration_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Real_time_registration_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Real_time_registration_ans));
  month_registration_ask_descriptor_ = file->message_type(43);
  static const int month_registration_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ask, ask_header_),
  };
  month_registration_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_registration_ask_descriptor_,
      month_registration_ask::default_instance_,
      month_registration_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month_registration_ask));
  month_registration_ans_descriptor_ = file->message_type(44);
  static const int month_registration_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ans, error_),
  };
  month_registration_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_registration_ans_descriptor_,
      month_registration_ans::default_instance_,
      month_registration_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_registration_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month_registration_ans));
  real_time_charge_ask_descriptor_ = file->message_type(45);
  static const int real_time_charge_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ask, ask_header_),
  };
  real_time_charge_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      real_time_charge_ask_descriptor_,
      real_time_charge_ask::default_instance_,
      real_time_charge_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(real_time_charge_ask));
  real_time_charge_ans_descriptor_ = file->message_type(46);
  static const int real_time_charge_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ans, error_),
  };
  real_time_charge_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      real_time_charge_ans_descriptor_,
      real_time_charge_ans::default_instance_,
      real_time_charge_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(real_time_charge_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(real_time_charge_ans));
  cur_trading_count_ask_descriptor_ = file->message_type(47);
  static const int cur_trading_count_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ask, start_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ask, end_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ask, ask_header_),
  };
  cur_trading_count_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_trading_count_ask_descriptor_,
      cur_trading_count_ask::default_instance_,
      cur_trading_count_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_trading_count_ask));
  cur_trading_count_ans_descriptor_ = file->message_type(48);
  static const int cur_trading_count_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ans, error_),
  };
  cur_trading_count_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_trading_count_ans_descriptor_,
      cur_trading_count_ans::default_instance_,
      cur_trading_count_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_trading_count_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_trading_count_ans));
  month_trading_ask_descriptor_ = file->message_type(49);
  static const int month_trading_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ask, ask_header_),
  };
  month_trading_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_trading_ask_descriptor_,
      month_trading_ask::default_instance_,
      month_trading_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month_trading_ask));
  month_trading_ans_descriptor_ = file->message_type(50);
  static const int month_trading_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ans, error_),
  };
  month_trading_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_trading_ans_descriptor_,
      month_trading_ans::default_instance_,
      month_trading_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month_trading_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month_trading_ans));
  cur_fund_detail_ask_descriptor_ = file->message_type(51);
  static const int cur_fund_detail_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ask, ask_header_),
  };
  cur_fund_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_fund_detail_ask_descriptor_,
      cur_fund_detail_ask::default_instance_,
      cur_fund_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_fund_detail_ask));
  cur_fund_detail_ans_descriptor_ = file->message_type(52);
  static const int cur_fund_detail_ans_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_pay_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_withdraw_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_invest_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_guarantee_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_borrow_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_repayment_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, cur_overdue_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, error_),
  };
  cur_fund_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cur_fund_detail_ans_descriptor_,
      cur_fund_detail_ans::default_instance_,
      cur_fund_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cur_fund_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cur_fund_detail_ans));
  history_fund_detail_ask_descriptor_ = file->message_type(53);
  static const int history_fund_detail_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, key_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, flow_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, ask_header_),
  };
  history_fund_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_fund_detail_ask_descriptor_,
      history_fund_detail_ask::default_instance_,
      history_fund_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_fund_detail_ask));
  history_fund_detail_ans_descriptor_ = file->message_type(54);
  static const int history_fund_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ans, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ans, error_),
  };
  history_fund_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_fund_detail_ans_descriptor_,
      history_fund_detail_ans::default_instance_,
      history_fund_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_fund_detail_ans));
  history_fund_flow_type_ask_descriptor_ = file->message_type(55);
  static const int history_fund_flow_type_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ask, ask_header_),
  };
  history_fund_flow_type_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_fund_flow_type_ask_descriptor_,
      history_fund_flow_type_ask::default_instance_,
      history_fund_flow_type_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_fund_flow_type_ask));
  history_fund_flow_type_ans_descriptor_ = file->message_type(56);
  static const int history_fund_flow_type_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ans, fundtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ans, error_),
  };
  history_fund_flow_type_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_fund_flow_type_ans_descriptor_,
      history_fund_flow_type_ans::default_instance_,
      history_fund_flow_type_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_fund_flow_type_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_fund_flow_type_ans));
  client_versions_tendency_ask_descriptor_ = file->message_type(57);
  static const int client_versions_tendency_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, ask_header_),
  };
  client_versions_tendency_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_tendency_ask_descriptor_,
      client_versions_tendency_ask::default_instance_,
      client_versions_tendency_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_tendency_ask));
  client_versions_tendency_ans_descriptor_ = file->message_type(58);
  static const int client_versions_tendency_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ans, error_),
  };
  client_versions_tendency_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_tendency_ans_descriptor_,
      client_versions_tendency_ans::default_instance_,
      client_versions_tendency_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_tendency_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_tendency_ans));
  client_versions_distribution_ask_descriptor_ = file->message_type(59);
  static const int client_versions_distribution_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, ask_header_),
  };
  client_versions_distribution_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_distribution_ask_descriptor_,
      client_versions_distribution_ask::default_instance_,
      client_versions_distribution_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_distribution_ask));
  client_versions_distribution_ans_descriptor_ = file->message_type(60);
  static const int client_versions_distribution_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ans, error_),
  };
  client_versions_distribution_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_distribution_ans_descriptor_,
      client_versions_distribution_ans::default_instance_,
      client_versions_distribution_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_distribution_ans));
  client_versions_distribution_detail_ask_descriptor_ = file->message_type(61);
  static const int client_versions_distribution_detail_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, ask_header_),
  };
  client_versions_distribution_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_distribution_detail_ask_descriptor_,
      client_versions_distribution_detail_ask::default_instance_,
      client_versions_distribution_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_distribution_detail_ask));
  client_versions_distribution_detail_ans_descriptor_ = file->message_type(62);
  static const int client_versions_distribution_detail_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ans, error_),
  };
  client_versions_distribution_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_distribution_detail_ans_descriptor_,
      client_versions_distribution_detail_ans::default_instance_,
      client_versions_distribution_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_distribution_detail_ans));
  client_versions_distribution_detail_list_ask_descriptor_ = file->message_type(63);
  static const int client_versions_distribution_detail_list_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, ask_header_),
  };
  client_versions_distribution_detail_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_distribution_detail_list_ask_descriptor_,
      client_versions_distribution_detail_list_ask::default_instance_,
      client_versions_distribution_detail_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_distribution_detail_list_ask));
  client_versions_distribution_detail_list_ans_descriptor_ = file->message_type(64);
  static const int client_versions_distribution_detail_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ans, error_),
  };
  client_versions_distribution_detail_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_versions_distribution_detail_list_ans_descriptor_,
      client_versions_distribution_detail_list_ans::default_instance_,
      client_versions_distribution_detail_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_versions_distribution_detail_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_versions_distribution_detail_list_ans));
  start_count_analyze_ask_descriptor_ = file->message_type(65);
  static const int start_count_analyze_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, ask_header_),
  };
  start_count_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_count_analyze_ask_descriptor_,
      start_count_analyze_ask::default_instance_,
      start_count_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_count_analyze_ask));
  start_count_analyze_ans_descriptor_ = file->message_type(66);
  static const int start_count_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ans, error_),
  };
  start_count_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_count_analyze_ans_descriptor_,
      start_count_analyze_ans::default_instance_,
      start_count_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_count_analyze_ans));
  start_count_analyze_list_ask_descriptor_ = file->message_type(67);
  static const int start_count_analyze_list_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, ask_header_),
  };
  start_count_analyze_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_count_analyze_list_ask_descriptor_,
      start_count_analyze_list_ask::default_instance_,
      start_count_analyze_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_count_analyze_list_ask));
  start_count_analyze_list_ans_descriptor_ = file->message_type(68);
  static const int start_count_analyze_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ans, error_),
  };
  start_count_analyze_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      start_count_analyze_list_ans_descriptor_,
      start_count_analyze_list_ans::default_instance_,
      start_count_analyze_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(start_count_analyze_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(start_count_analyze_list_ans));
  new_add_user_analyze_ask_descriptor_ = file->message_type(69);
  static const int new_add_user_analyze_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, ask_header_),
  };
  new_add_user_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      new_add_user_analyze_ask_descriptor_,
      new_add_user_analyze_ask::default_instance_,
      new_add_user_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(new_add_user_analyze_ask));
  new_add_user_analyze_ans_descriptor_ = file->message_type(70);
  static const int new_add_user_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ans, error_),
  };
  new_add_user_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      new_add_user_analyze_ans_descriptor_,
      new_add_user_analyze_ans::default_instance_,
      new_add_user_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(new_add_user_analyze_ans));
  new_add_user_analyze_list_ask_descriptor_ = file->message_type(71);
  static const int new_add_user_analyze_list_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, ask_header_),
  };
  new_add_user_analyze_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      new_add_user_analyze_list_ask_descriptor_,
      new_add_user_analyze_list_ask::default_instance_,
      new_add_user_analyze_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(new_add_user_analyze_list_ask));
  new_add_user_analyze_list_ans_descriptor_ = file->message_type(72);
  static const int new_add_user_analyze_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ans, error_),
  };
  new_add_user_analyze_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      new_add_user_analyze_list_ans_descriptor_,
      new_add_user_analyze_list_ans::default_instance_,
      new_add_user_analyze_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_add_user_analyze_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(new_add_user_analyze_list_ans));
  active_user_analyze_ask_descriptor_ = file->message_type(73);
  static const int active_user_analyze_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, ask_header_),
  };
  active_user_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      active_user_analyze_ask_descriptor_,
      active_user_analyze_ask::default_instance_,
      active_user_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(active_user_analyze_ask));
  active_user_analyze_ans_descriptor_ = file->message_type(74);
  static const int active_user_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ans, error_),
  };
  active_user_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      active_user_analyze_ans_descriptor_,
      active_user_analyze_ans::default_instance_,
      active_user_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(active_user_analyze_ans));
  active_user_analyze_list_ask_descriptor_ = file->message_type(75);
  static const int active_user_analyze_list_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, ask_header_),
  };
  active_user_analyze_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      active_user_analyze_list_ask_descriptor_,
      active_user_analyze_list_ask::default_instance_,
      active_user_analyze_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(active_user_analyze_list_ask));
  active_user_analyze_list_ans_descriptor_ = file->message_type(76);
  static const int active_user_analyze_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ans, error_),
  };
  active_user_analyze_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      active_user_analyze_list_ans_descriptor_,
      active_user_analyze_list_ans::default_instance_,
      active_user_analyze_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(active_user_analyze_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(active_user_analyze_list_ans));
  user_freshness_analyze_ask_descriptor_ = file->message_type(77);
  static const int user_freshness_analyze_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, ask_header_),
  };
  user_freshness_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_freshness_analyze_ask_descriptor_,
      user_freshness_analyze_ask::default_instance_,
      user_freshness_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_freshness_analyze_ask));
  user_freshness_analyze_ans_descriptor_ = file->message_type(78);
  static const int user_freshness_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ans, error_),
  };
  user_freshness_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_freshness_analyze_ans_descriptor_,
      user_freshness_analyze_ans::default_instance_,
      user_freshness_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_freshness_analyze_ans));
  user_freshness_analyze_list_ask_descriptor_ = file->message_type(79);
  static const int user_freshness_analyze_list_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, ask_header_),
  };
  user_freshness_analyze_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_freshness_analyze_list_ask_descriptor_,
      user_freshness_analyze_list_ask::default_instance_,
      user_freshness_analyze_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_freshness_analyze_list_ask));
  user_freshness_analyze_list_ans_descriptor_ = file->message_type(80);
  static const int user_freshness_analyze_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ans, error_),
  };
  user_freshness_analyze_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_freshness_analyze_list_ans_descriptor_,
      user_freshness_analyze_list_ans::default_instance_,
      user_freshness_analyze_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_freshness_analyze_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_freshness_analyze_list_ans));
  user_retain_analyze_ask_descriptor_ = file->message_type(81);
  static const int user_retain_analyze_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, ask_header_),
  };
  user_retain_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_retain_analyze_ask_descriptor_,
      user_retain_analyze_ask::default_instance_,
      user_retain_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_retain_analyze_ask));
  user_retain_analyze_ans_descriptor_ = file->message_type(82);
  static const int user_retain_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ans, error_),
  };
  user_retain_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_retain_analyze_ans_descriptor_,
      user_retain_analyze_ans::default_instance_,
      user_retain_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_retain_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_retain_analyze_ans));
  use_time_analyze_ask_descriptor_ = file->message_type(83);
  static const int use_time_analyze_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ask, ask_header_),
  };
  use_time_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_time_analyze_ask_descriptor_,
      use_time_analyze_ask::default_instance_,
      use_time_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_time_analyze_ask));
  use_time_analyze_ans_descriptor_ = file->message_type(84);
  static const int use_time_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ans, error_),
  };
  use_time_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_time_analyze_ans_descriptor_,
      use_time_analyze_ans::default_instance_,
      use_time_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_time_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_time_analyze_ans));
  use_count_analyze_ask_descriptor_ = file->message_type(85);
  static const int use_count_analyze_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ask, ask_header_),
  };
  use_count_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_count_analyze_ask_descriptor_,
      use_count_analyze_ask::default_instance_,
      use_count_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_count_analyze_ask));
  use_count_analyze_ans_descriptor_ = file->message_type(86);
  static const int use_count_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ans, error_),
  };
  use_count_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_count_analyze_ans_descriptor_,
      use_count_analyze_ans::default_instance_,
      use_count_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_count_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_count_analyze_ans));
  use_interval_analyze_ask_descriptor_ = file->message_type(87);
  static const int use_interval_analyze_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ask, ask_header_),
  };
  use_interval_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_interval_analyze_ask_descriptor_,
      use_interval_analyze_ask::default_instance_,
      use_interval_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_interval_analyze_ask));
  use_interval_analyze_ans_descriptor_ = file->message_type(88);
  static const int use_interval_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ans, error_),
  };
  use_interval_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      use_interval_analyze_ans_descriptor_,
      use_interval_analyze_ans::default_instance_,
      use_interval_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(use_interval_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(use_interval_analyze_ans));
  download_src_analyze_ask_descriptor_ = file->message_type(89);
  static const int download_src_analyze_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, ask_header_),
  };
  download_src_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      download_src_analyze_ask_descriptor_,
      download_src_analyze_ask::default_instance_,
      download_src_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(download_src_analyze_ask));
  download_src_analyze_ans_descriptor_ = file->message_type(90);
  static const int download_src_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ans, error_),
  };
  download_src_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      download_src_analyze_ans_descriptor_,
      download_src_analyze_ans::default_instance_,
      download_src_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(download_src_analyze_ans));
  download_src_analyze_detail_ask_descriptor_ = file->message_type(91);
  static const int download_src_analyze_detail_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, ask_header_),
  };
  download_src_analyze_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      download_src_analyze_detail_ask_descriptor_,
      download_src_analyze_detail_ask::default_instance_,
      download_src_analyze_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(download_src_analyze_detail_ask));
  download_src_analyze_detail_ans_descriptor_ = file->message_type(92);
  static const int download_src_analyze_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ans, error_),
  };
  download_src_analyze_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      download_src_analyze_detail_ans_descriptor_,
      download_src_analyze_detail_ans::default_instance_,
      download_src_analyze_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(download_src_analyze_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(download_src_analyze_detail_ans));
  third_party_login_analyze_ask_descriptor_ = file->message_type(93);
  static const int third_party_login_analyze_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ask, ask_header_),
  };
  third_party_login_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      third_party_login_analyze_ask_descriptor_,
      third_party_login_analyze_ask::default_instance_,
      third_party_login_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(third_party_login_analyze_ask));
  third_party_login_analyze_ans_descriptor_ = file->message_type(94);
  static const int third_party_login_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ans, error_),
  };
  third_party_login_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      third_party_login_analyze_ans_descriptor_,
      third_party_login_analyze_ans::default_instance_,
      third_party_login_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(third_party_login_analyze_ans));
  third_party_login_analyze_list_ask_descriptor_ = file->message_type(95);
  static const int third_party_login_analyze_list_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, ask_header_),
  };
  third_party_login_analyze_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      third_party_login_analyze_list_ask_descriptor_,
      third_party_login_analyze_list_ask::default_instance_,
      third_party_login_analyze_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(third_party_login_analyze_list_ask));
  third_party_login_analyze_list_ans_descriptor_ = file->message_type(96);
  static const int third_party_login_analyze_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ans, error_),
  };
  third_party_login_analyze_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      third_party_login_analyze_list_ans_descriptor_,
      third_party_login_analyze_list_ans::default_instance_,
      third_party_login_analyze_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_party_login_analyze_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(third_party_login_analyze_list_ans));
  operation_report_ask_descriptor_ = file->message_type(97);
  static const int operation_report_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ask, ask_header_),
  };
  operation_report_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operation_report_ask_descriptor_,
      operation_report_ask::default_instance_,
      operation_report_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operation_report_ask));
  operation_report_info_descriptor_ = file->message_type(98);
  static const int operation_report_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_info, report_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_info, total_num_),
  };
  operation_report_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operation_report_info_descriptor_,
      operation_report_info::default_instance_,
      operation_report_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operation_report_info));
  operation_report_ans_descriptor_ = file->message_type(99);
  static const int operation_report_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ans, error_),
  };
  operation_report_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operation_report_ans_descriptor_,
      operation_report_ans::default_instance_,
      operation_report_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operation_report_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operation_report_ans));
  doc_row_descriptor_ = file->message_type(100);
  static const int doc_row_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_row, value_),
  };
  doc_row_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      doc_row_descriptor_,
      doc_row::default_instance_,
      doc_row_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_row, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc_row, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(doc_row));
  user_certification_list_row_descriptor_ = file->message_type(101);
  static const int user_certification_list_row_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, page2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, page3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, access_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, submit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, percent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, percent2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, percent3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, percent4_),
  };
  user_certification_list_row_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_certification_list_row_descriptor_,
      user_certification_list_row::default_instance_,
      user_certification_list_row_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_list_row, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_certification_list_row));
  user_certification_ask_descriptor_ = file->message_type(102);
  static const int user_certification_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ask, certification_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ask, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ask, end_time_),
  };
  user_certification_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_certification_ask_descriptor_,
      user_certification_ask::default_instance_,
      user_certification_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_certification_ask));
  user_certification_ans_descriptor_ = file->message_type(103);
  static const int user_certification_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ans, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ans, result_),
  };
  user_certification_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_certification_ans_descriptor_,
      user_certification_ans::default_instance_,
      user_certification_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_certification_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_certification_ans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ODP_5fmain_5fframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pay_Withdraw_descriptor_, &Pay_Withdraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    province_under_count_descriptor_, &province_under_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_bid_count_descriptor_, &city_bid_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unfinished_bid_info_descriptor_, &unfinished_bid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_distribution_descriptor_, &user_distribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_trading_volume_descriptor_, &cur_trading_volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_province_trading_volume_descriptor_, &cur_province_trading_volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_registration_volume_descriptor_, &month_registration_volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_trading_count_descriptor_, &cur_trading_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_trading_volume_descriptor_, &month_trading_volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    registration_info_descriptor_, &registration_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    charge_info_descriptor_, &charge_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    real_fund_detail_descriptor_, &real_fund_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fund_flow_type_descriptor_, &fund_flow_type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_acount_info_descriptor_, &user_acount_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    top_ten_user_acount_info_descriptor_, &top_ten_user_acount_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_count_info_descriptor_, &start_count_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_analyze_info_descriptor_, &user_analyze_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_freshness_info_descriptor_, &user_freshness_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_retain_rate_info_descriptor_, &user_retain_rate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_retain_info_descriptor_, &user_retain_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    app_version_statistics_descriptor_, &app_version_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    app_version_detail_descriptor_, &app_version_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    download_src_user_acount_info_descriptor_, &download_src_user_acount_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    download_src_detail_descriptor_, &download_src_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_time_info_descriptor_, &use_time_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_count_info_descriptor_, &use_count_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_interval_info_descriptor_, &use_interval_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    third_party_login_info_descriptor_, &third_party_login_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pay_Withdraw_ask_descriptor_, &Pay_Withdraw_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pay_Withdraw_ans_descriptor_, &Pay_Withdraw_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unfinished_bid_ask_descriptor_, &unfinished_bid_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unfinished_bid_ans_descriptor_, &unfinished_bid_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_bid_count_ask_descriptor_, &city_bid_count_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_bid_count_ans_descriptor_, &city_bid_count_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_distribution_ask_descriptor_, &user_distribution_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_distribution_ans_descriptor_, &user_distribution_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_trading_volume_ask_descriptor_, &cur_trading_volume_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_trading_volume_ans_descriptor_, &cur_trading_volume_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_province_trading_volume_ask_descriptor_, &cur_province_trading_volume_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_province_trading_volume_ans_descriptor_, &cur_province_trading_volume_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Real_time_registration_ask_descriptor_, &Real_time_registration_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Real_time_registration_ans_descriptor_, &Real_time_registration_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_registration_ask_descriptor_, &month_registration_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_registration_ans_descriptor_, &month_registration_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    real_time_charge_ask_descriptor_, &real_time_charge_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    real_time_charge_ans_descriptor_, &real_time_charge_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_trading_count_ask_descriptor_, &cur_trading_count_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_trading_count_ans_descriptor_, &cur_trading_count_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_trading_ask_descriptor_, &month_trading_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_trading_ans_descriptor_, &month_trading_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_fund_detail_ask_descriptor_, &cur_fund_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cur_fund_detail_ans_descriptor_, &cur_fund_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_fund_detail_ask_descriptor_, &history_fund_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_fund_detail_ans_descriptor_, &history_fund_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_fund_flow_type_ask_descriptor_, &history_fund_flow_type_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_fund_flow_type_ans_descriptor_, &history_fund_flow_type_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_tendency_ask_descriptor_, &client_versions_tendency_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_tendency_ans_descriptor_, &client_versions_tendency_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_distribution_ask_descriptor_, &client_versions_distribution_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_distribution_ans_descriptor_, &client_versions_distribution_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_distribution_detail_ask_descriptor_, &client_versions_distribution_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_distribution_detail_ans_descriptor_, &client_versions_distribution_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_distribution_detail_list_ask_descriptor_, &client_versions_distribution_detail_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_versions_distribution_detail_list_ans_descriptor_, &client_versions_distribution_detail_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_count_analyze_ask_descriptor_, &start_count_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_count_analyze_ans_descriptor_, &start_count_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_count_analyze_list_ask_descriptor_, &start_count_analyze_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    start_count_analyze_list_ans_descriptor_, &start_count_analyze_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    new_add_user_analyze_ask_descriptor_, &new_add_user_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    new_add_user_analyze_ans_descriptor_, &new_add_user_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    new_add_user_analyze_list_ask_descriptor_, &new_add_user_analyze_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    new_add_user_analyze_list_ans_descriptor_, &new_add_user_analyze_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    active_user_analyze_ask_descriptor_, &active_user_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    active_user_analyze_ans_descriptor_, &active_user_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    active_user_analyze_list_ask_descriptor_, &active_user_analyze_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    active_user_analyze_list_ans_descriptor_, &active_user_analyze_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_freshness_analyze_ask_descriptor_, &user_freshness_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_freshness_analyze_ans_descriptor_, &user_freshness_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_freshness_analyze_list_ask_descriptor_, &user_freshness_analyze_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_freshness_analyze_list_ans_descriptor_, &user_freshness_analyze_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_retain_analyze_ask_descriptor_, &user_retain_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_retain_analyze_ans_descriptor_, &user_retain_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_time_analyze_ask_descriptor_, &use_time_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_time_analyze_ans_descriptor_, &use_time_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_count_analyze_ask_descriptor_, &use_count_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_count_analyze_ans_descriptor_, &use_count_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_interval_analyze_ask_descriptor_, &use_interval_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    use_interval_analyze_ans_descriptor_, &use_interval_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    download_src_analyze_ask_descriptor_, &download_src_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    download_src_analyze_ans_descriptor_, &download_src_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    download_src_analyze_detail_ask_descriptor_, &download_src_analyze_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    download_src_analyze_detail_ans_descriptor_, &download_src_analyze_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    third_party_login_analyze_ask_descriptor_, &third_party_login_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    third_party_login_analyze_ans_descriptor_, &third_party_login_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    third_party_login_analyze_list_ask_descriptor_, &third_party_login_analyze_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    third_party_login_analyze_list_ans_descriptor_, &third_party_login_analyze_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operation_report_ask_descriptor_, &operation_report_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operation_report_info_descriptor_, &operation_report_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operation_report_ans_descriptor_, &operation_report_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    doc_row_descriptor_, &doc_row::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_certification_list_row_descriptor_, &user_certification_list_row::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_certification_ask_descriptor_, &user_certification_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_certification_ans_descriptor_, &user_certification_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ODP_5fmain_5fframe_2eproto() {
  delete Pay_Withdraw::default_instance_;
  delete Pay_Withdraw_reflection_;
  delete province_under_count::default_instance_;
  delete province_under_count_reflection_;
  delete city_bid_count::default_instance_;
  delete city_bid_count_reflection_;
  delete unfinished_bid_info::default_instance_;
  delete unfinished_bid_info_reflection_;
  delete user_distribution::default_instance_;
  delete user_distribution_reflection_;
  delete cur_trading_volume::default_instance_;
  delete cur_trading_volume_reflection_;
  delete cur_province_trading_volume::default_instance_;
  delete cur_province_trading_volume_reflection_;
  delete month_registration_volume::default_instance_;
  delete month_registration_volume_reflection_;
  delete cur_trading_count::default_instance_;
  delete cur_trading_count_reflection_;
  delete month_trading_volume::default_instance_;
  delete month_trading_volume_reflection_;
  delete registration_info::default_instance_;
  delete registration_info_reflection_;
  delete charge_info::default_instance_;
  delete charge_info_reflection_;
  delete real_fund_detail::default_instance_;
  delete real_fund_detail_reflection_;
  delete fund_flow_type::default_instance_;
  delete fund_flow_type_reflection_;
  delete user_acount_info::default_instance_;
  delete user_acount_info_reflection_;
  delete top_ten_user_acount_info::default_instance_;
  delete top_ten_user_acount_info_reflection_;
  delete start_count_info::default_instance_;
  delete start_count_info_reflection_;
  delete user_analyze_info::default_instance_;
  delete user_analyze_info_reflection_;
  delete user_freshness_info::default_instance_;
  delete user_freshness_info_reflection_;
  delete user_retain_rate_info::default_instance_;
  delete user_retain_rate_info_reflection_;
  delete user_retain_info::default_instance_;
  delete user_retain_info_reflection_;
  delete app_version_statistics::default_instance_;
  delete app_version_statistics_reflection_;
  delete app_version_detail::default_instance_;
  delete app_version_detail_reflection_;
  delete download_src_user_acount_info::default_instance_;
  delete download_src_user_acount_info_reflection_;
  delete download_src_detail::default_instance_;
  delete download_src_detail_reflection_;
  delete use_time_info::default_instance_;
  delete use_time_info_reflection_;
  delete use_count_info::default_instance_;
  delete use_count_info_reflection_;
  delete use_interval_info::default_instance_;
  delete use_interval_info_reflection_;
  delete third_party_login_info::default_instance_;
  delete third_party_login_info_reflection_;
  delete Pay_Withdraw_ask::default_instance_;
  delete Pay_Withdraw_ask_reflection_;
  delete Pay_Withdraw_ans::default_instance_;
  delete Pay_Withdraw_ans_reflection_;
  delete unfinished_bid_ask::default_instance_;
  delete unfinished_bid_ask_reflection_;
  delete unfinished_bid_ans::default_instance_;
  delete unfinished_bid_ans_reflection_;
  delete city_bid_count_ask::default_instance_;
  delete city_bid_count_ask_reflection_;
  delete city_bid_count_ans::default_instance_;
  delete city_bid_count_ans_reflection_;
  delete user_distribution_ask::default_instance_;
  delete user_distribution_ask_reflection_;
  delete user_distribution_ans::default_instance_;
  delete user_distribution_ans_reflection_;
  delete cur_trading_volume_ask::default_instance_;
  delete cur_trading_volume_ask_reflection_;
  delete cur_trading_volume_ans::default_instance_;
  delete cur_trading_volume_ans_reflection_;
  delete cur_province_trading_volume_ask::default_instance_;
  delete cur_province_trading_volume_ask_reflection_;
  delete cur_province_trading_volume_ans::default_instance_;
  delete cur_province_trading_volume_ans_reflection_;
  delete Real_time_registration_ask::default_instance_;
  delete Real_time_registration_ask_reflection_;
  delete Real_time_registration_ans::default_instance_;
  delete Real_time_registration_ans_reflection_;
  delete month_registration_ask::default_instance_;
  delete month_registration_ask_reflection_;
  delete month_registration_ans::default_instance_;
  delete month_registration_ans_reflection_;
  delete real_time_charge_ask::default_instance_;
  delete real_time_charge_ask_reflection_;
  delete real_time_charge_ans::default_instance_;
  delete real_time_charge_ans_reflection_;
  delete cur_trading_count_ask::default_instance_;
  delete cur_trading_count_ask_reflection_;
  delete cur_trading_count_ans::default_instance_;
  delete cur_trading_count_ans_reflection_;
  delete month_trading_ask::default_instance_;
  delete month_trading_ask_reflection_;
  delete month_trading_ans::default_instance_;
  delete month_trading_ans_reflection_;
  delete cur_fund_detail_ask::default_instance_;
  delete cur_fund_detail_ask_reflection_;
  delete cur_fund_detail_ans::default_instance_;
  delete cur_fund_detail_ans_reflection_;
  delete history_fund_detail_ask::default_instance_;
  delete history_fund_detail_ask_reflection_;
  delete history_fund_detail_ans::default_instance_;
  delete history_fund_detail_ans_reflection_;
  delete history_fund_flow_type_ask::default_instance_;
  delete history_fund_flow_type_ask_reflection_;
  delete history_fund_flow_type_ans::default_instance_;
  delete history_fund_flow_type_ans_reflection_;
  delete client_versions_tendency_ask::default_instance_;
  delete client_versions_tendency_ask_reflection_;
  delete client_versions_tendency_ans::default_instance_;
  delete client_versions_tendency_ans_reflection_;
  delete client_versions_distribution_ask::default_instance_;
  delete client_versions_distribution_ask_reflection_;
  delete client_versions_distribution_ans::default_instance_;
  delete client_versions_distribution_ans_reflection_;
  delete client_versions_distribution_detail_ask::default_instance_;
  delete client_versions_distribution_detail_ask_reflection_;
  delete client_versions_distribution_detail_ans::default_instance_;
  delete client_versions_distribution_detail_ans_reflection_;
  delete client_versions_distribution_detail_list_ask::default_instance_;
  delete client_versions_distribution_detail_list_ask_reflection_;
  delete client_versions_distribution_detail_list_ans::default_instance_;
  delete client_versions_distribution_detail_list_ans_reflection_;
  delete start_count_analyze_ask::default_instance_;
  delete start_count_analyze_ask_reflection_;
  delete start_count_analyze_ans::default_instance_;
  delete start_count_analyze_ans_reflection_;
  delete start_count_analyze_list_ask::default_instance_;
  delete start_count_analyze_list_ask_reflection_;
  delete start_count_analyze_list_ans::default_instance_;
  delete start_count_analyze_list_ans_reflection_;
  delete new_add_user_analyze_ask::default_instance_;
  delete new_add_user_analyze_ask_reflection_;
  delete new_add_user_analyze_ans::default_instance_;
  delete new_add_user_analyze_ans_reflection_;
  delete new_add_user_analyze_list_ask::default_instance_;
  delete new_add_user_analyze_list_ask_reflection_;
  delete new_add_user_analyze_list_ans::default_instance_;
  delete new_add_user_analyze_list_ans_reflection_;
  delete active_user_analyze_ask::default_instance_;
  delete active_user_analyze_ask_reflection_;
  delete active_user_analyze_ans::default_instance_;
  delete active_user_analyze_ans_reflection_;
  delete active_user_analyze_list_ask::default_instance_;
  delete active_user_analyze_list_ask_reflection_;
  delete active_user_analyze_list_ans::default_instance_;
  delete active_user_analyze_list_ans_reflection_;
  delete user_freshness_analyze_ask::default_instance_;
  delete user_freshness_analyze_ask_reflection_;
  delete user_freshness_analyze_ans::default_instance_;
  delete user_freshness_analyze_ans_reflection_;
  delete user_freshness_analyze_list_ask::default_instance_;
  delete user_freshness_analyze_list_ask_reflection_;
  delete user_freshness_analyze_list_ans::default_instance_;
  delete user_freshness_analyze_list_ans_reflection_;
  delete user_retain_analyze_ask::default_instance_;
  delete user_retain_analyze_ask_reflection_;
  delete user_retain_analyze_ans::default_instance_;
  delete user_retain_analyze_ans_reflection_;
  delete use_time_analyze_ask::default_instance_;
  delete use_time_analyze_ask_reflection_;
  delete use_time_analyze_ans::default_instance_;
  delete use_time_analyze_ans_reflection_;
  delete use_count_analyze_ask::default_instance_;
  delete use_count_analyze_ask_reflection_;
  delete use_count_analyze_ans::default_instance_;
  delete use_count_analyze_ans_reflection_;
  delete use_interval_analyze_ask::default_instance_;
  delete use_interval_analyze_ask_reflection_;
  delete use_interval_analyze_ans::default_instance_;
  delete use_interval_analyze_ans_reflection_;
  delete download_src_analyze_ask::default_instance_;
  delete download_src_analyze_ask_reflection_;
  delete download_src_analyze_ans::default_instance_;
  delete download_src_analyze_ans_reflection_;
  delete download_src_analyze_detail_ask::default_instance_;
  delete download_src_analyze_detail_ask_reflection_;
  delete download_src_analyze_detail_ans::default_instance_;
  delete download_src_analyze_detail_ans_reflection_;
  delete third_party_login_analyze_ask::default_instance_;
  delete third_party_login_analyze_ask_reflection_;
  delete third_party_login_analyze_ans::default_instance_;
  delete third_party_login_analyze_ans_reflection_;
  delete third_party_login_analyze_list_ask::default_instance_;
  delete third_party_login_analyze_list_ask_reflection_;
  delete third_party_login_analyze_list_ans::default_instance_;
  delete third_party_login_analyze_list_ans_reflection_;
  delete operation_report_ask::default_instance_;
  delete operation_report_ask_reflection_;
  delete operation_report_info::default_instance_;
  delete operation_report_info_reflection_;
  delete operation_report_ans::default_instance_;
  delete operation_report_ans_reflection_;
  delete doc_row::default_instance_;
  delete doc_row_reflection_;
  delete user_certification_list_row::default_instance_;
  delete user_certification_list_row_reflection_;
  delete user_certification_ask::default_instance_;
  delete user_certification_ask_reflection_;
  delete user_certification_ans::default_instance_;
  delete user_certification_ans_reflection_;
}

void protobuf_AddDesc_ODP_5fmain_5fframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ODP_main_frame.proto\022\016ODP_main_frame\032\014"
    "common.proto\"M\n\014Pay_Withdraw\022\020\n\010cur_date"
    "\030\001 \001(\014\022\022\n\npay_amount\030\002 \001(\001\022\027\n\017withdraw_a"
    "mount\030\003 \001(\001\"B\n\024province_under_count\022\025\n\rp"
    "rovince_name\030\001 \001(\014\022\023\n\013under_count\030\002 \001(\005\""
    "6\n\016city_bid_count\022\021\n\tcity_name\030\001 \001(\014\022\021\n\t"
    "bid_count\030\002 \001(\005\"@\n\023unfinished_bid_info\022\021"
    "\n\tcity_name\030\001 \001(\014\022\026\n\016role_city_name\030\002 \003("
    "\014\":\n\021user_distribution\022\021\n\tcity_name\030\001 \001("
    "\014\022\022\n\nuser_count\030\002 \001(\005\":\n\022cur_trading_vol"
    "ume\022\014\n\004hour\030\001 \001(\014\022\026\n\016trading_volume\030\002 \001("
    "\002\"L\n\033cur_province_trading_volume\022\025\n\rprov"
    "ince_name\030\001 \001(\014\022\026\n\016trading_volume\030\002 \001(\005\""
    "F\n\031month_registration_volume\022\022\n\nyear_mon"
    "th\030\001 \001(\014\022\025\n\rregist_volume\030\002 \001(\005\"8\n\021cur_t"
    "rading_count\022\014\n\004hour\030\001 \001(\014\022\025\n\rtrading_co"
    "unt\030\002 \001(\005\"B\n\024month_trading_volume\022\022\n\nyea"
    "r_month\030\001 \001(\014\022\026\n\016trading_volume\030\002 \001(\002\"5\n"
    "\021registration_info\022\021\n\tcity_name\030\001 \001(\014\022\r\n"
    "\005count\030\002 \001(\005\"7\n\013charge_info\022\021\n\tcity_name"
    "\030\001 \001(\014\022\025\n\rcharge_amount\030\002 \001(\002\"\354\001\n\020real_f"
    "und_detail\022\032\n\022fund_serial_number\030\001 \001(\014\022\030"
    "\n\020fund_serial_name\030\002 \001(\014\022\021\n\tuser_name\030\003 "
    "\001(\014\022\r\n\005telno\030\004 \001(\014\022\024\n\014to_user_name\030\005 \001(\014"
    "\022\030\n\020fund_serial_type\030\006 \001(\014\022\023\n\013fund_amoun"
    "t\030\007 \001(\014\022\023\n\013fund_status\030\010 \001(\014\022\021\n\tfund_des"
    "c\030\t \001(\014\022\023\n\013update_time\030\n \001(\014\"0\n\016fund_flo"
    "w_type\022\017\n\007type_id\030\001 \001(\014\022\r\n\005title\030\002 \001(\014\":"
    "\n\020user_acount_info\022\023\n\013user_acount\030\001 \001(\005\022"
    "\021\n\tdate_tick\030\002 \001(\014\"_\n\030top_ten_user_acoun"
    "t_info\022\023\n\013app_version\030\001 \001(\014\022.\n\004info\030\002 \003("
    "\0132 .ODP_main_frame.user_acount_info\"T\n\020s"
    "tart_count_info\022\023\n\013start_count\030\001 \001(\005\022\030\n\020"
    "start_count_rate\030\002 \001(\002\022\021\n\tdate_tick\030\003 \001("
    "\014\"S\n\021user_analyze_info\022\022\n\nuser_count\030\001 \001"
    "(\005\022\027\n\017user_count_rate\030\002 \001(\002\022\021\n\tdate_tick"
    "\030\003 \001(\014\"{\n\023user_freshness_info\022\032\n\022new_add"
    "_user_count\030\001 \001(\005\022\031\n\021active_user_count\030\002"
    " \001(\005\022\032\n\022new_add_count_rate\030\003 \001(\002\022\021\n\tdate"
    "_tick\030\004 \001(\014\"\265\001\n\025user_retain_rate_info\022\016\n"
    "\006oneday\030\001 \001(\002\022\016\n\006twoday\030\002 \001(\002\022\020\n\010threeda"
    "y\030\003 \001(\002\022\017\n\007fourday\030\004 \001(\002\022\017\n\007fiveday\030\005 \001("
    "\002\022\016\n\006sixday\030\006 \001(\002\022\020\n\010sevenday\030\007 \001(\002\022\023\n\013f"
    "ourteenday\030\016 \001(\002\022\021\n\tthirtyday\030\036 \001(\002\"\201\001\n\020"
    "user_retain_info\022\024\n\014new_add_user\030\001 \001(\005\022\?"
    "\n\020user_retain_rate\030\002 \001(\0132%.ODP_main_fram"
    "e.user_retain_rate_info\022\026\n\016first_use_dat"
    "e\030\003 \001(\014\"\370\002\n\026app_version_statistics\022\023\n\013ap"
    "p_version\030\001 \001(\014\022\031\n\021total_user_acount\030\002 \001"
    "(\005\022\027\n\017total_user_rate\030\003 \001(\002\022\033\n\023new_add_u"
    "ser_acount\030\004 \001(\005\022\031\n\021new_add_user_rate\030\005 "
    "\001(\002\022\033\n\023upgrade_user_acount\030\006 \001(\005\022\031\n\021upgr"
    "ade_user_rate\030\007 \001(\002\022\037\n\027new_upgrade_user_"
    "acount\030\010 \001(\005\022\035\n\025new_upgrade_user_rate\030\t "
    "\001(\002\022\032\n\022active_user_acount\030\n \001(\005\022\030\n\020activ"
    "e_user_rate\030\013 \001(\002\022\024\n\014start_acount\030\014 \001(\005\022"
    "\031\n\021start_acount_rate\030\r \001(\002\"\262\001\n\022app_versi"
    "on_detail\022\021\n\tdate_tick\030\001 \001(\014\022\033\n\023new_add_"
    "user_acount\030\002 \001(\005\022\033\n\023upgrade_user_acount"
    "\030\003 \001(\005\022\032\n\022active_user_acount\030\004 \001(\005\022\035\n\025ac"
    "umulate_user_acount\030\005 \001(\005\022\024\n\014start_acoun"
    "t\030\006 \001(\005\"a\n\035download_src_user_acount_info"
    "\022\020\n\010src_name\030\001 \001(\014\022.\n\004info\030\002 \003(\0132 .ODP_m"
    "ain_frame.user_acount_info\"\336\001\n\023download_"
    "src_detail\022\020\n\010src_name\030\001 \001(\014\022\033\n\023new_add_"
    "user_acount\030\002 \001(\005\022 \n\030new_add_user_acount"
    "_rate\030\003 \001(\002\022\032\n\022active_user_acount\030\004 \001(\005\022"
    "\037\n\027active_user_acount_rate\030\005 \001(\002\022\031\n\021tota"
    "l_user_acount\030\006 \001(\005\022\036\n\026total_user_acount"
    "_rate\030\007 \001(\002\"K\n\ruse_time_info\022\021\n\ttime_tic"
    "k\030\001 \001(\014\022\023\n\013start_count\030\002 \001(\005\022\022\n\nstart_ra"
    "te\030\003 \001(\002\"Q\n\016use_count_info\022\022\n\ncount_tick"
    "\030\001 \001(\014\022\022\n\nuser_count\030\002 \001(\005\022\027\n\017user_count"
    "_rate\030\003 \001(\002\"Y\n\021use_interval_info\022\025\n\rinte"
    "rval_tick\030\001 \001(\014\022\023\n\013start_count\030\002 \001(\005\022\030\n\020"
    "start_count_rate\030\003 \001(\002\"\245\001\n\026third_party_l"
    "ogin_info\022\025\n\rplatform_name\030\001 \001(\014\022\032\n\022new_"
    "add_user_count\030\002 \001(\005\022\037\n\027new_add_user_cou"
    "nt_rate\030\003 \001(\002\022\030\n\020total_user_count\030\004 \001(\005\022"
    "\035\n\025total_user_count_rate\030\005 \001(\002\"g\n\020Pay_Wi"
    "thdraw_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_da"
    "te\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132\031.common.co"
    "mmon_ask_header\"l\n\020Pay_Withdraw_ans\0226\n\020c"
    "ur_pay_withdraw\030\001 \003(\0132\034.ODP_main_frame.P"
    "ay_Withdraw\022 \n\005error\030\002 \001(\0132\021.common.erro"
    "rinfo\"R\n\022unfinished_bid_ask\022\r\n\005event\030\001 \001"
    "(\005\022-\n\nask_header\030\002 \001(\0132\031.common.common_a"
    "sk_header\"i\n\022unfinished_bid_ans\0221\n\004info\030"
    "\001 \003(\0132#.ODP_main_frame.unfinished_bid_in"
    "fo\022 \n\005error\030\002 \001(\0132\021.common.errorinfo\"W\n\022"
    "city_bid_count_ask\022\022\n\nbid_status\030\001 \001(\005\022-"
    "\n\nask_header\030\002 \001(\0132\031.common.common_ask_h"
    "eader\"j\n\022city_bid_count_ans\0222\n\ncount_inf"
    "o\030\001 \003(\0132\036.ODP_main_frame.city_bid_count\022"
    " \n\005error\030\002 \001(\0132\021.common.errorinfo\"[\n\025use"
    "r_distribution_ask\022\023\n\013user_status\030\001 \001(\005\022"
    "-\n\nask_header\030\002 \001(\0132\031.common.common_ask_"
    "header\"j\n\025user_distribution_ans\022/\n\004info\030"
    "\001 \003(\0132!.ODP_main_frame.user_distribution"
    "\022 \n\005error\030\002 \001(\0132\021.common.errorinfo\"u\n\026cu"
    "r_trading_volume_ask\022\026\n\016start_datetime\030\001"
    " \001(\014\022\024\n\014end_datetime\030\002 \001(\014\022-\n\nask_header"
    "\030\003 \001(\0132\031.common.common_ask_header\"l\n\026cur"
    "_trading_volume_ans\0220\n\004info\030\001 \003(\0132\".ODP_"
    "main_frame.cur_trading_volume\022 \n\005error\030\002"
    " \001(\0132\021.common.errorinfo\"P\n\037cur_province_"
    "trading_volume_ask\022-\n\nask_header\030\001 \001(\0132\031"
    ".common.common_ask_header\"~\n\037cur_provinc"
    "e_trading_volume_ans\0229\n\004info\030\001 \003(\0132+.ODP"
    "_main_frame.cur_province_trading_volume\022"
    " \n\005error\030\002 \001(\0132\021.common.errorinfo\"K\n\032Rea"
    "l_time_registration_ask\022-\n\nask_header\030\001 "
    "\001(\0132\031.common.common_ask_header\"o\n\032Real_t"
    "ime_registration_ans\022/\n\004info\030\001 \003(\0132!.ODP"
    "_main_frame.registration_info\022 \n\005error\030\002"
    " \001(\0132\021.common.errorinfo\"m\n\026month_registr"
    "ation_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_dat"
    "e\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132\031.common.com"
    "mon_ask_header\"s\n\026month_registration_ans"
    "\0227\n\004info\030\001 \003(\0132).ODP_main_frame.month_re"
    "gistration_volume\022 \n\005error\030\002 \001(\0132\021.commo"
    "n.errorinfo\"E\n\024real_time_charge_ask\022-\n\na"
    "sk_header\030\001 \001(\0132\031.common.common_ask_head"
    "er\"c\n\024real_time_charge_ans\022)\n\004info\030\001 \003(\013"
    "2\033.ODP_main_frame.charge_info\022 \n\005error\030\002"
    " \001(\0132\021.common.errorinfo\"t\n\025cur_trading_c"
    "ount_ask\022\026\n\016start_datetime\030\001 \001(\014\022\024\n\014end_"
    "datetime\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132\031.com"
    "mon.common_ask_header\"j\n\025cur_trading_cou"
    "nt_ans\022/\n\004info\030\001 \003(\0132!.ODP_main_frame.cu"
    "r_trading_count\022 \n\005error\030\002 \001(\0132\021.common."
    "errorinfo\"h\n\021month_trading_ask\022\022\n\nstart_"
    "date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022-\n\nask_head"
    "er\030\003 \001(\0132\031.common.common_ask_header\"i\n\021m"
    "onth_trading_ans\0222\n\004info\030\001 \003(\0132$.ODP_mai"
    "n_frame.month_trading_volume\022 \n\005error\030\002 "
    "\001(\0132\021.common.errorinfo\"D\n\023cur_fund_detai"
    "l_ask\022-\n\nask_header\030\001 \001(\0132\031.common.commo"
    "n_ask_header\"\254\002\n\023cur_fund_detail_ans\022\026\n\016"
    "cur_pay_amount\030\001 \001(\002\022\033\n\023cur_withdraw_amo"
    "unt\030\002 \001(\002\022\031\n\021cur_invest_amount\030\003 \001(\002\022\034\n\024"
    "cur_guarantee_amount\030\004 \001(\002\022\031\n\021cur_borrow"
    "_amount\030\005 \001(\002\022\034\n\024cur_repayment_amount\030\006 "
    "\001(\002\022\032\n\022cur_overdue_amount\030\007 \001(\002\0220\n\006detai"
    "l\030\010 \003(\0132 .ODP_main_frame.real_fund_detai"
    "l\022 \n\005error\030\t \001(\0132\021.common.errorinfo\"\267\001\n\027"
    "history_fund_detail_ask\022\022\n\nstart_date\030\001 "
    "\001(\014\022\020\n\010end_date\030\002 \001(\014\022\020\n\010key_info\030\003 \001(\014\022"
    "\021\n\tflow_type\030\004 \001(\014\022\020\n\010page_num\030\005 \001(\005\022\020\n\010"
    "cur_page\030\006 \001(\005\022-\n\nask_header\030\007 \001(\0132\031.com"
    "mon.common_ask_header\"\203\001\n\027history_fund_d"
    "etail_ans\022\024\n\014total_number\030\001 \001(\005\0220\n\006detai"
    "l\030\002 \003(\0132 .ODP_main_frame.real_fund_detai"
    "l\022 \n\005error\030\003 \001(\0132\021.common.errorinfo\"K\n\032h"
    "istory_fund_flow_type_ask\022-\n\nask_header\030"
    "\001 \001(\0132\031.common.common_ask_header\"p\n\032hist"
    "ory_fund_flow_type_ans\0220\n\010fundtype\030\001 \003(\013"
    "2\036.ODP_main_frame.fund_flow_type\022 \n\005erro"
    "r\030\002 \001(\0132\021.common.errorinfo\"\232\001\n\034client_ve"
    "rsions_tendency_ask\022\017\n\007os_type\030\001 \001(\005\022\022\n\n"
    "start_date\030\002 \001(\014\022\020\n\010end_date\030\003 \001(\014\022\024\n\014re"
    "quest_type\030\004 \001(\005\022-\n\nask_header\030\005 \001(\0132\031.c"
    "ommon.common_ask_header\"x\n\034client_versio"
    "ns_tendency_ans\0226\n\004info\030\001 \003(\0132(.ODP_main"
    "_frame.top_ten_user_acount_info\022 \n\005error"
    "\030\002 \001(\0132\021.common.errorinfo\"\254\001\n client_ver"
    "sions_distribution_ask\022\017\n\007os_type\030\001 \001(\005\022"
    "\022\n\nstart_date\030\002 \001(\014\022\020\n\010end_date\030\003 \001(\014\022\020\n"
    "\010page_num\030\004 \001(\005\022\020\n\010cur_page\030\005 \001(\005\022-\n\nask"
    "_header\030\006 \001(\0132\031.common.common_ask_header"
    "\"\220\001\n client_versions_distribution_ans\022\024\n"
    "\014total_number\030\001 \001(\005\0224\n\004info\030\002 \003(\0132&.ODP_"
    "main_frame.app_version_statistics\022 \n\005err"
    "or\030\003 \001(\0132\021.common.errorinfo\"\275\001\n\'client_v"
    "ersions_distribution_detail_ask\022\022\n\nstart"
    "_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\022\n\nos_vers"
    "ion\030\003 \001(\014\022\023\n\013app_version\030\004 \001(\014\022\024\n\014reques"
    "t_type\030\005 \001(\005\022-\n\nask_header\030\006 \001(\0132\031.commo"
    "n.common_ask_header\"{\n\'client_versions_d"
    "istribution_detail_ans\022.\n\004info\030\001 \003(\0132 .O"
    "DP_main_frame.user_acount_info\022 \n\005error\030"
    "\002 \001(\0132\021.common.errorinfo\"\320\001\n,client_vers"
    "ions_distribution_detail_list_ask\022\022\n\nsta"
    "rt_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\022\n\nos_ve"
    "rsion\030\003 \001(\014\022\023\n\013app_version\030\004 \001(\014\022\020\n\010page"
    "_num\030\005 \001(\005\022\020\n\010cur_page\030\006 \001(\005\022-\n\nask_head"
    "er\030\007 \001(\0132\031.common.common_ask_header\"\230\001\n,"
    "client_versions_distribution_detail_list"
    "_ans\022\024\n\014total_number\030\001 \001(\005\0220\n\004info\030\002 \003(\013"
    "2\".ODP_main_frame.app_version_detail\022 \n\005"
    "error\030\003 \001(\0132\021.common.errorinfo\"\230\001\n\027start"
    "_count_analyze_ask\022\022\n\nstart_date\030\001 \001(\014\022\020"
    "\n\010end_date\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014"
    "request_type\030\004 \001(\005\022-\n\nask_header\030\005 \001(\0132\031"
    ".common.common_ask_header\"k\n\027start_count"
    "_analyze_ans\022.\n\004info\030\001 \003(\0132 .ODP_main_fr"
    "ame.start_count_info\022 \n\005error\030\002 \001(\0132\021.co"
    "mmon.errorinfo\"\301\001\n\034start_count_analyze_l"
    "ist_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030"
    "\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014request_typ"
    "e\030\004 \001(\005\022\020\n\010page_num\030\005 \001(\005\022\020\n\010cur_page\030\006 "
    "\001(\005\022-\n\nask_header\030\007 \001(\0132\031.common.common_"
    "ask_header\"\206\001\n\034start_count_analyze_list_"
    "ans\022\024\n\014total_number\030\001 \001(\005\022.\n\004info\030\002 \003(\0132"
    " .ODP_main_frame.start_count_info\022 \n\005err"
    "or\030\003 \001(\0132\021.common.errorinfo\"\231\001\n\030new_add_"
    "user_analyze_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010"
    "end_date\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014re"
    "quest_type\030\004 \001(\005\022-\n\nask_header\030\005 \001(\0132\031.c"
    "ommon.common_ask_header\"m\n\030new_add_user_"
    "analyze_ans\022/\n\004info\030\001 \003(\0132!.ODP_main_fra"
    "me.user_analyze_info\022 \n\005error\030\002 \001(\0132\021.co"
    "mmon.errorinfo\"\302\001\n\035new_add_user_analyze_"
    "list_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date"
    "\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014request_ty"
    "pe\030\004 \001(\005\022\020\n\010page_num\030\005 \001(\005\022\020\n\010cur_page\030\006"
    " \001(\005\022-\n\nask_header\030\007 \001(\0132\031.common.common"
    "_ask_header\"\210\001\n\035new_add_user_analyze_lis"
    "t_ans\022\024\n\014total_number\030\001 \001(\005\022/\n\004info\030\002 \003("
    "\0132!.ODP_main_frame.user_analyze_info\022 \n\005"
    "error\030\003 \001(\0132\021.common.errorinfo\"\230\001\n\027activ"
    "e_user_analyze_ask\022\022\n\nstart_date\030\001 \001(\014\022\020"
    "\n\010end_date\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014"
    "request_type\030\004 \001(\005\022-\n\nask_header\030\005 \001(\0132\031"
    ".common.common_ask_header\"l\n\027active_user"
    "_analyze_ans\022/\n\004info\030\001 \003(\0132!.ODP_main_fr"
    "ame.user_analyze_info\022 \n\005error\030\002 \001(\0132\021.c"
    "ommon.errorinfo\"\301\001\n\034active_user_analyze_"
    "list_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date"
    "\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014request_ty"
    "pe\030\004 \001(\005\022\020\n\010page_num\030\005 \001(\005\022\020\n\010cur_page\030\006"
    " \001(\005\022-\n\nask_header\030\007 \001(\0132\031.common.common"
    "_ask_header\"\207\001\n\034active_user_analyze_list"
    "_ans\022\024\n\014total_number\030\001 \001(\005\022/\n\004info\030\002 \003(\013"
    "2!.ODP_main_frame.user_analyze_info\022 \n\005e"
    "rror\030\003 \001(\0132\021.common.errorinfo\"\233\001\n\032user_f"
    "reshness_analyze_ask\022\022\n\nstart_date\030\001 \001(\014"
    "\022\020\n\010end_date\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024"
    "\n\014request_type\030\004 \001(\005\022-\n\nask_header\030\005 \001(\013"
    "2\031.common.common_ask_header\"q\n\032user_fres"
    "hness_analyze_ans\0221\n\004info\030\001 \003(\0132#.ODP_ma"
    "in_frame.user_freshness_info\022 \n\005error\030\002 "
    "\001(\0132\021.common.errorinfo\"\304\001\n\037user_freshnes"
    "s_analyze_list_ask\022\022\n\nstart_date\030\001 \001(\014\022\020"
    "\n\010end_date\030\002 \001(\014\022\022\n\nos_version\030\003 \001(\014\022\024\n\014"
    "request_type\030\004 \001(\005\022\020\n\010page_num\030\005 \001(\005\022\020\n\010"
    "cur_page\030\006 \001(\005\022-\n\nask_header\030\007 \001(\0132\031.com"
    "mon.common_ask_header\"\214\001\n\037user_freshness"
    "_analyze_list_ans\022\024\n\014total_number\030\001 \001(\005\022"
    "1\n\004info\030\002 \003(\0132#.ODP_main_frame.user_fres"
    "hness_info\022 \n\005error\030\003 \001(\0132\021.common.error"
    "info\"\230\001\n\027user_retain_analyze_ask\022\022\n\nstar"
    "t_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\022\n\nos_ver"
    "sion\030\003 \001(\014\022\024\n\014request_type\030\004 \001(\005\022-\n\nask_"
    "header\030\005 \001(\0132\031.common.common_ask_header\""
    "k\n\027user_retain_analyze_ans\022.\n\004info\030\001 \003(\013"
    "2 .ODP_main_frame.user_retain_info\022 \n\005er"
    "ror\030\002 \001(\0132\021.common.errorinfo\"\203\001\n\024use_tim"
    "e_analyze_ask\022\022\n\nstart_date\030\001 \001(\014\022\022\n\nos_"
    "version\030\002 \001(\014\022\024\n\014request_type\030\003 \001(\005\022-\n\na"
    "sk_header\030\004 \001(\0132\031.common.common_ask_head"
    "er\"e\n\024use_time_analyze_ans\022+\n\004info\030\001 \003(\013"
    "2\035.ODP_main_frame.use_time_info\022 \n\005error"
    "\030\002 \001(\0132\021.common.errorinfo\"\204\001\n\025use_count_"
    "analyze_ask\022\022\n\nstart_date\030\001 \001(\014\022\022\n\nos_ve"
    "rsion\030\002 \001(\014\022\024\n\014request_type\030\003 \001(\005\022-\n\nask"
    "_header\030\004 \001(\0132\031.common.common_ask_header"
    "\"g\n\025use_count_analyze_ans\022,\n\004info\030\001 \003(\0132"
    "\036.ODP_main_frame.use_count_info\022 \n\005error"
    "\030\002 \001(\0132\021.common.errorinfo\"o\n\030use_interva"
    "l_analyze_ask\022\020\n\010end_date\030\001 \001(\014\022\022\n\nos_ve"
    "rsion\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132\031.common"
    ".common_ask_header\"m\n\030use_interval_analy"
    "ze_ans\022/\n\004info\030\001 \003(\0132!.ODP_main_frame.us"
    "e_interval_info\022 \n\005error\030\002 \001(\0132\021.common."
    "errorinfo\"\231\001\n\030download_src_analyze_ask\022\022"
    "\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\022\n\n"
    "os_version\030\003 \001(\014\022\024\n\014request_type\030\004 \001(\005\022-"
    "\n\nask_header\030\005 \001(\0132\031.common.common_ask_h"
    "eader\"y\n\030download_src_analyze_ans\022;\n\004inf"
    "o\030\001 \003(\0132-.ODP_main_frame.download_src_us"
    "er_acount_info\022 \n\005error\030\002 \001(\0132\021.common.e"
    "rrorinfo\"\256\001\n\037download_src_analyze_detail"
    "_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001"
    "(\014\022\022\n\nos_version\030\003 \001(\014\022\020\n\010page_num\030\004 \001(\005"
    "\022\020\n\010cur_page\030\005 \001(\005\022-\n\nask_header\030\006 \001(\0132\031"
    ".common.common_ask_header\"\214\001\n\037download_s"
    "rc_analyze_detail_ans\022\024\n\014total_number\030\001 "
    "\001(\005\0221\n\004info\030\002 \003(\0132#.ODP_main_frame.downl"
    "oad_src_detail\022 \n\005error\030\003 \001(\0132\021.common.e"
    "rrorinfo\"\210\001\n\035third_party_login_analyze_a"
    "sk\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014"
    "\022\022\n\nos_version\030\003 \001(\014\022-\n\nask_header\030\004 \001(\013"
    "2\031.common.common_ask_header\"w\n\035third_par"
    "ty_login_analyze_ans\0224\n\004info\030\001 \003(\0132&.ODP"
    "_main_frame.third_party_login_info\022 \n\005er"
    "ror\030\002 \001(\0132\021.common.errorinfo\"\261\001\n\"third_p"
    "arty_login_analyze_list_ask\022\022\n\nstart_dat"
    "e\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\022\n\nos_version\030"
    "\003 \001(\014\022\020\n\010page_num\030\004 \001(\005\022\020\n\010cur_page\030\005 \001("
    "\005\022-\n\nask_header\030\006 \001(\0132\031.common.common_as"
    "k_header\"\222\001\n\"third_party_login_analyze_l"
    "ist_ans\022\024\n\014total_number\030\001 \001(\005\0224\n\004info\030\002 "
    "\003(\0132&.ODP_main_frame.third_party_login_i"
    "nfo\022 \n\005error\030\003 \001(\0132\021.common.errorinfo\"E\n"
    "\024operation_report_ask\022-\n\nask_header\030\001 \001("
    "\0132\031.common.common_ask_header\"\?\n\025operatio"
    "n_report_info\022\023\n\013report_item\030\001 \001(\014\022\021\n\tto"
    "tal_num\030\002 \001(\005\"m\n\024operation_report_ans\0223\n"
    "\004list\030\001 \003(\0132%.ODP_main_frame.operation_r"
    "eport_info\022 \n\005error\030\002 \001(\0132\021.common.error"
    "info\"\030\n\007doc_row\022\r\n\005value\030\001 \003(\014\"\275\001\n\033user_"
    "certification_list_row\022\014\n\004name\030\001 \001(\014\022\r\n\005"
    "page2\030\002 \001(\014\022\r\n\005page3\030\003 \001(\014\022\024\n\014access_cou"
    "nt\030\004 \001(\005\022\024\n\014submit_count\030\005 \001(\005\022\020\n\010percen"
    "t1\030\006 \001(\002\022\020\n\010percent2\030\007 \001(\002\022\020\n\010percent3\030\010"
    " \001(\002\022\020\n\010percent4\030\t \001(\002\"\211\001\n\026user_certific"
    "ation_ask\022-\n\nask_header\030\001 \001(\0132\031.common.c"
    "ommon_ask_header\022\032\n\022certification_type\030\002"
    " \001(\005\022\022\n\nbegin_time\030\003 \001(\014\022\020\n\010end_time\030\004 \001"
    "(\014\"\236\001\n\026user_certification_ans\022$\n\003row\030\001 \003"
    "(\0132\027.ODP_main_frame.doc_row\0229\n\004list\030\002 \003("
    "\0132+.ODP_main_frame.user_certification_li"
    "st_row\022#\n\006result\030\003 \001(\0132\023.common.result_i"
    "nfo", 12963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ODP_main_frame.proto", &protobuf_RegisterTypes);
  Pay_Withdraw::default_instance_ = new Pay_Withdraw();
  province_under_count::default_instance_ = new province_under_count();
  city_bid_count::default_instance_ = new city_bid_count();
  unfinished_bid_info::default_instance_ = new unfinished_bid_info();
  user_distribution::default_instance_ = new user_distribution();
  cur_trading_volume::default_instance_ = new cur_trading_volume();
  cur_province_trading_volume::default_instance_ = new cur_province_trading_volume();
  month_registration_volume::default_instance_ = new month_registration_volume();
  cur_trading_count::default_instance_ = new cur_trading_count();
  month_trading_volume::default_instance_ = new month_trading_volume();
  registration_info::default_instance_ = new registration_info();
  charge_info::default_instance_ = new charge_info();
  real_fund_detail::default_instance_ = new real_fund_detail();
  fund_flow_type::default_instance_ = new fund_flow_type();
  user_acount_info::default_instance_ = new user_acount_info();
  top_ten_user_acount_info::default_instance_ = new top_ten_user_acount_info();
  start_count_info::default_instance_ = new start_count_info();
  user_analyze_info::default_instance_ = new user_analyze_info();
  user_freshness_info::default_instance_ = new user_freshness_info();
  user_retain_rate_info::default_instance_ = new user_retain_rate_info();
  user_retain_info::default_instance_ = new user_retain_info();
  app_version_statistics::default_instance_ = new app_version_statistics();
  app_version_detail::default_instance_ = new app_version_detail();
  download_src_user_acount_info::default_instance_ = new download_src_user_acount_info();
  download_src_detail::default_instance_ = new download_src_detail();
  use_time_info::default_instance_ = new use_time_info();
  use_count_info::default_instance_ = new use_count_info();
  use_interval_info::default_instance_ = new use_interval_info();
  third_party_login_info::default_instance_ = new third_party_login_info();
  Pay_Withdraw_ask::default_instance_ = new Pay_Withdraw_ask();
  Pay_Withdraw_ans::default_instance_ = new Pay_Withdraw_ans();
  unfinished_bid_ask::default_instance_ = new unfinished_bid_ask();
  unfinished_bid_ans::default_instance_ = new unfinished_bid_ans();
  city_bid_count_ask::default_instance_ = new city_bid_count_ask();
  city_bid_count_ans::default_instance_ = new city_bid_count_ans();
  user_distribution_ask::default_instance_ = new user_distribution_ask();
  user_distribution_ans::default_instance_ = new user_distribution_ans();
  cur_trading_volume_ask::default_instance_ = new cur_trading_volume_ask();
  cur_trading_volume_ans::default_instance_ = new cur_trading_volume_ans();
  cur_province_trading_volume_ask::default_instance_ = new cur_province_trading_volume_ask();
  cur_province_trading_volume_ans::default_instance_ = new cur_province_trading_volume_ans();
  Real_time_registration_ask::default_instance_ = new Real_time_registration_ask();
  Real_time_registration_ans::default_instance_ = new Real_time_registration_ans();
  month_registration_ask::default_instance_ = new month_registration_ask();
  month_registration_ans::default_instance_ = new month_registration_ans();
  real_time_charge_ask::default_instance_ = new real_time_charge_ask();
  real_time_charge_ans::default_instance_ = new real_time_charge_ans();
  cur_trading_count_ask::default_instance_ = new cur_trading_count_ask();
  cur_trading_count_ans::default_instance_ = new cur_trading_count_ans();
  month_trading_ask::default_instance_ = new month_trading_ask();
  month_trading_ans::default_instance_ = new month_trading_ans();
  cur_fund_detail_ask::default_instance_ = new cur_fund_detail_ask();
  cur_fund_detail_ans::default_instance_ = new cur_fund_detail_ans();
  history_fund_detail_ask::default_instance_ = new history_fund_detail_ask();
  history_fund_detail_ans::default_instance_ = new history_fund_detail_ans();
  history_fund_flow_type_ask::default_instance_ = new history_fund_flow_type_ask();
  history_fund_flow_type_ans::default_instance_ = new history_fund_flow_type_ans();
  client_versions_tendency_ask::default_instance_ = new client_versions_tendency_ask();
  client_versions_tendency_ans::default_instance_ = new client_versions_tendency_ans();
  client_versions_distribution_ask::default_instance_ = new client_versions_distribution_ask();
  client_versions_distribution_ans::default_instance_ = new client_versions_distribution_ans();
  client_versions_distribution_detail_ask::default_instance_ = new client_versions_distribution_detail_ask();
  client_versions_distribution_detail_ans::default_instance_ = new client_versions_distribution_detail_ans();
  client_versions_distribution_detail_list_ask::default_instance_ = new client_versions_distribution_detail_list_ask();
  client_versions_distribution_detail_list_ans::default_instance_ = new client_versions_distribution_detail_list_ans();
  start_count_analyze_ask::default_instance_ = new start_count_analyze_ask();
  start_count_analyze_ans::default_instance_ = new start_count_analyze_ans();
  start_count_analyze_list_ask::default_instance_ = new start_count_analyze_list_ask();
  start_count_analyze_list_ans::default_instance_ = new start_count_analyze_list_ans();
  new_add_user_analyze_ask::default_instance_ = new new_add_user_analyze_ask();
  new_add_user_analyze_ans::default_instance_ = new new_add_user_analyze_ans();
  new_add_user_analyze_list_ask::default_instance_ = new new_add_user_analyze_list_ask();
  new_add_user_analyze_list_ans::default_instance_ = new new_add_user_analyze_list_ans();
  active_user_analyze_ask::default_instance_ = new active_user_analyze_ask();
  active_user_analyze_ans::default_instance_ = new active_user_analyze_ans();
  active_user_analyze_list_ask::default_instance_ = new active_user_analyze_list_ask();
  active_user_analyze_list_ans::default_instance_ = new active_user_analyze_list_ans();
  user_freshness_analyze_ask::default_instance_ = new user_freshness_analyze_ask();
  user_freshness_analyze_ans::default_instance_ = new user_freshness_analyze_ans();
  user_freshness_analyze_list_ask::default_instance_ = new user_freshness_analyze_list_ask();
  user_freshness_analyze_list_ans::default_instance_ = new user_freshness_analyze_list_ans();
  user_retain_analyze_ask::default_instance_ = new user_retain_analyze_ask();
  user_retain_analyze_ans::default_instance_ = new user_retain_analyze_ans();
  use_time_analyze_ask::default_instance_ = new use_time_analyze_ask();
  use_time_analyze_ans::default_instance_ = new use_time_analyze_ans();
  use_count_analyze_ask::default_instance_ = new use_count_analyze_ask();
  use_count_analyze_ans::default_instance_ = new use_count_analyze_ans();
  use_interval_analyze_ask::default_instance_ = new use_interval_analyze_ask();
  use_interval_analyze_ans::default_instance_ = new use_interval_analyze_ans();
  download_src_analyze_ask::default_instance_ = new download_src_analyze_ask();
  download_src_analyze_ans::default_instance_ = new download_src_analyze_ans();
  download_src_analyze_detail_ask::default_instance_ = new download_src_analyze_detail_ask();
  download_src_analyze_detail_ans::default_instance_ = new download_src_analyze_detail_ans();
  third_party_login_analyze_ask::default_instance_ = new third_party_login_analyze_ask();
  third_party_login_analyze_ans::default_instance_ = new third_party_login_analyze_ans();
  third_party_login_analyze_list_ask::default_instance_ = new third_party_login_analyze_list_ask();
  third_party_login_analyze_list_ans::default_instance_ = new third_party_login_analyze_list_ans();
  operation_report_ask::default_instance_ = new operation_report_ask();
  operation_report_info::default_instance_ = new operation_report_info();
  operation_report_ans::default_instance_ = new operation_report_ans();
  doc_row::default_instance_ = new doc_row();
  user_certification_list_row::default_instance_ = new user_certification_list_row();
  user_certification_ask::default_instance_ = new user_certification_ask();
  user_certification_ans::default_instance_ = new user_certification_ans();
  Pay_Withdraw::default_instance_->InitAsDefaultInstance();
  province_under_count::default_instance_->InitAsDefaultInstance();
  city_bid_count::default_instance_->InitAsDefaultInstance();
  unfinished_bid_info::default_instance_->InitAsDefaultInstance();
  user_distribution::default_instance_->InitAsDefaultInstance();
  cur_trading_volume::default_instance_->InitAsDefaultInstance();
  cur_province_trading_volume::default_instance_->InitAsDefaultInstance();
  month_registration_volume::default_instance_->InitAsDefaultInstance();
  cur_trading_count::default_instance_->InitAsDefaultInstance();
  month_trading_volume::default_instance_->InitAsDefaultInstance();
  registration_info::default_instance_->InitAsDefaultInstance();
  charge_info::default_instance_->InitAsDefaultInstance();
  real_fund_detail::default_instance_->InitAsDefaultInstance();
  fund_flow_type::default_instance_->InitAsDefaultInstance();
  user_acount_info::default_instance_->InitAsDefaultInstance();
  top_ten_user_acount_info::default_instance_->InitAsDefaultInstance();
  start_count_info::default_instance_->InitAsDefaultInstance();
  user_analyze_info::default_instance_->InitAsDefaultInstance();
  user_freshness_info::default_instance_->InitAsDefaultInstance();
  user_retain_rate_info::default_instance_->InitAsDefaultInstance();
  user_retain_info::default_instance_->InitAsDefaultInstance();
  app_version_statistics::default_instance_->InitAsDefaultInstance();
  app_version_detail::default_instance_->InitAsDefaultInstance();
  download_src_user_acount_info::default_instance_->InitAsDefaultInstance();
  download_src_detail::default_instance_->InitAsDefaultInstance();
  use_time_info::default_instance_->InitAsDefaultInstance();
  use_count_info::default_instance_->InitAsDefaultInstance();
  use_interval_info::default_instance_->InitAsDefaultInstance();
  third_party_login_info::default_instance_->InitAsDefaultInstance();
  Pay_Withdraw_ask::default_instance_->InitAsDefaultInstance();
  Pay_Withdraw_ans::default_instance_->InitAsDefaultInstance();
  unfinished_bid_ask::default_instance_->InitAsDefaultInstance();
  unfinished_bid_ans::default_instance_->InitAsDefaultInstance();
  city_bid_count_ask::default_instance_->InitAsDefaultInstance();
  city_bid_count_ans::default_instance_->InitAsDefaultInstance();
  user_distribution_ask::default_instance_->InitAsDefaultInstance();
  user_distribution_ans::default_instance_->InitAsDefaultInstance();
  cur_trading_volume_ask::default_instance_->InitAsDefaultInstance();
  cur_trading_volume_ans::default_instance_->InitAsDefaultInstance();
  cur_province_trading_volume_ask::default_instance_->InitAsDefaultInstance();
  cur_province_trading_volume_ans::default_instance_->InitAsDefaultInstance();
  Real_time_registration_ask::default_instance_->InitAsDefaultInstance();
  Real_time_registration_ans::default_instance_->InitAsDefaultInstance();
  month_registration_ask::default_instance_->InitAsDefaultInstance();
  month_registration_ans::default_instance_->InitAsDefaultInstance();
  real_time_charge_ask::default_instance_->InitAsDefaultInstance();
  real_time_charge_ans::default_instance_->InitAsDefaultInstance();
  cur_trading_count_ask::default_instance_->InitAsDefaultInstance();
  cur_trading_count_ans::default_instance_->InitAsDefaultInstance();
  month_trading_ask::default_instance_->InitAsDefaultInstance();
  month_trading_ans::default_instance_->InitAsDefaultInstance();
  cur_fund_detail_ask::default_instance_->InitAsDefaultInstance();
  cur_fund_detail_ans::default_instance_->InitAsDefaultInstance();
  history_fund_detail_ask::default_instance_->InitAsDefaultInstance();
  history_fund_detail_ans::default_instance_->InitAsDefaultInstance();
  history_fund_flow_type_ask::default_instance_->InitAsDefaultInstance();
  history_fund_flow_type_ans::default_instance_->InitAsDefaultInstance();
  client_versions_tendency_ask::default_instance_->InitAsDefaultInstance();
  client_versions_tendency_ans::default_instance_->InitAsDefaultInstance();
  client_versions_distribution_ask::default_instance_->InitAsDefaultInstance();
  client_versions_distribution_ans::default_instance_->InitAsDefaultInstance();
  client_versions_distribution_detail_ask::default_instance_->InitAsDefaultInstance();
  client_versions_distribution_detail_ans::default_instance_->InitAsDefaultInstance();
  client_versions_distribution_detail_list_ask::default_instance_->InitAsDefaultInstance();
  client_versions_distribution_detail_list_ans::default_instance_->InitAsDefaultInstance();
  start_count_analyze_ask::default_instance_->InitAsDefaultInstance();
  start_count_analyze_ans::default_instance_->InitAsDefaultInstance();
  start_count_analyze_list_ask::default_instance_->InitAsDefaultInstance();
  start_count_analyze_list_ans::default_instance_->InitAsDefaultInstance();
  new_add_user_analyze_ask::default_instance_->InitAsDefaultInstance();
  new_add_user_analyze_ans::default_instance_->InitAsDefaultInstance();
  new_add_user_analyze_list_ask::default_instance_->InitAsDefaultInstance();
  new_add_user_analyze_list_ans::default_instance_->InitAsDefaultInstance();
  active_user_analyze_ask::default_instance_->InitAsDefaultInstance();
  active_user_analyze_ans::default_instance_->InitAsDefaultInstance();
  active_user_analyze_list_ask::default_instance_->InitAsDefaultInstance();
  active_user_analyze_list_ans::default_instance_->InitAsDefaultInstance();
  user_freshness_analyze_ask::default_instance_->InitAsDefaultInstance();
  user_freshness_analyze_ans::default_instance_->InitAsDefaultInstance();
  user_freshness_analyze_list_ask::default_instance_->InitAsDefaultInstance();
  user_freshness_analyze_list_ans::default_instance_->InitAsDefaultInstance();
  user_retain_analyze_ask::default_instance_->InitAsDefaultInstance();
  user_retain_analyze_ans::default_instance_->InitAsDefaultInstance();
  use_time_analyze_ask::default_instance_->InitAsDefaultInstance();
  use_time_analyze_ans::default_instance_->InitAsDefaultInstance();
  use_count_analyze_ask::default_instance_->InitAsDefaultInstance();
  use_count_analyze_ans::default_instance_->InitAsDefaultInstance();
  use_interval_analyze_ask::default_instance_->InitAsDefaultInstance();
  use_interval_analyze_ans::default_instance_->InitAsDefaultInstance();
  download_src_analyze_ask::default_instance_->InitAsDefaultInstance();
  download_src_analyze_ans::default_instance_->InitAsDefaultInstance();
  download_src_analyze_detail_ask::default_instance_->InitAsDefaultInstance();
  download_src_analyze_detail_ans::default_instance_->InitAsDefaultInstance();
  third_party_login_analyze_ask::default_instance_->InitAsDefaultInstance();
  third_party_login_analyze_ans::default_instance_->InitAsDefaultInstance();
  third_party_login_analyze_list_ask::default_instance_->InitAsDefaultInstance();
  third_party_login_analyze_list_ans::default_instance_->InitAsDefaultInstance();
  operation_report_ask::default_instance_->InitAsDefaultInstance();
  operation_report_info::default_instance_->InitAsDefaultInstance();
  operation_report_ans::default_instance_->InitAsDefaultInstance();
  doc_row::default_instance_->InitAsDefaultInstance();
  user_certification_list_row::default_instance_->InitAsDefaultInstance();
  user_certification_ask::default_instance_->InitAsDefaultInstance();
  user_certification_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ODP_5fmain_5fframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ODP_5fmain_5fframe_2eproto {
  StaticDescriptorInitializer_ODP_5fmain_5fframe_2eproto() {
    protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  }
} static_descriptor_initializer_ODP_5fmain_5fframe_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Pay_Withdraw::kCurDateFieldNumber;
const int Pay_Withdraw::kPayAmountFieldNumber;
const int Pay_Withdraw::kWithdrawAmountFieldNumber;
#endif  // !_MSC_VER

Pay_Withdraw::Pay_Withdraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.Pay_Withdraw)
}

void Pay_Withdraw::InitAsDefaultInstance() {
}

Pay_Withdraw::Pay_Withdraw(const Pay_Withdraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.Pay_Withdraw)
}

void Pay_Withdraw::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cur_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pay_amount_ = 0;
  withdraw_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pay_Withdraw::~Pay_Withdraw() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.Pay_Withdraw)
  SharedDtor();
}

void Pay_Withdraw::SharedDtor() {
  if (cur_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_date_;
  }
  if (this != default_instance_) {
  }
}

void Pay_Withdraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pay_Withdraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay_Withdraw_descriptor_;
}

const Pay_Withdraw& Pay_Withdraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

Pay_Withdraw* Pay_Withdraw::default_instance_ = NULL;

Pay_Withdraw* Pay_Withdraw::New() const {
  return new Pay_Withdraw;
}

void Pay_Withdraw::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pay_Withdraw*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pay_amount_, withdraw_amount_);
    if (has_cur_date()) {
      if (cur_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cur_date_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pay_Withdraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.Pay_Withdraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cur_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cur_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_pay_amount;
        break;
      }

      // optional double pay_amount = 2;
      case 2: {
        if (tag == 17) {
         parse_pay_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pay_amount_)));
          set_has_pay_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_withdraw_amount;
        break;
      }

      // optional double withdraw_amount = 3;
      case 3: {
        if (tag == 25) {
         parse_withdraw_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_amount_)));
          set_has_withdraw_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.Pay_Withdraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.Pay_Withdraw)
  return false;
#undef DO_
}

void Pay_Withdraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.Pay_Withdraw)
  // optional bytes cur_date = 1;
  if (has_cur_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cur_date(), output);
  }

  // optional double pay_amount = 2;
  if (has_pay_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pay_amount(), output);
  }

  // optional double withdraw_amount = 3;
  if (has_withdraw_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->withdraw_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.Pay_Withdraw)
}

::google::protobuf::uint8* Pay_Withdraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.Pay_Withdraw)
  // optional bytes cur_date = 1;
  if (has_cur_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cur_date(), target);
  }

  // optional double pay_amount = 2;
  if (has_pay_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pay_amount(), target);
  }

  // optional double withdraw_amount = 3;
  if (has_withdraw_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->withdraw_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.Pay_Withdraw)
  return target;
}

int Pay_Withdraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cur_date = 1;
    if (has_cur_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cur_date());
    }

    // optional double pay_amount = 2;
    if (has_pay_amount()) {
      total_size += 1 + 8;
    }

    // optional double withdraw_amount = 3;
    if (has_withdraw_amount()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pay_Withdraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pay_Withdraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pay_Withdraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pay_Withdraw::MergeFrom(const Pay_Withdraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_date()) {
      set_cur_date(from.cur_date());
    }
    if (from.has_pay_amount()) {
      set_pay_amount(from.pay_amount());
    }
    if (from.has_withdraw_amount()) {
      set_withdraw_amount(from.withdraw_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pay_Withdraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pay_Withdraw::CopyFrom(const Pay_Withdraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pay_Withdraw::IsInitialized() const {

  return true;
}

void Pay_Withdraw::Swap(Pay_Withdraw* other) {
  if (other != this) {
    std::swap(cur_date_, other->cur_date_);
    std::swap(pay_amount_, other->pay_amount_);
    std::swap(withdraw_amount_, other->withdraw_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pay_Withdraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pay_Withdraw_descriptor_;
  metadata.reflection = Pay_Withdraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int province_under_count::kProvinceNameFieldNumber;
const int province_under_count::kUnderCountFieldNumber;
#endif  // !_MSC_VER

province_under_count::province_under_count()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.province_under_count)
}

void province_under_count::InitAsDefaultInstance() {
}

province_under_count::province_under_count(const province_under_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.province_under_count)
}

void province_under_count::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  under_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

province_under_count::~province_under_count() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.province_under_count)
  SharedDtor();
}

void province_under_count::SharedDtor() {
  if (province_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_name_;
  }
  if (this != default_instance_) {
  }
}

void province_under_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_under_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_under_count_descriptor_;
}

const province_under_count& province_under_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

province_under_count* province_under_count::default_instance_ = NULL;

province_under_count* province_under_count::New() const {
  return new province_under_count;
}

void province_under_count::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_province_name()) {
      if (province_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_name_->clear();
      }
    }
    under_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool province_under_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.province_under_count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes province_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_under_count;
        break;
      }

      // optional int32 under_count = 2;
      case 2: {
        if (tag == 16) {
         parse_under_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &under_count_)));
          set_has_under_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.province_under_count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.province_under_count)
  return false;
#undef DO_
}

void province_under_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.province_under_count)
  // optional bytes province_name = 1;
  if (has_province_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->province_name(), output);
  }

  // optional int32 under_count = 2;
  if (has_under_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->under_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.province_under_count)
}

::google::protobuf::uint8* province_under_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.province_under_count)
  // optional bytes province_name = 1;
  if (has_province_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->province_name(), target);
  }

  // optional int32 under_count = 2;
  if (has_under_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->under_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.province_under_count)
  return target;
}

int province_under_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes province_name = 1;
    if (has_province_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->province_name());
    }

    // optional int32 under_count = 2;
    if (has_under_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->under_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_under_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const province_under_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const province_under_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_under_count::MergeFrom(const province_under_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province_name()) {
      set_province_name(from.province_name());
    }
    if (from.has_under_count()) {
      set_under_count(from.under_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void province_under_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_under_count::CopyFrom(const province_under_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_under_count::IsInitialized() const {

  return true;
}

void province_under_count::Swap(province_under_count* other) {
  if (other != this) {
    std::swap(province_name_, other->province_name_);
    std::swap(under_count_, other->under_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata province_under_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_under_count_descriptor_;
  metadata.reflection = province_under_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_bid_count::kCityNameFieldNumber;
const int city_bid_count::kBidCountFieldNumber;
#endif  // !_MSC_VER

city_bid_count::city_bid_count()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.city_bid_count)
}

void city_bid_count::InitAsDefaultInstance() {
}

city_bid_count::city_bid_count(const city_bid_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.city_bid_count)
}

void city_bid_count::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_bid_count::~city_bid_count() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.city_bid_count)
  SharedDtor();
}

void city_bid_count::SharedDtor() {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_name_;
  }
  if (this != default_instance_) {
  }
}

void city_bid_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_bid_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_bid_count_descriptor_;
}

const city_bid_count& city_bid_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

city_bid_count* city_bid_count::default_instance_ = NULL;

city_bid_count* city_bid_count::New() const {
  return new city_bid_count;
}

void city_bid_count::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_name_->clear();
      }
    }
    bid_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_bid_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.city_bid_count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes city_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid_count;
        break;
      }

      // optional int32 bid_count = 2;
      case 2: {
        if (tag == 16) {
         parse_bid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_count_)));
          set_has_bid_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.city_bid_count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.city_bid_count)
  return false;
#undef DO_
}

void city_bid_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.city_bid_count)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->city_name(), output);
  }

  // optional int32 bid_count = 2;
  if (has_bid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.city_bid_count)
}

::google::protobuf::uint8* city_bid_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.city_bid_count)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->city_name(), target);
  }

  // optional int32 bid_count = 2;
  if (has_bid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.city_bid_count)
  return target;
}

int city_bid_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes city_name = 1;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city_name());
    }

    // optional int32 bid_count = 2;
    if (has_bid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_bid_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_bid_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_bid_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_bid_count::MergeFrom(const city_bid_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_bid_count()) {
      set_bid_count(from.bid_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_bid_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_bid_count::CopyFrom(const city_bid_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_bid_count::IsInitialized() const {

  return true;
}

void city_bid_count::Swap(city_bid_count* other) {
  if (other != this) {
    std::swap(city_name_, other->city_name_);
    std::swap(bid_count_, other->bid_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_bid_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_bid_count_descriptor_;
  metadata.reflection = city_bid_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unfinished_bid_info::kCityNameFieldNumber;
const int unfinished_bid_info::kRoleCityNameFieldNumber;
#endif  // !_MSC_VER

unfinished_bid_info::unfinished_bid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.unfinished_bid_info)
}

void unfinished_bid_info::InitAsDefaultInstance() {
}

unfinished_bid_info::unfinished_bid_info(const unfinished_bid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.unfinished_bid_info)
}

void unfinished_bid_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unfinished_bid_info::~unfinished_bid_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.unfinished_bid_info)
  SharedDtor();
}

void unfinished_bid_info::SharedDtor() {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_name_;
  }
  if (this != default_instance_) {
  }
}

void unfinished_bid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unfinished_bid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unfinished_bid_info_descriptor_;
}

const unfinished_bid_info& unfinished_bid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

unfinished_bid_info* unfinished_bid_info::default_instance_ = NULL;

unfinished_bid_info* unfinished_bid_info::New() const {
  return new unfinished_bid_info;
}

void unfinished_bid_info::Clear() {
  if (has_city_name()) {
    if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      city_name_->clear();
    }
  }
  role_city_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unfinished_bid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.unfinished_bid_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes city_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role_city_name;
        break;
      }

      // repeated bytes role_city_name = 2;
      case 2: {
        if (tag == 18) {
         parse_role_city_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_role_city_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role_city_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.unfinished_bid_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.unfinished_bid_info)
  return false;
#undef DO_
}

void unfinished_bid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.unfinished_bid_info)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->city_name(), output);
  }

  // repeated bytes role_city_name = 2;
  for (int i = 0; i < this->role_city_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->role_city_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.unfinished_bid_info)
}

::google::protobuf::uint8* unfinished_bid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.unfinished_bid_info)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->city_name(), target);
  }

  // repeated bytes role_city_name = 2;
  for (int i = 0; i < this->role_city_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->role_city_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.unfinished_bid_info)
  return target;
}

int unfinished_bid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes city_name = 1;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city_name());
    }

  }
  // repeated bytes role_city_name = 2;
  total_size += 1 * this->role_city_name_size();
  for (int i = 0; i < this->role_city_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->role_city_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unfinished_bid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unfinished_bid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unfinished_bid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unfinished_bid_info::MergeFrom(const unfinished_bid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_city_name_.MergeFrom(from.role_city_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unfinished_bid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unfinished_bid_info::CopyFrom(const unfinished_bid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unfinished_bid_info::IsInitialized() const {

  return true;
}

void unfinished_bid_info::Swap(unfinished_bid_info* other) {
  if (other != this) {
    std::swap(city_name_, other->city_name_);
    role_city_name_.Swap(&other->role_city_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unfinished_bid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unfinished_bid_info_descriptor_;
  metadata.reflection = unfinished_bid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_distribution::kCityNameFieldNumber;
const int user_distribution::kUserCountFieldNumber;
#endif  // !_MSC_VER

user_distribution::user_distribution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_distribution)
}

void user_distribution::InitAsDefaultInstance() {
}

user_distribution::user_distribution(const user_distribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_distribution)
}

void user_distribution::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_distribution::~user_distribution() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_distribution)
  SharedDtor();
}

void user_distribution::SharedDtor() {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_name_;
  }
  if (this != default_instance_) {
  }
}

void user_distribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_distribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_distribution_descriptor_;
}

const user_distribution& user_distribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_distribution* user_distribution::default_instance_ = NULL;

user_distribution* user_distribution::New() const {
  return new user_distribution;
}

void user_distribution::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_name_->clear();
      }
    }
    user_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_distribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_distribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes city_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_count;
        break;
      }

      // optional int32 user_count = 2;
      case 2: {
        if (tag == 16) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_distribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_distribution)
  return false;
#undef DO_
}

void user_distribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_distribution)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->city_name(), output);
  }

  // optional int32 user_count = 2;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_distribution)
}

::google::protobuf::uint8* user_distribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_distribution)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->city_name(), target);
  }

  // optional int32 user_count = 2;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_distribution)
  return target;
}

int user_distribution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes city_name = 1;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city_name());
    }

    // optional int32 user_count = 2;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_distribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_distribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_distribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_distribution::MergeFrom(const user_distribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_distribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_distribution::CopyFrom(const user_distribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_distribution::IsInitialized() const {

  return true;
}

void user_distribution::Swap(user_distribution* other) {
  if (other != this) {
    std::swap(city_name_, other->city_name_);
    std::swap(user_count_, other->user_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_distribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_distribution_descriptor_;
  metadata.reflection = user_distribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_trading_volume::kHourFieldNumber;
const int cur_trading_volume::kTradingVolumeFieldNumber;
#endif  // !_MSC_VER

cur_trading_volume::cur_trading_volume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_trading_volume)
}

void cur_trading_volume::InitAsDefaultInstance() {
}

cur_trading_volume::cur_trading_volume(const cur_trading_volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_trading_volume)
}

void cur_trading_volume::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hour_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_trading_volume::~cur_trading_volume() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_trading_volume)
  SharedDtor();
}

void cur_trading_volume::SharedDtor() {
  if (hour_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hour_;
  }
  if (this != default_instance_) {
  }
}

void cur_trading_volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_trading_volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_trading_volume_descriptor_;
}

const cur_trading_volume& cur_trading_volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_trading_volume* cur_trading_volume::default_instance_ = NULL;

cur_trading_volume* cur_trading_volume::New() const {
  return new cur_trading_volume;
}

void cur_trading_volume::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_hour()) {
      if (hour_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hour_->clear();
      }
    }
    trading_volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_trading_volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_trading_volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes hour = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_trading_volume;
        break;
      }

      // optional float trading_volume = 2;
      case 2: {
        if (tag == 21) {
         parse_trading_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trading_volume_)));
          set_has_trading_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_trading_volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_trading_volume)
  return false;
#undef DO_
}

void cur_trading_volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_trading_volume)
  // optional bytes hour = 1;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hour(), output);
  }

  // optional float trading_volume = 2;
  if (has_trading_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->trading_volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_trading_volume)
}

::google::protobuf::uint8* cur_trading_volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_trading_volume)
  // optional bytes hour = 1;
  if (has_hour()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hour(), target);
  }

  // optional float trading_volume = 2;
  if (has_trading_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->trading_volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_trading_volume)
  return target;
}

int cur_trading_volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes hour = 1;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hour());
    }

    // optional float trading_volume = 2;
    if (has_trading_volume()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_trading_volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_trading_volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_trading_volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_trading_volume::MergeFrom(const cur_trading_volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_trading_volume()) {
      set_trading_volume(from.trading_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_trading_volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_trading_volume::CopyFrom(const cur_trading_volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_trading_volume::IsInitialized() const {

  return true;
}

void cur_trading_volume::Swap(cur_trading_volume* other) {
  if (other != this) {
    std::swap(hour_, other->hour_);
    std::swap(trading_volume_, other->trading_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_trading_volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_trading_volume_descriptor_;
  metadata.reflection = cur_trading_volume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_province_trading_volume::kProvinceNameFieldNumber;
const int cur_province_trading_volume::kTradingVolumeFieldNumber;
#endif  // !_MSC_VER

cur_province_trading_volume::cur_province_trading_volume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_province_trading_volume)
}

void cur_province_trading_volume::InitAsDefaultInstance() {
}

cur_province_trading_volume::cur_province_trading_volume(const cur_province_trading_volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_province_trading_volume)
}

void cur_province_trading_volume::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_province_trading_volume::~cur_province_trading_volume() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_province_trading_volume)
  SharedDtor();
}

void cur_province_trading_volume::SharedDtor() {
  if (province_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_name_;
  }
  if (this != default_instance_) {
  }
}

void cur_province_trading_volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_province_trading_volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_province_trading_volume_descriptor_;
}

const cur_province_trading_volume& cur_province_trading_volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_province_trading_volume* cur_province_trading_volume::default_instance_ = NULL;

cur_province_trading_volume* cur_province_trading_volume::New() const {
  return new cur_province_trading_volume;
}

void cur_province_trading_volume::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_province_name()) {
      if (province_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_name_->clear();
      }
    }
    trading_volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_province_trading_volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_province_trading_volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes province_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trading_volume;
        break;
      }

      // optional int32 trading_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_trading_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_volume_)));
          set_has_trading_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_province_trading_volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_province_trading_volume)
  return false;
#undef DO_
}

void cur_province_trading_volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_province_trading_volume)
  // optional bytes province_name = 1;
  if (has_province_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->province_name(), output);
  }

  // optional int32 trading_volume = 2;
  if (has_trading_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trading_volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_province_trading_volume)
}

::google::protobuf::uint8* cur_province_trading_volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_province_trading_volume)
  // optional bytes province_name = 1;
  if (has_province_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->province_name(), target);
  }

  // optional int32 trading_volume = 2;
  if (has_trading_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trading_volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_province_trading_volume)
  return target;
}

int cur_province_trading_volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes province_name = 1;
    if (has_province_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->province_name());
    }

    // optional int32 trading_volume = 2;
    if (has_trading_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trading_volume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_province_trading_volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_province_trading_volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_province_trading_volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_province_trading_volume::MergeFrom(const cur_province_trading_volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province_name()) {
      set_province_name(from.province_name());
    }
    if (from.has_trading_volume()) {
      set_trading_volume(from.trading_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_province_trading_volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_province_trading_volume::CopyFrom(const cur_province_trading_volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_province_trading_volume::IsInitialized() const {

  return true;
}

void cur_province_trading_volume::Swap(cur_province_trading_volume* other) {
  if (other != this) {
    std::swap(province_name_, other->province_name_);
    std::swap(trading_volume_, other->trading_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_province_trading_volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_province_trading_volume_descriptor_;
  metadata.reflection = cur_province_trading_volume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month_registration_volume::kYearMonthFieldNumber;
const int month_registration_volume::kRegistVolumeFieldNumber;
#endif  // !_MSC_VER

month_registration_volume::month_registration_volume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.month_registration_volume)
}

void month_registration_volume::InitAsDefaultInstance() {
}

month_registration_volume::month_registration_volume(const month_registration_volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.month_registration_volume)
}

void month_registration_volume::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  year_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regist_volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month_registration_volume::~month_registration_volume() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.month_registration_volume)
  SharedDtor();
}

void month_registration_volume::SharedDtor() {
  if (year_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete year_month_;
  }
  if (this != default_instance_) {
  }
}

void month_registration_volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month_registration_volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_registration_volume_descriptor_;
}

const month_registration_volume& month_registration_volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

month_registration_volume* month_registration_volume::default_instance_ = NULL;

month_registration_volume* month_registration_volume::New() const {
  return new month_registration_volume;
}

void month_registration_volume::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_year_month()) {
      if (year_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        year_month_->clear();
      }
    }
    regist_volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month_registration_volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.month_registration_volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes year_month = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_year_month()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_regist_volume;
        break;
      }

      // optional int32 regist_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_regist_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regist_volume_)));
          set_has_regist_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.month_registration_volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.month_registration_volume)
  return false;
#undef DO_
}

void month_registration_volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.month_registration_volume)
  // optional bytes year_month = 1;
  if (has_year_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->year_month(), output);
  }

  // optional int32 regist_volume = 2;
  if (has_regist_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->regist_volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.month_registration_volume)
}

::google::protobuf::uint8* month_registration_volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.month_registration_volume)
  // optional bytes year_month = 1;
  if (has_year_month()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->year_month(), target);
  }

  // optional int32 regist_volume = 2;
  if (has_regist_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->regist_volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.month_registration_volume)
  return target;
}

int month_registration_volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes year_month = 1;
    if (has_year_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->year_month());
    }

    // optional int32 regist_volume = 2;
    if (has_regist_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regist_volume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month_registration_volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month_registration_volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month_registration_volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month_registration_volume::MergeFrom(const month_registration_volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year_month()) {
      set_year_month(from.year_month());
    }
    if (from.has_regist_volume()) {
      set_regist_volume(from.regist_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month_registration_volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month_registration_volume::CopyFrom(const month_registration_volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month_registration_volume::IsInitialized() const {

  return true;
}

void month_registration_volume::Swap(month_registration_volume* other) {
  if (other != this) {
    std::swap(year_month_, other->year_month_);
    std::swap(regist_volume_, other->regist_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month_registration_volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_registration_volume_descriptor_;
  metadata.reflection = month_registration_volume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_trading_count::kHourFieldNumber;
const int cur_trading_count::kTradingCountFieldNumber;
#endif  // !_MSC_VER

cur_trading_count::cur_trading_count()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_trading_count)
}

void cur_trading_count::InitAsDefaultInstance() {
}

cur_trading_count::cur_trading_count(const cur_trading_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_trading_count)
}

void cur_trading_count::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hour_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_trading_count::~cur_trading_count() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_trading_count)
  SharedDtor();
}

void cur_trading_count::SharedDtor() {
  if (hour_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hour_;
  }
  if (this != default_instance_) {
  }
}

void cur_trading_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_trading_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_trading_count_descriptor_;
}

const cur_trading_count& cur_trading_count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_trading_count* cur_trading_count::default_instance_ = NULL;

cur_trading_count* cur_trading_count::New() const {
  return new cur_trading_count;
}

void cur_trading_count::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_hour()) {
      if (hour_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hour_->clear();
      }
    }
    trading_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_trading_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_trading_count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes hour = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trading_count;
        break;
      }

      // optional int32 trading_count = 2;
      case 2: {
        if (tag == 16) {
         parse_trading_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_count_)));
          set_has_trading_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_trading_count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_trading_count)
  return false;
#undef DO_
}

void cur_trading_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_trading_count)
  // optional bytes hour = 1;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hour(), output);
  }

  // optional int32 trading_count = 2;
  if (has_trading_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trading_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_trading_count)
}

::google::protobuf::uint8* cur_trading_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_trading_count)
  // optional bytes hour = 1;
  if (has_hour()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hour(), target);
  }

  // optional int32 trading_count = 2;
  if (has_trading_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trading_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_trading_count)
  return target;
}

int cur_trading_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes hour = 1;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hour());
    }

    // optional int32 trading_count = 2;
    if (has_trading_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trading_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_trading_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_trading_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_trading_count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_trading_count::MergeFrom(const cur_trading_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_trading_count()) {
      set_trading_count(from.trading_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_trading_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_trading_count::CopyFrom(const cur_trading_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_trading_count::IsInitialized() const {

  return true;
}

void cur_trading_count::Swap(cur_trading_count* other) {
  if (other != this) {
    std::swap(hour_, other->hour_);
    std::swap(trading_count_, other->trading_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_trading_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_trading_count_descriptor_;
  metadata.reflection = cur_trading_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month_trading_volume::kYearMonthFieldNumber;
const int month_trading_volume::kTradingVolumeFieldNumber;
#endif  // !_MSC_VER

month_trading_volume::month_trading_volume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.month_trading_volume)
}

void month_trading_volume::InitAsDefaultInstance() {
}

month_trading_volume::month_trading_volume(const month_trading_volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.month_trading_volume)
}

void month_trading_volume::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  year_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month_trading_volume::~month_trading_volume() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.month_trading_volume)
  SharedDtor();
}

void month_trading_volume::SharedDtor() {
  if (year_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete year_month_;
  }
  if (this != default_instance_) {
  }
}

void month_trading_volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month_trading_volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_trading_volume_descriptor_;
}

const month_trading_volume& month_trading_volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

month_trading_volume* month_trading_volume::default_instance_ = NULL;

month_trading_volume* month_trading_volume::New() const {
  return new month_trading_volume;
}

void month_trading_volume::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_year_month()) {
      if (year_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        year_month_->clear();
      }
    }
    trading_volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month_trading_volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.month_trading_volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes year_month = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_year_month()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_trading_volume;
        break;
      }

      // optional float trading_volume = 2;
      case 2: {
        if (tag == 21) {
         parse_trading_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trading_volume_)));
          set_has_trading_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.month_trading_volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.month_trading_volume)
  return false;
#undef DO_
}

void month_trading_volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.month_trading_volume)
  // optional bytes year_month = 1;
  if (has_year_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->year_month(), output);
  }

  // optional float trading_volume = 2;
  if (has_trading_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->trading_volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.month_trading_volume)
}

::google::protobuf::uint8* month_trading_volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.month_trading_volume)
  // optional bytes year_month = 1;
  if (has_year_month()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->year_month(), target);
  }

  // optional float trading_volume = 2;
  if (has_trading_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->trading_volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.month_trading_volume)
  return target;
}

int month_trading_volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes year_month = 1;
    if (has_year_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->year_month());
    }

    // optional float trading_volume = 2;
    if (has_trading_volume()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month_trading_volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month_trading_volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month_trading_volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month_trading_volume::MergeFrom(const month_trading_volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year_month()) {
      set_year_month(from.year_month());
    }
    if (from.has_trading_volume()) {
      set_trading_volume(from.trading_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month_trading_volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month_trading_volume::CopyFrom(const month_trading_volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month_trading_volume::IsInitialized() const {

  return true;
}

void month_trading_volume::Swap(month_trading_volume* other) {
  if (other != this) {
    std::swap(year_month_, other->year_month_);
    std::swap(trading_volume_, other->trading_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month_trading_volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_trading_volume_descriptor_;
  metadata.reflection = month_trading_volume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int registration_info::kCityNameFieldNumber;
const int registration_info::kCountFieldNumber;
#endif  // !_MSC_VER

registration_info::registration_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.registration_info)
}

void registration_info::InitAsDefaultInstance() {
}

registration_info::registration_info(const registration_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.registration_info)
}

void registration_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

registration_info::~registration_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.registration_info)
  SharedDtor();
}

void registration_info::SharedDtor() {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_name_;
  }
  if (this != default_instance_) {
  }
}

void registration_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* registration_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return registration_info_descriptor_;
}

const registration_info& registration_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

registration_info* registration_info::default_instance_ = NULL;

registration_info* registration_info::New() const {
  return new registration_info;
}

void registration_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_name_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool registration_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.registration_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes city_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.registration_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.registration_info)
  return false;
#undef DO_
}

void registration_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.registration_info)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->city_name(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.registration_info)
}

::google::protobuf::uint8* registration_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.registration_info)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->city_name(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.registration_info)
  return target;
}

int registration_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes city_name = 1;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city_name());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void registration_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const registration_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const registration_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void registration_info::MergeFrom(const registration_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void registration_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registration_info::CopyFrom(const registration_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registration_info::IsInitialized() const {

  return true;
}

void registration_info::Swap(registration_info* other) {
  if (other != this) {
    std::swap(city_name_, other->city_name_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata registration_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = registration_info_descriptor_;
  metadata.reflection = registration_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int charge_info::kCityNameFieldNumber;
const int charge_info::kChargeAmountFieldNumber;
#endif  // !_MSC_VER

charge_info::charge_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.charge_info)
}

void charge_info::InitAsDefaultInstance() {
}

charge_info::charge_info(const charge_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.charge_info)
}

void charge_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charge_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

charge_info::~charge_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.charge_info)
  SharedDtor();
}

void charge_info::SharedDtor() {
  if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_name_;
  }
  if (this != default_instance_) {
  }
}

void charge_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* charge_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return charge_info_descriptor_;
}

const charge_info& charge_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

charge_info* charge_info::default_instance_ = NULL;

charge_info* charge_info::New() const {
  return new charge_info;
}

void charge_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_name_->clear();
      }
    }
    charge_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool charge_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.charge_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes city_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_charge_amount;
        break;
      }

      // optional float charge_amount = 2;
      case 2: {
        if (tag == 21) {
         parse_charge_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charge_amount_)));
          set_has_charge_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.charge_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.charge_info)
  return false;
#undef DO_
}

void charge_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.charge_info)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->city_name(), output);
  }

  // optional float charge_amount = 2;
  if (has_charge_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->charge_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.charge_info)
}

::google::protobuf::uint8* charge_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.charge_info)
  // optional bytes city_name = 1;
  if (has_city_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->city_name(), target);
  }

  // optional float charge_amount = 2;
  if (has_charge_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->charge_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.charge_info)
  return target;
}

int charge_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes city_name = 1;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city_name());
    }

    // optional float charge_amount = 2;
    if (has_charge_amount()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void charge_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const charge_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const charge_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void charge_info::MergeFrom(const charge_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_charge_amount()) {
      set_charge_amount(from.charge_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void charge_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void charge_info::CopyFrom(const charge_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool charge_info::IsInitialized() const {

  return true;
}

void charge_info::Swap(charge_info* other) {
  if (other != this) {
    std::swap(city_name_, other->city_name_);
    std::swap(charge_amount_, other->charge_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata charge_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = charge_info_descriptor_;
  metadata.reflection = charge_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int real_fund_detail::kFundSerialNumberFieldNumber;
const int real_fund_detail::kFundSerialNameFieldNumber;
const int real_fund_detail::kUserNameFieldNumber;
const int real_fund_detail::kTelnoFieldNumber;
const int real_fund_detail::kToUserNameFieldNumber;
const int real_fund_detail::kFundSerialTypeFieldNumber;
const int real_fund_detail::kFundAmountFieldNumber;
const int real_fund_detail::kFundStatusFieldNumber;
const int real_fund_detail::kFundDescFieldNumber;
const int real_fund_detail::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

real_fund_detail::real_fund_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.real_fund_detail)
}

void real_fund_detail::InitAsDefaultInstance() {
}

real_fund_detail::real_fund_detail(const real_fund_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.real_fund_detail)
}

void real_fund_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fund_serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_serial_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_serial_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fund_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

real_fund_detail::~real_fund_detail() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.real_fund_detail)
  SharedDtor();
}

void real_fund_detail::SharedDtor() {
  if (fund_serial_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fund_serial_number_;
  }
  if (fund_serial_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fund_serial_name_;
  }
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (telno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete telno_;
  }
  if (to_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_user_name_;
  }
  if (fund_serial_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fund_serial_type_;
  }
  if (fund_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fund_amount_;
  }
  if (fund_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fund_status_;
  }
  if (fund_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fund_desc_;
  }
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (this != default_instance_) {
  }
}

void real_fund_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* real_fund_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return real_fund_detail_descriptor_;
}

const real_fund_detail& real_fund_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

real_fund_detail* real_fund_detail::default_instance_ = NULL;

real_fund_detail* real_fund_detail::New() const {
  return new real_fund_detail;
}

void real_fund_detail::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_fund_serial_number()) {
      if (fund_serial_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fund_serial_number_->clear();
      }
    }
    if (has_fund_serial_name()) {
      if (fund_serial_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fund_serial_name_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_telno()) {
      if (telno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        telno_->clear();
      }
    }
    if (has_to_user_name()) {
      if (to_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_user_name_->clear();
      }
    }
    if (has_fund_serial_type()) {
      if (fund_serial_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fund_serial_type_->clear();
      }
    }
    if (has_fund_amount()) {
      if (fund_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fund_amount_->clear();
      }
    }
    if (has_fund_status()) {
      if (fund_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fund_status_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_fund_desc()) {
      if (fund_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fund_desc_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool real_fund_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.real_fund_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes fund_serial_number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fund_serial_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fund_serial_name;
        break;
      }

      // optional bytes fund_serial_name = 2;
      case 2: {
        if (tag == 18) {
         parse_fund_serial_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fund_serial_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional bytes user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_telno;
        break;
      }

      // optional bytes telno = 4;
      case 4: {
        if (tag == 34) {
         parse_telno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_telno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_to_user_name;
        break;
      }

      // optional bytes to_user_name = 5;
      case 5: {
        if (tag == 42) {
         parse_to_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fund_serial_type;
        break;
      }

      // optional bytes fund_serial_type = 6;
      case 6: {
        if (tag == 50) {
         parse_fund_serial_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fund_serial_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fund_amount;
        break;
      }

      // optional bytes fund_amount = 7;
      case 7: {
        if (tag == 58) {
         parse_fund_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fund_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fund_status;
        break;
      }

      // optional bytes fund_status = 8;
      case 8: {
        if (tag == 66) {
         parse_fund_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fund_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fund_desc;
        break;
      }

      // optional bytes fund_desc = 9;
      case 9: {
        if (tag == 74) {
         parse_fund_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fund_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 10;
      case 10: {
        if (tag == 82) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.real_fund_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.real_fund_detail)
  return false;
#undef DO_
}

void real_fund_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.real_fund_detail)
  // optional bytes fund_serial_number = 1;
  if (has_fund_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fund_serial_number(), output);
  }

  // optional bytes fund_serial_name = 2;
  if (has_fund_serial_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fund_serial_name(), output);
  }

  // optional bytes user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->user_name(), output);
  }

  // optional bytes telno = 4;
  if (has_telno()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->telno(), output);
  }

  // optional bytes to_user_name = 5;
  if (has_to_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->to_user_name(), output);
  }

  // optional bytes fund_serial_type = 6;
  if (has_fund_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->fund_serial_type(), output);
  }

  // optional bytes fund_amount = 7;
  if (has_fund_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->fund_amount(), output);
  }

  // optional bytes fund_status = 8;
  if (has_fund_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->fund_status(), output);
  }

  // optional bytes fund_desc = 9;
  if (has_fund_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->fund_desc(), output);
  }

  // optional bytes update_time = 10;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.real_fund_detail)
}

::google::protobuf::uint8* real_fund_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.real_fund_detail)
  // optional bytes fund_serial_number = 1;
  if (has_fund_serial_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fund_serial_number(), target);
  }

  // optional bytes fund_serial_name = 2;
  if (has_fund_serial_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fund_serial_name(), target);
  }

  // optional bytes user_name = 3;
  if (has_user_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->user_name(), target);
  }

  // optional bytes telno = 4;
  if (has_telno()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->telno(), target);
  }

  // optional bytes to_user_name = 5;
  if (has_to_user_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->to_user_name(), target);
  }

  // optional bytes fund_serial_type = 6;
  if (has_fund_serial_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->fund_serial_type(), target);
  }

  // optional bytes fund_amount = 7;
  if (has_fund_amount()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->fund_amount(), target);
  }

  // optional bytes fund_status = 8;
  if (has_fund_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->fund_status(), target);
  }

  // optional bytes fund_desc = 9;
  if (has_fund_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->fund_desc(), target);
  }

  // optional bytes update_time = 10;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.real_fund_detail)
  return target;
}

int real_fund_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes fund_serial_number = 1;
    if (has_fund_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fund_serial_number());
    }

    // optional bytes fund_serial_name = 2;
    if (has_fund_serial_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fund_serial_name());
    }

    // optional bytes user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_name());
    }

    // optional bytes telno = 4;
    if (has_telno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->telno());
    }

    // optional bytes to_user_name = 5;
    if (has_to_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_user_name());
    }

    // optional bytes fund_serial_type = 6;
    if (has_fund_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fund_serial_type());
    }

    // optional bytes fund_amount = 7;
    if (has_fund_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fund_amount());
    }

    // optional bytes fund_status = 8;
    if (has_fund_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fund_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes fund_desc = 9;
    if (has_fund_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fund_desc());
    }

    // optional bytes update_time = 10;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void real_fund_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const real_fund_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const real_fund_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void real_fund_detail::MergeFrom(const real_fund_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fund_serial_number()) {
      set_fund_serial_number(from.fund_serial_number());
    }
    if (from.has_fund_serial_name()) {
      set_fund_serial_name(from.fund_serial_name());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_telno()) {
      set_telno(from.telno());
    }
    if (from.has_to_user_name()) {
      set_to_user_name(from.to_user_name());
    }
    if (from.has_fund_serial_type()) {
      set_fund_serial_type(from.fund_serial_type());
    }
    if (from.has_fund_amount()) {
      set_fund_amount(from.fund_amount());
    }
    if (from.has_fund_status()) {
      set_fund_status(from.fund_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fund_desc()) {
      set_fund_desc(from.fund_desc());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void real_fund_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void real_fund_detail::CopyFrom(const real_fund_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool real_fund_detail::IsInitialized() const {

  return true;
}

void real_fund_detail::Swap(real_fund_detail* other) {
  if (other != this) {
    std::swap(fund_serial_number_, other->fund_serial_number_);
    std::swap(fund_serial_name_, other->fund_serial_name_);
    std::swap(user_name_, other->user_name_);
    std::swap(telno_, other->telno_);
    std::swap(to_user_name_, other->to_user_name_);
    std::swap(fund_serial_type_, other->fund_serial_type_);
    std::swap(fund_amount_, other->fund_amount_);
    std::swap(fund_status_, other->fund_status_);
    std::swap(fund_desc_, other->fund_desc_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata real_fund_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = real_fund_detail_descriptor_;
  metadata.reflection = real_fund_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fund_flow_type::kTypeIdFieldNumber;
const int fund_flow_type::kTitleFieldNumber;
#endif  // !_MSC_VER

fund_flow_type::fund_flow_type()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.fund_flow_type)
}

void fund_flow_type::InitAsDefaultInstance() {
}

fund_flow_type::fund_flow_type(const fund_flow_type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.fund_flow_type)
}

void fund_flow_type::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fund_flow_type::~fund_flow_type() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.fund_flow_type)
  SharedDtor();
}

void fund_flow_type::SharedDtor() {
  if (type_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_id_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void fund_flow_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fund_flow_type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fund_flow_type_descriptor_;
}

const fund_flow_type& fund_flow_type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fund_flow_type* fund_flow_type::default_instance_ = NULL;

fund_flow_type* fund_flow_type::New() const {
  return new fund_flow_type;
}

void fund_flow_type::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type_id()) {
      if (type_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fund_flow_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.fund_flow_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes type_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional bytes title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.fund_flow_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.fund_flow_type)
  return false;
#undef DO_
}

void fund_flow_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.fund_flow_type)
  // optional bytes type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type_id(), output);
  }

  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.fund_flow_type)
}

::google::protobuf::uint8* fund_flow_type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.fund_flow_type)
  // optional bytes type_id = 1;
  if (has_type_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type_id(), target);
  }

  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.fund_flow_type)
  return target;
}

int fund_flow_type::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type_id());
    }

    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fund_flow_type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fund_flow_type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fund_flow_type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fund_flow_type::MergeFrom(const fund_flow_type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fund_flow_type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fund_flow_type::CopyFrom(const fund_flow_type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fund_flow_type::IsInitialized() const {

  return true;
}

void fund_flow_type::Swap(fund_flow_type* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fund_flow_type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fund_flow_type_descriptor_;
  metadata.reflection = fund_flow_type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_acount_info::kUserAcountFieldNumber;
const int user_acount_info::kDateTickFieldNumber;
#endif  // !_MSC_VER

user_acount_info::user_acount_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_acount_info)
}

void user_acount_info::InitAsDefaultInstance() {
}

user_acount_info::user_acount_info(const user_acount_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_acount_info)
}

void user_acount_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_acount_ = 0;
  date_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_acount_info::~user_acount_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_acount_info)
  SharedDtor();
}

void user_acount_info::SharedDtor() {
  if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_tick_;
  }
  if (this != default_instance_) {
  }
}

void user_acount_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_acount_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_acount_info_descriptor_;
}

const user_acount_info& user_acount_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_acount_info* user_acount_info::default_instance_ = NULL;

user_acount_info* user_acount_info::New() const {
  return new user_acount_info;
}

void user_acount_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_acount_ = 0;
    if (has_date_tick()) {
      if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_tick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_acount_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_acount_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_acount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_acount_)));
          set_has_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date_tick;
        break;
      }

      // optional bytes date_tick = 2;
      case 2: {
        if (tag == 18) {
         parse_date_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_acount_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_acount_info)
  return false;
#undef DO_
}

void user_acount_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_acount_info)
  // optional int32 user_acount = 1;
  if (has_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_acount(), output);
  }

  // optional bytes date_tick = 2;
  if (has_date_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->date_tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_acount_info)
}

::google::protobuf::uint8* user_acount_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_acount_info)
  // optional int32 user_acount = 1;
  if (has_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_acount(), target);
  }

  // optional bytes date_tick = 2;
  if (has_date_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->date_tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_acount_info)
  return target;
}

int user_acount_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_acount = 1;
    if (has_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_acount());
    }

    // optional bytes date_tick = 2;
    if (has_date_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date_tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_acount_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_acount_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_acount_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_acount_info::MergeFrom(const user_acount_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_acount()) {
      set_user_acount(from.user_acount());
    }
    if (from.has_date_tick()) {
      set_date_tick(from.date_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_acount_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_acount_info::CopyFrom(const user_acount_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_acount_info::IsInitialized() const {

  return true;
}

void user_acount_info::Swap(user_acount_info* other) {
  if (other != this) {
    std::swap(user_acount_, other->user_acount_);
    std::swap(date_tick_, other->date_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_acount_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_acount_info_descriptor_;
  metadata.reflection = user_acount_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int top_ten_user_acount_info::kAppVersionFieldNumber;
const int top_ten_user_acount_info::kInfoFieldNumber;
#endif  // !_MSC_VER

top_ten_user_acount_info::top_ten_user_acount_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.top_ten_user_acount_info)
}

void top_ten_user_acount_info::InitAsDefaultInstance() {
}

top_ten_user_acount_info::top_ten_user_acount_info(const top_ten_user_acount_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.top_ten_user_acount_info)
}

void top_ten_user_acount_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

top_ten_user_acount_info::~top_ten_user_acount_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.top_ten_user_acount_info)
  SharedDtor();
}

void top_ten_user_acount_info::SharedDtor() {
  if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_version_;
  }
  if (this != default_instance_) {
  }
}

void top_ten_user_acount_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* top_ten_user_acount_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return top_ten_user_acount_info_descriptor_;
}

const top_ten_user_acount_info& top_ten_user_acount_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

top_ten_user_acount_info* top_ten_user_acount_info::default_instance_ = NULL;

top_ten_user_acount_info* top_ten_user_acount_info::New() const {
  return new top_ten_user_acount_info;
}

void top_ten_user_acount_info::Clear() {
  if (has_app_version()) {
    if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      app_version_->clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool top_ten_user_acount_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.top_ten_user_acount_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes app_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.user_acount_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.top_ten_user_acount_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.top_ten_user_acount_info)
  return false;
#undef DO_
}

void top_ten_user_acount_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.top_ten_user_acount_info)
  // optional bytes app_version = 1;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->app_version(), output);
  }

  // repeated .ODP_main_frame.user_acount_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.top_ten_user_acount_info)
}

::google::protobuf::uint8* top_ten_user_acount_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.top_ten_user_acount_info)
  // optional bytes app_version = 1;
  if (has_app_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->app_version(), target);
  }

  // repeated .ODP_main_frame.user_acount_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.top_ten_user_acount_info)
  return target;
}

int top_ten_user_acount_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes app_version = 1;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_version());
    }

  }
  // repeated .ODP_main_frame.user_acount_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void top_ten_user_acount_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const top_ten_user_acount_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const top_ten_user_acount_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void top_ten_user_acount_info::MergeFrom(const top_ten_user_acount_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void top_ten_user_acount_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void top_ten_user_acount_info::CopyFrom(const top_ten_user_acount_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool top_ten_user_acount_info::IsInitialized() const {

  return true;
}

void top_ten_user_acount_info::Swap(top_ten_user_acount_info* other) {
  if (other != this) {
    std::swap(app_version_, other->app_version_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata top_ten_user_acount_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = top_ten_user_acount_info_descriptor_;
  metadata.reflection = top_ten_user_acount_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_count_info::kStartCountFieldNumber;
const int start_count_info::kStartCountRateFieldNumber;
const int start_count_info::kDateTickFieldNumber;
#endif  // !_MSC_VER

start_count_info::start_count_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.start_count_info)
}

void start_count_info::InitAsDefaultInstance() {
}

start_count_info::start_count_info(const start_count_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.start_count_info)
}

void start_count_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_count_ = 0;
  start_count_rate_ = 0;
  date_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_count_info::~start_count_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.start_count_info)
  SharedDtor();
}

void start_count_info::SharedDtor() {
  if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_tick_;
  }
  if (this != default_instance_) {
  }
}

void start_count_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_count_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_count_info_descriptor_;
}

const start_count_info& start_count_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

start_count_info* start_count_info::default_instance_ = NULL;

start_count_info* start_count_info::New() const {
  return new start_count_info;
}

void start_count_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<start_count_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_count_, start_count_rate_);
    if (has_date_tick()) {
      if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_count_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.start_count_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_count_)));
          set_has_start_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_start_count_rate;
        break;
      }

      // optional float start_count_rate = 2;
      case 2: {
        if (tag == 21) {
         parse_start_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_count_rate_)));
          set_has_start_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date_tick;
        break;
      }

      // optional bytes date_tick = 3;
      case 3: {
        if (tag == 26) {
         parse_date_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.start_count_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.start_count_info)
  return false;
#undef DO_
}

void start_count_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.start_count_info)
  // optional int32 start_count = 1;
  if (has_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_count(), output);
  }

  // optional float start_count_rate = 2;
  if (has_start_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_count_rate(), output);
  }

  // optional bytes date_tick = 3;
  if (has_date_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->date_tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.start_count_info)
}

::google::protobuf::uint8* start_count_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.start_count_info)
  // optional int32 start_count = 1;
  if (has_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_count(), target);
  }

  // optional float start_count_rate = 2;
  if (has_start_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start_count_rate(), target);
  }

  // optional bytes date_tick = 3;
  if (has_date_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->date_tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.start_count_info)
  return target;
}

int start_count_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start_count = 1;
    if (has_start_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_count());
    }

    // optional float start_count_rate = 2;
    if (has_start_count_rate()) {
      total_size += 1 + 4;
    }

    // optional bytes date_tick = 3;
    if (has_date_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date_tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_count_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_count_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_count_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_count_info::MergeFrom(const start_count_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_count()) {
      set_start_count(from.start_count());
    }
    if (from.has_start_count_rate()) {
      set_start_count_rate(from.start_count_rate());
    }
    if (from.has_date_tick()) {
      set_date_tick(from.date_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_count_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_count_info::CopyFrom(const start_count_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_count_info::IsInitialized() const {

  return true;
}

void start_count_info::Swap(start_count_info* other) {
  if (other != this) {
    std::swap(start_count_, other->start_count_);
    std::swap(start_count_rate_, other->start_count_rate_);
    std::swap(date_tick_, other->date_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_count_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_count_info_descriptor_;
  metadata.reflection = start_count_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_analyze_info::kUserCountFieldNumber;
const int user_analyze_info::kUserCountRateFieldNumber;
const int user_analyze_info::kDateTickFieldNumber;
#endif  // !_MSC_VER

user_analyze_info::user_analyze_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_analyze_info)
}

void user_analyze_info::InitAsDefaultInstance() {
}

user_analyze_info::user_analyze_info(const user_analyze_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_analyze_info)
}

void user_analyze_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_count_ = 0;
  user_count_rate_ = 0;
  date_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_analyze_info::~user_analyze_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_analyze_info)
  SharedDtor();
}

void user_analyze_info::SharedDtor() {
  if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_tick_;
  }
  if (this != default_instance_) {
  }
}

void user_analyze_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_analyze_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_analyze_info_descriptor_;
}

const user_analyze_info& user_analyze_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_analyze_info* user_analyze_info::default_instance_ = NULL;

user_analyze_info* user_analyze_info::New() const {
  return new user_analyze_info;
}

void user_analyze_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_analyze_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_count_, user_count_rate_);
    if (has_date_tick()) {
      if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_analyze_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_analyze_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_user_count_rate;
        break;
      }

      // optional float user_count_rate = 2;
      case 2: {
        if (tag == 21) {
         parse_user_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_count_rate_)));
          set_has_user_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date_tick;
        break;
      }

      // optional bytes date_tick = 3;
      case 3: {
        if (tag == 26) {
         parse_date_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_analyze_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_analyze_info)
  return false;
#undef DO_
}

void user_analyze_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_analyze_info)
  // optional int32 user_count = 1;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_count(), output);
  }

  // optional float user_count_rate = 2;
  if (has_user_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->user_count_rate(), output);
  }

  // optional bytes date_tick = 3;
  if (has_date_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->date_tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_analyze_info)
}

::google::protobuf::uint8* user_analyze_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_analyze_info)
  // optional int32 user_count = 1;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_count(), target);
  }

  // optional float user_count_rate = 2;
  if (has_user_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->user_count_rate(), target);
  }

  // optional bytes date_tick = 3;
  if (has_date_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->date_tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_analyze_info)
  return target;
}

int user_analyze_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_count = 1;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }

    // optional float user_count_rate = 2;
    if (has_user_count_rate()) {
      total_size += 1 + 4;
    }

    // optional bytes date_tick = 3;
    if (has_date_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date_tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_analyze_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_analyze_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_analyze_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_analyze_info::MergeFrom(const user_analyze_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
    if (from.has_user_count_rate()) {
      set_user_count_rate(from.user_count_rate());
    }
    if (from.has_date_tick()) {
      set_date_tick(from.date_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_analyze_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_analyze_info::CopyFrom(const user_analyze_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_analyze_info::IsInitialized() const {

  return true;
}

void user_analyze_info::Swap(user_analyze_info* other) {
  if (other != this) {
    std::swap(user_count_, other->user_count_);
    std::swap(user_count_rate_, other->user_count_rate_);
    std::swap(date_tick_, other->date_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_analyze_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_analyze_info_descriptor_;
  metadata.reflection = user_analyze_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_freshness_info::kNewAddUserCountFieldNumber;
const int user_freshness_info::kActiveUserCountFieldNumber;
const int user_freshness_info::kNewAddCountRateFieldNumber;
const int user_freshness_info::kDateTickFieldNumber;
#endif  // !_MSC_VER

user_freshness_info::user_freshness_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_freshness_info)
}

void user_freshness_info::InitAsDefaultInstance() {
}

user_freshness_info::user_freshness_info(const user_freshness_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_freshness_info)
}

void user_freshness_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  new_add_user_count_ = 0;
  active_user_count_ = 0;
  new_add_count_rate_ = 0;
  date_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_freshness_info::~user_freshness_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_freshness_info)
  SharedDtor();
}

void user_freshness_info::SharedDtor() {
  if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_tick_;
  }
  if (this != default_instance_) {
  }
}

void user_freshness_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_freshness_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_freshness_info_descriptor_;
}

const user_freshness_info& user_freshness_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_freshness_info* user_freshness_info::default_instance_ = NULL;

user_freshness_info* user_freshness_info::New() const {
  return new user_freshness_info;
}

void user_freshness_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_freshness_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(new_add_user_count_, active_user_count_);
    new_add_count_rate_ = 0;
    if (has_date_tick()) {
      if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_freshness_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_freshness_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 new_add_user_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_add_user_count_)));
          set_has_new_add_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active_user_count;
        break;
      }

      // optional int32 active_user_count = 2;
      case 2: {
        if (tag == 16) {
         parse_active_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_user_count_)));
          set_has_active_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_new_add_count_rate;
        break;
      }

      // optional float new_add_count_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_new_add_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_add_count_rate_)));
          set_has_new_add_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_date_tick;
        break;
      }

      // optional bytes date_tick = 4;
      case 4: {
        if (tag == 34) {
         parse_date_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_freshness_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_freshness_info)
  return false;
#undef DO_
}

void user_freshness_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_freshness_info)
  // optional int32 new_add_user_count = 1;
  if (has_new_add_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_add_user_count(), output);
  }

  // optional int32 active_user_count = 2;
  if (has_active_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_user_count(), output);
  }

  // optional float new_add_count_rate = 3;
  if (has_new_add_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->new_add_count_rate(), output);
  }

  // optional bytes date_tick = 4;
  if (has_date_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->date_tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_freshness_info)
}

::google::protobuf::uint8* user_freshness_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_freshness_info)
  // optional int32 new_add_user_count = 1;
  if (has_new_add_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_add_user_count(), target);
  }

  // optional int32 active_user_count = 2;
  if (has_active_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active_user_count(), target);
  }

  // optional float new_add_count_rate = 3;
  if (has_new_add_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->new_add_count_rate(), target);
  }

  // optional bytes date_tick = 4;
  if (has_date_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->date_tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_freshness_info)
  return target;
}

int user_freshness_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 new_add_user_count = 1;
    if (has_new_add_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_add_user_count());
    }

    // optional int32 active_user_count = 2;
    if (has_active_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_user_count());
    }

    // optional float new_add_count_rate = 3;
    if (has_new_add_count_rate()) {
      total_size += 1 + 4;
    }

    // optional bytes date_tick = 4;
    if (has_date_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date_tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_freshness_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_freshness_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_freshness_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_freshness_info::MergeFrom(const user_freshness_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_add_user_count()) {
      set_new_add_user_count(from.new_add_user_count());
    }
    if (from.has_active_user_count()) {
      set_active_user_count(from.active_user_count());
    }
    if (from.has_new_add_count_rate()) {
      set_new_add_count_rate(from.new_add_count_rate());
    }
    if (from.has_date_tick()) {
      set_date_tick(from.date_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_freshness_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_freshness_info::CopyFrom(const user_freshness_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_freshness_info::IsInitialized() const {

  return true;
}

void user_freshness_info::Swap(user_freshness_info* other) {
  if (other != this) {
    std::swap(new_add_user_count_, other->new_add_user_count_);
    std::swap(active_user_count_, other->active_user_count_);
    std::swap(new_add_count_rate_, other->new_add_count_rate_);
    std::swap(date_tick_, other->date_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_freshness_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_freshness_info_descriptor_;
  metadata.reflection = user_freshness_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_retain_rate_info::kOnedayFieldNumber;
const int user_retain_rate_info::kTwodayFieldNumber;
const int user_retain_rate_info::kThreedayFieldNumber;
const int user_retain_rate_info::kFourdayFieldNumber;
const int user_retain_rate_info::kFivedayFieldNumber;
const int user_retain_rate_info::kSixdayFieldNumber;
const int user_retain_rate_info::kSevendayFieldNumber;
const int user_retain_rate_info::kFourteendayFieldNumber;
const int user_retain_rate_info::kThirtydayFieldNumber;
#endif  // !_MSC_VER

user_retain_rate_info::user_retain_rate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_retain_rate_info)
}

void user_retain_rate_info::InitAsDefaultInstance() {
}

user_retain_rate_info::user_retain_rate_info(const user_retain_rate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_retain_rate_info)
}

void user_retain_rate_info::SharedCtor() {
  _cached_size_ = 0;
  oneday_ = 0;
  twoday_ = 0;
  threeday_ = 0;
  fourday_ = 0;
  fiveday_ = 0;
  sixday_ = 0;
  sevenday_ = 0;
  fourteenday_ = 0;
  thirtyday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_retain_rate_info::~user_retain_rate_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_retain_rate_info)
  SharedDtor();
}

void user_retain_rate_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_retain_rate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_retain_rate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_retain_rate_info_descriptor_;
}

const user_retain_rate_info& user_retain_rate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_retain_rate_info* user_retain_rate_info::default_instance_ = NULL;

user_retain_rate_info* user_retain_rate_info::New() const {
  return new user_retain_rate_info;
}

void user_retain_rate_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_retain_rate_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(oneday_, fourteenday_);
  }
  thirtyday_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_retain_rate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_retain_rate_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float oneday = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oneday_)));
          set_has_oneday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_twoday;
        break;
      }

      // optional float twoday = 2;
      case 2: {
        if (tag == 21) {
         parse_twoday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &twoday_)));
          set_has_twoday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_threeday;
        break;
      }

      // optional float threeday = 3;
      case 3: {
        if (tag == 29) {
         parse_threeday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threeday_)));
          set_has_threeday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_fourday;
        break;
      }

      // optional float fourday = 4;
      case 4: {
        if (tag == 37) {
         parse_fourday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fourday_)));
          set_has_fourday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_fiveday;
        break;
      }

      // optional float fiveday = 5;
      case 5: {
        if (tag == 45) {
         parse_fiveday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fiveday_)));
          set_has_fiveday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sixday;
        break;
      }

      // optional float sixday = 6;
      case 6: {
        if (tag == 53) {
         parse_sixday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sixday_)));
          set_has_sixday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_sevenday;
        break;
      }

      // optional float sevenday = 7;
      case 7: {
        if (tag == 61) {
         parse_sevenday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sevenday_)));
          set_has_sevenday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_fourteenday;
        break;
      }

      // optional float fourteenday = 14;
      case 14: {
        if (tag == 117) {
         parse_fourteenday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fourteenday_)));
          set_has_fourteenday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_thirtyday;
        break;
      }

      // optional float thirtyday = 30;
      case 30: {
        if (tag == 245) {
         parse_thirtyday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thirtyday_)));
          set_has_thirtyday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_retain_rate_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_retain_rate_info)
  return false;
#undef DO_
}

void user_retain_rate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_retain_rate_info)
  // optional float oneday = 1;
  if (has_oneday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->oneday(), output);
  }

  // optional float twoday = 2;
  if (has_twoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->twoday(), output);
  }

  // optional float threeday = 3;
  if (has_threeday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threeday(), output);
  }

  // optional float fourday = 4;
  if (has_fourday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fourday(), output);
  }

  // optional float fiveday = 5;
  if (has_fiveday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fiveday(), output);
  }

  // optional float sixday = 6;
  if (has_sixday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sixday(), output);
  }

  // optional float sevenday = 7;
  if (has_sevenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sevenday(), output);
  }

  // optional float fourteenday = 14;
  if (has_fourteenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->fourteenday(), output);
  }

  // optional float thirtyday = 30;
  if (has_thirtyday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->thirtyday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_retain_rate_info)
}

::google::protobuf::uint8* user_retain_rate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_retain_rate_info)
  // optional float oneday = 1;
  if (has_oneday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->oneday(), target);
  }

  // optional float twoday = 2;
  if (has_twoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->twoday(), target);
  }

  // optional float threeday = 3;
  if (has_threeday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threeday(), target);
  }

  // optional float fourday = 4;
  if (has_fourday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fourday(), target);
  }

  // optional float fiveday = 5;
  if (has_fiveday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fiveday(), target);
  }

  // optional float sixday = 6;
  if (has_sixday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sixday(), target);
  }

  // optional float sevenday = 7;
  if (has_sevenday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->sevenday(), target);
  }

  // optional float fourteenday = 14;
  if (has_fourteenday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->fourteenday(), target);
  }

  // optional float thirtyday = 30;
  if (has_thirtyday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->thirtyday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_retain_rate_info)
  return target;
}

int user_retain_rate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float oneday = 1;
    if (has_oneday()) {
      total_size += 1 + 4;
    }

    // optional float twoday = 2;
    if (has_twoday()) {
      total_size += 1 + 4;
    }

    // optional float threeday = 3;
    if (has_threeday()) {
      total_size += 1 + 4;
    }

    // optional float fourday = 4;
    if (has_fourday()) {
      total_size += 1 + 4;
    }

    // optional float fiveday = 5;
    if (has_fiveday()) {
      total_size += 1 + 4;
    }

    // optional float sixday = 6;
    if (has_sixday()) {
      total_size += 1 + 4;
    }

    // optional float sevenday = 7;
    if (has_sevenday()) {
      total_size += 1 + 4;
    }

    // optional float fourteenday = 14;
    if (has_fourteenday()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float thirtyday = 30;
    if (has_thirtyday()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_retain_rate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_retain_rate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_retain_rate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_retain_rate_info::MergeFrom(const user_retain_rate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oneday()) {
      set_oneday(from.oneday());
    }
    if (from.has_twoday()) {
      set_twoday(from.twoday());
    }
    if (from.has_threeday()) {
      set_threeday(from.threeday());
    }
    if (from.has_fourday()) {
      set_fourday(from.fourday());
    }
    if (from.has_fiveday()) {
      set_fiveday(from.fiveday());
    }
    if (from.has_sixday()) {
      set_sixday(from.sixday());
    }
    if (from.has_sevenday()) {
      set_sevenday(from.sevenday());
    }
    if (from.has_fourteenday()) {
      set_fourteenday(from.fourteenday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_thirtyday()) {
      set_thirtyday(from.thirtyday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_retain_rate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_retain_rate_info::CopyFrom(const user_retain_rate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_retain_rate_info::IsInitialized() const {

  return true;
}

void user_retain_rate_info::Swap(user_retain_rate_info* other) {
  if (other != this) {
    std::swap(oneday_, other->oneday_);
    std::swap(twoday_, other->twoday_);
    std::swap(threeday_, other->threeday_);
    std::swap(fourday_, other->fourday_);
    std::swap(fiveday_, other->fiveday_);
    std::swap(sixday_, other->sixday_);
    std::swap(sevenday_, other->sevenday_);
    std::swap(fourteenday_, other->fourteenday_);
    std::swap(thirtyday_, other->thirtyday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_retain_rate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_retain_rate_info_descriptor_;
  metadata.reflection = user_retain_rate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_retain_info::kNewAddUserFieldNumber;
const int user_retain_info::kUserRetainRateFieldNumber;
const int user_retain_info::kFirstUseDateFieldNumber;
#endif  // !_MSC_VER

user_retain_info::user_retain_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_retain_info)
}

void user_retain_info::InitAsDefaultInstance() {
  user_retain_rate_ = const_cast< ::ODP_main_frame::user_retain_rate_info*>(&::ODP_main_frame::user_retain_rate_info::default_instance());
}

user_retain_info::user_retain_info(const user_retain_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_retain_info)
}

void user_retain_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  new_add_user_ = 0;
  user_retain_rate_ = NULL;
  first_use_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_retain_info::~user_retain_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_retain_info)
  SharedDtor();
}

void user_retain_info::SharedDtor() {
  if (first_use_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_use_date_;
  }
  if (this != default_instance_) {
    delete user_retain_rate_;
  }
}

void user_retain_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_retain_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_retain_info_descriptor_;
}

const user_retain_info& user_retain_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_retain_info* user_retain_info::default_instance_ = NULL;

user_retain_info* user_retain_info::New() const {
  return new user_retain_info;
}

void user_retain_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    new_add_user_ = 0;
    if (has_user_retain_rate()) {
      if (user_retain_rate_ != NULL) user_retain_rate_->::ODP_main_frame::user_retain_rate_info::Clear();
    }
    if (has_first_use_date()) {
      if (first_use_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_use_date_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_retain_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_retain_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 new_add_user = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_add_user_)));
          set_has_new_add_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_retain_rate;
        break;
      }

      // optional .ODP_main_frame.user_retain_rate_info user_retain_rate = 2;
      case 2: {
        if (tag == 18) {
         parse_user_retain_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_retain_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_first_use_date;
        break;
      }

      // optional bytes first_use_date = 3;
      case 3: {
        if (tag == 26) {
         parse_first_use_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_use_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_retain_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_retain_info)
  return false;
#undef DO_
}

void user_retain_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_retain_info)
  // optional int32 new_add_user = 1;
  if (has_new_add_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_add_user(), output);
  }

  // optional .ODP_main_frame.user_retain_rate_info user_retain_rate = 2;
  if (has_user_retain_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_retain_rate(), output);
  }

  // optional bytes first_use_date = 3;
  if (has_first_use_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->first_use_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_retain_info)
}

::google::protobuf::uint8* user_retain_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_retain_info)
  // optional int32 new_add_user = 1;
  if (has_new_add_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_add_user(), target);
  }

  // optional .ODP_main_frame.user_retain_rate_info user_retain_rate = 2;
  if (has_user_retain_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_retain_rate(), target);
  }

  // optional bytes first_use_date = 3;
  if (has_first_use_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->first_use_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_retain_info)
  return target;
}

int user_retain_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 new_add_user = 1;
    if (has_new_add_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_add_user());
    }

    // optional .ODP_main_frame.user_retain_rate_info user_retain_rate = 2;
    if (has_user_retain_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_retain_rate());
    }

    // optional bytes first_use_date = 3;
    if (has_first_use_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_use_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_retain_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_retain_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_retain_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_retain_info::MergeFrom(const user_retain_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_add_user()) {
      set_new_add_user(from.new_add_user());
    }
    if (from.has_user_retain_rate()) {
      mutable_user_retain_rate()->::ODP_main_frame::user_retain_rate_info::MergeFrom(from.user_retain_rate());
    }
    if (from.has_first_use_date()) {
      set_first_use_date(from.first_use_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_retain_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_retain_info::CopyFrom(const user_retain_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_retain_info::IsInitialized() const {

  return true;
}

void user_retain_info::Swap(user_retain_info* other) {
  if (other != this) {
    std::swap(new_add_user_, other->new_add_user_);
    std::swap(user_retain_rate_, other->user_retain_rate_);
    std::swap(first_use_date_, other->first_use_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_retain_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_retain_info_descriptor_;
  metadata.reflection = user_retain_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int app_version_statistics::kAppVersionFieldNumber;
const int app_version_statistics::kTotalUserAcountFieldNumber;
const int app_version_statistics::kTotalUserRateFieldNumber;
const int app_version_statistics::kNewAddUserAcountFieldNumber;
const int app_version_statistics::kNewAddUserRateFieldNumber;
const int app_version_statistics::kUpgradeUserAcountFieldNumber;
const int app_version_statistics::kUpgradeUserRateFieldNumber;
const int app_version_statistics::kNewUpgradeUserAcountFieldNumber;
const int app_version_statistics::kNewUpgradeUserRateFieldNumber;
const int app_version_statistics::kActiveUserAcountFieldNumber;
const int app_version_statistics::kActiveUserRateFieldNumber;
const int app_version_statistics::kStartAcountFieldNumber;
const int app_version_statistics::kStartAcountRateFieldNumber;
#endif  // !_MSC_VER

app_version_statistics::app_version_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.app_version_statistics)
}

void app_version_statistics::InitAsDefaultInstance() {
}

app_version_statistics::app_version_statistics(const app_version_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.app_version_statistics)
}

void app_version_statistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_user_acount_ = 0;
  total_user_rate_ = 0;
  new_add_user_acount_ = 0;
  new_add_user_rate_ = 0;
  upgrade_user_acount_ = 0;
  upgrade_user_rate_ = 0;
  new_upgrade_user_acount_ = 0;
  new_upgrade_user_rate_ = 0;
  active_user_acount_ = 0;
  active_user_rate_ = 0;
  start_acount_ = 0;
  start_acount_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

app_version_statistics::~app_version_statistics() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.app_version_statistics)
  SharedDtor();
}

void app_version_statistics::SharedDtor() {
  if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_version_;
  }
  if (this != default_instance_) {
  }
}

void app_version_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_version_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_version_statistics_descriptor_;
}

const app_version_statistics& app_version_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

app_version_statistics* app_version_statistics::default_instance_ = NULL;

app_version_statistics* app_version_statistics::New() const {
  return new app_version_statistics;
}

void app_version_statistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<app_version_statistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(total_user_acount_, new_upgrade_user_acount_);
    if (has_app_version()) {
      if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_version_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(new_upgrade_user_rate_, start_acount_rate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool app_version_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.app_version_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes app_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_user_acount;
        break;
      }

      // optional int32 total_user_acount = 2;
      case 2: {
        if (tag == 16) {
         parse_total_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_user_acount_)));
          set_has_total_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_total_user_rate;
        break;
      }

      // optional float total_user_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_total_user_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_user_rate_)));
          set_has_total_user_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_add_user_acount;
        break;
      }

      // optional int32 new_add_user_acount = 4;
      case 4: {
        if (tag == 32) {
         parse_new_add_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_add_user_acount_)));
          set_has_new_add_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_new_add_user_rate;
        break;
      }

      // optional float new_add_user_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_new_add_user_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_add_user_rate_)));
          set_has_new_add_user_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_upgrade_user_acount;
        break;
      }

      // optional int32 upgrade_user_acount = 6;
      case 6: {
        if (tag == 48) {
         parse_upgrade_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_user_acount_)));
          set_has_upgrade_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_upgrade_user_rate;
        break;
      }

      // optional float upgrade_user_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_upgrade_user_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upgrade_user_rate_)));
          set_has_upgrade_user_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_new_upgrade_user_acount;
        break;
      }

      // optional int32 new_upgrade_user_acount = 8;
      case 8: {
        if (tag == 64) {
         parse_new_upgrade_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_upgrade_user_acount_)));
          set_has_new_upgrade_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_new_upgrade_user_rate;
        break;
      }

      // optional float new_upgrade_user_rate = 9;
      case 9: {
        if (tag == 77) {
         parse_new_upgrade_user_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_upgrade_user_rate_)));
          set_has_new_upgrade_user_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_active_user_acount;
        break;
      }

      // optional int32 active_user_acount = 10;
      case 10: {
        if (tag == 80) {
         parse_active_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_user_acount_)));
          set_has_active_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_active_user_rate;
        break;
      }

      // optional float active_user_rate = 11;
      case 11: {
        if (tag == 93) {
         parse_active_user_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &active_user_rate_)));
          set_has_active_user_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_start_acount;
        break;
      }

      // optional int32 start_acount = 12;
      case 12: {
        if (tag == 96) {
         parse_start_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_acount_)));
          set_has_start_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_start_acount_rate;
        break;
      }

      // optional float start_acount_rate = 13;
      case 13: {
        if (tag == 109) {
         parse_start_acount_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_acount_rate_)));
          set_has_start_acount_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.app_version_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.app_version_statistics)
  return false;
#undef DO_
}

void app_version_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.app_version_statistics)
  // optional bytes app_version = 1;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->app_version(), output);
  }

  // optional int32 total_user_acount = 2;
  if (has_total_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_user_acount(), output);
  }

  // optional float total_user_rate = 3;
  if (has_total_user_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->total_user_rate(), output);
  }

  // optional int32 new_add_user_acount = 4;
  if (has_new_add_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_add_user_acount(), output);
  }

  // optional float new_add_user_rate = 5;
  if (has_new_add_user_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->new_add_user_rate(), output);
  }

  // optional int32 upgrade_user_acount = 6;
  if (has_upgrade_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upgrade_user_acount(), output);
  }

  // optional float upgrade_user_rate = 7;
  if (has_upgrade_user_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->upgrade_user_rate(), output);
  }

  // optional int32 new_upgrade_user_acount = 8;
  if (has_new_upgrade_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->new_upgrade_user_acount(), output);
  }

  // optional float new_upgrade_user_rate = 9;
  if (has_new_upgrade_user_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->new_upgrade_user_rate(), output);
  }

  // optional int32 active_user_acount = 10;
  if (has_active_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->active_user_acount(), output);
  }

  // optional float active_user_rate = 11;
  if (has_active_user_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->active_user_rate(), output);
  }

  // optional int32 start_acount = 12;
  if (has_start_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->start_acount(), output);
  }

  // optional float start_acount_rate = 13;
  if (has_start_acount_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->start_acount_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.app_version_statistics)
}

::google::protobuf::uint8* app_version_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.app_version_statistics)
  // optional bytes app_version = 1;
  if (has_app_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->app_version(), target);
  }

  // optional int32 total_user_acount = 2;
  if (has_total_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_user_acount(), target);
  }

  // optional float total_user_rate = 3;
  if (has_total_user_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->total_user_rate(), target);
  }

  // optional int32 new_add_user_acount = 4;
  if (has_new_add_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_add_user_acount(), target);
  }

  // optional float new_add_user_rate = 5;
  if (has_new_add_user_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->new_add_user_rate(), target);
  }

  // optional int32 upgrade_user_acount = 6;
  if (has_upgrade_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upgrade_user_acount(), target);
  }

  // optional float upgrade_user_rate = 7;
  if (has_upgrade_user_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->upgrade_user_rate(), target);
  }

  // optional int32 new_upgrade_user_acount = 8;
  if (has_new_upgrade_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->new_upgrade_user_acount(), target);
  }

  // optional float new_upgrade_user_rate = 9;
  if (has_new_upgrade_user_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->new_upgrade_user_rate(), target);
  }

  // optional int32 active_user_acount = 10;
  if (has_active_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->active_user_acount(), target);
  }

  // optional float active_user_rate = 11;
  if (has_active_user_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->active_user_rate(), target);
  }

  // optional int32 start_acount = 12;
  if (has_start_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->start_acount(), target);
  }

  // optional float start_acount_rate = 13;
  if (has_start_acount_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->start_acount_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.app_version_statistics)
  return target;
}

int app_version_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes app_version = 1;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_version());
    }

    // optional int32 total_user_acount = 2;
    if (has_total_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_user_acount());
    }

    // optional float total_user_rate = 3;
    if (has_total_user_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 new_add_user_acount = 4;
    if (has_new_add_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_add_user_acount());
    }

    // optional float new_add_user_rate = 5;
    if (has_new_add_user_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 upgrade_user_acount = 6;
    if (has_upgrade_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_user_acount());
    }

    // optional float upgrade_user_rate = 7;
    if (has_upgrade_user_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 new_upgrade_user_acount = 8;
    if (has_new_upgrade_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_upgrade_user_acount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float new_upgrade_user_rate = 9;
    if (has_new_upgrade_user_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 active_user_acount = 10;
    if (has_active_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_user_acount());
    }

    // optional float active_user_rate = 11;
    if (has_active_user_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 start_acount = 12;
    if (has_start_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_acount());
    }

    // optional float start_acount_rate = 13;
    if (has_start_acount_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_version_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const app_version_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const app_version_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void app_version_statistics::MergeFrom(const app_version_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_total_user_acount()) {
      set_total_user_acount(from.total_user_acount());
    }
    if (from.has_total_user_rate()) {
      set_total_user_rate(from.total_user_rate());
    }
    if (from.has_new_add_user_acount()) {
      set_new_add_user_acount(from.new_add_user_acount());
    }
    if (from.has_new_add_user_rate()) {
      set_new_add_user_rate(from.new_add_user_rate());
    }
    if (from.has_upgrade_user_acount()) {
      set_upgrade_user_acount(from.upgrade_user_acount());
    }
    if (from.has_upgrade_user_rate()) {
      set_upgrade_user_rate(from.upgrade_user_rate());
    }
    if (from.has_new_upgrade_user_acount()) {
      set_new_upgrade_user_acount(from.new_upgrade_user_acount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_upgrade_user_rate()) {
      set_new_upgrade_user_rate(from.new_upgrade_user_rate());
    }
    if (from.has_active_user_acount()) {
      set_active_user_acount(from.active_user_acount());
    }
    if (from.has_active_user_rate()) {
      set_active_user_rate(from.active_user_rate());
    }
    if (from.has_start_acount()) {
      set_start_acount(from.start_acount());
    }
    if (from.has_start_acount_rate()) {
      set_start_acount_rate(from.start_acount_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void app_version_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_version_statistics::CopyFrom(const app_version_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_version_statistics::IsInitialized() const {

  return true;
}

void app_version_statistics::Swap(app_version_statistics* other) {
  if (other != this) {
    std::swap(app_version_, other->app_version_);
    std::swap(total_user_acount_, other->total_user_acount_);
    std::swap(total_user_rate_, other->total_user_rate_);
    std::swap(new_add_user_acount_, other->new_add_user_acount_);
    std::swap(new_add_user_rate_, other->new_add_user_rate_);
    std::swap(upgrade_user_acount_, other->upgrade_user_acount_);
    std::swap(upgrade_user_rate_, other->upgrade_user_rate_);
    std::swap(new_upgrade_user_acount_, other->new_upgrade_user_acount_);
    std::swap(new_upgrade_user_rate_, other->new_upgrade_user_rate_);
    std::swap(active_user_acount_, other->active_user_acount_);
    std::swap(active_user_rate_, other->active_user_rate_);
    std::swap(start_acount_, other->start_acount_);
    std::swap(start_acount_rate_, other->start_acount_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata app_version_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_version_statistics_descriptor_;
  metadata.reflection = app_version_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int app_version_detail::kDateTickFieldNumber;
const int app_version_detail::kNewAddUserAcountFieldNumber;
const int app_version_detail::kUpgradeUserAcountFieldNumber;
const int app_version_detail::kActiveUserAcountFieldNumber;
const int app_version_detail::kAcumulateUserAcountFieldNumber;
const int app_version_detail::kStartAcountFieldNumber;
#endif  // !_MSC_VER

app_version_detail::app_version_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.app_version_detail)
}

void app_version_detail::InitAsDefaultInstance() {
}

app_version_detail::app_version_detail(const app_version_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.app_version_detail)
}

void app_version_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  date_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_add_user_acount_ = 0;
  upgrade_user_acount_ = 0;
  active_user_acount_ = 0;
  acumulate_user_acount_ = 0;
  start_acount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

app_version_detail::~app_version_detail() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.app_version_detail)
  SharedDtor();
}

void app_version_detail::SharedDtor() {
  if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_tick_;
  }
  if (this != default_instance_) {
  }
}

void app_version_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* app_version_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return app_version_detail_descriptor_;
}

const app_version_detail& app_version_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

app_version_detail* app_version_detail::default_instance_ = NULL;

app_version_detail* app_version_detail::New() const {
  return new app_version_detail;
}

void app_version_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<app_version_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(new_add_user_acount_, start_acount_);
    if (has_date_tick()) {
      if (date_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool app_version_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.app_version_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes date_tick = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_add_user_acount;
        break;
      }

      // optional int32 new_add_user_acount = 2;
      case 2: {
        if (tag == 16) {
         parse_new_add_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_add_user_acount_)));
          set_has_new_add_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_user_acount;
        break;
      }

      // optional int32 upgrade_user_acount = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_user_acount_)));
          set_has_upgrade_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active_user_acount;
        break;
      }

      // optional int32 active_user_acount = 4;
      case 4: {
        if (tag == 32) {
         parse_active_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_user_acount_)));
          set_has_active_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_acumulate_user_acount;
        break;
      }

      // optional int32 acumulate_user_acount = 5;
      case 5: {
        if (tag == 40) {
         parse_acumulate_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acumulate_user_acount_)));
          set_has_acumulate_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_start_acount;
        break;
      }

      // optional int32 start_acount = 6;
      case 6: {
        if (tag == 48) {
         parse_start_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_acount_)));
          set_has_start_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.app_version_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.app_version_detail)
  return false;
#undef DO_
}

void app_version_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.app_version_detail)
  // optional bytes date_tick = 1;
  if (has_date_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->date_tick(), output);
  }

  // optional int32 new_add_user_acount = 2;
  if (has_new_add_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_add_user_acount(), output);
  }

  // optional int32 upgrade_user_acount = 3;
  if (has_upgrade_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upgrade_user_acount(), output);
  }

  // optional int32 active_user_acount = 4;
  if (has_active_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active_user_acount(), output);
  }

  // optional int32 acumulate_user_acount = 5;
  if (has_acumulate_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->acumulate_user_acount(), output);
  }

  // optional int32 start_acount = 6;
  if (has_start_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start_acount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.app_version_detail)
}

::google::protobuf::uint8* app_version_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.app_version_detail)
  // optional bytes date_tick = 1;
  if (has_date_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->date_tick(), target);
  }

  // optional int32 new_add_user_acount = 2;
  if (has_new_add_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_add_user_acount(), target);
  }

  // optional int32 upgrade_user_acount = 3;
  if (has_upgrade_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upgrade_user_acount(), target);
  }

  // optional int32 active_user_acount = 4;
  if (has_active_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active_user_acount(), target);
  }

  // optional int32 acumulate_user_acount = 5;
  if (has_acumulate_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->acumulate_user_acount(), target);
  }

  // optional int32 start_acount = 6;
  if (has_start_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start_acount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.app_version_detail)
  return target;
}

int app_version_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes date_tick = 1;
    if (has_date_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date_tick());
    }

    // optional int32 new_add_user_acount = 2;
    if (has_new_add_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_add_user_acount());
    }

    // optional int32 upgrade_user_acount = 3;
    if (has_upgrade_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_user_acount());
    }

    // optional int32 active_user_acount = 4;
    if (has_active_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_user_acount());
    }

    // optional int32 acumulate_user_acount = 5;
    if (has_acumulate_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acumulate_user_acount());
    }

    // optional int32 start_acount = 6;
    if (has_start_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_acount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void app_version_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const app_version_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const app_version_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void app_version_detail::MergeFrom(const app_version_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_tick()) {
      set_date_tick(from.date_tick());
    }
    if (from.has_new_add_user_acount()) {
      set_new_add_user_acount(from.new_add_user_acount());
    }
    if (from.has_upgrade_user_acount()) {
      set_upgrade_user_acount(from.upgrade_user_acount());
    }
    if (from.has_active_user_acount()) {
      set_active_user_acount(from.active_user_acount());
    }
    if (from.has_acumulate_user_acount()) {
      set_acumulate_user_acount(from.acumulate_user_acount());
    }
    if (from.has_start_acount()) {
      set_start_acount(from.start_acount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void app_version_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void app_version_detail::CopyFrom(const app_version_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool app_version_detail::IsInitialized() const {

  return true;
}

void app_version_detail::Swap(app_version_detail* other) {
  if (other != this) {
    std::swap(date_tick_, other->date_tick_);
    std::swap(new_add_user_acount_, other->new_add_user_acount_);
    std::swap(upgrade_user_acount_, other->upgrade_user_acount_);
    std::swap(active_user_acount_, other->active_user_acount_);
    std::swap(acumulate_user_acount_, other->acumulate_user_acount_);
    std::swap(start_acount_, other->start_acount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata app_version_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = app_version_detail_descriptor_;
  metadata.reflection = app_version_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int download_src_user_acount_info::kSrcNameFieldNumber;
const int download_src_user_acount_info::kInfoFieldNumber;
#endif  // !_MSC_VER

download_src_user_acount_info::download_src_user_acount_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.download_src_user_acount_info)
}

void download_src_user_acount_info::InitAsDefaultInstance() {
}

download_src_user_acount_info::download_src_user_acount_info(const download_src_user_acount_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.download_src_user_acount_info)
}

void download_src_user_acount_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

download_src_user_acount_info::~download_src_user_acount_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.download_src_user_acount_info)
  SharedDtor();
}

void download_src_user_acount_info::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_name_;
  }
  if (this != default_instance_) {
  }
}

void download_src_user_acount_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* download_src_user_acount_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return download_src_user_acount_info_descriptor_;
}

const download_src_user_acount_info& download_src_user_acount_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

download_src_user_acount_info* download_src_user_acount_info::default_instance_ = NULL;

download_src_user_acount_info* download_src_user_acount_info::New() const {
  return new download_src_user_acount_info;
}

void download_src_user_acount_info::Clear() {
  if (has_src_name()) {
    if (src_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      src_name_->clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool download_src_user_acount_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.download_src_user_acount_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes src_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.user_acount_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.download_src_user_acount_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.download_src_user_acount_info)
  return false;
#undef DO_
}

void download_src_user_acount_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.download_src_user_acount_info)
  // optional bytes src_name = 1;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->src_name(), output);
  }

  // repeated .ODP_main_frame.user_acount_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.download_src_user_acount_info)
}

::google::protobuf::uint8* download_src_user_acount_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.download_src_user_acount_info)
  // optional bytes src_name = 1;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->src_name(), target);
  }

  // repeated .ODP_main_frame.user_acount_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.download_src_user_acount_info)
  return target;
}

int download_src_user_acount_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes src_name = 1;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

  }
  // repeated .ODP_main_frame.user_acount_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void download_src_user_acount_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const download_src_user_acount_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const download_src_user_acount_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void download_src_user_acount_info::MergeFrom(const download_src_user_acount_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void download_src_user_acount_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void download_src_user_acount_info::CopyFrom(const download_src_user_acount_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool download_src_user_acount_info::IsInitialized() const {

  return true;
}

void download_src_user_acount_info::Swap(download_src_user_acount_info* other) {
  if (other != this) {
    std::swap(src_name_, other->src_name_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata download_src_user_acount_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = download_src_user_acount_info_descriptor_;
  metadata.reflection = download_src_user_acount_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int download_src_detail::kSrcNameFieldNumber;
const int download_src_detail::kNewAddUserAcountFieldNumber;
const int download_src_detail::kNewAddUserAcountRateFieldNumber;
const int download_src_detail::kActiveUserAcountFieldNumber;
const int download_src_detail::kActiveUserAcountRateFieldNumber;
const int download_src_detail::kTotalUserAcountFieldNumber;
const int download_src_detail::kTotalUserAcountRateFieldNumber;
#endif  // !_MSC_VER

download_src_detail::download_src_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.download_src_detail)
}

void download_src_detail::InitAsDefaultInstance() {
}

download_src_detail::download_src_detail(const download_src_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.download_src_detail)
}

void download_src_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_add_user_acount_ = 0;
  new_add_user_acount_rate_ = 0;
  active_user_acount_ = 0;
  active_user_acount_rate_ = 0;
  total_user_acount_ = 0;
  total_user_acount_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

download_src_detail::~download_src_detail() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.download_src_detail)
  SharedDtor();
}

void download_src_detail::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_name_;
  }
  if (this != default_instance_) {
  }
}

void download_src_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* download_src_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return download_src_detail_descriptor_;
}

const download_src_detail& download_src_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

download_src_detail* download_src_detail::default_instance_ = NULL;

download_src_detail* download_src_detail::New() const {
  return new download_src_detail;
}

void download_src_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<download_src_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(new_add_user_acount_, total_user_acount_rate_);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        src_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool download_src_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.download_src_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes src_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_add_user_acount;
        break;
      }

      // optional int32 new_add_user_acount = 2;
      case 2: {
        if (tag == 16) {
         parse_new_add_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_add_user_acount_)));
          set_has_new_add_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_new_add_user_acount_rate;
        break;
      }

      // optional float new_add_user_acount_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_new_add_user_acount_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_add_user_acount_rate_)));
          set_has_new_add_user_acount_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active_user_acount;
        break;
      }

      // optional int32 active_user_acount = 4;
      case 4: {
        if (tag == 32) {
         parse_active_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_user_acount_)));
          set_has_active_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_active_user_acount_rate;
        break;
      }

      // optional float active_user_acount_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_active_user_acount_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &active_user_acount_rate_)));
          set_has_active_user_acount_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_user_acount;
        break;
      }

      // optional int32 total_user_acount = 6;
      case 6: {
        if (tag == 48) {
         parse_total_user_acount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_user_acount_)));
          set_has_total_user_acount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_total_user_acount_rate;
        break;
      }

      // optional float total_user_acount_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_total_user_acount_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_user_acount_rate_)));
          set_has_total_user_acount_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.download_src_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.download_src_detail)
  return false;
#undef DO_
}

void download_src_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.download_src_detail)
  // optional bytes src_name = 1;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->src_name(), output);
  }

  // optional int32 new_add_user_acount = 2;
  if (has_new_add_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_add_user_acount(), output);
  }

  // optional float new_add_user_acount_rate = 3;
  if (has_new_add_user_acount_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->new_add_user_acount_rate(), output);
  }

  // optional int32 active_user_acount = 4;
  if (has_active_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active_user_acount(), output);
  }

  // optional float active_user_acount_rate = 5;
  if (has_active_user_acount_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->active_user_acount_rate(), output);
  }

  // optional int32 total_user_acount = 6;
  if (has_total_user_acount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_user_acount(), output);
  }

  // optional float total_user_acount_rate = 7;
  if (has_total_user_acount_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->total_user_acount_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.download_src_detail)
}

::google::protobuf::uint8* download_src_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.download_src_detail)
  // optional bytes src_name = 1;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->src_name(), target);
  }

  // optional int32 new_add_user_acount = 2;
  if (has_new_add_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_add_user_acount(), target);
  }

  // optional float new_add_user_acount_rate = 3;
  if (has_new_add_user_acount_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->new_add_user_acount_rate(), target);
  }

  // optional int32 active_user_acount = 4;
  if (has_active_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active_user_acount(), target);
  }

  // optional float active_user_acount_rate = 5;
  if (has_active_user_acount_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->active_user_acount_rate(), target);
  }

  // optional int32 total_user_acount = 6;
  if (has_total_user_acount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_user_acount(), target);
  }

  // optional float total_user_acount_rate = 7;
  if (has_total_user_acount_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->total_user_acount_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.download_src_detail)
  return target;
}

int download_src_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes src_name = 1;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional int32 new_add_user_acount = 2;
    if (has_new_add_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_add_user_acount());
    }

    // optional float new_add_user_acount_rate = 3;
    if (has_new_add_user_acount_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 active_user_acount = 4;
    if (has_active_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_user_acount());
    }

    // optional float active_user_acount_rate = 5;
    if (has_active_user_acount_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 total_user_acount = 6;
    if (has_total_user_acount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_user_acount());
    }

    // optional float total_user_acount_rate = 7;
    if (has_total_user_acount_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void download_src_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const download_src_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const download_src_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void download_src_detail::MergeFrom(const download_src_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_new_add_user_acount()) {
      set_new_add_user_acount(from.new_add_user_acount());
    }
    if (from.has_new_add_user_acount_rate()) {
      set_new_add_user_acount_rate(from.new_add_user_acount_rate());
    }
    if (from.has_active_user_acount()) {
      set_active_user_acount(from.active_user_acount());
    }
    if (from.has_active_user_acount_rate()) {
      set_active_user_acount_rate(from.active_user_acount_rate());
    }
    if (from.has_total_user_acount()) {
      set_total_user_acount(from.total_user_acount());
    }
    if (from.has_total_user_acount_rate()) {
      set_total_user_acount_rate(from.total_user_acount_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void download_src_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void download_src_detail::CopyFrom(const download_src_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool download_src_detail::IsInitialized() const {

  return true;
}

void download_src_detail::Swap(download_src_detail* other) {
  if (other != this) {
    std::swap(src_name_, other->src_name_);
    std::swap(new_add_user_acount_, other->new_add_user_acount_);
    std::swap(new_add_user_acount_rate_, other->new_add_user_acount_rate_);
    std::swap(active_user_acount_, other->active_user_acount_);
    std::swap(active_user_acount_rate_, other->active_user_acount_rate_);
    std::swap(total_user_acount_, other->total_user_acount_);
    std::swap(total_user_acount_rate_, other->total_user_acount_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata download_src_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = download_src_detail_descriptor_;
  metadata.reflection = download_src_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_time_info::kTimeTickFieldNumber;
const int use_time_info::kStartCountFieldNumber;
const int use_time_info::kStartRateFieldNumber;
#endif  // !_MSC_VER

use_time_info::use_time_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_time_info)
}

void use_time_info::InitAsDefaultInstance() {
}

use_time_info::use_time_info(const use_time_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_time_info)
}

void use_time_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_count_ = 0;
  start_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_time_info::~use_time_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_time_info)
  SharedDtor();
}

void use_time_info::SharedDtor() {
  if (time_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_tick_;
  }
  if (this != default_instance_) {
  }
}

void use_time_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_time_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_time_info_descriptor_;
}

const use_time_info& use_time_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_time_info* use_time_info::default_instance_ = NULL;

use_time_info* use_time_info::New() const {
  return new use_time_info;
}

void use_time_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<use_time_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_count_, start_rate_);
    if (has_time_tick()) {
      if (time_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_time_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_time_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes time_tick = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_count;
        break;
      }

      // optional int32 start_count = 2;
      case 2: {
        if (tag == 16) {
         parse_start_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_count_)));
          set_has_start_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_start_rate;
        break;
      }

      // optional float start_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_start_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_rate_)));
          set_has_start_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_time_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_time_info)
  return false;
#undef DO_
}

void use_time_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_time_info)
  // optional bytes time_tick = 1;
  if (has_time_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->time_tick(), output);
  }

  // optional int32 start_count = 2;
  if (has_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_count(), output);
  }

  // optional float start_rate = 3;
  if (has_start_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_time_info)
}

::google::protobuf::uint8* use_time_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_time_info)
  // optional bytes time_tick = 1;
  if (has_time_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->time_tick(), target);
  }

  // optional int32 start_count = 2;
  if (has_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_count(), target);
  }

  // optional float start_rate = 3;
  if (has_start_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_time_info)
  return target;
}

int use_time_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes time_tick = 1;
    if (has_time_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->time_tick());
    }

    // optional int32 start_count = 2;
    if (has_start_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_count());
    }

    // optional float start_rate = 3;
    if (has_start_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_time_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_time_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_time_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_time_info::MergeFrom(const use_time_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_tick()) {
      set_time_tick(from.time_tick());
    }
    if (from.has_start_count()) {
      set_start_count(from.start_count());
    }
    if (from.has_start_rate()) {
      set_start_rate(from.start_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_time_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_time_info::CopyFrom(const use_time_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_time_info::IsInitialized() const {

  return true;
}

void use_time_info::Swap(use_time_info* other) {
  if (other != this) {
    std::swap(time_tick_, other->time_tick_);
    std::swap(start_count_, other->start_count_);
    std::swap(start_rate_, other->start_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_time_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_time_info_descriptor_;
  metadata.reflection = use_time_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_count_info::kCountTickFieldNumber;
const int use_count_info::kUserCountFieldNumber;
const int use_count_info::kUserCountRateFieldNumber;
#endif  // !_MSC_VER

use_count_info::use_count_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_count_info)
}

void use_count_info::InitAsDefaultInstance() {
}

use_count_info::use_count_info(const use_count_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_count_info)
}

void use_count_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_count_ = 0;
  user_count_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_count_info::~use_count_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_count_info)
  SharedDtor();
}

void use_count_info::SharedDtor() {
  if (count_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete count_tick_;
  }
  if (this != default_instance_) {
  }
}

void use_count_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_count_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_count_info_descriptor_;
}

const use_count_info& use_count_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_count_info* use_count_info::default_instance_ = NULL;

use_count_info* use_count_info::New() const {
  return new use_count_info;
}

void use_count_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<use_count_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_count_, user_count_rate_);
    if (has_count_tick()) {
      if (count_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        count_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_count_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_count_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes count_tick = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_count_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_count;
        break;
      }

      // optional int32 user_count = 2;
      case 2: {
        if (tag == 16) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_user_count_rate;
        break;
      }

      // optional float user_count_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_user_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_count_rate_)));
          set_has_user_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_count_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_count_info)
  return false;
#undef DO_
}

void use_count_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_count_info)
  // optional bytes count_tick = 1;
  if (has_count_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->count_tick(), output);
  }

  // optional int32 user_count = 2;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_count(), output);
  }

  // optional float user_count_rate = 3;
  if (has_user_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->user_count_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_count_info)
}

::google::protobuf::uint8* use_count_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_count_info)
  // optional bytes count_tick = 1;
  if (has_count_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->count_tick(), target);
  }

  // optional int32 user_count = 2;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_count(), target);
  }

  // optional float user_count_rate = 3;
  if (has_user_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->user_count_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_count_info)
  return target;
}

int use_count_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes count_tick = 1;
    if (has_count_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->count_tick());
    }

    // optional int32 user_count = 2;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }

    // optional float user_count_rate = 3;
    if (has_user_count_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_count_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_count_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_count_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_count_info::MergeFrom(const use_count_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_tick()) {
      set_count_tick(from.count_tick());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
    if (from.has_user_count_rate()) {
      set_user_count_rate(from.user_count_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_count_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_count_info::CopyFrom(const use_count_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_count_info::IsInitialized() const {

  return true;
}

void use_count_info::Swap(use_count_info* other) {
  if (other != this) {
    std::swap(count_tick_, other->count_tick_);
    std::swap(user_count_, other->user_count_);
    std::swap(user_count_rate_, other->user_count_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_count_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_count_info_descriptor_;
  metadata.reflection = use_count_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_interval_info::kIntervalTickFieldNumber;
const int use_interval_info::kStartCountFieldNumber;
const int use_interval_info::kStartCountRateFieldNumber;
#endif  // !_MSC_VER

use_interval_info::use_interval_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_interval_info)
}

void use_interval_info::InitAsDefaultInstance() {
}

use_interval_info::use_interval_info(const use_interval_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_interval_info)
}

void use_interval_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interval_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_count_ = 0;
  start_count_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_interval_info::~use_interval_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_interval_info)
  SharedDtor();
}

void use_interval_info::SharedDtor() {
  if (interval_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interval_tick_;
  }
  if (this != default_instance_) {
  }
}

void use_interval_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_interval_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_interval_info_descriptor_;
}

const use_interval_info& use_interval_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_interval_info* use_interval_info::default_instance_ = NULL;

use_interval_info* use_interval_info::New() const {
  return new use_interval_info;
}

void use_interval_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<use_interval_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_count_, start_count_rate_);
    if (has_interval_tick()) {
      if (interval_tick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interval_tick_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_interval_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_interval_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes interval_tick = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_interval_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_count;
        break;
      }

      // optional int32 start_count = 2;
      case 2: {
        if (tag == 16) {
         parse_start_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_count_)));
          set_has_start_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_start_count_rate;
        break;
      }

      // optional float start_count_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_start_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_count_rate_)));
          set_has_start_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_interval_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_interval_info)
  return false;
#undef DO_
}

void use_interval_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_interval_info)
  // optional bytes interval_tick = 1;
  if (has_interval_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->interval_tick(), output);
  }

  // optional int32 start_count = 2;
  if (has_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_count(), output);
  }

  // optional float start_count_rate = 3;
  if (has_start_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_count_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_interval_info)
}

::google::protobuf::uint8* use_interval_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_interval_info)
  // optional bytes interval_tick = 1;
  if (has_interval_tick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->interval_tick(), target);
  }

  // optional int32 start_count = 2;
  if (has_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_count(), target);
  }

  // optional float start_count_rate = 3;
  if (has_start_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start_count_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_interval_info)
  return target;
}

int use_interval_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes interval_tick = 1;
    if (has_interval_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->interval_tick());
    }

    // optional int32 start_count = 2;
    if (has_start_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_count());
    }

    // optional float start_count_rate = 3;
    if (has_start_count_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_interval_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_interval_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_interval_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_interval_info::MergeFrom(const use_interval_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interval_tick()) {
      set_interval_tick(from.interval_tick());
    }
    if (from.has_start_count()) {
      set_start_count(from.start_count());
    }
    if (from.has_start_count_rate()) {
      set_start_count_rate(from.start_count_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_interval_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_interval_info::CopyFrom(const use_interval_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_interval_info::IsInitialized() const {

  return true;
}

void use_interval_info::Swap(use_interval_info* other) {
  if (other != this) {
    std::swap(interval_tick_, other->interval_tick_);
    std::swap(start_count_, other->start_count_);
    std::swap(start_count_rate_, other->start_count_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_interval_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_interval_info_descriptor_;
  metadata.reflection = use_interval_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int third_party_login_info::kPlatformNameFieldNumber;
const int third_party_login_info::kNewAddUserCountFieldNumber;
const int third_party_login_info::kNewAddUserCountRateFieldNumber;
const int third_party_login_info::kTotalUserCountFieldNumber;
const int third_party_login_info::kTotalUserCountRateFieldNumber;
#endif  // !_MSC_VER

third_party_login_info::third_party_login_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.third_party_login_info)
}

void third_party_login_info::InitAsDefaultInstance() {
}

third_party_login_info::third_party_login_info(const third_party_login_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.third_party_login_info)
}

void third_party_login_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_add_user_count_ = 0;
  new_add_user_count_rate_ = 0;
  total_user_count_ = 0;
  total_user_count_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

third_party_login_info::~third_party_login_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.third_party_login_info)
  SharedDtor();
}

void third_party_login_info::SharedDtor() {
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_name_;
  }
  if (this != default_instance_) {
  }
}

void third_party_login_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* third_party_login_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return third_party_login_info_descriptor_;
}

const third_party_login_info& third_party_login_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

third_party_login_info* third_party_login_info::default_instance_ = NULL;

third_party_login_info* third_party_login_info::New() const {
  return new third_party_login_info;
}

void third_party_login_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<third_party_login_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(new_add_user_count_, total_user_count_rate_);
    if (has_platform_name()) {
      if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool third_party_login_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.third_party_login_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_add_user_count;
        break;
      }

      // optional int32 new_add_user_count = 2;
      case 2: {
        if (tag == 16) {
         parse_new_add_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_add_user_count_)));
          set_has_new_add_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_new_add_user_count_rate;
        break;
      }

      // optional float new_add_user_count_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_new_add_user_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_add_user_count_rate_)));
          set_has_new_add_user_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_user_count;
        break;
      }

      // optional int32 total_user_count = 4;
      case 4: {
        if (tag == 32) {
         parse_total_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_user_count_)));
          set_has_total_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_total_user_count_rate;
        break;
      }

      // optional float total_user_count_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_total_user_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_user_count_rate_)));
          set_has_total_user_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.third_party_login_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.third_party_login_info)
  return false;
#undef DO_
}

void third_party_login_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.third_party_login_info)
  // optional bytes platform_name = 1;
  if (has_platform_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_name(), output);
  }

  // optional int32 new_add_user_count = 2;
  if (has_new_add_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_add_user_count(), output);
  }

  // optional float new_add_user_count_rate = 3;
  if (has_new_add_user_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->new_add_user_count_rate(), output);
  }

  // optional int32 total_user_count = 4;
  if (has_total_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_user_count(), output);
  }

  // optional float total_user_count_rate = 5;
  if (has_total_user_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->total_user_count_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.third_party_login_info)
}

::google::protobuf::uint8* third_party_login_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.third_party_login_info)
  // optional bytes platform_name = 1;
  if (has_platform_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_name(), target);
  }

  // optional int32 new_add_user_count = 2;
  if (has_new_add_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_add_user_count(), target);
  }

  // optional float new_add_user_count_rate = 3;
  if (has_new_add_user_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->new_add_user_count_rate(), target);
  }

  // optional int32 total_user_count = 4;
  if (has_total_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_user_count(), target);
  }

  // optional float total_user_count_rate = 5;
  if (has_total_user_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->total_user_count_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.third_party_login_info)
  return target;
}

int third_party_login_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes platform_name = 1;
    if (has_platform_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_name());
    }

    // optional int32 new_add_user_count = 2;
    if (has_new_add_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_add_user_count());
    }

    // optional float new_add_user_count_rate = 3;
    if (has_new_add_user_count_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 total_user_count = 4;
    if (has_total_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_user_count());
    }

    // optional float total_user_count_rate = 5;
    if (has_total_user_count_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void third_party_login_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const third_party_login_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const third_party_login_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void third_party_login_info::MergeFrom(const third_party_login_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_name()) {
      set_platform_name(from.platform_name());
    }
    if (from.has_new_add_user_count()) {
      set_new_add_user_count(from.new_add_user_count());
    }
    if (from.has_new_add_user_count_rate()) {
      set_new_add_user_count_rate(from.new_add_user_count_rate());
    }
    if (from.has_total_user_count()) {
      set_total_user_count(from.total_user_count());
    }
    if (from.has_total_user_count_rate()) {
      set_total_user_count_rate(from.total_user_count_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void third_party_login_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void third_party_login_info::CopyFrom(const third_party_login_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool third_party_login_info::IsInitialized() const {

  return true;
}

void third_party_login_info::Swap(third_party_login_info* other) {
  if (other != this) {
    std::swap(platform_name_, other->platform_name_);
    std::swap(new_add_user_count_, other->new_add_user_count_);
    std::swap(new_add_user_count_rate_, other->new_add_user_count_rate_);
    std::swap(total_user_count_, other->total_user_count_);
    std::swap(total_user_count_rate_, other->total_user_count_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata third_party_login_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = third_party_login_info_descriptor_;
  metadata.reflection = third_party_login_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pay_Withdraw_ask::kStartDateFieldNumber;
const int Pay_Withdraw_ask::kEndDateFieldNumber;
const int Pay_Withdraw_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

Pay_Withdraw_ask::Pay_Withdraw_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.Pay_Withdraw_ask)
}

void Pay_Withdraw_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

Pay_Withdraw_ask::Pay_Withdraw_ask(const Pay_Withdraw_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.Pay_Withdraw_ask)
}

void Pay_Withdraw_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pay_Withdraw_ask::~Pay_Withdraw_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.Pay_Withdraw_ask)
  SharedDtor();
}

void Pay_Withdraw_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void Pay_Withdraw_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pay_Withdraw_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay_Withdraw_ask_descriptor_;
}

const Pay_Withdraw_ask& Pay_Withdraw_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

Pay_Withdraw_ask* Pay_Withdraw_ask::default_instance_ = NULL;

Pay_Withdraw_ask* Pay_Withdraw_ask::New() const {
  return new Pay_Withdraw_ask;
}

void Pay_Withdraw_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pay_Withdraw_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.Pay_Withdraw_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.Pay_Withdraw_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.Pay_Withdraw_ask)
  return false;
#undef DO_
}

void Pay_Withdraw_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.Pay_Withdraw_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.Pay_Withdraw_ask)
}

::google::protobuf::uint8* Pay_Withdraw_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.Pay_Withdraw_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.Pay_Withdraw_ask)
  return target;
}

int Pay_Withdraw_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pay_Withdraw_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pay_Withdraw_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pay_Withdraw_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pay_Withdraw_ask::MergeFrom(const Pay_Withdraw_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pay_Withdraw_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pay_Withdraw_ask::CopyFrom(const Pay_Withdraw_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pay_Withdraw_ask::IsInitialized() const {

  return true;
}

void Pay_Withdraw_ask::Swap(Pay_Withdraw_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pay_Withdraw_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pay_Withdraw_ask_descriptor_;
  metadata.reflection = Pay_Withdraw_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pay_Withdraw_ans::kCurPayWithdrawFieldNumber;
const int Pay_Withdraw_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

Pay_Withdraw_ans::Pay_Withdraw_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.Pay_Withdraw_ans)
}

void Pay_Withdraw_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

Pay_Withdraw_ans::Pay_Withdraw_ans(const Pay_Withdraw_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.Pay_Withdraw_ans)
}

void Pay_Withdraw_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pay_Withdraw_ans::~Pay_Withdraw_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.Pay_Withdraw_ans)
  SharedDtor();
}

void Pay_Withdraw_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void Pay_Withdraw_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pay_Withdraw_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay_Withdraw_ans_descriptor_;
}

const Pay_Withdraw_ans& Pay_Withdraw_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

Pay_Withdraw_ans* Pay_Withdraw_ans::default_instance_ = NULL;

Pay_Withdraw_ans* Pay_Withdraw_ans::New() const {
  return new Pay_Withdraw_ans;
}

void Pay_Withdraw_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  cur_pay_withdraw_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pay_Withdraw_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.Pay_Withdraw_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.Pay_Withdraw cur_pay_withdraw = 1;
      case 1: {
        if (tag == 10) {
         parse_cur_pay_withdraw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cur_pay_withdraw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cur_pay_withdraw;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.Pay_Withdraw_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.Pay_Withdraw_ans)
  return false;
#undef DO_
}

void Pay_Withdraw_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.Pay_Withdraw_ans)
  // repeated .ODP_main_frame.Pay_Withdraw cur_pay_withdraw = 1;
  for (int i = 0; i < this->cur_pay_withdraw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cur_pay_withdraw(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.Pay_Withdraw_ans)
}

::google::protobuf::uint8* Pay_Withdraw_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.Pay_Withdraw_ans)
  // repeated .ODP_main_frame.Pay_Withdraw cur_pay_withdraw = 1;
  for (int i = 0; i < this->cur_pay_withdraw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cur_pay_withdraw(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.Pay_Withdraw_ans)
  return target;
}

int Pay_Withdraw_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.Pay_Withdraw cur_pay_withdraw = 1;
  total_size += 1 * this->cur_pay_withdraw_size();
  for (int i = 0; i < this->cur_pay_withdraw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cur_pay_withdraw(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pay_Withdraw_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pay_Withdraw_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pay_Withdraw_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pay_Withdraw_ans::MergeFrom(const Pay_Withdraw_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_pay_withdraw_.MergeFrom(from.cur_pay_withdraw_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pay_Withdraw_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pay_Withdraw_ans::CopyFrom(const Pay_Withdraw_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pay_Withdraw_ans::IsInitialized() const {

  return true;
}

void Pay_Withdraw_ans::Swap(Pay_Withdraw_ans* other) {
  if (other != this) {
    cur_pay_withdraw_.Swap(&other->cur_pay_withdraw_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pay_Withdraw_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pay_Withdraw_ans_descriptor_;
  metadata.reflection = Pay_Withdraw_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unfinished_bid_ask::kEventFieldNumber;
const int unfinished_bid_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

unfinished_bid_ask::unfinished_bid_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.unfinished_bid_ask)
}

void unfinished_bid_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

unfinished_bid_ask::unfinished_bid_ask(const unfinished_bid_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.unfinished_bid_ask)
}

void unfinished_bid_ask::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unfinished_bid_ask::~unfinished_bid_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.unfinished_bid_ask)
  SharedDtor();
}

void unfinished_bid_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void unfinished_bid_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unfinished_bid_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unfinished_bid_ask_descriptor_;
}

const unfinished_bid_ask& unfinished_bid_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

unfinished_bid_ask* unfinished_bid_ask::default_instance_ = NULL;

unfinished_bid_ask* unfinished_bid_ask::New() const {
  return new unfinished_bid_ask;
}

void unfinished_bid_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    event_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unfinished_bid_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.unfinished_bid_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.unfinished_bid_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.unfinished_bid_ask)
  return false;
#undef DO_
}

void unfinished_bid_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.unfinished_bid_ask)
  // optional int32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.unfinished_bid_ask)
}

::google::protobuf::uint8* unfinished_bid_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.unfinished_bid_ask)
  // optional int32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.unfinished_bid_ask)
  return target;
}

int unfinished_bid_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unfinished_bid_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unfinished_bid_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unfinished_bid_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unfinished_bid_ask::MergeFrom(const unfinished_bid_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unfinished_bid_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unfinished_bid_ask::CopyFrom(const unfinished_bid_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unfinished_bid_ask::IsInitialized() const {

  return true;
}

void unfinished_bid_ask::Swap(unfinished_bid_ask* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unfinished_bid_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unfinished_bid_ask_descriptor_;
  metadata.reflection = unfinished_bid_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unfinished_bid_ans::kInfoFieldNumber;
const int unfinished_bid_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

unfinished_bid_ans::unfinished_bid_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.unfinished_bid_ans)
}

void unfinished_bid_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

unfinished_bid_ans::unfinished_bid_ans(const unfinished_bid_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.unfinished_bid_ans)
}

void unfinished_bid_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unfinished_bid_ans::~unfinished_bid_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.unfinished_bid_ans)
  SharedDtor();
}

void unfinished_bid_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void unfinished_bid_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unfinished_bid_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unfinished_bid_ans_descriptor_;
}

const unfinished_bid_ans& unfinished_bid_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

unfinished_bid_ans* unfinished_bid_ans::default_instance_ = NULL;

unfinished_bid_ans* unfinished_bid_ans::New() const {
  return new unfinished_bid_ans;
}

void unfinished_bid_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unfinished_bid_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.unfinished_bid_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.unfinished_bid_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.unfinished_bid_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.unfinished_bid_ans)
  return false;
#undef DO_
}

void unfinished_bid_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.unfinished_bid_ans)
  // repeated .ODP_main_frame.unfinished_bid_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.unfinished_bid_ans)
}

::google::protobuf::uint8* unfinished_bid_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.unfinished_bid_ans)
  // repeated .ODP_main_frame.unfinished_bid_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.unfinished_bid_ans)
  return target;
}

int unfinished_bid_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.unfinished_bid_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unfinished_bid_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unfinished_bid_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unfinished_bid_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unfinished_bid_ans::MergeFrom(const unfinished_bid_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unfinished_bid_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unfinished_bid_ans::CopyFrom(const unfinished_bid_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unfinished_bid_ans::IsInitialized() const {

  return true;
}

void unfinished_bid_ans::Swap(unfinished_bid_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unfinished_bid_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unfinished_bid_ans_descriptor_;
  metadata.reflection = unfinished_bid_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_bid_count_ask::kBidStatusFieldNumber;
const int city_bid_count_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

city_bid_count_ask::city_bid_count_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.city_bid_count_ask)
}

void city_bid_count_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

city_bid_count_ask::city_bid_count_ask(const city_bid_count_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.city_bid_count_ask)
}

void city_bid_count_ask::SharedCtor() {
  _cached_size_ = 0;
  bid_status_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_bid_count_ask::~city_bid_count_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.city_bid_count_ask)
  SharedDtor();
}

void city_bid_count_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void city_bid_count_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_bid_count_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_bid_count_ask_descriptor_;
}

const city_bid_count_ask& city_bid_count_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

city_bid_count_ask* city_bid_count_ask::default_instance_ = NULL;

city_bid_count_ask* city_bid_count_ask::New() const {
  return new city_bid_count_ask;
}

void city_bid_count_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bid_status_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_bid_count_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.city_bid_count_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_status_)));
          set_has_bid_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.city_bid_count_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.city_bid_count_ask)
  return false;
#undef DO_
}

void city_bid_count_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.city_bid_count_ask)
  // optional int32 bid_status = 1;
  if (has_bid_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid_status(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.city_bid_count_ask)
}

::google::protobuf::uint8* city_bid_count_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.city_bid_count_ask)
  // optional int32 bid_status = 1;
  if (has_bid_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid_status(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.city_bid_count_ask)
  return target;
}

int city_bid_count_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid_status = 1;
    if (has_bid_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_status());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_bid_count_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_bid_count_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_bid_count_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_bid_count_ask::MergeFrom(const city_bid_count_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid_status()) {
      set_bid_status(from.bid_status());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_bid_count_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_bid_count_ask::CopyFrom(const city_bid_count_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_bid_count_ask::IsInitialized() const {

  return true;
}

void city_bid_count_ask::Swap(city_bid_count_ask* other) {
  if (other != this) {
    std::swap(bid_status_, other->bid_status_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_bid_count_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_bid_count_ask_descriptor_;
  metadata.reflection = city_bid_count_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_bid_count_ans::kCountInfoFieldNumber;
const int city_bid_count_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

city_bid_count_ans::city_bid_count_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.city_bid_count_ans)
}

void city_bid_count_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

city_bid_count_ans::city_bid_count_ans(const city_bid_count_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.city_bid_count_ans)
}

void city_bid_count_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_bid_count_ans::~city_bid_count_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.city_bid_count_ans)
  SharedDtor();
}

void city_bid_count_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void city_bid_count_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_bid_count_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_bid_count_ans_descriptor_;
}

const city_bid_count_ans& city_bid_count_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

city_bid_count_ans* city_bid_count_ans::default_instance_ = NULL;

city_bid_count_ans* city_bid_count_ans::New() const {
  return new city_bid_count_ans;
}

void city_bid_count_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  count_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_bid_count_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.city_bid_count_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.city_bid_count count_info = 1;
      case 1: {
        if (tag == 10) {
         parse_count_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_count_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.city_bid_count_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.city_bid_count_ans)
  return false;
#undef DO_
}

void city_bid_count_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.city_bid_count_ans)
  // repeated .ODP_main_frame.city_bid_count count_info = 1;
  for (int i = 0; i < this->count_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count_info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.city_bid_count_ans)
}

::google::protobuf::uint8* city_bid_count_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.city_bid_count_ans)
  // repeated .ODP_main_frame.city_bid_count count_info = 1;
  for (int i = 0; i < this->count_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count_info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.city_bid_count_ans)
  return target;
}

int city_bid_count_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.city_bid_count count_info = 1;
  total_size += 1 * this->count_info_size();
  for (int i = 0; i < this->count_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_bid_count_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_bid_count_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_bid_count_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_bid_count_ans::MergeFrom(const city_bid_count_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_info_.MergeFrom(from.count_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_bid_count_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_bid_count_ans::CopyFrom(const city_bid_count_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_bid_count_ans::IsInitialized() const {

  return true;
}

void city_bid_count_ans::Swap(city_bid_count_ans* other) {
  if (other != this) {
    count_info_.Swap(&other->count_info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_bid_count_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_bid_count_ans_descriptor_;
  metadata.reflection = city_bid_count_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_distribution_ask::kUserStatusFieldNumber;
const int user_distribution_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_distribution_ask::user_distribution_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_distribution_ask)
}

void user_distribution_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_distribution_ask::user_distribution_ask(const user_distribution_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_distribution_ask)
}

void user_distribution_ask::SharedCtor() {
  _cached_size_ = 0;
  user_status_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_distribution_ask::~user_distribution_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_distribution_ask)
  SharedDtor();
}

void user_distribution_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_distribution_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_distribution_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_distribution_ask_descriptor_;
}

const user_distribution_ask& user_distribution_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_distribution_ask* user_distribution_ask::default_instance_ = NULL;

user_distribution_ask* user_distribution_ask::New() const {
  return new user_distribution_ask;
}

void user_distribution_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_status_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_distribution_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_distribution_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_status_)));
          set_has_user_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_distribution_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_distribution_ask)
  return false;
#undef DO_
}

void user_distribution_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_distribution_ask)
  // optional int32 user_status = 1;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_status(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_distribution_ask)
}

::google::protobuf::uint8* user_distribution_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_distribution_ask)
  // optional int32 user_status = 1;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_status(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_distribution_ask)
  return target;
}

int user_distribution_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_status = 1;
    if (has_user_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_status());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_distribution_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_distribution_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_distribution_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_distribution_ask::MergeFrom(const user_distribution_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_status()) {
      set_user_status(from.user_status());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_distribution_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_distribution_ask::CopyFrom(const user_distribution_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_distribution_ask::IsInitialized() const {

  return true;
}

void user_distribution_ask::Swap(user_distribution_ask* other) {
  if (other != this) {
    std::swap(user_status_, other->user_status_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_distribution_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_distribution_ask_descriptor_;
  metadata.reflection = user_distribution_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_distribution_ans::kInfoFieldNumber;
const int user_distribution_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_distribution_ans::user_distribution_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_distribution_ans)
}

void user_distribution_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_distribution_ans::user_distribution_ans(const user_distribution_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_distribution_ans)
}

void user_distribution_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_distribution_ans::~user_distribution_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_distribution_ans)
  SharedDtor();
}

void user_distribution_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_distribution_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_distribution_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_distribution_ans_descriptor_;
}

const user_distribution_ans& user_distribution_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_distribution_ans* user_distribution_ans::default_instance_ = NULL;

user_distribution_ans* user_distribution_ans::New() const {
  return new user_distribution_ans;
}

void user_distribution_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_distribution_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_distribution_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.user_distribution info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_distribution_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_distribution_ans)
  return false;
#undef DO_
}

void user_distribution_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_distribution_ans)
  // repeated .ODP_main_frame.user_distribution info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_distribution_ans)
}

::google::protobuf::uint8* user_distribution_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_distribution_ans)
  // repeated .ODP_main_frame.user_distribution info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_distribution_ans)
  return target;
}

int user_distribution_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_distribution info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_distribution_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_distribution_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_distribution_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_distribution_ans::MergeFrom(const user_distribution_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_distribution_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_distribution_ans::CopyFrom(const user_distribution_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_distribution_ans::IsInitialized() const {

  return true;
}

void user_distribution_ans::Swap(user_distribution_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_distribution_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_distribution_ans_descriptor_;
  metadata.reflection = user_distribution_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_trading_volume_ask::kStartDatetimeFieldNumber;
const int cur_trading_volume_ask::kEndDatetimeFieldNumber;
const int cur_trading_volume_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

cur_trading_volume_ask::cur_trading_volume_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_trading_volume_ask)
}

void cur_trading_volume_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

cur_trading_volume_ask::cur_trading_volume_ask(const cur_trading_volume_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_trading_volume_ask)
}

void cur_trading_volume_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_trading_volume_ask::~cur_trading_volume_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_trading_volume_ask)
  SharedDtor();
}

void cur_trading_volume_ask::SharedDtor() {
  if (start_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_datetime_;
  }
  if (end_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_datetime_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void cur_trading_volume_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_trading_volume_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_trading_volume_ask_descriptor_;
}

const cur_trading_volume_ask& cur_trading_volume_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_trading_volume_ask* cur_trading_volume_ask::default_instance_ = NULL;

cur_trading_volume_ask* cur_trading_volume_ask::New() const {
  return new cur_trading_volume_ask;
}

void cur_trading_volume_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_datetime()) {
      if (start_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_datetime_->clear();
      }
    }
    if (has_end_datetime()) {
      if (end_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_datetime_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_trading_volume_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_trading_volume_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_datetime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_datetime;
        break;
      }

      // optional bytes end_datetime = 2;
      case 2: {
        if (tag == 18) {
         parse_end_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_trading_volume_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_trading_volume_ask)
  return false;
#undef DO_
}

void cur_trading_volume_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_trading_volume_ask)
  // optional bytes start_datetime = 1;
  if (has_start_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_datetime(), output);
  }

  // optional bytes end_datetime = 2;
  if (has_end_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_datetime(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_trading_volume_ask)
}

::google::protobuf::uint8* cur_trading_volume_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_trading_volume_ask)
  // optional bytes start_datetime = 1;
  if (has_start_datetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_datetime(), target);
  }

  // optional bytes end_datetime = 2;
  if (has_end_datetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_datetime(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_trading_volume_ask)
  return target;
}

int cur_trading_volume_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_datetime = 1;
    if (has_start_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_datetime());
    }

    // optional bytes end_datetime = 2;
    if (has_end_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_datetime());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_trading_volume_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_trading_volume_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_trading_volume_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_trading_volume_ask::MergeFrom(const cur_trading_volume_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_datetime()) {
      set_start_datetime(from.start_datetime());
    }
    if (from.has_end_datetime()) {
      set_end_datetime(from.end_datetime());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_trading_volume_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_trading_volume_ask::CopyFrom(const cur_trading_volume_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_trading_volume_ask::IsInitialized() const {

  return true;
}

void cur_trading_volume_ask::Swap(cur_trading_volume_ask* other) {
  if (other != this) {
    std::swap(start_datetime_, other->start_datetime_);
    std::swap(end_datetime_, other->end_datetime_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_trading_volume_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_trading_volume_ask_descriptor_;
  metadata.reflection = cur_trading_volume_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_trading_volume_ans::kInfoFieldNumber;
const int cur_trading_volume_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

cur_trading_volume_ans::cur_trading_volume_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_trading_volume_ans)
}

void cur_trading_volume_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

cur_trading_volume_ans::cur_trading_volume_ans(const cur_trading_volume_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_trading_volume_ans)
}

void cur_trading_volume_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_trading_volume_ans::~cur_trading_volume_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_trading_volume_ans)
  SharedDtor();
}

void cur_trading_volume_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void cur_trading_volume_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_trading_volume_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_trading_volume_ans_descriptor_;
}

const cur_trading_volume_ans& cur_trading_volume_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_trading_volume_ans* cur_trading_volume_ans::default_instance_ = NULL;

cur_trading_volume_ans* cur_trading_volume_ans::New() const {
  return new cur_trading_volume_ans;
}

void cur_trading_volume_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_trading_volume_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_trading_volume_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.cur_trading_volume info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_trading_volume_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_trading_volume_ans)
  return false;
#undef DO_
}

void cur_trading_volume_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_trading_volume_ans)
  // repeated .ODP_main_frame.cur_trading_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_trading_volume_ans)
}

::google::protobuf::uint8* cur_trading_volume_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_trading_volume_ans)
  // repeated .ODP_main_frame.cur_trading_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_trading_volume_ans)
  return target;
}

int cur_trading_volume_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.cur_trading_volume info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_trading_volume_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_trading_volume_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_trading_volume_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_trading_volume_ans::MergeFrom(const cur_trading_volume_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_trading_volume_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_trading_volume_ans::CopyFrom(const cur_trading_volume_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_trading_volume_ans::IsInitialized() const {

  return true;
}

void cur_trading_volume_ans::Swap(cur_trading_volume_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_trading_volume_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_trading_volume_ans_descriptor_;
  metadata.reflection = cur_trading_volume_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_province_trading_volume_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

cur_province_trading_volume_ask::cur_province_trading_volume_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_province_trading_volume_ask)
}

void cur_province_trading_volume_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

cur_province_trading_volume_ask::cur_province_trading_volume_ask(const cur_province_trading_volume_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_province_trading_volume_ask)
}

void cur_province_trading_volume_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_province_trading_volume_ask::~cur_province_trading_volume_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_province_trading_volume_ask)
  SharedDtor();
}

void cur_province_trading_volume_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void cur_province_trading_volume_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_province_trading_volume_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_province_trading_volume_ask_descriptor_;
}

const cur_province_trading_volume_ask& cur_province_trading_volume_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_province_trading_volume_ask* cur_province_trading_volume_ask::default_instance_ = NULL;

cur_province_trading_volume_ask* cur_province_trading_volume_ask::New() const {
  return new cur_province_trading_volume_ask;
}

void cur_province_trading_volume_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_province_trading_volume_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_province_trading_volume_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_province_trading_volume_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_province_trading_volume_ask)
  return false;
#undef DO_
}

void cur_province_trading_volume_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_province_trading_volume_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_province_trading_volume_ask)
}

::google::protobuf::uint8* cur_province_trading_volume_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_province_trading_volume_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_province_trading_volume_ask)
  return target;
}

int cur_province_trading_volume_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_province_trading_volume_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_province_trading_volume_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_province_trading_volume_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_province_trading_volume_ask::MergeFrom(const cur_province_trading_volume_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_province_trading_volume_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_province_trading_volume_ask::CopyFrom(const cur_province_trading_volume_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_province_trading_volume_ask::IsInitialized() const {

  return true;
}

void cur_province_trading_volume_ask::Swap(cur_province_trading_volume_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_province_trading_volume_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_province_trading_volume_ask_descriptor_;
  metadata.reflection = cur_province_trading_volume_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_province_trading_volume_ans::kInfoFieldNumber;
const int cur_province_trading_volume_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

cur_province_trading_volume_ans::cur_province_trading_volume_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_province_trading_volume_ans)
}

void cur_province_trading_volume_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

cur_province_trading_volume_ans::cur_province_trading_volume_ans(const cur_province_trading_volume_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_province_trading_volume_ans)
}

void cur_province_trading_volume_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_province_trading_volume_ans::~cur_province_trading_volume_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_province_trading_volume_ans)
  SharedDtor();
}

void cur_province_trading_volume_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void cur_province_trading_volume_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_province_trading_volume_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_province_trading_volume_ans_descriptor_;
}

const cur_province_trading_volume_ans& cur_province_trading_volume_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_province_trading_volume_ans* cur_province_trading_volume_ans::default_instance_ = NULL;

cur_province_trading_volume_ans* cur_province_trading_volume_ans::New() const {
  return new cur_province_trading_volume_ans;
}

void cur_province_trading_volume_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_province_trading_volume_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_province_trading_volume_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.cur_province_trading_volume info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_province_trading_volume_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_province_trading_volume_ans)
  return false;
#undef DO_
}

void cur_province_trading_volume_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_province_trading_volume_ans)
  // repeated .ODP_main_frame.cur_province_trading_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_province_trading_volume_ans)
}

::google::protobuf::uint8* cur_province_trading_volume_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_province_trading_volume_ans)
  // repeated .ODP_main_frame.cur_province_trading_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_province_trading_volume_ans)
  return target;
}

int cur_province_trading_volume_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.cur_province_trading_volume info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_province_trading_volume_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_province_trading_volume_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_province_trading_volume_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_province_trading_volume_ans::MergeFrom(const cur_province_trading_volume_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_province_trading_volume_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_province_trading_volume_ans::CopyFrom(const cur_province_trading_volume_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_province_trading_volume_ans::IsInitialized() const {

  return true;
}

void cur_province_trading_volume_ans::Swap(cur_province_trading_volume_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_province_trading_volume_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_province_trading_volume_ans_descriptor_;
  metadata.reflection = cur_province_trading_volume_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Real_time_registration_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

Real_time_registration_ask::Real_time_registration_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.Real_time_registration_ask)
}

void Real_time_registration_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

Real_time_registration_ask::Real_time_registration_ask(const Real_time_registration_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.Real_time_registration_ask)
}

void Real_time_registration_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Real_time_registration_ask::~Real_time_registration_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.Real_time_registration_ask)
  SharedDtor();
}

void Real_time_registration_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void Real_time_registration_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Real_time_registration_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Real_time_registration_ask_descriptor_;
}

const Real_time_registration_ask& Real_time_registration_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

Real_time_registration_ask* Real_time_registration_ask::default_instance_ = NULL;

Real_time_registration_ask* Real_time_registration_ask::New() const {
  return new Real_time_registration_ask;
}

void Real_time_registration_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Real_time_registration_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.Real_time_registration_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.Real_time_registration_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.Real_time_registration_ask)
  return false;
#undef DO_
}

void Real_time_registration_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.Real_time_registration_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.Real_time_registration_ask)
}

::google::protobuf::uint8* Real_time_registration_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.Real_time_registration_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.Real_time_registration_ask)
  return target;
}

int Real_time_registration_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Real_time_registration_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Real_time_registration_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Real_time_registration_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Real_time_registration_ask::MergeFrom(const Real_time_registration_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Real_time_registration_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Real_time_registration_ask::CopyFrom(const Real_time_registration_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Real_time_registration_ask::IsInitialized() const {

  return true;
}

void Real_time_registration_ask::Swap(Real_time_registration_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Real_time_registration_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Real_time_registration_ask_descriptor_;
  metadata.reflection = Real_time_registration_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Real_time_registration_ans::kInfoFieldNumber;
const int Real_time_registration_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

Real_time_registration_ans::Real_time_registration_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.Real_time_registration_ans)
}

void Real_time_registration_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

Real_time_registration_ans::Real_time_registration_ans(const Real_time_registration_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.Real_time_registration_ans)
}

void Real_time_registration_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Real_time_registration_ans::~Real_time_registration_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.Real_time_registration_ans)
  SharedDtor();
}

void Real_time_registration_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void Real_time_registration_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Real_time_registration_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Real_time_registration_ans_descriptor_;
}

const Real_time_registration_ans& Real_time_registration_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

Real_time_registration_ans* Real_time_registration_ans::default_instance_ = NULL;

Real_time_registration_ans* Real_time_registration_ans::New() const {
  return new Real_time_registration_ans;
}

void Real_time_registration_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Real_time_registration_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.Real_time_registration_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.registration_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.Real_time_registration_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.Real_time_registration_ans)
  return false;
#undef DO_
}

void Real_time_registration_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.Real_time_registration_ans)
  // repeated .ODP_main_frame.registration_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.Real_time_registration_ans)
}

::google::protobuf::uint8* Real_time_registration_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.Real_time_registration_ans)
  // repeated .ODP_main_frame.registration_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.Real_time_registration_ans)
  return target;
}

int Real_time_registration_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.registration_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Real_time_registration_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Real_time_registration_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Real_time_registration_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Real_time_registration_ans::MergeFrom(const Real_time_registration_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Real_time_registration_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Real_time_registration_ans::CopyFrom(const Real_time_registration_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Real_time_registration_ans::IsInitialized() const {

  return true;
}

void Real_time_registration_ans::Swap(Real_time_registration_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Real_time_registration_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Real_time_registration_ans_descriptor_;
  metadata.reflection = Real_time_registration_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month_registration_ask::kStartDateFieldNumber;
const int month_registration_ask::kEndDateFieldNumber;
const int month_registration_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

month_registration_ask::month_registration_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.month_registration_ask)
}

void month_registration_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

month_registration_ask::month_registration_ask(const month_registration_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.month_registration_ask)
}

void month_registration_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month_registration_ask::~month_registration_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.month_registration_ask)
  SharedDtor();
}

void month_registration_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void month_registration_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month_registration_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_registration_ask_descriptor_;
}

const month_registration_ask& month_registration_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

month_registration_ask* month_registration_ask::default_instance_ = NULL;

month_registration_ask* month_registration_ask::New() const {
  return new month_registration_ask;
}

void month_registration_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month_registration_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.month_registration_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.month_registration_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.month_registration_ask)
  return false;
#undef DO_
}

void month_registration_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.month_registration_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.month_registration_ask)
}

::google::protobuf::uint8* month_registration_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.month_registration_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.month_registration_ask)
  return target;
}

int month_registration_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month_registration_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month_registration_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month_registration_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month_registration_ask::MergeFrom(const month_registration_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month_registration_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month_registration_ask::CopyFrom(const month_registration_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month_registration_ask::IsInitialized() const {

  return true;
}

void month_registration_ask::Swap(month_registration_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month_registration_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_registration_ask_descriptor_;
  metadata.reflection = month_registration_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month_registration_ans::kInfoFieldNumber;
const int month_registration_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

month_registration_ans::month_registration_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.month_registration_ans)
}

void month_registration_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

month_registration_ans::month_registration_ans(const month_registration_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.month_registration_ans)
}

void month_registration_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month_registration_ans::~month_registration_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.month_registration_ans)
  SharedDtor();
}

void month_registration_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void month_registration_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month_registration_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_registration_ans_descriptor_;
}

const month_registration_ans& month_registration_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

month_registration_ans* month_registration_ans::default_instance_ = NULL;

month_registration_ans* month_registration_ans::New() const {
  return new month_registration_ans;
}

void month_registration_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month_registration_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.month_registration_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.month_registration_volume info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.month_registration_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.month_registration_ans)
  return false;
#undef DO_
}

void month_registration_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.month_registration_ans)
  // repeated .ODP_main_frame.month_registration_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.month_registration_ans)
}

::google::protobuf::uint8* month_registration_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.month_registration_ans)
  // repeated .ODP_main_frame.month_registration_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.month_registration_ans)
  return target;
}

int month_registration_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.month_registration_volume info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month_registration_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month_registration_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month_registration_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month_registration_ans::MergeFrom(const month_registration_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month_registration_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month_registration_ans::CopyFrom(const month_registration_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month_registration_ans::IsInitialized() const {

  return true;
}

void month_registration_ans::Swap(month_registration_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month_registration_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_registration_ans_descriptor_;
  metadata.reflection = month_registration_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int real_time_charge_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

real_time_charge_ask::real_time_charge_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.real_time_charge_ask)
}

void real_time_charge_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

real_time_charge_ask::real_time_charge_ask(const real_time_charge_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.real_time_charge_ask)
}

void real_time_charge_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

real_time_charge_ask::~real_time_charge_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.real_time_charge_ask)
  SharedDtor();
}

void real_time_charge_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void real_time_charge_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* real_time_charge_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return real_time_charge_ask_descriptor_;
}

const real_time_charge_ask& real_time_charge_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

real_time_charge_ask* real_time_charge_ask::default_instance_ = NULL;

real_time_charge_ask* real_time_charge_ask::New() const {
  return new real_time_charge_ask;
}

void real_time_charge_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool real_time_charge_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.real_time_charge_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.real_time_charge_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.real_time_charge_ask)
  return false;
#undef DO_
}

void real_time_charge_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.real_time_charge_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.real_time_charge_ask)
}

::google::protobuf::uint8* real_time_charge_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.real_time_charge_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.real_time_charge_ask)
  return target;
}

int real_time_charge_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void real_time_charge_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const real_time_charge_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const real_time_charge_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void real_time_charge_ask::MergeFrom(const real_time_charge_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void real_time_charge_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void real_time_charge_ask::CopyFrom(const real_time_charge_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool real_time_charge_ask::IsInitialized() const {

  return true;
}

void real_time_charge_ask::Swap(real_time_charge_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata real_time_charge_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = real_time_charge_ask_descriptor_;
  metadata.reflection = real_time_charge_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int real_time_charge_ans::kInfoFieldNumber;
const int real_time_charge_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

real_time_charge_ans::real_time_charge_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.real_time_charge_ans)
}

void real_time_charge_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

real_time_charge_ans::real_time_charge_ans(const real_time_charge_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.real_time_charge_ans)
}

void real_time_charge_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

real_time_charge_ans::~real_time_charge_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.real_time_charge_ans)
  SharedDtor();
}

void real_time_charge_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void real_time_charge_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* real_time_charge_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return real_time_charge_ans_descriptor_;
}

const real_time_charge_ans& real_time_charge_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

real_time_charge_ans* real_time_charge_ans::default_instance_ = NULL;

real_time_charge_ans* real_time_charge_ans::New() const {
  return new real_time_charge_ans;
}

void real_time_charge_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool real_time_charge_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.real_time_charge_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.charge_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.real_time_charge_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.real_time_charge_ans)
  return false;
#undef DO_
}

void real_time_charge_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.real_time_charge_ans)
  // repeated .ODP_main_frame.charge_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.real_time_charge_ans)
}

::google::protobuf::uint8* real_time_charge_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.real_time_charge_ans)
  // repeated .ODP_main_frame.charge_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.real_time_charge_ans)
  return target;
}

int real_time_charge_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.charge_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void real_time_charge_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const real_time_charge_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const real_time_charge_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void real_time_charge_ans::MergeFrom(const real_time_charge_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void real_time_charge_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void real_time_charge_ans::CopyFrom(const real_time_charge_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool real_time_charge_ans::IsInitialized() const {

  return true;
}

void real_time_charge_ans::Swap(real_time_charge_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata real_time_charge_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = real_time_charge_ans_descriptor_;
  metadata.reflection = real_time_charge_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_trading_count_ask::kStartDatetimeFieldNumber;
const int cur_trading_count_ask::kEndDatetimeFieldNumber;
const int cur_trading_count_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

cur_trading_count_ask::cur_trading_count_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_trading_count_ask)
}

void cur_trading_count_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

cur_trading_count_ask::cur_trading_count_ask(const cur_trading_count_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_trading_count_ask)
}

void cur_trading_count_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_trading_count_ask::~cur_trading_count_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_trading_count_ask)
  SharedDtor();
}

void cur_trading_count_ask::SharedDtor() {
  if (start_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_datetime_;
  }
  if (end_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_datetime_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void cur_trading_count_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_trading_count_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_trading_count_ask_descriptor_;
}

const cur_trading_count_ask& cur_trading_count_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_trading_count_ask* cur_trading_count_ask::default_instance_ = NULL;

cur_trading_count_ask* cur_trading_count_ask::New() const {
  return new cur_trading_count_ask;
}

void cur_trading_count_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_datetime()) {
      if (start_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_datetime_->clear();
      }
    }
    if (has_end_datetime()) {
      if (end_datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_datetime_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_trading_count_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_trading_count_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_datetime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_datetime;
        break;
      }

      // optional bytes end_datetime = 2;
      case 2: {
        if (tag == 18) {
         parse_end_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_trading_count_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_trading_count_ask)
  return false;
#undef DO_
}

void cur_trading_count_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_trading_count_ask)
  // optional bytes start_datetime = 1;
  if (has_start_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_datetime(), output);
  }

  // optional bytes end_datetime = 2;
  if (has_end_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_datetime(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_trading_count_ask)
}

::google::protobuf::uint8* cur_trading_count_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_trading_count_ask)
  // optional bytes start_datetime = 1;
  if (has_start_datetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_datetime(), target);
  }

  // optional bytes end_datetime = 2;
  if (has_end_datetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_datetime(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_trading_count_ask)
  return target;
}

int cur_trading_count_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_datetime = 1;
    if (has_start_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_datetime());
    }

    // optional bytes end_datetime = 2;
    if (has_end_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_datetime());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_trading_count_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_trading_count_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_trading_count_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_trading_count_ask::MergeFrom(const cur_trading_count_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_datetime()) {
      set_start_datetime(from.start_datetime());
    }
    if (from.has_end_datetime()) {
      set_end_datetime(from.end_datetime());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_trading_count_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_trading_count_ask::CopyFrom(const cur_trading_count_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_trading_count_ask::IsInitialized() const {

  return true;
}

void cur_trading_count_ask::Swap(cur_trading_count_ask* other) {
  if (other != this) {
    std::swap(start_datetime_, other->start_datetime_);
    std::swap(end_datetime_, other->end_datetime_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_trading_count_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_trading_count_ask_descriptor_;
  metadata.reflection = cur_trading_count_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_trading_count_ans::kInfoFieldNumber;
const int cur_trading_count_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

cur_trading_count_ans::cur_trading_count_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_trading_count_ans)
}

void cur_trading_count_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

cur_trading_count_ans::cur_trading_count_ans(const cur_trading_count_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_trading_count_ans)
}

void cur_trading_count_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_trading_count_ans::~cur_trading_count_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_trading_count_ans)
  SharedDtor();
}

void cur_trading_count_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void cur_trading_count_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_trading_count_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_trading_count_ans_descriptor_;
}

const cur_trading_count_ans& cur_trading_count_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_trading_count_ans* cur_trading_count_ans::default_instance_ = NULL;

cur_trading_count_ans* cur_trading_count_ans::New() const {
  return new cur_trading_count_ans;
}

void cur_trading_count_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_trading_count_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_trading_count_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.cur_trading_count info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_trading_count_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_trading_count_ans)
  return false;
#undef DO_
}

void cur_trading_count_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_trading_count_ans)
  // repeated .ODP_main_frame.cur_trading_count info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_trading_count_ans)
}

::google::protobuf::uint8* cur_trading_count_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_trading_count_ans)
  // repeated .ODP_main_frame.cur_trading_count info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_trading_count_ans)
  return target;
}

int cur_trading_count_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.cur_trading_count info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_trading_count_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_trading_count_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_trading_count_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_trading_count_ans::MergeFrom(const cur_trading_count_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_trading_count_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_trading_count_ans::CopyFrom(const cur_trading_count_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_trading_count_ans::IsInitialized() const {

  return true;
}

void cur_trading_count_ans::Swap(cur_trading_count_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_trading_count_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_trading_count_ans_descriptor_;
  metadata.reflection = cur_trading_count_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month_trading_ask::kStartDateFieldNumber;
const int month_trading_ask::kEndDateFieldNumber;
const int month_trading_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

month_trading_ask::month_trading_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.month_trading_ask)
}

void month_trading_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

month_trading_ask::month_trading_ask(const month_trading_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.month_trading_ask)
}

void month_trading_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month_trading_ask::~month_trading_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.month_trading_ask)
  SharedDtor();
}

void month_trading_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void month_trading_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month_trading_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_trading_ask_descriptor_;
}

const month_trading_ask& month_trading_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

month_trading_ask* month_trading_ask::default_instance_ = NULL;

month_trading_ask* month_trading_ask::New() const {
  return new month_trading_ask;
}

void month_trading_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month_trading_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.month_trading_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.month_trading_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.month_trading_ask)
  return false;
#undef DO_
}

void month_trading_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.month_trading_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.month_trading_ask)
}

::google::protobuf::uint8* month_trading_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.month_trading_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.month_trading_ask)
  return target;
}

int month_trading_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month_trading_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month_trading_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month_trading_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month_trading_ask::MergeFrom(const month_trading_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month_trading_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month_trading_ask::CopyFrom(const month_trading_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month_trading_ask::IsInitialized() const {

  return true;
}

void month_trading_ask::Swap(month_trading_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month_trading_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_trading_ask_descriptor_;
  metadata.reflection = month_trading_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month_trading_ans::kInfoFieldNumber;
const int month_trading_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

month_trading_ans::month_trading_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.month_trading_ans)
}

void month_trading_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

month_trading_ans::month_trading_ans(const month_trading_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.month_trading_ans)
}

void month_trading_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month_trading_ans::~month_trading_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.month_trading_ans)
  SharedDtor();
}

void month_trading_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void month_trading_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month_trading_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_trading_ans_descriptor_;
}

const month_trading_ans& month_trading_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

month_trading_ans* month_trading_ans::default_instance_ = NULL;

month_trading_ans* month_trading_ans::New() const {
  return new month_trading_ans;
}

void month_trading_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month_trading_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.month_trading_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.month_trading_volume info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.month_trading_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.month_trading_ans)
  return false;
#undef DO_
}

void month_trading_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.month_trading_ans)
  // repeated .ODP_main_frame.month_trading_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.month_trading_ans)
}

::google::protobuf::uint8* month_trading_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.month_trading_ans)
  // repeated .ODP_main_frame.month_trading_volume info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.month_trading_ans)
  return target;
}

int month_trading_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.month_trading_volume info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month_trading_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month_trading_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month_trading_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month_trading_ans::MergeFrom(const month_trading_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month_trading_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month_trading_ans::CopyFrom(const month_trading_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month_trading_ans::IsInitialized() const {

  return true;
}

void month_trading_ans::Swap(month_trading_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month_trading_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_trading_ans_descriptor_;
  metadata.reflection = month_trading_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_fund_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

cur_fund_detail_ask::cur_fund_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_fund_detail_ask)
}

void cur_fund_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

cur_fund_detail_ask::cur_fund_detail_ask(const cur_fund_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_fund_detail_ask)
}

void cur_fund_detail_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_fund_detail_ask::~cur_fund_detail_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_fund_detail_ask)
  SharedDtor();
}

void cur_fund_detail_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void cur_fund_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_fund_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_fund_detail_ask_descriptor_;
}

const cur_fund_detail_ask& cur_fund_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_fund_detail_ask* cur_fund_detail_ask::default_instance_ = NULL;

cur_fund_detail_ask* cur_fund_detail_ask::New() const {
  return new cur_fund_detail_ask;
}

void cur_fund_detail_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_fund_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_fund_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_fund_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_fund_detail_ask)
  return false;
#undef DO_
}

void cur_fund_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_fund_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_fund_detail_ask)
}

::google::protobuf::uint8* cur_fund_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_fund_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_fund_detail_ask)
  return target;
}

int cur_fund_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_fund_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_fund_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_fund_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_fund_detail_ask::MergeFrom(const cur_fund_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_fund_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_fund_detail_ask::CopyFrom(const cur_fund_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_fund_detail_ask::IsInitialized() const {

  return true;
}

void cur_fund_detail_ask::Swap(cur_fund_detail_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_fund_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_fund_detail_ask_descriptor_;
  metadata.reflection = cur_fund_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cur_fund_detail_ans::kCurPayAmountFieldNumber;
const int cur_fund_detail_ans::kCurWithdrawAmountFieldNumber;
const int cur_fund_detail_ans::kCurInvestAmountFieldNumber;
const int cur_fund_detail_ans::kCurGuaranteeAmountFieldNumber;
const int cur_fund_detail_ans::kCurBorrowAmountFieldNumber;
const int cur_fund_detail_ans::kCurRepaymentAmountFieldNumber;
const int cur_fund_detail_ans::kCurOverdueAmountFieldNumber;
const int cur_fund_detail_ans::kDetailFieldNumber;
const int cur_fund_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

cur_fund_detail_ans::cur_fund_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.cur_fund_detail_ans)
}

void cur_fund_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

cur_fund_detail_ans::cur_fund_detail_ans(const cur_fund_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.cur_fund_detail_ans)
}

void cur_fund_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  cur_pay_amount_ = 0;
  cur_withdraw_amount_ = 0;
  cur_invest_amount_ = 0;
  cur_guarantee_amount_ = 0;
  cur_borrow_amount_ = 0;
  cur_repayment_amount_ = 0;
  cur_overdue_amount_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cur_fund_detail_ans::~cur_fund_detail_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.cur_fund_detail_ans)
  SharedDtor();
}

void cur_fund_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void cur_fund_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cur_fund_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cur_fund_detail_ans_descriptor_;
}

const cur_fund_detail_ans& cur_fund_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cur_fund_detail_ans* cur_fund_detail_ans::default_instance_ = NULL;

cur_fund_detail_ans* cur_fund_detail_ans::New() const {
  return new cur_fund_detail_ans;
}

void cur_fund_detail_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cur_fund_detail_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(cur_pay_amount_, cur_repayment_amount_);
    cur_overdue_amount_ = 0;
  }
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cur_fund_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.cur_fund_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cur_pay_amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_pay_amount_)));
          set_has_cur_pay_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_cur_withdraw_amount;
        break;
      }

      // optional float cur_withdraw_amount = 2;
      case 2: {
        if (tag == 21) {
         parse_cur_withdraw_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_withdraw_amount_)));
          set_has_cur_withdraw_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cur_invest_amount;
        break;
      }

      // optional float cur_invest_amount = 3;
      case 3: {
        if (tag == 29) {
         parse_cur_invest_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_invest_amount_)));
          set_has_cur_invest_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cur_guarantee_amount;
        break;
      }

      // optional float cur_guarantee_amount = 4;
      case 4: {
        if (tag == 37) {
         parse_cur_guarantee_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_guarantee_amount_)));
          set_has_cur_guarantee_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cur_borrow_amount;
        break;
      }

      // optional float cur_borrow_amount = 5;
      case 5: {
        if (tag == 45) {
         parse_cur_borrow_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_borrow_amount_)));
          set_has_cur_borrow_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cur_repayment_amount;
        break;
      }

      // optional float cur_repayment_amount = 6;
      case 6: {
        if (tag == 53) {
         parse_cur_repayment_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_repayment_amount_)));
          set_has_cur_repayment_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cur_overdue_amount;
        break;
      }

      // optional float cur_overdue_amount = 7;
      case 7: {
        if (tag == 61) {
         parse_cur_overdue_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_overdue_amount_)));
          set_has_cur_overdue_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_detail;
        break;
      }

      // repeated .ODP_main_frame.real_fund_detail detail = 8;
      case 8: {
        if (tag == 66) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_detail;
        if (input->ExpectTag(74)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 9;
      case 9: {
        if (tag == 74) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.cur_fund_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.cur_fund_detail_ans)
  return false;
#undef DO_
}

void cur_fund_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.cur_fund_detail_ans)
  // optional float cur_pay_amount = 1;
  if (has_cur_pay_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cur_pay_amount(), output);
  }

  // optional float cur_withdraw_amount = 2;
  if (has_cur_withdraw_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cur_withdraw_amount(), output);
  }

  // optional float cur_invest_amount = 3;
  if (has_cur_invest_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cur_invest_amount(), output);
  }

  // optional float cur_guarantee_amount = 4;
  if (has_cur_guarantee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cur_guarantee_amount(), output);
  }

  // optional float cur_borrow_amount = 5;
  if (has_cur_borrow_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cur_borrow_amount(), output);
  }

  // optional float cur_repayment_amount = 6;
  if (has_cur_repayment_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cur_repayment_amount(), output);
  }

  // optional float cur_overdue_amount = 7;
  if (has_cur_overdue_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cur_overdue_amount(), output);
  }

  // repeated .ODP_main_frame.real_fund_detail detail = 8;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->detail(i), output);
  }

  // optional .common.errorinfo error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.cur_fund_detail_ans)
}

::google::protobuf::uint8* cur_fund_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.cur_fund_detail_ans)
  // optional float cur_pay_amount = 1;
  if (has_cur_pay_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cur_pay_amount(), target);
  }

  // optional float cur_withdraw_amount = 2;
  if (has_cur_withdraw_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cur_withdraw_amount(), target);
  }

  // optional float cur_invest_amount = 3;
  if (has_cur_invest_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cur_invest_amount(), target);
  }

  // optional float cur_guarantee_amount = 4;
  if (has_cur_guarantee_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cur_guarantee_amount(), target);
  }

  // optional float cur_borrow_amount = 5;
  if (has_cur_borrow_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cur_borrow_amount(), target);
  }

  // optional float cur_repayment_amount = 6;
  if (has_cur_repayment_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cur_repayment_amount(), target);
  }

  // optional float cur_overdue_amount = 7;
  if (has_cur_overdue_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cur_overdue_amount(), target);
  }

  // repeated .ODP_main_frame.real_fund_detail detail = 8;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->detail(i), target);
  }

  // optional .common.errorinfo error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.cur_fund_detail_ans)
  return target;
}

int cur_fund_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cur_pay_amount = 1;
    if (has_cur_pay_amount()) {
      total_size += 1 + 4;
    }

    // optional float cur_withdraw_amount = 2;
    if (has_cur_withdraw_amount()) {
      total_size += 1 + 4;
    }

    // optional float cur_invest_amount = 3;
    if (has_cur_invest_amount()) {
      total_size += 1 + 4;
    }

    // optional float cur_guarantee_amount = 4;
    if (has_cur_guarantee_amount()) {
      total_size += 1 + 4;
    }

    // optional float cur_borrow_amount = 5;
    if (has_cur_borrow_amount()) {
      total_size += 1 + 4;
    }

    // optional float cur_repayment_amount = 6;
    if (has_cur_repayment_amount()) {
      total_size += 1 + 4;
    }

    // optional float cur_overdue_amount = 7;
    if (has_cur_overdue_amount()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .common.errorinfo error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.real_fund_detail detail = 8;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cur_fund_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cur_fund_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cur_fund_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cur_fund_detail_ans::MergeFrom(const cur_fund_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_pay_amount()) {
      set_cur_pay_amount(from.cur_pay_amount());
    }
    if (from.has_cur_withdraw_amount()) {
      set_cur_withdraw_amount(from.cur_withdraw_amount());
    }
    if (from.has_cur_invest_amount()) {
      set_cur_invest_amount(from.cur_invest_amount());
    }
    if (from.has_cur_guarantee_amount()) {
      set_cur_guarantee_amount(from.cur_guarantee_amount());
    }
    if (from.has_cur_borrow_amount()) {
      set_cur_borrow_amount(from.cur_borrow_amount());
    }
    if (from.has_cur_repayment_amount()) {
      set_cur_repayment_amount(from.cur_repayment_amount());
    }
    if (from.has_cur_overdue_amount()) {
      set_cur_overdue_amount(from.cur_overdue_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cur_fund_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cur_fund_detail_ans::CopyFrom(const cur_fund_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cur_fund_detail_ans::IsInitialized() const {

  return true;
}

void cur_fund_detail_ans::Swap(cur_fund_detail_ans* other) {
  if (other != this) {
    std::swap(cur_pay_amount_, other->cur_pay_amount_);
    std::swap(cur_withdraw_amount_, other->cur_withdraw_amount_);
    std::swap(cur_invest_amount_, other->cur_invest_amount_);
    std::swap(cur_guarantee_amount_, other->cur_guarantee_amount_);
    std::swap(cur_borrow_amount_, other->cur_borrow_amount_);
    std::swap(cur_repayment_amount_, other->cur_repayment_amount_);
    std::swap(cur_overdue_amount_, other->cur_overdue_amount_);
    detail_.Swap(&other->detail_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cur_fund_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cur_fund_detail_ans_descriptor_;
  metadata.reflection = cur_fund_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_fund_detail_ask::kStartDateFieldNumber;
const int history_fund_detail_ask::kEndDateFieldNumber;
const int history_fund_detail_ask::kKeyInfoFieldNumber;
const int history_fund_detail_ask::kFlowTypeFieldNumber;
const int history_fund_detail_ask::kPageNumFieldNumber;
const int history_fund_detail_ask::kCurPageFieldNumber;
const int history_fund_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

history_fund_detail_ask::history_fund_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.history_fund_detail_ask)
}

void history_fund_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

history_fund_detail_ask::history_fund_detail_ask(const history_fund_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.history_fund_detail_ask)
}

void history_fund_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flow_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_fund_detail_ask::~history_fund_detail_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.history_fund_detail_ask)
  SharedDtor();
}

void history_fund_detail_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (key_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_info_;
  }
  if (flow_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flow_type_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void history_fund_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_fund_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_fund_detail_ask_descriptor_;
}

const history_fund_detail_ask& history_fund_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

history_fund_detail_ask* history_fund_detail_ask::default_instance_ = NULL;

history_fund_detail_ask* history_fund_detail_ask::New() const {
  return new history_fund_detail_ask;
}

void history_fund_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<history_fund_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_key_info()) {
      if (key_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_info_->clear();
      }
    }
    if (has_flow_type()) {
      if (flow_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flow_type_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_fund_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.history_fund_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key_info;
        break;
      }

      // optional bytes key_info = 3;
      case 3: {
        if (tag == 26) {
         parse_key_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_flow_type;
        break;
      }

      // optional bytes flow_type = 4;
      case 4: {
        if (tag == 34) {
         parse_flow_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flow_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.history_fund_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.history_fund_detail_ask)
  return false;
#undef DO_
}

void history_fund_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.history_fund_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes key_info = 3;
  if (has_key_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key_info(), output);
  }

  // optional bytes flow_type = 4;
  if (has_flow_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->flow_type(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.history_fund_detail_ask)
}

::google::protobuf::uint8* history_fund_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.history_fund_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes key_info = 3;
  if (has_key_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key_info(), target);
  }

  // optional bytes flow_type = 4;
  if (has_flow_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->flow_type(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.history_fund_detail_ask)
  return target;
}

int history_fund_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes key_info = 3;
    if (has_key_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_info());
    }

    // optional bytes flow_type = 4;
    if (has_flow_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->flow_type());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_fund_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_fund_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_fund_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_fund_detail_ask::MergeFrom(const history_fund_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_key_info()) {
      set_key_info(from.key_info());
    }
    if (from.has_flow_type()) {
      set_flow_type(from.flow_type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_fund_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_fund_detail_ask::CopyFrom(const history_fund_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_fund_detail_ask::IsInitialized() const {

  return true;
}

void history_fund_detail_ask::Swap(history_fund_detail_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(key_info_, other->key_info_);
    std::swap(flow_type_, other->flow_type_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_fund_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_fund_detail_ask_descriptor_;
  metadata.reflection = history_fund_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_fund_detail_ans::kTotalNumberFieldNumber;
const int history_fund_detail_ans::kDetailFieldNumber;
const int history_fund_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

history_fund_detail_ans::history_fund_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.history_fund_detail_ans)
}

void history_fund_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

history_fund_detail_ans::history_fund_detail_ans(const history_fund_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.history_fund_detail_ans)
}

void history_fund_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_fund_detail_ans::~history_fund_detail_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.history_fund_detail_ans)
  SharedDtor();
}

void history_fund_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void history_fund_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_fund_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_fund_detail_ans_descriptor_;
}

const history_fund_detail_ans& history_fund_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

history_fund_detail_ans* history_fund_detail_ans::default_instance_ = NULL;

history_fund_detail_ans* history_fund_detail_ans::New() const {
  return new history_fund_detail_ans;
}

void history_fund_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_fund_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.history_fund_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // repeated .ODP_main_frame.real_fund_detail detail = 2;
      case 2: {
        if (tag == 18) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.history_fund_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.history_fund_detail_ans)
  return false;
#undef DO_
}

void history_fund_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.history_fund_detail_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.real_fund_detail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.history_fund_detail_ans)
}

::google::protobuf::uint8* history_fund_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.history_fund_detail_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.real_fund_detail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.history_fund_detail_ans)
  return target;
}

int history_fund_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.real_fund_detail detail = 2;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_fund_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_fund_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_fund_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_fund_detail_ans::MergeFrom(const history_fund_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_fund_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_fund_detail_ans::CopyFrom(const history_fund_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_fund_detail_ans::IsInitialized() const {

  return true;
}

void history_fund_detail_ans::Swap(history_fund_detail_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    detail_.Swap(&other->detail_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_fund_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_fund_detail_ans_descriptor_;
  metadata.reflection = history_fund_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_fund_flow_type_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

history_fund_flow_type_ask::history_fund_flow_type_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.history_fund_flow_type_ask)
}

void history_fund_flow_type_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

history_fund_flow_type_ask::history_fund_flow_type_ask(const history_fund_flow_type_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.history_fund_flow_type_ask)
}

void history_fund_flow_type_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_fund_flow_type_ask::~history_fund_flow_type_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.history_fund_flow_type_ask)
  SharedDtor();
}

void history_fund_flow_type_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void history_fund_flow_type_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_fund_flow_type_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_fund_flow_type_ask_descriptor_;
}

const history_fund_flow_type_ask& history_fund_flow_type_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

history_fund_flow_type_ask* history_fund_flow_type_ask::default_instance_ = NULL;

history_fund_flow_type_ask* history_fund_flow_type_ask::New() const {
  return new history_fund_flow_type_ask;
}

void history_fund_flow_type_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_fund_flow_type_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.history_fund_flow_type_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.history_fund_flow_type_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.history_fund_flow_type_ask)
  return false;
#undef DO_
}

void history_fund_flow_type_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.history_fund_flow_type_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.history_fund_flow_type_ask)
}

::google::protobuf::uint8* history_fund_flow_type_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.history_fund_flow_type_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.history_fund_flow_type_ask)
  return target;
}

int history_fund_flow_type_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_fund_flow_type_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_fund_flow_type_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_fund_flow_type_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_fund_flow_type_ask::MergeFrom(const history_fund_flow_type_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_fund_flow_type_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_fund_flow_type_ask::CopyFrom(const history_fund_flow_type_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_fund_flow_type_ask::IsInitialized() const {

  return true;
}

void history_fund_flow_type_ask::Swap(history_fund_flow_type_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_fund_flow_type_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_fund_flow_type_ask_descriptor_;
  metadata.reflection = history_fund_flow_type_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_fund_flow_type_ans::kFundtypeFieldNumber;
const int history_fund_flow_type_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

history_fund_flow_type_ans::history_fund_flow_type_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.history_fund_flow_type_ans)
}

void history_fund_flow_type_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

history_fund_flow_type_ans::history_fund_flow_type_ans(const history_fund_flow_type_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.history_fund_flow_type_ans)
}

void history_fund_flow_type_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_fund_flow_type_ans::~history_fund_flow_type_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.history_fund_flow_type_ans)
  SharedDtor();
}

void history_fund_flow_type_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void history_fund_flow_type_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_fund_flow_type_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_fund_flow_type_ans_descriptor_;
}

const history_fund_flow_type_ans& history_fund_flow_type_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

history_fund_flow_type_ans* history_fund_flow_type_ans::default_instance_ = NULL;

history_fund_flow_type_ans* history_fund_flow_type_ans::New() const {
  return new history_fund_flow_type_ans;
}

void history_fund_flow_type_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  fundtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_fund_flow_type_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.history_fund_flow_type_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.fund_flow_type fundtype = 1;
      case 1: {
        if (tag == 10) {
         parse_fundtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fundtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fundtype;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.history_fund_flow_type_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.history_fund_flow_type_ans)
  return false;
#undef DO_
}

void history_fund_flow_type_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.history_fund_flow_type_ans)
  // repeated .ODP_main_frame.fund_flow_type fundtype = 1;
  for (int i = 0; i < this->fundtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fundtype(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.history_fund_flow_type_ans)
}

::google::protobuf::uint8* history_fund_flow_type_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.history_fund_flow_type_ans)
  // repeated .ODP_main_frame.fund_flow_type fundtype = 1;
  for (int i = 0; i < this->fundtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fundtype(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.history_fund_flow_type_ans)
  return target;
}

int history_fund_flow_type_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.fund_flow_type fundtype = 1;
  total_size += 1 * this->fundtype_size();
  for (int i = 0; i < this->fundtype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fundtype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_fund_flow_type_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_fund_flow_type_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_fund_flow_type_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_fund_flow_type_ans::MergeFrom(const history_fund_flow_type_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  fundtype_.MergeFrom(from.fundtype_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_fund_flow_type_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_fund_flow_type_ans::CopyFrom(const history_fund_flow_type_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_fund_flow_type_ans::IsInitialized() const {

  return true;
}

void history_fund_flow_type_ans::Swap(history_fund_flow_type_ans* other) {
  if (other != this) {
    fundtype_.Swap(&other->fundtype_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_fund_flow_type_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_fund_flow_type_ans_descriptor_;
  metadata.reflection = history_fund_flow_type_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_tendency_ask::kOsTypeFieldNumber;
const int client_versions_tendency_ask::kStartDateFieldNumber;
const int client_versions_tendency_ask::kEndDateFieldNumber;
const int client_versions_tendency_ask::kRequestTypeFieldNumber;
const int client_versions_tendency_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

client_versions_tendency_ask::client_versions_tendency_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_tendency_ask)
}

void client_versions_tendency_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

client_versions_tendency_ask::client_versions_tendency_ask(const client_versions_tendency_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_tendency_ask)
}

void client_versions_tendency_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  os_type_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_tendency_ask::~client_versions_tendency_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_tendency_ask)
  SharedDtor();
}

void client_versions_tendency_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void client_versions_tendency_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_tendency_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_tendency_ask_descriptor_;
}

const client_versions_tendency_ask& client_versions_tendency_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_tendency_ask* client_versions_tendency_ask::default_instance_ = NULL;

client_versions_tendency_ask* client_versions_tendency_ask::New() const {
  return new client_versions_tendency_ask;
}

void client_versions_tendency_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<client_versions_tendency_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(os_type_, request_type_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_tendency_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_tendency_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 os_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_type_)));
          set_has_os_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_date;
        break;
      }

      // optional bytes start_date = 2;
      case 2: {
        if (tag == 18) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 3;
      case 3: {
        if (tag == 26) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_tendency_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_tendency_ask)
  return false;
#undef DO_
}

void client_versions_tendency_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_tendency_ask)
  // optional int32 os_type = 1;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->os_type(), output);
  }

  // optional bytes start_date = 2;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_date(), output);
  }

  // optional bytes end_date = 3;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_date(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_tendency_ask)
}

::google::protobuf::uint8* client_versions_tendency_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_tendency_ask)
  // optional int32 os_type = 1;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->os_type(), target);
  }

  // optional bytes start_date = 2;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_date(), target);
  }

  // optional bytes end_date = 3;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_date(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_tendency_ask)
  return target;
}

int client_versions_tendency_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 os_type = 1;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_type());
    }

    // optional bytes start_date = 2;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 3;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_tendency_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_tendency_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_tendency_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_tendency_ask::MergeFrom(const client_versions_tendency_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_tendency_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_tendency_ask::CopyFrom(const client_versions_tendency_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_tendency_ask::IsInitialized() const {

  return true;
}

void client_versions_tendency_ask::Swap(client_versions_tendency_ask* other) {
  if (other != this) {
    std::swap(os_type_, other->os_type_);
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_tendency_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_tendency_ask_descriptor_;
  metadata.reflection = client_versions_tendency_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_tendency_ans::kInfoFieldNumber;
const int client_versions_tendency_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

client_versions_tendency_ans::client_versions_tendency_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_tendency_ans)
}

void client_versions_tendency_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

client_versions_tendency_ans::client_versions_tendency_ans(const client_versions_tendency_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_tendency_ans)
}

void client_versions_tendency_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_tendency_ans::~client_versions_tendency_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_tendency_ans)
  SharedDtor();
}

void client_versions_tendency_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void client_versions_tendency_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_tendency_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_tendency_ans_descriptor_;
}

const client_versions_tendency_ans& client_versions_tendency_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_tendency_ans* client_versions_tendency_ans::default_instance_ = NULL;

client_versions_tendency_ans* client_versions_tendency_ans::New() const {
  return new client_versions_tendency_ans;
}

void client_versions_tendency_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_tendency_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_tendency_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.top_ten_user_acount_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_tendency_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_tendency_ans)
  return false;
#undef DO_
}

void client_versions_tendency_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_tendency_ans)
  // repeated .ODP_main_frame.top_ten_user_acount_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_tendency_ans)
}

::google::protobuf::uint8* client_versions_tendency_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_tendency_ans)
  // repeated .ODP_main_frame.top_ten_user_acount_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_tendency_ans)
  return target;
}

int client_versions_tendency_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.top_ten_user_acount_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_tendency_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_tendency_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_tendency_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_tendency_ans::MergeFrom(const client_versions_tendency_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_tendency_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_tendency_ans::CopyFrom(const client_versions_tendency_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_tendency_ans::IsInitialized() const {

  return true;
}

void client_versions_tendency_ans::Swap(client_versions_tendency_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_tendency_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_tendency_ans_descriptor_;
  metadata.reflection = client_versions_tendency_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_distribution_ask::kOsTypeFieldNumber;
const int client_versions_distribution_ask::kStartDateFieldNumber;
const int client_versions_distribution_ask::kEndDateFieldNumber;
const int client_versions_distribution_ask::kPageNumFieldNumber;
const int client_versions_distribution_ask::kCurPageFieldNumber;
const int client_versions_distribution_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

client_versions_distribution_ask::client_versions_distribution_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_distribution_ask)
}

void client_versions_distribution_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

client_versions_distribution_ask::client_versions_distribution_ask(const client_versions_distribution_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_distribution_ask)
}

void client_versions_distribution_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  os_type_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_distribution_ask::~client_versions_distribution_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_distribution_ask)
  SharedDtor();
}

void client_versions_distribution_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void client_versions_distribution_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_distribution_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_distribution_ask_descriptor_;
}

const client_versions_distribution_ask& client_versions_distribution_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_distribution_ask* client_versions_distribution_ask::default_instance_ = NULL;

client_versions_distribution_ask* client_versions_distribution_ask::New() const {
  return new client_versions_distribution_ask;
}

void client_versions_distribution_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<client_versions_distribution_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(os_type_, page_num_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_distribution_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_distribution_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 os_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_type_)));
          set_has_os_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_date;
        break;
      }

      // optional bytes start_date = 2;
      case 2: {
        if (tag == 18) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 3;
      case 3: {
        if (tag == 26) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_distribution_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_distribution_ask)
  return false;
#undef DO_
}

void client_versions_distribution_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_distribution_ask)
  // optional int32 os_type = 1;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->os_type(), output);
  }

  // optional bytes start_date = 2;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_date(), output);
  }

  // optional bytes end_date = 3;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_date(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_distribution_ask)
}

::google::protobuf::uint8* client_versions_distribution_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_distribution_ask)
  // optional int32 os_type = 1;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->os_type(), target);
  }

  // optional bytes start_date = 2;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_date(), target);
  }

  // optional bytes end_date = 3;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_date(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_distribution_ask)
  return target;
}

int client_versions_distribution_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 os_type = 1;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_type());
    }

    // optional bytes start_date = 2;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 3;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_distribution_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_distribution_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_distribution_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_distribution_ask::MergeFrom(const client_versions_distribution_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_distribution_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_distribution_ask::CopyFrom(const client_versions_distribution_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_distribution_ask::IsInitialized() const {

  return true;
}

void client_versions_distribution_ask::Swap(client_versions_distribution_ask* other) {
  if (other != this) {
    std::swap(os_type_, other->os_type_);
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_distribution_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_distribution_ask_descriptor_;
  metadata.reflection = client_versions_distribution_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_distribution_ans::kTotalNumberFieldNumber;
const int client_versions_distribution_ans::kInfoFieldNumber;
const int client_versions_distribution_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

client_versions_distribution_ans::client_versions_distribution_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_distribution_ans)
}

void client_versions_distribution_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

client_versions_distribution_ans::client_versions_distribution_ans(const client_versions_distribution_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_distribution_ans)
}

void client_versions_distribution_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_distribution_ans::~client_versions_distribution_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_distribution_ans)
  SharedDtor();
}

void client_versions_distribution_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void client_versions_distribution_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_distribution_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_distribution_ans_descriptor_;
}

const client_versions_distribution_ans& client_versions_distribution_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_distribution_ans* client_versions_distribution_ans::default_instance_ = NULL;

client_versions_distribution_ans* client_versions_distribution_ans::New() const {
  return new client_versions_distribution_ans;
}

void client_versions_distribution_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_distribution_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_distribution_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.app_version_statistics info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_distribution_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_distribution_ans)
  return false;
#undef DO_
}

void client_versions_distribution_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_distribution_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.app_version_statistics info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_distribution_ans)
}

::google::protobuf::uint8* client_versions_distribution_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_distribution_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.app_version_statistics info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_distribution_ans)
  return target;
}

int client_versions_distribution_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.app_version_statistics info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_distribution_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_distribution_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_distribution_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_distribution_ans::MergeFrom(const client_versions_distribution_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_distribution_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_distribution_ans::CopyFrom(const client_versions_distribution_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_distribution_ans::IsInitialized() const {

  return true;
}

void client_versions_distribution_ans::Swap(client_versions_distribution_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_distribution_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_distribution_ans_descriptor_;
  metadata.reflection = client_versions_distribution_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_distribution_detail_ask::kStartDateFieldNumber;
const int client_versions_distribution_detail_ask::kEndDateFieldNumber;
const int client_versions_distribution_detail_ask::kOsVersionFieldNumber;
const int client_versions_distribution_detail_ask::kAppVersionFieldNumber;
const int client_versions_distribution_detail_ask::kRequestTypeFieldNumber;
const int client_versions_distribution_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

client_versions_distribution_detail_ask::client_versions_distribution_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_distribution_detail_ask)
}

void client_versions_distribution_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

client_versions_distribution_detail_ask::client_versions_distribution_detail_ask(const client_versions_distribution_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_distribution_detail_ask)
}

void client_versions_distribution_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_distribution_detail_ask::~client_versions_distribution_detail_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_distribution_detail_ask)
  SharedDtor();
}

void client_versions_distribution_detail_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void client_versions_distribution_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_distribution_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_distribution_detail_ask_descriptor_;
}

const client_versions_distribution_detail_ask& client_versions_distribution_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_distribution_detail_ask* client_versions_distribution_detail_ask::default_instance_ = NULL;

client_versions_distribution_detail_ask* client_versions_distribution_detail_ask::New() const {
  return new client_versions_distribution_detail_ask;
}

void client_versions_distribution_detail_ask::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_app_version()) {
      if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_distribution_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_distribution_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app_version;
        break;
      }

      // optional bytes app_version = 4;
      case 4: {
        if (tag == 34) {
         parse_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 5;
      case 5: {
        if (tag == 40) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_distribution_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_distribution_detail_ask)
  return false;
#undef DO_
}

void client_versions_distribution_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_distribution_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional bytes app_version = 4;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->app_version(), output);
  }

  // optional int32 request_type = 5;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_distribution_detail_ask)
}

::google::protobuf::uint8* client_versions_distribution_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_distribution_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional bytes app_version = 4;
  if (has_app_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->app_version(), target);
  }

  // optional int32 request_type = 5;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_distribution_detail_ask)
  return target;
}

int client_versions_distribution_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional bytes app_version = 4;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_version());
    }

    // optional int32 request_type = 5;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_distribution_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_distribution_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_distribution_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_distribution_detail_ask::MergeFrom(const client_versions_distribution_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_distribution_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_distribution_detail_ask::CopyFrom(const client_versions_distribution_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_distribution_detail_ask::IsInitialized() const {

  return true;
}

void client_versions_distribution_detail_ask::Swap(client_versions_distribution_detail_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(app_version_, other->app_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_distribution_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_distribution_detail_ask_descriptor_;
  metadata.reflection = client_versions_distribution_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_distribution_detail_ans::kInfoFieldNumber;
const int client_versions_distribution_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

client_versions_distribution_detail_ans::client_versions_distribution_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_distribution_detail_ans)
}

void client_versions_distribution_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

client_versions_distribution_detail_ans::client_versions_distribution_detail_ans(const client_versions_distribution_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_distribution_detail_ans)
}

void client_versions_distribution_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_distribution_detail_ans::~client_versions_distribution_detail_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_distribution_detail_ans)
  SharedDtor();
}

void client_versions_distribution_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void client_versions_distribution_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_distribution_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_distribution_detail_ans_descriptor_;
}

const client_versions_distribution_detail_ans& client_versions_distribution_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_distribution_detail_ans* client_versions_distribution_detail_ans::default_instance_ = NULL;

client_versions_distribution_detail_ans* client_versions_distribution_detail_ans::New() const {
  return new client_versions_distribution_detail_ans;
}

void client_versions_distribution_detail_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_distribution_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_distribution_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.user_acount_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_distribution_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_distribution_detail_ans)
  return false;
#undef DO_
}

void client_versions_distribution_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_distribution_detail_ans)
  // repeated .ODP_main_frame.user_acount_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_distribution_detail_ans)
}

::google::protobuf::uint8* client_versions_distribution_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_distribution_detail_ans)
  // repeated .ODP_main_frame.user_acount_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_distribution_detail_ans)
  return target;
}

int client_versions_distribution_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_acount_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_distribution_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_distribution_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_distribution_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_distribution_detail_ans::MergeFrom(const client_versions_distribution_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_distribution_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_distribution_detail_ans::CopyFrom(const client_versions_distribution_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_distribution_detail_ans::IsInitialized() const {

  return true;
}

void client_versions_distribution_detail_ans::Swap(client_versions_distribution_detail_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_distribution_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_distribution_detail_ans_descriptor_;
  metadata.reflection = client_versions_distribution_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_distribution_detail_list_ask::kStartDateFieldNumber;
const int client_versions_distribution_detail_list_ask::kEndDateFieldNumber;
const int client_versions_distribution_detail_list_ask::kOsVersionFieldNumber;
const int client_versions_distribution_detail_list_ask::kAppVersionFieldNumber;
const int client_versions_distribution_detail_list_ask::kPageNumFieldNumber;
const int client_versions_distribution_detail_list_ask::kCurPageFieldNumber;
const int client_versions_distribution_detail_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

client_versions_distribution_detail_list_ask::client_versions_distribution_detail_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_distribution_detail_list_ask)
}

void client_versions_distribution_detail_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

client_versions_distribution_detail_list_ask::client_versions_distribution_detail_list_ask(const client_versions_distribution_detail_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_distribution_detail_list_ask)
}

void client_versions_distribution_detail_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_distribution_detail_list_ask::~client_versions_distribution_detail_list_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_distribution_detail_list_ask)
  SharedDtor();
}

void client_versions_distribution_detail_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void client_versions_distribution_detail_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_distribution_detail_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_distribution_detail_list_ask_descriptor_;
}

const client_versions_distribution_detail_list_ask& client_versions_distribution_detail_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_distribution_detail_list_ask* client_versions_distribution_detail_list_ask::default_instance_ = NULL;

client_versions_distribution_detail_list_ask* client_versions_distribution_detail_list_ask::New() const {
  return new client_versions_distribution_detail_list_ask;
}

void client_versions_distribution_detail_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<client_versions_distribution_detail_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_app_version()) {
      if (app_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_version_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_distribution_detail_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_distribution_detail_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app_version;
        break;
      }

      // optional bytes app_version = 4;
      case 4: {
        if (tag == 34) {
         parse_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_distribution_detail_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_distribution_detail_list_ask)
  return false;
#undef DO_
}

void client_versions_distribution_detail_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_distribution_detail_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional bytes app_version = 4;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->app_version(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_distribution_detail_list_ask)
}

::google::protobuf::uint8* client_versions_distribution_detail_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_distribution_detail_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional bytes app_version = 4;
  if (has_app_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->app_version(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_distribution_detail_list_ask)
  return target;
}

int client_versions_distribution_detail_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional bytes app_version = 4;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_version());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_distribution_detail_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_distribution_detail_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_distribution_detail_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_distribution_detail_list_ask::MergeFrom(const client_versions_distribution_detail_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_distribution_detail_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_distribution_detail_list_ask::CopyFrom(const client_versions_distribution_detail_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_distribution_detail_list_ask::IsInitialized() const {

  return true;
}

void client_versions_distribution_detail_list_ask::Swap(client_versions_distribution_detail_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(app_version_, other->app_version_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_distribution_detail_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_distribution_detail_list_ask_descriptor_;
  metadata.reflection = client_versions_distribution_detail_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_versions_distribution_detail_list_ans::kTotalNumberFieldNumber;
const int client_versions_distribution_detail_list_ans::kInfoFieldNumber;
const int client_versions_distribution_detail_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

client_versions_distribution_detail_list_ans::client_versions_distribution_detail_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.client_versions_distribution_detail_list_ans)
}

void client_versions_distribution_detail_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

client_versions_distribution_detail_list_ans::client_versions_distribution_detail_list_ans(const client_versions_distribution_detail_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.client_versions_distribution_detail_list_ans)
}

void client_versions_distribution_detail_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_versions_distribution_detail_list_ans::~client_versions_distribution_detail_list_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.client_versions_distribution_detail_list_ans)
  SharedDtor();
}

void client_versions_distribution_detail_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void client_versions_distribution_detail_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_versions_distribution_detail_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_versions_distribution_detail_list_ans_descriptor_;
}

const client_versions_distribution_detail_list_ans& client_versions_distribution_detail_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

client_versions_distribution_detail_list_ans* client_versions_distribution_detail_list_ans::default_instance_ = NULL;

client_versions_distribution_detail_list_ans* client_versions_distribution_detail_list_ans::New() const {
  return new client_versions_distribution_detail_list_ans;
}

void client_versions_distribution_detail_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_versions_distribution_detail_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.client_versions_distribution_detail_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.app_version_detail info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.client_versions_distribution_detail_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.client_versions_distribution_detail_list_ans)
  return false;
#undef DO_
}

void client_versions_distribution_detail_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.client_versions_distribution_detail_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.app_version_detail info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.client_versions_distribution_detail_list_ans)
}

::google::protobuf::uint8* client_versions_distribution_detail_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.client_versions_distribution_detail_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.app_version_detail info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.client_versions_distribution_detail_list_ans)
  return target;
}

int client_versions_distribution_detail_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.app_version_detail info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_versions_distribution_detail_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_versions_distribution_detail_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_versions_distribution_detail_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_versions_distribution_detail_list_ans::MergeFrom(const client_versions_distribution_detail_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_versions_distribution_detail_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_versions_distribution_detail_list_ans::CopyFrom(const client_versions_distribution_detail_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_versions_distribution_detail_list_ans::IsInitialized() const {

  return true;
}

void client_versions_distribution_detail_list_ans::Swap(client_versions_distribution_detail_list_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_versions_distribution_detail_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_versions_distribution_detail_list_ans_descriptor_;
  metadata.reflection = client_versions_distribution_detail_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_count_analyze_ask::kStartDateFieldNumber;
const int start_count_analyze_ask::kEndDateFieldNumber;
const int start_count_analyze_ask::kOsVersionFieldNumber;
const int start_count_analyze_ask::kRequestTypeFieldNumber;
const int start_count_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

start_count_analyze_ask::start_count_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.start_count_analyze_ask)
}

void start_count_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

start_count_analyze_ask::start_count_analyze_ask(const start_count_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.start_count_analyze_ask)
}

void start_count_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_count_analyze_ask::~start_count_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.start_count_analyze_ask)
  SharedDtor();
}

void start_count_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void start_count_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_count_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_count_analyze_ask_descriptor_;
}

const start_count_analyze_ask& start_count_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

start_count_analyze_ask* start_count_analyze_ask::default_instance_ = NULL;

start_count_analyze_ask* start_count_analyze_ask::New() const {
  return new start_count_analyze_ask;
}

void start_count_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_count_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.start_count_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.start_count_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.start_count_analyze_ask)
  return false;
#undef DO_
}

void start_count_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.start_count_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.start_count_analyze_ask)
}

::google::protobuf::uint8* start_count_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.start_count_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.start_count_analyze_ask)
  return target;
}

int start_count_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_count_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_count_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_count_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_count_analyze_ask::MergeFrom(const start_count_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_count_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_count_analyze_ask::CopyFrom(const start_count_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_count_analyze_ask::IsInitialized() const {

  return true;
}

void start_count_analyze_ask::Swap(start_count_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_count_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_count_analyze_ask_descriptor_;
  metadata.reflection = start_count_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_count_analyze_ans::kInfoFieldNumber;
const int start_count_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

start_count_analyze_ans::start_count_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.start_count_analyze_ans)
}

void start_count_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

start_count_analyze_ans::start_count_analyze_ans(const start_count_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.start_count_analyze_ans)
}

void start_count_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_count_analyze_ans::~start_count_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.start_count_analyze_ans)
  SharedDtor();
}

void start_count_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void start_count_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_count_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_count_analyze_ans_descriptor_;
}

const start_count_analyze_ans& start_count_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

start_count_analyze_ans* start_count_analyze_ans::default_instance_ = NULL;

start_count_analyze_ans* start_count_analyze_ans::New() const {
  return new start_count_analyze_ans;
}

void start_count_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_count_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.start_count_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.start_count_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.start_count_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.start_count_analyze_ans)
  return false;
#undef DO_
}

void start_count_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.start_count_analyze_ans)
  // repeated .ODP_main_frame.start_count_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.start_count_analyze_ans)
}

::google::protobuf::uint8* start_count_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.start_count_analyze_ans)
  // repeated .ODP_main_frame.start_count_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.start_count_analyze_ans)
  return target;
}

int start_count_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.start_count_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_count_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_count_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_count_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_count_analyze_ans::MergeFrom(const start_count_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_count_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_count_analyze_ans::CopyFrom(const start_count_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_count_analyze_ans::IsInitialized() const {

  return true;
}

void start_count_analyze_ans::Swap(start_count_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_count_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_count_analyze_ans_descriptor_;
  metadata.reflection = start_count_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_count_analyze_list_ask::kStartDateFieldNumber;
const int start_count_analyze_list_ask::kEndDateFieldNumber;
const int start_count_analyze_list_ask::kOsVersionFieldNumber;
const int start_count_analyze_list_ask::kRequestTypeFieldNumber;
const int start_count_analyze_list_ask::kPageNumFieldNumber;
const int start_count_analyze_list_ask::kCurPageFieldNumber;
const int start_count_analyze_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

start_count_analyze_list_ask::start_count_analyze_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.start_count_analyze_list_ask)
}

void start_count_analyze_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

start_count_analyze_list_ask::start_count_analyze_list_ask(const start_count_analyze_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.start_count_analyze_list_ask)
}

void start_count_analyze_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_count_analyze_list_ask::~start_count_analyze_list_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.start_count_analyze_list_ask)
  SharedDtor();
}

void start_count_analyze_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void start_count_analyze_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_count_analyze_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_count_analyze_list_ask_descriptor_;
}

const start_count_analyze_list_ask& start_count_analyze_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

start_count_analyze_list_ask* start_count_analyze_list_ask::default_instance_ = NULL;

start_count_analyze_list_ask* start_count_analyze_list_ask::New() const {
  return new start_count_analyze_list_ask;
}

void start_count_analyze_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<start_count_analyze_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(request_type_, page_num_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_count_analyze_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.start_count_analyze_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.start_count_analyze_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.start_count_analyze_list_ask)
  return false;
#undef DO_
}

void start_count_analyze_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.start_count_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.start_count_analyze_list_ask)
}

::google::protobuf::uint8* start_count_analyze_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.start_count_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.start_count_analyze_list_ask)
  return target;
}

int start_count_analyze_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_count_analyze_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_count_analyze_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_count_analyze_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_count_analyze_list_ask::MergeFrom(const start_count_analyze_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_count_analyze_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_count_analyze_list_ask::CopyFrom(const start_count_analyze_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_count_analyze_list_ask::IsInitialized() const {

  return true;
}

void start_count_analyze_list_ask::Swap(start_count_analyze_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_count_analyze_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_count_analyze_list_ask_descriptor_;
  metadata.reflection = start_count_analyze_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int start_count_analyze_list_ans::kTotalNumberFieldNumber;
const int start_count_analyze_list_ans::kInfoFieldNumber;
const int start_count_analyze_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

start_count_analyze_list_ans::start_count_analyze_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.start_count_analyze_list_ans)
}

void start_count_analyze_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

start_count_analyze_list_ans::start_count_analyze_list_ans(const start_count_analyze_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.start_count_analyze_list_ans)
}

void start_count_analyze_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

start_count_analyze_list_ans::~start_count_analyze_list_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.start_count_analyze_list_ans)
  SharedDtor();
}

void start_count_analyze_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void start_count_analyze_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* start_count_analyze_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return start_count_analyze_list_ans_descriptor_;
}

const start_count_analyze_list_ans& start_count_analyze_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

start_count_analyze_list_ans* start_count_analyze_list_ans::default_instance_ = NULL;

start_count_analyze_list_ans* start_count_analyze_list_ans::New() const {
  return new start_count_analyze_list_ans;
}

void start_count_analyze_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool start_count_analyze_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.start_count_analyze_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.start_count_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.start_count_analyze_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.start_count_analyze_list_ans)
  return false;
#undef DO_
}

void start_count_analyze_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.start_count_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.start_count_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.start_count_analyze_list_ans)
}

::google::protobuf::uint8* start_count_analyze_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.start_count_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.start_count_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.start_count_analyze_list_ans)
  return target;
}

int start_count_analyze_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.start_count_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void start_count_analyze_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const start_count_analyze_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const start_count_analyze_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void start_count_analyze_list_ans::MergeFrom(const start_count_analyze_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void start_count_analyze_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void start_count_analyze_list_ans::CopyFrom(const start_count_analyze_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_count_analyze_list_ans::IsInitialized() const {

  return true;
}

void start_count_analyze_list_ans::Swap(start_count_analyze_list_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata start_count_analyze_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = start_count_analyze_list_ans_descriptor_;
  metadata.reflection = start_count_analyze_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int new_add_user_analyze_ask::kStartDateFieldNumber;
const int new_add_user_analyze_ask::kEndDateFieldNumber;
const int new_add_user_analyze_ask::kOsVersionFieldNumber;
const int new_add_user_analyze_ask::kRequestTypeFieldNumber;
const int new_add_user_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

new_add_user_analyze_ask::new_add_user_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.new_add_user_analyze_ask)
}

void new_add_user_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

new_add_user_analyze_ask::new_add_user_analyze_ask(const new_add_user_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.new_add_user_analyze_ask)
}

void new_add_user_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

new_add_user_analyze_ask::~new_add_user_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.new_add_user_analyze_ask)
  SharedDtor();
}

void new_add_user_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void new_add_user_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_add_user_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return new_add_user_analyze_ask_descriptor_;
}

const new_add_user_analyze_ask& new_add_user_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

new_add_user_analyze_ask* new_add_user_analyze_ask::default_instance_ = NULL;

new_add_user_analyze_ask* new_add_user_analyze_ask::New() const {
  return new new_add_user_analyze_ask;
}

void new_add_user_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool new_add_user_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.new_add_user_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.new_add_user_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.new_add_user_analyze_ask)
  return false;
#undef DO_
}

void new_add_user_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.new_add_user_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.new_add_user_analyze_ask)
}

::google::protobuf::uint8* new_add_user_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.new_add_user_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.new_add_user_analyze_ask)
  return target;
}

int new_add_user_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_add_user_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const new_add_user_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const new_add_user_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void new_add_user_analyze_ask::MergeFrom(const new_add_user_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void new_add_user_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_add_user_analyze_ask::CopyFrom(const new_add_user_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_add_user_analyze_ask::IsInitialized() const {

  return true;
}

void new_add_user_analyze_ask::Swap(new_add_user_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata new_add_user_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = new_add_user_analyze_ask_descriptor_;
  metadata.reflection = new_add_user_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int new_add_user_analyze_ans::kInfoFieldNumber;
const int new_add_user_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

new_add_user_analyze_ans::new_add_user_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.new_add_user_analyze_ans)
}

void new_add_user_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

new_add_user_analyze_ans::new_add_user_analyze_ans(const new_add_user_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.new_add_user_analyze_ans)
}

void new_add_user_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

new_add_user_analyze_ans::~new_add_user_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.new_add_user_analyze_ans)
  SharedDtor();
}

void new_add_user_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void new_add_user_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_add_user_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return new_add_user_analyze_ans_descriptor_;
}

const new_add_user_analyze_ans& new_add_user_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

new_add_user_analyze_ans* new_add_user_analyze_ans::default_instance_ = NULL;

new_add_user_analyze_ans* new_add_user_analyze_ans::New() const {
  return new new_add_user_analyze_ans;
}

void new_add_user_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool new_add_user_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.new_add_user_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.user_analyze_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.new_add_user_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.new_add_user_analyze_ans)
  return false;
#undef DO_
}

void new_add_user_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.new_add_user_analyze_ans)
  // repeated .ODP_main_frame.user_analyze_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.new_add_user_analyze_ans)
}

::google::protobuf::uint8* new_add_user_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.new_add_user_analyze_ans)
  // repeated .ODP_main_frame.user_analyze_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.new_add_user_analyze_ans)
  return target;
}

int new_add_user_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_analyze_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_add_user_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const new_add_user_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const new_add_user_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void new_add_user_analyze_ans::MergeFrom(const new_add_user_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void new_add_user_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_add_user_analyze_ans::CopyFrom(const new_add_user_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_add_user_analyze_ans::IsInitialized() const {

  return true;
}

void new_add_user_analyze_ans::Swap(new_add_user_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata new_add_user_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = new_add_user_analyze_ans_descriptor_;
  metadata.reflection = new_add_user_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int new_add_user_analyze_list_ask::kStartDateFieldNumber;
const int new_add_user_analyze_list_ask::kEndDateFieldNumber;
const int new_add_user_analyze_list_ask::kOsVersionFieldNumber;
const int new_add_user_analyze_list_ask::kRequestTypeFieldNumber;
const int new_add_user_analyze_list_ask::kPageNumFieldNumber;
const int new_add_user_analyze_list_ask::kCurPageFieldNumber;
const int new_add_user_analyze_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

new_add_user_analyze_list_ask::new_add_user_analyze_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.new_add_user_analyze_list_ask)
}

void new_add_user_analyze_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

new_add_user_analyze_list_ask::new_add_user_analyze_list_ask(const new_add_user_analyze_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.new_add_user_analyze_list_ask)
}

void new_add_user_analyze_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

new_add_user_analyze_list_ask::~new_add_user_analyze_list_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.new_add_user_analyze_list_ask)
  SharedDtor();
}

void new_add_user_analyze_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void new_add_user_analyze_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_add_user_analyze_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return new_add_user_analyze_list_ask_descriptor_;
}

const new_add_user_analyze_list_ask& new_add_user_analyze_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

new_add_user_analyze_list_ask* new_add_user_analyze_list_ask::default_instance_ = NULL;

new_add_user_analyze_list_ask* new_add_user_analyze_list_ask::New() const {
  return new new_add_user_analyze_list_ask;
}

void new_add_user_analyze_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<new_add_user_analyze_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(request_type_, page_num_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool new_add_user_analyze_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.new_add_user_analyze_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.new_add_user_analyze_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.new_add_user_analyze_list_ask)
  return false;
#undef DO_
}

void new_add_user_analyze_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.new_add_user_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.new_add_user_analyze_list_ask)
}

::google::protobuf::uint8* new_add_user_analyze_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.new_add_user_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.new_add_user_analyze_list_ask)
  return target;
}

int new_add_user_analyze_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_add_user_analyze_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const new_add_user_analyze_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const new_add_user_analyze_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void new_add_user_analyze_list_ask::MergeFrom(const new_add_user_analyze_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void new_add_user_analyze_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_add_user_analyze_list_ask::CopyFrom(const new_add_user_analyze_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_add_user_analyze_list_ask::IsInitialized() const {

  return true;
}

void new_add_user_analyze_list_ask::Swap(new_add_user_analyze_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata new_add_user_analyze_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = new_add_user_analyze_list_ask_descriptor_;
  metadata.reflection = new_add_user_analyze_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int new_add_user_analyze_list_ans::kTotalNumberFieldNumber;
const int new_add_user_analyze_list_ans::kInfoFieldNumber;
const int new_add_user_analyze_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

new_add_user_analyze_list_ans::new_add_user_analyze_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.new_add_user_analyze_list_ans)
}

void new_add_user_analyze_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

new_add_user_analyze_list_ans::new_add_user_analyze_list_ans(const new_add_user_analyze_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.new_add_user_analyze_list_ans)
}

void new_add_user_analyze_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

new_add_user_analyze_list_ans::~new_add_user_analyze_list_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.new_add_user_analyze_list_ans)
  SharedDtor();
}

void new_add_user_analyze_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void new_add_user_analyze_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_add_user_analyze_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return new_add_user_analyze_list_ans_descriptor_;
}

const new_add_user_analyze_list_ans& new_add_user_analyze_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

new_add_user_analyze_list_ans* new_add_user_analyze_list_ans::default_instance_ = NULL;

new_add_user_analyze_list_ans* new_add_user_analyze_list_ans::New() const {
  return new new_add_user_analyze_list_ans;
}

void new_add_user_analyze_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool new_add_user_analyze_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.new_add_user_analyze_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.user_analyze_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.new_add_user_analyze_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.new_add_user_analyze_list_ans)
  return false;
#undef DO_
}

void new_add_user_analyze_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.new_add_user_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.user_analyze_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.new_add_user_analyze_list_ans)
}

::google::protobuf::uint8* new_add_user_analyze_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.new_add_user_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.user_analyze_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.new_add_user_analyze_list_ans)
  return target;
}

int new_add_user_analyze_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_analyze_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_add_user_analyze_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const new_add_user_analyze_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const new_add_user_analyze_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void new_add_user_analyze_list_ans::MergeFrom(const new_add_user_analyze_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void new_add_user_analyze_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_add_user_analyze_list_ans::CopyFrom(const new_add_user_analyze_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_add_user_analyze_list_ans::IsInitialized() const {

  return true;
}

void new_add_user_analyze_list_ans::Swap(new_add_user_analyze_list_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata new_add_user_analyze_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = new_add_user_analyze_list_ans_descriptor_;
  metadata.reflection = new_add_user_analyze_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int active_user_analyze_ask::kStartDateFieldNumber;
const int active_user_analyze_ask::kEndDateFieldNumber;
const int active_user_analyze_ask::kOsVersionFieldNumber;
const int active_user_analyze_ask::kRequestTypeFieldNumber;
const int active_user_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

active_user_analyze_ask::active_user_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.active_user_analyze_ask)
}

void active_user_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

active_user_analyze_ask::active_user_analyze_ask(const active_user_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.active_user_analyze_ask)
}

void active_user_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

active_user_analyze_ask::~active_user_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.active_user_analyze_ask)
  SharedDtor();
}

void active_user_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void active_user_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* active_user_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return active_user_analyze_ask_descriptor_;
}

const active_user_analyze_ask& active_user_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

active_user_analyze_ask* active_user_analyze_ask::default_instance_ = NULL;

active_user_analyze_ask* active_user_analyze_ask::New() const {
  return new active_user_analyze_ask;
}

void active_user_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool active_user_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.active_user_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.active_user_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.active_user_analyze_ask)
  return false;
#undef DO_
}

void active_user_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.active_user_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.active_user_analyze_ask)
}

::google::protobuf::uint8* active_user_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.active_user_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.active_user_analyze_ask)
  return target;
}

int active_user_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void active_user_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const active_user_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const active_user_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void active_user_analyze_ask::MergeFrom(const active_user_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void active_user_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_user_analyze_ask::CopyFrom(const active_user_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_user_analyze_ask::IsInitialized() const {

  return true;
}

void active_user_analyze_ask::Swap(active_user_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata active_user_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = active_user_analyze_ask_descriptor_;
  metadata.reflection = active_user_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int active_user_analyze_ans::kInfoFieldNumber;
const int active_user_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

active_user_analyze_ans::active_user_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.active_user_analyze_ans)
}

void active_user_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

active_user_analyze_ans::active_user_analyze_ans(const active_user_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.active_user_analyze_ans)
}

void active_user_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

active_user_analyze_ans::~active_user_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.active_user_analyze_ans)
  SharedDtor();
}

void active_user_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void active_user_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* active_user_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return active_user_analyze_ans_descriptor_;
}

const active_user_analyze_ans& active_user_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

active_user_analyze_ans* active_user_analyze_ans::default_instance_ = NULL;

active_user_analyze_ans* active_user_analyze_ans::New() const {
  return new active_user_analyze_ans;
}

void active_user_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool active_user_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.active_user_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.user_analyze_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.active_user_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.active_user_analyze_ans)
  return false;
#undef DO_
}

void active_user_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.active_user_analyze_ans)
  // repeated .ODP_main_frame.user_analyze_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.active_user_analyze_ans)
}

::google::protobuf::uint8* active_user_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.active_user_analyze_ans)
  // repeated .ODP_main_frame.user_analyze_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.active_user_analyze_ans)
  return target;
}

int active_user_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_analyze_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void active_user_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const active_user_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const active_user_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void active_user_analyze_ans::MergeFrom(const active_user_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void active_user_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_user_analyze_ans::CopyFrom(const active_user_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_user_analyze_ans::IsInitialized() const {

  return true;
}

void active_user_analyze_ans::Swap(active_user_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata active_user_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = active_user_analyze_ans_descriptor_;
  metadata.reflection = active_user_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int active_user_analyze_list_ask::kStartDateFieldNumber;
const int active_user_analyze_list_ask::kEndDateFieldNumber;
const int active_user_analyze_list_ask::kOsVersionFieldNumber;
const int active_user_analyze_list_ask::kRequestTypeFieldNumber;
const int active_user_analyze_list_ask::kPageNumFieldNumber;
const int active_user_analyze_list_ask::kCurPageFieldNumber;
const int active_user_analyze_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

active_user_analyze_list_ask::active_user_analyze_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.active_user_analyze_list_ask)
}

void active_user_analyze_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

active_user_analyze_list_ask::active_user_analyze_list_ask(const active_user_analyze_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.active_user_analyze_list_ask)
}

void active_user_analyze_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

active_user_analyze_list_ask::~active_user_analyze_list_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.active_user_analyze_list_ask)
  SharedDtor();
}

void active_user_analyze_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void active_user_analyze_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* active_user_analyze_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return active_user_analyze_list_ask_descriptor_;
}

const active_user_analyze_list_ask& active_user_analyze_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

active_user_analyze_list_ask* active_user_analyze_list_ask::default_instance_ = NULL;

active_user_analyze_list_ask* active_user_analyze_list_ask::New() const {
  return new active_user_analyze_list_ask;
}

void active_user_analyze_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<active_user_analyze_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(request_type_, page_num_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool active_user_analyze_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.active_user_analyze_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.active_user_analyze_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.active_user_analyze_list_ask)
  return false;
#undef DO_
}

void active_user_analyze_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.active_user_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.active_user_analyze_list_ask)
}

::google::protobuf::uint8* active_user_analyze_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.active_user_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.active_user_analyze_list_ask)
  return target;
}

int active_user_analyze_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void active_user_analyze_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const active_user_analyze_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const active_user_analyze_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void active_user_analyze_list_ask::MergeFrom(const active_user_analyze_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void active_user_analyze_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_user_analyze_list_ask::CopyFrom(const active_user_analyze_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_user_analyze_list_ask::IsInitialized() const {

  return true;
}

void active_user_analyze_list_ask::Swap(active_user_analyze_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata active_user_analyze_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = active_user_analyze_list_ask_descriptor_;
  metadata.reflection = active_user_analyze_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int active_user_analyze_list_ans::kTotalNumberFieldNumber;
const int active_user_analyze_list_ans::kInfoFieldNumber;
const int active_user_analyze_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

active_user_analyze_list_ans::active_user_analyze_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.active_user_analyze_list_ans)
}

void active_user_analyze_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

active_user_analyze_list_ans::active_user_analyze_list_ans(const active_user_analyze_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.active_user_analyze_list_ans)
}

void active_user_analyze_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

active_user_analyze_list_ans::~active_user_analyze_list_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.active_user_analyze_list_ans)
  SharedDtor();
}

void active_user_analyze_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void active_user_analyze_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* active_user_analyze_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return active_user_analyze_list_ans_descriptor_;
}

const active_user_analyze_list_ans& active_user_analyze_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

active_user_analyze_list_ans* active_user_analyze_list_ans::default_instance_ = NULL;

active_user_analyze_list_ans* active_user_analyze_list_ans::New() const {
  return new active_user_analyze_list_ans;
}

void active_user_analyze_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool active_user_analyze_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.active_user_analyze_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.user_analyze_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.active_user_analyze_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.active_user_analyze_list_ans)
  return false;
#undef DO_
}

void active_user_analyze_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.active_user_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.user_analyze_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.active_user_analyze_list_ans)
}

::google::protobuf::uint8* active_user_analyze_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.active_user_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.user_analyze_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.active_user_analyze_list_ans)
  return target;
}

int active_user_analyze_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_analyze_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void active_user_analyze_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const active_user_analyze_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const active_user_analyze_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void active_user_analyze_list_ans::MergeFrom(const active_user_analyze_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void active_user_analyze_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_user_analyze_list_ans::CopyFrom(const active_user_analyze_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_user_analyze_list_ans::IsInitialized() const {

  return true;
}

void active_user_analyze_list_ans::Swap(active_user_analyze_list_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata active_user_analyze_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = active_user_analyze_list_ans_descriptor_;
  metadata.reflection = active_user_analyze_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_freshness_analyze_ask::kStartDateFieldNumber;
const int user_freshness_analyze_ask::kEndDateFieldNumber;
const int user_freshness_analyze_ask::kOsVersionFieldNumber;
const int user_freshness_analyze_ask::kRequestTypeFieldNumber;
const int user_freshness_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_freshness_analyze_ask::user_freshness_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_freshness_analyze_ask)
}

void user_freshness_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_freshness_analyze_ask::user_freshness_analyze_ask(const user_freshness_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_freshness_analyze_ask)
}

void user_freshness_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_freshness_analyze_ask::~user_freshness_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_freshness_analyze_ask)
  SharedDtor();
}

void user_freshness_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_freshness_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_freshness_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_freshness_analyze_ask_descriptor_;
}

const user_freshness_analyze_ask& user_freshness_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_freshness_analyze_ask* user_freshness_analyze_ask::default_instance_ = NULL;

user_freshness_analyze_ask* user_freshness_analyze_ask::New() const {
  return new user_freshness_analyze_ask;
}

void user_freshness_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_freshness_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_freshness_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_freshness_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_freshness_analyze_ask)
  return false;
#undef DO_
}

void user_freshness_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_freshness_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_freshness_analyze_ask)
}

::google::protobuf::uint8* user_freshness_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_freshness_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_freshness_analyze_ask)
  return target;
}

int user_freshness_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_freshness_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_freshness_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_freshness_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_freshness_analyze_ask::MergeFrom(const user_freshness_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_freshness_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_freshness_analyze_ask::CopyFrom(const user_freshness_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_freshness_analyze_ask::IsInitialized() const {

  return true;
}

void user_freshness_analyze_ask::Swap(user_freshness_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_freshness_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_freshness_analyze_ask_descriptor_;
  metadata.reflection = user_freshness_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_freshness_analyze_ans::kInfoFieldNumber;
const int user_freshness_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_freshness_analyze_ans::user_freshness_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_freshness_analyze_ans)
}

void user_freshness_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_freshness_analyze_ans::user_freshness_analyze_ans(const user_freshness_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_freshness_analyze_ans)
}

void user_freshness_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_freshness_analyze_ans::~user_freshness_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_freshness_analyze_ans)
  SharedDtor();
}

void user_freshness_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_freshness_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_freshness_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_freshness_analyze_ans_descriptor_;
}

const user_freshness_analyze_ans& user_freshness_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_freshness_analyze_ans* user_freshness_analyze_ans::default_instance_ = NULL;

user_freshness_analyze_ans* user_freshness_analyze_ans::New() const {
  return new user_freshness_analyze_ans;
}

void user_freshness_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_freshness_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_freshness_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.user_freshness_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_freshness_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_freshness_analyze_ans)
  return false;
#undef DO_
}

void user_freshness_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_freshness_analyze_ans)
  // repeated .ODP_main_frame.user_freshness_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_freshness_analyze_ans)
}

::google::protobuf::uint8* user_freshness_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_freshness_analyze_ans)
  // repeated .ODP_main_frame.user_freshness_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_freshness_analyze_ans)
  return target;
}

int user_freshness_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_freshness_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_freshness_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_freshness_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_freshness_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_freshness_analyze_ans::MergeFrom(const user_freshness_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_freshness_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_freshness_analyze_ans::CopyFrom(const user_freshness_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_freshness_analyze_ans::IsInitialized() const {

  return true;
}

void user_freshness_analyze_ans::Swap(user_freshness_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_freshness_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_freshness_analyze_ans_descriptor_;
  metadata.reflection = user_freshness_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_freshness_analyze_list_ask::kStartDateFieldNumber;
const int user_freshness_analyze_list_ask::kEndDateFieldNumber;
const int user_freshness_analyze_list_ask::kOsVersionFieldNumber;
const int user_freshness_analyze_list_ask::kRequestTypeFieldNumber;
const int user_freshness_analyze_list_ask::kPageNumFieldNumber;
const int user_freshness_analyze_list_ask::kCurPageFieldNumber;
const int user_freshness_analyze_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_freshness_analyze_list_ask::user_freshness_analyze_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_freshness_analyze_list_ask)
}

void user_freshness_analyze_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_freshness_analyze_list_ask::user_freshness_analyze_list_ask(const user_freshness_analyze_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_freshness_analyze_list_ask)
}

void user_freshness_analyze_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_freshness_analyze_list_ask::~user_freshness_analyze_list_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_freshness_analyze_list_ask)
  SharedDtor();
}

void user_freshness_analyze_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_freshness_analyze_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_freshness_analyze_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_freshness_analyze_list_ask_descriptor_;
}

const user_freshness_analyze_list_ask& user_freshness_analyze_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_freshness_analyze_list_ask* user_freshness_analyze_list_ask::default_instance_ = NULL;

user_freshness_analyze_list_ask* user_freshness_analyze_list_ask::New() const {
  return new user_freshness_analyze_list_ask;
}

void user_freshness_analyze_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_freshness_analyze_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(request_type_, page_num_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_freshness_analyze_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_freshness_analyze_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_freshness_analyze_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_freshness_analyze_list_ask)
  return false;
#undef DO_
}

void user_freshness_analyze_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_freshness_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_freshness_analyze_list_ask)
}

::google::protobuf::uint8* user_freshness_analyze_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_freshness_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_freshness_analyze_list_ask)
  return target;
}

int user_freshness_analyze_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_freshness_analyze_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_freshness_analyze_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_freshness_analyze_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_freshness_analyze_list_ask::MergeFrom(const user_freshness_analyze_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_freshness_analyze_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_freshness_analyze_list_ask::CopyFrom(const user_freshness_analyze_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_freshness_analyze_list_ask::IsInitialized() const {

  return true;
}

void user_freshness_analyze_list_ask::Swap(user_freshness_analyze_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_freshness_analyze_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_freshness_analyze_list_ask_descriptor_;
  metadata.reflection = user_freshness_analyze_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_freshness_analyze_list_ans::kTotalNumberFieldNumber;
const int user_freshness_analyze_list_ans::kInfoFieldNumber;
const int user_freshness_analyze_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_freshness_analyze_list_ans::user_freshness_analyze_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_freshness_analyze_list_ans)
}

void user_freshness_analyze_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_freshness_analyze_list_ans::user_freshness_analyze_list_ans(const user_freshness_analyze_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_freshness_analyze_list_ans)
}

void user_freshness_analyze_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_freshness_analyze_list_ans::~user_freshness_analyze_list_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_freshness_analyze_list_ans)
  SharedDtor();
}

void user_freshness_analyze_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_freshness_analyze_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_freshness_analyze_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_freshness_analyze_list_ans_descriptor_;
}

const user_freshness_analyze_list_ans& user_freshness_analyze_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_freshness_analyze_list_ans* user_freshness_analyze_list_ans::default_instance_ = NULL;

user_freshness_analyze_list_ans* user_freshness_analyze_list_ans::New() const {
  return new user_freshness_analyze_list_ans;
}

void user_freshness_analyze_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_freshness_analyze_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_freshness_analyze_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.user_freshness_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_freshness_analyze_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_freshness_analyze_list_ans)
  return false;
#undef DO_
}

void user_freshness_analyze_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_freshness_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.user_freshness_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_freshness_analyze_list_ans)
}

::google::protobuf::uint8* user_freshness_analyze_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_freshness_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.user_freshness_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_freshness_analyze_list_ans)
  return target;
}

int user_freshness_analyze_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_freshness_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_freshness_analyze_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_freshness_analyze_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_freshness_analyze_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_freshness_analyze_list_ans::MergeFrom(const user_freshness_analyze_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_freshness_analyze_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_freshness_analyze_list_ans::CopyFrom(const user_freshness_analyze_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_freshness_analyze_list_ans::IsInitialized() const {

  return true;
}

void user_freshness_analyze_list_ans::Swap(user_freshness_analyze_list_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_freshness_analyze_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_freshness_analyze_list_ans_descriptor_;
  metadata.reflection = user_freshness_analyze_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_retain_analyze_ask::kStartDateFieldNumber;
const int user_retain_analyze_ask::kEndDateFieldNumber;
const int user_retain_analyze_ask::kOsVersionFieldNumber;
const int user_retain_analyze_ask::kRequestTypeFieldNumber;
const int user_retain_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_retain_analyze_ask::user_retain_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_retain_analyze_ask)
}

void user_retain_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_retain_analyze_ask::user_retain_analyze_ask(const user_retain_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_retain_analyze_ask)
}

void user_retain_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_retain_analyze_ask::~user_retain_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_retain_analyze_ask)
  SharedDtor();
}

void user_retain_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_retain_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_retain_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_retain_analyze_ask_descriptor_;
}

const user_retain_analyze_ask& user_retain_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_retain_analyze_ask* user_retain_analyze_ask::default_instance_ = NULL;

user_retain_analyze_ask* user_retain_analyze_ask::New() const {
  return new user_retain_analyze_ask;
}

void user_retain_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_retain_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_retain_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_retain_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_retain_analyze_ask)
  return false;
#undef DO_
}

void user_retain_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_retain_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_retain_analyze_ask)
}

::google::protobuf::uint8* user_retain_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_retain_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_retain_analyze_ask)
  return target;
}

int user_retain_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_retain_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_retain_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_retain_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_retain_analyze_ask::MergeFrom(const user_retain_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_retain_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_retain_analyze_ask::CopyFrom(const user_retain_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_retain_analyze_ask::IsInitialized() const {

  return true;
}

void user_retain_analyze_ask::Swap(user_retain_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_retain_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_retain_analyze_ask_descriptor_;
  metadata.reflection = user_retain_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_retain_analyze_ans::kInfoFieldNumber;
const int user_retain_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_retain_analyze_ans::user_retain_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_retain_analyze_ans)
}

void user_retain_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_retain_analyze_ans::user_retain_analyze_ans(const user_retain_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_retain_analyze_ans)
}

void user_retain_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_retain_analyze_ans::~user_retain_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_retain_analyze_ans)
  SharedDtor();
}

void user_retain_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_retain_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_retain_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_retain_analyze_ans_descriptor_;
}

const user_retain_analyze_ans& user_retain_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_retain_analyze_ans* user_retain_analyze_ans::default_instance_ = NULL;

user_retain_analyze_ans* user_retain_analyze_ans::New() const {
  return new user_retain_analyze_ans;
}

void user_retain_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_retain_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_retain_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.user_retain_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_retain_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_retain_analyze_ans)
  return false;
#undef DO_
}

void user_retain_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_retain_analyze_ans)
  // repeated .ODP_main_frame.user_retain_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_retain_analyze_ans)
}

::google::protobuf::uint8* user_retain_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_retain_analyze_ans)
  // repeated .ODP_main_frame.user_retain_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_retain_analyze_ans)
  return target;
}

int user_retain_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.user_retain_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_retain_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_retain_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_retain_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_retain_analyze_ans::MergeFrom(const user_retain_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_retain_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_retain_analyze_ans::CopyFrom(const user_retain_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_retain_analyze_ans::IsInitialized() const {

  return true;
}

void user_retain_analyze_ans::Swap(user_retain_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_retain_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_retain_analyze_ans_descriptor_;
  metadata.reflection = user_retain_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_time_analyze_ask::kStartDateFieldNumber;
const int use_time_analyze_ask::kOsVersionFieldNumber;
const int use_time_analyze_ask::kRequestTypeFieldNumber;
const int use_time_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

use_time_analyze_ask::use_time_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_time_analyze_ask)
}

void use_time_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

use_time_analyze_ask::use_time_analyze_ask(const use_time_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_time_analyze_ask)
}

void use_time_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_time_analyze_ask::~use_time_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_time_analyze_ask)
  SharedDtor();
}

void use_time_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void use_time_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_time_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_time_analyze_ask_descriptor_;
}

const use_time_analyze_ask& use_time_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_time_analyze_ask* use_time_analyze_ask::default_instance_ = NULL;

use_time_analyze_ask* use_time_analyze_ask::New() const {
  return new use_time_analyze_ask;
}

void use_time_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_time_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_time_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 2;
      case 2: {
        if (tag == 18) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 3;
      case 3: {
        if (tag == 24) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_time_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_time_analyze_ask)
  return false;
#undef DO_
}

void use_time_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_time_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->os_version(), output);
  }

  // optional int32 request_type = 3;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_time_analyze_ask)
}

::google::protobuf::uint8* use_time_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_time_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->os_version(), target);
  }

  // optional int32 request_type = 3;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_time_analyze_ask)
  return target;
}

int use_time_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes os_version = 2;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 3;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_time_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_time_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_time_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_time_analyze_ask::MergeFrom(const use_time_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_time_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_time_analyze_ask::CopyFrom(const use_time_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_time_analyze_ask::IsInitialized() const {

  return true;
}

void use_time_analyze_ask::Swap(use_time_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_time_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_time_analyze_ask_descriptor_;
  metadata.reflection = use_time_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_time_analyze_ans::kInfoFieldNumber;
const int use_time_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

use_time_analyze_ans::use_time_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_time_analyze_ans)
}

void use_time_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

use_time_analyze_ans::use_time_analyze_ans(const use_time_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_time_analyze_ans)
}

void use_time_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_time_analyze_ans::~use_time_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_time_analyze_ans)
  SharedDtor();
}

void use_time_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void use_time_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_time_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_time_analyze_ans_descriptor_;
}

const use_time_analyze_ans& use_time_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_time_analyze_ans* use_time_analyze_ans::default_instance_ = NULL;

use_time_analyze_ans* use_time_analyze_ans::New() const {
  return new use_time_analyze_ans;
}

void use_time_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_time_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_time_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.use_time_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_time_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_time_analyze_ans)
  return false;
#undef DO_
}

void use_time_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_time_analyze_ans)
  // repeated .ODP_main_frame.use_time_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_time_analyze_ans)
}

::google::protobuf::uint8* use_time_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_time_analyze_ans)
  // repeated .ODP_main_frame.use_time_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_time_analyze_ans)
  return target;
}

int use_time_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.use_time_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_time_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_time_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_time_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_time_analyze_ans::MergeFrom(const use_time_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_time_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_time_analyze_ans::CopyFrom(const use_time_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_time_analyze_ans::IsInitialized() const {

  return true;
}

void use_time_analyze_ans::Swap(use_time_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_time_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_time_analyze_ans_descriptor_;
  metadata.reflection = use_time_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_count_analyze_ask::kStartDateFieldNumber;
const int use_count_analyze_ask::kOsVersionFieldNumber;
const int use_count_analyze_ask::kRequestTypeFieldNumber;
const int use_count_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

use_count_analyze_ask::use_count_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_count_analyze_ask)
}

void use_count_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

use_count_analyze_ask::use_count_analyze_ask(const use_count_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_count_analyze_ask)
}

void use_count_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_count_analyze_ask::~use_count_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_count_analyze_ask)
  SharedDtor();
}

void use_count_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void use_count_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_count_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_count_analyze_ask_descriptor_;
}

const use_count_analyze_ask& use_count_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_count_analyze_ask* use_count_analyze_ask::default_instance_ = NULL;

use_count_analyze_ask* use_count_analyze_ask::New() const {
  return new use_count_analyze_ask;
}

void use_count_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_count_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_count_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 2;
      case 2: {
        if (tag == 18) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 3;
      case 3: {
        if (tag == 24) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_count_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_count_analyze_ask)
  return false;
#undef DO_
}

void use_count_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_count_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->os_version(), output);
  }

  // optional int32 request_type = 3;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_count_analyze_ask)
}

::google::protobuf::uint8* use_count_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_count_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->os_version(), target);
  }

  // optional int32 request_type = 3;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_count_analyze_ask)
  return target;
}

int use_count_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes os_version = 2;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 3;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_count_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_count_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_count_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_count_analyze_ask::MergeFrom(const use_count_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_count_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_count_analyze_ask::CopyFrom(const use_count_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_count_analyze_ask::IsInitialized() const {

  return true;
}

void use_count_analyze_ask::Swap(use_count_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_count_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_count_analyze_ask_descriptor_;
  metadata.reflection = use_count_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_count_analyze_ans::kInfoFieldNumber;
const int use_count_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

use_count_analyze_ans::use_count_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_count_analyze_ans)
}

void use_count_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

use_count_analyze_ans::use_count_analyze_ans(const use_count_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_count_analyze_ans)
}

void use_count_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_count_analyze_ans::~use_count_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_count_analyze_ans)
  SharedDtor();
}

void use_count_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void use_count_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_count_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_count_analyze_ans_descriptor_;
}

const use_count_analyze_ans& use_count_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_count_analyze_ans* use_count_analyze_ans::default_instance_ = NULL;

use_count_analyze_ans* use_count_analyze_ans::New() const {
  return new use_count_analyze_ans;
}

void use_count_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_count_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_count_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.use_count_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_count_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_count_analyze_ans)
  return false;
#undef DO_
}

void use_count_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_count_analyze_ans)
  // repeated .ODP_main_frame.use_count_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_count_analyze_ans)
}

::google::protobuf::uint8* use_count_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_count_analyze_ans)
  // repeated .ODP_main_frame.use_count_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_count_analyze_ans)
  return target;
}

int use_count_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.use_count_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_count_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_count_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_count_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_count_analyze_ans::MergeFrom(const use_count_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_count_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_count_analyze_ans::CopyFrom(const use_count_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_count_analyze_ans::IsInitialized() const {

  return true;
}

void use_count_analyze_ans::Swap(use_count_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_count_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_count_analyze_ans_descriptor_;
  metadata.reflection = use_count_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_interval_analyze_ask::kEndDateFieldNumber;
const int use_interval_analyze_ask::kOsVersionFieldNumber;
const int use_interval_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

use_interval_analyze_ask::use_interval_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_interval_analyze_ask)
}

void use_interval_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

use_interval_analyze_ask::use_interval_analyze_ask(const use_interval_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_interval_analyze_ask)
}

void use_interval_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_interval_analyze_ask::~use_interval_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_interval_analyze_ask)
  SharedDtor();
}

void use_interval_analyze_ask::SharedDtor() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void use_interval_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_interval_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_interval_analyze_ask_descriptor_;
}

const use_interval_analyze_ask& use_interval_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_interval_analyze_ask* use_interval_analyze_ask::default_instance_ = NULL;

use_interval_analyze_ask* use_interval_analyze_ask::New() const {
  return new use_interval_analyze_ask;
}

void use_interval_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_interval_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_interval_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes end_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 2;
      case 2: {
        if (tag == 18) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_interval_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_interval_analyze_ask)
  return false;
#undef DO_
}

void use_interval_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_interval_analyze_ask)
  // optional bytes end_date = 1;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->end_date(), output);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->os_version(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_interval_analyze_ask)
}

::google::protobuf::uint8* use_interval_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_interval_analyze_ask)
  // optional bytes end_date = 1;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->end_date(), target);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->os_version(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_interval_analyze_ask)
  return target;
}

int use_interval_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes end_date = 1;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 2;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_interval_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_interval_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_interval_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_interval_analyze_ask::MergeFrom(const use_interval_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_interval_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_interval_analyze_ask::CopyFrom(const use_interval_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_interval_analyze_ask::IsInitialized() const {

  return true;
}

void use_interval_analyze_ask::Swap(use_interval_analyze_ask* other) {
  if (other != this) {
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_interval_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_interval_analyze_ask_descriptor_;
  metadata.reflection = use_interval_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int use_interval_analyze_ans::kInfoFieldNumber;
const int use_interval_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

use_interval_analyze_ans::use_interval_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.use_interval_analyze_ans)
}

void use_interval_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

use_interval_analyze_ans::use_interval_analyze_ans(const use_interval_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.use_interval_analyze_ans)
}

void use_interval_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

use_interval_analyze_ans::~use_interval_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.use_interval_analyze_ans)
  SharedDtor();
}

void use_interval_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void use_interval_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* use_interval_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return use_interval_analyze_ans_descriptor_;
}

const use_interval_analyze_ans& use_interval_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

use_interval_analyze_ans* use_interval_analyze_ans::default_instance_ = NULL;

use_interval_analyze_ans* use_interval_analyze_ans::New() const {
  return new use_interval_analyze_ans;
}

void use_interval_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool use_interval_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.use_interval_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.use_interval_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.use_interval_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.use_interval_analyze_ans)
  return false;
#undef DO_
}

void use_interval_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.use_interval_analyze_ans)
  // repeated .ODP_main_frame.use_interval_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.use_interval_analyze_ans)
}

::google::protobuf::uint8* use_interval_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.use_interval_analyze_ans)
  // repeated .ODP_main_frame.use_interval_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.use_interval_analyze_ans)
  return target;
}

int use_interval_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.use_interval_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void use_interval_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const use_interval_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const use_interval_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void use_interval_analyze_ans::MergeFrom(const use_interval_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void use_interval_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void use_interval_analyze_ans::CopyFrom(const use_interval_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool use_interval_analyze_ans::IsInitialized() const {

  return true;
}

void use_interval_analyze_ans::Swap(use_interval_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata use_interval_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = use_interval_analyze_ans_descriptor_;
  metadata.reflection = use_interval_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int download_src_analyze_ask::kStartDateFieldNumber;
const int download_src_analyze_ask::kEndDateFieldNumber;
const int download_src_analyze_ask::kOsVersionFieldNumber;
const int download_src_analyze_ask::kRequestTypeFieldNumber;
const int download_src_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

download_src_analyze_ask::download_src_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.download_src_analyze_ask)
}

void download_src_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

download_src_analyze_ask::download_src_analyze_ask(const download_src_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.download_src_analyze_ask)
}

void download_src_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

download_src_analyze_ask::~download_src_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.download_src_analyze_ask)
  SharedDtor();
}

void download_src_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void download_src_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* download_src_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return download_src_analyze_ask_descriptor_;
}

const download_src_analyze_ask& download_src_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

download_src_analyze_ask* download_src_analyze_ask::default_instance_ = NULL;

download_src_analyze_ask* download_src_analyze_ask::New() const {
  return new download_src_analyze_ask;
}

void download_src_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    request_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool download_src_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.download_src_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_type;
        break;
      }

      // optional int32 request_type = 4;
      case 4: {
        if (tag == 32) {
         parse_request_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_type_)));
          set_has_request_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.download_src_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.download_src_analyze_ask)
  return false;
#undef DO_
}

void download_src_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.download_src_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_type(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.download_src_analyze_ask)
}

::google::protobuf::uint8* download_src_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.download_src_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 request_type = 4;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_type(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.download_src_analyze_ask)
  return target;
}

int download_src_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 request_type = 4;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_type());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void download_src_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const download_src_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const download_src_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void download_src_analyze_ask::MergeFrom(const download_src_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void download_src_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void download_src_analyze_ask::CopyFrom(const download_src_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool download_src_analyze_ask::IsInitialized() const {

  return true;
}

void download_src_analyze_ask::Swap(download_src_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(request_type_, other->request_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata download_src_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = download_src_analyze_ask_descriptor_;
  metadata.reflection = download_src_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int download_src_analyze_ans::kInfoFieldNumber;
const int download_src_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

download_src_analyze_ans::download_src_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.download_src_analyze_ans)
}

void download_src_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

download_src_analyze_ans::download_src_analyze_ans(const download_src_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.download_src_analyze_ans)
}

void download_src_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

download_src_analyze_ans::~download_src_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.download_src_analyze_ans)
  SharedDtor();
}

void download_src_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void download_src_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* download_src_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return download_src_analyze_ans_descriptor_;
}

const download_src_analyze_ans& download_src_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

download_src_analyze_ans* download_src_analyze_ans::default_instance_ = NULL;

download_src_analyze_ans* download_src_analyze_ans::New() const {
  return new download_src_analyze_ans;
}

void download_src_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool download_src_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.download_src_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.download_src_user_acount_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.download_src_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.download_src_analyze_ans)
  return false;
#undef DO_
}

void download_src_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.download_src_analyze_ans)
  // repeated .ODP_main_frame.download_src_user_acount_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.download_src_analyze_ans)
}

::google::protobuf::uint8* download_src_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.download_src_analyze_ans)
  // repeated .ODP_main_frame.download_src_user_acount_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.download_src_analyze_ans)
  return target;
}

int download_src_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.download_src_user_acount_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void download_src_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const download_src_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const download_src_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void download_src_analyze_ans::MergeFrom(const download_src_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void download_src_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void download_src_analyze_ans::CopyFrom(const download_src_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool download_src_analyze_ans::IsInitialized() const {

  return true;
}

void download_src_analyze_ans::Swap(download_src_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata download_src_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = download_src_analyze_ans_descriptor_;
  metadata.reflection = download_src_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int download_src_analyze_detail_ask::kStartDateFieldNumber;
const int download_src_analyze_detail_ask::kEndDateFieldNumber;
const int download_src_analyze_detail_ask::kOsVersionFieldNumber;
const int download_src_analyze_detail_ask::kPageNumFieldNumber;
const int download_src_analyze_detail_ask::kCurPageFieldNumber;
const int download_src_analyze_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

download_src_analyze_detail_ask::download_src_analyze_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.download_src_analyze_detail_ask)
}

void download_src_analyze_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

download_src_analyze_detail_ask::download_src_analyze_detail_ask(const download_src_analyze_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.download_src_analyze_detail_ask)
}

void download_src_analyze_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

download_src_analyze_detail_ask::~download_src_analyze_detail_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.download_src_analyze_detail_ask)
  SharedDtor();
}

void download_src_analyze_detail_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void download_src_analyze_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* download_src_analyze_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return download_src_analyze_detail_ask_descriptor_;
}

const download_src_analyze_detail_ask& download_src_analyze_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

download_src_analyze_detail_ask* download_src_analyze_detail_ask::default_instance_ = NULL;

download_src_analyze_detail_ask* download_src_analyze_detail_ask::New() const {
  return new download_src_analyze_detail_ask;
}

void download_src_analyze_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<download_src_analyze_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool download_src_analyze_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.download_src_analyze_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.download_src_analyze_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.download_src_analyze_detail_ask)
  return false;
#undef DO_
}

void download_src_analyze_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.download_src_analyze_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.download_src_analyze_detail_ask)
}

::google::protobuf::uint8* download_src_analyze_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.download_src_analyze_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.download_src_analyze_detail_ask)
  return target;
}

int download_src_analyze_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void download_src_analyze_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const download_src_analyze_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const download_src_analyze_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void download_src_analyze_detail_ask::MergeFrom(const download_src_analyze_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void download_src_analyze_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void download_src_analyze_detail_ask::CopyFrom(const download_src_analyze_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool download_src_analyze_detail_ask::IsInitialized() const {

  return true;
}

void download_src_analyze_detail_ask::Swap(download_src_analyze_detail_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata download_src_analyze_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = download_src_analyze_detail_ask_descriptor_;
  metadata.reflection = download_src_analyze_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int download_src_analyze_detail_ans::kTotalNumberFieldNumber;
const int download_src_analyze_detail_ans::kInfoFieldNumber;
const int download_src_analyze_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

download_src_analyze_detail_ans::download_src_analyze_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.download_src_analyze_detail_ans)
}

void download_src_analyze_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

download_src_analyze_detail_ans::download_src_analyze_detail_ans(const download_src_analyze_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.download_src_analyze_detail_ans)
}

void download_src_analyze_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

download_src_analyze_detail_ans::~download_src_analyze_detail_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.download_src_analyze_detail_ans)
  SharedDtor();
}

void download_src_analyze_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void download_src_analyze_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* download_src_analyze_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return download_src_analyze_detail_ans_descriptor_;
}

const download_src_analyze_detail_ans& download_src_analyze_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

download_src_analyze_detail_ans* download_src_analyze_detail_ans::default_instance_ = NULL;

download_src_analyze_detail_ans* download_src_analyze_detail_ans::New() const {
  return new download_src_analyze_detail_ans;
}

void download_src_analyze_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool download_src_analyze_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.download_src_analyze_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.download_src_detail info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.download_src_analyze_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.download_src_analyze_detail_ans)
  return false;
#undef DO_
}

void download_src_analyze_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.download_src_analyze_detail_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.download_src_detail info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.download_src_analyze_detail_ans)
}

::google::protobuf::uint8* download_src_analyze_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.download_src_analyze_detail_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.download_src_detail info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.download_src_analyze_detail_ans)
  return target;
}

int download_src_analyze_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.download_src_detail info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void download_src_analyze_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const download_src_analyze_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const download_src_analyze_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void download_src_analyze_detail_ans::MergeFrom(const download_src_analyze_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void download_src_analyze_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void download_src_analyze_detail_ans::CopyFrom(const download_src_analyze_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool download_src_analyze_detail_ans::IsInitialized() const {

  return true;
}

void download_src_analyze_detail_ans::Swap(download_src_analyze_detail_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata download_src_analyze_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = download_src_analyze_detail_ans_descriptor_;
  metadata.reflection = download_src_analyze_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int third_party_login_analyze_ask::kStartDateFieldNumber;
const int third_party_login_analyze_ask::kEndDateFieldNumber;
const int third_party_login_analyze_ask::kOsVersionFieldNumber;
const int third_party_login_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

third_party_login_analyze_ask::third_party_login_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.third_party_login_analyze_ask)
}

void third_party_login_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

third_party_login_analyze_ask::third_party_login_analyze_ask(const third_party_login_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.third_party_login_analyze_ask)
}

void third_party_login_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

third_party_login_analyze_ask::~third_party_login_analyze_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.third_party_login_analyze_ask)
  SharedDtor();
}

void third_party_login_analyze_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void third_party_login_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* third_party_login_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return third_party_login_analyze_ask_descriptor_;
}

const third_party_login_analyze_ask& third_party_login_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

third_party_login_analyze_ask* third_party_login_analyze_ask::default_instance_ = NULL;

third_party_login_analyze_ask* third_party_login_analyze_ask::New() const {
  return new third_party_login_analyze_ask;
}

void third_party_login_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool third_party_login_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.third_party_login_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.third_party_login_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.third_party_login_analyze_ask)
  return false;
#undef DO_
}

void third_party_login_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.third_party_login_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.third_party_login_analyze_ask)
}

::google::protobuf::uint8* third_party_login_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.third_party_login_analyze_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.third_party_login_analyze_ask)
  return target;
}

int third_party_login_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void third_party_login_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const third_party_login_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const third_party_login_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void third_party_login_analyze_ask::MergeFrom(const third_party_login_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void third_party_login_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void third_party_login_analyze_ask::CopyFrom(const third_party_login_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool third_party_login_analyze_ask::IsInitialized() const {

  return true;
}

void third_party_login_analyze_ask::Swap(third_party_login_analyze_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata third_party_login_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = third_party_login_analyze_ask_descriptor_;
  metadata.reflection = third_party_login_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int third_party_login_analyze_ans::kInfoFieldNumber;
const int third_party_login_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

third_party_login_analyze_ans::third_party_login_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.third_party_login_analyze_ans)
}

void third_party_login_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

third_party_login_analyze_ans::third_party_login_analyze_ans(const third_party_login_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.third_party_login_analyze_ans)
}

void third_party_login_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

third_party_login_analyze_ans::~third_party_login_analyze_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.third_party_login_analyze_ans)
  SharedDtor();
}

void third_party_login_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void third_party_login_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* third_party_login_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return third_party_login_analyze_ans_descriptor_;
}

const third_party_login_analyze_ans& third_party_login_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

third_party_login_analyze_ans* third_party_login_analyze_ans::default_instance_ = NULL;

third_party_login_analyze_ans* third_party_login_analyze_ans::New() const {
  return new third_party_login_analyze_ans;
}

void third_party_login_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool third_party_login_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.third_party_login_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.third_party_login_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.third_party_login_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.third_party_login_analyze_ans)
  return false;
#undef DO_
}

void third_party_login_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.third_party_login_analyze_ans)
  // repeated .ODP_main_frame.third_party_login_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.third_party_login_analyze_ans)
}

::google::protobuf::uint8* third_party_login_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.third_party_login_analyze_ans)
  // repeated .ODP_main_frame.third_party_login_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.third_party_login_analyze_ans)
  return target;
}

int third_party_login_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.third_party_login_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void third_party_login_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const third_party_login_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const third_party_login_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void third_party_login_analyze_ans::MergeFrom(const third_party_login_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void third_party_login_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void third_party_login_analyze_ans::CopyFrom(const third_party_login_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool third_party_login_analyze_ans::IsInitialized() const {

  return true;
}

void third_party_login_analyze_ans::Swap(third_party_login_analyze_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata third_party_login_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = third_party_login_analyze_ans_descriptor_;
  metadata.reflection = third_party_login_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int third_party_login_analyze_list_ask::kStartDateFieldNumber;
const int third_party_login_analyze_list_ask::kEndDateFieldNumber;
const int third_party_login_analyze_list_ask::kOsVersionFieldNumber;
const int third_party_login_analyze_list_ask::kPageNumFieldNumber;
const int third_party_login_analyze_list_ask::kCurPageFieldNumber;
const int third_party_login_analyze_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

third_party_login_analyze_list_ask::third_party_login_analyze_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.third_party_login_analyze_list_ask)
}

void third_party_login_analyze_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

third_party_login_analyze_list_ask::third_party_login_analyze_list_ask(const third_party_login_analyze_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.third_party_login_analyze_list_ask)
}

void third_party_login_analyze_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

third_party_login_analyze_list_ask::~third_party_login_analyze_list_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.third_party_login_analyze_list_ask)
  SharedDtor();
}

void third_party_login_analyze_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void third_party_login_analyze_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* third_party_login_analyze_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return third_party_login_analyze_list_ask_descriptor_;
}

const third_party_login_analyze_list_ask& third_party_login_analyze_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

third_party_login_analyze_list_ask* third_party_login_analyze_list_ask::default_instance_ = NULL;

third_party_login_analyze_list_ask* third_party_login_analyze_list_ask::New() const {
  return new third_party_login_analyze_list_ask;
}

void third_party_login_analyze_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<third_party_login_analyze_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool third_party_login_analyze_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.third_party_login_analyze_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 3;
      case 3: {
        if (tag == 26) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.third_party_login_analyze_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.third_party_login_analyze_list_ask)
  return false;
#undef DO_
}

void third_party_login_analyze_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.third_party_login_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->os_version(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.third_party_login_analyze_list_ask)
}

::google::protobuf::uint8* third_party_login_analyze_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.third_party_login_analyze_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes os_version = 3;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->os_version(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.third_party_login_analyze_list_ask)
  return target;
}

int third_party_login_analyze_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void third_party_login_analyze_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const third_party_login_analyze_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const third_party_login_analyze_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void third_party_login_analyze_list_ask::MergeFrom(const third_party_login_analyze_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void third_party_login_analyze_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void third_party_login_analyze_list_ask::CopyFrom(const third_party_login_analyze_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool third_party_login_analyze_list_ask::IsInitialized() const {

  return true;
}

void third_party_login_analyze_list_ask::Swap(third_party_login_analyze_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(os_version_, other->os_version_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata third_party_login_analyze_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = third_party_login_analyze_list_ask_descriptor_;
  metadata.reflection = third_party_login_analyze_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int third_party_login_analyze_list_ans::kTotalNumberFieldNumber;
const int third_party_login_analyze_list_ans::kInfoFieldNumber;
const int third_party_login_analyze_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

third_party_login_analyze_list_ans::third_party_login_analyze_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.third_party_login_analyze_list_ans)
}

void third_party_login_analyze_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

third_party_login_analyze_list_ans::third_party_login_analyze_list_ans(const third_party_login_analyze_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.third_party_login_analyze_list_ans)
}

void third_party_login_analyze_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

third_party_login_analyze_list_ans::~third_party_login_analyze_list_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.third_party_login_analyze_list_ans)
  SharedDtor();
}

void third_party_login_analyze_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void third_party_login_analyze_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* third_party_login_analyze_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return third_party_login_analyze_list_ans_descriptor_;
}

const third_party_login_analyze_list_ans& third_party_login_analyze_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

third_party_login_analyze_list_ans* third_party_login_analyze_list_ans::default_instance_ = NULL;

third_party_login_analyze_list_ans* third_party_login_analyze_list_ans::New() const {
  return new third_party_login_analyze_list_ans;
}

void third_party_login_analyze_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool third_party_login_analyze_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.third_party_login_analyze_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_main_frame.third_party_login_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.third_party_login_analyze_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.third_party_login_analyze_list_ans)
  return false;
#undef DO_
}

void third_party_login_analyze_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.third_party_login_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_main_frame.third_party_login_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.third_party_login_analyze_list_ans)
}

::google::protobuf::uint8* third_party_login_analyze_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.third_party_login_analyze_list_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_main_frame.third_party_login_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.third_party_login_analyze_list_ans)
  return target;
}

int third_party_login_analyze_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.third_party_login_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void third_party_login_analyze_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const third_party_login_analyze_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const third_party_login_analyze_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void third_party_login_analyze_list_ans::MergeFrom(const third_party_login_analyze_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void third_party_login_analyze_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void third_party_login_analyze_list_ans::CopyFrom(const third_party_login_analyze_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool third_party_login_analyze_list_ans::IsInitialized() const {

  return true;
}

void third_party_login_analyze_list_ans::Swap(third_party_login_analyze_list_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata third_party_login_analyze_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = third_party_login_analyze_list_ans_descriptor_;
  metadata.reflection = third_party_login_analyze_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operation_report_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

operation_report_ask::operation_report_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.operation_report_ask)
}

void operation_report_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

operation_report_ask::operation_report_ask(const operation_report_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.operation_report_ask)
}

void operation_report_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operation_report_ask::~operation_report_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.operation_report_ask)
  SharedDtor();
}

void operation_report_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void operation_report_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operation_report_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operation_report_ask_descriptor_;
}

const operation_report_ask& operation_report_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

operation_report_ask* operation_report_ask::default_instance_ = NULL;

operation_report_ask* operation_report_ask::New() const {
  return new operation_report_ask;
}

void operation_report_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operation_report_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.operation_report_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.operation_report_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.operation_report_ask)
  return false;
#undef DO_
}

void operation_report_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.operation_report_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.operation_report_ask)
}

::google::protobuf::uint8* operation_report_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.operation_report_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.operation_report_ask)
  return target;
}

int operation_report_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operation_report_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operation_report_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operation_report_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operation_report_ask::MergeFrom(const operation_report_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operation_report_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operation_report_ask::CopyFrom(const operation_report_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operation_report_ask::IsInitialized() const {

  return true;
}

void operation_report_ask::Swap(operation_report_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operation_report_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operation_report_ask_descriptor_;
  metadata.reflection = operation_report_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operation_report_info::kReportItemFieldNumber;
const int operation_report_info::kTotalNumFieldNumber;
#endif  // !_MSC_VER

operation_report_info::operation_report_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.operation_report_info)
}

void operation_report_info::InitAsDefaultInstance() {
}

operation_report_info::operation_report_info(const operation_report_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.operation_report_info)
}

void operation_report_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  report_item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operation_report_info::~operation_report_info() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.operation_report_info)
  SharedDtor();
}

void operation_report_info::SharedDtor() {
  if (report_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete report_item_;
  }
  if (this != default_instance_) {
  }
}

void operation_report_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operation_report_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operation_report_info_descriptor_;
}

const operation_report_info& operation_report_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

operation_report_info* operation_report_info::default_instance_ = NULL;

operation_report_info* operation_report_info::New() const {
  return new operation_report_info;
}

void operation_report_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_report_item()) {
      if (report_item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        report_item_->clear();
      }
    }
    total_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operation_report_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.operation_report_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes report_item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 2;
      case 2: {
        if (tag == 16) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.operation_report_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.operation_report_info)
  return false;
#undef DO_
}

void operation_report_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.operation_report_info)
  // optional bytes report_item = 1;
  if (has_report_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->report_item(), output);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.operation_report_info)
}

::google::protobuf::uint8* operation_report_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.operation_report_info)
  // optional bytes report_item = 1;
  if (has_report_item()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->report_item(), target);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.operation_report_info)
  return target;
}

int operation_report_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes report_item = 1;
    if (has_report_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->report_item());
    }

    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operation_report_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operation_report_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operation_report_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operation_report_info::MergeFrom(const operation_report_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_report_item()) {
      set_report_item(from.report_item());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operation_report_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operation_report_info::CopyFrom(const operation_report_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operation_report_info::IsInitialized() const {

  return true;
}

void operation_report_info::Swap(operation_report_info* other) {
  if (other != this) {
    std::swap(report_item_, other->report_item_);
    std::swap(total_num_, other->total_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operation_report_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operation_report_info_descriptor_;
  metadata.reflection = operation_report_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operation_report_ans::kListFieldNumber;
const int operation_report_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

operation_report_ans::operation_report_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.operation_report_ans)
}

void operation_report_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

operation_report_ans::operation_report_ans(const operation_report_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.operation_report_ans)
}

void operation_report_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operation_report_ans::~operation_report_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.operation_report_ans)
  SharedDtor();
}

void operation_report_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void operation_report_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operation_report_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operation_report_ans_descriptor_;
}

const operation_report_ans& operation_report_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

operation_report_ans* operation_report_ans::default_instance_ = NULL;

operation_report_ans* operation_report_ans::New() const {
  return new operation_report_ans;
}

void operation_report_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operation_report_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.operation_report_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.operation_report_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.operation_report_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.operation_report_ans)
  return false;
#undef DO_
}

void operation_report_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.operation_report_ans)
  // repeated .ODP_main_frame.operation_report_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.operation_report_ans)
}

::google::protobuf::uint8* operation_report_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.operation_report_ans)
  // repeated .ODP_main_frame.operation_report_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.operation_report_ans)
  return target;
}

int operation_report_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .ODP_main_frame.operation_report_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operation_report_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operation_report_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operation_report_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operation_report_ans::MergeFrom(const operation_report_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operation_report_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operation_report_ans::CopyFrom(const operation_report_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operation_report_ans::IsInitialized() const {

  return true;
}

void operation_report_ans::Swap(operation_report_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operation_report_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operation_report_ans_descriptor_;
  metadata.reflection = operation_report_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int doc_row::kValueFieldNumber;
#endif  // !_MSC_VER

doc_row::doc_row()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.doc_row)
}

void doc_row::InitAsDefaultInstance() {
}

doc_row::doc_row(const doc_row& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.doc_row)
}

void doc_row::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

doc_row::~doc_row() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.doc_row)
  SharedDtor();
}

void doc_row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void doc_row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doc_row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return doc_row_descriptor_;
}

const doc_row& doc_row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

doc_row* doc_row::default_instance_ = NULL;

doc_row* doc_row::New() const {
  return new doc_row;
}

void doc_row::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool doc_row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.doc_row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.doc_row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.doc_row)
  return false;
#undef DO_
}

void doc_row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.doc_row)
  // repeated bytes value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.doc_row)
}

::google::protobuf::uint8* doc_row::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.doc_row)
  // repeated bytes value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.doc_row)
  return target;
}

int doc_row::ByteSize() const {
  int total_size = 0;

  // repeated bytes value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doc_row::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const doc_row* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const doc_row*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void doc_row::MergeFrom(const doc_row& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void doc_row::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doc_row::CopyFrom(const doc_row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doc_row::IsInitialized() const {

  return true;
}

void doc_row::Swap(doc_row* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata doc_row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = doc_row_descriptor_;
  metadata.reflection = doc_row_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_certification_list_row::kNameFieldNumber;
const int user_certification_list_row::kPage2FieldNumber;
const int user_certification_list_row::kPage3FieldNumber;
const int user_certification_list_row::kAccessCountFieldNumber;
const int user_certification_list_row::kSubmitCountFieldNumber;
const int user_certification_list_row::kPercent1FieldNumber;
const int user_certification_list_row::kPercent2FieldNumber;
const int user_certification_list_row::kPercent3FieldNumber;
const int user_certification_list_row::kPercent4FieldNumber;
#endif  // !_MSC_VER

user_certification_list_row::user_certification_list_row()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_certification_list_row)
}

void user_certification_list_row::InitAsDefaultInstance() {
}

user_certification_list_row::user_certification_list_row(const user_certification_list_row& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_certification_list_row)
}

void user_certification_list_row::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_count_ = 0;
  submit_count_ = 0;
  percent1_ = 0;
  percent2_ = 0;
  percent3_ = 0;
  percent4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_certification_list_row::~user_certification_list_row() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_certification_list_row)
  SharedDtor();
}

void user_certification_list_row::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (page2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page2_;
  }
  if (page3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page3_;
  }
  if (this != default_instance_) {
  }
}

void user_certification_list_row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_certification_list_row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_certification_list_row_descriptor_;
}

const user_certification_list_row& user_certification_list_row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_certification_list_row* user_certification_list_row::default_instance_ = NULL;

user_certification_list_row* user_certification_list_row::New() const {
  return new user_certification_list_row;
}

void user_certification_list_row::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_certification_list_row*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(access_count_, percent3_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_page2()) {
      if (page2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page2_->clear();
      }
    }
    if (has_page3()) {
      if (page3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page3_->clear();
      }
    }
  }
  percent4_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_certification_list_row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_certification_list_row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page2;
        break;
      }

      // optional bytes page2 = 2;
      case 2: {
        if (tag == 18) {
         parse_page2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page3;
        break;
      }

      // optional bytes page3 = 3;
      case 3: {
        if (tag == 26) {
         parse_page3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_access_count;
        break;
      }

      // optional int32 access_count = 4;
      case 4: {
        if (tag == 32) {
         parse_access_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_count_)));
          set_has_access_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_submit_count;
        break;
      }

      // optional int32 submit_count = 5;
      case 5: {
        if (tag == 40) {
         parse_submit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submit_count_)));
          set_has_submit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_percent1;
        break;
      }

      // optional float percent1 = 6;
      case 6: {
        if (tag == 53) {
         parse_percent1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent1_)));
          set_has_percent1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_percent2;
        break;
      }

      // optional float percent2 = 7;
      case 7: {
        if (tag == 61) {
         parse_percent2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent2_)));
          set_has_percent2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_percent3;
        break;
      }

      // optional float percent3 = 8;
      case 8: {
        if (tag == 69) {
         parse_percent3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent3_)));
          set_has_percent3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_percent4;
        break;
      }

      // optional float percent4 = 9;
      case 9: {
        if (tag == 77) {
         parse_percent4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent4_)));
          set_has_percent4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_certification_list_row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_certification_list_row)
  return false;
#undef DO_
}

void user_certification_list_row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_certification_list_row)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes page2 = 2;
  if (has_page2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->page2(), output);
  }

  // optional bytes page3 = 3;
  if (has_page3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->page3(), output);
  }

  // optional int32 access_count = 4;
  if (has_access_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->access_count(), output);
  }

  // optional int32 submit_count = 5;
  if (has_submit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->submit_count(), output);
  }

  // optional float percent1 = 6;
  if (has_percent1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->percent1(), output);
  }

  // optional float percent2 = 7;
  if (has_percent2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->percent2(), output);
  }

  // optional float percent3 = 8;
  if (has_percent3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->percent3(), output);
  }

  // optional float percent4 = 9;
  if (has_percent4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->percent4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_certification_list_row)
}

::google::protobuf::uint8* user_certification_list_row::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_certification_list_row)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes page2 = 2;
  if (has_page2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->page2(), target);
  }

  // optional bytes page3 = 3;
  if (has_page3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->page3(), target);
  }

  // optional int32 access_count = 4;
  if (has_access_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->access_count(), target);
  }

  // optional int32 submit_count = 5;
  if (has_submit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->submit_count(), target);
  }

  // optional float percent1 = 6;
  if (has_percent1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->percent1(), target);
  }

  // optional float percent2 = 7;
  if (has_percent2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->percent2(), target);
  }

  // optional float percent3 = 8;
  if (has_percent3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->percent3(), target);
  }

  // optional float percent4 = 9;
  if (has_percent4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->percent4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_certification_list_row)
  return target;
}

int user_certification_list_row::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes page2 = 2;
    if (has_page2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page2());
    }

    // optional bytes page3 = 3;
    if (has_page3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page3());
    }

    // optional int32 access_count = 4;
    if (has_access_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_count());
    }

    // optional int32 submit_count = 5;
    if (has_submit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submit_count());
    }

    // optional float percent1 = 6;
    if (has_percent1()) {
      total_size += 1 + 4;
    }

    // optional float percent2 = 7;
    if (has_percent2()) {
      total_size += 1 + 4;
    }

    // optional float percent3 = 8;
    if (has_percent3()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float percent4 = 9;
    if (has_percent4()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_certification_list_row::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_certification_list_row* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_certification_list_row*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_certification_list_row::MergeFrom(const user_certification_list_row& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_page2()) {
      set_page2(from.page2());
    }
    if (from.has_page3()) {
      set_page3(from.page3());
    }
    if (from.has_access_count()) {
      set_access_count(from.access_count());
    }
    if (from.has_submit_count()) {
      set_submit_count(from.submit_count());
    }
    if (from.has_percent1()) {
      set_percent1(from.percent1());
    }
    if (from.has_percent2()) {
      set_percent2(from.percent2());
    }
    if (from.has_percent3()) {
      set_percent3(from.percent3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_percent4()) {
      set_percent4(from.percent4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_certification_list_row::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_certification_list_row::CopyFrom(const user_certification_list_row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_certification_list_row::IsInitialized() const {

  return true;
}

void user_certification_list_row::Swap(user_certification_list_row* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(page2_, other->page2_);
    std::swap(page3_, other->page3_);
    std::swap(access_count_, other->access_count_);
    std::swap(submit_count_, other->submit_count_);
    std::swap(percent1_, other->percent1_);
    std::swap(percent2_, other->percent2_);
    std::swap(percent3_, other->percent3_);
    std::swap(percent4_, other->percent4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_certification_list_row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_certification_list_row_descriptor_;
  metadata.reflection = user_certification_list_row_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_certification_ask::kAskHeaderFieldNumber;
const int user_certification_ask::kCertificationTypeFieldNumber;
const int user_certification_ask::kBeginTimeFieldNumber;
const int user_certification_ask::kEndTimeFieldNumber;
#endif  // !_MSC_VER

user_certification_ask::user_certification_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_certification_ask)
}

void user_certification_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_certification_ask::user_certification_ask(const user_certification_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_certification_ask)
}

void user_certification_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  certification_type_ = 0;
  begin_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_certification_ask::~user_certification_ask() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_certification_ask)
  SharedDtor();
}

void user_certification_ask::SharedDtor() {
  if (begin_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begin_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_certification_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_certification_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_certification_ask_descriptor_;
}

const user_certification_ask& user_certification_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_certification_ask* user_certification_ask::default_instance_ = NULL;

user_certification_ask* user_certification_ask::New() const {
  return new user_certification_ask;
}

void user_certification_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    certification_type_ = 0;
    if (has_begin_time()) {
      if (begin_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        begin_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_certification_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_certification_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_certification_type;
        break;
      }

      // optional int32 certification_type = 2;
      case 2: {
        if (tag == 16) {
         parse_certification_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &certification_type_)));
          set_has_certification_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_begin_time;
        break;
      }

      // optional bytes begin_time = 3;
      case 3: {
        if (tag == 26) {
         parse_begin_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_begin_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 4;
      case 4: {
        if (tag == 34) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_certification_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_certification_ask)
  return false;
#undef DO_
}

void user_certification_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_certification_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 certification_type = 2;
  if (has_certification_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->certification_type(), output);
  }

  // optional bytes begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->begin_time(), output);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_certification_ask)
}

::google::protobuf::uint8* user_certification_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_certification_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 certification_type = 2;
  if (has_certification_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->certification_type(), target);
  }

  // optional bytes begin_time = 3;
  if (has_begin_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->begin_time(), target);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_certification_ask)
  return target;
}

int user_certification_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 certification_type = 2;
    if (has_certification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->certification_type());
    }

    // optional bytes begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->begin_time());
    }

    // optional bytes end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_certification_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_certification_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_certification_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_certification_ask::MergeFrom(const user_certification_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_certification_type()) {
      set_certification_type(from.certification_type());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_certification_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_certification_ask::CopyFrom(const user_certification_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_certification_ask::IsInitialized() const {

  return true;
}

void user_certification_ask::Swap(user_certification_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(certification_type_, other->certification_type_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_certification_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_certification_ask_descriptor_;
  metadata.reflection = user_certification_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_certification_ans::kRowFieldNumber;
const int user_certification_ans::kListFieldNumber;
const int user_certification_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_certification_ans::user_certification_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_main_frame.user_certification_ans)
}

void user_certification_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_certification_ans::user_certification_ans(const user_certification_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_main_frame.user_certification_ans)
}

void user_certification_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_certification_ans::~user_certification_ans() {
  // @@protoc_insertion_point(destructor:ODP_main_frame.user_certification_ans)
  SharedDtor();
}

void user_certification_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void user_certification_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_certification_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_certification_ans_descriptor_;
}

const user_certification_ans& user_certification_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_certification_ans* user_certification_ans::default_instance_ = NULL;

user_certification_ans* user_certification_ans::New() const {
  return new user_certification_ans;
}

void user_certification_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  row_.Clear();
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_certification_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_main_frame.user_certification_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_main_frame.doc_row row = 1;
      case 1: {
        if (tag == 10) {
         parse_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_row;
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .ODP_main_frame.user_certification_list_row list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_main_frame.user_certification_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_main_frame.user_certification_ans)
  return false;
#undef DO_
}

void user_certification_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_main_frame.user_certification_ans)
  // repeated .ODP_main_frame.doc_row row = 1;
  for (int i = 0; i < this->row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->row(i), output);
  }

  // repeated .ODP_main_frame.user_certification_list_row list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_main_frame.user_certification_ans)
}

::google::protobuf::uint8* user_certification_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_main_frame.user_certification_ans)
  // repeated .ODP_main_frame.doc_row row = 1;
  for (int i = 0; i < this->row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->row(i), target);
  }

  // repeated .ODP_main_frame.user_certification_list_row list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_main_frame.user_certification_ans)
  return target;
}

int user_certification_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_main_frame.doc_row row = 1;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }

  // repeated .ODP_main_frame.user_certification_list_row list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_certification_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_certification_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_certification_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_certification_ans::MergeFrom(const user_certification_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_.MergeFrom(from.row_);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_certification_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_certification_ans::CopyFrom(const user_certification_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_certification_ans::IsInitialized() const {

  return true;
}

void user_certification_ans::Swap(user_certification_ans* other) {
  if (other != this) {
    row_.Swap(&other->row_);
    list_.Swap(&other->list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_certification_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_certification_ans_descriptor_;
  metadata.reflection = user_certification_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ODP_main_frame

// @@protoc_insertion_point(global_scope)
