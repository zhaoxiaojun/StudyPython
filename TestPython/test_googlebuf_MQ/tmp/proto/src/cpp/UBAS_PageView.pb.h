// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UBAS_PageView.proto

#ifndef PROTOBUF_UBAS_5fPageView_2eproto__INCLUDED
#define PROTOBUF_UBAS_5fPageView_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace UBAS_PageView {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

class user_statistics_data;
class terminal_model_info_ask;
class terminal_model_info_ans;
class step_business_statistics;
class business_track_statistics_ask;
class business_track_statistics_ans;
class page_visited_statistics;
class page_visited_statistics_ask;
class page_visited_statistics_ans;
class page_keeptime_statistics;
class page_keeptime_statistics_ask;
class page_keeptime_statistics_ans;
class user_business_track_person_info;
class user_business_track_content;
class user_business_track_item;
class user_business_track_query_ask;
class user_business_track_query_ans;
class page_access_statistics;
class page_access_statistics_ask;
class page_access_statistics_ans;
class page_duration_statistics;
class page_duration_statistics_ask;
class page_duration_statistics_ans;
class step_page_statistics;
class page_trace_statistics_ask;
class page_trace_statistics_ans;
class opt_trace_ask;
class opt_trace_ans;
class year;
class month;
class opt_trace;
class opt_trace_commons;
class opt_trace_bid;
class opt_trace_invoke;
class opt_trace_business;
class opt_trace_page;
class opt_trace_fund_running_water;
class opt_trace_material;
class contact_person;
class estate;
class estate_info;
class verify_trace;
class page_access_detail;
class page_access_details_ask;
class page_access_details_ans;

enum terminal_model_ask_type {
  model_distribution = 1,
  resolution_ratio = 2,
  os_distribution = 3,
  network_distribution = 4,
  service_provider = 5,
  valuation_distribution = 6,
  region_area = 7,
  occupation_distribution = 8,
  income_distribution = 9,
  property_distribution = 10,
  debt_distribution = 11
};
bool terminal_model_ask_type_IsValid(int value);
const terminal_model_ask_type terminal_model_ask_type_MIN = model_distribution;
const terminal_model_ask_type terminal_model_ask_type_MAX = debt_distribution;
const int terminal_model_ask_type_ARRAYSIZE = terminal_model_ask_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* terminal_model_ask_type_descriptor();
inline const ::std::string& terminal_model_ask_type_Name(terminal_model_ask_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    terminal_model_ask_type_descriptor(), value);
}
inline bool terminal_model_ask_type_Parse(
    const ::std::string& name, terminal_model_ask_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<terminal_model_ask_type>(
    terminal_model_ask_type_descriptor(), name, value);
}
enum mobile_os_type {
  All = 0,
  Android = 1,
  IOS = 2
};
bool mobile_os_type_IsValid(int value);
const mobile_os_type mobile_os_type_MIN = All;
const mobile_os_type mobile_os_type_MAX = IOS;
const int mobile_os_type_ARRAYSIZE = mobile_os_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* mobile_os_type_descriptor();
inline const ::std::string& mobile_os_type_Name(mobile_os_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    mobile_os_type_descriptor(), value);
}
inline bool mobile_os_type_Parse(
    const ::std::string& name, mobile_os_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<mobile_os_type>(
    mobile_os_type_descriptor(), name, value);
}
// ===================================================================

class user_statistics_data : public ::google::protobuf::Message {
 public:
  user_statistics_data();
  virtual ~user_statistics_data();

  user_statistics_data(const user_statistics_data& from);

  inline user_statistics_data& operator=(const user_statistics_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_statistics_data& default_instance();

  void Swap(user_statistics_data* other);

  // implements Message ----------------------------------------------

  user_statistics_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_statistics_data& from);
  void MergeFrom(const user_statistics_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes statistics_name = 1;
  inline bool has_statistics_name() const;
  inline void clear_statistics_name();
  static const int kStatisticsNameFieldNumber = 1;
  inline const ::std::string& statistics_name() const;
  inline void set_statistics_name(const ::std::string& value);
  inline void set_statistics_name(const char* value);
  inline void set_statistics_name(const void* value, size_t size);
  inline ::std::string* mutable_statistics_name();
  inline ::std::string* release_statistics_name();
  inline void set_allocated_statistics_name(::std::string* statistics_name);

  // optional int64 users_new_increased = 2;
  inline bool has_users_new_increased() const;
  inline void clear_users_new_increased();
  static const int kUsersNewIncreasedFieldNumber = 2;
  inline ::google::protobuf::int64 users_new_increased() const;
  inline void set_users_new_increased(::google::protobuf::int64 value);

  // optional float users_new_increased_rate = 3;
  inline bool has_users_new_increased_rate() const;
  inline void clear_users_new_increased_rate();
  static const int kUsersNewIncreasedRateFieldNumber = 3;
  inline float users_new_increased_rate() const;
  inline void set_users_new_increased_rate(float value);

  // optional int64 users_cumulant = 4;
  inline bool has_users_cumulant() const;
  inline void clear_users_cumulant();
  static const int kUsersCumulantFieldNumber = 4;
  inline ::google::protobuf::int64 users_cumulant() const;
  inline void set_users_cumulant(::google::protobuf::int64 value);

  // optional float users_cumulant_rate = 5;
  inline bool has_users_cumulant_rate() const;
  inline void clear_users_cumulant_rate();
  static const int kUsersCumulantRateFieldNumber = 5;
  inline float users_cumulant_rate() const;
  inline void set_users_cumulant_rate(float value);

  // optional int64 active_users_num = 6;
  inline bool has_active_users_num() const;
  inline void clear_active_users_num();
  static const int kActiveUsersNumFieldNumber = 6;
  inline ::google::protobuf::int64 active_users_num() const;
  inline void set_active_users_num(::google::protobuf::int64 value);

  // optional float active_users_num_rate = 7;
  inline bool has_active_users_num_rate() const;
  inline void clear_active_users_num_rate();
  static const int kActiveUsersNumRateFieldNumber = 7;
  inline float active_users_num_rate() const;
  inline void set_active_users_num_rate(float value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.user_statistics_data)
 private:
  inline void set_has_statistics_name();
  inline void clear_has_statistics_name();
  inline void set_has_users_new_increased();
  inline void clear_has_users_new_increased();
  inline void set_has_users_new_increased_rate();
  inline void clear_has_users_new_increased_rate();
  inline void set_has_users_cumulant();
  inline void clear_has_users_cumulant();
  inline void set_has_users_cumulant_rate();
  inline void clear_has_users_cumulant_rate();
  inline void set_has_active_users_num();
  inline void clear_has_active_users_num();
  inline void set_has_active_users_num_rate();
  inline void clear_has_active_users_num_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* statistics_name_;
  ::google::protobuf::int64 users_new_increased_;
  ::google::protobuf::int64 users_cumulant_;
  float users_new_increased_rate_;
  float users_cumulant_rate_;
  ::google::protobuf::int64 active_users_num_;
  float active_users_num_rate_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static user_statistics_data* default_instance_;
};
// -------------------------------------------------------------------

class terminal_model_info_ask : public ::google::protobuf::Message {
 public:
  terminal_model_info_ask();
  virtual ~terminal_model_info_ask();

  terminal_model_info_ask(const terminal_model_info_ask& from);

  inline terminal_model_info_ask& operator=(const terminal_model_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const terminal_model_info_ask& default_instance();

  void Swap(terminal_model_info_ask* other);

  // implements Message ----------------------------------------------

  terminal_model_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const terminal_model_info_ask& from);
  void MergeFrom(const terminal_model_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UBAS_PageView.terminal_model_ask_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::UBAS_PageView::terminal_model_ask_type type() const;
  inline void set_type(::UBAS_PageView::terminal_model_ask_type value);

  // optional .UBAS_PageView.mobile_os_type os_type = 2;
  inline bool has_os_type() const;
  inline void clear_os_type();
  static const int kOsTypeFieldNumber = 2;
  inline ::UBAS_PageView::mobile_os_type os_type() const;
  inline void set_os_type(::UBAS_PageView::mobile_os_type value);

  // optional bytes start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional int32 page_num = 5;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 5;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 6;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 6;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 7;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 7;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 total_flag = 8;
  inline bool has_total_flag() const;
  inline void clear_total_flag();
  static const int kTotalFlagFieldNumber = 8;
  inline ::google::protobuf::int32 total_flag() const;
  inline void set_total_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.terminal_model_info_ask)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_os_type();
  inline void clear_has_os_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_total_flag();
  inline void clear_has_total_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int os_type_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 total_flag_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static terminal_model_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class terminal_model_info_ans : public ::google::protobuf::Message {
 public:
  terminal_model_info_ans();
  virtual ~terminal_model_info_ans();

  terminal_model_info_ans(const terminal_model_info_ans& from);

  inline terminal_model_info_ans& operator=(const terminal_model_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const terminal_model_info_ans& default_instance();

  void Swap(terminal_model_info_ans* other);

  // implements Message ----------------------------------------------

  terminal_model_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const terminal_model_info_ans& from);
  void MergeFrom(const terminal_model_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // repeated .UBAS_PageView.user_statistics_data statistics_data = 3;
  inline int statistics_data_size() const;
  inline void clear_statistics_data();
  static const int kStatisticsDataFieldNumber = 3;
  inline const ::UBAS_PageView::user_statistics_data& statistics_data(int index) const;
  inline ::UBAS_PageView::user_statistics_data* mutable_statistics_data(int index);
  inline ::UBAS_PageView::user_statistics_data* add_statistics_data();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_statistics_data >&
      statistics_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_statistics_data >*
      mutable_statistics_data();

  // @@protoc_insertion_point(class_scope:UBAS_PageView.terminal_model_info_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_statistics_data > statistics_data_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static terminal_model_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class step_business_statistics : public ::google::protobuf::Message {
 public:
  step_business_statistics();
  virtual ~step_business_statistics();

  step_business_statistics(const step_business_statistics& from);

  inline step_business_statistics& operator=(const step_business_statistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const step_business_statistics& default_instance();

  void Swap(step_business_statistics* other);

  // implements Message ----------------------------------------------

  step_business_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const step_business_statistics& from);
  void MergeFrom(const step_business_statistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 step_number = 1;
  inline bool has_step_number() const;
  inline void clear_step_number();
  static const int kStepNumberFieldNumber = 1;
  inline ::google::protobuf::int32 step_number() const;
  inline void set_step_number(::google::protobuf::int32 value);

  // optional int32 user_count = 2;
  inline bool has_user_count() const;
  inline void clear_user_count();
  static const int kUserCountFieldNumber = 2;
  inline ::google::protobuf::int32 user_count() const;
  inline void set_user_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.step_business_statistics)
 private:
  inline void set_has_step_number();
  inline void clear_has_step_number();
  inline void set_has_user_count();
  inline void clear_has_user_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 step_number_;
  ::google::protobuf::int32 user_count_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static step_business_statistics* default_instance_;
};
// -------------------------------------------------------------------

class business_track_statistics_ask : public ::google::protobuf::Message {
 public:
  business_track_statistics_ask();
  virtual ~business_track_statistics_ask();

  business_track_statistics_ask(const business_track_statistics_ask& from);

  inline business_track_statistics_ask& operator=(const business_track_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const business_track_statistics_ask& default_instance();

  void Swap(business_track_statistics_ask* other);

  // implements Message ----------------------------------------------

  business_track_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const business_track_statistics_ask& from);
  void MergeFrom(const business_track_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 ask_type = 2;
  inline bool has_ask_type() const;
  inline void clear_ask_type();
  static const int kAskTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ask_type() const;
  inline void set_ask_type(::google::protobuf::int32 value);

  // optional bytes start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.business_track_statistics_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_ask_type();
  inline void clear_has_ask_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::google::protobuf::int32 ask_type_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static business_track_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class business_track_statistics_ans : public ::google::protobuf::Message {
 public:
  business_track_statistics_ans();
  virtual ~business_track_statistics_ans();

  business_track_statistics_ans(const business_track_statistics_ans& from);

  inline business_track_statistics_ans& operator=(const business_track_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const business_track_statistics_ans& default_instance();

  void Swap(business_track_statistics_ans* other);

  // implements Message ----------------------------------------------

  business_track_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const business_track_statistics_ans& from);
  void MergeFrom(const business_track_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_PageView.step_business_statistics info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UBAS_PageView::step_business_statistics& info(int index) const;
  inline ::UBAS_PageView::step_business_statistics* mutable_info(int index);
  inline ::UBAS_PageView::step_business_statistics* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_business_statistics >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_business_statistics >*
      mutable_info();

  // optional bytes json_data = 2;
  inline bool has_json_data() const;
  inline void clear_json_data();
  static const int kJsonDataFieldNumber = 2;
  inline const ::std::string& json_data() const;
  inline void set_json_data(const ::std::string& value);
  inline void set_json_data(const char* value);
  inline void set_json_data(const void* value, size_t size);
  inline ::std::string* mutable_json_data();
  inline ::std::string* release_json_data();
  inline void set_allocated_json_data(::std::string* json_data);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.business_track_statistics_ans)
 private:
  inline void set_has_json_data();
  inline void clear_has_json_data();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_business_statistics > info_;
  ::std::string* json_data_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static business_track_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class page_visited_statistics : public ::google::protobuf::Message {
 public:
  page_visited_statistics();
  virtual ~page_visited_statistics();

  page_visited_statistics(const page_visited_statistics& from);

  inline page_visited_statistics& operator=(const page_visited_statistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_visited_statistics& default_instance();

  void Swap(page_visited_statistics* other);

  // implements Message ----------------------------------------------

  page_visited_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_visited_statistics& from);
  void MergeFrom(const page_visited_statistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes page_name = 1;
  inline bool has_page_name() const;
  inline void clear_page_name();
  static const int kPageNameFieldNumber = 1;
  inline const ::std::string& page_name() const;
  inline void set_page_name(const ::std::string& value);
  inline void set_page_name(const char* value);
  inline void set_page_name(const void* value, size_t size);
  inline ::std::string* mutable_page_name();
  inline ::std::string* release_page_name();
  inline void set_allocated_page_name(::std::string* page_name);

  // optional int32 visited_count = 2;
  inline bool has_visited_count() const;
  inline void clear_visited_count();
  static const int kVisitedCountFieldNumber = 2;
  inline ::google::protobuf::int32 visited_count() const;
  inline void set_visited_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_visited_statistics)
 private:
  inline void set_has_page_name();
  inline void clear_has_page_name();
  inline void set_has_visited_count();
  inline void clear_has_visited_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* page_name_;
  ::google::protobuf::int32 visited_count_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_visited_statistics* default_instance_;
};
// -------------------------------------------------------------------

class page_visited_statistics_ask : public ::google::protobuf::Message {
 public:
  page_visited_statistics_ask();
  virtual ~page_visited_statistics_ask();

  page_visited_statistics_ask(const page_visited_statistics_ask& from);

  inline page_visited_statistics_ask& operator=(const page_visited_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_visited_statistics_ask& default_instance();

  void Swap(page_visited_statistics_ask* other);

  // implements Message ----------------------------------------------

  page_visited_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_visited_statistics_ask& from);
  void MergeFrom(const page_visited_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_visited_statistics_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_visited_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class page_visited_statistics_ans : public ::google::protobuf::Message {
 public:
  page_visited_statistics_ans();
  virtual ~page_visited_statistics_ans();

  page_visited_statistics_ans(const page_visited_statistics_ans& from);

  inline page_visited_statistics_ans& operator=(const page_visited_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_visited_statistics_ans& default_instance();

  void Swap(page_visited_statistics_ans* other);

  // implements Message ----------------------------------------------

  page_visited_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_visited_statistics_ans& from);
  void MergeFrom(const page_visited_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_PageView.page_visited_statistics list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UBAS_PageView::page_visited_statistics& list(int index) const;
  inline ::UBAS_PageView::page_visited_statistics* mutable_list(int index);
  inline ::UBAS_PageView::page_visited_statistics* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_visited_statistics >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_visited_statistics >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_visited_statistics_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_visited_statistics > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_visited_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class page_keeptime_statistics : public ::google::protobuf::Message {
 public:
  page_keeptime_statistics();
  virtual ~page_keeptime_statistics();

  page_keeptime_statistics(const page_keeptime_statistics& from);

  inline page_keeptime_statistics& operator=(const page_keeptime_statistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_keeptime_statistics& default_instance();

  void Swap(page_keeptime_statistics* other);

  // implements Message ----------------------------------------------

  page_keeptime_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_keeptime_statistics& from);
  void MergeFrom(const page_keeptime_statistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes page_name = 1;
  inline bool has_page_name() const;
  inline void clear_page_name();
  static const int kPageNameFieldNumber = 1;
  inline const ::std::string& page_name() const;
  inline void set_page_name(const ::std::string& value);
  inline void set_page_name(const char* value);
  inline void set_page_name(const void* value, size_t size);
  inline ::std::string* mutable_page_name();
  inline ::std::string* release_page_name();
  inline void set_allocated_page_name(::std::string* page_name);

  // optional int32 keeptime = 2;
  inline bool has_keeptime() const;
  inline void clear_keeptime();
  static const int kKeeptimeFieldNumber = 2;
  inline ::google::protobuf::int32 keeptime() const;
  inline void set_keeptime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_keeptime_statistics)
 private:
  inline void set_has_page_name();
  inline void clear_has_page_name();
  inline void set_has_keeptime();
  inline void clear_has_keeptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* page_name_;
  ::google::protobuf::int32 keeptime_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_keeptime_statistics* default_instance_;
};
// -------------------------------------------------------------------

class page_keeptime_statistics_ask : public ::google::protobuf::Message {
 public:
  page_keeptime_statistics_ask();
  virtual ~page_keeptime_statistics_ask();

  page_keeptime_statistics_ask(const page_keeptime_statistics_ask& from);

  inline page_keeptime_statistics_ask& operator=(const page_keeptime_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_keeptime_statistics_ask& default_instance();

  void Swap(page_keeptime_statistics_ask* other);

  // implements Message ----------------------------------------------

  page_keeptime_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_keeptime_statistics_ask& from);
  void MergeFrom(const page_keeptime_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_keeptime_statistics_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_keeptime_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class page_keeptime_statistics_ans : public ::google::protobuf::Message {
 public:
  page_keeptime_statistics_ans();
  virtual ~page_keeptime_statistics_ans();

  page_keeptime_statistics_ans(const page_keeptime_statistics_ans& from);

  inline page_keeptime_statistics_ans& operator=(const page_keeptime_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_keeptime_statistics_ans& default_instance();

  void Swap(page_keeptime_statistics_ans* other);

  // implements Message ----------------------------------------------

  page_keeptime_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_keeptime_statistics_ans& from);
  void MergeFrom(const page_keeptime_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_PageView.page_keeptime_statistics list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UBAS_PageView::page_keeptime_statistics& list(int index) const;
  inline ::UBAS_PageView::page_keeptime_statistics* mutable_list(int index);
  inline ::UBAS_PageView::page_keeptime_statistics* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_keeptime_statistics >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_keeptime_statistics >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_keeptime_statistics_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_keeptime_statistics > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_keeptime_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_business_track_person_info : public ::google::protobuf::Message {
 public:
  user_business_track_person_info();
  virtual ~user_business_track_person_info();

  user_business_track_person_info(const user_business_track_person_info& from);

  inline user_business_track_person_info& operator=(const user_business_track_person_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_business_track_person_info& default_instance();

  void Swap(user_business_track_person_info* other);

  // implements Message ----------------------------------------------

  user_business_track_person_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_business_track_person_info& from);
  void MergeFrom(const user_business_track_person_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes avatar = 1;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 1;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes mobile = 4;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 4;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const void* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // optional bytes idcard_no = 5;
  inline bool has_idcard_no() const;
  inline void clear_idcard_no();
  static const int kIdcardNoFieldNumber = 5;
  inline const ::std::string& idcard_no() const;
  inline void set_idcard_no(const ::std::string& value);
  inline void set_idcard_no(const char* value);
  inline void set_idcard_no(const void* value, size_t size);
  inline ::std::string* mutable_idcard_no();
  inline ::std::string* release_idcard_no();
  inline void set_allocated_idcard_no(::std::string* idcard_no);

  // optional .common.sex sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::common::sex sex() const;
  inline void set_sex(::common::sex value);

  // optional int32 age = 7;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 7;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional bool overdue_status = 8;
  inline bool has_overdue_status() const;
  inline void clear_overdue_status();
  static const int kOverdueStatusFieldNumber = 8;
  inline bool overdue_status() const;
  inline void set_overdue_status(bool value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.user_business_track_person_info)
 private:
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_idcard_no();
  inline void clear_has_idcard_no();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_overdue_status();
  inline void clear_has_overdue_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* avatar_;
  ::std::string* nick_name_;
  ::std::string* name_;
  ::std::string* mobile_;
  ::std::string* idcard_no_;
  int sex_;
  ::google::protobuf::int32 age_;
  bool overdue_status_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static user_business_track_person_info* default_instance_;
};
// -------------------------------------------------------------------

class user_business_track_content : public ::google::protobuf::Message {
 public:
  user_business_track_content();
  virtual ~user_business_track_content();

  user_business_track_content(const user_business_track_content& from);

  inline user_business_track_content& operator=(const user_business_track_content& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_business_track_content& default_instance();

  void Swap(user_business_track_content* other);

  // implements Message ----------------------------------------------

  user_business_track_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_business_track_content& from);
  void MergeFrom(const user_business_track_content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 field_no = 1;
  inline bool has_field_no() const;
  inline void clear_field_no();
  static const int kFieldNoFieldNumber = 1;
  inline ::google::protobuf::int32 field_no() const;
  inline void set_field_no(::google::protobuf::int32 value);

  // optional bytes field_name = 2;
  inline bool has_field_name() const;
  inline void clear_field_name();
  static const int kFieldNameFieldNumber = 2;
  inline const ::std::string& field_name() const;
  inline void set_field_name(const ::std::string& value);
  inline void set_field_name(const char* value);
  inline void set_field_name(const void* value, size_t size);
  inline ::std::string* mutable_field_name();
  inline ::std::string* release_field_name();
  inline void set_allocated_field_name(::std::string* field_name);

  // optional bytes field_value = 3;
  inline bool has_field_value() const;
  inline void clear_field_value();
  static const int kFieldValueFieldNumber = 3;
  inline const ::std::string& field_value() const;
  inline void set_field_value(const ::std::string& value);
  inline void set_field_value(const char* value);
  inline void set_field_value(const void* value, size_t size);
  inline ::std::string* mutable_field_value();
  inline ::std::string* release_field_value();
  inline void set_allocated_field_value(::std::string* field_value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.user_business_track_content)
 private:
  inline void set_has_field_no();
  inline void clear_has_field_no();
  inline void set_has_field_name();
  inline void clear_has_field_name();
  inline void set_has_field_value();
  inline void clear_has_field_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* field_name_;
  ::std::string* field_value_;
  ::google::protobuf::int32 field_no_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static user_business_track_content* default_instance_;
};
// -------------------------------------------------------------------

class user_business_track_item : public ::google::protobuf::Message {
 public:
  user_business_track_item();
  virtual ~user_business_track_item();

  user_business_track_item(const user_business_track_item& from);

  inline user_business_track_item& operator=(const user_business_track_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_business_track_item& default_instance();

  void Swap(user_business_track_item* other);

  // implements Message ----------------------------------------------

  user_business_track_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_business_track_item& from);
  void MergeFrom(const user_business_track_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes occur_time = 1;
  inline bool has_occur_time() const;
  inline void clear_occur_time();
  static const int kOccurTimeFieldNumber = 1;
  inline const ::std::string& occur_time() const;
  inline void set_occur_time(const ::std::string& value);
  inline void set_occur_time(const char* value);
  inline void set_occur_time(const void* value, size_t size);
  inline ::std::string* mutable_occur_time();
  inline ::std::string* release_occur_time();
  inline void set_allocated_occur_time(::std::string* occur_time);

  // optional bytes business = 2;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 2;
  inline const ::std::string& business() const;
  inline void set_business(const ::std::string& value);
  inline void set_business(const char* value);
  inline void set_business(const void* value, size_t size);
  inline ::std::string* mutable_business();
  inline ::std::string* release_business();
  inline void set_allocated_business(::std::string* business);

  // repeated .UBAS_PageView.user_business_track_content track_contents = 3;
  inline int track_contents_size() const;
  inline void clear_track_contents();
  static const int kTrackContentsFieldNumber = 3;
  inline const ::UBAS_PageView::user_business_track_content& track_contents(int index) const;
  inline ::UBAS_PageView::user_business_track_content* mutable_track_contents(int index);
  inline ::UBAS_PageView::user_business_track_content* add_track_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_content >&
      track_contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_content >*
      mutable_track_contents();

  // @@protoc_insertion_point(class_scope:UBAS_PageView.user_business_track_item)
 private:
  inline void set_has_occur_time();
  inline void clear_has_occur_time();
  inline void set_has_business();
  inline void clear_has_business();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* occur_time_;
  ::std::string* business_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_content > track_contents_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static user_business_track_item* default_instance_;
};
// -------------------------------------------------------------------

class user_business_track_query_ask : public ::google::protobuf::Message {
 public:
  user_business_track_query_ask();
  virtual ~user_business_track_query_ask();

  user_business_track_query_ask(const user_business_track_query_ask& from);

  inline user_business_track_query_ask& operator=(const user_business_track_query_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_business_track_query_ask& default_instance();

  void Swap(user_business_track_query_ask* other);

  // implements Message ----------------------------------------------

  user_business_track_query_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_business_track_query_ask& from);
  void MergeFrom(const user_business_track_query_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes mobile = 2;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 2;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const void* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // optional bytes idcard_no = 3;
  inline bool has_idcard_no() const;
  inline void clear_idcard_no();
  static const int kIdcardNoFieldNumber = 3;
  inline const ::std::string& idcard_no() const;
  inline void set_idcard_no(const ::std::string& value);
  inline void set_idcard_no(const char* value);
  inline void set_idcard_no(const void* value, size_t size);
  inline ::std::string* mutable_idcard_no();
  inline ::std::string* release_idcard_no();
  inline void set_allocated_idcard_no(::std::string* idcard_no);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.user_business_track_query_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_idcard_no();
  inline void clear_has_idcard_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* mobile_;
  ::std::string* idcard_no_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static user_business_track_query_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_business_track_query_ans : public ::google::protobuf::Message {
 public:
  user_business_track_query_ans();
  virtual ~user_business_track_query_ans();

  user_business_track_query_ans(const user_business_track_query_ans& from);

  inline user_business_track_query_ans& operator=(const user_business_track_query_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_business_track_query_ans& default_instance();

  void Swap(user_business_track_query_ans* other);

  // implements Message ----------------------------------------------

  user_business_track_query_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_business_track_query_ans& from);
  void MergeFrom(const user_business_track_query_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UBAS_PageView.user_business_track_person_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UBAS_PageView::user_business_track_person_info& info() const;
  inline ::UBAS_PageView::user_business_track_person_info* mutable_info();
  inline ::UBAS_PageView::user_business_track_person_info* release_info();
  inline void set_allocated_info(::UBAS_PageView::user_business_track_person_info* info);

  // repeated .UBAS_PageView.user_business_track_item track_items = 2;
  inline int track_items_size() const;
  inline void clear_track_items();
  static const int kTrackItemsFieldNumber = 2;
  inline const ::UBAS_PageView::user_business_track_item& track_items(int index) const;
  inline ::UBAS_PageView::user_business_track_item* mutable_track_items(int index);
  inline ::UBAS_PageView::user_business_track_item* add_track_items();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_item >&
      track_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_item >*
      mutable_track_items();

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.user_business_track_query_ans)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::UBAS_PageView::user_business_track_person_info* info_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_item > track_items_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static user_business_track_query_ans* default_instance_;
};
// -------------------------------------------------------------------

class page_access_statistics : public ::google::protobuf::Message {
 public:
  page_access_statistics();
  virtual ~page_access_statistics();

  page_access_statistics(const page_access_statistics& from);

  inline page_access_statistics& operator=(const page_access_statistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_access_statistics& default_instance();

  void Swap(page_access_statistics* other);

  // implements Message ----------------------------------------------

  page_access_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_access_statistics& from);
  void MergeFrom(const page_access_statistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes page_name = 1;
  inline bool has_page_name() const;
  inline void clear_page_name();
  static const int kPageNameFieldNumber = 1;
  inline const ::std::string& page_name() const;
  inline void set_page_name(const ::std::string& value);
  inline void set_page_name(const char* value);
  inline void set_page_name(const void* value, size_t size);
  inline ::std::string* mutable_page_name();
  inline ::std::string* release_page_name();
  inline void set_allocated_page_name(::std::string* page_name);

  // optional int32 access_count = 2;
  inline bool has_access_count() const;
  inline void clear_access_count();
  static const int kAccessCountFieldNumber = 2;
  inline ::google::protobuf::int32 access_count() const;
  inline void set_access_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_access_statistics)
 private:
  inline void set_has_page_name();
  inline void clear_has_page_name();
  inline void set_has_access_count();
  inline void clear_has_access_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* page_name_;
  ::google::protobuf::int32 access_count_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_access_statistics* default_instance_;
};
// -------------------------------------------------------------------

class page_access_statistics_ask : public ::google::protobuf::Message {
 public:
  page_access_statistics_ask();
  virtual ~page_access_statistics_ask();

  page_access_statistics_ask(const page_access_statistics_ask& from);

  inline page_access_statistics_ask& operator=(const page_access_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_access_statistics_ask& default_instance();

  void Swap(page_access_statistics_ask* other);

  // implements Message ----------------------------------------------

  page_access_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_access_statistics_ask& from);
  void MergeFrom(const page_access_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_access_statistics_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_access_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class page_access_statistics_ans : public ::google::protobuf::Message {
 public:
  page_access_statistics_ans();
  virtual ~page_access_statistics_ans();

  page_access_statistics_ans(const page_access_statistics_ans& from);

  inline page_access_statistics_ans& operator=(const page_access_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_access_statistics_ans& default_instance();

  void Swap(page_access_statistics_ans* other);

  // implements Message ----------------------------------------------

  page_access_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_access_statistics_ans& from);
  void MergeFrom(const page_access_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_PageView.page_access_statistics list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UBAS_PageView::page_access_statistics& list(int index) const;
  inline ::UBAS_PageView::page_access_statistics* mutable_list(int index);
  inline ::UBAS_PageView::page_access_statistics* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_statistics >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_statistics >*
      mutable_list();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_access_statistics_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_statistics > list_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_access_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class page_duration_statistics : public ::google::protobuf::Message {
 public:
  page_duration_statistics();
  virtual ~page_duration_statistics();

  page_duration_statistics(const page_duration_statistics& from);

  inline page_duration_statistics& operator=(const page_duration_statistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_duration_statistics& default_instance();

  void Swap(page_duration_statistics* other);

  // implements Message ----------------------------------------------

  page_duration_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_duration_statistics& from);
  void MergeFrom(const page_duration_statistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes page_name = 1;
  inline bool has_page_name() const;
  inline void clear_page_name();
  static const int kPageNameFieldNumber = 1;
  inline const ::std::string& page_name() const;
  inline void set_page_name(const ::std::string& value);
  inline void set_page_name(const char* value);
  inline void set_page_name(const void* value, size_t size);
  inline ::std::string* mutable_page_name();
  inline ::std::string* release_page_name();
  inline void set_allocated_page_name(::std::string* page_name);

  // optional int32 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_duration_statistics)
 private:
  inline void set_has_page_name();
  inline void clear_has_page_name();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* page_name_;
  ::google::protobuf::int32 duration_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_duration_statistics* default_instance_;
};
// -------------------------------------------------------------------

class page_duration_statistics_ask : public ::google::protobuf::Message {
 public:
  page_duration_statistics_ask();
  virtual ~page_duration_statistics_ask();

  page_duration_statistics_ask(const page_duration_statistics_ask& from);

  inline page_duration_statistics_ask& operator=(const page_duration_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_duration_statistics_ask& default_instance();

  void Swap(page_duration_statistics_ask* other);

  // implements Message ----------------------------------------------

  page_duration_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_duration_statistics_ask& from);
  void MergeFrom(const page_duration_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_duration_statistics_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_duration_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class page_duration_statistics_ans : public ::google::protobuf::Message {
 public:
  page_duration_statistics_ans();
  virtual ~page_duration_statistics_ans();

  page_duration_statistics_ans(const page_duration_statistics_ans& from);

  inline page_duration_statistics_ans& operator=(const page_duration_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_duration_statistics_ans& default_instance();

  void Swap(page_duration_statistics_ans* other);

  // implements Message ----------------------------------------------

  page_duration_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_duration_statistics_ans& from);
  void MergeFrom(const page_duration_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_PageView.page_duration_statistics list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UBAS_PageView::page_duration_statistics& list(int index) const;
  inline ::UBAS_PageView::page_duration_statistics* mutable_list(int index);
  inline ::UBAS_PageView::page_duration_statistics* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_duration_statistics >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_duration_statistics >*
      mutable_list();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_duration_statistics_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_duration_statistics > list_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_duration_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class step_page_statistics : public ::google::protobuf::Message {
 public:
  step_page_statistics();
  virtual ~step_page_statistics();

  step_page_statistics(const step_page_statistics& from);

  inline step_page_statistics& operator=(const step_page_statistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const step_page_statistics& default_instance();

  void Swap(step_page_statistics* other);

  // implements Message ----------------------------------------------

  step_page_statistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const step_page_statistics& from);
  void MergeFrom(const step_page_statistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 step_number = 1;
  inline bool has_step_number() const;
  inline void clear_step_number();
  static const int kStepNumberFieldNumber = 1;
  inline ::google::protobuf::int32 step_number() const;
  inline void set_step_number(::google::protobuf::int32 value);

  // optional int32 access_count = 2;
  inline bool has_access_count() const;
  inline void clear_access_count();
  static const int kAccessCountFieldNumber = 2;
  inline ::google::protobuf::int32 access_count() const;
  inline void set_access_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.step_page_statistics)
 private:
  inline void set_has_step_number();
  inline void clear_has_step_number();
  inline void set_has_access_count();
  inline void clear_has_access_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 step_number_;
  ::google::protobuf::int32 access_count_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static step_page_statistics* default_instance_;
};
// -------------------------------------------------------------------

class page_trace_statistics_ask : public ::google::protobuf::Message {
 public:
  page_trace_statistics_ask();
  virtual ~page_trace_statistics_ask();

  page_trace_statistics_ask(const page_trace_statistics_ask& from);

  inline page_trace_statistics_ask& operator=(const page_trace_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_trace_statistics_ask& default_instance();

  void Swap(page_trace_statistics_ask* other);

  // implements Message ----------------------------------------------

  page_trace_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_trace_statistics_ask& from);
  void MergeFrom(const page_trace_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes page_type = 3;
  inline bool has_page_type() const;
  inline void clear_page_type();
  static const int kPageTypeFieldNumber = 3;
  inline const ::std::string& page_type() const;
  inline void set_page_type(const ::std::string& value);
  inline void set_page_type(const char* value);
  inline void set_page_type(const void* value, size_t size);
  inline ::std::string* mutable_page_type();
  inline ::std::string* release_page_type();
  inline void set_allocated_page_type(::std::string* page_type);

  // optional int32 layers = 4;
  inline bool has_layers() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 4;
  inline ::google::protobuf::int32 layers() const;
  inline void set_layers(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_trace_statistics_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_page_type();
  inline void clear_has_page_type();
  inline void set_has_layers();
  inline void clear_has_layers();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* page_type_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 layers_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_trace_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class page_trace_statistics_ans : public ::google::protobuf::Message {
 public:
  page_trace_statistics_ans();
  virtual ~page_trace_statistics_ans();

  page_trace_statistics_ans(const page_trace_statistics_ans& from);

  inline page_trace_statistics_ans& operator=(const page_trace_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_trace_statistics_ans& default_instance();

  void Swap(page_trace_statistics_ans* other);

  // implements Message ----------------------------------------------

  page_trace_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_trace_statistics_ans& from);
  void MergeFrom(const page_trace_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_PageView.step_page_statistics info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UBAS_PageView::step_page_statistics& info(int index) const;
  inline ::UBAS_PageView::step_page_statistics* mutable_info(int index);
  inline ::UBAS_PageView::step_page_statistics* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_page_statistics >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_page_statistics >*
      mutable_info();

  // optional bytes json_data = 2;
  inline bool has_json_data() const;
  inline void clear_json_data();
  static const int kJsonDataFieldNumber = 2;
  inline const ::std::string& json_data() const;
  inline void set_json_data(const ::std::string& value);
  inline void set_json_data(const char* value);
  inline void set_json_data(const void* value, size_t size);
  inline ::std::string* mutable_json_data();
  inline ::std::string* release_json_data();
  inline void set_allocated_json_data(::std::string* json_data);

  // optional .common.result_info result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_trace_statistics_ans)
 private:
  inline void set_has_json_data();
  inline void clear_has_json_data();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_page_statistics > info_;
  ::std::string* json_data_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_trace_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_ask : public ::google::protobuf::Message {
 public:
  opt_trace_ask();
  virtual ~opt_trace_ask();

  opt_trace_ask(const opt_trace_ask& from);

  inline opt_trace_ask& operator=(const opt_trace_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_ask& default_instance();

  void Swap(opt_trace_ask* other);

  // implements Message ----------------------------------------------

  opt_trace_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_ask& from);
  void MergeFrom(const opt_trace_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_card_no = 4;
  inline bool has_id_card_no() const;
  inline void clear_id_card_no();
  static const int kIdCardNoFieldNumber = 4;
  inline const ::std::string& id_card_no() const;
  inline void set_id_card_no(const ::std::string& value);
  inline void set_id_card_no(const char* value);
  inline void set_id_card_no(const void* value, size_t size);
  inline ::std::string* mutable_id_card_no();
  inline ::std::string* release_id_card_no();
  inline void set_allocated_id_card_no(::std::string* id_card_no);

  // repeated int32 trace_type_list = 5;
  inline int trace_type_list_size() const;
  inline void clear_trace_type_list();
  static const int kTraceTypeListFieldNumber = 5;
  inline ::google::protobuf::int32 trace_type_list(int index) const;
  inline void set_trace_type_list(int index, ::google::protobuf::int32 value);
  inline void add_trace_type_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trace_type_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trace_type_list();

  // optional .common.common_ask_header ask_header = 6;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 6;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_card_no();
  inline void clear_has_id_card_no();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* mobile_phone_;
  ::std::string* id_card_no_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trace_type_list_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_ask* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_ans : public ::google::protobuf::Message {
 public:
  opt_trace_ans();
  virtual ~opt_trace_ans();

  opt_trace_ans(const opt_trace_ans& from);

  inline opt_trace_ans& operator=(const opt_trace_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_ans& default_instance();

  void Swap(opt_trace_ans* other);

  // implements Message ----------------------------------------------

  opt_trace_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_ans& from);
  void MergeFrom(const opt_trace_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional bytes age = 4;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 4;
  inline const ::std::string& age() const;
  inline void set_age(const ::std::string& value);
  inline void set_age(const char* value);
  inline void set_age(const void* value, size_t size);
  inline ::std::string* mutable_age();
  inline ::std::string* release_age();
  inline void set_allocated_age(::std::string* age);

  // optional bytes identity = 5;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 5;
  inline const ::std::string& identity() const;
  inline void set_identity(const ::std::string& value);
  inline void set_identity(const char* value);
  inline void set_identity(const void* value, size_t size);
  inline ::std::string* mutable_identity();
  inline ::std::string* release_identity();
  inline void set_allocated_identity(::std::string* identity);

  // optional bytes idcard_no = 6;
  inline bool has_idcard_no() const;
  inline void clear_idcard_no();
  static const int kIdcardNoFieldNumber = 6;
  inline const ::std::string& idcard_no() const;
  inline void set_idcard_no(const ::std::string& value);
  inline void set_idcard_no(const char* value);
  inline void set_idcard_no(const void* value, size_t size);
  inline ::std::string* mutable_idcard_no();
  inline ::std::string* release_idcard_no();
  inline void set_allocated_idcard_no(::std::string* idcard_no);

  // optional bytes phone = 7;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 7;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const void* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional bytes avatar = 8;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 8;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes overdue_status = 9;
  inline bool has_overdue_status() const;
  inline void clear_overdue_status();
  static const int kOverdueStatusFieldNumber = 9;
  inline const ::std::string& overdue_status() const;
  inline void set_overdue_status(const ::std::string& value);
  inline void set_overdue_status(const char* value);
  inline void set_overdue_status(const void* value, size_t size);
  inline ::std::string* mutable_overdue_status();
  inline ::std::string* release_overdue_status();
  inline void set_allocated_overdue_status(::std::string* overdue_status);

  // repeated .UBAS_PageView.year year_list = 10;
  inline int year_list_size() const;
  inline void clear_year_list();
  static const int kYearListFieldNumber = 10;
  inline const ::UBAS_PageView::year& year_list(int index) const;
  inline ::UBAS_PageView::year* mutable_year_list(int index);
  inline ::UBAS_PageView::year* add_year_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::year >&
      year_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::year >*
      mutable_year_list();

  // optional .common.result_info result = 11;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 11;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_ans)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_idcard_no();
  inline void clear_has_idcard_no();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_overdue_status();
  inline void clear_has_overdue_status();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::std::string* name_;
  ::std::string* age_;
  ::std::string* identity_;
  ::std::string* idcard_no_;
  ::std::string* phone_;
  ::std::string* avatar_;
  ::std::string* overdue_status_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::year > year_list_;
  ::common::result_info* result_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_ans* default_instance_;
};
// -------------------------------------------------------------------

class year : public ::google::protobuf::Message {
 public:
  year();
  virtual ~year();

  year(const year& from);

  inline year& operator=(const year& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const year& default_instance();

  void Swap(year* other);

  // implements Message ----------------------------------------------

  year* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const year& from);
  void MergeFrom(const year& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes year_name = 1;
  inline bool has_year_name() const;
  inline void clear_year_name();
  static const int kYearNameFieldNumber = 1;
  inline const ::std::string& year_name() const;
  inline void set_year_name(const ::std::string& value);
  inline void set_year_name(const char* value);
  inline void set_year_name(const void* value, size_t size);
  inline ::std::string* mutable_year_name();
  inline ::std::string* release_year_name();
  inline void set_allocated_year_name(::std::string* year_name);

  // repeated .UBAS_PageView.month month_list = 2;
  inline int month_list_size() const;
  inline void clear_month_list();
  static const int kMonthListFieldNumber = 2;
  inline const ::UBAS_PageView::month& month_list(int index) const;
  inline ::UBAS_PageView::month* mutable_month_list(int index);
  inline ::UBAS_PageView::month* add_month_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::month >&
      month_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::month >*
      mutable_month_list();

  // @@protoc_insertion_point(class_scope:UBAS_PageView.year)
 private:
  inline void set_has_year_name();
  inline void clear_has_year_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* year_name_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::month > month_list_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static year* default_instance_;
};
// -------------------------------------------------------------------

class month : public ::google::protobuf::Message {
 public:
  month();
  virtual ~month();

  month(const month& from);

  inline month& operator=(const month& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const month& default_instance();

  void Swap(month* other);

  // implements Message ----------------------------------------------

  month* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const month& from);
  void MergeFrom(const month& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes month_name = 1;
  inline bool has_month_name() const;
  inline void clear_month_name();
  static const int kMonthNameFieldNumber = 1;
  inline const ::std::string& month_name() const;
  inline void set_month_name(const ::std::string& value);
  inline void set_month_name(const char* value);
  inline void set_month_name(const void* value, size_t size);
  inline ::std::string* mutable_month_name();
  inline ::std::string* release_month_name();
  inline void set_allocated_month_name(::std::string* month_name);

  // repeated .UBAS_PageView.opt_trace opt_list = 2;
  inline int opt_list_size() const;
  inline void clear_opt_list();
  static const int kOptListFieldNumber = 2;
  inline const ::UBAS_PageView::opt_trace& opt_list(int index) const;
  inline ::UBAS_PageView::opt_trace* mutable_opt_list(int index);
  inline ::UBAS_PageView::opt_trace* add_opt_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace >&
      opt_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace >*
      mutable_opt_list();

  // @@protoc_insertion_point(class_scope:UBAS_PageView.month)
 private:
  inline void set_has_month_name();
  inline void clear_has_month_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* month_name_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace > opt_list_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static month* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace : public ::google::protobuf::Message {
 public:
  opt_trace();
  virtual ~opt_trace();

  opt_trace(const opt_trace& from);

  inline opt_trace& operator=(const opt_trace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace& default_instance();

  void Swap(opt_trace* other);

  // implements Message ----------------------------------------------

  opt_trace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace& from);
  void MergeFrom(const opt_trace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes opt_time = 2;
  inline bool has_opt_time() const;
  inline void clear_opt_time();
  static const int kOptTimeFieldNumber = 2;
  inline const ::std::string& opt_time() const;
  inline void set_opt_time(const ::std::string& value);
  inline void set_opt_time(const char* value);
  inline void set_opt_time(const void* value, size_t size);
  inline ::std::string* mutable_opt_time();
  inline ::std::string* release_opt_time();
  inline void set_allocated_opt_time(::std::string* opt_time);

  // optional .UBAS_PageView.opt_trace_commons commons = 3;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 3;
  inline const ::UBAS_PageView::opt_trace_commons& commons() const;
  inline ::UBAS_PageView::opt_trace_commons* mutable_commons();
  inline ::UBAS_PageView::opt_trace_commons* release_commons();
  inline void set_allocated_commons(::UBAS_PageView::opt_trace_commons* commons);

  // optional .UBAS_PageView.opt_trace_bid bid = 4;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 4;
  inline const ::UBAS_PageView::opt_trace_bid& bid() const;
  inline ::UBAS_PageView::opt_trace_bid* mutable_bid();
  inline ::UBAS_PageView::opt_trace_bid* release_bid();
  inline void set_allocated_bid(::UBAS_PageView::opt_trace_bid* bid);

  // optional .UBAS_PageView.opt_trace_invoke invoke_trace = 5;
  inline bool has_invoke_trace() const;
  inline void clear_invoke_trace();
  static const int kInvokeTraceFieldNumber = 5;
  inline const ::UBAS_PageView::opt_trace_invoke& invoke_trace() const;
  inline ::UBAS_PageView::opt_trace_invoke* mutable_invoke_trace();
  inline ::UBAS_PageView::opt_trace_invoke* release_invoke_trace();
  inline void set_allocated_invoke_trace(::UBAS_PageView::opt_trace_invoke* invoke_trace);

  // optional .UBAS_PageView.opt_trace_business business_trace = 6;
  inline bool has_business_trace() const;
  inline void clear_business_trace();
  static const int kBusinessTraceFieldNumber = 6;
  inline const ::UBAS_PageView::opt_trace_business& business_trace() const;
  inline ::UBAS_PageView::opt_trace_business* mutable_business_trace();
  inline ::UBAS_PageView::opt_trace_business* release_business_trace();
  inline void set_allocated_business_trace(::UBAS_PageView::opt_trace_business* business_trace);

  // repeated .UBAS_PageView.opt_trace_page page_trace_list = 7;
  inline int page_trace_list_size() const;
  inline void clear_page_trace_list();
  static const int kPageTraceListFieldNumber = 7;
  inline const ::UBAS_PageView::opt_trace_page& page_trace_list(int index) const;
  inline ::UBAS_PageView::opt_trace_page* mutable_page_trace_list(int index);
  inline ::UBAS_PageView::opt_trace_page* add_page_trace_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace_page >&
      page_trace_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace_page >*
      mutable_page_trace_list();

  // optional .UBAS_PageView.opt_trace_fund_running_water frw_trace = 8;
  inline bool has_frw_trace() const;
  inline void clear_frw_trace();
  static const int kFrwTraceFieldNumber = 8;
  inline const ::UBAS_PageView::opt_trace_fund_running_water& frw_trace() const;
  inline ::UBAS_PageView::opt_trace_fund_running_water* mutable_frw_trace();
  inline ::UBAS_PageView::opt_trace_fund_running_water* release_frw_trace();
  inline void set_allocated_frw_trace(::UBAS_PageView::opt_trace_fund_running_water* frw_trace);

  // optional .UBAS_PageView.opt_trace_material material_trace = 9;
  inline bool has_material_trace() const;
  inline void clear_material_trace();
  static const int kMaterialTraceFieldNumber = 9;
  inline const ::UBAS_PageView::opt_trace_material& material_trace() const;
  inline ::UBAS_PageView::opt_trace_material* mutable_material_trace();
  inline ::UBAS_PageView::opt_trace_material* release_material_trace();
  inline void set_allocated_material_trace(::UBAS_PageView::opt_trace_material* material_trace);

  // optional .UBAS_PageView.verify_trace vtrace = 10;
  inline bool has_vtrace() const;
  inline void clear_vtrace();
  static const int kVtraceFieldNumber = 10;
  inline const ::UBAS_PageView::verify_trace& vtrace() const;
  inline ::UBAS_PageView::verify_trace* mutable_vtrace();
  inline ::UBAS_PageView::verify_trace* release_vtrace();
  inline void set_allocated_vtrace(::UBAS_PageView::verify_trace* vtrace);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_opt_time();
  inline void clear_has_opt_time();
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_invoke_trace();
  inline void clear_has_invoke_trace();
  inline void set_has_business_trace();
  inline void clear_has_business_trace();
  inline void set_has_frw_trace();
  inline void clear_has_frw_trace();
  inline void set_has_material_trace();
  inline void clear_has_material_trace();
  inline void set_has_vtrace();
  inline void clear_has_vtrace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* opt_time_;
  ::UBAS_PageView::opt_trace_commons* commons_;
  ::UBAS_PageView::opt_trace_bid* bid_;
  ::UBAS_PageView::opt_trace_invoke* invoke_trace_;
  ::UBAS_PageView::opt_trace_business* business_trace_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace_page > page_trace_list_;
  ::UBAS_PageView::opt_trace_fund_running_water* frw_trace_;
  ::UBAS_PageView::opt_trace_material* material_trace_;
  ::UBAS_PageView::verify_trace* vtrace_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_commons : public ::google::protobuf::Message {
 public:
  opt_trace_commons();
  virtual ~opt_trace_commons();

  opt_trace_commons(const opt_trace_commons& from);

  inline opt_trace_commons& operator=(const opt_trace_commons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_commons& default_instance();

  void Swap(opt_trace_commons* other);

  // implements Message ----------------------------------------------

  opt_trace_commons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_commons& from);
  void MergeFrom(const opt_trace_commons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes client_location = 1;
  inline bool has_client_location() const;
  inline void clear_client_location();
  static const int kClientLocationFieldNumber = 1;
  inline const ::std::string& client_location() const;
  inline void set_client_location(const ::std::string& value);
  inline void set_client_location(const char* value);
  inline void set_client_location(const void* value, size_t size);
  inline ::std::string* mutable_client_location();
  inline ::std::string* release_client_location();
  inline void set_allocated_client_location(::std::string* client_location);

  // optional bytes client_type = 2;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  inline const ::std::string& client_type() const;
  inline void set_client_type(const ::std::string& value);
  inline void set_client_type(const char* value);
  inline void set_client_type(const void* value, size_t size);
  inline ::std::string* mutable_client_type();
  inline ::std::string* release_client_type();
  inline void set_allocated_client_type(::std::string* client_type);

  // optional bytes client_id = 3;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const void* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // optional bytes client_brand = 4;
  inline bool has_client_brand() const;
  inline void clear_client_brand();
  static const int kClientBrandFieldNumber = 4;
  inline const ::std::string& client_brand() const;
  inline void set_client_brand(const ::std::string& value);
  inline void set_client_brand(const char* value);
  inline void set_client_brand(const void* value, size_t size);
  inline ::std::string* mutable_client_brand();
  inline ::std::string* release_client_brand();
  inline void set_allocated_client_brand(::std::string* client_brand);

  // optional bytes client_model = 5;
  inline bool has_client_model() const;
  inline void clear_client_model();
  static const int kClientModelFieldNumber = 5;
  inline const ::std::string& client_model() const;
  inline void set_client_model(const ::std::string& value);
  inline void set_client_model(const char* value);
  inline void set_client_model(const void* value, size_t size);
  inline ::std::string* mutable_client_model();
  inline ::std::string* release_client_model();
  inline void set_allocated_client_model(::std::string* client_model);

  // optional bytes internet_type = 6;
  inline bool has_internet_type() const;
  inline void clear_internet_type();
  static const int kInternetTypeFieldNumber = 6;
  inline const ::std::string& internet_type() const;
  inline void set_internet_type(const ::std::string& value);
  inline void set_internet_type(const char* value);
  inline void set_internet_type(const void* value, size_t size);
  inline ::std::string* mutable_internet_type();
  inline ::std::string* release_internet_type();
  inline void set_allocated_internet_type(::std::string* internet_type);

  // optional bytes client_ip = 7;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 7;
  inline const ::std::string& client_ip() const;
  inline void set_client_ip(const ::std::string& value);
  inline void set_client_ip(const char* value);
  inline void set_client_ip(const void* value, size_t size);
  inline ::std::string* mutable_client_ip();
  inline ::std::string* release_client_ip();
  inline void set_allocated_client_ip(::std::string* client_ip);

  // optional bytes client_ip_location = 8;
  inline bool has_client_ip_location() const;
  inline void clear_client_ip_location();
  static const int kClientIpLocationFieldNumber = 8;
  inline const ::std::string& client_ip_location() const;
  inline void set_client_ip_location(const ::std::string& value);
  inline void set_client_ip_location(const char* value);
  inline void set_client_ip_location(const void* value, size_t size);
  inline ::std::string* mutable_client_ip_location();
  inline ::std::string* release_client_ip_location();
  inline void set_allocated_client_ip_location(::std::string* client_ip_location);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_commons)
 private:
  inline void set_has_client_location();
  inline void clear_has_client_location();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_client_brand();
  inline void clear_has_client_brand();
  inline void set_has_client_model();
  inline void clear_has_client_model();
  inline void set_has_internet_type();
  inline void clear_has_internet_type();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  inline void set_has_client_ip_location();
  inline void clear_has_client_ip_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* client_location_;
  ::std::string* client_type_;
  ::std::string* client_id_;
  ::std::string* client_brand_;
  ::std::string* client_model_;
  ::std::string* internet_type_;
  ::std::string* client_ip_;
  ::std::string* client_ip_location_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_commons* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_bid : public ::google::protobuf::Message {
 public:
  opt_trace_bid();
  virtual ~opt_trace_bid();

  opt_trace_bid(const opt_trace_bid& from);

  inline opt_trace_bid& operator=(const opt_trace_bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_bid& default_instance();

  void Swap(opt_trace_bid* other);

  // implements Message ----------------------------------------------

  opt_trace_bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_bid& from);
  void MergeFrom(const opt_trace_bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bid_id = 1;
  inline bool has_bid_id() const;
  inline void clear_bid_id();
  static const int kBidIdFieldNumber = 1;
  inline const ::std::string& bid_id() const;
  inline void set_bid_id(const ::std::string& value);
  inline void set_bid_id(const char* value);
  inline void set_bid_id(const void* value, size_t size);
  inline ::std::string* mutable_bid_id();
  inline ::std::string* release_bid_id();
  inline void set_allocated_bid_id(::std::string* bid_id);

  // optional bytes bid_avatar = 2;
  inline bool has_bid_avatar() const;
  inline void clear_bid_avatar();
  static const int kBidAvatarFieldNumber = 2;
  inline const ::std::string& bid_avatar() const;
  inline void set_bid_avatar(const ::std::string& value);
  inline void set_bid_avatar(const char* value);
  inline void set_bid_avatar(const void* value, size_t size);
  inline ::std::string* mutable_bid_avatar();
  inline ::std::string* release_bid_avatar();
  inline void set_allocated_bid_avatar(::std::string* bid_avatar);

  // optional bytes bid_nickname = 3;
  inline bool has_bid_nickname() const;
  inline void clear_bid_nickname();
  static const int kBidNicknameFieldNumber = 3;
  inline const ::std::string& bid_nickname() const;
  inline void set_bid_nickname(const ::std::string& value);
  inline void set_bid_nickname(const char* value);
  inline void set_bid_nickname(const void* value, size_t size);
  inline ::std::string* mutable_bid_nickname();
  inline ::std::string* release_bid_nickname();
  inline void set_allocated_bid_nickname(::std::string* bid_nickname);

  // optional bytes bid_time = 4;
  inline bool has_bid_time() const;
  inline void clear_bid_time();
  static const int kBidTimeFieldNumber = 4;
  inline const ::std::string& bid_time() const;
  inline void set_bid_time(const ::std::string& value);
  inline void set_bid_time(const char* value);
  inline void set_bid_time(const void* value, size_t size);
  inline ::std::string* mutable_bid_time();
  inline ::std::string* release_bid_time();
  inline void set_allocated_bid_time(::std::string* bid_time);

  // optional bytes bid_title = 5;
  inline bool has_bid_title() const;
  inline void clear_bid_title();
  static const int kBidTitleFieldNumber = 5;
  inline const ::std::string& bid_title() const;
  inline void set_bid_title(const ::std::string& value);
  inline void set_bid_title(const char* value);
  inline void set_bid_title(const void* value, size_t size);
  inline ::std::string* mutable_bid_title();
  inline ::std::string* release_bid_title();
  inline void set_allocated_bid_title(::std::string* bid_title);

  // optional float bid_amount = 6;
  inline bool has_bid_amount() const;
  inline void clear_bid_amount();
  static const int kBidAmountFieldNumber = 6;
  inline float bid_amount() const;
  inline void set_bid_amount(float value);

  // optional bytes bid_rate = 7;
  inline bool has_bid_rate() const;
  inline void clear_bid_rate();
  static const int kBidRateFieldNumber = 7;
  inline const ::std::string& bid_rate() const;
  inline void set_bid_rate(const ::std::string& value);
  inline void set_bid_rate(const char* value);
  inline void set_bid_rate(const void* value, size_t size);
  inline ::std::string* mutable_bid_rate();
  inline ::std::string* release_bid_rate();
  inline void set_allocated_bid_rate(::std::string* bid_rate);

  // optional bytes bid_feerate = 8;
  inline bool has_bid_feerate() const;
  inline void clear_bid_feerate();
  static const int kBidFeerateFieldNumber = 8;
  inline const ::std::string& bid_feerate() const;
  inline void set_bid_feerate(const ::std::string& value);
  inline void set_bid_feerate(const char* value);
  inline void set_bid_feerate(const void* value, size_t size);
  inline ::std::string* mutable_bid_feerate();
  inline ::std::string* release_bid_feerate();
  inline void set_allocated_bid_feerate(::std::string* bid_feerate);

  // optional bytes bid_deadline = 9;
  inline bool has_bid_deadline() const;
  inline void clear_bid_deadline();
  static const int kBidDeadlineFieldNumber = 9;
  inline const ::std::string& bid_deadline() const;
  inline void set_bid_deadline(const ::std::string& value);
  inline void set_bid_deadline(const char* value);
  inline void set_bid_deadline(const void* value, size_t size);
  inline ::std::string* mutable_bid_deadline();
  inline ::std::string* release_bid_deadline();
  inline void set_allocated_bid_deadline(::std::string* bid_deadline);

  // optional bytes diligence_nickname = 10;
  inline bool has_diligence_nickname() const;
  inline void clear_diligence_nickname();
  static const int kDiligenceNicknameFieldNumber = 10;
  inline const ::std::string& diligence_nickname() const;
  inline void set_diligence_nickname(const ::std::string& value);
  inline void set_diligence_nickname(const char* value);
  inline void set_diligence_nickname(const void* value, size_t size);
  inline ::std::string* mutable_diligence_nickname();
  inline ::std::string* release_diligence_nickname();
  inline void set_allocated_diligence_nickname(::std::string* diligence_nickname);

  // optional bytes diligence_avatar = 11;
  inline bool has_diligence_avatar() const;
  inline void clear_diligence_avatar();
  static const int kDiligenceAvatarFieldNumber = 11;
  inline const ::std::string& diligence_avatar() const;
  inline void set_diligence_avatar(const ::std::string& value);
  inline void set_diligence_avatar(const char* value);
  inline void set_diligence_avatar(const void* value, size_t size);
  inline ::std::string* mutable_diligence_avatar();
  inline ::std::string* release_diligence_avatar();
  inline void set_allocated_diligence_avatar(::std::string* diligence_avatar);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_bid)
 private:
  inline void set_has_bid_id();
  inline void clear_has_bid_id();
  inline void set_has_bid_avatar();
  inline void clear_has_bid_avatar();
  inline void set_has_bid_nickname();
  inline void clear_has_bid_nickname();
  inline void set_has_bid_time();
  inline void clear_has_bid_time();
  inline void set_has_bid_title();
  inline void clear_has_bid_title();
  inline void set_has_bid_amount();
  inline void clear_has_bid_amount();
  inline void set_has_bid_rate();
  inline void clear_has_bid_rate();
  inline void set_has_bid_feerate();
  inline void clear_has_bid_feerate();
  inline void set_has_bid_deadline();
  inline void clear_has_bid_deadline();
  inline void set_has_diligence_nickname();
  inline void clear_has_diligence_nickname();
  inline void set_has_diligence_avatar();
  inline void clear_has_diligence_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_id_;
  ::std::string* bid_avatar_;
  ::std::string* bid_nickname_;
  ::std::string* bid_time_;
  ::std::string* bid_title_;
  ::std::string* bid_rate_;
  ::std::string* bid_feerate_;
  ::std::string* bid_deadline_;
  ::std::string* diligence_nickname_;
  ::std::string* diligence_avatar_;
  float bid_amount_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_bid* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_invoke : public ::google::protobuf::Message {
 public:
  opt_trace_invoke();
  virtual ~opt_trace_invoke();

  opt_trace_invoke(const opt_trace_invoke& from);

  inline opt_trace_invoke& operator=(const opt_trace_invoke& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_invoke& default_instance();

  void Swap(opt_trace_invoke* other);

  // implements Message ----------------------------------------------

  opt_trace_invoke* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_invoke& from);
  void MergeFrom(const opt_trace_invoke& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes invoke_name = 1;
  inline bool has_invoke_name() const;
  inline void clear_invoke_name();
  static const int kInvokeNameFieldNumber = 1;
  inline const ::std::string& invoke_name() const;
  inline void set_invoke_name(const ::std::string& value);
  inline void set_invoke_name(const char* value);
  inline void set_invoke_name(const void* value, size_t size);
  inline ::std::string* mutable_invoke_name();
  inline ::std::string* release_invoke_name();
  inline void set_allocated_invoke_name(::std::string* invoke_name);

  // optional int32 verify_result = 2;
  inline bool has_verify_result() const;
  inline void clear_verify_result();
  static const int kVerifyResultFieldNumber = 2;
  inline ::google::protobuf::int32 verify_result() const;
  inline void set_verify_result(::google::protobuf::int32 value);

  // optional int32 handle_result = 3;
  inline bool has_handle_result() const;
  inline void clear_handle_result();
  static const int kHandleResultFieldNumber = 3;
  inline ::google::protobuf::int32 handle_result() const;
  inline void set_handle_result(::google::protobuf::int32 value);

  // optional bytes error_msg = 4;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const void* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  inline void set_allocated_error_msg(::std::string* error_msg);

  // optional bytes invoke_version = 5;
  inline bool has_invoke_version() const;
  inline void clear_invoke_version();
  static const int kInvokeVersionFieldNumber = 5;
  inline const ::std::string& invoke_version() const;
  inline void set_invoke_version(const ::std::string& value);
  inline void set_invoke_version(const char* value);
  inline void set_invoke_version(const void* value, size_t size);
  inline ::std::string* mutable_invoke_version();
  inline ::std::string* release_invoke_version();
  inline void set_allocated_invoke_version(::std::string* invoke_version);

  // optional int32 handle_status = 6;
  inline bool has_handle_status() const;
  inline void clear_handle_status();
  static const int kHandleStatusFieldNumber = 6;
  inline ::google::protobuf::int32 handle_status() const;
  inline void set_handle_status(::google::protobuf::int32 value);

  // optional float credit_limit = 7;
  inline bool has_credit_limit() const;
  inline void clear_credit_limit();
  static const int kCreditLimitFieldNumber = 7;
  inline float credit_limit() const;
  inline void set_credit_limit(float value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_invoke)
 private:
  inline void set_has_invoke_name();
  inline void clear_has_invoke_name();
  inline void set_has_verify_result();
  inline void clear_has_verify_result();
  inline void set_has_handle_result();
  inline void clear_has_handle_result();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_invoke_version();
  inline void clear_has_invoke_version();
  inline void set_has_handle_status();
  inline void clear_has_handle_status();
  inline void set_has_credit_limit();
  inline void clear_has_credit_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* invoke_name_;
  ::google::protobuf::int32 verify_result_;
  ::google::protobuf::int32 handle_result_;
  ::std::string* error_msg_;
  ::std::string* invoke_version_;
  ::google::protobuf::int32 handle_status_;
  float credit_limit_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_invoke* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_business : public ::google::protobuf::Message {
 public:
  opt_trace_business();
  virtual ~opt_trace_business();

  opt_trace_business(const opt_trace_business& from);

  inline opt_trace_business& operator=(const opt_trace_business& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_business& default_instance();

  void Swap(opt_trace_business* other);

  // implements Message ----------------------------------------------

  opt_trace_business* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_business& from);
  void MergeFrom(const opt_trace_business& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 business_type = 1;
  inline bool has_business_type() const;
  inline void clear_business_type();
  static const int kBusinessTypeFieldNumber = 1;
  inline ::google::protobuf::int32 business_type() const;
  inline void set_business_type(::google::protobuf::int32 value);

  // optional bytes invest_time = 2;
  inline bool has_invest_time() const;
  inline void clear_invest_time();
  static const int kInvestTimeFieldNumber = 2;
  inline const ::std::string& invest_time() const;
  inline void set_invest_time(const ::std::string& value);
  inline void set_invest_time(const char* value);
  inline void set_invest_time(const void* value, size_t size);
  inline ::std::string* mutable_invest_time();
  inline ::std::string* release_invest_time();
  inline void set_allocated_invest_time(::std::string* invest_time);

  // optional float invest_amount = 3;
  inline bool has_invest_amount() const;
  inline void clear_invest_amount();
  static const int kInvestAmountFieldNumber = 3;
  inline float invest_amount() const;
  inline void set_invest_amount(float value);

  // optional bytes guarantee_time = 4;
  inline bool has_guarantee_time() const;
  inline void clear_guarantee_time();
  static const int kGuaranteeTimeFieldNumber = 4;
  inline const ::std::string& guarantee_time() const;
  inline void set_guarantee_time(const ::std::string& value);
  inline void set_guarantee_time(const char* value);
  inline void set_guarantee_time(const void* value, size_t size);
  inline ::std::string* mutable_guarantee_time();
  inline ::std::string* release_guarantee_time();
  inline void set_allocated_guarantee_time(::std::string* guarantee_time);

  // optional float guarantee_amount = 5;
  inline bool has_guarantee_amount() const;
  inline void clear_guarantee_amount();
  static const int kGuaranteeAmountFieldNumber = 5;
  inline float guarantee_amount() const;
  inline void set_guarantee_amount(float value);

  // optional int32 repay_period = 6;
  inline bool has_repay_period() const;
  inline void clear_repay_period();
  static const int kRepayPeriodFieldNumber = 6;
  inline ::google::protobuf::int32 repay_period() const;
  inline void set_repay_period(::google::protobuf::int32 value);

  // optional int32 repay_periods = 7;
  inline bool has_repay_periods() const;
  inline void clear_repay_periods();
  static const int kRepayPeriodsFieldNumber = 7;
  inline ::google::protobuf::int32 repay_periods() const;
  inline void set_repay_periods(::google::protobuf::int32 value);

  // optional bytes repay_time = 8;
  inline bool has_repay_time() const;
  inline void clear_repay_time();
  static const int kRepayTimeFieldNumber = 8;
  inline const ::std::string& repay_time() const;
  inline void set_repay_time(const ::std::string& value);
  inline void set_repay_time(const char* value);
  inline void set_repay_time(const void* value, size_t size);
  inline ::std::string* mutable_repay_time();
  inline ::std::string* release_repay_time();
  inline void set_allocated_repay_time(::std::string* repay_time);

  // optional float repay_amount = 9;
  inline bool has_repay_amount() const;
  inline void clear_repay_amount();
  static const int kRepayAmountFieldNumber = 9;
  inline float repay_amount() const;
  inline void set_repay_amount(float value);

  // optional float should_repay_amount = 10;
  inline bool has_should_repay_amount() const;
  inline void clear_should_repay_amount();
  static const int kShouldRepayAmountFieldNumber = 10;
  inline float should_repay_amount() const;
  inline void set_should_repay_amount(float value);

  // optional bytes viefor_avatar = 11;
  inline bool has_viefor_avatar() const;
  inline void clear_viefor_avatar();
  static const int kVieforAvatarFieldNumber = 11;
  inline const ::std::string& viefor_avatar() const;
  inline void set_viefor_avatar(const ::std::string& value);
  inline void set_viefor_avatar(const char* value);
  inline void set_viefor_avatar(const void* value, size_t size);
  inline ::std::string* mutable_viefor_avatar();
  inline ::std::string* release_viefor_avatar();
  inline void set_allocated_viefor_avatar(::std::string* viefor_avatar);

  // optional bytes viefor_nickname = 12;
  inline bool has_viefor_nickname() const;
  inline void clear_viefor_nickname();
  static const int kVieforNicknameFieldNumber = 12;
  inline const ::std::string& viefor_nickname() const;
  inline void set_viefor_nickname(const ::std::string& value);
  inline void set_viefor_nickname(const char* value);
  inline void set_viefor_nickname(const void* value, size_t size);
  inline ::std::string* mutable_viefor_nickname();
  inline ::std::string* release_viefor_nickname();
  inline void set_allocated_viefor_nickname(::std::string* viefor_nickname);

  // optional bytes viefor_name = 13;
  inline bool has_viefor_name() const;
  inline void clear_viefor_name();
  static const int kVieforNameFieldNumber = 13;
  inline const ::std::string& viefor_name() const;
  inline void set_viefor_name(const ::std::string& value);
  inline void set_viefor_name(const char* value);
  inline void set_viefor_name(const void* value, size_t size);
  inline ::std::string* mutable_viefor_name();
  inline ::std::string* release_viefor_name();
  inline void set_allocated_viefor_name(::std::string* viefor_name);

  // optional bytes viefor_phone = 14;
  inline bool has_viefor_phone() const;
  inline void clear_viefor_phone();
  static const int kVieforPhoneFieldNumber = 14;
  inline const ::std::string& viefor_phone() const;
  inline void set_viefor_phone(const ::std::string& value);
  inline void set_viefor_phone(const char* value);
  inline void set_viefor_phone(const void* value, size_t size);
  inline ::std::string* mutable_viefor_phone();
  inline ::std::string* release_viefor_phone();
  inline void set_allocated_viefor_phone(::std::string* viefor_phone);

  // optional bytes viefor_idcard = 15;
  inline bool has_viefor_idcard() const;
  inline void clear_viefor_idcard();
  static const int kVieforIdcardFieldNumber = 15;
  inline const ::std::string& viefor_idcard() const;
  inline void set_viefor_idcard(const ::std::string& value);
  inline void set_viefor_idcard(const char* value);
  inline void set_viefor_idcard(const void* value, size_t size);
  inline ::std::string* mutable_viefor_idcard();
  inline ::std::string* release_viefor_idcard();
  inline void set_allocated_viefor_idcard(::std::string* viefor_idcard);

  // optional bytes borrowman_name = 16;
  inline bool has_borrowman_name() const;
  inline void clear_borrowman_name();
  static const int kBorrowmanNameFieldNumber = 16;
  inline const ::std::string& borrowman_name() const;
  inline void set_borrowman_name(const ::std::string& value);
  inline void set_borrowman_name(const char* value);
  inline void set_borrowman_name(const void* value, size_t size);
  inline ::std::string* mutable_borrowman_name();
  inline ::std::string* release_borrowman_name();
  inline void set_allocated_borrowman_name(::std::string* borrowman_name);

  // optional bytes borrowman_phone = 17;
  inline bool has_borrowman_phone() const;
  inline void clear_borrowman_phone();
  static const int kBorrowmanPhoneFieldNumber = 17;
  inline const ::std::string& borrowman_phone() const;
  inline void set_borrowman_phone(const ::std::string& value);
  inline void set_borrowman_phone(const char* value);
  inline void set_borrowman_phone(const void* value, size_t size);
  inline ::std::string* mutable_borrowman_phone();
  inline ::std::string* release_borrowman_phone();
  inline void set_allocated_borrowman_phone(::std::string* borrowman_phone);

  // optional bytes borrowman_idcard = 18;
  inline bool has_borrowman_idcard() const;
  inline void clear_borrowman_idcard();
  static const int kBorrowmanIdcardFieldNumber = 18;
  inline const ::std::string& borrowman_idcard() const;
  inline void set_borrowman_idcard(const ::std::string& value);
  inline void set_borrowman_idcard(const char* value);
  inline void set_borrowman_idcard(const void* value, size_t size);
  inline ::std::string* mutable_borrowman_idcard();
  inline ::std::string* release_borrowman_idcard();
  inline void set_allocated_borrowman_idcard(::std::string* borrowman_idcard);

  // optional bytes diligenced_name = 19;
  inline bool has_diligenced_name() const;
  inline void clear_diligenced_name();
  static const int kDiligencedNameFieldNumber = 19;
  inline const ::std::string& diligenced_name() const;
  inline void set_diligenced_name(const ::std::string& value);
  inline void set_diligenced_name(const char* value);
  inline void set_diligenced_name(const void* value, size_t size);
  inline ::std::string* mutable_diligenced_name();
  inline ::std::string* release_diligenced_name();
  inline void set_allocated_diligenced_name(::std::string* diligenced_name);

  // optional bytes diligenced_idcard = 20;
  inline bool has_diligenced_idcard() const;
  inline void clear_diligenced_idcard();
  static const int kDiligencedIdcardFieldNumber = 20;
  inline const ::std::string& diligenced_idcard() const;
  inline void set_diligenced_idcard(const ::std::string& value);
  inline void set_diligenced_idcard(const char* value);
  inline void set_diligenced_idcard(const void* value, size_t size);
  inline ::std::string* mutable_diligenced_idcard();
  inline ::std::string* release_diligenced_idcard();
  inline void set_allocated_diligenced_idcard(::std::string* diligenced_idcard);

  // optional bytes diligenced_phone = 21;
  inline bool has_diligenced_phone() const;
  inline void clear_diligenced_phone();
  static const int kDiligencedPhoneFieldNumber = 21;
  inline const ::std::string& diligenced_phone() const;
  inline void set_diligenced_phone(const ::std::string& value);
  inline void set_diligenced_phone(const char* value);
  inline void set_diligenced_phone(const void* value, size_t size);
  inline ::std::string* mutable_diligenced_phone();
  inline ::std::string* release_diligenced_phone();
  inline void set_allocated_diligenced_phone(::std::string* diligenced_phone);

  // optional bytes diligence_location = 22;
  inline bool has_diligence_location() const;
  inline void clear_diligence_location();
  static const int kDiligenceLocationFieldNumber = 22;
  inline const ::std::string& diligence_location() const;
  inline void set_diligence_location(const ::std::string& value);
  inline void set_diligence_location(const char* value);
  inline void set_diligence_location(const void* value, size_t size);
  inline ::std::string* mutable_diligence_location();
  inline ::std::string* release_diligence_location();
  inline void set_allocated_diligence_location(::std::string* diligence_location);

  // optional bytes diligenced_location = 23;
  inline bool has_diligenced_location() const;
  inline void clear_diligenced_location();
  static const int kDiligencedLocationFieldNumber = 23;
  inline const ::std::string& diligenced_location() const;
  inline void set_diligenced_location(const ::std::string& value);
  inline void set_diligenced_location(const char* value);
  inline void set_diligenced_location(const void* value, size_t size);
  inline ::std::string* mutable_diligenced_location();
  inline ::std::string* release_diligenced_location();
  inline void set_allocated_diligenced_location(::std::string* diligenced_location);

  // optional bytes gv_borrowman_name = 24;
  inline bool has_gv_borrowman_name() const;
  inline void clear_gv_borrowman_name();
  static const int kGvBorrowmanNameFieldNumber = 24;
  inline const ::std::string& gv_borrowman_name() const;
  inline void set_gv_borrowman_name(const ::std::string& value);
  inline void set_gv_borrowman_name(const char* value);
  inline void set_gv_borrowman_name(const void* value, size_t size);
  inline ::std::string* mutable_gv_borrowman_name();
  inline ::std::string* release_gv_borrowman_name();
  inline void set_allocated_gv_borrowman_name(::std::string* gv_borrowman_name);

  // optional bytes gv_borrowman_phone = 25;
  inline bool has_gv_borrowman_phone() const;
  inline void clear_gv_borrowman_phone();
  static const int kGvBorrowmanPhoneFieldNumber = 25;
  inline const ::std::string& gv_borrowman_phone() const;
  inline void set_gv_borrowman_phone(const ::std::string& value);
  inline void set_gv_borrowman_phone(const char* value);
  inline void set_gv_borrowman_phone(const void* value, size_t size);
  inline ::std::string* mutable_gv_borrowman_phone();
  inline ::std::string* release_gv_borrowman_phone();
  inline void set_allocated_gv_borrowman_phone(::std::string* gv_borrowman_phone);

  // optional bytes gv_borrowman_idcard = 26;
  inline bool has_gv_borrowman_idcard() const;
  inline void clear_gv_borrowman_idcard();
  static const int kGvBorrowmanIdcardFieldNumber = 26;
  inline const ::std::string& gv_borrowman_idcard() const;
  inline void set_gv_borrowman_idcard(const ::std::string& value);
  inline void set_gv_borrowman_idcard(const char* value);
  inline void set_gv_borrowman_idcard(const void* value, size_t size);
  inline ::std::string* mutable_gv_borrowman_idcard();
  inline ::std::string* release_gv_borrowman_idcard();
  inline void set_allocated_gv_borrowman_idcard(::std::string* gv_borrowman_idcard);

  // optional float overdue_badbill_amount = 27;
  inline bool has_overdue_badbill_amount() const;
  inline void clear_overdue_badbill_amount();
  static const int kOverdueBadbillAmountFieldNumber = 27;
  inline float overdue_badbill_amount() const;
  inline void set_overdue_badbill_amount(float value);

  // optional int32 overdue_badbill_period = 28;
  inline bool has_overdue_badbill_period() const;
  inline void clear_overdue_badbill_period();
  static const int kOverdueBadbillPeriodFieldNumber = 28;
  inline ::google::protobuf::int32 overdue_badbill_period() const;
  inline void set_overdue_badbill_period(::google::protobuf::int32 value);

  // optional int32 overdue_badbill_periods = 29;
  inline bool has_overdue_badbill_periods() const;
  inline void clear_overdue_badbill_periods();
  static const int kOverdueBadbillPeriodsFieldNumber = 29;
  inline ::google::protobuf::int32 overdue_badbill_periods() const;
  inline void set_overdue_badbill_periods(::google::protobuf::int32 value);

  // optional bytes qiaoqiao_borrow_nickname = 30;
  inline bool has_qiaoqiao_borrow_nickname() const;
  inline void clear_qiaoqiao_borrow_nickname();
  static const int kQiaoqiaoBorrowNicknameFieldNumber = 30;
  inline const ::std::string& qiaoqiao_borrow_nickname() const;
  inline void set_qiaoqiao_borrow_nickname(const ::std::string& value);
  inline void set_qiaoqiao_borrow_nickname(const char* value);
  inline void set_qiaoqiao_borrow_nickname(const void* value, size_t size);
  inline ::std::string* mutable_qiaoqiao_borrow_nickname();
  inline ::std::string* release_qiaoqiao_borrow_nickname();
  inline void set_allocated_qiaoqiao_borrow_nickname(::std::string* qiaoqiao_borrow_nickname);

  // optional float qiaoqiao_borrow_amount = 31;
  inline bool has_qiaoqiao_borrow_amount() const;
  inline void clear_qiaoqiao_borrow_amount();
  static const int kQiaoqiaoBorrowAmountFieldNumber = 31;
  inline float qiaoqiao_borrow_amount() const;
  inline void set_qiaoqiao_borrow_amount(float value);

  // optional bytes qiaoqiao_borrow_usage = 32;
  inline bool has_qiaoqiao_borrow_usage() const;
  inline void clear_qiaoqiao_borrow_usage();
  static const int kQiaoqiaoBorrowUsageFieldNumber = 32;
  inline const ::std::string& qiaoqiao_borrow_usage() const;
  inline void set_qiaoqiao_borrow_usage(const ::std::string& value);
  inline void set_qiaoqiao_borrow_usage(const char* value);
  inline void set_qiaoqiao_borrow_usage(const void* value, size_t size);
  inline ::std::string* mutable_qiaoqiao_borrow_usage();
  inline ::std::string* release_qiaoqiao_borrow_usage();
  inline void set_allocated_qiaoqiao_borrow_usage(::std::string* qiaoqiao_borrow_usage);

  // optional float qiaoqiao_borrow_rate = 33;
  inline bool has_qiaoqiao_borrow_rate() const;
  inline void clear_qiaoqiao_borrow_rate();
  static const int kQiaoqiaoBorrowRateFieldNumber = 33;
  inline float qiaoqiao_borrow_rate() const;
  inline void set_qiaoqiao_borrow_rate(float value);

  // optional bytes qiaoqiao_borrow_location = 34;
  inline bool has_qiaoqiao_borrow_location() const;
  inline void clear_qiaoqiao_borrow_location();
  static const int kQiaoqiaoBorrowLocationFieldNumber = 34;
  inline const ::std::string& qiaoqiao_borrow_location() const;
  inline void set_qiaoqiao_borrow_location(const ::std::string& value);
  inline void set_qiaoqiao_borrow_location(const char* value);
  inline void set_qiaoqiao_borrow_location(const void* value, size_t size);
  inline ::std::string* mutable_qiaoqiao_borrow_location();
  inline ::std::string* release_qiaoqiao_borrow_location();
  inline void set_allocated_qiaoqiao_borrow_location(::std::string* qiaoqiao_borrow_location);

  // optional float qiaoqiao_repay_amount = 35;
  inline bool has_qiaoqiao_repay_amount() const;
  inline void clear_qiaoqiao_repay_amount();
  static const int kQiaoqiaoRepayAmountFieldNumber = 35;
  inline float qiaoqiao_repay_amount() const;
  inline void set_qiaoqiao_repay_amount(float value);

  // optional float qiaoqiao_invest_amount = 36;
  inline bool has_qiaoqiao_invest_amount() const;
  inline void clear_qiaoqiao_invest_amount();
  static const int kQiaoqiaoInvestAmountFieldNumber = 36;
  inline float qiaoqiao_invest_amount() const;
  inline void set_qiaoqiao_invest_amount(float value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_business)
 private:
  inline void set_has_business_type();
  inline void clear_has_business_type();
  inline void set_has_invest_time();
  inline void clear_has_invest_time();
  inline void set_has_invest_amount();
  inline void clear_has_invest_amount();
  inline void set_has_guarantee_time();
  inline void clear_has_guarantee_time();
  inline void set_has_guarantee_amount();
  inline void clear_has_guarantee_amount();
  inline void set_has_repay_period();
  inline void clear_has_repay_period();
  inline void set_has_repay_periods();
  inline void clear_has_repay_periods();
  inline void set_has_repay_time();
  inline void clear_has_repay_time();
  inline void set_has_repay_amount();
  inline void clear_has_repay_amount();
  inline void set_has_should_repay_amount();
  inline void clear_has_should_repay_amount();
  inline void set_has_viefor_avatar();
  inline void clear_has_viefor_avatar();
  inline void set_has_viefor_nickname();
  inline void clear_has_viefor_nickname();
  inline void set_has_viefor_name();
  inline void clear_has_viefor_name();
  inline void set_has_viefor_phone();
  inline void clear_has_viefor_phone();
  inline void set_has_viefor_idcard();
  inline void clear_has_viefor_idcard();
  inline void set_has_borrowman_name();
  inline void clear_has_borrowman_name();
  inline void set_has_borrowman_phone();
  inline void clear_has_borrowman_phone();
  inline void set_has_borrowman_idcard();
  inline void clear_has_borrowman_idcard();
  inline void set_has_diligenced_name();
  inline void clear_has_diligenced_name();
  inline void set_has_diligenced_idcard();
  inline void clear_has_diligenced_idcard();
  inline void set_has_diligenced_phone();
  inline void clear_has_diligenced_phone();
  inline void set_has_diligence_location();
  inline void clear_has_diligence_location();
  inline void set_has_diligenced_location();
  inline void clear_has_diligenced_location();
  inline void set_has_gv_borrowman_name();
  inline void clear_has_gv_borrowman_name();
  inline void set_has_gv_borrowman_phone();
  inline void clear_has_gv_borrowman_phone();
  inline void set_has_gv_borrowman_idcard();
  inline void clear_has_gv_borrowman_idcard();
  inline void set_has_overdue_badbill_amount();
  inline void clear_has_overdue_badbill_amount();
  inline void set_has_overdue_badbill_period();
  inline void clear_has_overdue_badbill_period();
  inline void set_has_overdue_badbill_periods();
  inline void clear_has_overdue_badbill_periods();
  inline void set_has_qiaoqiao_borrow_nickname();
  inline void clear_has_qiaoqiao_borrow_nickname();
  inline void set_has_qiaoqiao_borrow_amount();
  inline void clear_has_qiaoqiao_borrow_amount();
  inline void set_has_qiaoqiao_borrow_usage();
  inline void clear_has_qiaoqiao_borrow_usage();
  inline void set_has_qiaoqiao_borrow_rate();
  inline void clear_has_qiaoqiao_borrow_rate();
  inline void set_has_qiaoqiao_borrow_location();
  inline void clear_has_qiaoqiao_borrow_location();
  inline void set_has_qiaoqiao_repay_amount();
  inline void clear_has_qiaoqiao_repay_amount();
  inline void set_has_qiaoqiao_invest_amount();
  inline void clear_has_qiaoqiao_invest_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* invest_time_;
  ::google::protobuf::int32 business_type_;
  float invest_amount_;
  ::std::string* guarantee_time_;
  float guarantee_amount_;
  ::google::protobuf::int32 repay_period_;
  ::std::string* repay_time_;
  ::google::protobuf::int32 repay_periods_;
  float repay_amount_;
  ::std::string* viefor_avatar_;
  ::std::string* viefor_nickname_;
  ::std::string* viefor_name_;
  ::std::string* viefor_phone_;
  ::std::string* viefor_idcard_;
  ::std::string* borrowman_name_;
  ::std::string* borrowman_phone_;
  ::std::string* borrowman_idcard_;
  float should_repay_amount_;
  float overdue_badbill_amount_;
  ::std::string* diligenced_name_;
  ::std::string* diligenced_idcard_;
  ::std::string* diligenced_phone_;
  ::std::string* diligence_location_;
  ::std::string* diligenced_location_;
  ::std::string* gv_borrowman_name_;
  ::std::string* gv_borrowman_phone_;
  ::std::string* gv_borrowman_idcard_;
  ::google::protobuf::int32 overdue_badbill_period_;
  ::google::protobuf::int32 overdue_badbill_periods_;
  ::std::string* qiaoqiao_borrow_nickname_;
  ::std::string* qiaoqiao_borrow_usage_;
  float qiaoqiao_borrow_amount_;
  float qiaoqiao_borrow_rate_;
  ::std::string* qiaoqiao_borrow_location_;
  float qiaoqiao_repay_amount_;
  float qiaoqiao_invest_amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_business* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_page : public ::google::protobuf::Message {
 public:
  opt_trace_page();
  virtual ~opt_trace_page();

  opt_trace_page(const opt_trace_page& from);

  inline opt_trace_page& operator=(const opt_trace_page& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_page& default_instance();

  void Swap(opt_trace_page* other);

  // implements Message ----------------------------------------------

  opt_trace_page* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_page& from);
  void MergeFrom(const opt_trace_page& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes page_name = 1;
  inline bool has_page_name() const;
  inline void clear_page_name();
  static const int kPageNameFieldNumber = 1;
  inline const ::std::string& page_name() const;
  inline void set_page_name(const ::std::string& value);
  inline void set_page_name(const char* value);
  inline void set_page_name(const void* value, size_t size);
  inline ::std::string* mutable_page_name();
  inline ::std::string* release_page_name();
  inline void set_allocated_page_name(::std::string* page_name);

  // optional int32 page_keeptime = 2;
  inline bool has_page_keeptime() const;
  inline void clear_page_keeptime();
  static const int kPageKeeptimeFieldNumber = 2;
  inline ::google::protobuf::int32 page_keeptime() const;
  inline void set_page_keeptime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_page)
 private:
  inline void set_has_page_name();
  inline void clear_has_page_name();
  inline void set_has_page_keeptime();
  inline void clear_has_page_keeptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* page_name_;
  ::google::protobuf::int32 page_keeptime_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_page* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_fund_running_water : public ::google::protobuf::Message {
 public:
  opt_trace_fund_running_water();
  virtual ~opt_trace_fund_running_water();

  opt_trace_fund_running_water(const opt_trace_fund_running_water& from);

  inline opt_trace_fund_running_water& operator=(const opt_trace_fund_running_water& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_fund_running_water& default_instance();

  void Swap(opt_trace_fund_running_water* other);

  // implements Message ----------------------------------------------

  opt_trace_fund_running_water* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_fund_running_water& from);
  void MergeFrom(const opt_trace_fund_running_water& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes frw_title = 1;
  inline bool has_frw_title() const;
  inline void clear_frw_title();
  static const int kFrwTitleFieldNumber = 1;
  inline const ::std::string& frw_title() const;
  inline void set_frw_title(const ::std::string& value);
  inline void set_frw_title(const char* value);
  inline void set_frw_title(const void* value, size_t size);
  inline ::std::string* mutable_frw_title();
  inline ::std::string* release_frw_title();
  inline void set_allocated_frw_title(::std::string* frw_title);

  // optional int32 frw_type = 2;
  inline bool has_frw_type() const;
  inline void clear_frw_type();
  static const int kFrwTypeFieldNumber = 2;
  inline ::google::protobuf::int32 frw_type() const;
  inline void set_frw_type(::google::protobuf::int32 value);

  // optional float frw_amount = 3;
  inline bool has_frw_amount() const;
  inline void clear_frw_amount();
  static const int kFrwAmountFieldNumber = 3;
  inline float frw_amount() const;
  inline void set_frw_amount(float value);

  // optional int32 frw_status = 4;
  inline bool has_frw_status() const;
  inline void clear_frw_status();
  static const int kFrwStatusFieldNumber = 4;
  inline ::google::protobuf::int32 frw_status() const;
  inline void set_frw_status(::google::protobuf::int32 value);

  // optional bytes frw_desc = 5;
  inline bool has_frw_desc() const;
  inline void clear_frw_desc();
  static const int kFrwDescFieldNumber = 5;
  inline const ::std::string& frw_desc() const;
  inline void set_frw_desc(const ::std::string& value);
  inline void set_frw_desc(const char* value);
  inline void set_frw_desc(const void* value, size_t size);
  inline ::std::string* mutable_frw_desc();
  inline ::std::string* release_frw_desc();
  inline void set_allocated_frw_desc(::std::string* frw_desc);

  // optional bytes frw_updatetime = 6;
  inline bool has_frw_updatetime() const;
  inline void clear_frw_updatetime();
  static const int kFrwUpdatetimeFieldNumber = 6;
  inline const ::std::string& frw_updatetime() const;
  inline void set_frw_updatetime(const ::std::string& value);
  inline void set_frw_updatetime(const char* value);
  inline void set_frw_updatetime(const void* value, size_t size);
  inline ::std::string* mutable_frw_updatetime();
  inline ::std::string* release_frw_updatetime();
  inline void set_allocated_frw_updatetime(::std::string* frw_updatetime);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_fund_running_water)
 private:
  inline void set_has_frw_title();
  inline void clear_has_frw_title();
  inline void set_has_frw_type();
  inline void clear_has_frw_type();
  inline void set_has_frw_amount();
  inline void clear_has_frw_amount();
  inline void set_has_frw_status();
  inline void clear_has_frw_status();
  inline void set_has_frw_desc();
  inline void clear_has_frw_desc();
  inline void set_has_frw_updatetime();
  inline void clear_has_frw_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* frw_title_;
  ::google::protobuf::int32 frw_type_;
  float frw_amount_;
  ::std::string* frw_desc_;
  ::std::string* frw_updatetime_;
  ::google::protobuf::int32 frw_status_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_fund_running_water* default_instance_;
};
// -------------------------------------------------------------------

class opt_trace_material : public ::google::protobuf::Message {
 public:
  opt_trace_material();
  virtual ~opt_trace_material();

  opt_trace_material(const opt_trace_material& from);

  inline opt_trace_material& operator=(const opt_trace_material& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_trace_material& default_instance();

  void Swap(opt_trace_material* other);

  // implements Message ----------------------------------------------

  opt_trace_material* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_trace_material& from);
  void MergeFrom(const opt_trace_material& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 UserTypeId = 2;
  inline bool has_usertypeid() const;
  inline void clear_usertypeid();
  static const int kUserTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 usertypeid() const;
  inline void set_usertypeid(::google::protobuf::int32 value);

  // optional bytes MaritalStatus = 3;
  inline bool has_maritalstatus() const;
  inline void clear_maritalstatus();
  static const int kMaritalStatusFieldNumber = 3;
  inline const ::std::string& maritalstatus() const;
  inline void set_maritalstatus(const ::std::string& value);
  inline void set_maritalstatus(const char* value);
  inline void set_maritalstatus(const void* value, size_t size);
  inline ::std::string* mutable_maritalstatus();
  inline ::std::string* release_maritalstatus();
  inline void set_allocated_maritalstatus(::std::string* maritalstatus);

  // optional bytes HavingChildren = 4;
  inline bool has_havingchildren() const;
  inline void clear_havingchildren();
  static const int kHavingChildrenFieldNumber = 4;
  inline const ::std::string& havingchildren() const;
  inline void set_havingchildren(const ::std::string& value);
  inline void set_havingchildren(const char* value);
  inline void set_havingchildren(const void* value, size_t size);
  inline ::std::string* mutable_havingchildren();
  inline ::std::string* release_havingchildren();
  inline void set_allocated_havingchildren(::std::string* havingchildren);

  // optional bytes LivingType = 5;
  inline bool has_livingtype() const;
  inline void clear_livingtype();
  static const int kLivingTypeFieldNumber = 5;
  inline const ::std::string& livingtype() const;
  inline void set_livingtype(const ::std::string& value);
  inline void set_livingtype(const char* value);
  inline void set_livingtype(const void* value, size_t size);
  inline ::std::string* mutable_livingtype();
  inline ::std::string* release_livingtype();
  inline void set_allocated_livingtype(::std::string* livingtype);

  // optional bytes LivingProvince = 6;
  inline bool has_livingprovince() const;
  inline void clear_livingprovince();
  static const int kLivingProvinceFieldNumber = 6;
  inline const ::std::string& livingprovince() const;
  inline void set_livingprovince(const ::std::string& value);
  inline void set_livingprovince(const char* value);
  inline void set_livingprovince(const void* value, size_t size);
  inline ::std::string* mutable_livingprovince();
  inline ::std::string* release_livingprovince();
  inline void set_allocated_livingprovince(::std::string* livingprovince);

  // optional bytes LivingCity = 7;
  inline bool has_livingcity() const;
  inline void clear_livingcity();
  static const int kLivingCityFieldNumber = 7;
  inline const ::std::string& livingcity() const;
  inline void set_livingcity(const ::std::string& value);
  inline void set_livingcity(const char* value);
  inline void set_livingcity(const void* value, size_t size);
  inline ::std::string* mutable_livingcity();
  inline ::std::string* release_livingcity();
  inline void set_allocated_livingcity(::std::string* livingcity);

  // optional bytes LivingArea = 8;
  inline bool has_livingarea() const;
  inline void clear_livingarea();
  static const int kLivingAreaFieldNumber = 8;
  inline const ::std::string& livingarea() const;
  inline void set_livingarea(const ::std::string& value);
  inline void set_livingarea(const char* value);
  inline void set_livingarea(const void* value, size_t size);
  inline ::std::string* mutable_livingarea();
  inline ::std::string* release_livingarea();
  inline void set_allocated_livingarea(::std::string* livingarea);

  // optional bytes LivingAddress = 9;
  inline bool has_livingaddress() const;
  inline void clear_livingaddress();
  static const int kLivingAddressFieldNumber = 9;
  inline const ::std::string& livingaddress() const;
  inline void set_livingaddress(const ::std::string& value);
  inline void set_livingaddress(const char* value);
  inline void set_livingaddress(const void* value, size_t size);
  inline ::std::string* mutable_livingaddress();
  inline ::std::string* release_livingaddress();
  inline void set_allocated_livingaddress(::std::string* livingaddress);

  // optional bytes WorkCompany = 10;
  inline bool has_workcompany() const;
  inline void clear_workcompany();
  static const int kWorkCompanyFieldNumber = 10;
  inline const ::std::string& workcompany() const;
  inline void set_workcompany(const ::std::string& value);
  inline void set_workcompany(const char* value);
  inline void set_workcompany(const void* value, size_t size);
  inline ::std::string* mutable_workcompany();
  inline ::std::string* release_workcompany();
  inline void set_allocated_workcompany(::std::string* workcompany);

  // optional bytes YearIncomeScope = 11;
  inline bool has_yearincomescope() const;
  inline void clear_yearincomescope();
  static const int kYearIncomeScopeFieldNumber = 11;
  inline const ::std::string& yearincomescope() const;
  inline void set_yearincomescope(const ::std::string& value);
  inline void set_yearincomescope(const char* value);
  inline void set_yearincomescope(const void* value, size_t size);
  inline ::std::string* mutable_yearincomescope();
  inline ::std::string* release_yearincomescope();
  inline void set_allocated_yearincomescope(::std::string* yearincomescope);

  // optional bytes FamilyProvince = 12;
  inline bool has_familyprovince() const;
  inline void clear_familyprovince();
  static const int kFamilyProvinceFieldNumber = 12;
  inline const ::std::string& familyprovince() const;
  inline void set_familyprovince(const ::std::string& value);
  inline void set_familyprovince(const char* value);
  inline void set_familyprovince(const void* value, size_t size);
  inline ::std::string* mutable_familyprovince();
  inline ::std::string* release_familyprovince();
  inline void set_allocated_familyprovince(::std::string* familyprovince);

  // optional bytes FamilyCity = 13;
  inline bool has_familycity() const;
  inline void clear_familycity();
  static const int kFamilyCityFieldNumber = 13;
  inline const ::std::string& familycity() const;
  inline void set_familycity(const ::std::string& value);
  inline void set_familycity(const char* value);
  inline void set_familycity(const void* value, size_t size);
  inline ::std::string* mutable_familycity();
  inline ::std::string* release_familycity();
  inline void set_allocated_familycity(::std::string* familycity);

  // optional bytes FamilyArea = 14;
  inline bool has_familyarea() const;
  inline void clear_familyarea();
  static const int kFamilyAreaFieldNumber = 14;
  inline const ::std::string& familyarea() const;
  inline void set_familyarea(const ::std::string& value);
  inline void set_familyarea(const char* value);
  inline void set_familyarea(const void* value, size_t size);
  inline ::std::string* mutable_familyarea();
  inline ::std::string* release_familyarea();
  inline void set_allocated_familyarea(::std::string* familyarea);

  // optional bytes FamilyAddress = 15;
  inline bool has_familyaddress() const;
  inline void clear_familyaddress();
  static const int kFamilyAddressFieldNumber = 15;
  inline const ::std::string& familyaddress() const;
  inline void set_familyaddress(const ::std::string& value);
  inline void set_familyaddress(const char* value);
  inline void set_familyaddress(const void* value, size_t size);
  inline ::std::string* mutable_familyaddress();
  inline ::std::string* release_familyaddress();
  inline void set_allocated_familyaddress(::std::string* familyaddress);

  // optional bytes FamilyName = 16;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 16;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const void* value, size_t size);
  inline ::std::string* mutable_familyname();
  inline ::std::string* release_familyname();
  inline void set_allocated_familyname(::std::string* familyname);

  // optional bytes FamilyContactNo = 17;
  inline bool has_familycontactno() const;
  inline void clear_familycontactno();
  static const int kFamilyContactNoFieldNumber = 17;
  inline const ::std::string& familycontactno() const;
  inline void set_familycontactno(const ::std::string& value);
  inline void set_familycontactno(const char* value);
  inline void set_familycontactno(const void* value, size_t size);
  inline ::std::string* mutable_familycontactno();
  inline ::std::string* release_familycontactno();
  inline void set_allocated_familycontactno(::std::string* familycontactno);

  // optional bytes FamilyRelation = 18;
  inline bool has_familyrelation() const;
  inline void clear_familyrelation();
  static const int kFamilyRelationFieldNumber = 18;
  inline const ::std::string& familyrelation() const;
  inline void set_familyrelation(const ::std::string& value);
  inline void set_familyrelation(const char* value);
  inline void set_familyrelation(const void* value, size_t size);
  inline ::std::string* mutable_familyrelation();
  inline ::std::string* release_familyrelation();
  inline void set_allocated_familyrelation(::std::string* familyrelation);

  // optional bytes StudentSchool = 19;
  inline bool has_studentschool() const;
  inline void clear_studentschool();
  static const int kStudentSchoolFieldNumber = 19;
  inline const ::std::string& studentschool() const;
  inline void set_studentschool(const ::std::string& value);
  inline void set_studentschool(const char* value);
  inline void set_studentschool(const void* value, size_t size);
  inline ::std::string* mutable_studentschool();
  inline ::std::string* release_studentschool();
  inline void set_allocated_studentschool(::std::string* studentschool);

  // optional bytes AttendingCollege = 20;
  inline bool has_attendingcollege() const;
  inline void clear_attendingcollege();
  static const int kAttendingCollegeFieldNumber = 20;
  inline const ::std::string& attendingcollege() const;
  inline void set_attendingcollege(const ::std::string& value);
  inline void set_attendingcollege(const char* value);
  inline void set_attendingcollege(const void* value, size_t size);
  inline ::std::string* mutable_attendingcollege();
  inline ::std::string* release_attendingcollege();
  inline void set_allocated_attendingcollege(::std::string* attendingcollege);

  // optional bytes StudentProfessional = 21;
  inline bool has_studentprofessional() const;
  inline void clear_studentprofessional();
  static const int kStudentProfessionalFieldNumber = 21;
  inline const ::std::string& studentprofessional() const;
  inline void set_studentprofessional(const ::std::string& value);
  inline void set_studentprofessional(const char* value);
  inline void set_studentprofessional(const void* value, size_t size);
  inline ::std::string* mutable_studentprofessional();
  inline ::std::string* release_studentprofessional();
  inline void set_allocated_studentprofessional(::std::string* studentprofessional);

  // optional bytes AttendingClass = 22;
  inline bool has_attendingclass() const;
  inline void clear_attendingclass();
  static const int kAttendingClassFieldNumber = 22;
  inline const ::std::string& attendingclass() const;
  inline void set_attendingclass(const ::std::string& value);
  inline void set_attendingclass(const char* value);
  inline void set_attendingclass(const void* value, size_t size);
  inline ::std::string* mutable_attendingclass();
  inline ::std::string* release_attendingclass();
  inline void set_allocated_attendingclass(::std::string* attendingclass);

  // optional bytes Email = 23;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 23;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const void* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional bytes CompanyProvince = 24;
  inline bool has_companyprovince() const;
  inline void clear_companyprovince();
  static const int kCompanyProvinceFieldNumber = 24;
  inline const ::std::string& companyprovince() const;
  inline void set_companyprovince(const ::std::string& value);
  inline void set_companyprovince(const char* value);
  inline void set_companyprovince(const void* value, size_t size);
  inline ::std::string* mutable_companyprovince();
  inline ::std::string* release_companyprovince();
  inline void set_allocated_companyprovince(::std::string* companyprovince);

  // optional bytes CompanyCity = 25;
  inline bool has_companycity() const;
  inline void clear_companycity();
  static const int kCompanyCityFieldNumber = 25;
  inline const ::std::string& companycity() const;
  inline void set_companycity(const ::std::string& value);
  inline void set_companycity(const char* value);
  inline void set_companycity(const void* value, size_t size);
  inline ::std::string* mutable_companycity();
  inline ::std::string* release_companycity();
  inline void set_allocated_companycity(::std::string* companycity);

  // optional bytes CompanyArea = 26;
  inline bool has_companyarea() const;
  inline void clear_companyarea();
  static const int kCompanyAreaFieldNumber = 26;
  inline const ::std::string& companyarea() const;
  inline void set_companyarea(const ::std::string& value);
  inline void set_companyarea(const char* value);
  inline void set_companyarea(const void* value, size_t size);
  inline ::std::string* mutable_companyarea();
  inline ::std::string* release_companyarea();
  inline void set_allocated_companyarea(::std::string* companyarea);

  // optional bytes CompanyAddress = 27;
  inline bool has_companyaddress() const;
  inline void clear_companyaddress();
  static const int kCompanyAddressFieldNumber = 27;
  inline const ::std::string& companyaddress() const;
  inline void set_companyaddress(const ::std::string& value);
  inline void set_companyaddress(const char* value);
  inline void set_companyaddress(const void* value, size_t size);
  inline ::std::string* mutable_companyaddress();
  inline ::std::string* release_companyaddress();
  inline void set_allocated_companyaddress(::std::string* companyaddress);

  // optional bytes CompanyPhone = 28;
  inline bool has_companyphone() const;
  inline void clear_companyphone();
  static const int kCompanyPhoneFieldNumber = 28;
  inline const ::std::string& companyphone() const;
  inline void set_companyphone(const ::std::string& value);
  inline void set_companyphone(const char* value);
  inline void set_companyphone(const void* value, size_t size);
  inline ::std::string* mutable_companyphone();
  inline ::std::string* release_companyphone();
  inline void set_allocated_companyphone(::std::string* companyphone);

  // optional bytes Department = 29;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 29;
  inline const ::std::string& department() const;
  inline void set_department(const ::std::string& value);
  inline void set_department(const char* value);
  inline void set_department(const void* value, size_t size);
  inline ::std::string* mutable_department();
  inline ::std::string* release_department();
  inline void set_allocated_department(::std::string* department);

  // optional bytes Position = 30;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 30;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const void* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional bytes WorkYear = 31;
  inline bool has_workyear() const;
  inline void clear_workyear();
  static const int kWorkYearFieldNumber = 31;
  inline const ::std::string& workyear() const;
  inline void set_workyear(const ::std::string& value);
  inline void set_workyear(const char* value);
  inline void set_workyear(const void* value, size_t size);
  inline ::std::string* mutable_workyear();
  inline ::std::string* release_workyear();
  inline void set_allocated_workyear(::std::string* workyear);

  // repeated .UBAS_PageView.contact_person ContactPerson = 32;
  inline int contactperson_size() const;
  inline void clear_contactperson();
  static const int kContactPersonFieldNumber = 32;
  inline const ::UBAS_PageView::contact_person& contactperson(int index) const;
  inline ::UBAS_PageView::contact_person* mutable_contactperson(int index);
  inline ::UBAS_PageView::contact_person* add_contactperson();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::contact_person >&
      contactperson() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::contact_person >*
      mutable_contactperson();

  // optional .UBAS_PageView.estate estate_list = 33;
  inline bool has_estate_list() const;
  inline void clear_estate_list();
  static const int kEstateListFieldNumber = 33;
  inline const ::UBAS_PageView::estate& estate_list() const;
  inline ::UBAS_PageView::estate* mutable_estate_list();
  inline ::UBAS_PageView::estate* release_estate_list();
  inline void set_allocated_estate_list(::UBAS_PageView::estate* estate_list);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.opt_trace_material)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_usertypeid();
  inline void clear_has_usertypeid();
  inline void set_has_maritalstatus();
  inline void clear_has_maritalstatus();
  inline void set_has_havingchildren();
  inline void clear_has_havingchildren();
  inline void set_has_livingtype();
  inline void clear_has_livingtype();
  inline void set_has_livingprovince();
  inline void clear_has_livingprovince();
  inline void set_has_livingcity();
  inline void clear_has_livingcity();
  inline void set_has_livingarea();
  inline void clear_has_livingarea();
  inline void set_has_livingaddress();
  inline void clear_has_livingaddress();
  inline void set_has_workcompany();
  inline void clear_has_workcompany();
  inline void set_has_yearincomescope();
  inline void clear_has_yearincomescope();
  inline void set_has_familyprovince();
  inline void clear_has_familyprovince();
  inline void set_has_familycity();
  inline void clear_has_familycity();
  inline void set_has_familyarea();
  inline void clear_has_familyarea();
  inline void set_has_familyaddress();
  inline void clear_has_familyaddress();
  inline void set_has_familyname();
  inline void clear_has_familyname();
  inline void set_has_familycontactno();
  inline void clear_has_familycontactno();
  inline void set_has_familyrelation();
  inline void clear_has_familyrelation();
  inline void set_has_studentschool();
  inline void clear_has_studentschool();
  inline void set_has_attendingcollege();
  inline void clear_has_attendingcollege();
  inline void set_has_studentprofessional();
  inline void clear_has_studentprofessional();
  inline void set_has_attendingclass();
  inline void clear_has_attendingclass();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_companyprovince();
  inline void clear_has_companyprovince();
  inline void set_has_companycity();
  inline void clear_has_companycity();
  inline void set_has_companyarea();
  inline void clear_has_companyarea();
  inline void set_has_companyaddress();
  inline void clear_has_companyaddress();
  inline void set_has_companyphone();
  inline void clear_has_companyphone();
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_workyear();
  inline void clear_has_workyear();
  inline void set_has_estate_list();
  inline void clear_has_estate_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 usertypeid_;
  ::std::string* maritalstatus_;
  ::std::string* havingchildren_;
  ::std::string* livingtype_;
  ::std::string* livingprovince_;
  ::std::string* livingcity_;
  ::std::string* livingarea_;
  ::std::string* livingaddress_;
  ::std::string* workcompany_;
  ::std::string* yearincomescope_;
  ::std::string* familyprovince_;
  ::std::string* familycity_;
  ::std::string* familyarea_;
  ::std::string* familyaddress_;
  ::std::string* familyname_;
  ::std::string* familycontactno_;
  ::std::string* familyrelation_;
  ::std::string* studentschool_;
  ::std::string* attendingcollege_;
  ::std::string* studentprofessional_;
  ::std::string* attendingclass_;
  ::std::string* email_;
  ::std::string* companyprovince_;
  ::std::string* companycity_;
  ::std::string* companyarea_;
  ::std::string* companyaddress_;
  ::std::string* companyphone_;
  ::std::string* department_;
  ::std::string* position_;
  ::std::string* workyear_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::contact_person > contactperson_;
  ::UBAS_PageView::estate* estate_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static opt_trace_material* default_instance_;
};
// -------------------------------------------------------------------

class contact_person : public ::google::protobuf::Message {
 public:
  contact_person();
  virtual ~contact_person();

  contact_person(const contact_person& from);

  inline contact_person& operator=(const contact_person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const contact_person& default_instance();

  void Swap(contact_person* other);

  // implements Message ----------------------------------------------

  contact_person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const contact_person& from);
  void MergeFrom(const contact_person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes Phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const void* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional bytes Relation = 3;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 3;
  inline const ::std::string& relation() const;
  inline void set_relation(const ::std::string& value);
  inline void set_relation(const char* value);
  inline void set_relation(const void* value, size_t size);
  inline ::std::string* mutable_relation();
  inline ::std::string* release_relation();
  inline void set_allocated_relation(::std::string* relation);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.contact_person)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_relation();
  inline void clear_has_relation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* phone_;
  ::std::string* relation_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static contact_person* default_instance_;
};
// -------------------------------------------------------------------

class estate : public ::google::protobuf::Message {
 public:
  estate();
  virtual ~estate();

  estate(const estate& from);

  inline estate& operator=(const estate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const estate& default_instance();

  void Swap(estate* other);

  // implements Message ----------------------------------------------

  estate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const estate& from);
  void MergeFrom(const estate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EstateType = 1;
  inline bool has_estatetype() const;
  inline void clear_estatetype();
  static const int kEstateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 estatetype() const;
  inline void set_estatetype(::google::protobuf::int32 value);

  // repeated .UBAS_PageView.estate_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::UBAS_PageView::estate_info& infos(int index) const;
  inline ::UBAS_PageView::estate_info* mutable_infos(int index);
  inline ::UBAS_PageView::estate_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::estate_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::estate_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:UBAS_PageView.estate)
 private:
  inline void set_has_estatetype();
  inline void clear_has_estatetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::estate_info > infos_;
  ::google::protobuf::int32 estatetype_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static estate* default_instance_;
};
// -------------------------------------------------------------------

class estate_info : public ::google::protobuf::Message {
 public:
  estate_info();
  virtual ~estate_info();

  estate_info(const estate_info& from);

  inline estate_info& operator=(const estate_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const estate_info& default_instance();

  void Swap(estate_info* other);

  // implements Message ----------------------------------------------

  estate_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const estate_info& from);
  void MergeFrom(const estate_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PurchaseYear = 1;
  inline bool has_purchaseyear() const;
  inline void clear_purchaseyear();
  static const int kPurchaseYearFieldNumber = 1;
  inline const ::std::string& purchaseyear() const;
  inline void set_purchaseyear(const ::std::string& value);
  inline void set_purchaseyear(const char* value);
  inline void set_purchaseyear(const void* value, size_t size);
  inline ::std::string* mutable_purchaseyear();
  inline ::std::string* release_purchaseyear();
  inline void set_allocated_purchaseyear(::std::string* purchaseyear);

  // optional bytes Photo = 2;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 2;
  inline const ::std::string& photo() const;
  inline void set_photo(const ::std::string& value);
  inline void set_photo(const char* value);
  inline void set_photo(const void* value, size_t size);
  inline ::std::string* mutable_photo();
  inline ::std::string* release_photo();
  inline void set_allocated_photo(::std::string* photo);

  // optional int32 SourceType = 3;
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 3;
  inline ::google::protobuf::int32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::int32 value);

  // optional float MonthAvg = 4;
  inline bool has_monthavg() const;
  inline void clear_monthavg();
  static const int kMonthAvgFieldNumber = 4;
  inline float monthavg() const;
  inline void set_monthavg(float value);

  // optional bytes HouseType = 5;
  inline bool has_housetype() const;
  inline void clear_housetype();
  static const int kHouseTypeFieldNumber = 5;
  inline const ::std::string& housetype() const;
  inline void set_housetype(const ::std::string& value);
  inline void set_housetype(const char* value);
  inline void set_housetype(const void* value, size_t size);
  inline ::std::string* mutable_housetype();
  inline ::std::string* release_housetype();
  inline void set_allocated_housetype(::std::string* housetype);

  // optional bytes HouseProvince = 6;
  inline bool has_houseprovince() const;
  inline void clear_houseprovince();
  static const int kHouseProvinceFieldNumber = 6;
  inline const ::std::string& houseprovince() const;
  inline void set_houseprovince(const ::std::string& value);
  inline void set_houseprovince(const char* value);
  inline void set_houseprovince(const void* value, size_t size);
  inline ::std::string* mutable_houseprovince();
  inline ::std::string* release_houseprovince();
  inline void set_allocated_houseprovince(::std::string* houseprovince);

  // optional bytes HouseCity = 7;
  inline bool has_housecity() const;
  inline void clear_housecity();
  static const int kHouseCityFieldNumber = 7;
  inline const ::std::string& housecity() const;
  inline void set_housecity(const ::std::string& value);
  inline void set_housecity(const char* value);
  inline void set_housecity(const void* value, size_t size);
  inline ::std::string* mutable_housecity();
  inline ::std::string* release_housecity();
  inline void set_allocated_housecity(::std::string* housecity);

  // optional bytes HouseArea = 8;
  inline bool has_housearea() const;
  inline void clear_housearea();
  static const int kHouseAreaFieldNumber = 8;
  inline const ::std::string& housearea() const;
  inline void set_housearea(const ::std::string& value);
  inline void set_housearea(const char* value);
  inline void set_housearea(const void* value, size_t size);
  inline ::std::string* mutable_housearea();
  inline ::std::string* release_housearea();
  inline void set_allocated_housearea(::std::string* housearea);

  // optional bytes HouseAddress = 9;
  inline bool has_houseaddress() const;
  inline void clear_houseaddress();
  static const int kHouseAddressFieldNumber = 9;
  inline const ::std::string& houseaddress() const;
  inline void set_houseaddress(const ::std::string& value);
  inline void set_houseaddress(const char* value);
  inline void set_houseaddress(const void* value, size_t size);
  inline ::std::string* mutable_houseaddress();
  inline ::std::string* release_houseaddress();
  inline void set_allocated_houseaddress(::std::string* houseaddress);

  // optional bytes HouseSpace = 10;
  inline bool has_housespace() const;
  inline void clear_housespace();
  static const int kHouseSpaceFieldNumber = 10;
  inline const ::std::string& housespace() const;
  inline void set_housespace(const ::std::string& value);
  inline void set_housespace(const char* value);
  inline void set_housespace(const void* value, size_t size);
  inline ::std::string* mutable_housespace();
  inline ::std::string* release_housespace();
  inline void set_allocated_housespace(::std::string* housespace);

  // optional int32 HouseValue = 11;
  inline bool has_housevalue() const;
  inline void clear_housevalue();
  static const int kHouseValueFieldNumber = 11;
  inline ::google::protobuf::int32 housevalue() const;
  inline void set_housevalue(::google::protobuf::int32 value);

  // optional int32 HouseLoan = 12;
  inline bool has_houseloan() const;
  inline void clear_houseloan();
  static const int kHouseLoanFieldNumber = 12;
  inline ::google::protobuf::int32 houseloan() const;
  inline void set_houseloan(::google::protobuf::int32 value);

  // optional bytes CarNo = 13;
  inline bool has_carno() const;
  inline void clear_carno();
  static const int kCarNoFieldNumber = 13;
  inline const ::std::string& carno() const;
  inline void set_carno(const ::std::string& value);
  inline void set_carno(const char* value);
  inline void set_carno(const void* value, size_t size);
  inline ::std::string* mutable_carno();
  inline ::std::string* release_carno();
  inline void set_allocated_carno(::std::string* carno);

  // optional bytes CarType = 14;
  inline bool has_cartype() const;
  inline void clear_cartype();
  static const int kCarTypeFieldNumber = 14;
  inline const ::std::string& cartype() const;
  inline void set_cartype(const ::std::string& value);
  inline void set_cartype(const char* value);
  inline void set_cartype(const void* value, size_t size);
  inline ::std::string* mutable_cartype();
  inline ::std::string* release_cartype();
  inline void set_allocated_cartype(::std::string* cartype);

  // optional int32 CarValue = 15;
  inline bool has_carvalue() const;
  inline void clear_carvalue();
  static const int kCarValueFieldNumber = 15;
  inline ::google::protobuf::int32 carvalue() const;
  inline void set_carvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.estate_info)
 private:
  inline void set_has_purchaseyear();
  inline void clear_has_purchaseyear();
  inline void set_has_photo();
  inline void clear_has_photo();
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();
  inline void set_has_monthavg();
  inline void clear_has_monthavg();
  inline void set_has_housetype();
  inline void clear_has_housetype();
  inline void set_has_houseprovince();
  inline void clear_has_houseprovince();
  inline void set_has_housecity();
  inline void clear_has_housecity();
  inline void set_has_housearea();
  inline void clear_has_housearea();
  inline void set_has_houseaddress();
  inline void clear_has_houseaddress();
  inline void set_has_housespace();
  inline void clear_has_housespace();
  inline void set_has_housevalue();
  inline void clear_has_housevalue();
  inline void set_has_houseloan();
  inline void clear_has_houseloan();
  inline void set_has_carno();
  inline void clear_has_carno();
  inline void set_has_cartype();
  inline void clear_has_cartype();
  inline void set_has_carvalue();
  inline void clear_has_carvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* purchaseyear_;
  ::std::string* photo_;
  ::google::protobuf::int32 sourcetype_;
  float monthavg_;
  ::std::string* housetype_;
  ::std::string* houseprovince_;
  ::std::string* housecity_;
  ::std::string* housearea_;
  ::std::string* houseaddress_;
  ::std::string* housespace_;
  ::google::protobuf::int32 housevalue_;
  ::google::protobuf::int32 houseloan_;
  ::std::string* carno_;
  ::std::string* cartype_;
  ::google::protobuf::int32 carvalue_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static estate_info* default_instance_;
};
// -------------------------------------------------------------------

class verify_trace : public ::google::protobuf::Message {
 public:
  verify_trace();
  virtual ~verify_trace();

  verify_trace(const verify_trace& from);

  inline verify_trace& operator=(const verify_trace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_trace& default_instance();

  void Swap(verify_trace* other);

  // implements Message ----------------------------------------------

  verify_trace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_trace& from);
  void MergeFrom(const verify_trace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ApplyType = 1;
  inline bool has_applytype() const;
  inline void clear_applytype();
  static const int kApplyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 applytype() const;
  inline void set_applytype(::google::protobuf::int32 value);

  // optional int32 UserTypeId = 2;
  inline bool has_usertypeid() const;
  inline void clear_usertypeid();
  static const int kUserTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 usertypeid() const;
  inline void set_usertypeid(::google::protobuf::int32 value);

  // optional int32 DegreeType = 3;
  inline bool has_degreetype() const;
  inline void clear_degreetype();
  static const int kDegreeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 degreetype() const;
  inline void set_degreetype(::google::protobuf::int32 value);

  // optional bytes GraduateSchool = 4;
  inline bool has_graduateschool() const;
  inline void clear_graduateschool();
  static const int kGraduateSchoolFieldNumber = 4;
  inline const ::std::string& graduateschool() const;
  inline void set_graduateschool(const ::std::string& value);
  inline void set_graduateschool(const char* value);
  inline void set_graduateschool(const void* value, size_t size);
  inline ::std::string* mutable_graduateschool();
  inline ::std::string* release_graduateschool();
  inline void set_allocated_graduateschool(::std::string* graduateschool);

  // optional bytes GraduateDate = 5;
  inline bool has_graduatedate() const;
  inline void clear_graduatedate();
  static const int kGraduateDateFieldNumber = 5;
  inline const ::std::string& graduatedate() const;
  inline void set_graduatedate(const ::std::string& value);
  inline void set_graduatedate(const char* value);
  inline void set_graduatedate(const void* value, size_t size);
  inline ::std::string* mutable_graduatedate();
  inline ::std::string* release_graduatedate();
  inline void set_allocated_graduatedate(::std::string* graduatedate);

  // optional bytes Major = 6;
  inline bool has_major() const;
  inline void clear_major();
  static const int kMajorFieldNumber = 6;
  inline const ::std::string& major() const;
  inline void set_major(const ::std::string& value);
  inline void set_major(const char* value);
  inline void set_major(const void* value, size_t size);
  inline ::std::string* mutable_major();
  inline ::std::string* release_major();
  inline void set_allocated_major(::std::string* major);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.verify_trace)
 private:
  inline void set_has_applytype();
  inline void clear_has_applytype();
  inline void set_has_usertypeid();
  inline void clear_has_usertypeid();
  inline void set_has_degreetype();
  inline void clear_has_degreetype();
  inline void set_has_graduateschool();
  inline void clear_has_graduateschool();
  inline void set_has_graduatedate();
  inline void clear_has_graduatedate();
  inline void set_has_major();
  inline void clear_has_major();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 applytype_;
  ::google::protobuf::int32 usertypeid_;
  ::std::string* graduateschool_;
  ::std::string* graduatedate_;
  ::std::string* major_;
  ::google::protobuf::int32 degreetype_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static verify_trace* default_instance_;
};
// -------------------------------------------------------------------

class page_access_detail : public ::google::protobuf::Message {
 public:
  page_access_detail();
  virtual ~page_access_detail();

  page_access_detail(const page_access_detail& from);

  inline page_access_detail& operator=(const page_access_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_access_detail& default_instance();

  void Swap(page_access_detail* other);

  // implements Message ----------------------------------------------

  page_access_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_access_detail& from);
  void MergeFrom(const page_access_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes page_name = 1;
  inline bool has_page_name() const;
  inline void clear_page_name();
  static const int kPageNameFieldNumber = 1;
  inline const ::std::string& page_name() const;
  inline void set_page_name(const ::std::string& value);
  inline void set_page_name(const char* value);
  inline void set_page_name(const void* value, size_t size);
  inline ::std::string* mutable_page_name();
  inline ::std::string* release_page_name();
  inline void set_allocated_page_name(::std::string* page_name);

  // optional int32 access_count = 2;
  inline bool has_access_count() const;
  inline void clear_access_count();
  static const int kAccessCountFieldNumber = 2;
  inline ::google::protobuf::int32 access_count() const;
  inline void set_access_count(::google::protobuf::int32 value);

  // optional int32 duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional float access_count_rate = 4;
  inline bool has_access_count_rate() const;
  inline void clear_access_count_rate();
  static const int kAccessCountRateFieldNumber = 4;
  inline float access_count_rate() const;
  inline void set_access_count_rate(float value);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_access_detail)
 private:
  inline void set_has_page_name();
  inline void clear_has_page_name();
  inline void set_has_access_count();
  inline void clear_has_access_count();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_access_count_rate();
  inline void clear_has_access_count_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* page_name_;
  ::google::protobuf::int32 access_count_;
  ::google::protobuf::int32 duration_;
  float access_count_rate_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_access_detail* default_instance_;
};
// -------------------------------------------------------------------

class page_access_details_ask : public ::google::protobuf::Message {
 public:
  page_access_details_ask();
  virtual ~page_access_details_ask();

  page_access_details_ask(const page_access_details_ask& from);

  inline page_access_details_ask& operator=(const page_access_details_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_access_details_ask& default_instance();

  void Swap(page_access_details_ask* other);

  // implements Message ----------------------------------------------

  page_access_details_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_access_details_ask& from);
  void MergeFrom(const page_access_details_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional int32 numOfPage = 3;
  inline bool has_numofpage() const;
  inline void clear_numofpage();
  static const int kNumOfPageFieldNumber = 3;
  inline ::google::protobuf::int32 numofpage() const;
  inline void set_numofpage(::google::protobuf::int32 value);

  // optional int32 currPageNo = 4;
  inline bool has_currpageno() const;
  inline void clear_currpageno();
  static const int kCurrPageNoFieldNumber = 4;
  inline ::google::protobuf::int32 currpageno() const;
  inline void set_currpageno(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_access_details_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_numofpage();
  inline void clear_has_numofpage();
  inline void set_has_currpageno();
  inline void clear_has_currpageno();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::google::protobuf::int32 numofpage_;
  ::google::protobuf::int32 currpageno_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_access_details_ask* default_instance_;
};
// -------------------------------------------------------------------

class page_access_details_ans : public ::google::protobuf::Message {
 public:
  page_access_details_ans();
  virtual ~page_access_details_ans();

  page_access_details_ans(const page_access_details_ans& from);

  inline page_access_details_ans& operator=(const page_access_details_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const page_access_details_ans& default_instance();

  void Swap(page_access_details_ans* other);

  // implements Message ----------------------------------------------

  page_access_details_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const page_access_details_ans& from);
  void MergeFrom(const page_access_details_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_count = 1;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 1;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated .UBAS_PageView.page_access_detail details = 2;
  inline int details_size() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::UBAS_PageView::page_access_detail& details(int index) const;
  inline ::UBAS_PageView::page_access_detail* mutable_details(int index);
  inline ::UBAS_PageView::page_access_detail* add_details();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_detail >&
      details() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_detail >*
      mutable_details();

  // optional .common.result_info result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UBAS_PageView.page_access_details_ans)
 private:
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_detail > details_;
  ::common::result_info* result_;
  ::google::protobuf::int32 total_count_;
  friend void  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fPageView_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fPageView_2eproto();

  void InitAsDefaultInstance();
  static page_access_details_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// user_statistics_data

// optional bytes statistics_name = 1;
inline bool user_statistics_data::has_statistics_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_statistics_data::set_has_statistics_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_statistics_data::clear_has_statistics_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_statistics_data::clear_statistics_name() {
  if (statistics_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statistics_name_->clear();
  }
  clear_has_statistics_name();
}
inline const ::std::string& user_statistics_data::statistics_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.statistics_name)
  return *statistics_name_;
}
inline void user_statistics_data::set_statistics_name(const ::std::string& value) {
  set_has_statistics_name();
  if (statistics_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statistics_name_ = new ::std::string;
  }
  statistics_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.statistics_name)
}
inline void user_statistics_data::set_statistics_name(const char* value) {
  set_has_statistics_name();
  if (statistics_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statistics_name_ = new ::std::string;
  }
  statistics_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_statistics_data.statistics_name)
}
inline void user_statistics_data::set_statistics_name(const void* value, size_t size) {
  set_has_statistics_name();
  if (statistics_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statistics_name_ = new ::std::string;
  }
  statistics_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_statistics_data.statistics_name)
}
inline ::std::string* user_statistics_data::mutable_statistics_name() {
  set_has_statistics_name();
  if (statistics_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statistics_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_statistics_data.statistics_name)
  return statistics_name_;
}
inline ::std::string* user_statistics_data::release_statistics_name() {
  clear_has_statistics_name();
  if (statistics_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statistics_name_;
    statistics_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_statistics_data::set_allocated_statistics_name(::std::string* statistics_name) {
  if (statistics_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statistics_name_;
  }
  if (statistics_name) {
    set_has_statistics_name();
    statistics_name_ = statistics_name;
  } else {
    clear_has_statistics_name();
    statistics_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_statistics_data.statistics_name)
}

// optional int64 users_new_increased = 2;
inline bool user_statistics_data::has_users_new_increased() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_statistics_data::set_has_users_new_increased() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_statistics_data::clear_has_users_new_increased() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_statistics_data::clear_users_new_increased() {
  users_new_increased_ = GOOGLE_LONGLONG(0);
  clear_has_users_new_increased();
}
inline ::google::protobuf::int64 user_statistics_data::users_new_increased() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.users_new_increased)
  return users_new_increased_;
}
inline void user_statistics_data::set_users_new_increased(::google::protobuf::int64 value) {
  set_has_users_new_increased();
  users_new_increased_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.users_new_increased)
}

// optional float users_new_increased_rate = 3;
inline bool user_statistics_data::has_users_new_increased_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_statistics_data::set_has_users_new_increased_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_statistics_data::clear_has_users_new_increased_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_statistics_data::clear_users_new_increased_rate() {
  users_new_increased_rate_ = 0;
  clear_has_users_new_increased_rate();
}
inline float user_statistics_data::users_new_increased_rate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.users_new_increased_rate)
  return users_new_increased_rate_;
}
inline void user_statistics_data::set_users_new_increased_rate(float value) {
  set_has_users_new_increased_rate();
  users_new_increased_rate_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.users_new_increased_rate)
}

// optional int64 users_cumulant = 4;
inline bool user_statistics_data::has_users_cumulant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_statistics_data::set_has_users_cumulant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_statistics_data::clear_has_users_cumulant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_statistics_data::clear_users_cumulant() {
  users_cumulant_ = GOOGLE_LONGLONG(0);
  clear_has_users_cumulant();
}
inline ::google::protobuf::int64 user_statistics_data::users_cumulant() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.users_cumulant)
  return users_cumulant_;
}
inline void user_statistics_data::set_users_cumulant(::google::protobuf::int64 value) {
  set_has_users_cumulant();
  users_cumulant_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.users_cumulant)
}

// optional float users_cumulant_rate = 5;
inline bool user_statistics_data::has_users_cumulant_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_statistics_data::set_has_users_cumulant_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_statistics_data::clear_has_users_cumulant_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_statistics_data::clear_users_cumulant_rate() {
  users_cumulant_rate_ = 0;
  clear_has_users_cumulant_rate();
}
inline float user_statistics_data::users_cumulant_rate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.users_cumulant_rate)
  return users_cumulant_rate_;
}
inline void user_statistics_data::set_users_cumulant_rate(float value) {
  set_has_users_cumulant_rate();
  users_cumulant_rate_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.users_cumulant_rate)
}

// optional int64 active_users_num = 6;
inline bool user_statistics_data::has_active_users_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_statistics_data::set_has_active_users_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_statistics_data::clear_has_active_users_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_statistics_data::clear_active_users_num() {
  active_users_num_ = GOOGLE_LONGLONG(0);
  clear_has_active_users_num();
}
inline ::google::protobuf::int64 user_statistics_data::active_users_num() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.active_users_num)
  return active_users_num_;
}
inline void user_statistics_data::set_active_users_num(::google::protobuf::int64 value) {
  set_has_active_users_num();
  active_users_num_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.active_users_num)
}

// optional float active_users_num_rate = 7;
inline bool user_statistics_data::has_active_users_num_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_statistics_data::set_has_active_users_num_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_statistics_data::clear_has_active_users_num_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_statistics_data::clear_active_users_num_rate() {
  active_users_num_rate_ = 0;
  clear_has_active_users_num_rate();
}
inline float user_statistics_data::active_users_num_rate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_statistics_data.active_users_num_rate)
  return active_users_num_rate_;
}
inline void user_statistics_data::set_active_users_num_rate(float value) {
  set_has_active_users_num_rate();
  active_users_num_rate_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_statistics_data.active_users_num_rate)
}

// -------------------------------------------------------------------

// terminal_model_info_ask

// optional .UBAS_PageView.terminal_model_ask_type type = 1;
inline bool terminal_model_info_ask::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void terminal_model_info_ask::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void terminal_model_info_ask::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void terminal_model_info_ask::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::UBAS_PageView::terminal_model_ask_type terminal_model_info_ask::type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.type)
  return static_cast< ::UBAS_PageView::terminal_model_ask_type >(type_);
}
inline void terminal_model_info_ask::set_type(::UBAS_PageView::terminal_model_ask_type value) {
  assert(::UBAS_PageView::terminal_model_ask_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.type)
}

// optional .UBAS_PageView.mobile_os_type os_type = 2;
inline bool terminal_model_info_ask::has_os_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void terminal_model_info_ask::set_has_os_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void terminal_model_info_ask::clear_has_os_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void terminal_model_info_ask::clear_os_type() {
  os_type_ = 0;
  clear_has_os_type();
}
inline ::UBAS_PageView::mobile_os_type terminal_model_info_ask::os_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.os_type)
  return static_cast< ::UBAS_PageView::mobile_os_type >(os_type_);
}
inline void terminal_model_info_ask::set_os_type(::UBAS_PageView::mobile_os_type value) {
  assert(::UBAS_PageView::mobile_os_type_IsValid(value));
  set_has_os_type();
  os_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.os_type)
}

// optional bytes start_time = 3;
inline bool terminal_model_info_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void terminal_model_info_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void terminal_model_info_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void terminal_model_info_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& terminal_model_info_ask::start_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.start_time)
  return *start_time_;
}
inline void terminal_model_info_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.start_time)
}
inline void terminal_model_info_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.terminal_model_info_ask.start_time)
}
inline void terminal_model_info_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.terminal_model_info_ask.start_time)
}
inline ::std::string* terminal_model_info_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.terminal_model_info_ask.start_time)
  return start_time_;
}
inline ::std::string* terminal_model_info_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void terminal_model_info_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.terminal_model_info_ask.start_time)
}

// optional bytes end_time = 4;
inline bool terminal_model_info_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void terminal_model_info_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void terminal_model_info_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void terminal_model_info_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& terminal_model_info_ask::end_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.end_time)
  return *end_time_;
}
inline void terminal_model_info_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.end_time)
}
inline void terminal_model_info_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.terminal_model_info_ask.end_time)
}
inline void terminal_model_info_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.terminal_model_info_ask.end_time)
}
inline ::std::string* terminal_model_info_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.terminal_model_info_ask.end_time)
  return end_time_;
}
inline ::std::string* terminal_model_info_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void terminal_model_info_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.terminal_model_info_ask.end_time)
}

// optional int32 page_num = 5;
inline bool terminal_model_info_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void terminal_model_info_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void terminal_model_info_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void terminal_model_info_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 terminal_model_info_ask::page_num() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.page_num)
  return page_num_;
}
inline void terminal_model_info_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.page_num)
}

// optional int32 cur_page = 6;
inline bool terminal_model_info_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void terminal_model_info_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000020u;
}
inline void terminal_model_info_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void terminal_model_info_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 terminal_model_info_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.cur_page)
  return cur_page_;
}
inline void terminal_model_info_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 7;
inline bool terminal_model_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void terminal_model_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000040u;
}
inline void terminal_model_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void terminal_model_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& terminal_model_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* terminal_model_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.terminal_model_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* terminal_model_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void terminal_model_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.terminal_model_info_ask.ask_header)
}

// optional int32 total_flag = 8;
inline bool terminal_model_info_ask::has_total_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void terminal_model_info_ask::set_has_total_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void terminal_model_info_ask::clear_has_total_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void terminal_model_info_ask::clear_total_flag() {
  total_flag_ = 0;
  clear_has_total_flag();
}
inline ::google::protobuf::int32 terminal_model_info_ask::total_flag() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ask.total_flag)
  return total_flag_;
}
inline void terminal_model_info_ask::set_total_flag(::google::protobuf::int32 value) {
  set_has_total_flag();
  total_flag_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ask.total_flag)
}

// -------------------------------------------------------------------

// terminal_model_info_ans

// optional .common.errorinfo error = 1;
inline bool terminal_model_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void terminal_model_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void terminal_model_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void terminal_model_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& terminal_model_info_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* terminal_model_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.terminal_model_info_ans.error)
  return error_;
}
inline ::common::errorinfo* terminal_model_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void terminal_model_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.terminal_model_info_ans.error)
}

// optional int32 total_number = 2;
inline bool terminal_model_info_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void terminal_model_info_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void terminal_model_info_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void terminal_model_info_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 terminal_model_info_ans::total_number() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ans.total_number)
  return total_number_;
}
inline void terminal_model_info_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.terminal_model_info_ans.total_number)
}

// repeated .UBAS_PageView.user_statistics_data statistics_data = 3;
inline int terminal_model_info_ans::statistics_data_size() const {
  return statistics_data_.size();
}
inline void terminal_model_info_ans::clear_statistics_data() {
  statistics_data_.Clear();
}
inline const ::UBAS_PageView::user_statistics_data& terminal_model_info_ans::statistics_data(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.terminal_model_info_ans.statistics_data)
  return statistics_data_.Get(index);
}
inline ::UBAS_PageView::user_statistics_data* terminal_model_info_ans::mutable_statistics_data(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.terminal_model_info_ans.statistics_data)
  return statistics_data_.Mutable(index);
}
inline ::UBAS_PageView::user_statistics_data* terminal_model_info_ans::add_statistics_data() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.terminal_model_info_ans.statistics_data)
  return statistics_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_statistics_data >&
terminal_model_info_ans::statistics_data() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.terminal_model_info_ans.statistics_data)
  return statistics_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_statistics_data >*
terminal_model_info_ans::mutable_statistics_data() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.terminal_model_info_ans.statistics_data)
  return &statistics_data_;
}

// -------------------------------------------------------------------

// step_business_statistics

// optional int32 step_number = 1;
inline bool step_business_statistics::has_step_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void step_business_statistics::set_has_step_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void step_business_statistics::clear_has_step_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void step_business_statistics::clear_step_number() {
  step_number_ = 0;
  clear_has_step_number();
}
inline ::google::protobuf::int32 step_business_statistics::step_number() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.step_business_statistics.step_number)
  return step_number_;
}
inline void step_business_statistics::set_step_number(::google::protobuf::int32 value) {
  set_has_step_number();
  step_number_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.step_business_statistics.step_number)
}

// optional int32 user_count = 2;
inline bool step_business_statistics::has_user_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void step_business_statistics::set_has_user_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void step_business_statistics::clear_has_user_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void step_business_statistics::clear_user_count() {
  user_count_ = 0;
  clear_has_user_count();
}
inline ::google::protobuf::int32 step_business_statistics::user_count() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.step_business_statistics.user_count)
  return user_count_;
}
inline void step_business_statistics::set_user_count(::google::protobuf::int32 value) {
  set_has_user_count();
  user_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.step_business_statistics.user_count)
}

// -------------------------------------------------------------------

// business_track_statistics_ask

// optional .common.common_ask_header ask_header = 1;
inline bool business_track_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void business_track_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void business_track_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void business_track_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& business_track_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* business_track_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.business_track_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* business_track_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void business_track_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.business_track_statistics_ask.ask_header)
}

// optional int32 ask_type = 2;
inline bool business_track_statistics_ask::has_ask_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void business_track_statistics_ask::set_has_ask_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void business_track_statistics_ask::clear_has_ask_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void business_track_statistics_ask::clear_ask_type() {
  ask_type_ = 0;
  clear_has_ask_type();
}
inline ::google::protobuf::int32 business_track_statistics_ask::ask_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ask.ask_type)
  return ask_type_;
}
inline void business_track_statistics_ask::set_ask_type(::google::protobuf::int32 value) {
  set_has_ask_type();
  ask_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.business_track_statistics_ask.ask_type)
}

// optional bytes start_time = 3;
inline bool business_track_statistics_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void business_track_statistics_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void business_track_statistics_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void business_track_statistics_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& business_track_statistics_ask::start_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ask.start_time)
  return *start_time_;
}
inline void business_track_statistics_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.business_track_statistics_ask.start_time)
}
inline void business_track_statistics_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.business_track_statistics_ask.start_time)
}
inline void business_track_statistics_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.business_track_statistics_ask.start_time)
}
inline ::std::string* business_track_statistics_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.business_track_statistics_ask.start_time)
  return start_time_;
}
inline ::std::string* business_track_statistics_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void business_track_statistics_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.business_track_statistics_ask.start_time)
}

// optional bytes end_time = 4;
inline bool business_track_statistics_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void business_track_statistics_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void business_track_statistics_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void business_track_statistics_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& business_track_statistics_ask::end_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ask.end_time)
  return *end_time_;
}
inline void business_track_statistics_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.business_track_statistics_ask.end_time)
}
inline void business_track_statistics_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.business_track_statistics_ask.end_time)
}
inline void business_track_statistics_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.business_track_statistics_ask.end_time)
}
inline ::std::string* business_track_statistics_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.business_track_statistics_ask.end_time)
  return end_time_;
}
inline ::std::string* business_track_statistics_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void business_track_statistics_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.business_track_statistics_ask.end_time)
}

// -------------------------------------------------------------------

// business_track_statistics_ans

// repeated .UBAS_PageView.step_business_statistics info = 1;
inline int business_track_statistics_ans::info_size() const {
  return info_.size();
}
inline void business_track_statistics_ans::clear_info() {
  info_.Clear();
}
inline const ::UBAS_PageView::step_business_statistics& business_track_statistics_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ans.info)
  return info_.Get(index);
}
inline ::UBAS_PageView::step_business_statistics* business_track_statistics_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.business_track_statistics_ans.info)
  return info_.Mutable(index);
}
inline ::UBAS_PageView::step_business_statistics* business_track_statistics_ans::add_info() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.business_track_statistics_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_business_statistics >&
business_track_statistics_ans::info() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.business_track_statistics_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_business_statistics >*
business_track_statistics_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.business_track_statistics_ans.info)
  return &info_;
}

// optional bytes json_data = 2;
inline bool business_track_statistics_ans::has_json_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void business_track_statistics_ans::set_has_json_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void business_track_statistics_ans::clear_has_json_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void business_track_statistics_ans::clear_json_data() {
  if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_->clear();
  }
  clear_has_json_data();
}
inline const ::std::string& business_track_statistics_ans::json_data() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ans.json_data)
  return *json_data_;
}
inline void business_track_statistics_ans::set_json_data(const ::std::string& value) {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  json_data_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.business_track_statistics_ans.json_data)
}
inline void business_track_statistics_ans::set_json_data(const char* value) {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  json_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.business_track_statistics_ans.json_data)
}
inline void business_track_statistics_ans::set_json_data(const void* value, size_t size) {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  json_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.business_track_statistics_ans.json_data)
}
inline ::std::string* business_track_statistics_ans::mutable_json_data() {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.business_track_statistics_ans.json_data)
  return json_data_;
}
inline ::std::string* business_track_statistics_ans::release_json_data() {
  clear_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_data_;
    json_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void business_track_statistics_ans::set_allocated_json_data(::std::string* json_data) {
  if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_data_;
  }
  if (json_data) {
    set_has_json_data();
    json_data_ = json_data;
  } else {
    clear_has_json_data();
    json_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.business_track_statistics_ans.json_data)
}

// optional .common.errorinfo error = 3;
inline bool business_track_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void business_track_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void business_track_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void business_track_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& business_track_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.business_track_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* business_track_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.business_track_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* business_track_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void business_track_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.business_track_statistics_ans.error)
}

// -------------------------------------------------------------------

// page_visited_statistics

// optional bytes page_name = 1;
inline bool page_visited_statistics::has_page_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_visited_statistics::set_has_page_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_visited_statistics::clear_has_page_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_visited_statistics::clear_page_name() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_->clear();
  }
  clear_has_page_name();
}
inline const ::std::string& page_visited_statistics::page_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_visited_statistics.page_name)
  return *page_name_;
}
inline void page_visited_statistics::set_page_name(const ::std::string& value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_visited_statistics.page_name)
}
inline void page_visited_statistics::set_page_name(const char* value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_visited_statistics.page_name)
}
inline void page_visited_statistics::set_page_name(const void* value, size_t size) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_visited_statistics.page_name)
}
inline ::std::string* page_visited_statistics::mutable_page_name() {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_visited_statistics.page_name)
  return page_name_;
}
inline ::std::string* page_visited_statistics::release_page_name() {
  clear_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_name_;
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_visited_statistics::set_allocated_page_name(::std::string* page_name) {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (page_name) {
    set_has_page_name();
    page_name_ = page_name;
  } else {
    clear_has_page_name();
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_visited_statistics.page_name)
}

// optional int32 visited_count = 2;
inline bool page_visited_statistics::has_visited_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_visited_statistics::set_has_visited_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_visited_statistics::clear_has_visited_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_visited_statistics::clear_visited_count() {
  visited_count_ = 0;
  clear_has_visited_count();
}
inline ::google::protobuf::int32 page_visited_statistics::visited_count() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_visited_statistics.visited_count)
  return visited_count_;
}
inline void page_visited_statistics::set_visited_count(::google::protobuf::int32 value) {
  set_has_visited_count();
  visited_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_visited_statistics.visited_count)
}

// -------------------------------------------------------------------

// page_visited_statistics_ask

// optional .common.common_ask_header ask_header = 1;
inline bool page_visited_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_visited_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_visited_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_visited_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& page_visited_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_visited_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* page_visited_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_visited_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* page_visited_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void page_visited_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_visited_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// page_visited_statistics_ans

// repeated .UBAS_PageView.page_visited_statistics list = 1;
inline int page_visited_statistics_ans::list_size() const {
  return list_.size();
}
inline void page_visited_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::UBAS_PageView::page_visited_statistics& page_visited_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_visited_statistics_ans.list)
  return list_.Get(index);
}
inline ::UBAS_PageView::page_visited_statistics* page_visited_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_visited_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::UBAS_PageView::page_visited_statistics* page_visited_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.page_visited_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_visited_statistics >&
page_visited_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.page_visited_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_visited_statistics >*
page_visited_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.page_visited_statistics_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool page_visited_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_visited_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_visited_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_visited_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& page_visited_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_visited_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* page_visited_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_visited_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* page_visited_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void page_visited_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_visited_statistics_ans.error)
}

// -------------------------------------------------------------------

// page_keeptime_statistics

// optional bytes page_name = 1;
inline bool page_keeptime_statistics::has_page_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_keeptime_statistics::set_has_page_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_keeptime_statistics::clear_has_page_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_keeptime_statistics::clear_page_name() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_->clear();
  }
  clear_has_page_name();
}
inline const ::std::string& page_keeptime_statistics::page_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_keeptime_statistics.page_name)
  return *page_name_;
}
inline void page_keeptime_statistics::set_page_name(const ::std::string& value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_keeptime_statistics.page_name)
}
inline void page_keeptime_statistics::set_page_name(const char* value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_keeptime_statistics.page_name)
}
inline void page_keeptime_statistics::set_page_name(const void* value, size_t size) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_keeptime_statistics.page_name)
}
inline ::std::string* page_keeptime_statistics::mutable_page_name() {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_keeptime_statistics.page_name)
  return page_name_;
}
inline ::std::string* page_keeptime_statistics::release_page_name() {
  clear_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_name_;
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_keeptime_statistics::set_allocated_page_name(::std::string* page_name) {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (page_name) {
    set_has_page_name();
    page_name_ = page_name;
  } else {
    clear_has_page_name();
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_keeptime_statistics.page_name)
}

// optional int32 keeptime = 2;
inline bool page_keeptime_statistics::has_keeptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_keeptime_statistics::set_has_keeptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_keeptime_statistics::clear_has_keeptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_keeptime_statistics::clear_keeptime() {
  keeptime_ = 0;
  clear_has_keeptime();
}
inline ::google::protobuf::int32 page_keeptime_statistics::keeptime() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_keeptime_statistics.keeptime)
  return keeptime_;
}
inline void page_keeptime_statistics::set_keeptime(::google::protobuf::int32 value) {
  set_has_keeptime();
  keeptime_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_keeptime_statistics.keeptime)
}

// -------------------------------------------------------------------

// page_keeptime_statistics_ask

// optional .common.common_ask_header ask_header = 1;
inline bool page_keeptime_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_keeptime_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_keeptime_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_keeptime_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& page_keeptime_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_keeptime_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* page_keeptime_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_keeptime_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* page_keeptime_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void page_keeptime_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_keeptime_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// page_keeptime_statistics_ans

// repeated .UBAS_PageView.page_keeptime_statistics list = 1;
inline int page_keeptime_statistics_ans::list_size() const {
  return list_.size();
}
inline void page_keeptime_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::UBAS_PageView::page_keeptime_statistics& page_keeptime_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_keeptime_statistics_ans.list)
  return list_.Get(index);
}
inline ::UBAS_PageView::page_keeptime_statistics* page_keeptime_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_keeptime_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::UBAS_PageView::page_keeptime_statistics* page_keeptime_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.page_keeptime_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_keeptime_statistics >&
page_keeptime_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.page_keeptime_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_keeptime_statistics >*
page_keeptime_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.page_keeptime_statistics_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool page_keeptime_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_keeptime_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_keeptime_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_keeptime_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& page_keeptime_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_keeptime_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* page_keeptime_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_keeptime_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* page_keeptime_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void page_keeptime_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_keeptime_statistics_ans.error)
}

// -------------------------------------------------------------------

// user_business_track_person_info

// optional bytes avatar = 1;
inline bool user_business_track_person_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_business_track_person_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_business_track_person_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_business_track_person_info::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& user_business_track_person_info::avatar() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.avatar)
  return *avatar_;
}
inline void user_business_track_person_info::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.avatar)
}
inline void user_business_track_person_info::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_person_info.avatar)
}
inline void user_business_track_person_info::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_person_info.avatar)
}
inline ::std::string* user_business_track_person_info::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_person_info.avatar)
  return avatar_;
}
inline ::std::string* user_business_track_person_info::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_person_info::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_person_info.avatar)
}

// optional bytes nick_name = 2;
inline bool user_business_track_person_info::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_business_track_person_info::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_business_track_person_info::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_business_track_person_info::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& user_business_track_person_info::nick_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.nick_name)
  return *nick_name_;
}
inline void user_business_track_person_info::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.nick_name)
}
inline void user_business_track_person_info::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_person_info.nick_name)
}
inline void user_business_track_person_info::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_person_info.nick_name)
}
inline ::std::string* user_business_track_person_info::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_person_info.nick_name)
  return nick_name_;
}
inline ::std::string* user_business_track_person_info::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_person_info::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_person_info.nick_name)
}

// optional bytes name = 3;
inline bool user_business_track_person_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_business_track_person_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_business_track_person_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_business_track_person_info::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& user_business_track_person_info::name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.name)
  return *name_;
}
inline void user_business_track_person_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.name)
}
inline void user_business_track_person_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_person_info.name)
}
inline void user_business_track_person_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_person_info.name)
}
inline ::std::string* user_business_track_person_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_person_info.name)
  return name_;
}
inline ::std::string* user_business_track_person_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_person_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_person_info.name)
}

// optional bytes mobile = 4;
inline bool user_business_track_person_info::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_business_track_person_info::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_business_track_person_info::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_business_track_person_info::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& user_business_track_person_info::mobile() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.mobile)
  return *mobile_;
}
inline void user_business_track_person_info::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.mobile)
}
inline void user_business_track_person_info::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_person_info.mobile)
}
inline void user_business_track_person_info::set_mobile(const void* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_person_info.mobile)
}
inline ::std::string* user_business_track_person_info::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_person_info.mobile)
  return mobile_;
}
inline ::std::string* user_business_track_person_info::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_person_info::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_person_info.mobile)
}

// optional bytes idcard_no = 5;
inline bool user_business_track_person_info::has_idcard_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_business_track_person_info::set_has_idcard_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_business_track_person_info::clear_has_idcard_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_business_track_person_info::clear_idcard_no() {
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_->clear();
  }
  clear_has_idcard_no();
}
inline const ::std::string& user_business_track_person_info::idcard_no() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.idcard_no)
  return *idcard_no_;
}
inline void user_business_track_person_info::set_idcard_no(const ::std::string& value) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.idcard_no)
}
inline void user_business_track_person_info::set_idcard_no(const char* value) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_person_info.idcard_no)
}
inline void user_business_track_person_info::set_idcard_no(const void* value, size_t size) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_person_info.idcard_no)
}
inline ::std::string* user_business_track_person_info::mutable_idcard_no() {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_person_info.idcard_no)
  return idcard_no_;
}
inline ::std::string* user_business_track_person_info::release_idcard_no() {
  clear_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = idcard_no_;
    idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_person_info::set_allocated_idcard_no(::std::string* idcard_no) {
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_no_;
  }
  if (idcard_no) {
    set_has_idcard_no();
    idcard_no_ = idcard_no;
  } else {
    clear_has_idcard_no();
    idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_person_info.idcard_no)
}

// optional .common.sex sex = 6;
inline bool user_business_track_person_info::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_business_track_person_info::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_business_track_person_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_business_track_person_info::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::common::sex user_business_track_person_info::sex() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.sex)
  return static_cast< ::common::sex >(sex_);
}
inline void user_business_track_person_info::set_sex(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.sex)
}

// optional int32 age = 7;
inline bool user_business_track_person_info::has_age() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_business_track_person_info::set_has_age() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_business_track_person_info::clear_has_age() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_business_track_person_info::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 user_business_track_person_info::age() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.age)
  return age_;
}
inline void user_business_track_person_info::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.age)
}

// optional bool overdue_status = 8;
inline bool user_business_track_person_info::has_overdue_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_business_track_person_info::set_has_overdue_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_business_track_person_info::clear_has_overdue_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_business_track_person_info::clear_overdue_status() {
  overdue_status_ = false;
  clear_has_overdue_status();
}
inline bool user_business_track_person_info::overdue_status() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_person_info.overdue_status)
  return overdue_status_;
}
inline void user_business_track_person_info::set_overdue_status(bool value) {
  set_has_overdue_status();
  overdue_status_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_person_info.overdue_status)
}

// -------------------------------------------------------------------

// user_business_track_content

// optional int32 field_no = 1;
inline bool user_business_track_content::has_field_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_business_track_content::set_has_field_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_business_track_content::clear_has_field_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_business_track_content::clear_field_no() {
  field_no_ = 0;
  clear_has_field_no();
}
inline ::google::protobuf::int32 user_business_track_content::field_no() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_content.field_no)
  return field_no_;
}
inline void user_business_track_content::set_field_no(::google::protobuf::int32 value) {
  set_has_field_no();
  field_no_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_content.field_no)
}

// optional bytes field_name = 2;
inline bool user_business_track_content::has_field_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_business_track_content::set_has_field_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_business_track_content::clear_has_field_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_business_track_content::clear_field_name() {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_->clear();
  }
  clear_has_field_name();
}
inline const ::std::string& user_business_track_content::field_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_content.field_name)
  return *field_name_;
}
inline void user_business_track_content::set_field_name(const ::std::string& value) {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_content.field_name)
}
inline void user_business_track_content::set_field_name(const char* value) {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_content.field_name)
}
inline void user_business_track_content::set_field_name(const void* value, size_t size) {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  field_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_content.field_name)
}
inline ::std::string* user_business_track_content::mutable_field_name() {
  set_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_content.field_name)
  return field_name_;
}
inline ::std::string* user_business_track_content::release_field_name() {
  clear_has_field_name();
  if (field_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = field_name_;
    field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_content::set_allocated_field_name(::std::string* field_name) {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_name_;
  }
  if (field_name) {
    set_has_field_name();
    field_name_ = field_name;
  } else {
    clear_has_field_name();
    field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_content.field_name)
}

// optional bytes field_value = 3;
inline bool user_business_track_content::has_field_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_business_track_content::set_has_field_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_business_track_content::clear_has_field_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_business_track_content::clear_field_value() {
  if (field_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_value_->clear();
  }
  clear_has_field_value();
}
inline const ::std::string& user_business_track_content::field_value() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_content.field_value)
  return *field_value_;
}
inline void user_business_track_content::set_field_value(const ::std::string& value) {
  set_has_field_value();
  if (field_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_value_ = new ::std::string;
  }
  field_value_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_content.field_value)
}
inline void user_business_track_content::set_field_value(const char* value) {
  set_has_field_value();
  if (field_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_value_ = new ::std::string;
  }
  field_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_content.field_value)
}
inline void user_business_track_content::set_field_value(const void* value, size_t size) {
  set_has_field_value();
  if (field_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_value_ = new ::std::string;
  }
  field_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_content.field_value)
}
inline ::std::string* user_business_track_content::mutable_field_value() {
  set_has_field_value();
  if (field_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    field_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_content.field_value)
  return field_value_;
}
inline ::std::string* user_business_track_content::release_field_value() {
  clear_has_field_value();
  if (field_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = field_value_;
    field_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_content::set_allocated_field_value(::std::string* field_value) {
  if (field_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_value_;
  }
  if (field_value) {
    set_has_field_value();
    field_value_ = field_value;
  } else {
    clear_has_field_value();
    field_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_content.field_value)
}

// -------------------------------------------------------------------

// user_business_track_item

// optional bytes occur_time = 1;
inline bool user_business_track_item::has_occur_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_business_track_item::set_has_occur_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_business_track_item::clear_has_occur_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_business_track_item::clear_occur_time() {
  if (occur_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    occur_time_->clear();
  }
  clear_has_occur_time();
}
inline const ::std::string& user_business_track_item::occur_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_item.occur_time)
  return *occur_time_;
}
inline void user_business_track_item::set_occur_time(const ::std::string& value) {
  set_has_occur_time();
  if (occur_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    occur_time_ = new ::std::string;
  }
  occur_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_item.occur_time)
}
inline void user_business_track_item::set_occur_time(const char* value) {
  set_has_occur_time();
  if (occur_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    occur_time_ = new ::std::string;
  }
  occur_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_item.occur_time)
}
inline void user_business_track_item::set_occur_time(const void* value, size_t size) {
  set_has_occur_time();
  if (occur_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    occur_time_ = new ::std::string;
  }
  occur_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_item.occur_time)
}
inline ::std::string* user_business_track_item::mutable_occur_time() {
  set_has_occur_time();
  if (occur_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    occur_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_item.occur_time)
  return occur_time_;
}
inline ::std::string* user_business_track_item::release_occur_time() {
  clear_has_occur_time();
  if (occur_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = occur_time_;
    occur_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_item::set_allocated_occur_time(::std::string* occur_time) {
  if (occur_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete occur_time_;
  }
  if (occur_time) {
    set_has_occur_time();
    occur_time_ = occur_time;
  } else {
    clear_has_occur_time();
    occur_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_item.occur_time)
}

// optional bytes business = 2;
inline bool user_business_track_item::has_business() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_business_track_item::set_has_business() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_business_track_item::clear_has_business() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_business_track_item::clear_business() {
  if (business_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    business_->clear();
  }
  clear_has_business();
}
inline const ::std::string& user_business_track_item::business() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_item.business)
  return *business_;
}
inline void user_business_track_item::set_business(const ::std::string& value) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    business_ = new ::std::string;
  }
  business_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_item.business)
}
inline void user_business_track_item::set_business(const char* value) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    business_ = new ::std::string;
  }
  business_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_item.business)
}
inline void user_business_track_item::set_business(const void* value, size_t size) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    business_ = new ::std::string;
  }
  business_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_item.business)
}
inline ::std::string* user_business_track_item::mutable_business() {
  set_has_business();
  if (business_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    business_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_item.business)
  return business_;
}
inline ::std::string* user_business_track_item::release_business() {
  clear_has_business();
  if (business_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = business_;
    business_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_item::set_allocated_business(::std::string* business) {
  if (business_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete business_;
  }
  if (business) {
    set_has_business();
    business_ = business;
  } else {
    clear_has_business();
    business_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_item.business)
}

// repeated .UBAS_PageView.user_business_track_content track_contents = 3;
inline int user_business_track_item::track_contents_size() const {
  return track_contents_.size();
}
inline void user_business_track_item::clear_track_contents() {
  track_contents_.Clear();
}
inline const ::UBAS_PageView::user_business_track_content& user_business_track_item::track_contents(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_item.track_contents)
  return track_contents_.Get(index);
}
inline ::UBAS_PageView::user_business_track_content* user_business_track_item::mutable_track_contents(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_item.track_contents)
  return track_contents_.Mutable(index);
}
inline ::UBAS_PageView::user_business_track_content* user_business_track_item::add_track_contents() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.user_business_track_item.track_contents)
  return track_contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_content >&
user_business_track_item::track_contents() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.user_business_track_item.track_contents)
  return track_contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_content >*
user_business_track_item::mutable_track_contents() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.user_business_track_item.track_contents)
  return &track_contents_;
}

// -------------------------------------------------------------------

// user_business_track_query_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_business_track_query_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_business_track_query_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_business_track_query_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_business_track_query_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_business_track_query_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_query_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_business_track_query_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_query_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_business_track_query_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_business_track_query_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_query_ask.ask_header)
}

// optional bytes mobile = 2;
inline bool user_business_track_query_ask::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_business_track_query_ask::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_business_track_query_ask::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_business_track_query_ask::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& user_business_track_query_ask::mobile() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_query_ask.mobile)
  return *mobile_;
}
inline void user_business_track_query_ask::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_query_ask.mobile)
}
inline void user_business_track_query_ask::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_query_ask.mobile)
}
inline void user_business_track_query_ask::set_mobile(const void* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_query_ask.mobile)
}
inline ::std::string* user_business_track_query_ask::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_query_ask.mobile)
  return mobile_;
}
inline ::std::string* user_business_track_query_ask::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_query_ask::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_query_ask.mobile)
}

// optional bytes idcard_no = 3;
inline bool user_business_track_query_ask::has_idcard_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_business_track_query_ask::set_has_idcard_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_business_track_query_ask::clear_has_idcard_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_business_track_query_ask::clear_idcard_no() {
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_->clear();
  }
  clear_has_idcard_no();
}
inline const ::std::string& user_business_track_query_ask::idcard_no() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_query_ask.idcard_no)
  return *idcard_no_;
}
inline void user_business_track_query_ask::set_idcard_no(const ::std::string& value) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.user_business_track_query_ask.idcard_no)
}
inline void user_business_track_query_ask::set_idcard_no(const char* value) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.user_business_track_query_ask.idcard_no)
}
inline void user_business_track_query_ask::set_idcard_no(const void* value, size_t size) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.user_business_track_query_ask.idcard_no)
}
inline ::std::string* user_business_track_query_ask::mutable_idcard_no() {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_query_ask.idcard_no)
  return idcard_no_;
}
inline ::std::string* user_business_track_query_ask::release_idcard_no() {
  clear_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = idcard_no_;
    idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_business_track_query_ask::set_allocated_idcard_no(::std::string* idcard_no) {
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_no_;
  }
  if (idcard_no) {
    set_has_idcard_no();
    idcard_no_ = idcard_no;
  } else {
    clear_has_idcard_no();
    idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_query_ask.idcard_no)
}

// -------------------------------------------------------------------

// user_business_track_query_ans

// optional .UBAS_PageView.user_business_track_person_info info = 1;
inline bool user_business_track_query_ans::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_business_track_query_ans::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_business_track_query_ans::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_business_track_query_ans::clear_info() {
  if (info_ != NULL) info_->::UBAS_PageView::user_business_track_person_info::Clear();
  clear_has_info();
}
inline const ::UBAS_PageView::user_business_track_person_info& user_business_track_query_ans::info() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_query_ans.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UBAS_PageView::user_business_track_person_info* user_business_track_query_ans::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UBAS_PageView::user_business_track_person_info;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_query_ans.info)
  return info_;
}
inline ::UBAS_PageView::user_business_track_person_info* user_business_track_query_ans::release_info() {
  clear_has_info();
  ::UBAS_PageView::user_business_track_person_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void user_business_track_query_ans::set_allocated_info(::UBAS_PageView::user_business_track_person_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_query_ans.info)
}

// repeated .UBAS_PageView.user_business_track_item track_items = 2;
inline int user_business_track_query_ans::track_items_size() const {
  return track_items_.size();
}
inline void user_business_track_query_ans::clear_track_items() {
  track_items_.Clear();
}
inline const ::UBAS_PageView::user_business_track_item& user_business_track_query_ans::track_items(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_query_ans.track_items)
  return track_items_.Get(index);
}
inline ::UBAS_PageView::user_business_track_item* user_business_track_query_ans::mutable_track_items(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_query_ans.track_items)
  return track_items_.Mutable(index);
}
inline ::UBAS_PageView::user_business_track_item* user_business_track_query_ans::add_track_items() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.user_business_track_query_ans.track_items)
  return track_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_item >&
user_business_track_query_ans::track_items() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.user_business_track_query_ans.track_items)
  return track_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::user_business_track_item >*
user_business_track_query_ans::mutable_track_items() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.user_business_track_query_ans.track_items)
  return &track_items_;
}

// optional .common.errorinfo error = 3;
inline bool user_business_track_query_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_business_track_query_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_business_track_query_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_business_track_query_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_business_track_query_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.user_business_track_query_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_business_track_query_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.user_business_track_query_ans.error)
  return error_;
}
inline ::common::errorinfo* user_business_track_query_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_business_track_query_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.user_business_track_query_ans.error)
}

// -------------------------------------------------------------------

// page_access_statistics

// optional bytes page_name = 1;
inline bool page_access_statistics::has_page_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_access_statistics::set_has_page_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_access_statistics::clear_has_page_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_access_statistics::clear_page_name() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_->clear();
  }
  clear_has_page_name();
}
inline const ::std::string& page_access_statistics::page_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics.page_name)
  return *page_name_;
}
inline void page_access_statistics::set_page_name(const ::std::string& value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_statistics.page_name)
}
inline void page_access_statistics::set_page_name(const char* value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_access_statistics.page_name)
}
inline void page_access_statistics::set_page_name(const void* value, size_t size) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_access_statistics.page_name)
}
inline ::std::string* page_access_statistics::mutable_page_name() {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_statistics.page_name)
  return page_name_;
}
inline ::std::string* page_access_statistics::release_page_name() {
  clear_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_name_;
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_access_statistics::set_allocated_page_name(::std::string* page_name) {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (page_name) {
    set_has_page_name();
    page_name_ = page_name;
  } else {
    clear_has_page_name();
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_statistics.page_name)
}

// optional int32 access_count = 2;
inline bool page_access_statistics::has_access_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_access_statistics::set_has_access_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_access_statistics::clear_has_access_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_access_statistics::clear_access_count() {
  access_count_ = 0;
  clear_has_access_count();
}
inline ::google::protobuf::int32 page_access_statistics::access_count() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics.access_count)
  return access_count_;
}
inline void page_access_statistics::set_access_count(::google::protobuf::int32 value) {
  set_has_access_count();
  access_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_statistics.access_count)
}

// -------------------------------------------------------------------

// page_access_statistics_ask

// optional bytes start_date = 1;
inline bool page_access_statistics_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_access_statistics_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_access_statistics_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_access_statistics_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& page_access_statistics_ask::start_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics_ask.start_date)
  return *start_date_;
}
inline void page_access_statistics_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_statistics_ask.start_date)
}
inline void page_access_statistics_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_access_statistics_ask.start_date)
}
inline void page_access_statistics_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_access_statistics_ask.start_date)
}
inline ::std::string* page_access_statistics_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_statistics_ask.start_date)
  return start_date_;
}
inline ::std::string* page_access_statistics_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_access_statistics_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_statistics_ask.start_date)
}

// optional bytes end_date = 2;
inline bool page_access_statistics_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_access_statistics_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_access_statistics_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_access_statistics_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& page_access_statistics_ask::end_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics_ask.end_date)
  return *end_date_;
}
inline void page_access_statistics_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_statistics_ask.end_date)
}
inline void page_access_statistics_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_access_statistics_ask.end_date)
}
inline void page_access_statistics_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_access_statistics_ask.end_date)
}
inline ::std::string* page_access_statistics_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_statistics_ask.end_date)
  return end_date_;
}
inline ::std::string* page_access_statistics_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_access_statistics_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_statistics_ask.end_date)
}

// optional .common.common_ask_header ask_header = 3;
inline bool page_access_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_access_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_access_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_access_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& page_access_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* page_access_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* page_access_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void page_access_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// page_access_statistics_ans

// repeated .UBAS_PageView.page_access_statistics list = 1;
inline int page_access_statistics_ans::list_size() const {
  return list_.size();
}
inline void page_access_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::UBAS_PageView::page_access_statistics& page_access_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics_ans.list)
  return list_.Get(index);
}
inline ::UBAS_PageView::page_access_statistics* page_access_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::UBAS_PageView::page_access_statistics* page_access_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.page_access_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_statistics >&
page_access_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.page_access_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_statistics >*
page_access_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.page_access_statistics_ans.list)
  return &list_;
}

// optional .common.result_info result = 2;
inline bool page_access_statistics_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_access_statistics_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_access_statistics_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_access_statistics_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& page_access_statistics_ans::result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_statistics_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* page_access_statistics_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_statistics_ans.result)
  return result_;
}
inline ::common::result_info* page_access_statistics_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void page_access_statistics_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_statistics_ans.result)
}

// -------------------------------------------------------------------

// page_duration_statistics

// optional bytes page_name = 1;
inline bool page_duration_statistics::has_page_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_duration_statistics::set_has_page_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_duration_statistics::clear_has_page_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_duration_statistics::clear_page_name() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_->clear();
  }
  clear_has_page_name();
}
inline const ::std::string& page_duration_statistics::page_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics.page_name)
  return *page_name_;
}
inline void page_duration_statistics::set_page_name(const ::std::string& value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_duration_statistics.page_name)
}
inline void page_duration_statistics::set_page_name(const char* value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_duration_statistics.page_name)
}
inline void page_duration_statistics::set_page_name(const void* value, size_t size) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_duration_statistics.page_name)
}
inline ::std::string* page_duration_statistics::mutable_page_name() {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_duration_statistics.page_name)
  return page_name_;
}
inline ::std::string* page_duration_statistics::release_page_name() {
  clear_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_name_;
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_duration_statistics::set_allocated_page_name(::std::string* page_name) {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (page_name) {
    set_has_page_name();
    page_name_ = page_name;
  } else {
    clear_has_page_name();
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_duration_statistics.page_name)
}

// optional int32 duration = 2;
inline bool page_duration_statistics::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_duration_statistics::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_duration_statistics::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_duration_statistics::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 page_duration_statistics::duration() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics.duration)
  return duration_;
}
inline void page_duration_statistics::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_duration_statistics.duration)
}

// -------------------------------------------------------------------

// page_duration_statistics_ask

// optional bytes start_date = 1;
inline bool page_duration_statistics_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_duration_statistics_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_duration_statistics_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_duration_statistics_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& page_duration_statistics_ask::start_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics_ask.start_date)
  return *start_date_;
}
inline void page_duration_statistics_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_duration_statistics_ask.start_date)
}
inline void page_duration_statistics_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_duration_statistics_ask.start_date)
}
inline void page_duration_statistics_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_duration_statistics_ask.start_date)
}
inline ::std::string* page_duration_statistics_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_duration_statistics_ask.start_date)
  return start_date_;
}
inline ::std::string* page_duration_statistics_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_duration_statistics_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_duration_statistics_ask.start_date)
}

// optional bytes end_date = 2;
inline bool page_duration_statistics_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_duration_statistics_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_duration_statistics_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_duration_statistics_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& page_duration_statistics_ask::end_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics_ask.end_date)
  return *end_date_;
}
inline void page_duration_statistics_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_duration_statistics_ask.end_date)
}
inline void page_duration_statistics_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_duration_statistics_ask.end_date)
}
inline void page_duration_statistics_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_duration_statistics_ask.end_date)
}
inline ::std::string* page_duration_statistics_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_duration_statistics_ask.end_date)
  return end_date_;
}
inline ::std::string* page_duration_statistics_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_duration_statistics_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_duration_statistics_ask.end_date)
}

// optional .common.common_ask_header ask_header = 3;
inline bool page_duration_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_duration_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_duration_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_duration_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& page_duration_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* page_duration_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_duration_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* page_duration_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void page_duration_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_duration_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// page_duration_statistics_ans

// repeated .UBAS_PageView.page_duration_statistics list = 1;
inline int page_duration_statistics_ans::list_size() const {
  return list_.size();
}
inline void page_duration_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::UBAS_PageView::page_duration_statistics& page_duration_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics_ans.list)
  return list_.Get(index);
}
inline ::UBAS_PageView::page_duration_statistics* page_duration_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_duration_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::UBAS_PageView::page_duration_statistics* page_duration_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.page_duration_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_duration_statistics >&
page_duration_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.page_duration_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_duration_statistics >*
page_duration_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.page_duration_statistics_ans.list)
  return &list_;
}

// optional .common.result_info result = 2;
inline bool page_duration_statistics_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_duration_statistics_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_duration_statistics_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_duration_statistics_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& page_duration_statistics_ans::result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_duration_statistics_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* page_duration_statistics_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_duration_statistics_ans.result)
  return result_;
}
inline ::common::result_info* page_duration_statistics_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void page_duration_statistics_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_duration_statistics_ans.result)
}

// -------------------------------------------------------------------

// step_page_statistics

// optional int32 step_number = 1;
inline bool step_page_statistics::has_step_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void step_page_statistics::set_has_step_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void step_page_statistics::clear_has_step_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void step_page_statistics::clear_step_number() {
  step_number_ = 0;
  clear_has_step_number();
}
inline ::google::protobuf::int32 step_page_statistics::step_number() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.step_page_statistics.step_number)
  return step_number_;
}
inline void step_page_statistics::set_step_number(::google::protobuf::int32 value) {
  set_has_step_number();
  step_number_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.step_page_statistics.step_number)
}

// optional int32 access_count = 2;
inline bool step_page_statistics::has_access_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void step_page_statistics::set_has_access_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void step_page_statistics::clear_has_access_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void step_page_statistics::clear_access_count() {
  access_count_ = 0;
  clear_has_access_count();
}
inline ::google::protobuf::int32 step_page_statistics::access_count() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.step_page_statistics.access_count)
  return access_count_;
}
inline void step_page_statistics::set_access_count(::google::protobuf::int32 value) {
  set_has_access_count();
  access_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.step_page_statistics.access_count)
}

// -------------------------------------------------------------------

// page_trace_statistics_ask

// optional bytes start_date = 1;
inline bool page_trace_statistics_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_trace_statistics_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_trace_statistics_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_trace_statistics_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& page_trace_statistics_ask::start_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ask.start_date)
  return *start_date_;
}
inline void page_trace_statistics_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_trace_statistics_ask.start_date)
}
inline void page_trace_statistics_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_trace_statistics_ask.start_date)
}
inline void page_trace_statistics_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_trace_statistics_ask.start_date)
}
inline ::std::string* page_trace_statistics_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ask.start_date)
  return start_date_;
}
inline ::std::string* page_trace_statistics_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_trace_statistics_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_trace_statistics_ask.start_date)
}

// optional bytes end_date = 2;
inline bool page_trace_statistics_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_trace_statistics_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_trace_statistics_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_trace_statistics_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& page_trace_statistics_ask::end_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ask.end_date)
  return *end_date_;
}
inline void page_trace_statistics_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_trace_statistics_ask.end_date)
}
inline void page_trace_statistics_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_trace_statistics_ask.end_date)
}
inline void page_trace_statistics_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_trace_statistics_ask.end_date)
}
inline ::std::string* page_trace_statistics_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ask.end_date)
  return end_date_;
}
inline ::std::string* page_trace_statistics_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_trace_statistics_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_trace_statistics_ask.end_date)
}

// optional bytes page_type = 3;
inline bool page_trace_statistics_ask::has_page_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_trace_statistics_ask::set_has_page_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_trace_statistics_ask::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_trace_statistics_ask::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& page_trace_statistics_ask::page_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ask.page_type)
  return *page_type_;
}
inline void page_trace_statistics_ask::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_trace_statistics_ask.page_type)
}
inline void page_trace_statistics_ask::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_trace_statistics_ask.page_type)
}
inline void page_trace_statistics_ask::set_page_type(const void* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_trace_statistics_ask.page_type)
}
inline ::std::string* page_trace_statistics_ask::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ask.page_type)
  return page_type_;
}
inline ::std::string* page_trace_statistics_ask::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_trace_statistics_ask::set_allocated_page_type(::std::string* page_type) {
  if (page_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_type_;
  }
  if (page_type) {
    set_has_page_type();
    page_type_ = page_type;
  } else {
    clear_has_page_type();
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_trace_statistics_ask.page_type)
}

// optional int32 layers = 4;
inline bool page_trace_statistics_ask::has_layers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void page_trace_statistics_ask::set_has_layers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void page_trace_statistics_ask::clear_has_layers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void page_trace_statistics_ask::clear_layers() {
  layers_ = 0;
  clear_has_layers();
}
inline ::google::protobuf::int32 page_trace_statistics_ask::layers() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ask.layers)
  return layers_;
}
inline void page_trace_statistics_ask::set_layers(::google::protobuf::int32 value) {
  set_has_layers();
  layers_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_trace_statistics_ask.layers)
}

// optional .common.common_ask_header ask_header = 5;
inline bool page_trace_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void page_trace_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void page_trace_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void page_trace_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& page_trace_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* page_trace_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* page_trace_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void page_trace_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_trace_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// page_trace_statistics_ans

// repeated .UBAS_PageView.step_page_statistics info = 1;
inline int page_trace_statistics_ans::info_size() const {
  return info_.size();
}
inline void page_trace_statistics_ans::clear_info() {
  info_.Clear();
}
inline const ::UBAS_PageView::step_page_statistics& page_trace_statistics_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ans.info)
  return info_.Get(index);
}
inline ::UBAS_PageView::step_page_statistics* page_trace_statistics_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ans.info)
  return info_.Mutable(index);
}
inline ::UBAS_PageView::step_page_statistics* page_trace_statistics_ans::add_info() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.page_trace_statistics_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_page_statistics >&
page_trace_statistics_ans::info() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.page_trace_statistics_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::step_page_statistics >*
page_trace_statistics_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.page_trace_statistics_ans.info)
  return &info_;
}

// optional bytes json_data = 2;
inline bool page_trace_statistics_ans::has_json_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_trace_statistics_ans::set_has_json_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_trace_statistics_ans::clear_has_json_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_trace_statistics_ans::clear_json_data() {
  if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_->clear();
  }
  clear_has_json_data();
}
inline const ::std::string& page_trace_statistics_ans::json_data() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ans.json_data)
  return *json_data_;
}
inline void page_trace_statistics_ans::set_json_data(const ::std::string& value) {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  json_data_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_trace_statistics_ans.json_data)
}
inline void page_trace_statistics_ans::set_json_data(const char* value) {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  json_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_trace_statistics_ans.json_data)
}
inline void page_trace_statistics_ans::set_json_data(const void* value, size_t size) {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  json_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_trace_statistics_ans.json_data)
}
inline ::std::string* page_trace_statistics_ans::mutable_json_data() {
  set_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ans.json_data)
  return json_data_;
}
inline ::std::string* page_trace_statistics_ans::release_json_data() {
  clear_has_json_data();
  if (json_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_data_;
    json_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_trace_statistics_ans::set_allocated_json_data(::std::string* json_data) {
  if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_data_;
  }
  if (json_data) {
    set_has_json_data();
    json_data_ = json_data;
  } else {
    clear_has_json_data();
    json_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_trace_statistics_ans.json_data)
}

// optional .common.result_info result = 3;
inline bool page_trace_statistics_ans::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_trace_statistics_ans::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_trace_statistics_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_trace_statistics_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& page_trace_statistics_ans::result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_trace_statistics_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* page_trace_statistics_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_trace_statistics_ans.result)
  return result_;
}
inline ::common::result_info* page_trace_statistics_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void page_trace_statistics_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_trace_statistics_ans.result)
}

// -------------------------------------------------------------------

// opt_trace_ask

// optional bytes start_date = 1;
inline bool opt_trace_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& opt_trace_ask::start_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ask.start_date)
  return *start_date_;
}
inline void opt_trace_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ask.start_date)
}
inline void opt_trace_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ask.start_date)
}
inline void opt_trace_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ask.start_date)
}
inline ::std::string* opt_trace_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ask.start_date)
  return start_date_;
}
inline ::std::string* opt_trace_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ask.start_date)
}

// optional bytes end_date = 2;
inline bool opt_trace_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& opt_trace_ask::end_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ask.end_date)
  return *end_date_;
}
inline void opt_trace_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ask.end_date)
}
inline void opt_trace_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ask.end_date)
}
inline void opt_trace_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ask.end_date)
}
inline ::std::string* opt_trace_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ask.end_date)
  return end_date_;
}
inline ::std::string* opt_trace_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ask.end_date)
}

// optional bytes mobile_phone = 3;
inline bool opt_trace_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& opt_trace_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ask.mobile_phone)
  return *mobile_phone_;
}
inline void opt_trace_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ask.mobile_phone)
}
inline void opt_trace_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ask.mobile_phone)
}
inline void opt_trace_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ask.mobile_phone)
}
inline ::std::string* opt_trace_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* opt_trace_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ask.mobile_phone)
}

// optional bytes id_card_no = 4;
inline bool opt_trace_ask::has_id_card_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_ask::set_has_id_card_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_ask::clear_has_id_card_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_ask::clear_id_card_no() {
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_->clear();
  }
  clear_has_id_card_no();
}
inline const ::std::string& opt_trace_ask::id_card_no() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ask.id_card_no)
  return *id_card_no_;
}
inline void opt_trace_ask::set_id_card_no(const ::std::string& value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ask.id_card_no)
}
inline void opt_trace_ask::set_id_card_no(const char* value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ask.id_card_no)
}
inline void opt_trace_ask::set_id_card_no(const void* value, size_t size) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ask.id_card_no)
}
inline ::std::string* opt_trace_ask::mutable_id_card_no() {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ask.id_card_no)
  return id_card_no_;
}
inline ::std::string* opt_trace_ask::release_id_card_no() {
  clear_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_no_;
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ask::set_allocated_id_card_no(::std::string* id_card_no) {
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_no_;
  }
  if (id_card_no) {
    set_has_id_card_no();
    id_card_no_ = id_card_no;
  } else {
    clear_has_id_card_no();
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ask.id_card_no)
}

// repeated int32 trace_type_list = 5;
inline int opt_trace_ask::trace_type_list_size() const {
  return trace_type_list_.size();
}
inline void opt_trace_ask::clear_trace_type_list() {
  trace_type_list_.Clear();
}
inline ::google::protobuf::int32 opt_trace_ask::trace_type_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ask.trace_type_list)
  return trace_type_list_.Get(index);
}
inline void opt_trace_ask::set_trace_type_list(int index, ::google::protobuf::int32 value) {
  trace_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ask.trace_type_list)
}
inline void opt_trace_ask::add_trace_type_list(::google::protobuf::int32 value) {
  trace_type_list_.Add(value);
  // @@protoc_insertion_point(field_add:UBAS_PageView.opt_trace_ask.trace_type_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
opt_trace_ask::trace_type_list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.opt_trace_ask.trace_type_list)
  return trace_type_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
opt_trace_ask::mutable_trace_type_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.opt_trace_ask.trace_type_list)
  return &trace_type_list_;
}

// optional .common.common_ask_header ask_header = 6;
inline bool opt_trace_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& opt_trace_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* opt_trace_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* opt_trace_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void opt_trace_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ask.ask_header)
}

// -------------------------------------------------------------------

// opt_trace_ans

// optional bytes nickname = 1;
inline bool opt_trace_ans::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_ans::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_ans::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_ans::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& opt_trace_ans::nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.nickname)
  return *nickname_;
}
inline void opt_trace_ans::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.nickname)
}
inline void opt_trace_ans::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.nickname)
}
inline void opt_trace_ans::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.nickname)
}
inline ::std::string* opt_trace_ans::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.nickname)
  return nickname_;
}
inline ::std::string* opt_trace_ans::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.nickname)
}

// optional bytes name = 2;
inline bool opt_trace_ans::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_ans::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_ans::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_ans::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& opt_trace_ans::name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.name)
  return *name_;
}
inline void opt_trace_ans::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.name)
}
inline void opt_trace_ans::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.name)
}
inline void opt_trace_ans::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.name)
}
inline ::std::string* opt_trace_ans::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.name)
  return name_;
}
inline ::std::string* opt_trace_ans::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.name)
}

// optional int32 sex = 3;
inline bool opt_trace_ans::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_ans::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_ans::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_ans::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 opt_trace_ans::sex() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.sex)
  return sex_;
}
inline void opt_trace_ans::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.sex)
}

// optional bytes age = 4;
inline bool opt_trace_ans::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_ans::set_has_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_ans::clear_has_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_ans::clear_age() {
  if (age_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    age_->clear();
  }
  clear_has_age();
}
inline const ::std::string& opt_trace_ans::age() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.age)
  return *age_;
}
inline void opt_trace_ans::set_age(const ::std::string& value) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    age_ = new ::std::string;
  }
  age_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.age)
}
inline void opt_trace_ans::set_age(const char* value) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    age_ = new ::std::string;
  }
  age_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.age)
}
inline void opt_trace_ans::set_age(const void* value, size_t size) {
  set_has_age();
  if (age_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    age_ = new ::std::string;
  }
  age_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.age)
}
inline ::std::string* opt_trace_ans::mutable_age() {
  set_has_age();
  if (age_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    age_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.age)
  return age_;
}
inline ::std::string* opt_trace_ans::release_age() {
  clear_has_age();
  if (age_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = age_;
    age_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_age(::std::string* age) {
  if (age_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete age_;
  }
  if (age) {
    set_has_age();
    age_ = age;
  } else {
    clear_has_age();
    age_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.age)
}

// optional bytes identity = 5;
inline bool opt_trace_ans::has_identity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_ans::set_has_identity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_ans::clear_has_identity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_ans::clear_identity() {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_->clear();
  }
  clear_has_identity();
}
inline const ::std::string& opt_trace_ans::identity() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.identity)
  return *identity_;
}
inline void opt_trace_ans::set_identity(const ::std::string& value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.identity)
}
inline void opt_trace_ans::set_identity(const char* value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.identity)
}
inline void opt_trace_ans::set_identity(const void* value, size_t size) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  identity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.identity)
}
inline ::std::string* opt_trace_ans::mutable_identity() {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.identity)
  return identity_;
}
inline ::std::string* opt_trace_ans::release_identity() {
  clear_has_identity();
  if (identity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_;
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_identity(::std::string* identity) {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (identity) {
    set_has_identity();
    identity_ = identity;
  } else {
    clear_has_identity();
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.identity)
}

// optional bytes idcard_no = 6;
inline bool opt_trace_ans::has_idcard_no() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_ans::set_has_idcard_no() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_ans::clear_has_idcard_no() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_ans::clear_idcard_no() {
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_->clear();
  }
  clear_has_idcard_no();
}
inline const ::std::string& opt_trace_ans::idcard_no() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.idcard_no)
  return *idcard_no_;
}
inline void opt_trace_ans::set_idcard_no(const ::std::string& value) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.idcard_no)
}
inline void opt_trace_ans::set_idcard_no(const char* value) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.idcard_no)
}
inline void opt_trace_ans::set_idcard_no(const void* value, size_t size) {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  idcard_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.idcard_no)
}
inline ::std::string* opt_trace_ans::mutable_idcard_no() {
  set_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    idcard_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.idcard_no)
  return idcard_no_;
}
inline ::std::string* opt_trace_ans::release_idcard_no() {
  clear_has_idcard_no();
  if (idcard_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = idcard_no_;
    idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_idcard_no(::std::string* idcard_no) {
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_no_;
  }
  if (idcard_no) {
    set_has_idcard_no();
    idcard_no_ = idcard_no;
  } else {
    clear_has_idcard_no();
    idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.idcard_no)
}

// optional bytes phone = 7;
inline bool opt_trace_ans::has_phone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void opt_trace_ans::set_has_phone() {
  _has_bits_[0] |= 0x00000040u;
}
inline void opt_trace_ans::clear_has_phone() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void opt_trace_ans::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& opt_trace_ans::phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.phone)
  return *phone_;
}
inline void opt_trace_ans::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.phone)
}
inline void opt_trace_ans::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.phone)
}
inline void opt_trace_ans::set_phone(const void* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.phone)
}
inline ::std::string* opt_trace_ans::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.phone)
  return phone_;
}
inline ::std::string* opt_trace_ans::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.phone)
}

// optional bytes avatar = 8;
inline bool opt_trace_ans::has_avatar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void opt_trace_ans::set_has_avatar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void opt_trace_ans::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void opt_trace_ans::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& opt_trace_ans::avatar() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.avatar)
  return *avatar_;
}
inline void opt_trace_ans::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.avatar)
}
inline void opt_trace_ans::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.avatar)
}
inline void opt_trace_ans::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.avatar)
}
inline ::std::string* opt_trace_ans::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.avatar)
  return avatar_;
}
inline ::std::string* opt_trace_ans::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.avatar)
}

// optional bytes overdue_status = 9;
inline bool opt_trace_ans::has_overdue_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void opt_trace_ans::set_has_overdue_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void opt_trace_ans::clear_has_overdue_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void opt_trace_ans::clear_overdue_status() {
  if (overdue_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overdue_status_->clear();
  }
  clear_has_overdue_status();
}
inline const ::std::string& opt_trace_ans::overdue_status() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.overdue_status)
  return *overdue_status_;
}
inline void opt_trace_ans::set_overdue_status(const ::std::string& value) {
  set_has_overdue_status();
  if (overdue_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overdue_status_ = new ::std::string;
  }
  overdue_status_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_ans.overdue_status)
}
inline void opt_trace_ans::set_overdue_status(const char* value) {
  set_has_overdue_status();
  if (overdue_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overdue_status_ = new ::std::string;
  }
  overdue_status_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_ans.overdue_status)
}
inline void opt_trace_ans::set_overdue_status(const void* value, size_t size) {
  set_has_overdue_status();
  if (overdue_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overdue_status_ = new ::std::string;
  }
  overdue_status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_ans.overdue_status)
}
inline ::std::string* opt_trace_ans::mutable_overdue_status() {
  set_has_overdue_status();
  if (overdue_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overdue_status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.overdue_status)
  return overdue_status_;
}
inline ::std::string* opt_trace_ans::release_overdue_status() {
  clear_has_overdue_status();
  if (overdue_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = overdue_status_;
    overdue_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_ans::set_allocated_overdue_status(::std::string* overdue_status) {
  if (overdue_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete overdue_status_;
  }
  if (overdue_status) {
    set_has_overdue_status();
    overdue_status_ = overdue_status;
  } else {
    clear_has_overdue_status();
    overdue_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.overdue_status)
}

// repeated .UBAS_PageView.year year_list = 10;
inline int opt_trace_ans::year_list_size() const {
  return year_list_.size();
}
inline void opt_trace_ans::clear_year_list() {
  year_list_.Clear();
}
inline const ::UBAS_PageView::year& opt_trace_ans::year_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.year_list)
  return year_list_.Get(index);
}
inline ::UBAS_PageView::year* opt_trace_ans::mutable_year_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.year_list)
  return year_list_.Mutable(index);
}
inline ::UBAS_PageView::year* opt_trace_ans::add_year_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.opt_trace_ans.year_list)
  return year_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::year >&
opt_trace_ans::year_list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.opt_trace_ans.year_list)
  return year_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::year >*
opt_trace_ans::mutable_year_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.opt_trace_ans.year_list)
  return &year_list_;
}

// optional .common.result_info result = 11;
inline bool opt_trace_ans::has_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void opt_trace_ans::set_has_result() {
  _has_bits_[0] |= 0x00000400u;
}
inline void opt_trace_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void opt_trace_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& opt_trace_ans::result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* opt_trace_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_ans.result)
  return result_;
}
inline ::common::result_info* opt_trace_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void opt_trace_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_ans.result)
}

// -------------------------------------------------------------------

// year

// optional bytes year_name = 1;
inline bool year::has_year_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void year::set_has_year_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void year::clear_has_year_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void year::clear_year_name() {
  if (year_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    year_name_->clear();
  }
  clear_has_year_name();
}
inline const ::std::string& year::year_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.year.year_name)
  return *year_name_;
}
inline void year::set_year_name(const ::std::string& value) {
  set_has_year_name();
  if (year_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    year_name_ = new ::std::string;
  }
  year_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.year.year_name)
}
inline void year::set_year_name(const char* value) {
  set_has_year_name();
  if (year_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    year_name_ = new ::std::string;
  }
  year_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.year.year_name)
}
inline void year::set_year_name(const void* value, size_t size) {
  set_has_year_name();
  if (year_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    year_name_ = new ::std::string;
  }
  year_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.year.year_name)
}
inline ::std::string* year::mutable_year_name() {
  set_has_year_name();
  if (year_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    year_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.year.year_name)
  return year_name_;
}
inline ::std::string* year::release_year_name() {
  clear_has_year_name();
  if (year_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = year_name_;
    year_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void year::set_allocated_year_name(::std::string* year_name) {
  if (year_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete year_name_;
  }
  if (year_name) {
    set_has_year_name();
    year_name_ = year_name;
  } else {
    clear_has_year_name();
    year_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.year.year_name)
}

// repeated .UBAS_PageView.month month_list = 2;
inline int year::month_list_size() const {
  return month_list_.size();
}
inline void year::clear_month_list() {
  month_list_.Clear();
}
inline const ::UBAS_PageView::month& year::month_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.year.month_list)
  return month_list_.Get(index);
}
inline ::UBAS_PageView::month* year::mutable_month_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.year.month_list)
  return month_list_.Mutable(index);
}
inline ::UBAS_PageView::month* year::add_month_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.year.month_list)
  return month_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::month >&
year::month_list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.year.month_list)
  return month_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::month >*
year::mutable_month_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.year.month_list)
  return &month_list_;
}

// -------------------------------------------------------------------

// month

// optional bytes month_name = 1;
inline bool month::has_month_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void month::set_has_month_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void month::clear_has_month_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void month::clear_month_name() {
  if (month_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    month_name_->clear();
  }
  clear_has_month_name();
}
inline const ::std::string& month::month_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.month.month_name)
  return *month_name_;
}
inline void month::set_month_name(const ::std::string& value) {
  set_has_month_name();
  if (month_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    month_name_ = new ::std::string;
  }
  month_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.month.month_name)
}
inline void month::set_month_name(const char* value) {
  set_has_month_name();
  if (month_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    month_name_ = new ::std::string;
  }
  month_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.month.month_name)
}
inline void month::set_month_name(const void* value, size_t size) {
  set_has_month_name();
  if (month_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    month_name_ = new ::std::string;
  }
  month_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.month.month_name)
}
inline ::std::string* month::mutable_month_name() {
  set_has_month_name();
  if (month_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    month_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.month.month_name)
  return month_name_;
}
inline ::std::string* month::release_month_name() {
  clear_has_month_name();
  if (month_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = month_name_;
    month_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void month::set_allocated_month_name(::std::string* month_name) {
  if (month_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete month_name_;
  }
  if (month_name) {
    set_has_month_name();
    month_name_ = month_name;
  } else {
    clear_has_month_name();
    month_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.month.month_name)
}

// repeated .UBAS_PageView.opt_trace opt_list = 2;
inline int month::opt_list_size() const {
  return opt_list_.size();
}
inline void month::clear_opt_list() {
  opt_list_.Clear();
}
inline const ::UBAS_PageView::opt_trace& month::opt_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.month.opt_list)
  return opt_list_.Get(index);
}
inline ::UBAS_PageView::opt_trace* month::mutable_opt_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.month.opt_list)
  return opt_list_.Mutable(index);
}
inline ::UBAS_PageView::opt_trace* month::add_opt_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.month.opt_list)
  return opt_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace >&
month::opt_list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.month.opt_list)
  return opt_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace >*
month::mutable_opt_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.month.opt_list)
  return &opt_list_;
}

// -------------------------------------------------------------------

// opt_trace

// optional int32 type = 1;
inline bool opt_trace::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 opt_trace::type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.type)
  return type_;
}
inline void opt_trace::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace.type)
}

// optional bytes opt_time = 2;
inline bool opt_trace::has_opt_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace::set_has_opt_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace::clear_has_opt_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace::clear_opt_time() {
  if (opt_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_time_->clear();
  }
  clear_has_opt_time();
}
inline const ::std::string& opt_trace::opt_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.opt_time)
  return *opt_time_;
}
inline void opt_trace::set_opt_time(const ::std::string& value) {
  set_has_opt_time();
  if (opt_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_time_ = new ::std::string;
  }
  opt_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace.opt_time)
}
inline void opt_trace::set_opt_time(const char* value) {
  set_has_opt_time();
  if (opt_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_time_ = new ::std::string;
  }
  opt_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace.opt_time)
}
inline void opt_trace::set_opt_time(const void* value, size_t size) {
  set_has_opt_time();
  if (opt_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_time_ = new ::std::string;
  }
  opt_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace.opt_time)
}
inline ::std::string* opt_trace::mutable_opt_time() {
  set_has_opt_time();
  if (opt_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.opt_time)
  return opt_time_;
}
inline ::std::string* opt_trace::release_opt_time() {
  clear_has_opt_time();
  if (opt_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_time_;
    opt_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace::set_allocated_opt_time(::std::string* opt_time) {
  if (opt_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_time_;
  }
  if (opt_time) {
    set_has_opt_time();
    opt_time_ = opt_time;
  } else {
    clear_has_opt_time();
    opt_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.opt_time)
}

// optional .UBAS_PageView.opt_trace_commons commons = 3;
inline bool opt_trace::has_commons() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace::set_has_commons() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace::clear_has_commons() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace::clear_commons() {
  if (commons_ != NULL) commons_->::UBAS_PageView::opt_trace_commons::Clear();
  clear_has_commons();
}
inline const ::UBAS_PageView::opt_trace_commons& opt_trace::commons() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::UBAS_PageView::opt_trace_commons* opt_trace::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::UBAS_PageView::opt_trace_commons;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.commons)
  return commons_;
}
inline ::UBAS_PageView::opt_trace_commons* opt_trace::release_commons() {
  clear_has_commons();
  ::UBAS_PageView::opt_trace_commons* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_commons(::UBAS_PageView::opt_trace_commons* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.commons)
}

// optional .UBAS_PageView.opt_trace_bid bid = 4;
inline bool opt_trace::has_bid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace::set_has_bid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace::clear_has_bid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace::clear_bid() {
  if (bid_ != NULL) bid_->::UBAS_PageView::opt_trace_bid::Clear();
  clear_has_bid();
}
inline const ::UBAS_PageView::opt_trace_bid& opt_trace::bid() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.bid)
  return bid_ != NULL ? *bid_ : *default_instance_->bid_;
}
inline ::UBAS_PageView::opt_trace_bid* opt_trace::mutable_bid() {
  set_has_bid();
  if (bid_ == NULL) bid_ = new ::UBAS_PageView::opt_trace_bid;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.bid)
  return bid_;
}
inline ::UBAS_PageView::opt_trace_bid* opt_trace::release_bid() {
  clear_has_bid();
  ::UBAS_PageView::opt_trace_bid* temp = bid_;
  bid_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_bid(::UBAS_PageView::opt_trace_bid* bid) {
  delete bid_;
  bid_ = bid;
  if (bid) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.bid)
}

// optional .UBAS_PageView.opt_trace_invoke invoke_trace = 5;
inline bool opt_trace::has_invoke_trace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace::set_has_invoke_trace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace::clear_has_invoke_trace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace::clear_invoke_trace() {
  if (invoke_trace_ != NULL) invoke_trace_->::UBAS_PageView::opt_trace_invoke::Clear();
  clear_has_invoke_trace();
}
inline const ::UBAS_PageView::opt_trace_invoke& opt_trace::invoke_trace() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.invoke_trace)
  return invoke_trace_ != NULL ? *invoke_trace_ : *default_instance_->invoke_trace_;
}
inline ::UBAS_PageView::opt_trace_invoke* opt_trace::mutable_invoke_trace() {
  set_has_invoke_trace();
  if (invoke_trace_ == NULL) invoke_trace_ = new ::UBAS_PageView::opt_trace_invoke;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.invoke_trace)
  return invoke_trace_;
}
inline ::UBAS_PageView::opt_trace_invoke* opt_trace::release_invoke_trace() {
  clear_has_invoke_trace();
  ::UBAS_PageView::opt_trace_invoke* temp = invoke_trace_;
  invoke_trace_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_invoke_trace(::UBAS_PageView::opt_trace_invoke* invoke_trace) {
  delete invoke_trace_;
  invoke_trace_ = invoke_trace;
  if (invoke_trace) {
    set_has_invoke_trace();
  } else {
    clear_has_invoke_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.invoke_trace)
}

// optional .UBAS_PageView.opt_trace_business business_trace = 6;
inline bool opt_trace::has_business_trace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace::set_has_business_trace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace::clear_has_business_trace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace::clear_business_trace() {
  if (business_trace_ != NULL) business_trace_->::UBAS_PageView::opt_trace_business::Clear();
  clear_has_business_trace();
}
inline const ::UBAS_PageView::opt_trace_business& opt_trace::business_trace() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.business_trace)
  return business_trace_ != NULL ? *business_trace_ : *default_instance_->business_trace_;
}
inline ::UBAS_PageView::opt_trace_business* opt_trace::mutable_business_trace() {
  set_has_business_trace();
  if (business_trace_ == NULL) business_trace_ = new ::UBAS_PageView::opt_trace_business;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.business_trace)
  return business_trace_;
}
inline ::UBAS_PageView::opt_trace_business* opt_trace::release_business_trace() {
  clear_has_business_trace();
  ::UBAS_PageView::opt_trace_business* temp = business_trace_;
  business_trace_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_business_trace(::UBAS_PageView::opt_trace_business* business_trace) {
  delete business_trace_;
  business_trace_ = business_trace;
  if (business_trace) {
    set_has_business_trace();
  } else {
    clear_has_business_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.business_trace)
}

// repeated .UBAS_PageView.opt_trace_page page_trace_list = 7;
inline int opt_trace::page_trace_list_size() const {
  return page_trace_list_.size();
}
inline void opt_trace::clear_page_trace_list() {
  page_trace_list_.Clear();
}
inline const ::UBAS_PageView::opt_trace_page& opt_trace::page_trace_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.page_trace_list)
  return page_trace_list_.Get(index);
}
inline ::UBAS_PageView::opt_trace_page* opt_trace::mutable_page_trace_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.page_trace_list)
  return page_trace_list_.Mutable(index);
}
inline ::UBAS_PageView::opt_trace_page* opt_trace::add_page_trace_list() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.opt_trace.page_trace_list)
  return page_trace_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace_page >&
opt_trace::page_trace_list() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.opt_trace.page_trace_list)
  return page_trace_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::opt_trace_page >*
opt_trace::mutable_page_trace_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.opt_trace.page_trace_list)
  return &page_trace_list_;
}

// optional .UBAS_PageView.opt_trace_fund_running_water frw_trace = 8;
inline bool opt_trace::has_frw_trace() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void opt_trace::set_has_frw_trace() {
  _has_bits_[0] |= 0x00000080u;
}
inline void opt_trace::clear_has_frw_trace() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void opt_trace::clear_frw_trace() {
  if (frw_trace_ != NULL) frw_trace_->::UBAS_PageView::opt_trace_fund_running_water::Clear();
  clear_has_frw_trace();
}
inline const ::UBAS_PageView::opt_trace_fund_running_water& opt_trace::frw_trace() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.frw_trace)
  return frw_trace_ != NULL ? *frw_trace_ : *default_instance_->frw_trace_;
}
inline ::UBAS_PageView::opt_trace_fund_running_water* opt_trace::mutable_frw_trace() {
  set_has_frw_trace();
  if (frw_trace_ == NULL) frw_trace_ = new ::UBAS_PageView::opt_trace_fund_running_water;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.frw_trace)
  return frw_trace_;
}
inline ::UBAS_PageView::opt_trace_fund_running_water* opt_trace::release_frw_trace() {
  clear_has_frw_trace();
  ::UBAS_PageView::opt_trace_fund_running_water* temp = frw_trace_;
  frw_trace_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_frw_trace(::UBAS_PageView::opt_trace_fund_running_water* frw_trace) {
  delete frw_trace_;
  frw_trace_ = frw_trace;
  if (frw_trace) {
    set_has_frw_trace();
  } else {
    clear_has_frw_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.frw_trace)
}

// optional .UBAS_PageView.opt_trace_material material_trace = 9;
inline bool opt_trace::has_material_trace() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void opt_trace::set_has_material_trace() {
  _has_bits_[0] |= 0x00000100u;
}
inline void opt_trace::clear_has_material_trace() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void opt_trace::clear_material_trace() {
  if (material_trace_ != NULL) material_trace_->::UBAS_PageView::opt_trace_material::Clear();
  clear_has_material_trace();
}
inline const ::UBAS_PageView::opt_trace_material& opt_trace::material_trace() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.material_trace)
  return material_trace_ != NULL ? *material_trace_ : *default_instance_->material_trace_;
}
inline ::UBAS_PageView::opt_trace_material* opt_trace::mutable_material_trace() {
  set_has_material_trace();
  if (material_trace_ == NULL) material_trace_ = new ::UBAS_PageView::opt_trace_material;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.material_trace)
  return material_trace_;
}
inline ::UBAS_PageView::opt_trace_material* opt_trace::release_material_trace() {
  clear_has_material_trace();
  ::UBAS_PageView::opt_trace_material* temp = material_trace_;
  material_trace_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_material_trace(::UBAS_PageView::opt_trace_material* material_trace) {
  delete material_trace_;
  material_trace_ = material_trace;
  if (material_trace) {
    set_has_material_trace();
  } else {
    clear_has_material_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.material_trace)
}

// optional .UBAS_PageView.verify_trace vtrace = 10;
inline bool opt_trace::has_vtrace() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void opt_trace::set_has_vtrace() {
  _has_bits_[0] |= 0x00000200u;
}
inline void opt_trace::clear_has_vtrace() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void opt_trace::clear_vtrace() {
  if (vtrace_ != NULL) vtrace_->::UBAS_PageView::verify_trace::Clear();
  clear_has_vtrace();
}
inline const ::UBAS_PageView::verify_trace& opt_trace::vtrace() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace.vtrace)
  return vtrace_ != NULL ? *vtrace_ : *default_instance_->vtrace_;
}
inline ::UBAS_PageView::verify_trace* opt_trace::mutable_vtrace() {
  set_has_vtrace();
  if (vtrace_ == NULL) vtrace_ = new ::UBAS_PageView::verify_trace;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace.vtrace)
  return vtrace_;
}
inline ::UBAS_PageView::verify_trace* opt_trace::release_vtrace() {
  clear_has_vtrace();
  ::UBAS_PageView::verify_trace* temp = vtrace_;
  vtrace_ = NULL;
  return temp;
}
inline void opt_trace::set_allocated_vtrace(::UBAS_PageView::verify_trace* vtrace) {
  delete vtrace_;
  vtrace_ = vtrace;
  if (vtrace) {
    set_has_vtrace();
  } else {
    clear_has_vtrace();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace.vtrace)
}

// -------------------------------------------------------------------

// opt_trace_commons

// optional bytes client_location = 1;
inline bool opt_trace_commons::has_client_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_commons::set_has_client_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_commons::clear_has_client_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_commons::clear_client_location() {
  if (client_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_location_->clear();
  }
  clear_has_client_location();
}
inline const ::std::string& opt_trace_commons::client_location() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_location)
  return *client_location_;
}
inline void opt_trace_commons::set_client_location(const ::std::string& value) {
  set_has_client_location();
  if (client_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_location_ = new ::std::string;
  }
  client_location_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_location)
}
inline void opt_trace_commons::set_client_location(const char* value) {
  set_has_client_location();
  if (client_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_location_ = new ::std::string;
  }
  client_location_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_location)
}
inline void opt_trace_commons::set_client_location(const void* value, size_t size) {
  set_has_client_location();
  if (client_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_location_ = new ::std::string;
  }
  client_location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_location)
}
inline ::std::string* opt_trace_commons::mutable_client_location() {
  set_has_client_location();
  if (client_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_location)
  return client_location_;
}
inline ::std::string* opt_trace_commons::release_client_location() {
  clear_has_client_location();
  if (client_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_location_;
    client_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_location(::std::string* client_location) {
  if (client_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_location_;
  }
  if (client_location) {
    set_has_client_location();
    client_location_ = client_location;
  } else {
    clear_has_client_location();
    client_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_location)
}

// optional bytes client_type = 2;
inline bool opt_trace_commons::has_client_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_commons::set_has_client_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_commons::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_commons::clear_client_type() {
  if (client_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_type_->clear();
  }
  clear_has_client_type();
}
inline const ::std::string& opt_trace_commons::client_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_type)
  return *client_type_;
}
inline void opt_trace_commons::set_client_type(const ::std::string& value) {
  set_has_client_type();
  if (client_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_type_ = new ::std::string;
  }
  client_type_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_type)
}
inline void opt_trace_commons::set_client_type(const char* value) {
  set_has_client_type();
  if (client_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_type_ = new ::std::string;
  }
  client_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_type)
}
inline void opt_trace_commons::set_client_type(const void* value, size_t size) {
  set_has_client_type();
  if (client_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_type_ = new ::std::string;
  }
  client_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_type)
}
inline ::std::string* opt_trace_commons::mutable_client_type() {
  set_has_client_type();
  if (client_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_type)
  return client_type_;
}
inline ::std::string* opt_trace_commons::release_client_type() {
  clear_has_client_type();
  if (client_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_type_;
    client_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_type(::std::string* client_type) {
  if (client_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_type_;
  }
  if (client_type) {
    set_has_client_type();
    client_type_ = client_type;
  } else {
    clear_has_client_type();
    client_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_type)
}

// optional bytes client_id = 3;
inline bool opt_trace_commons::has_client_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_commons::set_has_client_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_commons::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_commons::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& opt_trace_commons::client_id() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_id)
  return *client_id_;
}
inline void opt_trace_commons::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_id)
}
inline void opt_trace_commons::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_id)
}
inline void opt_trace_commons::set_client_id(const void* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_id)
}
inline ::std::string* opt_trace_commons::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_id)
  return client_id_;
}
inline ::std::string* opt_trace_commons::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_id)
}

// optional bytes client_brand = 4;
inline bool opt_trace_commons::has_client_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_commons::set_has_client_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_commons::clear_has_client_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_commons::clear_client_brand() {
  if (client_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_brand_->clear();
  }
  clear_has_client_brand();
}
inline const ::std::string& opt_trace_commons::client_brand() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_brand)
  return *client_brand_;
}
inline void opt_trace_commons::set_client_brand(const ::std::string& value) {
  set_has_client_brand();
  if (client_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_brand_ = new ::std::string;
  }
  client_brand_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_brand)
}
inline void opt_trace_commons::set_client_brand(const char* value) {
  set_has_client_brand();
  if (client_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_brand_ = new ::std::string;
  }
  client_brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_brand)
}
inline void opt_trace_commons::set_client_brand(const void* value, size_t size) {
  set_has_client_brand();
  if (client_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_brand_ = new ::std::string;
  }
  client_brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_brand)
}
inline ::std::string* opt_trace_commons::mutable_client_brand() {
  set_has_client_brand();
  if (client_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_brand)
  return client_brand_;
}
inline ::std::string* opt_trace_commons::release_client_brand() {
  clear_has_client_brand();
  if (client_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_brand_;
    client_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_brand(::std::string* client_brand) {
  if (client_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_brand_;
  }
  if (client_brand) {
    set_has_client_brand();
    client_brand_ = client_brand;
  } else {
    clear_has_client_brand();
    client_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_brand)
}

// optional bytes client_model = 5;
inline bool opt_trace_commons::has_client_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_commons::set_has_client_model() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_commons::clear_has_client_model() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_commons::clear_client_model() {
  if (client_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_model_->clear();
  }
  clear_has_client_model();
}
inline const ::std::string& opt_trace_commons::client_model() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_model)
  return *client_model_;
}
inline void opt_trace_commons::set_client_model(const ::std::string& value) {
  set_has_client_model();
  if (client_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_model_ = new ::std::string;
  }
  client_model_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_model)
}
inline void opt_trace_commons::set_client_model(const char* value) {
  set_has_client_model();
  if (client_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_model_ = new ::std::string;
  }
  client_model_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_model)
}
inline void opt_trace_commons::set_client_model(const void* value, size_t size) {
  set_has_client_model();
  if (client_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_model_ = new ::std::string;
  }
  client_model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_model)
}
inline ::std::string* opt_trace_commons::mutable_client_model() {
  set_has_client_model();
  if (client_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_model)
  return client_model_;
}
inline ::std::string* opt_trace_commons::release_client_model() {
  clear_has_client_model();
  if (client_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_model_;
    client_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_model(::std::string* client_model) {
  if (client_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_model_;
  }
  if (client_model) {
    set_has_client_model();
    client_model_ = client_model;
  } else {
    clear_has_client_model();
    client_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_model)
}

// optional bytes internet_type = 6;
inline bool opt_trace_commons::has_internet_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_commons::set_has_internet_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_commons::clear_has_internet_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_commons::clear_internet_type() {
  if (internet_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internet_type_->clear();
  }
  clear_has_internet_type();
}
inline const ::std::string& opt_trace_commons::internet_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.internet_type)
  return *internet_type_;
}
inline void opt_trace_commons::set_internet_type(const ::std::string& value) {
  set_has_internet_type();
  if (internet_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internet_type_ = new ::std::string;
  }
  internet_type_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.internet_type)
}
inline void opt_trace_commons::set_internet_type(const char* value) {
  set_has_internet_type();
  if (internet_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internet_type_ = new ::std::string;
  }
  internet_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.internet_type)
}
inline void opt_trace_commons::set_internet_type(const void* value, size_t size) {
  set_has_internet_type();
  if (internet_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internet_type_ = new ::std::string;
  }
  internet_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.internet_type)
}
inline ::std::string* opt_trace_commons::mutable_internet_type() {
  set_has_internet_type();
  if (internet_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    internet_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.internet_type)
  return internet_type_;
}
inline ::std::string* opt_trace_commons::release_internet_type() {
  clear_has_internet_type();
  if (internet_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = internet_type_;
    internet_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_internet_type(::std::string* internet_type) {
  if (internet_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete internet_type_;
  }
  if (internet_type) {
    set_has_internet_type();
    internet_type_ = internet_type;
  } else {
    clear_has_internet_type();
    internet_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.internet_type)
}

// optional bytes client_ip = 7;
inline bool opt_trace_commons::has_client_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void opt_trace_commons::set_has_client_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void opt_trace_commons::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void opt_trace_commons::clear_client_ip() {
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_->clear();
  }
  clear_has_client_ip();
}
inline const ::std::string& opt_trace_commons::client_ip() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_ip)
  return *client_ip_;
}
inline void opt_trace_commons::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_ip)
}
inline void opt_trace_commons::set_client_ip(const char* value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_ip)
}
inline void opt_trace_commons::set_client_ip(const void* value, size_t size) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_ip)
}
inline ::std::string* opt_trace_commons::mutable_client_ip() {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_ip)
  return client_ip_;
}
inline ::std::string* opt_trace_commons::release_client_ip() {
  clear_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_;
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_;
  }
  if (client_ip) {
    set_has_client_ip();
    client_ip_ = client_ip;
  } else {
    clear_has_client_ip();
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_ip)
}

// optional bytes client_ip_location = 8;
inline bool opt_trace_commons::has_client_ip_location() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void opt_trace_commons::set_has_client_ip_location() {
  _has_bits_[0] |= 0x00000080u;
}
inline void opt_trace_commons::clear_has_client_ip_location() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void opt_trace_commons::clear_client_ip_location() {
  if (client_ip_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_location_->clear();
  }
  clear_has_client_ip_location();
}
inline const ::std::string& opt_trace_commons::client_ip_location() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_commons.client_ip_location)
  return *client_ip_location_;
}
inline void opt_trace_commons::set_client_ip_location(const ::std::string& value) {
  set_has_client_ip_location();
  if (client_ip_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_location_ = new ::std::string;
  }
  client_ip_location_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_commons.client_ip_location)
}
inline void opt_trace_commons::set_client_ip_location(const char* value) {
  set_has_client_ip_location();
  if (client_ip_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_location_ = new ::std::string;
  }
  client_ip_location_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_commons.client_ip_location)
}
inline void opt_trace_commons::set_client_ip_location(const void* value, size_t size) {
  set_has_client_ip_location();
  if (client_ip_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_location_ = new ::std::string;
  }
  client_ip_location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_commons.client_ip_location)
}
inline ::std::string* opt_trace_commons::mutable_client_ip_location() {
  set_has_client_ip_location();
  if (client_ip_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_ip_location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_commons.client_ip_location)
  return client_ip_location_;
}
inline ::std::string* opt_trace_commons::release_client_ip_location() {
  clear_has_client_ip_location();
  if (client_ip_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_location_;
    client_ip_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_commons::set_allocated_client_ip_location(::std::string* client_ip_location) {
  if (client_ip_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_location_;
  }
  if (client_ip_location) {
    set_has_client_ip_location();
    client_ip_location_ = client_ip_location;
  } else {
    clear_has_client_ip_location();
    client_ip_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_commons.client_ip_location)
}

// -------------------------------------------------------------------

// opt_trace_bid

// optional bytes bid_id = 1;
inline bool opt_trace_bid::has_bid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_bid::set_has_bid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_bid::clear_has_bid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_bid::clear_bid_id() {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_->clear();
  }
  clear_has_bid_id();
}
inline const ::std::string& opt_trace_bid::bid_id() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_id)
  return *bid_id_;
}
inline void opt_trace_bid::set_bid_id(const ::std::string& value) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_id)
}
inline void opt_trace_bid::set_bid_id(const char* value) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_id)
}
inline void opt_trace_bid::set_bid_id(const void* value, size_t size) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_id)
}
inline ::std::string* opt_trace_bid::mutable_bid_id() {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_id)
  return bid_id_;
}
inline ::std::string* opt_trace_bid::release_bid_id() {
  clear_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_id_;
    bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_id(::std::string* bid_id) {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_id_;
  }
  if (bid_id) {
    set_has_bid_id();
    bid_id_ = bid_id;
  } else {
    clear_has_bid_id();
    bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_id)
}

// optional bytes bid_avatar = 2;
inline bool opt_trace_bid::has_bid_avatar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_bid::set_has_bid_avatar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_bid::clear_has_bid_avatar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_bid::clear_bid_avatar() {
  if (bid_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_avatar_->clear();
  }
  clear_has_bid_avatar();
}
inline const ::std::string& opt_trace_bid::bid_avatar() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_avatar)
  return *bid_avatar_;
}
inline void opt_trace_bid::set_bid_avatar(const ::std::string& value) {
  set_has_bid_avatar();
  if (bid_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_avatar_ = new ::std::string;
  }
  bid_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_avatar)
}
inline void opt_trace_bid::set_bid_avatar(const char* value) {
  set_has_bid_avatar();
  if (bid_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_avatar_ = new ::std::string;
  }
  bid_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_avatar)
}
inline void opt_trace_bid::set_bid_avatar(const void* value, size_t size) {
  set_has_bid_avatar();
  if (bid_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_avatar_ = new ::std::string;
  }
  bid_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_avatar)
}
inline ::std::string* opt_trace_bid::mutable_bid_avatar() {
  set_has_bid_avatar();
  if (bid_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_avatar)
  return bid_avatar_;
}
inline ::std::string* opt_trace_bid::release_bid_avatar() {
  clear_has_bid_avatar();
  if (bid_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_avatar_;
    bid_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_avatar(::std::string* bid_avatar) {
  if (bid_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_avatar_;
  }
  if (bid_avatar) {
    set_has_bid_avatar();
    bid_avatar_ = bid_avatar;
  } else {
    clear_has_bid_avatar();
    bid_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_avatar)
}

// optional bytes bid_nickname = 3;
inline bool opt_trace_bid::has_bid_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_bid::set_has_bid_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_bid::clear_has_bid_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_bid::clear_bid_nickname() {
  if (bid_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_nickname_->clear();
  }
  clear_has_bid_nickname();
}
inline const ::std::string& opt_trace_bid::bid_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_nickname)
  return *bid_nickname_;
}
inline void opt_trace_bid::set_bid_nickname(const ::std::string& value) {
  set_has_bid_nickname();
  if (bid_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_nickname_ = new ::std::string;
  }
  bid_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_nickname)
}
inline void opt_trace_bid::set_bid_nickname(const char* value) {
  set_has_bid_nickname();
  if (bid_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_nickname_ = new ::std::string;
  }
  bid_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_nickname)
}
inline void opt_trace_bid::set_bid_nickname(const void* value, size_t size) {
  set_has_bid_nickname();
  if (bid_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_nickname_ = new ::std::string;
  }
  bid_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_nickname)
}
inline ::std::string* opt_trace_bid::mutable_bid_nickname() {
  set_has_bid_nickname();
  if (bid_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_nickname)
  return bid_nickname_;
}
inline ::std::string* opt_trace_bid::release_bid_nickname() {
  clear_has_bid_nickname();
  if (bid_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_nickname_;
    bid_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_nickname(::std::string* bid_nickname) {
  if (bid_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_nickname_;
  }
  if (bid_nickname) {
    set_has_bid_nickname();
    bid_nickname_ = bid_nickname;
  } else {
    clear_has_bid_nickname();
    bid_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_nickname)
}

// optional bytes bid_time = 4;
inline bool opt_trace_bid::has_bid_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_bid::set_has_bid_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_bid::clear_has_bid_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_bid::clear_bid_time() {
  if (bid_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_time_->clear();
  }
  clear_has_bid_time();
}
inline const ::std::string& opt_trace_bid::bid_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_time)
  return *bid_time_;
}
inline void opt_trace_bid::set_bid_time(const ::std::string& value) {
  set_has_bid_time();
  if (bid_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_time_ = new ::std::string;
  }
  bid_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_time)
}
inline void opt_trace_bid::set_bid_time(const char* value) {
  set_has_bid_time();
  if (bid_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_time_ = new ::std::string;
  }
  bid_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_time)
}
inline void opt_trace_bid::set_bid_time(const void* value, size_t size) {
  set_has_bid_time();
  if (bid_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_time_ = new ::std::string;
  }
  bid_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_time)
}
inline ::std::string* opt_trace_bid::mutable_bid_time() {
  set_has_bid_time();
  if (bid_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_time)
  return bid_time_;
}
inline ::std::string* opt_trace_bid::release_bid_time() {
  clear_has_bid_time();
  if (bid_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_time_;
    bid_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_time(::std::string* bid_time) {
  if (bid_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_time_;
  }
  if (bid_time) {
    set_has_bid_time();
    bid_time_ = bid_time;
  } else {
    clear_has_bid_time();
    bid_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_time)
}

// optional bytes bid_title = 5;
inline bool opt_trace_bid::has_bid_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_bid::set_has_bid_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_bid::clear_has_bid_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_bid::clear_bid_title() {
  if (bid_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_title_->clear();
  }
  clear_has_bid_title();
}
inline const ::std::string& opt_trace_bid::bid_title() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_title)
  return *bid_title_;
}
inline void opt_trace_bid::set_bid_title(const ::std::string& value) {
  set_has_bid_title();
  if (bid_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_title_ = new ::std::string;
  }
  bid_title_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_title)
}
inline void opt_trace_bid::set_bid_title(const char* value) {
  set_has_bid_title();
  if (bid_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_title_ = new ::std::string;
  }
  bid_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_title)
}
inline void opt_trace_bid::set_bid_title(const void* value, size_t size) {
  set_has_bid_title();
  if (bid_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_title_ = new ::std::string;
  }
  bid_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_title)
}
inline ::std::string* opt_trace_bid::mutable_bid_title() {
  set_has_bid_title();
  if (bid_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_title)
  return bid_title_;
}
inline ::std::string* opt_trace_bid::release_bid_title() {
  clear_has_bid_title();
  if (bid_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_title_;
    bid_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_title(::std::string* bid_title) {
  if (bid_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_title_;
  }
  if (bid_title) {
    set_has_bid_title();
    bid_title_ = bid_title;
  } else {
    clear_has_bid_title();
    bid_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_title)
}

// optional float bid_amount = 6;
inline bool opt_trace_bid::has_bid_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_bid::set_has_bid_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_bid::clear_has_bid_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_bid::clear_bid_amount() {
  bid_amount_ = 0;
  clear_has_bid_amount();
}
inline float opt_trace_bid::bid_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_amount)
  return bid_amount_;
}
inline void opt_trace_bid::set_bid_amount(float value) {
  set_has_bid_amount();
  bid_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_amount)
}

// optional bytes bid_rate = 7;
inline bool opt_trace_bid::has_bid_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void opt_trace_bid::set_has_bid_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void opt_trace_bid::clear_has_bid_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void opt_trace_bid::clear_bid_rate() {
  if (bid_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_rate_->clear();
  }
  clear_has_bid_rate();
}
inline const ::std::string& opt_trace_bid::bid_rate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_rate)
  return *bid_rate_;
}
inline void opt_trace_bid::set_bid_rate(const ::std::string& value) {
  set_has_bid_rate();
  if (bid_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_rate_ = new ::std::string;
  }
  bid_rate_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_rate)
}
inline void opt_trace_bid::set_bid_rate(const char* value) {
  set_has_bid_rate();
  if (bid_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_rate_ = new ::std::string;
  }
  bid_rate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_rate)
}
inline void opt_trace_bid::set_bid_rate(const void* value, size_t size) {
  set_has_bid_rate();
  if (bid_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_rate_ = new ::std::string;
  }
  bid_rate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_rate)
}
inline ::std::string* opt_trace_bid::mutable_bid_rate() {
  set_has_bid_rate();
  if (bid_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_rate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_rate)
  return bid_rate_;
}
inline ::std::string* opt_trace_bid::release_bid_rate() {
  clear_has_bid_rate();
  if (bid_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_rate_;
    bid_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_rate(::std::string* bid_rate) {
  if (bid_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_rate_;
  }
  if (bid_rate) {
    set_has_bid_rate();
    bid_rate_ = bid_rate;
  } else {
    clear_has_bid_rate();
    bid_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_rate)
}

// optional bytes bid_feerate = 8;
inline bool opt_trace_bid::has_bid_feerate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void opt_trace_bid::set_has_bid_feerate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void opt_trace_bid::clear_has_bid_feerate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void opt_trace_bid::clear_bid_feerate() {
  if (bid_feerate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_feerate_->clear();
  }
  clear_has_bid_feerate();
}
inline const ::std::string& opt_trace_bid::bid_feerate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_feerate)
  return *bid_feerate_;
}
inline void opt_trace_bid::set_bid_feerate(const ::std::string& value) {
  set_has_bid_feerate();
  if (bid_feerate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_feerate_ = new ::std::string;
  }
  bid_feerate_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_feerate)
}
inline void opt_trace_bid::set_bid_feerate(const char* value) {
  set_has_bid_feerate();
  if (bid_feerate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_feerate_ = new ::std::string;
  }
  bid_feerate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_feerate)
}
inline void opt_trace_bid::set_bid_feerate(const void* value, size_t size) {
  set_has_bid_feerate();
  if (bid_feerate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_feerate_ = new ::std::string;
  }
  bid_feerate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_feerate)
}
inline ::std::string* opt_trace_bid::mutable_bid_feerate() {
  set_has_bid_feerate();
  if (bid_feerate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_feerate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_feerate)
  return bid_feerate_;
}
inline ::std::string* opt_trace_bid::release_bid_feerate() {
  clear_has_bid_feerate();
  if (bid_feerate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_feerate_;
    bid_feerate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_feerate(::std::string* bid_feerate) {
  if (bid_feerate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_feerate_;
  }
  if (bid_feerate) {
    set_has_bid_feerate();
    bid_feerate_ = bid_feerate;
  } else {
    clear_has_bid_feerate();
    bid_feerate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_feerate)
}

// optional bytes bid_deadline = 9;
inline bool opt_trace_bid::has_bid_deadline() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void opt_trace_bid::set_has_bid_deadline() {
  _has_bits_[0] |= 0x00000100u;
}
inline void opt_trace_bid::clear_has_bid_deadline() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void opt_trace_bid::clear_bid_deadline() {
  if (bid_deadline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_deadline_->clear();
  }
  clear_has_bid_deadline();
}
inline const ::std::string& opt_trace_bid::bid_deadline() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.bid_deadline)
  return *bid_deadline_;
}
inline void opt_trace_bid::set_bid_deadline(const ::std::string& value) {
  set_has_bid_deadline();
  if (bid_deadline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_deadline_ = new ::std::string;
  }
  bid_deadline_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.bid_deadline)
}
inline void opt_trace_bid::set_bid_deadline(const char* value) {
  set_has_bid_deadline();
  if (bid_deadline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_deadline_ = new ::std::string;
  }
  bid_deadline_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.bid_deadline)
}
inline void opt_trace_bid::set_bid_deadline(const void* value, size_t size) {
  set_has_bid_deadline();
  if (bid_deadline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_deadline_ = new ::std::string;
  }
  bid_deadline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.bid_deadline)
}
inline ::std::string* opt_trace_bid::mutable_bid_deadline() {
  set_has_bid_deadline();
  if (bid_deadline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_deadline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.bid_deadline)
  return bid_deadline_;
}
inline ::std::string* opt_trace_bid::release_bid_deadline() {
  clear_has_bid_deadline();
  if (bid_deadline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_deadline_;
    bid_deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_bid_deadline(::std::string* bid_deadline) {
  if (bid_deadline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_deadline_;
  }
  if (bid_deadline) {
    set_has_bid_deadline();
    bid_deadline_ = bid_deadline;
  } else {
    clear_has_bid_deadline();
    bid_deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.bid_deadline)
}

// optional bytes diligence_nickname = 10;
inline bool opt_trace_bid::has_diligence_nickname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void opt_trace_bid::set_has_diligence_nickname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void opt_trace_bid::clear_has_diligence_nickname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void opt_trace_bid::clear_diligence_nickname() {
  if (diligence_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_nickname_->clear();
  }
  clear_has_diligence_nickname();
}
inline const ::std::string& opt_trace_bid::diligence_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.diligence_nickname)
  return *diligence_nickname_;
}
inline void opt_trace_bid::set_diligence_nickname(const ::std::string& value) {
  set_has_diligence_nickname();
  if (diligence_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_nickname_ = new ::std::string;
  }
  diligence_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.diligence_nickname)
}
inline void opt_trace_bid::set_diligence_nickname(const char* value) {
  set_has_diligence_nickname();
  if (diligence_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_nickname_ = new ::std::string;
  }
  diligence_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.diligence_nickname)
}
inline void opt_trace_bid::set_diligence_nickname(const void* value, size_t size) {
  set_has_diligence_nickname();
  if (diligence_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_nickname_ = new ::std::string;
  }
  diligence_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.diligence_nickname)
}
inline ::std::string* opt_trace_bid::mutable_diligence_nickname() {
  set_has_diligence_nickname();
  if (diligence_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.diligence_nickname)
  return diligence_nickname_;
}
inline ::std::string* opt_trace_bid::release_diligence_nickname() {
  clear_has_diligence_nickname();
  if (diligence_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligence_nickname_;
    diligence_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_diligence_nickname(::std::string* diligence_nickname) {
  if (diligence_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligence_nickname_;
  }
  if (diligence_nickname) {
    set_has_diligence_nickname();
    diligence_nickname_ = diligence_nickname;
  } else {
    clear_has_diligence_nickname();
    diligence_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.diligence_nickname)
}

// optional bytes diligence_avatar = 11;
inline bool opt_trace_bid::has_diligence_avatar() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void opt_trace_bid::set_has_diligence_avatar() {
  _has_bits_[0] |= 0x00000400u;
}
inline void opt_trace_bid::clear_has_diligence_avatar() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void opt_trace_bid::clear_diligence_avatar() {
  if (diligence_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_avatar_->clear();
  }
  clear_has_diligence_avatar();
}
inline const ::std::string& opt_trace_bid::diligence_avatar() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_bid.diligence_avatar)
  return *diligence_avatar_;
}
inline void opt_trace_bid::set_diligence_avatar(const ::std::string& value) {
  set_has_diligence_avatar();
  if (diligence_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_avatar_ = new ::std::string;
  }
  diligence_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_bid.diligence_avatar)
}
inline void opt_trace_bid::set_diligence_avatar(const char* value) {
  set_has_diligence_avatar();
  if (diligence_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_avatar_ = new ::std::string;
  }
  diligence_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_bid.diligence_avatar)
}
inline void opt_trace_bid::set_diligence_avatar(const void* value, size_t size) {
  set_has_diligence_avatar();
  if (diligence_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_avatar_ = new ::std::string;
  }
  diligence_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_bid.diligence_avatar)
}
inline ::std::string* opt_trace_bid::mutable_diligence_avatar() {
  set_has_diligence_avatar();
  if (diligence_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_bid.diligence_avatar)
  return diligence_avatar_;
}
inline ::std::string* opt_trace_bid::release_diligence_avatar() {
  clear_has_diligence_avatar();
  if (diligence_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligence_avatar_;
    diligence_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_bid::set_allocated_diligence_avatar(::std::string* diligence_avatar) {
  if (diligence_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligence_avatar_;
  }
  if (diligence_avatar) {
    set_has_diligence_avatar();
    diligence_avatar_ = diligence_avatar;
  } else {
    clear_has_diligence_avatar();
    diligence_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_bid.diligence_avatar)
}

// -------------------------------------------------------------------

// opt_trace_invoke

// optional bytes invoke_name = 1;
inline bool opt_trace_invoke::has_invoke_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_invoke::set_has_invoke_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_invoke::clear_has_invoke_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_invoke::clear_invoke_name() {
  if (invoke_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_name_->clear();
  }
  clear_has_invoke_name();
}
inline const ::std::string& opt_trace_invoke::invoke_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.invoke_name)
  return *invoke_name_;
}
inline void opt_trace_invoke::set_invoke_name(const ::std::string& value) {
  set_has_invoke_name();
  if (invoke_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_name_ = new ::std::string;
  }
  invoke_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.invoke_name)
}
inline void opt_trace_invoke::set_invoke_name(const char* value) {
  set_has_invoke_name();
  if (invoke_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_name_ = new ::std::string;
  }
  invoke_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_invoke.invoke_name)
}
inline void opt_trace_invoke::set_invoke_name(const void* value, size_t size) {
  set_has_invoke_name();
  if (invoke_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_name_ = new ::std::string;
  }
  invoke_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_invoke.invoke_name)
}
inline ::std::string* opt_trace_invoke::mutable_invoke_name() {
  set_has_invoke_name();
  if (invoke_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_invoke.invoke_name)
  return invoke_name_;
}
inline ::std::string* opt_trace_invoke::release_invoke_name() {
  clear_has_invoke_name();
  if (invoke_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = invoke_name_;
    invoke_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_invoke::set_allocated_invoke_name(::std::string* invoke_name) {
  if (invoke_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoke_name_;
  }
  if (invoke_name) {
    set_has_invoke_name();
    invoke_name_ = invoke_name;
  } else {
    clear_has_invoke_name();
    invoke_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_invoke.invoke_name)
}

// optional int32 verify_result = 2;
inline bool opt_trace_invoke::has_verify_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_invoke::set_has_verify_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_invoke::clear_has_verify_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_invoke::clear_verify_result() {
  verify_result_ = 0;
  clear_has_verify_result();
}
inline ::google::protobuf::int32 opt_trace_invoke::verify_result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.verify_result)
  return verify_result_;
}
inline void opt_trace_invoke::set_verify_result(::google::protobuf::int32 value) {
  set_has_verify_result();
  verify_result_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.verify_result)
}

// optional int32 handle_result = 3;
inline bool opt_trace_invoke::has_handle_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_invoke::set_has_handle_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_invoke::clear_has_handle_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_invoke::clear_handle_result() {
  handle_result_ = 0;
  clear_has_handle_result();
}
inline ::google::protobuf::int32 opt_trace_invoke::handle_result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.handle_result)
  return handle_result_;
}
inline void opt_trace_invoke::set_handle_result(::google::protobuf::int32 value) {
  set_has_handle_result();
  handle_result_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.handle_result)
}

// optional bytes error_msg = 4;
inline bool opt_trace_invoke::has_error_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_invoke::set_has_error_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_invoke::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_invoke::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& opt_trace_invoke::error_msg() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.error_msg)
  return *error_msg_;
}
inline void opt_trace_invoke::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.error_msg)
}
inline void opt_trace_invoke::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_invoke.error_msg)
}
inline void opt_trace_invoke::set_error_msg(const void* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_invoke.error_msg)
}
inline ::std::string* opt_trace_invoke::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_invoke.error_msg)
  return error_msg_;
}
inline ::std::string* opt_trace_invoke::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_invoke::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  if (error_msg) {
    set_has_error_msg();
    error_msg_ = error_msg;
  } else {
    clear_has_error_msg();
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_invoke.error_msg)
}

// optional bytes invoke_version = 5;
inline bool opt_trace_invoke::has_invoke_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_invoke::set_has_invoke_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_invoke::clear_has_invoke_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_invoke::clear_invoke_version() {
  if (invoke_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_version_->clear();
  }
  clear_has_invoke_version();
}
inline const ::std::string& opt_trace_invoke::invoke_version() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.invoke_version)
  return *invoke_version_;
}
inline void opt_trace_invoke::set_invoke_version(const ::std::string& value) {
  set_has_invoke_version();
  if (invoke_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_version_ = new ::std::string;
  }
  invoke_version_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.invoke_version)
}
inline void opt_trace_invoke::set_invoke_version(const char* value) {
  set_has_invoke_version();
  if (invoke_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_version_ = new ::std::string;
  }
  invoke_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_invoke.invoke_version)
}
inline void opt_trace_invoke::set_invoke_version(const void* value, size_t size) {
  set_has_invoke_version();
  if (invoke_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_version_ = new ::std::string;
  }
  invoke_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_invoke.invoke_version)
}
inline ::std::string* opt_trace_invoke::mutable_invoke_version() {
  set_has_invoke_version();
  if (invoke_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invoke_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_invoke.invoke_version)
  return invoke_version_;
}
inline ::std::string* opt_trace_invoke::release_invoke_version() {
  clear_has_invoke_version();
  if (invoke_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = invoke_version_;
    invoke_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_invoke::set_allocated_invoke_version(::std::string* invoke_version) {
  if (invoke_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoke_version_;
  }
  if (invoke_version) {
    set_has_invoke_version();
    invoke_version_ = invoke_version;
  } else {
    clear_has_invoke_version();
    invoke_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_invoke.invoke_version)
}

// optional int32 handle_status = 6;
inline bool opt_trace_invoke::has_handle_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_invoke::set_has_handle_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_invoke::clear_has_handle_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_invoke::clear_handle_status() {
  handle_status_ = 0;
  clear_has_handle_status();
}
inline ::google::protobuf::int32 opt_trace_invoke::handle_status() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.handle_status)
  return handle_status_;
}
inline void opt_trace_invoke::set_handle_status(::google::protobuf::int32 value) {
  set_has_handle_status();
  handle_status_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.handle_status)
}

// optional float credit_limit = 7;
inline bool opt_trace_invoke::has_credit_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void opt_trace_invoke::set_has_credit_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void opt_trace_invoke::clear_has_credit_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void opt_trace_invoke::clear_credit_limit() {
  credit_limit_ = 0;
  clear_has_credit_limit();
}
inline float opt_trace_invoke::credit_limit() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_invoke.credit_limit)
  return credit_limit_;
}
inline void opt_trace_invoke::set_credit_limit(float value) {
  set_has_credit_limit();
  credit_limit_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_invoke.credit_limit)
}

// -------------------------------------------------------------------

// opt_trace_business

// optional int32 business_type = 1;
inline bool opt_trace_business::has_business_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_business::set_has_business_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_business::clear_has_business_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_business::clear_business_type() {
  business_type_ = 0;
  clear_has_business_type();
}
inline ::google::protobuf::int32 opt_trace_business::business_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.business_type)
  return business_type_;
}
inline void opt_trace_business::set_business_type(::google::protobuf::int32 value) {
  set_has_business_type();
  business_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.business_type)
}

// optional bytes invest_time = 2;
inline bool opt_trace_business::has_invest_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_business::set_has_invest_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_business::clear_has_invest_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_business::clear_invest_time() {
  if (invest_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invest_time_->clear();
  }
  clear_has_invest_time();
}
inline const ::std::string& opt_trace_business::invest_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.invest_time)
  return *invest_time_;
}
inline void opt_trace_business::set_invest_time(const ::std::string& value) {
  set_has_invest_time();
  if (invest_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invest_time_ = new ::std::string;
  }
  invest_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.invest_time)
}
inline void opt_trace_business::set_invest_time(const char* value) {
  set_has_invest_time();
  if (invest_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invest_time_ = new ::std::string;
  }
  invest_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.invest_time)
}
inline void opt_trace_business::set_invest_time(const void* value, size_t size) {
  set_has_invest_time();
  if (invest_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invest_time_ = new ::std::string;
  }
  invest_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.invest_time)
}
inline ::std::string* opt_trace_business::mutable_invest_time() {
  set_has_invest_time();
  if (invest_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invest_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.invest_time)
  return invest_time_;
}
inline ::std::string* opt_trace_business::release_invest_time() {
  clear_has_invest_time();
  if (invest_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = invest_time_;
    invest_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_invest_time(::std::string* invest_time) {
  if (invest_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invest_time_;
  }
  if (invest_time) {
    set_has_invest_time();
    invest_time_ = invest_time;
  } else {
    clear_has_invest_time();
    invest_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.invest_time)
}

// optional float invest_amount = 3;
inline bool opt_trace_business::has_invest_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_business::set_has_invest_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_business::clear_has_invest_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_business::clear_invest_amount() {
  invest_amount_ = 0;
  clear_has_invest_amount();
}
inline float opt_trace_business::invest_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.invest_amount)
  return invest_amount_;
}
inline void opt_trace_business::set_invest_amount(float value) {
  set_has_invest_amount();
  invest_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.invest_amount)
}

// optional bytes guarantee_time = 4;
inline bool opt_trace_business::has_guarantee_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_business::set_has_guarantee_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_business::clear_has_guarantee_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_business::clear_guarantee_time() {
  if (guarantee_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_time_->clear();
  }
  clear_has_guarantee_time();
}
inline const ::std::string& opt_trace_business::guarantee_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.guarantee_time)
  return *guarantee_time_;
}
inline void opt_trace_business::set_guarantee_time(const ::std::string& value) {
  set_has_guarantee_time();
  if (guarantee_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_time_ = new ::std::string;
  }
  guarantee_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.guarantee_time)
}
inline void opt_trace_business::set_guarantee_time(const char* value) {
  set_has_guarantee_time();
  if (guarantee_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_time_ = new ::std::string;
  }
  guarantee_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.guarantee_time)
}
inline void opt_trace_business::set_guarantee_time(const void* value, size_t size) {
  set_has_guarantee_time();
  if (guarantee_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_time_ = new ::std::string;
  }
  guarantee_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.guarantee_time)
}
inline ::std::string* opt_trace_business::mutable_guarantee_time() {
  set_has_guarantee_time();
  if (guarantee_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.guarantee_time)
  return guarantee_time_;
}
inline ::std::string* opt_trace_business::release_guarantee_time() {
  clear_has_guarantee_time();
  if (guarantee_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guarantee_time_;
    guarantee_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_guarantee_time(::std::string* guarantee_time) {
  if (guarantee_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guarantee_time_;
  }
  if (guarantee_time) {
    set_has_guarantee_time();
    guarantee_time_ = guarantee_time;
  } else {
    clear_has_guarantee_time();
    guarantee_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.guarantee_time)
}

// optional float guarantee_amount = 5;
inline bool opt_trace_business::has_guarantee_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_business::set_has_guarantee_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_business::clear_has_guarantee_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_business::clear_guarantee_amount() {
  guarantee_amount_ = 0;
  clear_has_guarantee_amount();
}
inline float opt_trace_business::guarantee_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.guarantee_amount)
  return guarantee_amount_;
}
inline void opt_trace_business::set_guarantee_amount(float value) {
  set_has_guarantee_amount();
  guarantee_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.guarantee_amount)
}

// optional int32 repay_period = 6;
inline bool opt_trace_business::has_repay_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_business::set_has_repay_period() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_business::clear_has_repay_period() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_business::clear_repay_period() {
  repay_period_ = 0;
  clear_has_repay_period();
}
inline ::google::protobuf::int32 opt_trace_business::repay_period() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.repay_period)
  return repay_period_;
}
inline void opt_trace_business::set_repay_period(::google::protobuf::int32 value) {
  set_has_repay_period();
  repay_period_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.repay_period)
}

// optional int32 repay_periods = 7;
inline bool opt_trace_business::has_repay_periods() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void opt_trace_business::set_has_repay_periods() {
  _has_bits_[0] |= 0x00000040u;
}
inline void opt_trace_business::clear_has_repay_periods() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void opt_trace_business::clear_repay_periods() {
  repay_periods_ = 0;
  clear_has_repay_periods();
}
inline ::google::protobuf::int32 opt_trace_business::repay_periods() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.repay_periods)
  return repay_periods_;
}
inline void opt_trace_business::set_repay_periods(::google::protobuf::int32 value) {
  set_has_repay_periods();
  repay_periods_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.repay_periods)
}

// optional bytes repay_time = 8;
inline bool opt_trace_business::has_repay_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void opt_trace_business::set_has_repay_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void opt_trace_business::clear_has_repay_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void opt_trace_business::clear_repay_time() {
  if (repay_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repay_time_->clear();
  }
  clear_has_repay_time();
}
inline const ::std::string& opt_trace_business::repay_time() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.repay_time)
  return *repay_time_;
}
inline void opt_trace_business::set_repay_time(const ::std::string& value) {
  set_has_repay_time();
  if (repay_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repay_time_ = new ::std::string;
  }
  repay_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.repay_time)
}
inline void opt_trace_business::set_repay_time(const char* value) {
  set_has_repay_time();
  if (repay_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repay_time_ = new ::std::string;
  }
  repay_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.repay_time)
}
inline void opt_trace_business::set_repay_time(const void* value, size_t size) {
  set_has_repay_time();
  if (repay_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repay_time_ = new ::std::string;
  }
  repay_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.repay_time)
}
inline ::std::string* opt_trace_business::mutable_repay_time() {
  set_has_repay_time();
  if (repay_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repay_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.repay_time)
  return repay_time_;
}
inline ::std::string* opt_trace_business::release_repay_time() {
  clear_has_repay_time();
  if (repay_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repay_time_;
    repay_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_repay_time(::std::string* repay_time) {
  if (repay_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repay_time_;
  }
  if (repay_time) {
    set_has_repay_time();
    repay_time_ = repay_time;
  } else {
    clear_has_repay_time();
    repay_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.repay_time)
}

// optional float repay_amount = 9;
inline bool opt_trace_business::has_repay_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void opt_trace_business::set_has_repay_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void opt_trace_business::clear_has_repay_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void opt_trace_business::clear_repay_amount() {
  repay_amount_ = 0;
  clear_has_repay_amount();
}
inline float opt_trace_business::repay_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.repay_amount)
  return repay_amount_;
}
inline void opt_trace_business::set_repay_amount(float value) {
  set_has_repay_amount();
  repay_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.repay_amount)
}

// optional float should_repay_amount = 10;
inline bool opt_trace_business::has_should_repay_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void opt_trace_business::set_has_should_repay_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void opt_trace_business::clear_has_should_repay_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void opt_trace_business::clear_should_repay_amount() {
  should_repay_amount_ = 0;
  clear_has_should_repay_amount();
}
inline float opt_trace_business::should_repay_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.should_repay_amount)
  return should_repay_amount_;
}
inline void opt_trace_business::set_should_repay_amount(float value) {
  set_has_should_repay_amount();
  should_repay_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.should_repay_amount)
}

// optional bytes viefor_avatar = 11;
inline bool opt_trace_business::has_viefor_avatar() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void opt_trace_business::set_has_viefor_avatar() {
  _has_bits_[0] |= 0x00000400u;
}
inline void opt_trace_business::clear_has_viefor_avatar() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void opt_trace_business::clear_viefor_avatar() {
  if (viefor_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_avatar_->clear();
  }
  clear_has_viefor_avatar();
}
inline const ::std::string& opt_trace_business::viefor_avatar() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.viefor_avatar)
  return *viefor_avatar_;
}
inline void opt_trace_business::set_viefor_avatar(const ::std::string& value) {
  set_has_viefor_avatar();
  if (viefor_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_avatar_ = new ::std::string;
  }
  viefor_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.viefor_avatar)
}
inline void opt_trace_business::set_viefor_avatar(const char* value) {
  set_has_viefor_avatar();
  if (viefor_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_avatar_ = new ::std::string;
  }
  viefor_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.viefor_avatar)
}
inline void opt_trace_business::set_viefor_avatar(const void* value, size_t size) {
  set_has_viefor_avatar();
  if (viefor_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_avatar_ = new ::std::string;
  }
  viefor_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.viefor_avatar)
}
inline ::std::string* opt_trace_business::mutable_viefor_avatar() {
  set_has_viefor_avatar();
  if (viefor_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.viefor_avatar)
  return viefor_avatar_;
}
inline ::std::string* opt_trace_business::release_viefor_avatar() {
  clear_has_viefor_avatar();
  if (viefor_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viefor_avatar_;
    viefor_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_viefor_avatar(::std::string* viefor_avatar) {
  if (viefor_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_avatar_;
  }
  if (viefor_avatar) {
    set_has_viefor_avatar();
    viefor_avatar_ = viefor_avatar;
  } else {
    clear_has_viefor_avatar();
    viefor_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.viefor_avatar)
}

// optional bytes viefor_nickname = 12;
inline bool opt_trace_business::has_viefor_nickname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void opt_trace_business::set_has_viefor_nickname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void opt_trace_business::clear_has_viefor_nickname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void opt_trace_business::clear_viefor_nickname() {
  if (viefor_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_nickname_->clear();
  }
  clear_has_viefor_nickname();
}
inline const ::std::string& opt_trace_business::viefor_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.viefor_nickname)
  return *viefor_nickname_;
}
inline void opt_trace_business::set_viefor_nickname(const ::std::string& value) {
  set_has_viefor_nickname();
  if (viefor_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_nickname_ = new ::std::string;
  }
  viefor_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.viefor_nickname)
}
inline void opt_trace_business::set_viefor_nickname(const char* value) {
  set_has_viefor_nickname();
  if (viefor_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_nickname_ = new ::std::string;
  }
  viefor_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.viefor_nickname)
}
inline void opt_trace_business::set_viefor_nickname(const void* value, size_t size) {
  set_has_viefor_nickname();
  if (viefor_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_nickname_ = new ::std::string;
  }
  viefor_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.viefor_nickname)
}
inline ::std::string* opt_trace_business::mutable_viefor_nickname() {
  set_has_viefor_nickname();
  if (viefor_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.viefor_nickname)
  return viefor_nickname_;
}
inline ::std::string* opt_trace_business::release_viefor_nickname() {
  clear_has_viefor_nickname();
  if (viefor_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viefor_nickname_;
    viefor_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_viefor_nickname(::std::string* viefor_nickname) {
  if (viefor_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_nickname_;
  }
  if (viefor_nickname) {
    set_has_viefor_nickname();
    viefor_nickname_ = viefor_nickname;
  } else {
    clear_has_viefor_nickname();
    viefor_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.viefor_nickname)
}

// optional bytes viefor_name = 13;
inline bool opt_trace_business::has_viefor_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void opt_trace_business::set_has_viefor_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void opt_trace_business::clear_has_viefor_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void opt_trace_business::clear_viefor_name() {
  if (viefor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_name_->clear();
  }
  clear_has_viefor_name();
}
inline const ::std::string& opt_trace_business::viefor_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.viefor_name)
  return *viefor_name_;
}
inline void opt_trace_business::set_viefor_name(const ::std::string& value) {
  set_has_viefor_name();
  if (viefor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_name_ = new ::std::string;
  }
  viefor_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.viefor_name)
}
inline void opt_trace_business::set_viefor_name(const char* value) {
  set_has_viefor_name();
  if (viefor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_name_ = new ::std::string;
  }
  viefor_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.viefor_name)
}
inline void opt_trace_business::set_viefor_name(const void* value, size_t size) {
  set_has_viefor_name();
  if (viefor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_name_ = new ::std::string;
  }
  viefor_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.viefor_name)
}
inline ::std::string* opt_trace_business::mutable_viefor_name() {
  set_has_viefor_name();
  if (viefor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.viefor_name)
  return viefor_name_;
}
inline ::std::string* opt_trace_business::release_viefor_name() {
  clear_has_viefor_name();
  if (viefor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viefor_name_;
    viefor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_viefor_name(::std::string* viefor_name) {
  if (viefor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_name_;
  }
  if (viefor_name) {
    set_has_viefor_name();
    viefor_name_ = viefor_name;
  } else {
    clear_has_viefor_name();
    viefor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.viefor_name)
}

// optional bytes viefor_phone = 14;
inline bool opt_trace_business::has_viefor_phone() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void opt_trace_business::set_has_viefor_phone() {
  _has_bits_[0] |= 0x00002000u;
}
inline void opt_trace_business::clear_has_viefor_phone() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void opt_trace_business::clear_viefor_phone() {
  if (viefor_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_phone_->clear();
  }
  clear_has_viefor_phone();
}
inline const ::std::string& opt_trace_business::viefor_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.viefor_phone)
  return *viefor_phone_;
}
inline void opt_trace_business::set_viefor_phone(const ::std::string& value) {
  set_has_viefor_phone();
  if (viefor_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_phone_ = new ::std::string;
  }
  viefor_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.viefor_phone)
}
inline void opt_trace_business::set_viefor_phone(const char* value) {
  set_has_viefor_phone();
  if (viefor_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_phone_ = new ::std::string;
  }
  viefor_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.viefor_phone)
}
inline void opt_trace_business::set_viefor_phone(const void* value, size_t size) {
  set_has_viefor_phone();
  if (viefor_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_phone_ = new ::std::string;
  }
  viefor_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.viefor_phone)
}
inline ::std::string* opt_trace_business::mutable_viefor_phone() {
  set_has_viefor_phone();
  if (viefor_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.viefor_phone)
  return viefor_phone_;
}
inline ::std::string* opt_trace_business::release_viefor_phone() {
  clear_has_viefor_phone();
  if (viefor_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viefor_phone_;
    viefor_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_viefor_phone(::std::string* viefor_phone) {
  if (viefor_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_phone_;
  }
  if (viefor_phone) {
    set_has_viefor_phone();
    viefor_phone_ = viefor_phone;
  } else {
    clear_has_viefor_phone();
    viefor_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.viefor_phone)
}

// optional bytes viefor_idcard = 15;
inline bool opt_trace_business::has_viefor_idcard() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void opt_trace_business::set_has_viefor_idcard() {
  _has_bits_[0] |= 0x00004000u;
}
inline void opt_trace_business::clear_has_viefor_idcard() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void opt_trace_business::clear_viefor_idcard() {
  if (viefor_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_idcard_->clear();
  }
  clear_has_viefor_idcard();
}
inline const ::std::string& opt_trace_business::viefor_idcard() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.viefor_idcard)
  return *viefor_idcard_;
}
inline void opt_trace_business::set_viefor_idcard(const ::std::string& value) {
  set_has_viefor_idcard();
  if (viefor_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_idcard_ = new ::std::string;
  }
  viefor_idcard_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.viefor_idcard)
}
inline void opt_trace_business::set_viefor_idcard(const char* value) {
  set_has_viefor_idcard();
  if (viefor_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_idcard_ = new ::std::string;
  }
  viefor_idcard_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.viefor_idcard)
}
inline void opt_trace_business::set_viefor_idcard(const void* value, size_t size) {
  set_has_viefor_idcard();
  if (viefor_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_idcard_ = new ::std::string;
  }
  viefor_idcard_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.viefor_idcard)
}
inline ::std::string* opt_trace_business::mutable_viefor_idcard() {
  set_has_viefor_idcard();
  if (viefor_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viefor_idcard_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.viefor_idcard)
  return viefor_idcard_;
}
inline ::std::string* opt_trace_business::release_viefor_idcard() {
  clear_has_viefor_idcard();
  if (viefor_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viefor_idcard_;
    viefor_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_viefor_idcard(::std::string* viefor_idcard) {
  if (viefor_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_idcard_;
  }
  if (viefor_idcard) {
    set_has_viefor_idcard();
    viefor_idcard_ = viefor_idcard;
  } else {
    clear_has_viefor_idcard();
    viefor_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.viefor_idcard)
}

// optional bytes borrowman_name = 16;
inline bool opt_trace_business::has_borrowman_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void opt_trace_business::set_has_borrowman_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void opt_trace_business::clear_has_borrowman_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void opt_trace_business::clear_borrowman_name() {
  if (borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_name_->clear();
  }
  clear_has_borrowman_name();
}
inline const ::std::string& opt_trace_business::borrowman_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.borrowman_name)
  return *borrowman_name_;
}
inline void opt_trace_business::set_borrowman_name(const ::std::string& value) {
  set_has_borrowman_name();
  if (borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_name_ = new ::std::string;
  }
  borrowman_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.borrowman_name)
}
inline void opt_trace_business::set_borrowman_name(const char* value) {
  set_has_borrowman_name();
  if (borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_name_ = new ::std::string;
  }
  borrowman_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.borrowman_name)
}
inline void opt_trace_business::set_borrowman_name(const void* value, size_t size) {
  set_has_borrowman_name();
  if (borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_name_ = new ::std::string;
  }
  borrowman_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.borrowman_name)
}
inline ::std::string* opt_trace_business::mutable_borrowman_name() {
  set_has_borrowman_name();
  if (borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.borrowman_name)
  return borrowman_name_;
}
inline ::std::string* opt_trace_business::release_borrowman_name() {
  clear_has_borrowman_name();
  if (borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrowman_name_;
    borrowman_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_borrowman_name(::std::string* borrowman_name) {
  if (borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowman_name_;
  }
  if (borrowman_name) {
    set_has_borrowman_name();
    borrowman_name_ = borrowman_name;
  } else {
    clear_has_borrowman_name();
    borrowman_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.borrowman_name)
}

// optional bytes borrowman_phone = 17;
inline bool opt_trace_business::has_borrowman_phone() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void opt_trace_business::set_has_borrowman_phone() {
  _has_bits_[0] |= 0x00010000u;
}
inline void opt_trace_business::clear_has_borrowman_phone() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void opt_trace_business::clear_borrowman_phone() {
  if (borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_phone_->clear();
  }
  clear_has_borrowman_phone();
}
inline const ::std::string& opt_trace_business::borrowman_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.borrowman_phone)
  return *borrowman_phone_;
}
inline void opt_trace_business::set_borrowman_phone(const ::std::string& value) {
  set_has_borrowman_phone();
  if (borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_phone_ = new ::std::string;
  }
  borrowman_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.borrowman_phone)
}
inline void opt_trace_business::set_borrowman_phone(const char* value) {
  set_has_borrowman_phone();
  if (borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_phone_ = new ::std::string;
  }
  borrowman_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.borrowman_phone)
}
inline void opt_trace_business::set_borrowman_phone(const void* value, size_t size) {
  set_has_borrowman_phone();
  if (borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_phone_ = new ::std::string;
  }
  borrowman_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.borrowman_phone)
}
inline ::std::string* opt_trace_business::mutable_borrowman_phone() {
  set_has_borrowman_phone();
  if (borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.borrowman_phone)
  return borrowman_phone_;
}
inline ::std::string* opt_trace_business::release_borrowman_phone() {
  clear_has_borrowman_phone();
  if (borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrowman_phone_;
    borrowman_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_borrowman_phone(::std::string* borrowman_phone) {
  if (borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowman_phone_;
  }
  if (borrowman_phone) {
    set_has_borrowman_phone();
    borrowman_phone_ = borrowman_phone;
  } else {
    clear_has_borrowman_phone();
    borrowman_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.borrowman_phone)
}

// optional bytes borrowman_idcard = 18;
inline bool opt_trace_business::has_borrowman_idcard() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void opt_trace_business::set_has_borrowman_idcard() {
  _has_bits_[0] |= 0x00020000u;
}
inline void opt_trace_business::clear_has_borrowman_idcard() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void opt_trace_business::clear_borrowman_idcard() {
  if (borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_idcard_->clear();
  }
  clear_has_borrowman_idcard();
}
inline const ::std::string& opt_trace_business::borrowman_idcard() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.borrowman_idcard)
  return *borrowman_idcard_;
}
inline void opt_trace_business::set_borrowman_idcard(const ::std::string& value) {
  set_has_borrowman_idcard();
  if (borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_idcard_ = new ::std::string;
  }
  borrowman_idcard_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.borrowman_idcard)
}
inline void opt_trace_business::set_borrowman_idcard(const char* value) {
  set_has_borrowman_idcard();
  if (borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_idcard_ = new ::std::string;
  }
  borrowman_idcard_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.borrowman_idcard)
}
inline void opt_trace_business::set_borrowman_idcard(const void* value, size_t size) {
  set_has_borrowman_idcard();
  if (borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_idcard_ = new ::std::string;
  }
  borrowman_idcard_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.borrowman_idcard)
}
inline ::std::string* opt_trace_business::mutable_borrowman_idcard() {
  set_has_borrowman_idcard();
  if (borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowman_idcard_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.borrowman_idcard)
  return borrowman_idcard_;
}
inline ::std::string* opt_trace_business::release_borrowman_idcard() {
  clear_has_borrowman_idcard();
  if (borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrowman_idcard_;
    borrowman_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_borrowman_idcard(::std::string* borrowman_idcard) {
  if (borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowman_idcard_;
  }
  if (borrowman_idcard) {
    set_has_borrowman_idcard();
    borrowman_idcard_ = borrowman_idcard;
  } else {
    clear_has_borrowman_idcard();
    borrowman_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.borrowman_idcard)
}

// optional bytes diligenced_name = 19;
inline bool opt_trace_business::has_diligenced_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void opt_trace_business::set_has_diligenced_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void opt_trace_business::clear_has_diligenced_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void opt_trace_business::clear_diligenced_name() {
  if (diligenced_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_name_->clear();
  }
  clear_has_diligenced_name();
}
inline const ::std::string& opt_trace_business::diligenced_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.diligenced_name)
  return *diligenced_name_;
}
inline void opt_trace_business::set_diligenced_name(const ::std::string& value) {
  set_has_diligenced_name();
  if (diligenced_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_name_ = new ::std::string;
  }
  diligenced_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.diligenced_name)
}
inline void opt_trace_business::set_diligenced_name(const char* value) {
  set_has_diligenced_name();
  if (diligenced_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_name_ = new ::std::string;
  }
  diligenced_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.diligenced_name)
}
inline void opt_trace_business::set_diligenced_name(const void* value, size_t size) {
  set_has_diligenced_name();
  if (diligenced_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_name_ = new ::std::string;
  }
  diligenced_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.diligenced_name)
}
inline ::std::string* opt_trace_business::mutable_diligenced_name() {
  set_has_diligenced_name();
  if (diligenced_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.diligenced_name)
  return diligenced_name_;
}
inline ::std::string* opt_trace_business::release_diligenced_name() {
  clear_has_diligenced_name();
  if (diligenced_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligenced_name_;
    diligenced_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_diligenced_name(::std::string* diligenced_name) {
  if (diligenced_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_name_;
  }
  if (diligenced_name) {
    set_has_diligenced_name();
    diligenced_name_ = diligenced_name;
  } else {
    clear_has_diligenced_name();
    diligenced_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.diligenced_name)
}

// optional bytes diligenced_idcard = 20;
inline bool opt_trace_business::has_diligenced_idcard() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void opt_trace_business::set_has_diligenced_idcard() {
  _has_bits_[0] |= 0x00080000u;
}
inline void opt_trace_business::clear_has_diligenced_idcard() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void opt_trace_business::clear_diligenced_idcard() {
  if (diligenced_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_idcard_->clear();
  }
  clear_has_diligenced_idcard();
}
inline const ::std::string& opt_trace_business::diligenced_idcard() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.diligenced_idcard)
  return *diligenced_idcard_;
}
inline void opt_trace_business::set_diligenced_idcard(const ::std::string& value) {
  set_has_diligenced_idcard();
  if (diligenced_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_idcard_ = new ::std::string;
  }
  diligenced_idcard_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.diligenced_idcard)
}
inline void opt_trace_business::set_diligenced_idcard(const char* value) {
  set_has_diligenced_idcard();
  if (diligenced_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_idcard_ = new ::std::string;
  }
  diligenced_idcard_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.diligenced_idcard)
}
inline void opt_trace_business::set_diligenced_idcard(const void* value, size_t size) {
  set_has_diligenced_idcard();
  if (diligenced_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_idcard_ = new ::std::string;
  }
  diligenced_idcard_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.diligenced_idcard)
}
inline ::std::string* opt_trace_business::mutable_diligenced_idcard() {
  set_has_diligenced_idcard();
  if (diligenced_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_idcard_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.diligenced_idcard)
  return diligenced_idcard_;
}
inline ::std::string* opt_trace_business::release_diligenced_idcard() {
  clear_has_diligenced_idcard();
  if (diligenced_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligenced_idcard_;
    diligenced_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_diligenced_idcard(::std::string* diligenced_idcard) {
  if (diligenced_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_idcard_;
  }
  if (diligenced_idcard) {
    set_has_diligenced_idcard();
    diligenced_idcard_ = diligenced_idcard;
  } else {
    clear_has_diligenced_idcard();
    diligenced_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.diligenced_idcard)
}

// optional bytes diligenced_phone = 21;
inline bool opt_trace_business::has_diligenced_phone() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void opt_trace_business::set_has_diligenced_phone() {
  _has_bits_[0] |= 0x00100000u;
}
inline void opt_trace_business::clear_has_diligenced_phone() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void opt_trace_business::clear_diligenced_phone() {
  if (diligenced_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_phone_->clear();
  }
  clear_has_diligenced_phone();
}
inline const ::std::string& opt_trace_business::diligenced_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.diligenced_phone)
  return *diligenced_phone_;
}
inline void opt_trace_business::set_diligenced_phone(const ::std::string& value) {
  set_has_diligenced_phone();
  if (diligenced_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_phone_ = new ::std::string;
  }
  diligenced_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.diligenced_phone)
}
inline void opt_trace_business::set_diligenced_phone(const char* value) {
  set_has_diligenced_phone();
  if (diligenced_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_phone_ = new ::std::string;
  }
  diligenced_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.diligenced_phone)
}
inline void opt_trace_business::set_diligenced_phone(const void* value, size_t size) {
  set_has_diligenced_phone();
  if (diligenced_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_phone_ = new ::std::string;
  }
  diligenced_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.diligenced_phone)
}
inline ::std::string* opt_trace_business::mutable_diligenced_phone() {
  set_has_diligenced_phone();
  if (diligenced_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.diligenced_phone)
  return diligenced_phone_;
}
inline ::std::string* opt_trace_business::release_diligenced_phone() {
  clear_has_diligenced_phone();
  if (diligenced_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligenced_phone_;
    diligenced_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_diligenced_phone(::std::string* diligenced_phone) {
  if (diligenced_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_phone_;
  }
  if (diligenced_phone) {
    set_has_diligenced_phone();
    diligenced_phone_ = diligenced_phone;
  } else {
    clear_has_diligenced_phone();
    diligenced_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.diligenced_phone)
}

// optional bytes diligence_location = 22;
inline bool opt_trace_business::has_diligence_location() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void opt_trace_business::set_has_diligence_location() {
  _has_bits_[0] |= 0x00200000u;
}
inline void opt_trace_business::clear_has_diligence_location() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void opt_trace_business::clear_diligence_location() {
  if (diligence_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_location_->clear();
  }
  clear_has_diligence_location();
}
inline const ::std::string& opt_trace_business::diligence_location() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.diligence_location)
  return *diligence_location_;
}
inline void opt_trace_business::set_diligence_location(const ::std::string& value) {
  set_has_diligence_location();
  if (diligence_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_location_ = new ::std::string;
  }
  diligence_location_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.diligence_location)
}
inline void opt_trace_business::set_diligence_location(const char* value) {
  set_has_diligence_location();
  if (diligence_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_location_ = new ::std::string;
  }
  diligence_location_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.diligence_location)
}
inline void opt_trace_business::set_diligence_location(const void* value, size_t size) {
  set_has_diligence_location();
  if (diligence_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_location_ = new ::std::string;
  }
  diligence_location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.diligence_location)
}
inline ::std::string* opt_trace_business::mutable_diligence_location() {
  set_has_diligence_location();
  if (diligence_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligence_location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.diligence_location)
  return diligence_location_;
}
inline ::std::string* opt_trace_business::release_diligence_location() {
  clear_has_diligence_location();
  if (diligence_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligence_location_;
    diligence_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_diligence_location(::std::string* diligence_location) {
  if (diligence_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligence_location_;
  }
  if (diligence_location) {
    set_has_diligence_location();
    diligence_location_ = diligence_location;
  } else {
    clear_has_diligence_location();
    diligence_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.diligence_location)
}

// optional bytes diligenced_location = 23;
inline bool opt_trace_business::has_diligenced_location() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void opt_trace_business::set_has_diligenced_location() {
  _has_bits_[0] |= 0x00400000u;
}
inline void opt_trace_business::clear_has_diligenced_location() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void opt_trace_business::clear_diligenced_location() {
  if (diligenced_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_location_->clear();
  }
  clear_has_diligenced_location();
}
inline const ::std::string& opt_trace_business::diligenced_location() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.diligenced_location)
  return *diligenced_location_;
}
inline void opt_trace_business::set_diligenced_location(const ::std::string& value) {
  set_has_diligenced_location();
  if (diligenced_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_location_ = new ::std::string;
  }
  diligenced_location_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.diligenced_location)
}
inline void opt_trace_business::set_diligenced_location(const char* value) {
  set_has_diligenced_location();
  if (diligenced_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_location_ = new ::std::string;
  }
  diligenced_location_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.diligenced_location)
}
inline void opt_trace_business::set_diligenced_location(const void* value, size_t size) {
  set_has_diligenced_location();
  if (diligenced_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_location_ = new ::std::string;
  }
  diligenced_location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.diligenced_location)
}
inline ::std::string* opt_trace_business::mutable_diligenced_location() {
  set_has_diligenced_location();
  if (diligenced_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diligenced_location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.diligenced_location)
  return diligenced_location_;
}
inline ::std::string* opt_trace_business::release_diligenced_location() {
  clear_has_diligenced_location();
  if (diligenced_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diligenced_location_;
    diligenced_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_diligenced_location(::std::string* diligenced_location) {
  if (diligenced_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_location_;
  }
  if (diligenced_location) {
    set_has_diligenced_location();
    diligenced_location_ = diligenced_location;
  } else {
    clear_has_diligenced_location();
    diligenced_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.diligenced_location)
}

// optional bytes gv_borrowman_name = 24;
inline bool opt_trace_business::has_gv_borrowman_name() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void opt_trace_business::set_has_gv_borrowman_name() {
  _has_bits_[0] |= 0x00800000u;
}
inline void opt_trace_business::clear_has_gv_borrowman_name() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void opt_trace_business::clear_gv_borrowman_name() {
  if (gv_borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_name_->clear();
  }
  clear_has_gv_borrowman_name();
}
inline const ::std::string& opt_trace_business::gv_borrowman_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.gv_borrowman_name)
  return *gv_borrowman_name_;
}
inline void opt_trace_business::set_gv_borrowman_name(const ::std::string& value) {
  set_has_gv_borrowman_name();
  if (gv_borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_name_ = new ::std::string;
  }
  gv_borrowman_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.gv_borrowman_name)
}
inline void opt_trace_business::set_gv_borrowman_name(const char* value) {
  set_has_gv_borrowman_name();
  if (gv_borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_name_ = new ::std::string;
  }
  gv_borrowman_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.gv_borrowman_name)
}
inline void opt_trace_business::set_gv_borrowman_name(const void* value, size_t size) {
  set_has_gv_borrowman_name();
  if (gv_borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_name_ = new ::std::string;
  }
  gv_borrowman_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.gv_borrowman_name)
}
inline ::std::string* opt_trace_business::mutable_gv_borrowman_name() {
  set_has_gv_borrowman_name();
  if (gv_borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.gv_borrowman_name)
  return gv_borrowman_name_;
}
inline ::std::string* opt_trace_business::release_gv_borrowman_name() {
  clear_has_gv_borrowman_name();
  if (gv_borrowman_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gv_borrowman_name_;
    gv_borrowman_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_gv_borrowman_name(::std::string* gv_borrowman_name) {
  if (gv_borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gv_borrowman_name_;
  }
  if (gv_borrowman_name) {
    set_has_gv_borrowman_name();
    gv_borrowman_name_ = gv_borrowman_name;
  } else {
    clear_has_gv_borrowman_name();
    gv_borrowman_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.gv_borrowman_name)
}

// optional bytes gv_borrowman_phone = 25;
inline bool opt_trace_business::has_gv_borrowman_phone() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void opt_trace_business::set_has_gv_borrowman_phone() {
  _has_bits_[0] |= 0x01000000u;
}
inline void opt_trace_business::clear_has_gv_borrowman_phone() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void opt_trace_business::clear_gv_borrowman_phone() {
  if (gv_borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_phone_->clear();
  }
  clear_has_gv_borrowman_phone();
}
inline const ::std::string& opt_trace_business::gv_borrowman_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.gv_borrowman_phone)
  return *gv_borrowman_phone_;
}
inline void opt_trace_business::set_gv_borrowman_phone(const ::std::string& value) {
  set_has_gv_borrowman_phone();
  if (gv_borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_phone_ = new ::std::string;
  }
  gv_borrowman_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.gv_borrowman_phone)
}
inline void opt_trace_business::set_gv_borrowman_phone(const char* value) {
  set_has_gv_borrowman_phone();
  if (gv_borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_phone_ = new ::std::string;
  }
  gv_borrowman_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.gv_borrowman_phone)
}
inline void opt_trace_business::set_gv_borrowman_phone(const void* value, size_t size) {
  set_has_gv_borrowman_phone();
  if (gv_borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_phone_ = new ::std::string;
  }
  gv_borrowman_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.gv_borrowman_phone)
}
inline ::std::string* opt_trace_business::mutable_gv_borrowman_phone() {
  set_has_gv_borrowman_phone();
  if (gv_borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.gv_borrowman_phone)
  return gv_borrowman_phone_;
}
inline ::std::string* opt_trace_business::release_gv_borrowman_phone() {
  clear_has_gv_borrowman_phone();
  if (gv_borrowman_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gv_borrowman_phone_;
    gv_borrowman_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_gv_borrowman_phone(::std::string* gv_borrowman_phone) {
  if (gv_borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gv_borrowman_phone_;
  }
  if (gv_borrowman_phone) {
    set_has_gv_borrowman_phone();
    gv_borrowman_phone_ = gv_borrowman_phone;
  } else {
    clear_has_gv_borrowman_phone();
    gv_borrowman_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.gv_borrowman_phone)
}

// optional bytes gv_borrowman_idcard = 26;
inline bool opt_trace_business::has_gv_borrowman_idcard() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void opt_trace_business::set_has_gv_borrowman_idcard() {
  _has_bits_[0] |= 0x02000000u;
}
inline void opt_trace_business::clear_has_gv_borrowman_idcard() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void opt_trace_business::clear_gv_borrowman_idcard() {
  if (gv_borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_idcard_->clear();
  }
  clear_has_gv_borrowman_idcard();
}
inline const ::std::string& opt_trace_business::gv_borrowman_idcard() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.gv_borrowman_idcard)
  return *gv_borrowman_idcard_;
}
inline void opt_trace_business::set_gv_borrowman_idcard(const ::std::string& value) {
  set_has_gv_borrowman_idcard();
  if (gv_borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_idcard_ = new ::std::string;
  }
  gv_borrowman_idcard_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.gv_borrowman_idcard)
}
inline void opt_trace_business::set_gv_borrowman_idcard(const char* value) {
  set_has_gv_borrowman_idcard();
  if (gv_borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_idcard_ = new ::std::string;
  }
  gv_borrowman_idcard_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.gv_borrowman_idcard)
}
inline void opt_trace_business::set_gv_borrowman_idcard(const void* value, size_t size) {
  set_has_gv_borrowman_idcard();
  if (gv_borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_idcard_ = new ::std::string;
  }
  gv_borrowman_idcard_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.gv_borrowman_idcard)
}
inline ::std::string* opt_trace_business::mutable_gv_borrowman_idcard() {
  set_has_gv_borrowman_idcard();
  if (gv_borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gv_borrowman_idcard_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.gv_borrowman_idcard)
  return gv_borrowman_idcard_;
}
inline ::std::string* opt_trace_business::release_gv_borrowman_idcard() {
  clear_has_gv_borrowman_idcard();
  if (gv_borrowman_idcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gv_borrowman_idcard_;
    gv_borrowman_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_gv_borrowman_idcard(::std::string* gv_borrowman_idcard) {
  if (gv_borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gv_borrowman_idcard_;
  }
  if (gv_borrowman_idcard) {
    set_has_gv_borrowman_idcard();
    gv_borrowman_idcard_ = gv_borrowman_idcard;
  } else {
    clear_has_gv_borrowman_idcard();
    gv_borrowman_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.gv_borrowman_idcard)
}

// optional float overdue_badbill_amount = 27;
inline bool opt_trace_business::has_overdue_badbill_amount() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void opt_trace_business::set_has_overdue_badbill_amount() {
  _has_bits_[0] |= 0x04000000u;
}
inline void opt_trace_business::clear_has_overdue_badbill_amount() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void opt_trace_business::clear_overdue_badbill_amount() {
  overdue_badbill_amount_ = 0;
  clear_has_overdue_badbill_amount();
}
inline float opt_trace_business::overdue_badbill_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.overdue_badbill_amount)
  return overdue_badbill_amount_;
}
inline void opt_trace_business::set_overdue_badbill_amount(float value) {
  set_has_overdue_badbill_amount();
  overdue_badbill_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.overdue_badbill_amount)
}

// optional int32 overdue_badbill_period = 28;
inline bool opt_trace_business::has_overdue_badbill_period() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void opt_trace_business::set_has_overdue_badbill_period() {
  _has_bits_[0] |= 0x08000000u;
}
inline void opt_trace_business::clear_has_overdue_badbill_period() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void opt_trace_business::clear_overdue_badbill_period() {
  overdue_badbill_period_ = 0;
  clear_has_overdue_badbill_period();
}
inline ::google::protobuf::int32 opt_trace_business::overdue_badbill_period() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.overdue_badbill_period)
  return overdue_badbill_period_;
}
inline void opt_trace_business::set_overdue_badbill_period(::google::protobuf::int32 value) {
  set_has_overdue_badbill_period();
  overdue_badbill_period_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.overdue_badbill_period)
}

// optional int32 overdue_badbill_periods = 29;
inline bool opt_trace_business::has_overdue_badbill_periods() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void opt_trace_business::set_has_overdue_badbill_periods() {
  _has_bits_[0] |= 0x10000000u;
}
inline void opt_trace_business::clear_has_overdue_badbill_periods() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void opt_trace_business::clear_overdue_badbill_periods() {
  overdue_badbill_periods_ = 0;
  clear_has_overdue_badbill_periods();
}
inline ::google::protobuf::int32 opt_trace_business::overdue_badbill_periods() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.overdue_badbill_periods)
  return overdue_badbill_periods_;
}
inline void opt_trace_business::set_overdue_badbill_periods(::google::protobuf::int32 value) {
  set_has_overdue_badbill_periods();
  overdue_badbill_periods_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.overdue_badbill_periods)
}

// optional bytes qiaoqiao_borrow_nickname = 30;
inline bool opt_trace_business::has_qiaoqiao_borrow_nickname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_borrow_nickname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void opt_trace_business::clear_has_qiaoqiao_borrow_nickname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void opt_trace_business::clear_qiaoqiao_borrow_nickname() {
  if (qiaoqiao_borrow_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_nickname_->clear();
  }
  clear_has_qiaoqiao_borrow_nickname();
}
inline const ::std::string& opt_trace_business::qiaoqiao_borrow_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_nickname)
  return *qiaoqiao_borrow_nickname_;
}
inline void opt_trace_business::set_qiaoqiao_borrow_nickname(const ::std::string& value) {
  set_has_qiaoqiao_borrow_nickname();
  if (qiaoqiao_borrow_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_nickname_ = new ::std::string;
  }
  qiaoqiao_borrow_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_nickname)
}
inline void opt_trace_business::set_qiaoqiao_borrow_nickname(const char* value) {
  set_has_qiaoqiao_borrow_nickname();
  if (qiaoqiao_borrow_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_nickname_ = new ::std::string;
  }
  qiaoqiao_borrow_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_nickname)
}
inline void opt_trace_business::set_qiaoqiao_borrow_nickname(const void* value, size_t size) {
  set_has_qiaoqiao_borrow_nickname();
  if (qiaoqiao_borrow_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_nickname_ = new ::std::string;
  }
  qiaoqiao_borrow_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_nickname)
}
inline ::std::string* opt_trace_business::mutable_qiaoqiao_borrow_nickname() {
  set_has_qiaoqiao_borrow_nickname();
  if (qiaoqiao_borrow_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_nickname)
  return qiaoqiao_borrow_nickname_;
}
inline ::std::string* opt_trace_business::release_qiaoqiao_borrow_nickname() {
  clear_has_qiaoqiao_borrow_nickname();
  if (qiaoqiao_borrow_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qiaoqiao_borrow_nickname_;
    qiaoqiao_borrow_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_qiaoqiao_borrow_nickname(::std::string* qiaoqiao_borrow_nickname) {
  if (qiaoqiao_borrow_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qiaoqiao_borrow_nickname_;
  }
  if (qiaoqiao_borrow_nickname) {
    set_has_qiaoqiao_borrow_nickname();
    qiaoqiao_borrow_nickname_ = qiaoqiao_borrow_nickname;
  } else {
    clear_has_qiaoqiao_borrow_nickname();
    qiaoqiao_borrow_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_nickname)
}

// optional float qiaoqiao_borrow_amount = 31;
inline bool opt_trace_business::has_qiaoqiao_borrow_amount() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_borrow_amount() {
  _has_bits_[0] |= 0x40000000u;
}
inline void opt_trace_business::clear_has_qiaoqiao_borrow_amount() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void opt_trace_business::clear_qiaoqiao_borrow_amount() {
  qiaoqiao_borrow_amount_ = 0;
  clear_has_qiaoqiao_borrow_amount();
}
inline float opt_trace_business::qiaoqiao_borrow_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_amount)
  return qiaoqiao_borrow_amount_;
}
inline void opt_trace_business::set_qiaoqiao_borrow_amount(float value) {
  set_has_qiaoqiao_borrow_amount();
  qiaoqiao_borrow_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_amount)
}

// optional bytes qiaoqiao_borrow_usage = 32;
inline bool opt_trace_business::has_qiaoqiao_borrow_usage() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_borrow_usage() {
  _has_bits_[0] |= 0x80000000u;
}
inline void opt_trace_business::clear_has_qiaoqiao_borrow_usage() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void opt_trace_business::clear_qiaoqiao_borrow_usage() {
  if (qiaoqiao_borrow_usage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_usage_->clear();
  }
  clear_has_qiaoqiao_borrow_usage();
}
inline const ::std::string& opt_trace_business::qiaoqiao_borrow_usage() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_usage)
  return *qiaoqiao_borrow_usage_;
}
inline void opt_trace_business::set_qiaoqiao_borrow_usage(const ::std::string& value) {
  set_has_qiaoqiao_borrow_usage();
  if (qiaoqiao_borrow_usage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_usage_ = new ::std::string;
  }
  qiaoqiao_borrow_usage_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_usage)
}
inline void opt_trace_business::set_qiaoqiao_borrow_usage(const char* value) {
  set_has_qiaoqiao_borrow_usage();
  if (qiaoqiao_borrow_usage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_usage_ = new ::std::string;
  }
  qiaoqiao_borrow_usage_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_usage)
}
inline void opt_trace_business::set_qiaoqiao_borrow_usage(const void* value, size_t size) {
  set_has_qiaoqiao_borrow_usage();
  if (qiaoqiao_borrow_usage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_usage_ = new ::std::string;
  }
  qiaoqiao_borrow_usage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_usage)
}
inline ::std::string* opt_trace_business::mutable_qiaoqiao_borrow_usage() {
  set_has_qiaoqiao_borrow_usage();
  if (qiaoqiao_borrow_usage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_usage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_usage)
  return qiaoqiao_borrow_usage_;
}
inline ::std::string* opt_trace_business::release_qiaoqiao_borrow_usage() {
  clear_has_qiaoqiao_borrow_usage();
  if (qiaoqiao_borrow_usage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qiaoqiao_borrow_usage_;
    qiaoqiao_borrow_usage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_qiaoqiao_borrow_usage(::std::string* qiaoqiao_borrow_usage) {
  if (qiaoqiao_borrow_usage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qiaoqiao_borrow_usage_;
  }
  if (qiaoqiao_borrow_usage) {
    set_has_qiaoqiao_borrow_usage();
    qiaoqiao_borrow_usage_ = qiaoqiao_borrow_usage;
  } else {
    clear_has_qiaoqiao_borrow_usage();
    qiaoqiao_borrow_usage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_usage)
}

// optional float qiaoqiao_borrow_rate = 33;
inline bool opt_trace_business::has_qiaoqiao_borrow_rate() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_borrow_rate() {
  _has_bits_[1] |= 0x00000001u;
}
inline void opt_trace_business::clear_has_qiaoqiao_borrow_rate() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void opt_trace_business::clear_qiaoqiao_borrow_rate() {
  qiaoqiao_borrow_rate_ = 0;
  clear_has_qiaoqiao_borrow_rate();
}
inline float opt_trace_business::qiaoqiao_borrow_rate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_rate)
  return qiaoqiao_borrow_rate_;
}
inline void opt_trace_business::set_qiaoqiao_borrow_rate(float value) {
  set_has_qiaoqiao_borrow_rate();
  qiaoqiao_borrow_rate_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_rate)
}

// optional bytes qiaoqiao_borrow_location = 34;
inline bool opt_trace_business::has_qiaoqiao_borrow_location() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_borrow_location() {
  _has_bits_[1] |= 0x00000002u;
}
inline void opt_trace_business::clear_has_qiaoqiao_borrow_location() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void opt_trace_business::clear_qiaoqiao_borrow_location() {
  if (qiaoqiao_borrow_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_location_->clear();
  }
  clear_has_qiaoqiao_borrow_location();
}
inline const ::std::string& opt_trace_business::qiaoqiao_borrow_location() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_location)
  return *qiaoqiao_borrow_location_;
}
inline void opt_trace_business::set_qiaoqiao_borrow_location(const ::std::string& value) {
  set_has_qiaoqiao_borrow_location();
  if (qiaoqiao_borrow_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_location_ = new ::std::string;
  }
  qiaoqiao_borrow_location_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_location)
}
inline void opt_trace_business::set_qiaoqiao_borrow_location(const char* value) {
  set_has_qiaoqiao_borrow_location();
  if (qiaoqiao_borrow_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_location_ = new ::std::string;
  }
  qiaoqiao_borrow_location_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_location)
}
inline void opt_trace_business::set_qiaoqiao_borrow_location(const void* value, size_t size) {
  set_has_qiaoqiao_borrow_location();
  if (qiaoqiao_borrow_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_location_ = new ::std::string;
  }
  qiaoqiao_borrow_location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_location)
}
inline ::std::string* opt_trace_business::mutable_qiaoqiao_borrow_location() {
  set_has_qiaoqiao_borrow_location();
  if (qiaoqiao_borrow_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qiaoqiao_borrow_location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_location)
  return qiaoqiao_borrow_location_;
}
inline ::std::string* opt_trace_business::release_qiaoqiao_borrow_location() {
  clear_has_qiaoqiao_borrow_location();
  if (qiaoqiao_borrow_location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qiaoqiao_borrow_location_;
    qiaoqiao_borrow_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_business::set_allocated_qiaoqiao_borrow_location(::std::string* qiaoqiao_borrow_location) {
  if (qiaoqiao_borrow_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qiaoqiao_borrow_location_;
  }
  if (qiaoqiao_borrow_location) {
    set_has_qiaoqiao_borrow_location();
    qiaoqiao_borrow_location_ = qiaoqiao_borrow_location;
  } else {
    clear_has_qiaoqiao_borrow_location();
    qiaoqiao_borrow_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_business.qiaoqiao_borrow_location)
}

// optional float qiaoqiao_repay_amount = 35;
inline bool opt_trace_business::has_qiaoqiao_repay_amount() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_repay_amount() {
  _has_bits_[1] |= 0x00000004u;
}
inline void opt_trace_business::clear_has_qiaoqiao_repay_amount() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void opt_trace_business::clear_qiaoqiao_repay_amount() {
  qiaoqiao_repay_amount_ = 0;
  clear_has_qiaoqiao_repay_amount();
}
inline float opt_trace_business::qiaoqiao_repay_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_repay_amount)
  return qiaoqiao_repay_amount_;
}
inline void opt_trace_business::set_qiaoqiao_repay_amount(float value) {
  set_has_qiaoqiao_repay_amount();
  qiaoqiao_repay_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_repay_amount)
}

// optional float qiaoqiao_invest_amount = 36;
inline bool opt_trace_business::has_qiaoqiao_invest_amount() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void opt_trace_business::set_has_qiaoqiao_invest_amount() {
  _has_bits_[1] |= 0x00000008u;
}
inline void opt_trace_business::clear_has_qiaoqiao_invest_amount() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void opt_trace_business::clear_qiaoqiao_invest_amount() {
  qiaoqiao_invest_amount_ = 0;
  clear_has_qiaoqiao_invest_amount();
}
inline float opt_trace_business::qiaoqiao_invest_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_business.qiaoqiao_invest_amount)
  return qiaoqiao_invest_amount_;
}
inline void opt_trace_business::set_qiaoqiao_invest_amount(float value) {
  set_has_qiaoqiao_invest_amount();
  qiaoqiao_invest_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_business.qiaoqiao_invest_amount)
}

// -------------------------------------------------------------------

// opt_trace_page

// optional bytes page_name = 1;
inline bool opt_trace_page::has_page_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_page::set_has_page_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_page::clear_has_page_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_page::clear_page_name() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_->clear();
  }
  clear_has_page_name();
}
inline const ::std::string& opt_trace_page::page_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_page.page_name)
  return *page_name_;
}
inline void opt_trace_page::set_page_name(const ::std::string& value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_page.page_name)
}
inline void opt_trace_page::set_page_name(const char* value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_page.page_name)
}
inline void opt_trace_page::set_page_name(const void* value, size_t size) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_page.page_name)
}
inline ::std::string* opt_trace_page::mutable_page_name() {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_page.page_name)
  return page_name_;
}
inline ::std::string* opt_trace_page::release_page_name() {
  clear_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_name_;
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_page::set_allocated_page_name(::std::string* page_name) {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (page_name) {
    set_has_page_name();
    page_name_ = page_name;
  } else {
    clear_has_page_name();
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_page.page_name)
}

// optional int32 page_keeptime = 2;
inline bool opt_trace_page::has_page_keeptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_page::set_has_page_keeptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_page::clear_has_page_keeptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_page::clear_page_keeptime() {
  page_keeptime_ = 0;
  clear_has_page_keeptime();
}
inline ::google::protobuf::int32 opt_trace_page::page_keeptime() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_page.page_keeptime)
  return page_keeptime_;
}
inline void opt_trace_page::set_page_keeptime(::google::protobuf::int32 value) {
  set_has_page_keeptime();
  page_keeptime_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_page.page_keeptime)
}

// -------------------------------------------------------------------

// opt_trace_fund_running_water

// optional bytes frw_title = 1;
inline bool opt_trace_fund_running_water::has_frw_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_fund_running_water::set_has_frw_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_fund_running_water::clear_has_frw_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_fund_running_water::clear_frw_title() {
  if (frw_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_title_->clear();
  }
  clear_has_frw_title();
}
inline const ::std::string& opt_trace_fund_running_water::frw_title() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_fund_running_water.frw_title)
  return *frw_title_;
}
inline void opt_trace_fund_running_water::set_frw_title(const ::std::string& value) {
  set_has_frw_title();
  if (frw_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_title_ = new ::std::string;
  }
  frw_title_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_fund_running_water.frw_title)
}
inline void opt_trace_fund_running_water::set_frw_title(const char* value) {
  set_has_frw_title();
  if (frw_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_title_ = new ::std::string;
  }
  frw_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_fund_running_water.frw_title)
}
inline void opt_trace_fund_running_water::set_frw_title(const void* value, size_t size) {
  set_has_frw_title();
  if (frw_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_title_ = new ::std::string;
  }
  frw_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_fund_running_water.frw_title)
}
inline ::std::string* opt_trace_fund_running_water::mutable_frw_title() {
  set_has_frw_title();
  if (frw_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_fund_running_water.frw_title)
  return frw_title_;
}
inline ::std::string* opt_trace_fund_running_water::release_frw_title() {
  clear_has_frw_title();
  if (frw_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frw_title_;
    frw_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_fund_running_water::set_allocated_frw_title(::std::string* frw_title) {
  if (frw_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frw_title_;
  }
  if (frw_title) {
    set_has_frw_title();
    frw_title_ = frw_title;
  } else {
    clear_has_frw_title();
    frw_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_fund_running_water.frw_title)
}

// optional int32 frw_type = 2;
inline bool opt_trace_fund_running_water::has_frw_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_fund_running_water::set_has_frw_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_fund_running_water::clear_has_frw_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_fund_running_water::clear_frw_type() {
  frw_type_ = 0;
  clear_has_frw_type();
}
inline ::google::protobuf::int32 opt_trace_fund_running_water::frw_type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_fund_running_water.frw_type)
  return frw_type_;
}
inline void opt_trace_fund_running_water::set_frw_type(::google::protobuf::int32 value) {
  set_has_frw_type();
  frw_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_fund_running_water.frw_type)
}

// optional float frw_amount = 3;
inline bool opt_trace_fund_running_water::has_frw_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_fund_running_water::set_has_frw_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_fund_running_water::clear_has_frw_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_fund_running_water::clear_frw_amount() {
  frw_amount_ = 0;
  clear_has_frw_amount();
}
inline float opt_trace_fund_running_water::frw_amount() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_fund_running_water.frw_amount)
  return frw_amount_;
}
inline void opt_trace_fund_running_water::set_frw_amount(float value) {
  set_has_frw_amount();
  frw_amount_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_fund_running_water.frw_amount)
}

// optional int32 frw_status = 4;
inline bool opt_trace_fund_running_water::has_frw_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_fund_running_water::set_has_frw_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_fund_running_water::clear_has_frw_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_fund_running_water::clear_frw_status() {
  frw_status_ = 0;
  clear_has_frw_status();
}
inline ::google::protobuf::int32 opt_trace_fund_running_water::frw_status() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_fund_running_water.frw_status)
  return frw_status_;
}
inline void opt_trace_fund_running_water::set_frw_status(::google::protobuf::int32 value) {
  set_has_frw_status();
  frw_status_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_fund_running_water.frw_status)
}

// optional bytes frw_desc = 5;
inline bool opt_trace_fund_running_water::has_frw_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_fund_running_water::set_has_frw_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_fund_running_water::clear_has_frw_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_fund_running_water::clear_frw_desc() {
  if (frw_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_desc_->clear();
  }
  clear_has_frw_desc();
}
inline const ::std::string& opt_trace_fund_running_water::frw_desc() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_fund_running_water.frw_desc)
  return *frw_desc_;
}
inline void opt_trace_fund_running_water::set_frw_desc(const ::std::string& value) {
  set_has_frw_desc();
  if (frw_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_desc_ = new ::std::string;
  }
  frw_desc_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_fund_running_water.frw_desc)
}
inline void opt_trace_fund_running_water::set_frw_desc(const char* value) {
  set_has_frw_desc();
  if (frw_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_desc_ = new ::std::string;
  }
  frw_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_fund_running_water.frw_desc)
}
inline void opt_trace_fund_running_water::set_frw_desc(const void* value, size_t size) {
  set_has_frw_desc();
  if (frw_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_desc_ = new ::std::string;
  }
  frw_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_fund_running_water.frw_desc)
}
inline ::std::string* opt_trace_fund_running_water::mutable_frw_desc() {
  set_has_frw_desc();
  if (frw_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_fund_running_water.frw_desc)
  return frw_desc_;
}
inline ::std::string* opt_trace_fund_running_water::release_frw_desc() {
  clear_has_frw_desc();
  if (frw_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frw_desc_;
    frw_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_fund_running_water::set_allocated_frw_desc(::std::string* frw_desc) {
  if (frw_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frw_desc_;
  }
  if (frw_desc) {
    set_has_frw_desc();
    frw_desc_ = frw_desc;
  } else {
    clear_has_frw_desc();
    frw_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_fund_running_water.frw_desc)
}

// optional bytes frw_updatetime = 6;
inline bool opt_trace_fund_running_water::has_frw_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_fund_running_water::set_has_frw_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_fund_running_water::clear_has_frw_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_fund_running_water::clear_frw_updatetime() {
  if (frw_updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_updatetime_->clear();
  }
  clear_has_frw_updatetime();
}
inline const ::std::string& opt_trace_fund_running_water::frw_updatetime() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_fund_running_water.frw_updatetime)
  return *frw_updatetime_;
}
inline void opt_trace_fund_running_water::set_frw_updatetime(const ::std::string& value) {
  set_has_frw_updatetime();
  if (frw_updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_updatetime_ = new ::std::string;
  }
  frw_updatetime_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_fund_running_water.frw_updatetime)
}
inline void opt_trace_fund_running_water::set_frw_updatetime(const char* value) {
  set_has_frw_updatetime();
  if (frw_updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_updatetime_ = new ::std::string;
  }
  frw_updatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_fund_running_water.frw_updatetime)
}
inline void opt_trace_fund_running_water::set_frw_updatetime(const void* value, size_t size) {
  set_has_frw_updatetime();
  if (frw_updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_updatetime_ = new ::std::string;
  }
  frw_updatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_fund_running_water.frw_updatetime)
}
inline ::std::string* opt_trace_fund_running_water::mutable_frw_updatetime() {
  set_has_frw_updatetime();
  if (frw_updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frw_updatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_fund_running_water.frw_updatetime)
  return frw_updatetime_;
}
inline ::std::string* opt_trace_fund_running_water::release_frw_updatetime() {
  clear_has_frw_updatetime();
  if (frw_updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frw_updatetime_;
    frw_updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_fund_running_water::set_allocated_frw_updatetime(::std::string* frw_updatetime) {
  if (frw_updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frw_updatetime_;
  }
  if (frw_updatetime) {
    set_has_frw_updatetime();
    frw_updatetime_ = frw_updatetime;
  } else {
    clear_has_frw_updatetime();
    frw_updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_fund_running_water.frw_updatetime)
}

// -------------------------------------------------------------------

// opt_trace_material

// optional int32 type = 1;
inline bool opt_trace_material::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_trace_material::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_trace_material::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_trace_material::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 opt_trace_material::type() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.type)
  return type_;
}
inline void opt_trace_material::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.type)
}

// optional int32 UserTypeId = 2;
inline bool opt_trace_material::has_usertypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_trace_material::set_has_usertypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_trace_material::clear_has_usertypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_trace_material::clear_usertypeid() {
  usertypeid_ = 0;
  clear_has_usertypeid();
}
inline ::google::protobuf::int32 opt_trace_material::usertypeid() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.UserTypeId)
  return usertypeid_;
}
inline void opt_trace_material::set_usertypeid(::google::protobuf::int32 value) {
  set_has_usertypeid();
  usertypeid_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.UserTypeId)
}

// optional bytes MaritalStatus = 3;
inline bool opt_trace_material::has_maritalstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_trace_material::set_has_maritalstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_trace_material::clear_has_maritalstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_trace_material::clear_maritalstatus() {
  if (maritalstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maritalstatus_->clear();
  }
  clear_has_maritalstatus();
}
inline const ::std::string& opt_trace_material::maritalstatus() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.MaritalStatus)
  return *maritalstatus_;
}
inline void opt_trace_material::set_maritalstatus(const ::std::string& value) {
  set_has_maritalstatus();
  if (maritalstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maritalstatus_ = new ::std::string;
  }
  maritalstatus_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.MaritalStatus)
}
inline void opt_trace_material::set_maritalstatus(const char* value) {
  set_has_maritalstatus();
  if (maritalstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maritalstatus_ = new ::std::string;
  }
  maritalstatus_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.MaritalStatus)
}
inline void opt_trace_material::set_maritalstatus(const void* value, size_t size) {
  set_has_maritalstatus();
  if (maritalstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maritalstatus_ = new ::std::string;
  }
  maritalstatus_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.MaritalStatus)
}
inline ::std::string* opt_trace_material::mutable_maritalstatus() {
  set_has_maritalstatus();
  if (maritalstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maritalstatus_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.MaritalStatus)
  return maritalstatus_;
}
inline ::std::string* opt_trace_material::release_maritalstatus() {
  clear_has_maritalstatus();
  if (maritalstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = maritalstatus_;
    maritalstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_maritalstatus(::std::string* maritalstatus) {
  if (maritalstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maritalstatus_;
  }
  if (maritalstatus) {
    set_has_maritalstatus();
    maritalstatus_ = maritalstatus;
  } else {
    clear_has_maritalstatus();
    maritalstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.MaritalStatus)
}

// optional bytes HavingChildren = 4;
inline bool opt_trace_material::has_havingchildren() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_trace_material::set_has_havingchildren() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_trace_material::clear_has_havingchildren() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_trace_material::clear_havingchildren() {
  if (havingchildren_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    havingchildren_->clear();
  }
  clear_has_havingchildren();
}
inline const ::std::string& opt_trace_material::havingchildren() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.HavingChildren)
  return *havingchildren_;
}
inline void opt_trace_material::set_havingchildren(const ::std::string& value) {
  set_has_havingchildren();
  if (havingchildren_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    havingchildren_ = new ::std::string;
  }
  havingchildren_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.HavingChildren)
}
inline void opt_trace_material::set_havingchildren(const char* value) {
  set_has_havingchildren();
  if (havingchildren_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    havingchildren_ = new ::std::string;
  }
  havingchildren_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.HavingChildren)
}
inline void opt_trace_material::set_havingchildren(const void* value, size_t size) {
  set_has_havingchildren();
  if (havingchildren_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    havingchildren_ = new ::std::string;
  }
  havingchildren_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.HavingChildren)
}
inline ::std::string* opt_trace_material::mutable_havingchildren() {
  set_has_havingchildren();
  if (havingchildren_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    havingchildren_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.HavingChildren)
  return havingchildren_;
}
inline ::std::string* opt_trace_material::release_havingchildren() {
  clear_has_havingchildren();
  if (havingchildren_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = havingchildren_;
    havingchildren_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_havingchildren(::std::string* havingchildren) {
  if (havingchildren_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete havingchildren_;
  }
  if (havingchildren) {
    set_has_havingchildren();
    havingchildren_ = havingchildren;
  } else {
    clear_has_havingchildren();
    havingchildren_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.HavingChildren)
}

// optional bytes LivingType = 5;
inline bool opt_trace_material::has_livingtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_trace_material::set_has_livingtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_trace_material::clear_has_livingtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_trace_material::clear_livingtype() {
  if (livingtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingtype_->clear();
  }
  clear_has_livingtype();
}
inline const ::std::string& opt_trace_material::livingtype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.LivingType)
  return *livingtype_;
}
inline void opt_trace_material::set_livingtype(const ::std::string& value) {
  set_has_livingtype();
  if (livingtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingtype_ = new ::std::string;
  }
  livingtype_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.LivingType)
}
inline void opt_trace_material::set_livingtype(const char* value) {
  set_has_livingtype();
  if (livingtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingtype_ = new ::std::string;
  }
  livingtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.LivingType)
}
inline void opt_trace_material::set_livingtype(const void* value, size_t size) {
  set_has_livingtype();
  if (livingtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingtype_ = new ::std::string;
  }
  livingtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.LivingType)
}
inline ::std::string* opt_trace_material::mutable_livingtype() {
  set_has_livingtype();
  if (livingtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.LivingType)
  return livingtype_;
}
inline ::std::string* opt_trace_material::release_livingtype() {
  clear_has_livingtype();
  if (livingtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livingtype_;
    livingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_livingtype(::std::string* livingtype) {
  if (livingtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingtype_;
  }
  if (livingtype) {
    set_has_livingtype();
    livingtype_ = livingtype;
  } else {
    clear_has_livingtype();
    livingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.LivingType)
}

// optional bytes LivingProvince = 6;
inline bool opt_trace_material::has_livingprovince() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void opt_trace_material::set_has_livingprovince() {
  _has_bits_[0] |= 0x00000020u;
}
inline void opt_trace_material::clear_has_livingprovince() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void opt_trace_material::clear_livingprovince() {
  if (livingprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingprovince_->clear();
  }
  clear_has_livingprovince();
}
inline const ::std::string& opt_trace_material::livingprovince() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.LivingProvince)
  return *livingprovince_;
}
inline void opt_trace_material::set_livingprovince(const ::std::string& value) {
  set_has_livingprovince();
  if (livingprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingprovince_ = new ::std::string;
  }
  livingprovince_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.LivingProvince)
}
inline void opt_trace_material::set_livingprovince(const char* value) {
  set_has_livingprovince();
  if (livingprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingprovince_ = new ::std::string;
  }
  livingprovince_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.LivingProvince)
}
inline void opt_trace_material::set_livingprovince(const void* value, size_t size) {
  set_has_livingprovince();
  if (livingprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingprovince_ = new ::std::string;
  }
  livingprovince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.LivingProvince)
}
inline ::std::string* opt_trace_material::mutable_livingprovince() {
  set_has_livingprovince();
  if (livingprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingprovince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.LivingProvince)
  return livingprovince_;
}
inline ::std::string* opt_trace_material::release_livingprovince() {
  clear_has_livingprovince();
  if (livingprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livingprovince_;
    livingprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_livingprovince(::std::string* livingprovince) {
  if (livingprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingprovince_;
  }
  if (livingprovince) {
    set_has_livingprovince();
    livingprovince_ = livingprovince;
  } else {
    clear_has_livingprovince();
    livingprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.LivingProvince)
}

// optional bytes LivingCity = 7;
inline bool opt_trace_material::has_livingcity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void opt_trace_material::set_has_livingcity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void opt_trace_material::clear_has_livingcity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void opt_trace_material::clear_livingcity() {
  if (livingcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingcity_->clear();
  }
  clear_has_livingcity();
}
inline const ::std::string& opt_trace_material::livingcity() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.LivingCity)
  return *livingcity_;
}
inline void opt_trace_material::set_livingcity(const ::std::string& value) {
  set_has_livingcity();
  if (livingcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingcity_ = new ::std::string;
  }
  livingcity_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.LivingCity)
}
inline void opt_trace_material::set_livingcity(const char* value) {
  set_has_livingcity();
  if (livingcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingcity_ = new ::std::string;
  }
  livingcity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.LivingCity)
}
inline void opt_trace_material::set_livingcity(const void* value, size_t size) {
  set_has_livingcity();
  if (livingcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingcity_ = new ::std::string;
  }
  livingcity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.LivingCity)
}
inline ::std::string* opt_trace_material::mutable_livingcity() {
  set_has_livingcity();
  if (livingcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingcity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.LivingCity)
  return livingcity_;
}
inline ::std::string* opt_trace_material::release_livingcity() {
  clear_has_livingcity();
  if (livingcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livingcity_;
    livingcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_livingcity(::std::string* livingcity) {
  if (livingcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingcity_;
  }
  if (livingcity) {
    set_has_livingcity();
    livingcity_ = livingcity;
  } else {
    clear_has_livingcity();
    livingcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.LivingCity)
}

// optional bytes LivingArea = 8;
inline bool opt_trace_material::has_livingarea() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void opt_trace_material::set_has_livingarea() {
  _has_bits_[0] |= 0x00000080u;
}
inline void opt_trace_material::clear_has_livingarea() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void opt_trace_material::clear_livingarea() {
  if (livingarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingarea_->clear();
  }
  clear_has_livingarea();
}
inline const ::std::string& opt_trace_material::livingarea() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.LivingArea)
  return *livingarea_;
}
inline void opt_trace_material::set_livingarea(const ::std::string& value) {
  set_has_livingarea();
  if (livingarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingarea_ = new ::std::string;
  }
  livingarea_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.LivingArea)
}
inline void opt_trace_material::set_livingarea(const char* value) {
  set_has_livingarea();
  if (livingarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingarea_ = new ::std::string;
  }
  livingarea_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.LivingArea)
}
inline void opt_trace_material::set_livingarea(const void* value, size_t size) {
  set_has_livingarea();
  if (livingarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingarea_ = new ::std::string;
  }
  livingarea_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.LivingArea)
}
inline ::std::string* opt_trace_material::mutable_livingarea() {
  set_has_livingarea();
  if (livingarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingarea_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.LivingArea)
  return livingarea_;
}
inline ::std::string* opt_trace_material::release_livingarea() {
  clear_has_livingarea();
  if (livingarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livingarea_;
    livingarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_livingarea(::std::string* livingarea) {
  if (livingarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingarea_;
  }
  if (livingarea) {
    set_has_livingarea();
    livingarea_ = livingarea;
  } else {
    clear_has_livingarea();
    livingarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.LivingArea)
}

// optional bytes LivingAddress = 9;
inline bool opt_trace_material::has_livingaddress() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void opt_trace_material::set_has_livingaddress() {
  _has_bits_[0] |= 0x00000100u;
}
inline void opt_trace_material::clear_has_livingaddress() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void opt_trace_material::clear_livingaddress() {
  if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_->clear();
  }
  clear_has_livingaddress();
}
inline const ::std::string& opt_trace_material::livingaddress() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.LivingAddress)
  return *livingaddress_;
}
inline void opt_trace_material::set_livingaddress(const ::std::string& value) {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  livingaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.LivingAddress)
}
inline void opt_trace_material::set_livingaddress(const char* value) {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  livingaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.LivingAddress)
}
inline void opt_trace_material::set_livingaddress(const void* value, size_t size) {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  livingaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.LivingAddress)
}
inline ::std::string* opt_trace_material::mutable_livingaddress() {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.LivingAddress)
  return livingaddress_;
}
inline ::std::string* opt_trace_material::release_livingaddress() {
  clear_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livingaddress_;
    livingaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_livingaddress(::std::string* livingaddress) {
  if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingaddress_;
  }
  if (livingaddress) {
    set_has_livingaddress();
    livingaddress_ = livingaddress;
  } else {
    clear_has_livingaddress();
    livingaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.LivingAddress)
}

// optional bytes WorkCompany = 10;
inline bool opt_trace_material::has_workcompany() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void opt_trace_material::set_has_workcompany() {
  _has_bits_[0] |= 0x00000200u;
}
inline void opt_trace_material::clear_has_workcompany() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void opt_trace_material::clear_workcompany() {
  if (workcompany_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workcompany_->clear();
  }
  clear_has_workcompany();
}
inline const ::std::string& opt_trace_material::workcompany() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.WorkCompany)
  return *workcompany_;
}
inline void opt_trace_material::set_workcompany(const ::std::string& value) {
  set_has_workcompany();
  if (workcompany_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workcompany_ = new ::std::string;
  }
  workcompany_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.WorkCompany)
}
inline void opt_trace_material::set_workcompany(const char* value) {
  set_has_workcompany();
  if (workcompany_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workcompany_ = new ::std::string;
  }
  workcompany_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.WorkCompany)
}
inline void opt_trace_material::set_workcompany(const void* value, size_t size) {
  set_has_workcompany();
  if (workcompany_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workcompany_ = new ::std::string;
  }
  workcompany_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.WorkCompany)
}
inline ::std::string* opt_trace_material::mutable_workcompany() {
  set_has_workcompany();
  if (workcompany_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workcompany_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.WorkCompany)
  return workcompany_;
}
inline ::std::string* opt_trace_material::release_workcompany() {
  clear_has_workcompany();
  if (workcompany_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = workcompany_;
    workcompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_workcompany(::std::string* workcompany) {
  if (workcompany_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workcompany_;
  }
  if (workcompany) {
    set_has_workcompany();
    workcompany_ = workcompany;
  } else {
    clear_has_workcompany();
    workcompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.WorkCompany)
}

// optional bytes YearIncomeScope = 11;
inline bool opt_trace_material::has_yearincomescope() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void opt_trace_material::set_has_yearincomescope() {
  _has_bits_[0] |= 0x00000400u;
}
inline void opt_trace_material::clear_has_yearincomescope() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void opt_trace_material::clear_yearincomescope() {
  if (yearincomescope_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yearincomescope_->clear();
  }
  clear_has_yearincomescope();
}
inline const ::std::string& opt_trace_material::yearincomescope() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.YearIncomeScope)
  return *yearincomescope_;
}
inline void opt_trace_material::set_yearincomescope(const ::std::string& value) {
  set_has_yearincomescope();
  if (yearincomescope_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yearincomescope_ = new ::std::string;
  }
  yearincomescope_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.YearIncomeScope)
}
inline void opt_trace_material::set_yearincomescope(const char* value) {
  set_has_yearincomescope();
  if (yearincomescope_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yearincomescope_ = new ::std::string;
  }
  yearincomescope_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.YearIncomeScope)
}
inline void opt_trace_material::set_yearincomescope(const void* value, size_t size) {
  set_has_yearincomescope();
  if (yearincomescope_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yearincomescope_ = new ::std::string;
  }
  yearincomescope_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.YearIncomeScope)
}
inline ::std::string* opt_trace_material::mutable_yearincomescope() {
  set_has_yearincomescope();
  if (yearincomescope_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    yearincomescope_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.YearIncomeScope)
  return yearincomescope_;
}
inline ::std::string* opt_trace_material::release_yearincomescope() {
  clear_has_yearincomescope();
  if (yearincomescope_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = yearincomescope_;
    yearincomescope_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_yearincomescope(::std::string* yearincomescope) {
  if (yearincomescope_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete yearincomescope_;
  }
  if (yearincomescope) {
    set_has_yearincomescope();
    yearincomescope_ = yearincomescope;
  } else {
    clear_has_yearincomescope();
    yearincomescope_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.YearIncomeScope)
}

// optional bytes FamilyProvince = 12;
inline bool opt_trace_material::has_familyprovince() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void opt_trace_material::set_has_familyprovince() {
  _has_bits_[0] |= 0x00000800u;
}
inline void opt_trace_material::clear_has_familyprovince() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void opt_trace_material::clear_familyprovince() {
  if (familyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyprovince_->clear();
  }
  clear_has_familyprovince();
}
inline const ::std::string& opt_trace_material::familyprovince() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyProvince)
  return *familyprovince_;
}
inline void opt_trace_material::set_familyprovince(const ::std::string& value) {
  set_has_familyprovince();
  if (familyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyprovince_ = new ::std::string;
  }
  familyprovince_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyProvince)
}
inline void opt_trace_material::set_familyprovince(const char* value) {
  set_has_familyprovince();
  if (familyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyprovince_ = new ::std::string;
  }
  familyprovince_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyProvince)
}
inline void opt_trace_material::set_familyprovince(const void* value, size_t size) {
  set_has_familyprovince();
  if (familyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyprovince_ = new ::std::string;
  }
  familyprovince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyProvince)
}
inline ::std::string* opt_trace_material::mutable_familyprovince() {
  set_has_familyprovince();
  if (familyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyprovince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyProvince)
  return familyprovince_;
}
inline ::std::string* opt_trace_material::release_familyprovince() {
  clear_has_familyprovince();
  if (familyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familyprovince_;
    familyprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familyprovince(::std::string* familyprovince) {
  if (familyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyprovince_;
  }
  if (familyprovince) {
    set_has_familyprovince();
    familyprovince_ = familyprovince;
  } else {
    clear_has_familyprovince();
    familyprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyProvince)
}

// optional bytes FamilyCity = 13;
inline bool opt_trace_material::has_familycity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void opt_trace_material::set_has_familycity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void opt_trace_material::clear_has_familycity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void opt_trace_material::clear_familycity() {
  if (familycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycity_->clear();
  }
  clear_has_familycity();
}
inline const ::std::string& opt_trace_material::familycity() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyCity)
  return *familycity_;
}
inline void opt_trace_material::set_familycity(const ::std::string& value) {
  set_has_familycity();
  if (familycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycity_ = new ::std::string;
  }
  familycity_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyCity)
}
inline void opt_trace_material::set_familycity(const char* value) {
  set_has_familycity();
  if (familycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycity_ = new ::std::string;
  }
  familycity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyCity)
}
inline void opt_trace_material::set_familycity(const void* value, size_t size) {
  set_has_familycity();
  if (familycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycity_ = new ::std::string;
  }
  familycity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyCity)
}
inline ::std::string* opt_trace_material::mutable_familycity() {
  set_has_familycity();
  if (familycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyCity)
  return familycity_;
}
inline ::std::string* opt_trace_material::release_familycity() {
  clear_has_familycity();
  if (familycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familycity_;
    familycity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familycity(::std::string* familycity) {
  if (familycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familycity_;
  }
  if (familycity) {
    set_has_familycity();
    familycity_ = familycity;
  } else {
    clear_has_familycity();
    familycity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyCity)
}

// optional bytes FamilyArea = 14;
inline bool opt_trace_material::has_familyarea() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void opt_trace_material::set_has_familyarea() {
  _has_bits_[0] |= 0x00002000u;
}
inline void opt_trace_material::clear_has_familyarea() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void opt_trace_material::clear_familyarea() {
  if (familyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyarea_->clear();
  }
  clear_has_familyarea();
}
inline const ::std::string& opt_trace_material::familyarea() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyArea)
  return *familyarea_;
}
inline void opt_trace_material::set_familyarea(const ::std::string& value) {
  set_has_familyarea();
  if (familyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyarea_ = new ::std::string;
  }
  familyarea_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyArea)
}
inline void opt_trace_material::set_familyarea(const char* value) {
  set_has_familyarea();
  if (familyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyarea_ = new ::std::string;
  }
  familyarea_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyArea)
}
inline void opt_trace_material::set_familyarea(const void* value, size_t size) {
  set_has_familyarea();
  if (familyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyarea_ = new ::std::string;
  }
  familyarea_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyArea)
}
inline ::std::string* opt_trace_material::mutable_familyarea() {
  set_has_familyarea();
  if (familyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyarea_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyArea)
  return familyarea_;
}
inline ::std::string* opt_trace_material::release_familyarea() {
  clear_has_familyarea();
  if (familyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familyarea_;
    familyarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familyarea(::std::string* familyarea) {
  if (familyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyarea_;
  }
  if (familyarea) {
    set_has_familyarea();
    familyarea_ = familyarea;
  } else {
    clear_has_familyarea();
    familyarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyArea)
}

// optional bytes FamilyAddress = 15;
inline bool opt_trace_material::has_familyaddress() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void opt_trace_material::set_has_familyaddress() {
  _has_bits_[0] |= 0x00004000u;
}
inline void opt_trace_material::clear_has_familyaddress() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void opt_trace_material::clear_familyaddress() {
  if (familyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyaddress_->clear();
  }
  clear_has_familyaddress();
}
inline const ::std::string& opt_trace_material::familyaddress() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyAddress)
  return *familyaddress_;
}
inline void opt_trace_material::set_familyaddress(const ::std::string& value) {
  set_has_familyaddress();
  if (familyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyaddress_ = new ::std::string;
  }
  familyaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyAddress)
}
inline void opt_trace_material::set_familyaddress(const char* value) {
  set_has_familyaddress();
  if (familyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyaddress_ = new ::std::string;
  }
  familyaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyAddress)
}
inline void opt_trace_material::set_familyaddress(const void* value, size_t size) {
  set_has_familyaddress();
  if (familyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyaddress_ = new ::std::string;
  }
  familyaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyAddress)
}
inline ::std::string* opt_trace_material::mutable_familyaddress() {
  set_has_familyaddress();
  if (familyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyAddress)
  return familyaddress_;
}
inline ::std::string* opt_trace_material::release_familyaddress() {
  clear_has_familyaddress();
  if (familyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familyaddress_;
    familyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familyaddress(::std::string* familyaddress) {
  if (familyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyaddress_;
  }
  if (familyaddress) {
    set_has_familyaddress();
    familyaddress_ = familyaddress;
  } else {
    clear_has_familyaddress();
    familyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyAddress)
}

// optional bytes FamilyName = 16;
inline bool opt_trace_material::has_familyname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void opt_trace_material::set_has_familyname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void opt_trace_material::clear_has_familyname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void opt_trace_material::clear_familyname() {
  if (familyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_->clear();
  }
  clear_has_familyname();
}
inline const ::std::string& opt_trace_material::familyname() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyName)
  return *familyname_;
}
inline void opt_trace_material::set_familyname(const ::std::string& value) {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyName)
}
inline void opt_trace_material::set_familyname(const char* value) {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyName)
}
inline void opt_trace_material::set_familyname(const void* value, size_t size) {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyName)
}
inline ::std::string* opt_trace_material::mutable_familyname() {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyName)
  return familyname_;
}
inline ::std::string* opt_trace_material::release_familyname() {
  clear_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familyname_;
    familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familyname(::std::string* familyname) {
  if (familyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyname_;
  }
  if (familyname) {
    set_has_familyname();
    familyname_ = familyname;
  } else {
    clear_has_familyname();
    familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyName)
}

// optional bytes FamilyContactNo = 17;
inline bool opt_trace_material::has_familycontactno() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void opt_trace_material::set_has_familycontactno() {
  _has_bits_[0] |= 0x00010000u;
}
inline void opt_trace_material::clear_has_familycontactno() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void opt_trace_material::clear_familycontactno() {
  if (familycontactno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycontactno_->clear();
  }
  clear_has_familycontactno();
}
inline const ::std::string& opt_trace_material::familycontactno() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyContactNo)
  return *familycontactno_;
}
inline void opt_trace_material::set_familycontactno(const ::std::string& value) {
  set_has_familycontactno();
  if (familycontactno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycontactno_ = new ::std::string;
  }
  familycontactno_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyContactNo)
}
inline void opt_trace_material::set_familycontactno(const char* value) {
  set_has_familycontactno();
  if (familycontactno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycontactno_ = new ::std::string;
  }
  familycontactno_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyContactNo)
}
inline void opt_trace_material::set_familycontactno(const void* value, size_t size) {
  set_has_familycontactno();
  if (familycontactno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycontactno_ = new ::std::string;
  }
  familycontactno_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyContactNo)
}
inline ::std::string* opt_trace_material::mutable_familycontactno() {
  set_has_familycontactno();
  if (familycontactno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familycontactno_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyContactNo)
  return familycontactno_;
}
inline ::std::string* opt_trace_material::release_familycontactno() {
  clear_has_familycontactno();
  if (familycontactno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familycontactno_;
    familycontactno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familycontactno(::std::string* familycontactno) {
  if (familycontactno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familycontactno_;
  }
  if (familycontactno) {
    set_has_familycontactno();
    familycontactno_ = familycontactno;
  } else {
    clear_has_familycontactno();
    familycontactno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyContactNo)
}

// optional bytes FamilyRelation = 18;
inline bool opt_trace_material::has_familyrelation() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void opt_trace_material::set_has_familyrelation() {
  _has_bits_[0] |= 0x00020000u;
}
inline void opt_trace_material::clear_has_familyrelation() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void opt_trace_material::clear_familyrelation() {
  if (familyrelation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyrelation_->clear();
  }
  clear_has_familyrelation();
}
inline const ::std::string& opt_trace_material::familyrelation() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.FamilyRelation)
  return *familyrelation_;
}
inline void opt_trace_material::set_familyrelation(const ::std::string& value) {
  set_has_familyrelation();
  if (familyrelation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyrelation_ = new ::std::string;
  }
  familyrelation_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.FamilyRelation)
}
inline void opt_trace_material::set_familyrelation(const char* value) {
  set_has_familyrelation();
  if (familyrelation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyrelation_ = new ::std::string;
  }
  familyrelation_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.FamilyRelation)
}
inline void opt_trace_material::set_familyrelation(const void* value, size_t size) {
  set_has_familyrelation();
  if (familyrelation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyrelation_ = new ::std::string;
  }
  familyrelation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.FamilyRelation)
}
inline ::std::string* opt_trace_material::mutable_familyrelation() {
  set_has_familyrelation();
  if (familyrelation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyrelation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.FamilyRelation)
  return familyrelation_;
}
inline ::std::string* opt_trace_material::release_familyrelation() {
  clear_has_familyrelation();
  if (familyrelation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familyrelation_;
    familyrelation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_familyrelation(::std::string* familyrelation) {
  if (familyrelation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyrelation_;
  }
  if (familyrelation) {
    set_has_familyrelation();
    familyrelation_ = familyrelation;
  } else {
    clear_has_familyrelation();
    familyrelation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.FamilyRelation)
}

// optional bytes StudentSchool = 19;
inline bool opt_trace_material::has_studentschool() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void opt_trace_material::set_has_studentschool() {
  _has_bits_[0] |= 0x00040000u;
}
inline void opt_trace_material::clear_has_studentschool() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void opt_trace_material::clear_studentschool() {
  if (studentschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentschool_->clear();
  }
  clear_has_studentschool();
}
inline const ::std::string& opt_trace_material::studentschool() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.StudentSchool)
  return *studentschool_;
}
inline void opt_trace_material::set_studentschool(const ::std::string& value) {
  set_has_studentschool();
  if (studentschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentschool_ = new ::std::string;
  }
  studentschool_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.StudentSchool)
}
inline void opt_trace_material::set_studentschool(const char* value) {
  set_has_studentschool();
  if (studentschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentschool_ = new ::std::string;
  }
  studentschool_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.StudentSchool)
}
inline void opt_trace_material::set_studentschool(const void* value, size_t size) {
  set_has_studentschool();
  if (studentschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentschool_ = new ::std::string;
  }
  studentschool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.StudentSchool)
}
inline ::std::string* opt_trace_material::mutable_studentschool() {
  set_has_studentschool();
  if (studentschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentschool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.StudentSchool)
  return studentschool_;
}
inline ::std::string* opt_trace_material::release_studentschool() {
  clear_has_studentschool();
  if (studentschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = studentschool_;
    studentschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_studentschool(::std::string* studentschool) {
  if (studentschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete studentschool_;
  }
  if (studentschool) {
    set_has_studentschool();
    studentschool_ = studentschool;
  } else {
    clear_has_studentschool();
    studentschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.StudentSchool)
}

// optional bytes AttendingCollege = 20;
inline bool opt_trace_material::has_attendingcollege() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void opt_trace_material::set_has_attendingcollege() {
  _has_bits_[0] |= 0x00080000u;
}
inline void opt_trace_material::clear_has_attendingcollege() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void opt_trace_material::clear_attendingcollege() {
  if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_->clear();
  }
  clear_has_attendingcollege();
}
inline const ::std::string& opt_trace_material::attendingcollege() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.AttendingCollege)
  return *attendingcollege_;
}
inline void opt_trace_material::set_attendingcollege(const ::std::string& value) {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  attendingcollege_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.AttendingCollege)
}
inline void opt_trace_material::set_attendingcollege(const char* value) {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  attendingcollege_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.AttendingCollege)
}
inline void opt_trace_material::set_attendingcollege(const void* value, size_t size) {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  attendingcollege_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.AttendingCollege)
}
inline ::std::string* opt_trace_material::mutable_attendingcollege() {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.AttendingCollege)
  return attendingcollege_;
}
inline ::std::string* opt_trace_material::release_attendingcollege() {
  clear_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attendingcollege_;
    attendingcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_attendingcollege(::std::string* attendingcollege) {
  if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingcollege_;
  }
  if (attendingcollege) {
    set_has_attendingcollege();
    attendingcollege_ = attendingcollege;
  } else {
    clear_has_attendingcollege();
    attendingcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.AttendingCollege)
}

// optional bytes StudentProfessional = 21;
inline bool opt_trace_material::has_studentprofessional() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void opt_trace_material::set_has_studentprofessional() {
  _has_bits_[0] |= 0x00100000u;
}
inline void opt_trace_material::clear_has_studentprofessional() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void opt_trace_material::clear_studentprofessional() {
  if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_->clear();
  }
  clear_has_studentprofessional();
}
inline const ::std::string& opt_trace_material::studentprofessional() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.StudentProfessional)
  return *studentprofessional_;
}
inline void opt_trace_material::set_studentprofessional(const ::std::string& value) {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  studentprofessional_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.StudentProfessional)
}
inline void opt_trace_material::set_studentprofessional(const char* value) {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  studentprofessional_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.StudentProfessional)
}
inline void opt_trace_material::set_studentprofessional(const void* value, size_t size) {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  studentprofessional_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.StudentProfessional)
}
inline ::std::string* opt_trace_material::mutable_studentprofessional() {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.StudentProfessional)
  return studentprofessional_;
}
inline ::std::string* opt_trace_material::release_studentprofessional() {
  clear_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = studentprofessional_;
    studentprofessional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_studentprofessional(::std::string* studentprofessional) {
  if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete studentprofessional_;
  }
  if (studentprofessional) {
    set_has_studentprofessional();
    studentprofessional_ = studentprofessional;
  } else {
    clear_has_studentprofessional();
    studentprofessional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.StudentProfessional)
}

// optional bytes AttendingClass = 22;
inline bool opt_trace_material::has_attendingclass() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void opt_trace_material::set_has_attendingclass() {
  _has_bits_[0] |= 0x00200000u;
}
inline void opt_trace_material::clear_has_attendingclass() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void opt_trace_material::clear_attendingclass() {
  if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_->clear();
  }
  clear_has_attendingclass();
}
inline const ::std::string& opt_trace_material::attendingclass() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.AttendingClass)
  return *attendingclass_;
}
inline void opt_trace_material::set_attendingclass(const ::std::string& value) {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  attendingclass_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.AttendingClass)
}
inline void opt_trace_material::set_attendingclass(const char* value) {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  attendingclass_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.AttendingClass)
}
inline void opt_trace_material::set_attendingclass(const void* value, size_t size) {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  attendingclass_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.AttendingClass)
}
inline ::std::string* opt_trace_material::mutable_attendingclass() {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.AttendingClass)
  return attendingclass_;
}
inline ::std::string* opt_trace_material::release_attendingclass() {
  clear_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attendingclass_;
    attendingclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_attendingclass(::std::string* attendingclass) {
  if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingclass_;
  }
  if (attendingclass) {
    set_has_attendingclass();
    attendingclass_ = attendingclass;
  } else {
    clear_has_attendingclass();
    attendingclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.AttendingClass)
}

// optional bytes Email = 23;
inline bool opt_trace_material::has_email() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void opt_trace_material::set_has_email() {
  _has_bits_[0] |= 0x00400000u;
}
inline void opt_trace_material::clear_has_email() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void opt_trace_material::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& opt_trace_material::email() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.Email)
  return *email_;
}
inline void opt_trace_material::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.Email)
}
inline void opt_trace_material::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.Email)
}
inline void opt_trace_material::set_email(const void* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.Email)
}
inline ::std::string* opt_trace_material::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.Email)
  return email_;
}
inline ::std::string* opt_trace_material::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.Email)
}

// optional bytes CompanyProvince = 24;
inline bool opt_trace_material::has_companyprovince() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void opt_trace_material::set_has_companyprovince() {
  _has_bits_[0] |= 0x00800000u;
}
inline void opt_trace_material::clear_has_companyprovince() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void opt_trace_material::clear_companyprovince() {
  if (companyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyprovince_->clear();
  }
  clear_has_companyprovince();
}
inline const ::std::string& opt_trace_material::companyprovince() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.CompanyProvince)
  return *companyprovince_;
}
inline void opt_trace_material::set_companyprovince(const ::std::string& value) {
  set_has_companyprovince();
  if (companyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyprovince_ = new ::std::string;
  }
  companyprovince_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.CompanyProvince)
}
inline void opt_trace_material::set_companyprovince(const char* value) {
  set_has_companyprovince();
  if (companyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyprovince_ = new ::std::string;
  }
  companyprovince_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.CompanyProvince)
}
inline void opt_trace_material::set_companyprovince(const void* value, size_t size) {
  set_has_companyprovince();
  if (companyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyprovince_ = new ::std::string;
  }
  companyprovince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.CompanyProvince)
}
inline ::std::string* opt_trace_material::mutable_companyprovince() {
  set_has_companyprovince();
  if (companyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyprovince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.CompanyProvince)
  return companyprovince_;
}
inline ::std::string* opt_trace_material::release_companyprovince() {
  clear_has_companyprovince();
  if (companyprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companyprovince_;
    companyprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_companyprovince(::std::string* companyprovince) {
  if (companyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyprovince_;
  }
  if (companyprovince) {
    set_has_companyprovince();
    companyprovince_ = companyprovince;
  } else {
    clear_has_companyprovince();
    companyprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.CompanyProvince)
}

// optional bytes CompanyCity = 25;
inline bool opt_trace_material::has_companycity() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void opt_trace_material::set_has_companycity() {
  _has_bits_[0] |= 0x01000000u;
}
inline void opt_trace_material::clear_has_companycity() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void opt_trace_material::clear_companycity() {
  if (companycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companycity_->clear();
  }
  clear_has_companycity();
}
inline const ::std::string& opt_trace_material::companycity() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.CompanyCity)
  return *companycity_;
}
inline void opt_trace_material::set_companycity(const ::std::string& value) {
  set_has_companycity();
  if (companycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companycity_ = new ::std::string;
  }
  companycity_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.CompanyCity)
}
inline void opt_trace_material::set_companycity(const char* value) {
  set_has_companycity();
  if (companycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companycity_ = new ::std::string;
  }
  companycity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.CompanyCity)
}
inline void opt_trace_material::set_companycity(const void* value, size_t size) {
  set_has_companycity();
  if (companycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companycity_ = new ::std::string;
  }
  companycity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.CompanyCity)
}
inline ::std::string* opt_trace_material::mutable_companycity() {
  set_has_companycity();
  if (companycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companycity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.CompanyCity)
  return companycity_;
}
inline ::std::string* opt_trace_material::release_companycity() {
  clear_has_companycity();
  if (companycity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companycity_;
    companycity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_companycity(::std::string* companycity) {
  if (companycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companycity_;
  }
  if (companycity) {
    set_has_companycity();
    companycity_ = companycity;
  } else {
    clear_has_companycity();
    companycity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.CompanyCity)
}

// optional bytes CompanyArea = 26;
inline bool opt_trace_material::has_companyarea() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void opt_trace_material::set_has_companyarea() {
  _has_bits_[0] |= 0x02000000u;
}
inline void opt_trace_material::clear_has_companyarea() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void opt_trace_material::clear_companyarea() {
  if (companyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyarea_->clear();
  }
  clear_has_companyarea();
}
inline const ::std::string& opt_trace_material::companyarea() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.CompanyArea)
  return *companyarea_;
}
inline void opt_trace_material::set_companyarea(const ::std::string& value) {
  set_has_companyarea();
  if (companyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyarea_ = new ::std::string;
  }
  companyarea_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.CompanyArea)
}
inline void opt_trace_material::set_companyarea(const char* value) {
  set_has_companyarea();
  if (companyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyarea_ = new ::std::string;
  }
  companyarea_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.CompanyArea)
}
inline void opt_trace_material::set_companyarea(const void* value, size_t size) {
  set_has_companyarea();
  if (companyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyarea_ = new ::std::string;
  }
  companyarea_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.CompanyArea)
}
inline ::std::string* opt_trace_material::mutable_companyarea() {
  set_has_companyarea();
  if (companyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyarea_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.CompanyArea)
  return companyarea_;
}
inline ::std::string* opt_trace_material::release_companyarea() {
  clear_has_companyarea();
  if (companyarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companyarea_;
    companyarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_companyarea(::std::string* companyarea) {
  if (companyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyarea_;
  }
  if (companyarea) {
    set_has_companyarea();
    companyarea_ = companyarea;
  } else {
    clear_has_companyarea();
    companyarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.CompanyArea)
}

// optional bytes CompanyAddress = 27;
inline bool opt_trace_material::has_companyaddress() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void opt_trace_material::set_has_companyaddress() {
  _has_bits_[0] |= 0x04000000u;
}
inline void opt_trace_material::clear_has_companyaddress() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void opt_trace_material::clear_companyaddress() {
  if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_->clear();
  }
  clear_has_companyaddress();
}
inline const ::std::string& opt_trace_material::companyaddress() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.CompanyAddress)
  return *companyaddress_;
}
inline void opt_trace_material::set_companyaddress(const ::std::string& value) {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  companyaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.CompanyAddress)
}
inline void opt_trace_material::set_companyaddress(const char* value) {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  companyaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.CompanyAddress)
}
inline void opt_trace_material::set_companyaddress(const void* value, size_t size) {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  companyaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.CompanyAddress)
}
inline ::std::string* opt_trace_material::mutable_companyaddress() {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.CompanyAddress)
  return companyaddress_;
}
inline ::std::string* opt_trace_material::release_companyaddress() {
  clear_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companyaddress_;
    companyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_companyaddress(::std::string* companyaddress) {
  if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyaddress_;
  }
  if (companyaddress) {
    set_has_companyaddress();
    companyaddress_ = companyaddress;
  } else {
    clear_has_companyaddress();
    companyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.CompanyAddress)
}

// optional bytes CompanyPhone = 28;
inline bool opt_trace_material::has_companyphone() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void opt_trace_material::set_has_companyphone() {
  _has_bits_[0] |= 0x08000000u;
}
inline void opt_trace_material::clear_has_companyphone() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void opt_trace_material::clear_companyphone() {
  if (companyphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyphone_->clear();
  }
  clear_has_companyphone();
}
inline const ::std::string& opt_trace_material::companyphone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.CompanyPhone)
  return *companyphone_;
}
inline void opt_trace_material::set_companyphone(const ::std::string& value) {
  set_has_companyphone();
  if (companyphone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyphone_ = new ::std::string;
  }
  companyphone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.CompanyPhone)
}
inline void opt_trace_material::set_companyphone(const char* value) {
  set_has_companyphone();
  if (companyphone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyphone_ = new ::std::string;
  }
  companyphone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.CompanyPhone)
}
inline void opt_trace_material::set_companyphone(const void* value, size_t size) {
  set_has_companyphone();
  if (companyphone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyphone_ = new ::std::string;
  }
  companyphone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.CompanyPhone)
}
inline ::std::string* opt_trace_material::mutable_companyphone() {
  set_has_companyphone();
  if (companyphone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyphone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.CompanyPhone)
  return companyphone_;
}
inline ::std::string* opt_trace_material::release_companyphone() {
  clear_has_companyphone();
  if (companyphone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companyphone_;
    companyphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_companyphone(::std::string* companyphone) {
  if (companyphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyphone_;
  }
  if (companyphone) {
    set_has_companyphone();
    companyphone_ = companyphone;
  } else {
    clear_has_companyphone();
    companyphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.CompanyPhone)
}

// optional bytes Department = 29;
inline bool opt_trace_material::has_department() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void opt_trace_material::set_has_department() {
  _has_bits_[0] |= 0x10000000u;
}
inline void opt_trace_material::clear_has_department() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void opt_trace_material::clear_department() {
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_->clear();
  }
  clear_has_department();
}
inline const ::std::string& opt_trace_material::department() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.Department)
  return *department_;
}
inline void opt_trace_material::set_department(const ::std::string& value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.Department)
}
inline void opt_trace_material::set_department(const char* value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.Department)
}
inline void opt_trace_material::set_department(const void* value, size_t size) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.Department)
}
inline ::std::string* opt_trace_material::mutable_department() {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.Department)
  return department_;
}
inline ::std::string* opt_trace_material::release_department() {
  clear_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = department_;
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_department(::std::string* department) {
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (department) {
    set_has_department();
    department_ = department;
  } else {
    clear_has_department();
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.Department)
}

// optional bytes Position = 30;
inline bool opt_trace_material::has_position() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void opt_trace_material::set_has_position() {
  _has_bits_[0] |= 0x20000000u;
}
inline void opt_trace_material::clear_has_position() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void opt_trace_material::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& opt_trace_material::position() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.Position)
  return *position_;
}
inline void opt_trace_material::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.Position)
}
inline void opt_trace_material::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.Position)
}
inline void opt_trace_material::set_position(const void* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.Position)
}
inline ::std::string* opt_trace_material::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.Position)
  return position_;
}
inline ::std::string* opt_trace_material::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.Position)
}

// optional bytes WorkYear = 31;
inline bool opt_trace_material::has_workyear() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void opt_trace_material::set_has_workyear() {
  _has_bits_[0] |= 0x40000000u;
}
inline void opt_trace_material::clear_has_workyear() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void opt_trace_material::clear_workyear() {
  if (workyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workyear_->clear();
  }
  clear_has_workyear();
}
inline const ::std::string& opt_trace_material::workyear() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.WorkYear)
  return *workyear_;
}
inline void opt_trace_material::set_workyear(const ::std::string& value) {
  set_has_workyear();
  if (workyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workyear_ = new ::std::string;
  }
  workyear_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.opt_trace_material.WorkYear)
}
inline void opt_trace_material::set_workyear(const char* value) {
  set_has_workyear();
  if (workyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workyear_ = new ::std::string;
  }
  workyear_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.opt_trace_material.WorkYear)
}
inline void opt_trace_material::set_workyear(const void* value, size_t size) {
  set_has_workyear();
  if (workyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workyear_ = new ::std::string;
  }
  workyear_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.opt_trace_material.WorkYear)
}
inline ::std::string* opt_trace_material::mutable_workyear() {
  set_has_workyear();
  if (workyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workyear_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.WorkYear)
  return workyear_;
}
inline ::std::string* opt_trace_material::release_workyear() {
  clear_has_workyear();
  if (workyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = workyear_;
    workyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void opt_trace_material::set_allocated_workyear(::std::string* workyear) {
  if (workyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workyear_;
  }
  if (workyear) {
    set_has_workyear();
    workyear_ = workyear;
  } else {
    clear_has_workyear();
    workyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.WorkYear)
}

// repeated .UBAS_PageView.contact_person ContactPerson = 32;
inline int opt_trace_material::contactperson_size() const {
  return contactperson_.size();
}
inline void opt_trace_material::clear_contactperson() {
  contactperson_.Clear();
}
inline const ::UBAS_PageView::contact_person& opt_trace_material::contactperson(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.ContactPerson)
  return contactperson_.Get(index);
}
inline ::UBAS_PageView::contact_person* opt_trace_material::mutable_contactperson(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.ContactPerson)
  return contactperson_.Mutable(index);
}
inline ::UBAS_PageView::contact_person* opt_trace_material::add_contactperson() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.opt_trace_material.ContactPerson)
  return contactperson_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::contact_person >&
opt_trace_material::contactperson() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.opt_trace_material.ContactPerson)
  return contactperson_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::contact_person >*
opt_trace_material::mutable_contactperson() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.opt_trace_material.ContactPerson)
  return &contactperson_;
}

// optional .UBAS_PageView.estate estate_list = 33;
inline bool opt_trace_material::has_estate_list() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void opt_trace_material::set_has_estate_list() {
  _has_bits_[1] |= 0x00000001u;
}
inline void opt_trace_material::clear_has_estate_list() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void opt_trace_material::clear_estate_list() {
  if (estate_list_ != NULL) estate_list_->::UBAS_PageView::estate::Clear();
  clear_has_estate_list();
}
inline const ::UBAS_PageView::estate& opt_trace_material::estate_list() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.opt_trace_material.estate_list)
  return estate_list_ != NULL ? *estate_list_ : *default_instance_->estate_list_;
}
inline ::UBAS_PageView::estate* opt_trace_material::mutable_estate_list() {
  set_has_estate_list();
  if (estate_list_ == NULL) estate_list_ = new ::UBAS_PageView::estate;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.opt_trace_material.estate_list)
  return estate_list_;
}
inline ::UBAS_PageView::estate* opt_trace_material::release_estate_list() {
  clear_has_estate_list();
  ::UBAS_PageView::estate* temp = estate_list_;
  estate_list_ = NULL;
  return temp;
}
inline void opt_trace_material::set_allocated_estate_list(::UBAS_PageView::estate* estate_list) {
  delete estate_list_;
  estate_list_ = estate_list;
  if (estate_list) {
    set_has_estate_list();
  } else {
    clear_has_estate_list();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.opt_trace_material.estate_list)
}

// -------------------------------------------------------------------

// contact_person

// optional bytes Name = 1;
inline bool contact_person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void contact_person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void contact_person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void contact_person::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& contact_person::name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.contact_person.Name)
  return *name_;
}
inline void contact_person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.contact_person.Name)
}
inline void contact_person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.contact_person.Name)
}
inline void contact_person::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.contact_person.Name)
}
inline ::std::string* contact_person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.contact_person.Name)
  return name_;
}
inline ::std::string* contact_person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void contact_person::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.contact_person.Name)
}

// optional bytes Phone = 2;
inline bool contact_person::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void contact_person::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void contact_person::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void contact_person::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& contact_person::phone() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.contact_person.Phone)
  return *phone_;
}
inline void contact_person::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.contact_person.Phone)
}
inline void contact_person::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.contact_person.Phone)
}
inline void contact_person::set_phone(const void* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.contact_person.Phone)
}
inline ::std::string* contact_person::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.contact_person.Phone)
  return phone_;
}
inline ::std::string* contact_person::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void contact_person::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.contact_person.Phone)
}

// optional bytes Relation = 3;
inline bool contact_person::has_relation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void contact_person::set_has_relation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void contact_person::clear_has_relation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void contact_person::clear_relation() {
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_->clear();
  }
  clear_has_relation();
}
inline const ::std::string& contact_person::relation() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.contact_person.Relation)
  return *relation_;
}
inline void contact_person::set_relation(const ::std::string& value) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.contact_person.Relation)
}
inline void contact_person::set_relation(const char* value) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.contact_person.Relation)
}
inline void contact_person::set_relation(const void* value, size_t size) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.contact_person.Relation)
}
inline ::std::string* contact_person::mutable_relation() {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.contact_person.Relation)
  return relation_;
}
inline ::std::string* contact_person::release_relation() {
  clear_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relation_;
    relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void contact_person::set_allocated_relation(::std::string* relation) {
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relation_;
  }
  if (relation) {
    set_has_relation();
    relation_ = relation;
  } else {
    clear_has_relation();
    relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.contact_person.Relation)
}

// -------------------------------------------------------------------

// estate

// optional int32 EstateType = 1;
inline bool estate::has_estatetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void estate::set_has_estatetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void estate::clear_has_estatetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void estate::clear_estatetype() {
  estatetype_ = 0;
  clear_has_estatetype();
}
inline ::google::protobuf::int32 estate::estatetype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate.EstateType)
  return estatetype_;
}
inline void estate::set_estatetype(::google::protobuf::int32 value) {
  set_has_estatetype();
  estatetype_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate.EstateType)
}

// repeated .UBAS_PageView.estate_info infos = 2;
inline int estate::infos_size() const {
  return infos_.size();
}
inline void estate::clear_infos() {
  infos_.Clear();
}
inline const ::UBAS_PageView::estate_info& estate::infos(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate.infos)
  return infos_.Get(index);
}
inline ::UBAS_PageView::estate_info* estate::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate.infos)
  return infos_.Mutable(index);
}
inline ::UBAS_PageView::estate_info* estate::add_infos() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.estate.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::estate_info >&
estate::infos() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.estate.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::estate_info >*
estate::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.estate.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// estate_info

// optional bytes PurchaseYear = 1;
inline bool estate_info::has_purchaseyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void estate_info::set_has_purchaseyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void estate_info::clear_has_purchaseyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void estate_info::clear_purchaseyear() {
  if (purchaseyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    purchaseyear_->clear();
  }
  clear_has_purchaseyear();
}
inline const ::std::string& estate_info::purchaseyear() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.PurchaseYear)
  return *purchaseyear_;
}
inline void estate_info::set_purchaseyear(const ::std::string& value) {
  set_has_purchaseyear();
  if (purchaseyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    purchaseyear_ = new ::std::string;
  }
  purchaseyear_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.PurchaseYear)
}
inline void estate_info::set_purchaseyear(const char* value) {
  set_has_purchaseyear();
  if (purchaseyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    purchaseyear_ = new ::std::string;
  }
  purchaseyear_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.PurchaseYear)
}
inline void estate_info::set_purchaseyear(const void* value, size_t size) {
  set_has_purchaseyear();
  if (purchaseyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    purchaseyear_ = new ::std::string;
  }
  purchaseyear_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.PurchaseYear)
}
inline ::std::string* estate_info::mutable_purchaseyear() {
  set_has_purchaseyear();
  if (purchaseyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    purchaseyear_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.PurchaseYear)
  return purchaseyear_;
}
inline ::std::string* estate_info::release_purchaseyear() {
  clear_has_purchaseyear();
  if (purchaseyear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = purchaseyear_;
    purchaseyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_purchaseyear(::std::string* purchaseyear) {
  if (purchaseyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete purchaseyear_;
  }
  if (purchaseyear) {
    set_has_purchaseyear();
    purchaseyear_ = purchaseyear;
  } else {
    clear_has_purchaseyear();
    purchaseyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.PurchaseYear)
}

// optional bytes Photo = 2;
inline bool estate_info::has_photo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void estate_info::set_has_photo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void estate_info::clear_has_photo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void estate_info::clear_photo() {
  if (photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photo_->clear();
  }
  clear_has_photo();
}
inline const ::std::string& estate_info::photo() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.Photo)
  return *photo_;
}
inline void estate_info::set_photo(const ::std::string& value) {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photo_ = new ::std::string;
  }
  photo_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.Photo)
}
inline void estate_info::set_photo(const char* value) {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photo_ = new ::std::string;
  }
  photo_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.Photo)
}
inline void estate_info::set_photo(const void* value, size_t size) {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photo_ = new ::std::string;
  }
  photo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.Photo)
}
inline ::std::string* estate_info::mutable_photo() {
  set_has_photo();
  if (photo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.Photo)
  return photo_;
}
inline ::std::string* estate_info::release_photo() {
  clear_has_photo();
  if (photo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = photo_;
    photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_photo(::std::string* photo) {
  if (photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete photo_;
  }
  if (photo) {
    set_has_photo();
    photo_ = photo;
  } else {
    clear_has_photo();
    photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.Photo)
}

// optional int32 SourceType = 3;
inline bool estate_info::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void estate_info::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void estate_info::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void estate_info::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::google::protobuf::int32 estate_info::sourcetype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.SourceType)
  return sourcetype_;
}
inline void estate_info::set_sourcetype(::google::protobuf::int32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.SourceType)
}

// optional float MonthAvg = 4;
inline bool estate_info::has_monthavg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void estate_info::set_has_monthavg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void estate_info::clear_has_monthavg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void estate_info::clear_monthavg() {
  monthavg_ = 0;
  clear_has_monthavg();
}
inline float estate_info::monthavg() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.MonthAvg)
  return monthavg_;
}
inline void estate_info::set_monthavg(float value) {
  set_has_monthavg();
  monthavg_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.MonthAvg)
}

// optional bytes HouseType = 5;
inline bool estate_info::has_housetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void estate_info::set_has_housetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void estate_info::clear_has_housetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void estate_info::clear_housetype() {
  if (housetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housetype_->clear();
  }
  clear_has_housetype();
}
inline const ::std::string& estate_info::housetype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseType)
  return *housetype_;
}
inline void estate_info::set_housetype(const ::std::string& value) {
  set_has_housetype();
  if (housetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housetype_ = new ::std::string;
  }
  housetype_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseType)
}
inline void estate_info::set_housetype(const char* value) {
  set_has_housetype();
  if (housetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housetype_ = new ::std::string;
  }
  housetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.HouseType)
}
inline void estate_info::set_housetype(const void* value, size_t size) {
  set_has_housetype();
  if (housetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housetype_ = new ::std::string;
  }
  housetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.HouseType)
}
inline ::std::string* estate_info::mutable_housetype() {
  set_has_housetype();
  if (housetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.HouseType)
  return housetype_;
}
inline ::std::string* estate_info::release_housetype() {
  clear_has_housetype();
  if (housetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = housetype_;
    housetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_housetype(::std::string* housetype) {
  if (housetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housetype_;
  }
  if (housetype) {
    set_has_housetype();
    housetype_ = housetype;
  } else {
    clear_has_housetype();
    housetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.HouseType)
}

// optional bytes HouseProvince = 6;
inline bool estate_info::has_houseprovince() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void estate_info::set_has_houseprovince() {
  _has_bits_[0] |= 0x00000020u;
}
inline void estate_info::clear_has_houseprovince() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void estate_info::clear_houseprovince() {
  if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_->clear();
  }
  clear_has_houseprovince();
}
inline const ::std::string& estate_info::houseprovince() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseProvince)
  return *houseprovince_;
}
inline void estate_info::set_houseprovince(const ::std::string& value) {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  houseprovince_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseProvince)
}
inline void estate_info::set_houseprovince(const char* value) {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  houseprovince_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.HouseProvince)
}
inline void estate_info::set_houseprovince(const void* value, size_t size) {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  houseprovince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.HouseProvince)
}
inline ::std::string* estate_info::mutable_houseprovince() {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.HouseProvince)
  return houseprovince_;
}
inline ::std::string* estate_info::release_houseprovince() {
  clear_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = houseprovince_;
    houseprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_houseprovince(::std::string* houseprovince) {
  if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseprovince_;
  }
  if (houseprovince) {
    set_has_houseprovince();
    houseprovince_ = houseprovince;
  } else {
    clear_has_houseprovince();
    houseprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.HouseProvince)
}

// optional bytes HouseCity = 7;
inline bool estate_info::has_housecity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void estate_info::set_has_housecity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void estate_info::clear_has_housecity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void estate_info::clear_housecity() {
  if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_->clear();
  }
  clear_has_housecity();
}
inline const ::std::string& estate_info::housecity() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseCity)
  return *housecity_;
}
inline void estate_info::set_housecity(const ::std::string& value) {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  housecity_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseCity)
}
inline void estate_info::set_housecity(const char* value) {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  housecity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.HouseCity)
}
inline void estate_info::set_housecity(const void* value, size_t size) {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  housecity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.HouseCity)
}
inline ::std::string* estate_info::mutable_housecity() {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.HouseCity)
  return housecity_;
}
inline ::std::string* estate_info::release_housecity() {
  clear_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = housecity_;
    housecity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_housecity(::std::string* housecity) {
  if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housecity_;
  }
  if (housecity) {
    set_has_housecity();
    housecity_ = housecity;
  } else {
    clear_has_housecity();
    housecity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.HouseCity)
}

// optional bytes HouseArea = 8;
inline bool estate_info::has_housearea() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void estate_info::set_has_housearea() {
  _has_bits_[0] |= 0x00000080u;
}
inline void estate_info::clear_has_housearea() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void estate_info::clear_housearea() {
  if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_->clear();
  }
  clear_has_housearea();
}
inline const ::std::string& estate_info::housearea() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseArea)
  return *housearea_;
}
inline void estate_info::set_housearea(const ::std::string& value) {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  housearea_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseArea)
}
inline void estate_info::set_housearea(const char* value) {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  housearea_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.HouseArea)
}
inline void estate_info::set_housearea(const void* value, size_t size) {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  housearea_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.HouseArea)
}
inline ::std::string* estate_info::mutable_housearea() {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.HouseArea)
  return housearea_;
}
inline ::std::string* estate_info::release_housearea() {
  clear_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = housearea_;
    housearea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_housearea(::std::string* housearea) {
  if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housearea_;
  }
  if (housearea) {
    set_has_housearea();
    housearea_ = housearea;
  } else {
    clear_has_housearea();
    housearea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.HouseArea)
}

// optional bytes HouseAddress = 9;
inline bool estate_info::has_houseaddress() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void estate_info::set_has_houseaddress() {
  _has_bits_[0] |= 0x00000100u;
}
inline void estate_info::clear_has_houseaddress() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void estate_info::clear_houseaddress() {
  if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_->clear();
  }
  clear_has_houseaddress();
}
inline const ::std::string& estate_info::houseaddress() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseAddress)
  return *houseaddress_;
}
inline void estate_info::set_houseaddress(const ::std::string& value) {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  houseaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseAddress)
}
inline void estate_info::set_houseaddress(const char* value) {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  houseaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.HouseAddress)
}
inline void estate_info::set_houseaddress(const void* value, size_t size) {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  houseaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.HouseAddress)
}
inline ::std::string* estate_info::mutable_houseaddress() {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.HouseAddress)
  return houseaddress_;
}
inline ::std::string* estate_info::release_houseaddress() {
  clear_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = houseaddress_;
    houseaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_houseaddress(::std::string* houseaddress) {
  if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseaddress_;
  }
  if (houseaddress) {
    set_has_houseaddress();
    houseaddress_ = houseaddress;
  } else {
    clear_has_houseaddress();
    houseaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.HouseAddress)
}

// optional bytes HouseSpace = 10;
inline bool estate_info::has_housespace() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void estate_info::set_has_housespace() {
  _has_bits_[0] |= 0x00000200u;
}
inline void estate_info::clear_has_housespace() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void estate_info::clear_housespace() {
  if (housespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housespace_->clear();
  }
  clear_has_housespace();
}
inline const ::std::string& estate_info::housespace() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseSpace)
  return *housespace_;
}
inline void estate_info::set_housespace(const ::std::string& value) {
  set_has_housespace();
  if (housespace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housespace_ = new ::std::string;
  }
  housespace_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseSpace)
}
inline void estate_info::set_housespace(const char* value) {
  set_has_housespace();
  if (housespace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housespace_ = new ::std::string;
  }
  housespace_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.HouseSpace)
}
inline void estate_info::set_housespace(const void* value, size_t size) {
  set_has_housespace();
  if (housespace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housespace_ = new ::std::string;
  }
  housespace_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.HouseSpace)
}
inline ::std::string* estate_info::mutable_housespace() {
  set_has_housespace();
  if (housespace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housespace_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.HouseSpace)
  return housespace_;
}
inline ::std::string* estate_info::release_housespace() {
  clear_has_housespace();
  if (housespace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = housespace_;
    housespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_housespace(::std::string* housespace) {
  if (housespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housespace_;
  }
  if (housespace) {
    set_has_housespace();
    housespace_ = housespace;
  } else {
    clear_has_housespace();
    housespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.HouseSpace)
}

// optional int32 HouseValue = 11;
inline bool estate_info::has_housevalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void estate_info::set_has_housevalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void estate_info::clear_has_housevalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void estate_info::clear_housevalue() {
  housevalue_ = 0;
  clear_has_housevalue();
}
inline ::google::protobuf::int32 estate_info::housevalue() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseValue)
  return housevalue_;
}
inline void estate_info::set_housevalue(::google::protobuf::int32 value) {
  set_has_housevalue();
  housevalue_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseValue)
}

// optional int32 HouseLoan = 12;
inline bool estate_info::has_houseloan() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void estate_info::set_has_houseloan() {
  _has_bits_[0] |= 0x00000800u;
}
inline void estate_info::clear_has_houseloan() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void estate_info::clear_houseloan() {
  houseloan_ = 0;
  clear_has_houseloan();
}
inline ::google::protobuf::int32 estate_info::houseloan() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.HouseLoan)
  return houseloan_;
}
inline void estate_info::set_houseloan(::google::protobuf::int32 value) {
  set_has_houseloan();
  houseloan_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.HouseLoan)
}

// optional bytes CarNo = 13;
inline bool estate_info::has_carno() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void estate_info::set_has_carno() {
  _has_bits_[0] |= 0x00001000u;
}
inline void estate_info::clear_has_carno() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void estate_info::clear_carno() {
  if (carno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carno_->clear();
  }
  clear_has_carno();
}
inline const ::std::string& estate_info::carno() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.CarNo)
  return *carno_;
}
inline void estate_info::set_carno(const ::std::string& value) {
  set_has_carno();
  if (carno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carno_ = new ::std::string;
  }
  carno_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.CarNo)
}
inline void estate_info::set_carno(const char* value) {
  set_has_carno();
  if (carno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carno_ = new ::std::string;
  }
  carno_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.CarNo)
}
inline void estate_info::set_carno(const void* value, size_t size) {
  set_has_carno();
  if (carno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carno_ = new ::std::string;
  }
  carno_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.CarNo)
}
inline ::std::string* estate_info::mutable_carno() {
  set_has_carno();
  if (carno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carno_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.CarNo)
  return carno_;
}
inline ::std::string* estate_info::release_carno() {
  clear_has_carno();
  if (carno_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = carno_;
    carno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_carno(::std::string* carno) {
  if (carno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carno_;
  }
  if (carno) {
    set_has_carno();
    carno_ = carno;
  } else {
    clear_has_carno();
    carno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.CarNo)
}

// optional bytes CarType = 14;
inline bool estate_info::has_cartype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void estate_info::set_has_cartype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void estate_info::clear_has_cartype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void estate_info::clear_cartype() {
  if (cartype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cartype_->clear();
  }
  clear_has_cartype();
}
inline const ::std::string& estate_info::cartype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.CarType)
  return *cartype_;
}
inline void estate_info::set_cartype(const ::std::string& value) {
  set_has_cartype();
  if (cartype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cartype_ = new ::std::string;
  }
  cartype_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.CarType)
}
inline void estate_info::set_cartype(const char* value) {
  set_has_cartype();
  if (cartype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cartype_ = new ::std::string;
  }
  cartype_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.estate_info.CarType)
}
inline void estate_info::set_cartype(const void* value, size_t size) {
  set_has_cartype();
  if (cartype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cartype_ = new ::std::string;
  }
  cartype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.estate_info.CarType)
}
inline ::std::string* estate_info::mutable_cartype() {
  set_has_cartype();
  if (cartype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cartype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.estate_info.CarType)
  return cartype_;
}
inline ::std::string* estate_info::release_cartype() {
  clear_has_cartype();
  if (cartype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cartype_;
    cartype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void estate_info::set_allocated_cartype(::std::string* cartype) {
  if (cartype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cartype_;
  }
  if (cartype) {
    set_has_cartype();
    cartype_ = cartype;
  } else {
    clear_has_cartype();
    cartype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.estate_info.CarType)
}

// optional int32 CarValue = 15;
inline bool estate_info::has_carvalue() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void estate_info::set_has_carvalue() {
  _has_bits_[0] |= 0x00004000u;
}
inline void estate_info::clear_has_carvalue() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void estate_info::clear_carvalue() {
  carvalue_ = 0;
  clear_has_carvalue();
}
inline ::google::protobuf::int32 estate_info::carvalue() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.estate_info.CarValue)
  return carvalue_;
}
inline void estate_info::set_carvalue(::google::protobuf::int32 value) {
  set_has_carvalue();
  carvalue_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.estate_info.CarValue)
}

// -------------------------------------------------------------------

// verify_trace

// optional int32 ApplyType = 1;
inline bool verify_trace::has_applytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_trace::set_has_applytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_trace::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_trace::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
inline ::google::protobuf::int32 verify_trace::applytype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.verify_trace.ApplyType)
  return applytype_;
}
inline void verify_trace::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.verify_trace.ApplyType)
}

// optional int32 UserTypeId = 2;
inline bool verify_trace::has_usertypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_trace::set_has_usertypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_trace::clear_has_usertypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_trace::clear_usertypeid() {
  usertypeid_ = 0;
  clear_has_usertypeid();
}
inline ::google::protobuf::int32 verify_trace::usertypeid() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.verify_trace.UserTypeId)
  return usertypeid_;
}
inline void verify_trace::set_usertypeid(::google::protobuf::int32 value) {
  set_has_usertypeid();
  usertypeid_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.verify_trace.UserTypeId)
}

// optional int32 DegreeType = 3;
inline bool verify_trace::has_degreetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_trace::set_has_degreetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_trace::clear_has_degreetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_trace::clear_degreetype() {
  degreetype_ = 0;
  clear_has_degreetype();
}
inline ::google::protobuf::int32 verify_trace::degreetype() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.verify_trace.DegreeType)
  return degreetype_;
}
inline void verify_trace::set_degreetype(::google::protobuf::int32 value) {
  set_has_degreetype();
  degreetype_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.verify_trace.DegreeType)
}

// optional bytes GraduateSchool = 4;
inline bool verify_trace::has_graduateschool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void verify_trace::set_has_graduateschool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void verify_trace::clear_has_graduateschool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void verify_trace::clear_graduateschool() {
  if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_->clear();
  }
  clear_has_graduateschool();
}
inline const ::std::string& verify_trace::graduateschool() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.verify_trace.GraduateSchool)
  return *graduateschool_;
}
inline void verify_trace::set_graduateschool(const ::std::string& value) {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  graduateschool_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.verify_trace.GraduateSchool)
}
inline void verify_trace::set_graduateschool(const char* value) {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  graduateschool_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.verify_trace.GraduateSchool)
}
inline void verify_trace::set_graduateschool(const void* value, size_t size) {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  graduateschool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.verify_trace.GraduateSchool)
}
inline ::std::string* verify_trace::mutable_graduateschool() {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.verify_trace.GraduateSchool)
  return graduateschool_;
}
inline ::std::string* verify_trace::release_graduateschool() {
  clear_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graduateschool_;
    graduateschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_trace::set_allocated_graduateschool(::std::string* graduateschool) {
  if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduateschool_;
  }
  if (graduateschool) {
    set_has_graduateschool();
    graduateschool_ = graduateschool;
  } else {
    clear_has_graduateschool();
    graduateschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.verify_trace.GraduateSchool)
}

// optional bytes GraduateDate = 5;
inline bool verify_trace::has_graduatedate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void verify_trace::set_has_graduatedate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void verify_trace::clear_has_graduatedate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void verify_trace::clear_graduatedate() {
  if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_->clear();
  }
  clear_has_graduatedate();
}
inline const ::std::string& verify_trace::graduatedate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.verify_trace.GraduateDate)
  return *graduatedate_;
}
inline void verify_trace::set_graduatedate(const ::std::string& value) {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  graduatedate_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.verify_trace.GraduateDate)
}
inline void verify_trace::set_graduatedate(const char* value) {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  graduatedate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.verify_trace.GraduateDate)
}
inline void verify_trace::set_graduatedate(const void* value, size_t size) {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  graduatedate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.verify_trace.GraduateDate)
}
inline ::std::string* verify_trace::mutable_graduatedate() {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.verify_trace.GraduateDate)
  return graduatedate_;
}
inline ::std::string* verify_trace::release_graduatedate() {
  clear_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graduatedate_;
    graduatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_trace::set_allocated_graduatedate(::std::string* graduatedate) {
  if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduatedate_;
  }
  if (graduatedate) {
    set_has_graduatedate();
    graduatedate_ = graduatedate;
  } else {
    clear_has_graduatedate();
    graduatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.verify_trace.GraduateDate)
}

// optional bytes Major = 6;
inline bool verify_trace::has_major() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void verify_trace::set_has_major() {
  _has_bits_[0] |= 0x00000020u;
}
inline void verify_trace::clear_has_major() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void verify_trace::clear_major() {
  if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_->clear();
  }
  clear_has_major();
}
inline const ::std::string& verify_trace::major() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.verify_trace.Major)
  return *major_;
}
inline void verify_trace::set_major(const ::std::string& value) {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  major_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.verify_trace.Major)
}
inline void verify_trace::set_major(const char* value) {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  major_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.verify_trace.Major)
}
inline void verify_trace::set_major(const void* value, size_t size) {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  major_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.verify_trace.Major)
}
inline ::std::string* verify_trace::mutable_major() {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.verify_trace.Major)
  return major_;
}
inline ::std::string* verify_trace::release_major() {
  clear_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = major_;
    major_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_trace::set_allocated_major(::std::string* major) {
  if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete major_;
  }
  if (major) {
    set_has_major();
    major_ = major;
  } else {
    clear_has_major();
    major_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.verify_trace.Major)
}

// -------------------------------------------------------------------

// page_access_detail

// optional bytes page_name = 1;
inline bool page_access_detail::has_page_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_access_detail::set_has_page_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_access_detail::clear_has_page_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_access_detail::clear_page_name() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_->clear();
  }
  clear_has_page_name();
}
inline const ::std::string& page_access_detail::page_name() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_detail.page_name)
  return *page_name_;
}
inline void page_access_detail::set_page_name(const ::std::string& value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_detail.page_name)
}
inline void page_access_detail::set_page_name(const char* value) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_access_detail.page_name)
}
inline void page_access_detail::set_page_name(const void* value, size_t size) {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  page_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_access_detail.page_name)
}
inline ::std::string* page_access_detail::mutable_page_name() {
  set_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    page_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_detail.page_name)
  return page_name_;
}
inline ::std::string* page_access_detail::release_page_name() {
  clear_has_page_name();
  if (page_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = page_name_;
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_access_detail::set_allocated_page_name(::std::string* page_name) {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (page_name) {
    set_has_page_name();
    page_name_ = page_name;
  } else {
    clear_has_page_name();
    page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_detail.page_name)
}

// optional int32 access_count = 2;
inline bool page_access_detail::has_access_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_access_detail::set_has_access_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_access_detail::clear_has_access_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_access_detail::clear_access_count() {
  access_count_ = 0;
  clear_has_access_count();
}
inline ::google::protobuf::int32 page_access_detail::access_count() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_detail.access_count)
  return access_count_;
}
inline void page_access_detail::set_access_count(::google::protobuf::int32 value) {
  set_has_access_count();
  access_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_detail.access_count)
}

// optional int32 duration = 3;
inline bool page_access_detail::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_access_detail::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_access_detail::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_access_detail::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 page_access_detail::duration() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_detail.duration)
  return duration_;
}
inline void page_access_detail::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_detail.duration)
}

// optional float access_count_rate = 4;
inline bool page_access_detail::has_access_count_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void page_access_detail::set_has_access_count_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void page_access_detail::clear_has_access_count_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void page_access_detail::clear_access_count_rate() {
  access_count_rate_ = 0;
  clear_has_access_count_rate();
}
inline float page_access_detail::access_count_rate() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_detail.access_count_rate)
  return access_count_rate_;
}
inline void page_access_detail::set_access_count_rate(float value) {
  set_has_access_count_rate();
  access_count_rate_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_detail.access_count_rate)
}

// -------------------------------------------------------------------

// page_access_details_ask

// optional bytes start_date = 1;
inline bool page_access_details_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_access_details_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_access_details_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_access_details_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& page_access_details_ask::start_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ask.start_date)
  return *start_date_;
}
inline void page_access_details_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_details_ask.start_date)
}
inline void page_access_details_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_access_details_ask.start_date)
}
inline void page_access_details_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_access_details_ask.start_date)
}
inline ::std::string* page_access_details_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_details_ask.start_date)
  return start_date_;
}
inline ::std::string* page_access_details_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_access_details_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_details_ask.start_date)
}

// optional bytes end_date = 2;
inline bool page_access_details_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void page_access_details_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void page_access_details_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void page_access_details_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& page_access_details_ask::end_date() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ask.end_date)
  return *end_date_;
}
inline void page_access_details_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_details_ask.end_date)
}
inline void page_access_details_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_PageView.page_access_details_ask.end_date)
}
inline void page_access_details_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_PageView.page_access_details_ask.end_date)
}
inline ::std::string* page_access_details_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_details_ask.end_date)
  return end_date_;
}
inline ::std::string* page_access_details_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void page_access_details_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_details_ask.end_date)
}

// optional int32 numOfPage = 3;
inline bool page_access_details_ask::has_numofpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_access_details_ask::set_has_numofpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_access_details_ask::clear_has_numofpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_access_details_ask::clear_numofpage() {
  numofpage_ = 0;
  clear_has_numofpage();
}
inline ::google::protobuf::int32 page_access_details_ask::numofpage() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ask.numOfPage)
  return numofpage_;
}
inline void page_access_details_ask::set_numofpage(::google::protobuf::int32 value) {
  set_has_numofpage();
  numofpage_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_details_ask.numOfPage)
}

// optional int32 currPageNo = 4;
inline bool page_access_details_ask::has_currpageno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void page_access_details_ask::set_has_currpageno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void page_access_details_ask::clear_has_currpageno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void page_access_details_ask::clear_currpageno() {
  currpageno_ = 0;
  clear_has_currpageno();
}
inline ::google::protobuf::int32 page_access_details_ask::currpageno() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ask.currPageNo)
  return currpageno_;
}
inline void page_access_details_ask::set_currpageno(::google::protobuf::int32 value) {
  set_has_currpageno();
  currpageno_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_details_ask.currPageNo)
}

// optional .common.common_ask_header ask_header = 5;
inline bool page_access_details_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void page_access_details_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void page_access_details_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void page_access_details_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& page_access_details_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* page_access_details_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_details_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* page_access_details_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void page_access_details_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_details_ask.ask_header)
}

// -------------------------------------------------------------------

// page_access_details_ans

// optional int32 total_count = 1;
inline bool page_access_details_ans::has_total_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void page_access_details_ans::set_has_total_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void page_access_details_ans::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void page_access_details_ans::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 page_access_details_ans::total_count() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ans.total_count)
  return total_count_;
}
inline void page_access_details_ans::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_PageView.page_access_details_ans.total_count)
}

// repeated .UBAS_PageView.page_access_detail details = 2;
inline int page_access_details_ans::details_size() const {
  return details_.size();
}
inline void page_access_details_ans::clear_details() {
  details_.Clear();
}
inline const ::UBAS_PageView::page_access_detail& page_access_details_ans::details(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ans.details)
  return details_.Get(index);
}
inline ::UBAS_PageView::page_access_detail* page_access_details_ans::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_details_ans.details)
  return details_.Mutable(index);
}
inline ::UBAS_PageView::page_access_detail* page_access_details_ans::add_details() {
  // @@protoc_insertion_point(field_add:UBAS_PageView.page_access_details_ans.details)
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_detail >&
page_access_details_ans::details() const {
  // @@protoc_insertion_point(field_list:UBAS_PageView.page_access_details_ans.details)
  return details_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_PageView::page_access_detail >*
page_access_details_ans::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_PageView.page_access_details_ans.details)
  return &details_;
}

// optional .common.result_info result = 3;
inline bool page_access_details_ans::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void page_access_details_ans::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void page_access_details_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void page_access_details_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& page_access_details_ans::result() const {
  // @@protoc_insertion_point(field_get:UBAS_PageView.page_access_details_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* page_access_details_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UBAS_PageView.page_access_details_ans.result)
  return result_;
}
inline ::common::result_info* page_access_details_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void page_access_details_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_PageView.page_access_details_ans.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UBAS_PageView

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::UBAS_PageView::terminal_model_ask_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_PageView::terminal_model_ask_type>() {
  return ::UBAS_PageView::terminal_model_ask_type_descriptor();
}
template <> struct is_proto_enum< ::UBAS_PageView::mobile_os_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_PageView::mobile_os_type>() {
  return ::UBAS_PageView::mobile_os_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UBAS_5fPageView_2eproto__INCLUDED
