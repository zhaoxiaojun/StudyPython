// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IOMS_main_frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IOMS_main_frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IOMS_main_frame {

namespace {

const ::google::protobuf::Descriptor* credit_request_monitor_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_request_monitor_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_request_monitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_request_monitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_request_monitor_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_request_monitor_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_response_monitor_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_response_monitor_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_response_monitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_response_monitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_response_monitor_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_response_monitor_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* fraud_request_monitor_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fraud_request_monitor_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* fraud_request_monitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fraud_request_monitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* fraud_request_monitor_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fraud_request_monitor_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* fraud_response_monitor_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fraud_response_monitor_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* fraud_response_monitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fraud_response_monitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* fraud_response_monitor_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fraud_response_monitor_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* configuration_amend_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  configuration_amend_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* configuration_amend_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  configuration_amend_ans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto() {
  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IOMS_main_frame.proto");
  GOOGLE_CHECK(file != NULL);
  credit_request_monitor_ask_descriptor_ = file->message_type(0);
  static const int credit_request_monitor_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, handle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, ask_header_),
  };
  credit_request_monitor_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_request_monitor_ask_descriptor_,
      credit_request_monitor_ask::default_instance_,
      credit_request_monitor_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_request_monitor_ask));
  credit_request_monitor_descriptor_ = file->message_type(1);
  static const int credit_request_monitor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor, handle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor, json_),
  };
  credit_request_monitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_request_monitor_descriptor_,
      credit_request_monitor::default_instance_,
      credit_request_monitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_request_monitor));
  credit_request_monitor_ans_descriptor_ = file->message_type(2);
  static const int credit_request_monitor_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, credit_req_monitor_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, error_),
  };
  credit_request_monitor_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_request_monitor_ans_descriptor_,
      credit_request_monitor_ans::default_instance_,
      credit_request_monitor_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_request_monitor_ans));
  credit_response_monitor_ask_descriptor_ = file->message_type(3);
  static const int credit_response_monitor_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, handle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, ask_header_),
  };
  credit_response_monitor_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_response_monitor_ask_descriptor_,
      credit_response_monitor_ask::default_instance_,
      credit_response_monitor_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_response_monitor_ask));
  credit_response_monitor_descriptor_ = file->message_type(4);
  static const int credit_response_monitor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor, inset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor, json_),
  };
  credit_response_monitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_response_monitor_descriptor_,
      credit_response_monitor::default_instance_,
      credit_response_monitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_response_monitor));
  credit_response_monitor_ans_descriptor_ = file->message_type(5);
  static const int credit_response_monitor_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, credit_rsp_monitor_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, error_),
  };
  credit_response_monitor_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_response_monitor_ans_descriptor_,
      credit_response_monitor_ans::default_instance_,
      credit_response_monitor_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_response_monitor_ans));
  fraud_request_monitor_ask_descriptor_ = file->message_type(6);
  static const int fraud_request_monitor_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ask, ask_header_),
  };
  fraud_request_monitor_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fraud_request_monitor_ask_descriptor_,
      fraud_request_monitor_ask::default_instance_,
      fraud_request_monitor_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fraud_request_monitor_ask));
  fraud_request_monitor_descriptor_ = file->message_type(7);
  static const int fraud_request_monitor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, request_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, inset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, status_),
  };
  fraud_request_monitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fraud_request_monitor_descriptor_,
      fraud_request_monitor::default_instance_,
      fraud_request_monitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fraud_request_monitor));
  fraud_request_monitor_ans_descriptor_ = file->message_type(8);
  static const int fraud_request_monitor_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ans, fraud_req_monitor_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ans, error_),
  };
  fraud_request_monitor_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fraud_request_monitor_ans_descriptor_,
      fraud_request_monitor_ans::default_instance_,
      fraud_request_monitor_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_request_monitor_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fraud_request_monitor_ans));
  fraud_response_monitor_ask_descriptor_ = file->message_type(9);
  static const int fraud_response_monitor_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ask, ask_header_),
  };
  fraud_response_monitor_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fraud_response_monitor_ask_descriptor_,
      fraud_response_monitor_ask::default_instance_,
      fraud_response_monitor_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fraud_response_monitor_ask));
  fraud_response_monitor_descriptor_ = file->message_type(10);
  static const int fraud_response_monitor_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, request_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, model_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, result_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, error_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, result_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, version_),
  };
  fraud_response_monitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fraud_response_monitor_descriptor_,
      fraud_response_monitor::default_instance_,
      fraud_response_monitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fraud_response_monitor));
  fraud_response_monitor_ans_descriptor_ = file->message_type(11);
  static const int fraud_response_monitor_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ans, fraud_rsp_monitor_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ans, error_),
  };
  fraud_response_monitor_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fraud_response_monitor_ans_descriptor_,
      fraud_response_monitor_ans::default_instance_,
      fraud_response_monitor_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fraud_response_monitor_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fraud_response_monitor_ans));
  configuration_amend_ask_descriptor_ = file->message_type(12);
  static const int configuration_amend_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ask, configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ask, ask_header_),
  };
  configuration_amend_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      configuration_amend_ask_descriptor_,
      configuration_amend_ask::default_instance_,
      configuration_amend_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(configuration_amend_ask));
  configuration_amend_ans_descriptor_ = file->message_type(13);
  static const int configuration_amend_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ans, result_),
  };
  configuration_amend_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      configuration_amend_ans_descriptor_,
      configuration_amend_ans::default_instance_,
      configuration_amend_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration_amend_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(configuration_amend_ans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_request_monitor_ask_descriptor_, &credit_request_monitor_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_request_monitor_descriptor_, &credit_request_monitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_request_monitor_ans_descriptor_, &credit_request_monitor_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_response_monitor_ask_descriptor_, &credit_response_monitor_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_response_monitor_descriptor_, &credit_response_monitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_response_monitor_ans_descriptor_, &credit_response_monitor_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fraud_request_monitor_ask_descriptor_, &fraud_request_monitor_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fraud_request_monitor_descriptor_, &fraud_request_monitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fraud_request_monitor_ans_descriptor_, &fraud_request_monitor_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fraud_response_monitor_ask_descriptor_, &fraud_response_monitor_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fraud_response_monitor_descriptor_, &fraud_response_monitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fraud_response_monitor_ans_descriptor_, &fraud_response_monitor_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    configuration_amend_ask_descriptor_, &configuration_amend_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    configuration_amend_ans_descriptor_, &configuration_amend_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto() {
  delete credit_request_monitor_ask::default_instance_;
  delete credit_request_monitor_ask_reflection_;
  delete credit_request_monitor::default_instance_;
  delete credit_request_monitor_reflection_;
  delete credit_request_monitor_ans::default_instance_;
  delete credit_request_monitor_ans_reflection_;
  delete credit_response_monitor_ask::default_instance_;
  delete credit_response_monitor_ask_reflection_;
  delete credit_response_monitor::default_instance_;
  delete credit_response_monitor_reflection_;
  delete credit_response_monitor_ans::default_instance_;
  delete credit_response_monitor_ans_reflection_;
  delete fraud_request_monitor_ask::default_instance_;
  delete fraud_request_monitor_ask_reflection_;
  delete fraud_request_monitor::default_instance_;
  delete fraud_request_monitor_reflection_;
  delete fraud_request_monitor_ans::default_instance_;
  delete fraud_request_monitor_ans_reflection_;
  delete fraud_response_monitor_ask::default_instance_;
  delete fraud_response_monitor_ask_reflection_;
  delete fraud_response_monitor::default_instance_;
  delete fraud_response_monitor_reflection_;
  delete fraud_response_monitor_ans::default_instance_;
  delete fraud_response_monitor_ans_reflection_;
  delete configuration_amend_ask::default_instance_;
  delete configuration_amend_ask_reflection_;
  delete configuration_amend_ans::default_instance_;
  delete configuration_amend_ans_reflection_;
}

void protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025IOMS_main_frame.proto\022\017IOMS_main_frame"
    "\032\014common.proto\"`\n\032credit_request_monitor"
    "_ask\022\023\n\013handle_type\030\001 \001(\005\022-\n\nask_header\030"
    "\002 \001(\0132\031.common.common_ask_header\"\\\n\026cred"
    "it_request_monitor\022\n\n\002id\030\001 \001(\014\022\023\n\013update"
    "_time\030\002 \001(\014\022\023\n\013handle_type\030\003 \001(\005\022\014\n\004json"
    "\030\004 \001(\014\"\210\001\n\032credit_request_monitor_ans\022H\n"
    "\027credit_req_monitor_list\030\001 \003(\0132\'.IOMS_ma"
    "in_frame.credit_request_monitor\022 \n\005error"
    "\030\002 \001(\0132\021.common.errorinfo\"a\n\033credit_resp"
    "onse_monitor_ask\022\023\n\013handle_type\030\001 \001(\005\022-\n"
    "\nask_header\030\002 \001(\0132\031.common.common_ask_he"
    "ader\"G\n\027credit_response_monitor\022\n\n\002id\030\001 "
    "\001(\014\022\022\n\ninset_time\030\002 \001(\014\022\014\n\004json\030\003 \001(\014\"\212\001"
    "\n\033credit_response_monitor_ans\022I\n\027credit_"
    "rsp_monitor_list\030\001 \003(\0132(.IOMS_main_frame"
    ".credit_response_monitor\022 \n\005error\030\002 \001(\0132"
    "\021.common.errorinfo\"J\n\031fraud_request_moni"
    "tor_ask\022-\n\nask_header\030\001 \001(\0132\031.common.com"
    "mon_ask_header\"w\n\025fraud_request_monitor\022"
    "\020\n\010uniqueid\030\001 \001(\005\022\024\n\014request_json\030\002 \001(\014\022"
    "\022\n\nmodel_type\030\003 \001(\005\022\022\n\ninset_time\030\004 \001(\014\022"
    "\016\n\006status\030\005 \001(\005\"\205\001\n\031fraud_request_monito"
    "r_ans\022F\n\026fraud_req_monitor_list\030\001 \003(\0132&."
    "IOMS_main_frame.fraud_request_monitor\022 \n"
    "\005error\030\002 \001(\0132\021.common.errorinfo\"K\n\032fraud"
    "_response_monitor_ask\022-\n\nask_header\030\001 \001("
    "\0132\031.common.common_ask_header\"\245\002\n\026fraud_r"
    "esponse_monitor\022\020\n\010uniqueid\030\001 \001(\005\022\024\n\014req"
    "uest_json\030\002 \001(\014\022\022\n\nmodel_name\030\003 \001(\014\022\024\n\014m"
    "odel_result\030\004 \001(\014\022\023\n\013result_json\030\005 \001(\014\022\021"
    "\n\treal_name\030\006 \001(\014\022\023\n\013mobilePhone\030\007 \001(\014\022\017"
    "\n\007id_card\030\010 \001(\014\022\022\n\nmodel_type\030\t \001(\005\022\022\n\ne"
    "rror_info\030\n \001(\014\022\023\n\013result_time\030\013 \001(\014\022\016\n\006"
    "status\030\014 \001(\005\022\r\n\005appid\030\r \001(\014\022\017\n\007version\030\016"
    " \001(\014\"\207\001\n\032fraud_response_monitor_ans\022G\n\026f"
    "raud_rsp_monitor_list\030\001 \003(\0132\'.IOMS_main_"
    "frame.fraud_response_monitor\022 \n\005error\030\016 "
    "\001(\0132\021.common.errorinfo\"_\n\027configuration_"
    "amend_ask\022\025\n\rconfiguration\030\001 \001(\014\022-\n\nask_"
    "header\030\002 \001(\0132\031.common.common_ask_header\""
    ">\n\027configuration_amend_ans\022#\n\006result\030\001 \001"
    "(\0132\023.common.result_info", 1703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IOMS_main_frame.proto", &protobuf_RegisterTypes);
  credit_request_monitor_ask::default_instance_ = new credit_request_monitor_ask();
  credit_request_monitor::default_instance_ = new credit_request_monitor();
  credit_request_monitor_ans::default_instance_ = new credit_request_monitor_ans();
  credit_response_monitor_ask::default_instance_ = new credit_response_monitor_ask();
  credit_response_monitor::default_instance_ = new credit_response_monitor();
  credit_response_monitor_ans::default_instance_ = new credit_response_monitor_ans();
  fraud_request_monitor_ask::default_instance_ = new fraud_request_monitor_ask();
  fraud_request_monitor::default_instance_ = new fraud_request_monitor();
  fraud_request_monitor_ans::default_instance_ = new fraud_request_monitor_ans();
  fraud_response_monitor_ask::default_instance_ = new fraud_response_monitor_ask();
  fraud_response_monitor::default_instance_ = new fraud_response_monitor();
  fraud_response_monitor_ans::default_instance_ = new fraud_response_monitor_ans();
  configuration_amend_ask::default_instance_ = new configuration_amend_ask();
  configuration_amend_ans::default_instance_ = new configuration_amend_ans();
  credit_request_monitor_ask::default_instance_->InitAsDefaultInstance();
  credit_request_monitor::default_instance_->InitAsDefaultInstance();
  credit_request_monitor_ans::default_instance_->InitAsDefaultInstance();
  credit_response_monitor_ask::default_instance_->InitAsDefaultInstance();
  credit_response_monitor::default_instance_->InitAsDefaultInstance();
  credit_response_monitor_ans::default_instance_->InitAsDefaultInstance();
  fraud_request_monitor_ask::default_instance_->InitAsDefaultInstance();
  fraud_request_monitor::default_instance_->InitAsDefaultInstance();
  fraud_request_monitor_ans::default_instance_->InitAsDefaultInstance();
  fraud_response_monitor_ask::default_instance_->InitAsDefaultInstance();
  fraud_response_monitor::default_instance_->InitAsDefaultInstance();
  fraud_response_monitor_ans::default_instance_->InitAsDefaultInstance();
  configuration_amend_ask::default_instance_->InitAsDefaultInstance();
  configuration_amend_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IOMS_5fmain_5fframe_2eproto {
  StaticDescriptorInitializer_IOMS_5fmain_5fframe_2eproto() {
    protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  }
} static_descriptor_initializer_IOMS_5fmain_5fframe_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int credit_request_monitor_ask::kHandleTypeFieldNumber;
const int credit_request_monitor_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

credit_request_monitor_ask::credit_request_monitor_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.credit_request_monitor_ask)
}

void credit_request_monitor_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

credit_request_monitor_ask::credit_request_monitor_ask(const credit_request_monitor_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.credit_request_monitor_ask)
}

void credit_request_monitor_ask::SharedCtor() {
  _cached_size_ = 0;
  handle_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_request_monitor_ask::~credit_request_monitor_ask() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.credit_request_monitor_ask)
  SharedDtor();
}

void credit_request_monitor_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void credit_request_monitor_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_request_monitor_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_request_monitor_ask_descriptor_;
}

const credit_request_monitor_ask& credit_request_monitor_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_request_monitor_ask* credit_request_monitor_ask::default_instance_ = NULL;

credit_request_monitor_ask* credit_request_monitor_ask::New() const {
  return new credit_request_monitor_ask;
}

void credit_request_monitor_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    handle_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_request_monitor_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.credit_request_monitor_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.credit_request_monitor_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.credit_request_monitor_ask)
  return false;
#undef DO_
}

void credit_request_monitor_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.credit_request_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle_type(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.credit_request_monitor_ask)
}

::google::protobuf::uint8* credit_request_monitor_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.credit_request_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle_type(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.credit_request_monitor_ask)
  return target;
}

int credit_request_monitor_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle_type = 1;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_request_monitor_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_request_monitor_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_request_monitor_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_request_monitor_ask::MergeFrom(const credit_request_monitor_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_request_monitor_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_request_monitor_ask::CopyFrom(const credit_request_monitor_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_request_monitor_ask::IsInitialized() const {

  return true;
}

void credit_request_monitor_ask::Swap(credit_request_monitor_ask* other) {
  if (other != this) {
    std::swap(handle_type_, other->handle_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_request_monitor_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_request_monitor_ask_descriptor_;
  metadata.reflection = credit_request_monitor_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_request_monitor::kIdFieldNumber;
const int credit_request_monitor::kUpdateTimeFieldNumber;
const int credit_request_monitor::kHandleTypeFieldNumber;
const int credit_request_monitor::kJsonFieldNumber;
#endif  // !_MSC_VER

credit_request_monitor::credit_request_monitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.credit_request_monitor)
}

void credit_request_monitor::InitAsDefaultInstance() {
}

credit_request_monitor::credit_request_monitor(const credit_request_monitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.credit_request_monitor)
}

void credit_request_monitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_type_ = 0;
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_request_monitor::~credit_request_monitor() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.credit_request_monitor)
  SharedDtor();
}

void credit_request_monitor::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (this != default_instance_) {
  }
}

void credit_request_monitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_request_monitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_request_monitor_descriptor_;
}

const credit_request_monitor& credit_request_monitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_request_monitor* credit_request_monitor::default_instance_ = NULL;

credit_request_monitor* credit_request_monitor::New() const {
  return new credit_request_monitor;
}

void credit_request_monitor::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
    handle_type_ = 0;
    if (has_json()) {
      if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_request_monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.credit_request_monitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 2;
      case 2: {
        if (tag == 18) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_type;
        break;
      }

      // optional int32 handle_type = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_json;
        break;
      }

      // optional bytes json = 4;
      case 4: {
        if (tag == 34) {
         parse_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.credit_request_monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.credit_request_monitor)
  return false;
#undef DO_
}

void credit_request_monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.credit_request_monitor)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->update_time(), output);
  }

  // optional int32 handle_type = 3;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->handle_type(), output);
  }

  // optional bytes json = 4;
  if (has_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->json(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.credit_request_monitor)
}

::google::protobuf::uint8* credit_request_monitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.credit_request_monitor)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes update_time = 2;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->update_time(), target);
  }

  // optional int32 handle_type = 3;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->handle_type(), target);
  }

  // optional bytes json = 4;
  if (has_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->json(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.credit_request_monitor)
  return target;
}

int credit_request_monitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

    // optional int32 handle_type = 3;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

    // optional bytes json = 4;
    if (has_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_request_monitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_request_monitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_request_monitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_request_monitor::MergeFrom(const credit_request_monitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
    if (from.has_json()) {
      set_json(from.json());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_request_monitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_request_monitor::CopyFrom(const credit_request_monitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_request_monitor::IsInitialized() const {

  return true;
}

void credit_request_monitor::Swap(credit_request_monitor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(update_time_, other->update_time_);
    std::swap(handle_type_, other->handle_type_);
    std::swap(json_, other->json_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_request_monitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_request_monitor_descriptor_;
  metadata.reflection = credit_request_monitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_request_monitor_ans::kCreditReqMonitorListFieldNumber;
const int credit_request_monitor_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

credit_request_monitor_ans::credit_request_monitor_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.credit_request_monitor_ans)
}

void credit_request_monitor_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

credit_request_monitor_ans::credit_request_monitor_ans(const credit_request_monitor_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.credit_request_monitor_ans)
}

void credit_request_monitor_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_request_monitor_ans::~credit_request_monitor_ans() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.credit_request_monitor_ans)
  SharedDtor();
}

void credit_request_monitor_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void credit_request_monitor_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_request_monitor_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_request_monitor_ans_descriptor_;
}

const credit_request_monitor_ans& credit_request_monitor_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_request_monitor_ans* credit_request_monitor_ans::default_instance_ = NULL;

credit_request_monitor_ans* credit_request_monitor_ans::New() const {
  return new credit_request_monitor_ans;
}

void credit_request_monitor_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  credit_req_monitor_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_request_monitor_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.credit_request_monitor_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IOMS_main_frame.credit_request_monitor credit_req_monitor_list = 1;
      case 1: {
        if (tag == 10) {
         parse_credit_req_monitor_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_credit_req_monitor_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_credit_req_monitor_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.credit_request_monitor_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.credit_request_monitor_ans)
  return false;
#undef DO_
}

void credit_request_monitor_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.credit_request_monitor_ans)
  // repeated .IOMS_main_frame.credit_request_monitor credit_req_monitor_list = 1;
  for (int i = 0; i < this->credit_req_monitor_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->credit_req_monitor_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.credit_request_monitor_ans)
}

::google::protobuf::uint8* credit_request_monitor_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.credit_request_monitor_ans)
  // repeated .IOMS_main_frame.credit_request_monitor credit_req_monitor_list = 1;
  for (int i = 0; i < this->credit_req_monitor_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->credit_req_monitor_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.credit_request_monitor_ans)
  return target;
}

int credit_request_monitor_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .IOMS_main_frame.credit_request_monitor credit_req_monitor_list = 1;
  total_size += 1 * this->credit_req_monitor_list_size();
  for (int i = 0; i < this->credit_req_monitor_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->credit_req_monitor_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_request_monitor_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_request_monitor_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_request_monitor_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_request_monitor_ans::MergeFrom(const credit_request_monitor_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  credit_req_monitor_list_.MergeFrom(from.credit_req_monitor_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_request_monitor_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_request_monitor_ans::CopyFrom(const credit_request_monitor_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_request_monitor_ans::IsInitialized() const {

  return true;
}

void credit_request_monitor_ans::Swap(credit_request_monitor_ans* other) {
  if (other != this) {
    credit_req_monitor_list_.Swap(&other->credit_req_monitor_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_request_monitor_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_request_monitor_ans_descriptor_;
  metadata.reflection = credit_request_monitor_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_response_monitor_ask::kHandleTypeFieldNumber;
const int credit_response_monitor_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

credit_response_monitor_ask::credit_response_monitor_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.credit_response_monitor_ask)
}

void credit_response_monitor_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

credit_response_monitor_ask::credit_response_monitor_ask(const credit_response_monitor_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.credit_response_monitor_ask)
}

void credit_response_monitor_ask::SharedCtor() {
  _cached_size_ = 0;
  handle_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_response_monitor_ask::~credit_response_monitor_ask() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.credit_response_monitor_ask)
  SharedDtor();
}

void credit_response_monitor_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void credit_response_monitor_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_response_monitor_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_response_monitor_ask_descriptor_;
}

const credit_response_monitor_ask& credit_response_monitor_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_response_monitor_ask* credit_response_monitor_ask::default_instance_ = NULL;

credit_response_monitor_ask* credit_response_monitor_ask::New() const {
  return new credit_response_monitor_ask;
}

void credit_response_monitor_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    handle_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_response_monitor_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.credit_response_monitor_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.credit_response_monitor_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.credit_response_monitor_ask)
  return false;
#undef DO_
}

void credit_response_monitor_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.credit_response_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle_type(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.credit_response_monitor_ask)
}

::google::protobuf::uint8* credit_response_monitor_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.credit_response_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle_type(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.credit_response_monitor_ask)
  return target;
}

int credit_response_monitor_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle_type = 1;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_response_monitor_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_response_monitor_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_response_monitor_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_response_monitor_ask::MergeFrom(const credit_response_monitor_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_response_monitor_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_response_monitor_ask::CopyFrom(const credit_response_monitor_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_response_monitor_ask::IsInitialized() const {

  return true;
}

void credit_response_monitor_ask::Swap(credit_response_monitor_ask* other) {
  if (other != this) {
    std::swap(handle_type_, other->handle_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_response_monitor_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_response_monitor_ask_descriptor_;
  metadata.reflection = credit_response_monitor_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_response_monitor::kIdFieldNumber;
const int credit_response_monitor::kInsetTimeFieldNumber;
const int credit_response_monitor::kJsonFieldNumber;
#endif  // !_MSC_VER

credit_response_monitor::credit_response_monitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.credit_response_monitor)
}

void credit_response_monitor::InitAsDefaultInstance() {
}

credit_response_monitor::credit_response_monitor(const credit_response_monitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.credit_response_monitor)
}

void credit_response_monitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_response_monitor::~credit_response_monitor() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.credit_response_monitor)
  SharedDtor();
}

void credit_response_monitor::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inset_time_;
  }
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (this != default_instance_) {
  }
}

void credit_response_monitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_response_monitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_response_monitor_descriptor_;
}

const credit_response_monitor& credit_response_monitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_response_monitor* credit_response_monitor::default_instance_ = NULL;

credit_response_monitor* credit_response_monitor::New() const {
  return new credit_response_monitor;
}

void credit_response_monitor::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_inset_time()) {
      if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inset_time_->clear();
      }
    }
    if (has_json()) {
      if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_response_monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.credit_response_monitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inset_time;
        break;
      }

      // optional bytes inset_time = 2;
      case 2: {
        if (tag == 18) {
         parse_inset_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inset_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_json;
        break;
      }

      // optional bytes json = 3;
      case 3: {
        if (tag == 26) {
         parse_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.credit_response_monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.credit_response_monitor)
  return false;
#undef DO_
}

void credit_response_monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.credit_response_monitor)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes inset_time = 2;
  if (has_inset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->inset_time(), output);
  }

  // optional bytes json = 3;
  if (has_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->json(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.credit_response_monitor)
}

::google::protobuf::uint8* credit_response_monitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.credit_response_monitor)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes inset_time = 2;
  if (has_inset_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->inset_time(), target);
  }

  // optional bytes json = 3;
  if (has_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->json(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.credit_response_monitor)
  return target;
}

int credit_response_monitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes inset_time = 2;
    if (has_inset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inset_time());
    }

    // optional bytes json = 3;
    if (has_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_response_monitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_response_monitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_response_monitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_response_monitor::MergeFrom(const credit_response_monitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inset_time()) {
      set_inset_time(from.inset_time());
    }
    if (from.has_json()) {
      set_json(from.json());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_response_monitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_response_monitor::CopyFrom(const credit_response_monitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_response_monitor::IsInitialized() const {

  return true;
}

void credit_response_monitor::Swap(credit_response_monitor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inset_time_, other->inset_time_);
    std::swap(json_, other->json_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_response_monitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_response_monitor_descriptor_;
  metadata.reflection = credit_response_monitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_response_monitor_ans::kCreditRspMonitorListFieldNumber;
const int credit_response_monitor_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

credit_response_monitor_ans::credit_response_monitor_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.credit_response_monitor_ans)
}

void credit_response_monitor_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

credit_response_monitor_ans::credit_response_monitor_ans(const credit_response_monitor_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.credit_response_monitor_ans)
}

void credit_response_monitor_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_response_monitor_ans::~credit_response_monitor_ans() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.credit_response_monitor_ans)
  SharedDtor();
}

void credit_response_monitor_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void credit_response_monitor_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_response_monitor_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_response_monitor_ans_descriptor_;
}

const credit_response_monitor_ans& credit_response_monitor_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_response_monitor_ans* credit_response_monitor_ans::default_instance_ = NULL;

credit_response_monitor_ans* credit_response_monitor_ans::New() const {
  return new credit_response_monitor_ans;
}

void credit_response_monitor_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  credit_rsp_monitor_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_response_monitor_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.credit_response_monitor_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IOMS_main_frame.credit_response_monitor credit_rsp_monitor_list = 1;
      case 1: {
        if (tag == 10) {
         parse_credit_rsp_monitor_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_credit_rsp_monitor_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_credit_rsp_monitor_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.credit_response_monitor_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.credit_response_monitor_ans)
  return false;
#undef DO_
}

void credit_response_monitor_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.credit_response_monitor_ans)
  // repeated .IOMS_main_frame.credit_response_monitor credit_rsp_monitor_list = 1;
  for (int i = 0; i < this->credit_rsp_monitor_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->credit_rsp_monitor_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.credit_response_monitor_ans)
}

::google::protobuf::uint8* credit_response_monitor_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.credit_response_monitor_ans)
  // repeated .IOMS_main_frame.credit_response_monitor credit_rsp_monitor_list = 1;
  for (int i = 0; i < this->credit_rsp_monitor_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->credit_rsp_monitor_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.credit_response_monitor_ans)
  return target;
}

int credit_response_monitor_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .IOMS_main_frame.credit_response_monitor credit_rsp_monitor_list = 1;
  total_size += 1 * this->credit_rsp_monitor_list_size();
  for (int i = 0; i < this->credit_rsp_monitor_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->credit_rsp_monitor_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_response_monitor_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_response_monitor_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_response_monitor_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_response_monitor_ans::MergeFrom(const credit_response_monitor_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  credit_rsp_monitor_list_.MergeFrom(from.credit_rsp_monitor_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_response_monitor_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_response_monitor_ans::CopyFrom(const credit_response_monitor_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_response_monitor_ans::IsInitialized() const {

  return true;
}

void credit_response_monitor_ans::Swap(credit_response_monitor_ans* other) {
  if (other != this) {
    credit_rsp_monitor_list_.Swap(&other->credit_rsp_monitor_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_response_monitor_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_response_monitor_ans_descriptor_;
  metadata.reflection = credit_response_monitor_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fraud_request_monitor_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

fraud_request_monitor_ask::fraud_request_monitor_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.fraud_request_monitor_ask)
}

void fraud_request_monitor_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

fraud_request_monitor_ask::fraud_request_monitor_ask(const fraud_request_monitor_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.fraud_request_monitor_ask)
}

void fraud_request_monitor_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fraud_request_monitor_ask::~fraud_request_monitor_ask() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.fraud_request_monitor_ask)
  SharedDtor();
}

void fraud_request_monitor_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void fraud_request_monitor_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fraud_request_monitor_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fraud_request_monitor_ask_descriptor_;
}

const fraud_request_monitor_ask& fraud_request_monitor_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fraud_request_monitor_ask* fraud_request_monitor_ask::default_instance_ = NULL;

fraud_request_monitor_ask* fraud_request_monitor_ask::New() const {
  return new fraud_request_monitor_ask;
}

void fraud_request_monitor_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fraud_request_monitor_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.fraud_request_monitor_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.fraud_request_monitor_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.fraud_request_monitor_ask)
  return false;
#undef DO_
}

void fraud_request_monitor_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.fraud_request_monitor_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.fraud_request_monitor_ask)
}

::google::protobuf::uint8* fraud_request_monitor_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.fraud_request_monitor_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.fraud_request_monitor_ask)
  return target;
}

int fraud_request_monitor_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fraud_request_monitor_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fraud_request_monitor_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fraud_request_monitor_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fraud_request_monitor_ask::MergeFrom(const fraud_request_monitor_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fraud_request_monitor_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fraud_request_monitor_ask::CopyFrom(const fraud_request_monitor_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fraud_request_monitor_ask::IsInitialized() const {

  return true;
}

void fraud_request_monitor_ask::Swap(fraud_request_monitor_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fraud_request_monitor_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fraud_request_monitor_ask_descriptor_;
  metadata.reflection = fraud_request_monitor_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fraud_request_monitor::kUniqueidFieldNumber;
const int fraud_request_monitor::kRequestJsonFieldNumber;
const int fraud_request_monitor::kModelTypeFieldNumber;
const int fraud_request_monitor::kInsetTimeFieldNumber;
const int fraud_request_monitor::kStatusFieldNumber;
#endif  // !_MSC_VER

fraud_request_monitor::fraud_request_monitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.fraud_request_monitor)
}

void fraud_request_monitor::InitAsDefaultInstance() {
}

fraud_request_monitor::fraud_request_monitor(const fraud_request_monitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.fraud_request_monitor)
}

void fraud_request_monitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uniqueid_ = 0;
  request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_type_ = 0;
  inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fraud_request_monitor::~fraud_request_monitor() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.fraud_request_monitor)
  SharedDtor();
}

void fraud_request_monitor::SharedDtor() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inset_time_;
  }
  if (this != default_instance_) {
  }
}

void fraud_request_monitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fraud_request_monitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fraud_request_monitor_descriptor_;
}

const fraud_request_monitor& fraud_request_monitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fraud_request_monitor* fraud_request_monitor::default_instance_ = NULL;

fraud_request_monitor* fraud_request_monitor::New() const {
  return new fraud_request_monitor;
}

void fraud_request_monitor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<fraud_request_monitor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uniqueid_, model_type_);
    if (has_request_json()) {
      if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_json_->clear();
      }
    }
    if (has_inset_time()) {
      if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inset_time_->clear();
      }
    }
    status_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fraud_request_monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.fraud_request_monitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uniqueid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_json;
        break;
      }

      // optional bytes request_json = 2;
      case 2: {
        if (tag == 18) {
         parse_request_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_model_type;
        break;
      }

      // optional int32 model_type = 3;
      case 3: {
        if (tag == 24) {
         parse_model_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_type_)));
          set_has_model_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_inset_time;
        break;
      }

      // optional bytes inset_time = 4;
      case 4: {
        if (tag == 34) {
         parse_inset_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inset_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.fraud_request_monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.fraud_request_monitor)
  return false;
#undef DO_
}

void fraud_request_monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.fraud_request_monitor)
  // optional int32 uniqueid = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniqueid(), output);
  }

  // optional bytes request_json = 2;
  if (has_request_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request_json(), output);
  }

  // optional int32 model_type = 3;
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_type(), output);
  }

  // optional bytes inset_time = 4;
  if (has_inset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->inset_time(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.fraud_request_monitor)
}

::google::protobuf::uint8* fraud_request_monitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.fraud_request_monitor)
  // optional int32 uniqueid = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uniqueid(), target);
  }

  // optional bytes request_json = 2;
  if (has_request_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request_json(), target);
  }

  // optional int32 model_type = 3;
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_type(), target);
  }

  // optional bytes inset_time = 4;
  if (has_inset_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->inset_time(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.fraud_request_monitor)
  return target;
}

int fraud_request_monitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uniqueid = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

    // optional bytes request_json = 2;
    if (has_request_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_json());
    }

    // optional int32 model_type = 3;
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_type());
    }

    // optional bytes inset_time = 4;
    if (has_inset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inset_time());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fraud_request_monitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fraud_request_monitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fraud_request_monitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fraud_request_monitor::MergeFrom(const fraud_request_monitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_request_json()) {
      set_request_json(from.request_json());
    }
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_inset_time()) {
      set_inset_time(from.inset_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fraud_request_monitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fraud_request_monitor::CopyFrom(const fraud_request_monitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fraud_request_monitor::IsInitialized() const {

  return true;
}

void fraud_request_monitor::Swap(fraud_request_monitor* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(request_json_, other->request_json_);
    std::swap(model_type_, other->model_type_);
    std::swap(inset_time_, other->inset_time_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fraud_request_monitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fraud_request_monitor_descriptor_;
  metadata.reflection = fraud_request_monitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fraud_request_monitor_ans::kFraudReqMonitorListFieldNumber;
const int fraud_request_monitor_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

fraud_request_monitor_ans::fraud_request_monitor_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.fraud_request_monitor_ans)
}

void fraud_request_monitor_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

fraud_request_monitor_ans::fraud_request_monitor_ans(const fraud_request_monitor_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.fraud_request_monitor_ans)
}

void fraud_request_monitor_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fraud_request_monitor_ans::~fraud_request_monitor_ans() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.fraud_request_monitor_ans)
  SharedDtor();
}

void fraud_request_monitor_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void fraud_request_monitor_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fraud_request_monitor_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fraud_request_monitor_ans_descriptor_;
}

const fraud_request_monitor_ans& fraud_request_monitor_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fraud_request_monitor_ans* fraud_request_monitor_ans::default_instance_ = NULL;

fraud_request_monitor_ans* fraud_request_monitor_ans::New() const {
  return new fraud_request_monitor_ans;
}

void fraud_request_monitor_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  fraud_req_monitor_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fraud_request_monitor_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.fraud_request_monitor_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IOMS_main_frame.fraud_request_monitor fraud_req_monitor_list = 1;
      case 1: {
        if (tag == 10) {
         parse_fraud_req_monitor_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fraud_req_monitor_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fraud_req_monitor_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.fraud_request_monitor_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.fraud_request_monitor_ans)
  return false;
#undef DO_
}

void fraud_request_monitor_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.fraud_request_monitor_ans)
  // repeated .IOMS_main_frame.fraud_request_monitor fraud_req_monitor_list = 1;
  for (int i = 0; i < this->fraud_req_monitor_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fraud_req_monitor_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.fraud_request_monitor_ans)
}

::google::protobuf::uint8* fraud_request_monitor_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.fraud_request_monitor_ans)
  // repeated .IOMS_main_frame.fraud_request_monitor fraud_req_monitor_list = 1;
  for (int i = 0; i < this->fraud_req_monitor_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fraud_req_monitor_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.fraud_request_monitor_ans)
  return target;
}

int fraud_request_monitor_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .IOMS_main_frame.fraud_request_monitor fraud_req_monitor_list = 1;
  total_size += 1 * this->fraud_req_monitor_list_size();
  for (int i = 0; i < this->fraud_req_monitor_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fraud_req_monitor_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fraud_request_monitor_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fraud_request_monitor_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fraud_request_monitor_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fraud_request_monitor_ans::MergeFrom(const fraud_request_monitor_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  fraud_req_monitor_list_.MergeFrom(from.fraud_req_monitor_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fraud_request_monitor_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fraud_request_monitor_ans::CopyFrom(const fraud_request_monitor_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fraud_request_monitor_ans::IsInitialized() const {

  return true;
}

void fraud_request_monitor_ans::Swap(fraud_request_monitor_ans* other) {
  if (other != this) {
    fraud_req_monitor_list_.Swap(&other->fraud_req_monitor_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fraud_request_monitor_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fraud_request_monitor_ans_descriptor_;
  metadata.reflection = fraud_request_monitor_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fraud_response_monitor_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

fraud_response_monitor_ask::fraud_response_monitor_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.fraud_response_monitor_ask)
}

void fraud_response_monitor_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

fraud_response_monitor_ask::fraud_response_monitor_ask(const fraud_response_monitor_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.fraud_response_monitor_ask)
}

void fraud_response_monitor_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fraud_response_monitor_ask::~fraud_response_monitor_ask() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.fraud_response_monitor_ask)
  SharedDtor();
}

void fraud_response_monitor_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void fraud_response_monitor_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fraud_response_monitor_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fraud_response_monitor_ask_descriptor_;
}

const fraud_response_monitor_ask& fraud_response_monitor_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fraud_response_monitor_ask* fraud_response_monitor_ask::default_instance_ = NULL;

fraud_response_monitor_ask* fraud_response_monitor_ask::New() const {
  return new fraud_response_monitor_ask;
}

void fraud_response_monitor_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fraud_response_monitor_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.fraud_response_monitor_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.fraud_response_monitor_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.fraud_response_monitor_ask)
  return false;
#undef DO_
}

void fraud_response_monitor_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.fraud_response_monitor_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.fraud_response_monitor_ask)
}

::google::protobuf::uint8* fraud_response_monitor_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.fraud_response_monitor_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.fraud_response_monitor_ask)
  return target;
}

int fraud_response_monitor_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fraud_response_monitor_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fraud_response_monitor_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fraud_response_monitor_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fraud_response_monitor_ask::MergeFrom(const fraud_response_monitor_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fraud_response_monitor_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fraud_response_monitor_ask::CopyFrom(const fraud_response_monitor_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fraud_response_monitor_ask::IsInitialized() const {

  return true;
}

void fraud_response_monitor_ask::Swap(fraud_response_monitor_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fraud_response_monitor_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fraud_response_monitor_ask_descriptor_;
  metadata.reflection = fraud_response_monitor_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fraud_response_monitor::kUniqueidFieldNumber;
const int fraud_response_monitor::kRequestJsonFieldNumber;
const int fraud_response_monitor::kModelNameFieldNumber;
const int fraud_response_monitor::kModelResultFieldNumber;
const int fraud_response_monitor::kResultJsonFieldNumber;
const int fraud_response_monitor::kRealNameFieldNumber;
const int fraud_response_monitor::kMobilePhoneFieldNumber;
const int fraud_response_monitor::kIdCardFieldNumber;
const int fraud_response_monitor::kModelTypeFieldNumber;
const int fraud_response_monitor::kErrorInfoFieldNumber;
const int fraud_response_monitor::kResultTimeFieldNumber;
const int fraud_response_monitor::kStatusFieldNumber;
const int fraud_response_monitor::kAppidFieldNumber;
const int fraud_response_monitor::kVersionFieldNumber;
#endif  // !_MSC_VER

fraud_response_monitor::fraud_response_monitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.fraud_response_monitor)
}

void fraud_response_monitor::InitAsDefaultInstance() {
}

fraud_response_monitor::fraud_response_monitor(const fraud_response_monitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.fraud_response_monitor)
}

void fraud_response_monitor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uniqueid_ = 0;
  request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_type_ = 0;
  error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fraud_response_monitor::~fraud_response_monitor() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.fraud_response_monitor)
  SharedDtor();
}

void fraud_response_monitor::SharedDtor() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (model_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_result_;
  }
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_info_;
  }
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void fraud_response_monitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fraud_response_monitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fraud_response_monitor_descriptor_;
}

const fraud_response_monitor& fraud_response_monitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fraud_response_monitor* fraud_response_monitor::default_instance_ = NULL;

fraud_response_monitor* fraud_response_monitor::New() const {
  return new fraud_response_monitor;
}

void fraud_response_monitor::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    uniqueid_ = 0;
    if (has_request_json()) {
      if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_json_->clear();
      }
    }
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_name_->clear();
      }
    }
    if (has_model_result()) {
      if (model_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_result_->clear();
      }
    }
    if (has_result_json()) {
      if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_json_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    model_type_ = 0;
    if (has_error_info()) {
      if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_info_->clear();
      }
    }
    if (has_result_time()) {
      if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_time_->clear();
      }
    }
    status_ = 0;
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appid_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fraud_response_monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.fraud_response_monitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uniqueid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_json;
        break;
      }

      // optional bytes request_json = 2;
      case 2: {
        if (tag == 18) {
         parse_request_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model_name;
        break;
      }

      // optional bytes model_name = 3;
      case 3: {
        if (tag == 26) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model_result;
        break;
      }

      // optional bytes model_result = 4;
      case 4: {
        if (tag == 34) {
         parse_model_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_result_json;
        break;
      }

      // optional bytes result_json = 5;
      case 5: {
        if (tag == 42) {
         parse_result_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 6;
      case 6: {
        if (tag == 50) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 7;
      case 7: {
        if (tag == 58) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 8;
      case 8: {
        if (tag == 66) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_model_type;
        break;
      }

      // optional int32 model_type = 9;
      case 9: {
        if (tag == 72) {
         parse_model_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_type_)));
          set_has_model_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_error_info;
        break;
      }

      // optional bytes error_info = 10;
      case 10: {
        if (tag == 82) {
         parse_error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_result_time;
        break;
      }

      // optional bytes result_time = 11;
      case 11: {
        if (tag == 90) {
         parse_result_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }

      // optional int32 status = 12;
      case 12: {
        if (tag == 96) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_appid;
        break;
      }

      // optional bytes appid = 13;
      case 13: {
        if (tag == 106) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_version;
        break;
      }

      // optional bytes version = 14;
      case 14: {
        if (tag == 114) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.fraud_response_monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.fraud_response_monitor)
  return false;
#undef DO_
}

void fraud_response_monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.fraud_response_monitor)
  // optional int32 uniqueid = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniqueid(), output);
  }

  // optional bytes request_json = 2;
  if (has_request_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request_json(), output);
  }

  // optional bytes model_name = 3;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->model_name(), output);
  }

  // optional bytes model_result = 4;
  if (has_model_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->model_result(), output);
  }

  // optional bytes result_json = 5;
  if (has_result_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->result_json(), output);
  }

  // optional bytes real_name = 6;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->real_name(), output);
  }

  // optional bytes mobilePhone = 7;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->mobilephone(), output);
  }

  // optional bytes id_card = 8;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->id_card(), output);
  }

  // optional int32 model_type = 9;
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->model_type(), output);
  }

  // optional bytes error_info = 10;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->error_info(), output);
  }

  // optional bytes result_time = 11;
  if (has_result_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->result_time(), output);
  }

  // optional int32 status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->status(), output);
  }

  // optional bytes appid = 13;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->appid(), output);
  }

  // optional bytes version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.fraud_response_monitor)
}

::google::protobuf::uint8* fraud_response_monitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.fraud_response_monitor)
  // optional int32 uniqueid = 1;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uniqueid(), target);
  }

  // optional bytes request_json = 2;
  if (has_request_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request_json(), target);
  }

  // optional bytes model_name = 3;
  if (has_model_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->model_name(), target);
  }

  // optional bytes model_result = 4;
  if (has_model_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->model_result(), target);
  }

  // optional bytes result_json = 5;
  if (has_result_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->result_json(), target);
  }

  // optional bytes real_name = 6;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->real_name(), target);
  }

  // optional bytes mobilePhone = 7;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->mobilephone(), target);
  }

  // optional bytes id_card = 8;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->id_card(), target);
  }

  // optional int32 model_type = 9;
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->model_type(), target);
  }

  // optional bytes error_info = 10;
  if (has_error_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->error_info(), target);
  }

  // optional bytes result_time = 11;
  if (has_result_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->result_time(), target);
  }

  // optional int32 status = 12;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->status(), target);
  }

  // optional bytes appid = 13;
  if (has_appid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->appid(), target);
  }

  // optional bytes version = 14;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.fraud_response_monitor)
  return target;
}

int fraud_response_monitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uniqueid = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

    // optional bytes request_json = 2;
    if (has_request_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_json());
    }

    // optional bytes model_name = 3;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_name());
    }

    // optional bytes model_result = 4;
    if (has_model_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_result());
    }

    // optional bytes result_json = 5;
    if (has_result_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_json());
    }

    // optional bytes real_name = 6;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobilePhone = 7;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 8;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 model_type = 9;
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_type());
    }

    // optional bytes error_info = 10;
    if (has_error_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_info());
    }

    // optional bytes result_time = 11;
    if (has_result_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_time());
    }

    // optional int32 status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional bytes appid = 13;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appid());
    }

    // optional bytes version = 14;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fraud_response_monitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fraud_response_monitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fraud_response_monitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fraud_response_monitor::MergeFrom(const fraud_response_monitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_request_json()) {
      set_request_json(from.request_json());
    }
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_model_result()) {
      set_model_result(from.model_result());
    }
    if (from.has_result_json()) {
      set_result_json(from.result_json());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_error_info()) {
      set_error_info(from.error_info());
    }
    if (from.has_result_time()) {
      set_result_time(from.result_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fraud_response_monitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fraud_response_monitor::CopyFrom(const fraud_response_monitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fraud_response_monitor::IsInitialized() const {

  return true;
}

void fraud_response_monitor::Swap(fraud_response_monitor* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(request_json_, other->request_json_);
    std::swap(model_name_, other->model_name_);
    std::swap(model_result_, other->model_result_);
    std::swap(result_json_, other->result_json_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(model_type_, other->model_type_);
    std::swap(error_info_, other->error_info_);
    std::swap(result_time_, other->result_time_);
    std::swap(status_, other->status_);
    std::swap(appid_, other->appid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fraud_response_monitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fraud_response_monitor_descriptor_;
  metadata.reflection = fraud_response_monitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fraud_response_monitor_ans::kFraudRspMonitorListFieldNumber;
const int fraud_response_monitor_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

fraud_response_monitor_ans::fraud_response_monitor_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.fraud_response_monitor_ans)
}

void fraud_response_monitor_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

fraud_response_monitor_ans::fraud_response_monitor_ans(const fraud_response_monitor_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.fraud_response_monitor_ans)
}

void fraud_response_monitor_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fraud_response_monitor_ans::~fraud_response_monitor_ans() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.fraud_response_monitor_ans)
  SharedDtor();
}

void fraud_response_monitor_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void fraud_response_monitor_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fraud_response_monitor_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fraud_response_monitor_ans_descriptor_;
}

const fraud_response_monitor_ans& fraud_response_monitor_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

fraud_response_monitor_ans* fraud_response_monitor_ans::default_instance_ = NULL;

fraud_response_monitor_ans* fraud_response_monitor_ans::New() const {
  return new fraud_response_monitor_ans;
}

void fraud_response_monitor_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  fraud_rsp_monitor_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fraud_response_monitor_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.fraud_response_monitor_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IOMS_main_frame.fraud_response_monitor fraud_rsp_monitor_list = 1;
      case 1: {
        if (tag == 10) {
         parse_fraud_rsp_monitor_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fraud_rsp_monitor_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fraud_rsp_monitor_list;
        if (input->ExpectTag(114)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 14;
      case 14: {
        if (tag == 114) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.fraud_response_monitor_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.fraud_response_monitor_ans)
  return false;
#undef DO_
}

void fraud_response_monitor_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.fraud_response_monitor_ans)
  // repeated .IOMS_main_frame.fraud_response_monitor fraud_rsp_monitor_list = 1;
  for (int i = 0; i < this->fraud_rsp_monitor_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fraud_rsp_monitor_list(i), output);
  }

  // optional .common.errorinfo error = 14;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.fraud_response_monitor_ans)
}

::google::protobuf::uint8* fraud_response_monitor_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.fraud_response_monitor_ans)
  // repeated .IOMS_main_frame.fraud_response_monitor fraud_rsp_monitor_list = 1;
  for (int i = 0; i < this->fraud_rsp_monitor_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fraud_rsp_monitor_list(i), target);
  }

  // optional .common.errorinfo error = 14;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.fraud_response_monitor_ans)
  return target;
}

int fraud_response_monitor_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 14;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .IOMS_main_frame.fraud_response_monitor fraud_rsp_monitor_list = 1;
  total_size += 1 * this->fraud_rsp_monitor_list_size();
  for (int i = 0; i < this->fraud_rsp_monitor_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fraud_rsp_monitor_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fraud_response_monitor_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fraud_response_monitor_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fraud_response_monitor_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fraud_response_monitor_ans::MergeFrom(const fraud_response_monitor_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  fraud_rsp_monitor_list_.MergeFrom(from.fraud_rsp_monitor_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fraud_response_monitor_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fraud_response_monitor_ans::CopyFrom(const fraud_response_monitor_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fraud_response_monitor_ans::IsInitialized() const {

  return true;
}

void fraud_response_monitor_ans::Swap(fraud_response_monitor_ans* other) {
  if (other != this) {
    fraud_rsp_monitor_list_.Swap(&other->fraud_rsp_monitor_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fraud_response_monitor_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fraud_response_monitor_ans_descriptor_;
  metadata.reflection = fraud_response_monitor_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int configuration_amend_ask::kConfigurationFieldNumber;
const int configuration_amend_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

configuration_amend_ask::configuration_amend_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.configuration_amend_ask)
}

void configuration_amend_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

configuration_amend_ask::configuration_amend_ask(const configuration_amend_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.configuration_amend_ask)
}

void configuration_amend_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configuration_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

configuration_amend_ask::~configuration_amend_ask() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.configuration_amend_ask)
  SharedDtor();
}

void configuration_amend_ask::SharedDtor() {
  if (configuration_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configuration_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void configuration_amend_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* configuration_amend_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return configuration_amend_ask_descriptor_;
}

const configuration_amend_ask& configuration_amend_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

configuration_amend_ask* configuration_amend_ask::default_instance_ = NULL;

configuration_amend_ask* configuration_amend_ask::New() const {
  return new configuration_amend_ask;
}

void configuration_amend_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_configuration()) {
      if (configuration_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        configuration_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool configuration_amend_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.configuration_amend_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.configuration_amend_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.configuration_amend_ask)
  return false;
#undef DO_
}

void configuration_amend_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.configuration_amend_ask)
  // optional bytes configuration = 1;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->configuration(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.configuration_amend_ask)
}

::google::protobuf::uint8* configuration_amend_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.configuration_amend_ask)
  // optional bytes configuration = 1;
  if (has_configuration()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->configuration(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.configuration_amend_ask)
  return target;
}

int configuration_amend_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes configuration = 1;
    if (has_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->configuration());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void configuration_amend_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const configuration_amend_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const configuration_amend_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void configuration_amend_ask::MergeFrom(const configuration_amend_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configuration()) {
      set_configuration(from.configuration());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void configuration_amend_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration_amend_ask::CopyFrom(const configuration_amend_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration_amend_ask::IsInitialized() const {

  return true;
}

void configuration_amend_ask::Swap(configuration_amend_ask* other) {
  if (other != this) {
    std::swap(configuration_, other->configuration_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata configuration_amend_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = configuration_amend_ask_descriptor_;
  metadata.reflection = configuration_amend_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int configuration_amend_ans::kResultFieldNumber;
#endif  // !_MSC_VER

configuration_amend_ans::configuration_amend_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IOMS_main_frame.configuration_amend_ans)
}

void configuration_amend_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

configuration_amend_ans::configuration_amend_ans(const configuration_amend_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IOMS_main_frame.configuration_amend_ans)
}

void configuration_amend_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

configuration_amend_ans::~configuration_amend_ans() {
  // @@protoc_insertion_point(destructor:IOMS_main_frame.configuration_amend_ans)
  SharedDtor();
}

void configuration_amend_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void configuration_amend_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* configuration_amend_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return configuration_amend_ans_descriptor_;
}

const configuration_amend_ans& configuration_amend_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  return *default_instance_;
}

configuration_amend_ans* configuration_amend_ans::default_instance_ = NULL;

configuration_amend_ans* configuration_amend_ans::New() const {
  return new configuration_amend_ans;
}

void configuration_amend_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool configuration_amend_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IOMS_main_frame.configuration_amend_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IOMS_main_frame.configuration_amend_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IOMS_main_frame.configuration_amend_ans)
  return false;
#undef DO_
}

void configuration_amend_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IOMS_main_frame.configuration_amend_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IOMS_main_frame.configuration_amend_ans)
}

::google::protobuf::uint8* configuration_amend_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOMS_main_frame.configuration_amend_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOMS_main_frame.configuration_amend_ans)
  return target;
}

int configuration_amend_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void configuration_amend_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const configuration_amend_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const configuration_amend_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void configuration_amend_ans::MergeFrom(const configuration_amend_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void configuration_amend_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration_amend_ans::CopyFrom(const configuration_amend_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration_amend_ans::IsInitialized() const {

  return true;
}

void configuration_amend_ans::Swap(configuration_amend_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata configuration_amend_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = configuration_amend_ans_descriptor_;
  metadata.reflection = configuration_amend_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IOMS_main_frame

// @@protoc_insertion_point(global_scope)
