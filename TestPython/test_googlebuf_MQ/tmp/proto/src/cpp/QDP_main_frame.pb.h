// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QDP_main_frame.proto

#ifndef PROTOBUF_QDP_5fmain_5fframe_2eproto__INCLUDED
#define PROTOBUF_QDP_5fmain_5fframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "QDP_basic_info.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace QDP_main_frame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QDP_5fmain_5fframe_2eproto();
void protobuf_AssignDesc_QDP_5fmain_5fframe_2eproto();
void protobuf_ShutdownFile_QDP_5fmain_5fframe_2eproto();

class user_verification_ask;
class user_verification_ans;

enum other_platform {
  unknown_platform = 0,
  Credit_sesame = 1,
  fraud_metrix = 2,
  AnRong_Platform = 3
};
bool other_platform_IsValid(int value);
const other_platform other_platform_MIN = unknown_platform;
const other_platform other_platform_MAX = AnRong_Platform;
const int other_platform_ARRAYSIZE = other_platform_MAX + 1;

const ::google::protobuf::EnumDescriptor* other_platform_descriptor();
inline const ::std::string& other_platform_Name(other_platform value) {
  return ::google::protobuf::internal::NameOfEnum(
    other_platform_descriptor(), value);
}
inline bool other_platform_Parse(
    const ::std::string& name, other_platform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<other_platform>(
    other_platform_descriptor(), name, value);
}
// ===================================================================

class user_verification_ask : public ::google::protobuf::Message {
 public:
  user_verification_ask();
  virtual ~user_verification_ask();

  user_verification_ask(const user_verification_ask& from);

  inline user_verification_ask& operator=(const user_verification_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_verification_ask& default_instance();

  void Swap(user_verification_ask* other);

  // implements Message ----------------------------------------------

  user_verification_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_verification_ask& from);
  void MergeFrom(const user_verification_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QDP_basic_info.user_basic_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::QDP_basic_info::user_basic_info& info() const;
  inline ::QDP_basic_info::user_basic_info* mutable_info();
  inline ::QDP_basic_info::user_basic_info* release_info();
  inline void set_allocated_info(::QDP_basic_info::user_basic_info* info);

  // optional .QDP_main_frame.other_platform platform_type = 2;
  inline bool has_platform_type() const;
  inline void clear_platform_type();
  static const int kPlatformTypeFieldNumber = 2;
  inline ::QDP_main_frame::other_platform platform_type() const;
  inline void set_platform_type(::QDP_main_frame::other_platform value);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .QDP_basic_info.control_service service_manager = 4;
  inline bool has_service_manager() const;
  inline void clear_service_manager();
  static const int kServiceManagerFieldNumber = 4;
  inline const ::QDP_basic_info::control_service& service_manager() const;
  inline ::QDP_basic_info::control_service* mutable_service_manager();
  inline ::QDP_basic_info::control_service* release_service_manager();
  inline void set_allocated_service_manager(::QDP_basic_info::control_service* service_manager);

  // optional int32 query_type = 5 [default = 0];
  inline bool has_query_type() const;
  inline void clear_query_type();
  static const int kQueryTypeFieldNumber = 5;
  inline ::google::protobuf::int32 query_type() const;
  inline void set_query_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QDP_main_frame.user_verification_ask)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_platform_type();
  inline void clear_has_platform_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_service_manager();
  inline void clear_has_service_manager();
  inline void set_has_query_type();
  inline void clear_has_query_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QDP_basic_info::user_basic_info* info_;
  ::common::common_ask_header* ask_header_;
  int platform_type_;
  ::google::protobuf::int32 query_type_;
  ::QDP_basic_info::control_service* service_manager_;
  friend void  protobuf_AddDesc_QDP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_QDP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_verification_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_verification_ans : public ::google::protobuf::Message {
 public:
  user_verification_ans();
  virtual ~user_verification_ans();

  user_verification_ans(const user_verification_ans& from);

  inline user_verification_ans& operator=(const user_verification_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_verification_ans& default_instance();

  void Swap(user_verification_ans* other);

  // implements Message ----------------------------------------------

  user_verification_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_verification_ans& from);
  void MergeFrom(const user_verification_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QDP_main_frame.other_platform platform_type = 1;
  inline bool has_platform_type() const;
  inline void clear_platform_type();
  static const int kPlatformTypeFieldNumber = 1;
  inline ::QDP_main_frame::other_platform platform_type() const;
  inline void set_platform_type(::QDP_main_frame::other_platform value);

  // optional bytes json_ans = 2;
  inline bool has_json_ans() const;
  inline void clear_json_ans();
  static const int kJsonAnsFieldNumber = 2;
  inline const ::std::string& json_ans() const;
  inline void set_json_ans(const ::std::string& value);
  inline void set_json_ans(const char* value);
  inline void set_json_ans(const void* value, size_t size);
  inline ::std::string* mutable_json_ans();
  inline ::std::string* release_json_ans();
  inline void set_allocated_json_ans(::std::string* json_ans);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_main_frame.user_verification_ans)
 private:
  inline void set_has_platform_type();
  inline void clear_has_platform_type();
  inline void set_has_json_ans();
  inline void clear_has_json_ans();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_ans_;
  ::common::errorinfo* error_;
  int platform_type_;
  friend void  protobuf_AddDesc_QDP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_QDP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_verification_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// user_verification_ask

// optional .QDP_basic_info.user_basic_info info = 1;
inline bool user_verification_ask::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_verification_ask::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_verification_ask::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_verification_ask::clear_info() {
  if (info_ != NULL) info_->::QDP_basic_info::user_basic_info::Clear();
  clear_has_info();
}
inline const ::QDP_basic_info::user_basic_info& user_verification_ask::info() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ask.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::QDP_basic_info::user_basic_info* user_verification_ask::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::QDP_basic_info::user_basic_info;
  // @@protoc_insertion_point(field_mutable:QDP_main_frame.user_verification_ask.info)
  return info_;
}
inline ::QDP_basic_info::user_basic_info* user_verification_ask::release_info() {
  clear_has_info();
  ::QDP_basic_info::user_basic_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void user_verification_ask::set_allocated_info(::QDP_basic_info::user_basic_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_main_frame.user_verification_ask.info)
}

// optional .QDP_main_frame.other_platform platform_type = 2;
inline bool user_verification_ask::has_platform_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_verification_ask::set_has_platform_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_verification_ask::clear_has_platform_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_verification_ask::clear_platform_type() {
  platform_type_ = 0;
  clear_has_platform_type();
}
inline ::QDP_main_frame::other_platform user_verification_ask::platform_type() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ask.platform_type)
  return static_cast< ::QDP_main_frame::other_platform >(platform_type_);
}
inline void user_verification_ask::set_platform_type(::QDP_main_frame::other_platform value) {
  assert(::QDP_main_frame::other_platform_IsValid(value));
  set_has_platform_type();
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:QDP_main_frame.user_verification_ask.platform_type)
}

// optional .common.common_ask_header ask_header = 3;
inline bool user_verification_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_verification_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_verification_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_verification_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_verification_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_verification_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_main_frame.user_verification_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_verification_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_verification_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_main_frame.user_verification_ask.ask_header)
}

// optional .QDP_basic_info.control_service service_manager = 4;
inline bool user_verification_ask::has_service_manager() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_verification_ask::set_has_service_manager() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_verification_ask::clear_has_service_manager() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_verification_ask::clear_service_manager() {
  if (service_manager_ != NULL) service_manager_->::QDP_basic_info::control_service::Clear();
  clear_has_service_manager();
}
inline const ::QDP_basic_info::control_service& user_verification_ask::service_manager() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ask.service_manager)
  return service_manager_ != NULL ? *service_manager_ : *default_instance_->service_manager_;
}
inline ::QDP_basic_info::control_service* user_verification_ask::mutable_service_manager() {
  set_has_service_manager();
  if (service_manager_ == NULL) service_manager_ = new ::QDP_basic_info::control_service;
  // @@protoc_insertion_point(field_mutable:QDP_main_frame.user_verification_ask.service_manager)
  return service_manager_;
}
inline ::QDP_basic_info::control_service* user_verification_ask::release_service_manager() {
  clear_has_service_manager();
  ::QDP_basic_info::control_service* temp = service_manager_;
  service_manager_ = NULL;
  return temp;
}
inline void user_verification_ask::set_allocated_service_manager(::QDP_basic_info::control_service* service_manager) {
  delete service_manager_;
  service_manager_ = service_manager;
  if (service_manager) {
    set_has_service_manager();
  } else {
    clear_has_service_manager();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_main_frame.user_verification_ask.service_manager)
}

// optional int32 query_type = 5 [default = 0];
inline bool user_verification_ask::has_query_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_verification_ask::set_has_query_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_verification_ask::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_verification_ask::clear_query_type() {
  query_type_ = 0;
  clear_has_query_type();
}
inline ::google::protobuf::int32 user_verification_ask::query_type() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ask.query_type)
  return query_type_;
}
inline void user_verification_ask::set_query_type(::google::protobuf::int32 value) {
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:QDP_main_frame.user_verification_ask.query_type)
}

// -------------------------------------------------------------------

// user_verification_ans

// optional .QDP_main_frame.other_platform platform_type = 1;
inline bool user_verification_ans::has_platform_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_verification_ans::set_has_platform_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_verification_ans::clear_has_platform_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_verification_ans::clear_platform_type() {
  platform_type_ = 0;
  clear_has_platform_type();
}
inline ::QDP_main_frame::other_platform user_verification_ans::platform_type() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ans.platform_type)
  return static_cast< ::QDP_main_frame::other_platform >(platform_type_);
}
inline void user_verification_ans::set_platform_type(::QDP_main_frame::other_platform value) {
  assert(::QDP_main_frame::other_platform_IsValid(value));
  set_has_platform_type();
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:QDP_main_frame.user_verification_ans.platform_type)
}

// optional bytes json_ans = 2;
inline bool user_verification_ans::has_json_ans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_verification_ans::set_has_json_ans() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_verification_ans::clear_has_json_ans() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_verification_ans::clear_json_ans() {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_->clear();
  }
  clear_has_json_ans();
}
inline const ::std::string& user_verification_ans::json_ans() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ans.json_ans)
  return *json_ans_;
}
inline void user_verification_ans::set_json_ans(const ::std::string& value) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_main_frame.user_verification_ans.json_ans)
}
inline void user_verification_ans::set_json_ans(const char* value) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_main_frame.user_verification_ans.json_ans)
}
inline void user_verification_ans::set_json_ans(const void* value, size_t size) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_main_frame.user_verification_ans.json_ans)
}
inline ::std::string* user_verification_ans::mutable_json_ans() {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_main_frame.user_verification_ans.json_ans)
  return json_ans_;
}
inline ::std::string* user_verification_ans::release_json_ans() {
  clear_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_ans_;
    json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_verification_ans::set_allocated_json_ans(::std::string* json_ans) {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ans_;
  }
  if (json_ans) {
    set_has_json_ans();
    json_ans_ = json_ans;
  } else {
    clear_has_json_ans();
    json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_main_frame.user_verification_ans.json_ans)
}

// optional .common.errorinfo error = 3;
inline bool user_verification_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_verification_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_verification_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_verification_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_verification_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_main_frame.user_verification_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_verification_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_main_frame.user_verification_ans.error)
  return error_;
}
inline ::common::errorinfo* user_verification_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_verification_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_main_frame.user_verification_ans.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QDP_main_frame

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::QDP_main_frame::other_platform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QDP_main_frame::other_platform>() {
  return ::QDP_main_frame::other_platform_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QDP_5fmain_5fframe_2eproto__INCLUDED
