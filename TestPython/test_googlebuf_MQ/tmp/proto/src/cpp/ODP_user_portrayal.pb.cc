// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ODP_user_portrayal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ODP_user_portrayal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ODP_user_portrayal {

namespace {

const ::google::protobuf::Descriptor* location_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  location_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* version_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  version_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* device_login_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  device_login_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* device_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  device_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistics_common_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistics_common_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* danger_param_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  danger_param_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* danger_analysis_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  danger_analysis_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_action_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_action_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* location_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  location_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_version_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_version_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_analysis_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_analysis_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* business_predilection_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  business_predilection_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* auth_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auth_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* amount_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  amount_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* device_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  device_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_research_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_research_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_invest_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_invest_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_guarantee_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_guarantee_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_loan_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_loan_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* danger_analysis_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  danger_analysis_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_history_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_history_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* action_ask_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* danger_analysis_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ODP_5fuser_5fportrayal_2eproto() {
  protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ODP_user_portrayal.proto");
  GOOGLE_CHECK(file != NULL);
  location_info_descriptor_ = file->message_type(0);
  static const int location_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, location_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, iscommon_),
  };
  location_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      location_info_descriptor_,
      location_info::default_instance_,
      location_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(location_info));
  version_info_descriptor_ = file->message_type(1);
  static const int version_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, version_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, download_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, download_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, last_use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, last_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, last_version_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, isnow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, start_num_),
  };
  version_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      version_info_descriptor_,
      version_info::default_instance_,
      version_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(version_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(version_info));
  device_login_info_descriptor_ = file->message_type(2);
  static const int device_login_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_login_info, login_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_login_info, is_overdue_),
  };
  device_login_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      device_login_info_descriptor_,
      device_login_info::default_instance_,
      device_login_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_login_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_login_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(device_login_info));
  device_info_descriptor_ = file->message_type(3);
  static const int device_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, address_list_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, first_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, last_use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, black_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, last_use_localtion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, use_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, use_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, other_login_info_),
  };
  device_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      device_info_descriptor_,
      device_info::default_instance_,
      device_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(device_info));
  history_info_descriptor_ = file->message_type(4);
  static const int history_info_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, user_nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, bid_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, borrow_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, guarantee_rates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, lendrates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, borrowingmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, jd_nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, jd_head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, islocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, bstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, datetime_),
  };
  history_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_info_descriptor_,
      history_info::default_instance_,
      history_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_info));
  statistics_common_info_descriptor_ = file->message_type(5);
  static const int statistics_common_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_common_info, horizontal_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_common_info, vertical_coordinate_num_),
  };
  statistics_common_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistics_common_info_descriptor_,
      statistics_common_info::default_instance_,
      statistics_common_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_common_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_common_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistics_common_info));
  danger_param_info_descriptor_ = file->message_type(6);
  static const int danger_param_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_param_info, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_param_info, param2_),
  };
  danger_param_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      danger_param_info_descriptor_,
      danger_param_info::default_instance_,
      danger_param_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_param_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_param_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(danger_param_info));
  danger_analysis_info_descriptor_ = file->message_type(7);
  static const int danger_analysis_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, isexist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, paramlist1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, paramlist2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, paramlist3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, paramlist4_),
  };
  danger_analysis_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      danger_analysis_info_descriptor_,
      danger_analysis_info::default_instance_,
      danger_analysis_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(danger_analysis_info));
  user_action_ask_descriptor_ = file->message_type(8);
  static const int user_action_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, pagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, ask_header_),
  };
  user_action_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_action_ask_descriptor_,
      user_action_ask::default_instance_,
      user_action_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_action_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_action_ask));
  location_info_ans_descriptor_ = file->message_type(9);
  static const int location_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info_ans, location_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info_ans, result_),
  };
  location_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      location_info_ans_descriptor_,
      location_info_ans::default_instance_,
      location_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(location_info_ans));
  user_version_info_ans_descriptor_ = file->message_type(10);
  static const int user_version_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_version_info_ans, version_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_version_info_ans, result_),
  };
  user_version_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_version_info_ans_descriptor_,
      user_version_info_ans::default_instance_,
      user_version_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_version_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_version_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_version_info_ans));
  login_analysis_ans_descriptor_ = file->message_type(11);
  static const int login_analysis_ans_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, login_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, login_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, first_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, silent_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, week_most_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, day_most_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, week_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, day_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, result_),
  };
  login_analysis_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_analysis_ans_descriptor_,
      login_analysis_ans::default_instance_,
      login_analysis_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_analysis_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_analysis_ans));
  business_predilection_ans_descriptor_ = file->message_type(12);
  static const int business_predilection_ans_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, invest_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, invest_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, amount_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, garantee_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, garantee_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, garantee_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, garantee_amount_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, jd_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, jd_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, jd_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, jd_amount_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, loan_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, loan_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, loan_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, loan_amount_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, result_),
  };
  business_predilection_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      business_predilection_ans_descriptor_,
      business_predilection_ans::default_instance_,
      business_predilection_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_predilection_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(business_predilection_ans));
  auth_info_ans_descriptor_ = file->message_type(13);
  static const int auth_info_ans_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, phone_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, real_name_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, loan_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, garantee_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, big_garantee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, micro_garantee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, result_),
  };
  auth_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auth_info_ans_descriptor_,
      auth_info_ans::default_instance_,
      auth_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auth_info_ans));
  amount_info_ans_descriptor_ = file->message_type(14);
  static const int amount_info_ans_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, loan_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, loan_manual_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, loan_award_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, loan_unite_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, garantee_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, garantee_manual_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, garantee_award_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, garantee_unite_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, result_),
  };
  amount_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      amount_info_ans_descriptor_,
      amount_info_ans::default_instance_,
      amount_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(amount_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(amount_info_ans));
  device_ans_descriptor_ = file->message_type(15);
  static const int device_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_ans, device_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_ans, result_),
  };
  device_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      device_ans_descriptor_,
      device_ans::default_instance_,
      device_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(device_ans));
  bid_research_ans_descriptor_ = file->message_type(16);
  static const int bid_research_ans_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, success_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, fail_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, bid_overdue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, bid_bad_debt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, advance_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, travelfee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, result_),
  };
  bid_research_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_research_ans_descriptor_,
      bid_research_ans::default_instance_,
      bid_research_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_research_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_research_ans));
  bid_invest_ans_descriptor_ = file->message_type(17);
  static const int bid_invest_ans_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, totalamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, investmentprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, receive_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, lateamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, result_),
  };
  bid_invest_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_invest_ans_descriptor_,
      bid_invest_ans::default_instance_,
      bid_invest_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_invest_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_invest_ans));
  bid_guarantee_ans_descriptor_ = file->message_type(18);
  static const int bid_guarantee_ans_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, overdue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, bad_debt_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, totalamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, investmentprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, advance_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, not_advence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, receive_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, lateamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, result_),
  };
  bid_guarantee_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_guarantee_ans_descriptor_,
      bid_guarantee_ans::default_instance_,
      bid_guarantee_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_guarantee_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_guarantee_ans));
  bid_loan_ans_descriptor_ = file->message_type(19);
  static const int bid_loan_ans_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, success_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, payment_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, totalamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, lateamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, overdue_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, overdue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, grave_overdue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, max_overdue_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, result_),
  };
  bid_loan_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_loan_ans_descriptor_,
      bid_loan_ans::default_instance_,
      bid_loan_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_loan_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_loan_ans));
  danger_analysis_ans_descriptor_ = file->message_type(20);
  static const int danger_analysis_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_ans, danger_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_ans, result_),
  };
  danger_analysis_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      danger_analysis_ans_descriptor_,
      danger_analysis_ans::default_instance_,
      danger_analysis_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(danger_analysis_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(danger_analysis_ans));
  bid_history_ans_descriptor_ = file->message_type(21);
  static const int bid_history_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_history_ans, history_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_history_ans, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_history_ans, result_),
  };
  bid_history_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_history_ans_descriptor_,
      bid_history_ans::default_instance_,
      bid_history_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_history_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_history_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_history_ans));
  action_ask_type_descriptor_ = file->enum_type(0);
  danger_analysis_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ODP_5fuser_5fportrayal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    location_info_descriptor_, &location_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    version_info_descriptor_, &version_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    device_login_info_descriptor_, &device_login_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    device_info_descriptor_, &device_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_info_descriptor_, &history_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistics_common_info_descriptor_, &statistics_common_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    danger_param_info_descriptor_, &danger_param_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    danger_analysis_info_descriptor_, &danger_analysis_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_action_ask_descriptor_, &user_action_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    location_info_ans_descriptor_, &location_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_version_info_ans_descriptor_, &user_version_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_analysis_ans_descriptor_, &login_analysis_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    business_predilection_ans_descriptor_, &business_predilection_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auth_info_ans_descriptor_, &auth_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    amount_info_ans_descriptor_, &amount_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    device_ans_descriptor_, &device_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_research_ans_descriptor_, &bid_research_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_invest_ans_descriptor_, &bid_invest_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_guarantee_ans_descriptor_, &bid_guarantee_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_loan_ans_descriptor_, &bid_loan_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    danger_analysis_ans_descriptor_, &danger_analysis_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_history_ans_descriptor_, &bid_history_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ODP_5fuser_5fportrayal_2eproto() {
  delete location_info::default_instance_;
  delete location_info_reflection_;
  delete version_info::default_instance_;
  delete version_info_reflection_;
  delete device_login_info::default_instance_;
  delete device_login_info_reflection_;
  delete device_info::default_instance_;
  delete device_info_reflection_;
  delete history_info::default_instance_;
  delete history_info_reflection_;
  delete statistics_common_info::default_instance_;
  delete statistics_common_info_reflection_;
  delete danger_param_info::default_instance_;
  delete danger_param_info_reflection_;
  delete danger_analysis_info::default_instance_;
  delete danger_analysis_info_reflection_;
  delete user_action_ask::default_instance_;
  delete user_action_ask_reflection_;
  delete location_info_ans::default_instance_;
  delete location_info_ans_reflection_;
  delete user_version_info_ans::default_instance_;
  delete user_version_info_ans_reflection_;
  delete login_analysis_ans::default_instance_;
  delete login_analysis_ans_reflection_;
  delete business_predilection_ans::default_instance_;
  delete business_predilection_ans_reflection_;
  delete auth_info_ans::default_instance_;
  delete auth_info_ans_reflection_;
  delete amount_info_ans::default_instance_;
  delete amount_info_ans_reflection_;
  delete device_ans::default_instance_;
  delete device_ans_reflection_;
  delete bid_research_ans::default_instance_;
  delete bid_research_ans_reflection_;
  delete bid_invest_ans::default_instance_;
  delete bid_invest_ans_reflection_;
  delete bid_guarantee_ans::default_instance_;
  delete bid_guarantee_ans_reflection_;
  delete bid_loan_ans::default_instance_;
  delete bid_loan_ans_reflection_;
  delete danger_analysis_ans::default_instance_;
  delete danger_analysis_ans_reflection_;
  delete bid_history_ans::default_instance_;
  delete bid_history_ans_reflection_;
}

void protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ODP_user_portrayal.proto\022\022ODP_user_por"
    "trayal\032\014common.proto\"8\n\rlocation_info\022\025\n"
    "\rlocation_desc\030\001 \001(\014\022\020\n\010iscommon\030\002 \001(\005\"\306"
    "\001\n\014version_info\022\017\n\007version\030\001 \001(\014\022\023\n\013vers"
    "ion_num\030\002 \001(\014\022\020\n\010download\030\003 \001(\014\022\025\n\rdownl"
    "oad_time\030\004 \001(\014\022\025\n\rlast_use_time\030\005 \001(\014\022\024\n"
    "\014last_version\030\006 \001(\014\022\030\n\020last_version_num\030"
    "\007 \001(\014\022\r\n\005isnow\030\010 \001(\005\022\021\n\tstart_num\030\t \001(\005\""
    ";\n\021device_login_info\022\022\n\nlogin_name\030\001 \001(\014"
    "\022\022\n\nis_overdue\030\002 \001(\005\"\231\002\n\013device_info\022\021\n\t"
    "device_id\030\001 \001(\014\022\r\n\005brand\030\002 \001(\014\022\r\n\005model\030"
    "\003 \001(\014\022\030\n\020address_list_num\030\004 \001(\005\022\022\n\nfirst"
    "_time\030\005 \001(\014\022\025\n\rlast_use_time\030\006 \001(\014\022\024\n\014bl"
    "ack_device\030\007 \001(\005\022\032\n\022last_use_localtion\030\010"
    " \001(\014\022\020\n\010use_days\030\t \001(\005\022\017\n\007use_num\030\n \001(\005\022"
    "\?\n\020other_login_info\030\013 \003(\0132%.ODP_user_por"
    "trayal.device_login_info\"\320\002\n\014history_inf"
    "o\022\026\n\016user_nick_name\030\001 \001(\014\022\025\n\rhead_portra"
    "it\030\002 \001(\014\022\030\n\003sex\030\003 \001(\0162\013.common.sex\022\021\n\tbi"
    "d_title\030\004 \001(\014\022\022\n\ncreatedate\030\005 \001(\014\022\025\n\rbor"
    "row_amount\030\006 \001(\001\022\027\n\017guarantee_rates\030\007 \001("
    "\001\022\021\n\tlendrates\030\010 \001(\001\022\026\n\016borrowingmonth\030\t"
    " \001(\001\022\024\n\014jd_nick_name\030\n \001(\014\022\030\n\020jd_head_po"
    "rtrait\030\013 \001(\014\022\022\n\nislocation\030\014 \001(\005\022\017\n\007bsta"
    "tus\030\r \001(\014\022\016\n\006amount\030\016 \001(\001\022\020\n\010dateTime\030\017 "
    "\001(\014\"X\n\026statistics_common_info\022\035\n\025horizon"
    "tal_coordinate\030\001 \001(\014\022\037\n\027vertical_coordin"
    "ate_num\030\002 \001(\005\"3\n\021danger_param_info\022\016\n\006pa"
    "ram1\030\001 \001(\014\022\016\n\006param2\030\002 \001(\014\"\313\002\n\024danger_an"
    "alysis_info\0226\n\004type\030\001 \001(\0162(.ODP_user_por"
    "trayal.danger_analysis_type\022\017\n\007isexist\030\002"
    " \001(\005\0229\n\nparamlist1\030\003 \003(\0132%.ODP_user_port"
    "rayal.danger_param_info\0229\n\nparamlist2\030\004 "
    "\003(\0132%.ODP_user_portrayal.danger_param_in"
    "fo\0229\n\nparamlist3\030\005 \003(\0132%.ODP_user_portra"
    "yal.danger_param_info\0229\n\nparamlist4\030\006 \003("
    "\0132%.ODP_user_portrayal.danger_param_info"
    "\"\264\001\n\017user_action_ask\0221\n\004type\030\001 \001(\0162#.ODP"
    "_user_portrayal.action_ask_type\022\r\n\005phone"
    "\030\002 \001(\014\022\016\n\006idcard\030\003 \001(\014\022\017\n\007curpage\030\004 \001(\005\022"
    "\017\n\007pagenum\030\005 \001(\005\022-\n\nask_header\030\006 \001(\0132\031.c"
    "ommon.common_ask_header\"r\n\021location_info"
    "_ans\0228\n\rlocation_list\030\001 \003(\0132!.ODP_user_p"
    "ortrayal.location_info\022#\n\006result\030\002 \001(\0132\023"
    ".common.result_info\"t\n\025user_version_info"
    "_ans\0226\n\014version_list\030\001 \003(\0132 .ODP_user_po"
    "rtrayal.version_info\022#\n\006result\030\002 \001(\0132\023.c"
    "ommon.result_info\"\360\002\n\022login_analysis_ans"
    "\022\021\n\tlogin_num\030\001 \001(\005\022\022\n\nlogin_days\030\002 \001(\005\022"
    "\027\n\017login_frequency\030\003 \001(\002\022\027\n\017last_login_t"
    "ime\030\004 \001(\014\022\030\n\020first_login_time\030\005 \001(\014\022\023\n\013s"
    "ilent_days\030\006 \001(\005\022\027\n\017week_most_login\030\007 \003("
    "\014\022\027\n\017day_most_action\030\010 \003(\014\022=\n\tweek_info\030"
    "\t \003(\0132*.ODP_user_portrayal.statistics_co"
    "mmon_info\022<\n\010day_info\030\n \003(\0132*.ODP_user_p"
    "ortrayal.statistics_common_info\022#\n\006resul"
    "t\030\013 \001(\0132\023.common.result_info\"\302\003\n\031busines"
    "s_predilection_ans\022\027\n\017invest_interval\030\001 "
    "\001(\014\022\023\n\013invest_rate\030\002 \001(\014\022\021\n\ttime_type\030\003 "
    "\001(\014\022\027\n\017amount_interval\030\004 \001(\014\022\031\n\021garantee"
    "_interval\030\005 \001(\014\022\025\n\rgarantee_rate\030\006 \001(\014\022\032"
    "\n\022garantee_time_type\030\007 \001(\014\022 \n\030garantee_a"
    "mount_interval\030\010 \001(\014\022\023\n\013jd_interval\030\t \001("
    "\014\022\017\n\007jd_rate\030\n \001(\014\022\024\n\014jd_time_type\030\013 \001(\014"
    "\022\032\n\022jd_amount_interval\030\014 \001(\014\022\025\n\rloan_int"
    "erval\030\r \001(\014\022\021\n\tloan_rate\030\016 \001(\014\022\026\n\016loan_t"
    "ime_type\030\017 \001(\014\022\034\n\024loan_amount_interval\030\020"
    " \001(\014\022#\n\006result\030\021 \001(\0132\023.common.result_inf"
    "o\"\270\001\n\rauth_info_ans\022\022\n\nphone_auth\030\001 \001(\005\022"
    "\026\n\016real_name_auth\030\002 \001(\005\022\021\n\tloan_auth\030\003 \001"
    "(\005\022\025\n\rgarantee_auth\030\004 \001(\005\022\024\n\014big_garante"
    "e\030\005 \001(\005\022\026\n\016micro_garantee\030\006 \001(\005\022#\n\006resul"
    "t\030\007 \001(\0132\023.common.result_info\"\224\002\n\017amount_"
    "info_ans\022\023\n\013loan_amount\030\001 \001(\001\022\032\n\022loan_ma"
    "nual_amount\030\002 \001(\001\022\031\n\021loan_award_amount\030\003"
    " \001(\001\022\031\n\021loan_unite_amount\030\004 \001(\001\022\027\n\017garan"
    "tee_amount\030\005 \001(\001\022\036\n\026garantee_manual_amou"
    "nt\030\006 \001(\001\022\035\n\025garantee_award_amount\030\007 \001(\001\022"
    "\035\n\025garantee_unite_amount\030\010 \001(\001\022#\n\006result"
    "\030\t \001(\0132\023.common.result_info\"g\n\ndevice_an"
    "s\0224\n\013device_list\030\001 \003(\0132\037.ODP_user_portra"
    "yal.device_info\022#\n\006result\030\002 \001(\0132\023.common"
    ".result_info\"\336\001\n\020bid_research_ans\022\020\n\010ide"
    "ntity\030\001 \001(\014\022\021\n\ttotal_num\030\002 \001(\005\022\023\n\013succes"
    "s_num\030\003 \001(\005\022\020\n\010fail_num\030\004 \001(\005\022\027\n\017bid_ove"
    "rdue_num\030\005 \001(\005\022\024\n\014bid_bad_debt\030\006 \001(\005\022\027\n\017"
    "advance_overdue\030\007 \001(\005\022\021\n\ttravelfee\030\010 \001(\001"
    "\022#\n\006result\030\t \001(\0132\023.common.result_info\"\243\001"
    "\n\016bid_invest_ans\022\021\n\ttotal_num\030\001 \001(\005\022\023\n\013t"
    "otalamount\030\002 \001(\001\022\030\n\020investmentprofit\030\003 \001"
    "(\001\022\026\n\016receive_amount\030\004 \001(\001\022\022\n\nlateamount"
    "\030\005 \001(\001\022#\n\006result\030\006 \001(\0132\023.common.result_i"
    "nfo\"\376\001\n\021bid_guarantee_ans\022\021\n\ttotal_num\030\001"
    " \001(\005\022\023\n\013overdue_num\030\002 \001(\005\022\024\n\014bad_debt_nu"
    "m\030\003 \001(\005\022\023\n\013totalamount\030\004 \001(\001\022\030\n\020investme"
    "ntprofit\030\005 \001(\001\022\026\n\016advance_amount\030\006 \001(\001\022\023"
    "\n\013not_advence\030\007 \001(\001\022\026\n\016receive_amount\030\010 "
    "\001(\001\022\022\n\nlateamount\030\t \001(\001\022#\n\006result\030\n \001(\0132"
    "\023.common.result_info\"\377\001\n\014bid_loan_ans\022\021\n"
    "\ttotal_num\030\001 \001(\005\022\023\n\013success_num\030\002 \001(\005\022\027\n"
    "\017payment_success\030\003 \001(\005\022\023\n\013totalamount\030\004 "
    "\001(\001\022\022\n\nlateamount\030\005 \001(\001\022\026\n\016overdue_amoun"
    "t\030\006 \001(\001\022\023\n\013overdue_num\030\007 \001(\005\022\031\n\021grave_ov"
    "erdue_num\030\010 \001(\005\022\030\n\020max_overdue_days\030\t \001("
    "\005\022#\n\006result\030\n \001(\0132\023.common.result_info\"y"
    "\n\023danger_analysis_ans\022=\n\013danger_list\030\001 \003"
    "(\0132(.ODP_user_portrayal.danger_analysis_"
    "info\022#\n\006result\030\002 \001(\0132\023.common.result_inf"
    "o\"\201\001\n\017bid_history_ans\0226\n\014history_list\030\001 "
    "\003(\0132 .ODP_user_portrayal.history_info\022\021\n"
    "\ttotal_num\030\002 \001(\005\022#\n\006result\030\003 \001(\0132\023.commo"
    "n.result_info*\225\003\n\017action_ask_type\022\021\n\rpag"
    "e_location\020\001\022\025\n\021page_user_version\020\002\022\017\n\013p"
    "age_device\020\003\022\027\n\023page_login_analysis\020\004\022\036\n"
    "\032page_business_predilection\020\005\022\022\n\016page_au"
    "th_info\020\006\022\024\n\020page_user_amount\020\007\022\025\n\021page_"
    "bid_research\020\010\022\035\n\031page_bid_research_hist"
    "ory\020\t\022\023\n\017page_bin_invest\020\n\022\033\n\027page_bid_i"
    "nvest_history\020\013\022\025\n\021page_bid_garantee\020\014\022\035"
    "\n\031page_bid_garantee_history\020\r\022\021\n\rpage_bi"
    "d_loan\020\016\022\031\n\025page_bid_loan_history\020\017\022\030\n\024p"
    "age_danger_analysis\020\020*\350\002\n\024danger_analysi"
    "s_type\022\033\n\027page_business_blacklist\020\001\022!\n\035p"
    "age_third_platform_blacklist\020\002\022\031\n\025page_d"
    "evice_blacklist\020\003\022\022\n\016page_ip_change\020\004\022$\n"
    " page_terminal_most_account_login\020\005\022\031\n\025p"
    "age_chat_spite_words\020\006\022\026\n\022page_complain_"
    "user\020\007\022\025\n\021page_address_list\020\010\022\031\n\025page_li"
    "nkman_not_true\020\t\022\024\n\020page_bin_overdue\020\n\022\021"
    "\n\rpage_cheating\020\013\022\031\n\025page_location_chang"
    "er\020\014\022\022\n\016page_ip_danger\020\r", 5224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ODP_user_portrayal.proto", &protobuf_RegisterTypes);
  location_info::default_instance_ = new location_info();
  version_info::default_instance_ = new version_info();
  device_login_info::default_instance_ = new device_login_info();
  device_info::default_instance_ = new device_info();
  history_info::default_instance_ = new history_info();
  statistics_common_info::default_instance_ = new statistics_common_info();
  danger_param_info::default_instance_ = new danger_param_info();
  danger_analysis_info::default_instance_ = new danger_analysis_info();
  user_action_ask::default_instance_ = new user_action_ask();
  location_info_ans::default_instance_ = new location_info_ans();
  user_version_info_ans::default_instance_ = new user_version_info_ans();
  login_analysis_ans::default_instance_ = new login_analysis_ans();
  business_predilection_ans::default_instance_ = new business_predilection_ans();
  auth_info_ans::default_instance_ = new auth_info_ans();
  amount_info_ans::default_instance_ = new amount_info_ans();
  device_ans::default_instance_ = new device_ans();
  bid_research_ans::default_instance_ = new bid_research_ans();
  bid_invest_ans::default_instance_ = new bid_invest_ans();
  bid_guarantee_ans::default_instance_ = new bid_guarantee_ans();
  bid_loan_ans::default_instance_ = new bid_loan_ans();
  danger_analysis_ans::default_instance_ = new danger_analysis_ans();
  bid_history_ans::default_instance_ = new bid_history_ans();
  location_info::default_instance_->InitAsDefaultInstance();
  version_info::default_instance_->InitAsDefaultInstance();
  device_login_info::default_instance_->InitAsDefaultInstance();
  device_info::default_instance_->InitAsDefaultInstance();
  history_info::default_instance_->InitAsDefaultInstance();
  statistics_common_info::default_instance_->InitAsDefaultInstance();
  danger_param_info::default_instance_->InitAsDefaultInstance();
  danger_analysis_info::default_instance_->InitAsDefaultInstance();
  user_action_ask::default_instance_->InitAsDefaultInstance();
  location_info_ans::default_instance_->InitAsDefaultInstance();
  user_version_info_ans::default_instance_->InitAsDefaultInstance();
  login_analysis_ans::default_instance_->InitAsDefaultInstance();
  business_predilection_ans::default_instance_->InitAsDefaultInstance();
  auth_info_ans::default_instance_->InitAsDefaultInstance();
  amount_info_ans::default_instance_->InitAsDefaultInstance();
  device_ans::default_instance_->InitAsDefaultInstance();
  bid_research_ans::default_instance_->InitAsDefaultInstance();
  bid_invest_ans::default_instance_->InitAsDefaultInstance();
  bid_guarantee_ans::default_instance_->InitAsDefaultInstance();
  bid_loan_ans::default_instance_->InitAsDefaultInstance();
  danger_analysis_ans::default_instance_->InitAsDefaultInstance();
  bid_history_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ODP_5fuser_5fportrayal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ODP_5fuser_5fportrayal_2eproto {
  StaticDescriptorInitializer_ODP_5fuser_5fportrayal_2eproto() {
    protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  }
} static_descriptor_initializer_ODP_5fuser_5fportrayal_2eproto_;
const ::google::protobuf::EnumDescriptor* action_ask_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return action_ask_type_descriptor_;
}
bool action_ask_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* danger_analysis_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return danger_analysis_type_descriptor_;
}
bool danger_analysis_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int location_info::kLocationDescFieldNumber;
const int location_info::kIscommonFieldNumber;
#endif  // !_MSC_VER

location_info::location_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.location_info)
}

void location_info::InitAsDefaultInstance() {
}

location_info::location_info(const location_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.location_info)
}

void location_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  location_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iscommon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

location_info::~location_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.location_info)
  SharedDtor();
}

void location_info::SharedDtor() {
  if (location_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_desc_;
  }
  if (this != default_instance_) {
  }
}

void location_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* location_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return location_info_descriptor_;
}

const location_info& location_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

location_info* location_info::default_instance_ = NULL;

location_info* location_info::New() const {
  return new location_info;
}

void location_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_location_desc()) {
      if (location_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_desc_->clear();
      }
    }
    iscommon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool location_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.location_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes location_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_location_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iscommon;
        break;
      }

      // optional int32 iscommon = 2;
      case 2: {
        if (tag == 16) {
         parse_iscommon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscommon_)));
          set_has_iscommon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.location_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.location_info)
  return false;
#undef DO_
}

void location_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.location_info)
  // optional bytes location_desc = 1;
  if (has_location_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->location_desc(), output);
  }

  // optional int32 iscommon = 2;
  if (has_iscommon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iscommon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.location_info)
}

::google::protobuf::uint8* location_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.location_info)
  // optional bytes location_desc = 1;
  if (has_location_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->location_desc(), target);
  }

  // optional int32 iscommon = 2;
  if (has_iscommon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iscommon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.location_info)
  return target;
}

int location_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes location_desc = 1;
    if (has_location_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->location_desc());
    }

    // optional int32 iscommon = 2;
    if (has_iscommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscommon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void location_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const location_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const location_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void location_info::MergeFrom(const location_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location_desc()) {
      set_location_desc(from.location_desc());
    }
    if (from.has_iscommon()) {
      set_iscommon(from.iscommon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void location_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_info::CopyFrom(const location_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_info::IsInitialized() const {

  return true;
}

void location_info::Swap(location_info* other) {
  if (other != this) {
    std::swap(location_desc_, other->location_desc_);
    std::swap(iscommon_, other->iscommon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata location_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = location_info_descriptor_;
  metadata.reflection = location_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int version_info::kVersionFieldNumber;
const int version_info::kVersionNumFieldNumber;
const int version_info::kDownloadFieldNumber;
const int version_info::kDownloadTimeFieldNumber;
const int version_info::kLastUseTimeFieldNumber;
const int version_info::kLastVersionFieldNumber;
const int version_info::kLastVersionNumFieldNumber;
const int version_info::kIsnowFieldNumber;
const int version_info::kStartNumFieldNumber;
#endif  // !_MSC_VER

version_info::version_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.version_info)
}

void version_info::InitAsDefaultInstance() {
}

version_info::version_info(const version_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.version_info)
}

void version_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_use_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_version_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isnow_ = 0;
  start_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

version_info::~version_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.version_info)
  SharedDtor();
}

void version_info::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_num_;
  }
  if (download_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_;
  }
  if (download_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete download_time_;
  }
  if (last_use_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_use_time_;
  }
  if (last_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_version_;
  }
  if (last_version_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_version_num_;
  }
  if (this != default_instance_) {
  }
}

void version_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* version_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return version_info_descriptor_;
}

const version_info& version_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

version_info* version_info::default_instance_ = NULL;

version_info* version_info::New() const {
  return new version_info;
}

void version_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_version_num()) {
      if (version_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_num_->clear();
      }
    }
    if (has_download()) {
      if (download_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        download_->clear();
      }
    }
    if (has_download_time()) {
      if (download_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        download_time_->clear();
      }
    }
    if (has_last_use_time()) {
      if (last_use_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_use_time_->clear();
      }
    }
    if (has_last_version()) {
      if (last_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_version_->clear();
      }
    }
    if (has_last_version_num()) {
      if (last_version_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_version_num_->clear();
      }
    }
    isnow_ = 0;
  }
  start_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool version_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.version_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version_num;
        break;
      }

      // optional bytes version_num = 2;
      case 2: {
        if (tag == 18) {
         parse_version_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_download;
        break;
      }

      // optional bytes download = 3;
      case 3: {
        if (tag == 26) {
         parse_download:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_download()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_download_time;
        break;
      }

      // optional bytes download_time = 4;
      case 4: {
        if (tag == 34) {
         parse_download_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_download_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_last_use_time;
        break;
      }

      // optional bytes last_use_time = 5;
      case 5: {
        if (tag == 42) {
         parse_last_use_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_use_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_last_version;
        break;
      }

      // optional bytes last_version = 6;
      case 6: {
        if (tag == 50) {
         parse_last_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_last_version_num;
        break;
      }

      // optional bytes last_version_num = 7;
      case 7: {
        if (tag == 58) {
         parse_last_version_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_version_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isnow;
        break;
      }

      // optional int32 isnow = 8;
      case 8: {
        if (tag == 64) {
         parse_isnow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnow_)));
          set_has_isnow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_start_num;
        break;
      }

      // optional int32 start_num = 9;
      case 9: {
        if (tag == 72) {
         parse_start_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_num_)));
          set_has_start_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.version_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.version_info)
  return false;
#undef DO_
}

void version_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.version_info)
  // optional bytes version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // optional bytes version_num = 2;
  if (has_version_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->version_num(), output);
  }

  // optional bytes download = 3;
  if (has_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->download(), output);
  }

  // optional bytes download_time = 4;
  if (has_download_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->download_time(), output);
  }

  // optional bytes last_use_time = 5;
  if (has_last_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->last_use_time(), output);
  }

  // optional bytes last_version = 6;
  if (has_last_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->last_version(), output);
  }

  // optional bytes last_version_num = 7;
  if (has_last_version_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->last_version_num(), output);
  }

  // optional int32 isnow = 8;
  if (has_isnow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isnow(), output);
  }

  // optional int32 start_num = 9;
  if (has_start_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->start_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.version_info)
}

::google::protobuf::uint8* version_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.version_info)
  // optional bytes version = 1;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // optional bytes version_num = 2;
  if (has_version_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->version_num(), target);
  }

  // optional bytes download = 3;
  if (has_download()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->download(), target);
  }

  // optional bytes download_time = 4;
  if (has_download_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->download_time(), target);
  }

  // optional bytes last_use_time = 5;
  if (has_last_use_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->last_use_time(), target);
  }

  // optional bytes last_version = 6;
  if (has_last_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->last_version(), target);
  }

  // optional bytes last_version_num = 7;
  if (has_last_version_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->last_version_num(), target);
  }

  // optional int32 isnow = 8;
  if (has_isnow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isnow(), target);
  }

  // optional int32 start_num = 9;
  if (has_start_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->start_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.version_info)
  return target;
}

int version_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional bytes version_num = 2;
    if (has_version_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version_num());
    }

    // optional bytes download = 3;
    if (has_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->download());
    }

    // optional bytes download_time = 4;
    if (has_download_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->download_time());
    }

    // optional bytes last_use_time = 5;
    if (has_last_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_use_time());
    }

    // optional bytes last_version = 6;
    if (has_last_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_version());
    }

    // optional bytes last_version_num = 7;
    if (has_last_version_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_version_num());
    }

    // optional int32 isnow = 8;
    if (has_isnow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 start_num = 9;
    if (has_start_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void version_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const version_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const version_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void version_info::MergeFrom(const version_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_version_num()) {
      set_version_num(from.version_num());
    }
    if (from.has_download()) {
      set_download(from.download());
    }
    if (from.has_download_time()) {
      set_download_time(from.download_time());
    }
    if (from.has_last_use_time()) {
      set_last_use_time(from.last_use_time());
    }
    if (from.has_last_version()) {
      set_last_version(from.last_version());
    }
    if (from.has_last_version_num()) {
      set_last_version_num(from.last_version_num());
    }
    if (from.has_isnow()) {
      set_isnow(from.isnow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_num()) {
      set_start_num(from.start_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void version_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void version_info::CopyFrom(const version_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool version_info::IsInitialized() const {

  return true;
}

void version_info::Swap(version_info* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(version_num_, other->version_num_);
    std::swap(download_, other->download_);
    std::swap(download_time_, other->download_time_);
    std::swap(last_use_time_, other->last_use_time_);
    std::swap(last_version_, other->last_version_);
    std::swap(last_version_num_, other->last_version_num_);
    std::swap(isnow_, other->isnow_);
    std::swap(start_num_, other->start_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata version_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = version_info_descriptor_;
  metadata.reflection = version_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int device_login_info::kLoginNameFieldNumber;
const int device_login_info::kIsOverdueFieldNumber;
#endif  // !_MSC_VER

device_login_info::device_login_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.device_login_info)
}

void device_login_info::InitAsDefaultInstance() {
}

device_login_info::device_login_info(const device_login_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.device_login_info)
}

void device_login_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_overdue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

device_login_info::~device_login_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.device_login_info)
  SharedDtor();
}

void device_login_info::SharedDtor() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (this != default_instance_) {
  }
}

void device_login_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device_login_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return device_login_info_descriptor_;
}

const device_login_info& device_login_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

device_login_info* device_login_info::default_instance_ = NULL;

device_login_info* device_login_info::New() const {
  return new device_login_info;
}

void device_login_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_name_->clear();
      }
    }
    is_overdue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool device_login_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.device_login_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes login_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_overdue;
        break;
      }

      // optional int32 is_overdue = 2;
      case 2: {
        if (tag == 16) {
         parse_is_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_overdue_)));
          set_has_is_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.device_login_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.device_login_info)
  return false;
#undef DO_
}

void device_login_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.device_login_info)
  // optional bytes login_name = 1;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->login_name(), output);
  }

  // optional int32 is_overdue = 2;
  if (has_is_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_overdue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.device_login_info)
}

::google::protobuf::uint8* device_login_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.device_login_info)
  // optional bytes login_name = 1;
  if (has_login_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->login_name(), target);
  }

  // optional int32 is_overdue = 2;
  if (has_is_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_overdue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.device_login_info)
  return target;
}

int device_login_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes login_name = 1;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->login_name());
    }

    // optional int32 is_overdue = 2;
    if (has_is_overdue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_overdue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device_login_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const device_login_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const device_login_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void device_login_info::MergeFrom(const device_login_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_is_overdue()) {
      set_is_overdue(from.is_overdue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void device_login_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_login_info::CopyFrom(const device_login_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_login_info::IsInitialized() const {

  return true;
}

void device_login_info::Swap(device_login_info* other) {
  if (other != this) {
    std::swap(login_name_, other->login_name_);
    std::swap(is_overdue_, other->is_overdue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata device_login_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = device_login_info_descriptor_;
  metadata.reflection = device_login_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int device_info::kDeviceIdFieldNumber;
const int device_info::kBrandFieldNumber;
const int device_info::kModelFieldNumber;
const int device_info::kAddressListNumFieldNumber;
const int device_info::kFirstTimeFieldNumber;
const int device_info::kLastUseTimeFieldNumber;
const int device_info::kBlackDeviceFieldNumber;
const int device_info::kLastUseLocaltionFieldNumber;
const int device_info::kUseDaysFieldNumber;
const int device_info::kUseNumFieldNumber;
const int device_info::kOtherLoginInfoFieldNumber;
#endif  // !_MSC_VER

device_info::device_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.device_info)
}

void device_info::InitAsDefaultInstance() {
}

device_info::device_info(const device_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.device_info)
}

void device_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_list_num_ = 0;
  first_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_use_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  black_device_ = 0;
  last_use_localtion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_days_ = 0;
  use_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

device_info::~device_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.device_info)
  SharedDtor();
}

void device_info::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (first_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_time_;
  }
  if (last_use_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_use_time_;
  }
  if (last_use_localtion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_use_localtion_;
  }
  if (this != default_instance_) {
  }
}

void device_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return device_info_descriptor_;
}

const device_info& device_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

device_info* device_info::default_instance_ = NULL;

device_info* device_info::New() const {
  return new device_info;
}

void device_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<device_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(address_list_num_, black_device_);
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_first_time()) {
      if (first_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_time_->clear();
      }
    }
    if (has_last_use_time()) {
      if (last_use_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_use_time_->clear();
      }
    }
    if (has_last_use_localtion()) {
      if (last_use_localtion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_use_localtion_->clear();
      }
    }
  }
  ZR_(use_days_, use_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  other_login_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool device_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.device_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_brand;
        break;
      }

      // optional bytes brand = 2;
      case 2: {
        if (tag == 18) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional bytes model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_address_list_num;
        break;
      }

      // optional int32 address_list_num = 4;
      case 4: {
        if (tag == 32) {
         parse_address_list_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &address_list_num_)));
          set_has_address_list_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_first_time;
        break;
      }

      // optional bytes first_time = 5;
      case 5: {
        if (tag == 42) {
         parse_first_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_last_use_time;
        break;
      }

      // optional bytes last_use_time = 6;
      case 6: {
        if (tag == 50) {
         parse_last_use_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_use_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_black_device;
        break;
      }

      // optional int32 black_device = 7;
      case 7: {
        if (tag == 56) {
         parse_black_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_device_)));
          set_has_black_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_last_use_localtion;
        break;
      }

      // optional bytes last_use_localtion = 8;
      case 8: {
        if (tag == 66) {
         parse_last_use_localtion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_use_localtion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_use_days;
        break;
      }

      // optional int32 use_days = 9;
      case 9: {
        if (tag == 72) {
         parse_use_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_days_)));
          set_has_use_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_use_num;
        break;
      }

      // optional int32 use_num = 10;
      case 10: {
        if (tag == 80) {
         parse_use_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_num_)));
          set_has_use_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_other_login_info;
        break;
      }

      // repeated .ODP_user_portrayal.device_login_info other_login_info = 11;
      case 11: {
        if (tag == 90) {
         parse_other_login_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other_login_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_other_login_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.device_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.device_info)
  return false;
#undef DO_
}

void device_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.device_info)
  // optional bytes device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device_id(), output);
  }

  // optional bytes brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->brand(), output);
  }

  // optional bytes model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->model(), output);
  }

  // optional int32 address_list_num = 4;
  if (has_address_list_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->address_list_num(), output);
  }

  // optional bytes first_time = 5;
  if (has_first_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->first_time(), output);
  }

  // optional bytes last_use_time = 6;
  if (has_last_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->last_use_time(), output);
  }

  // optional int32 black_device = 7;
  if (has_black_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->black_device(), output);
  }

  // optional bytes last_use_localtion = 8;
  if (has_last_use_localtion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->last_use_localtion(), output);
  }

  // optional int32 use_days = 9;
  if (has_use_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->use_days(), output);
  }

  // optional int32 use_num = 10;
  if (has_use_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->use_num(), output);
  }

  // repeated .ODP_user_portrayal.device_login_info other_login_info = 11;
  for (int i = 0; i < this->other_login_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->other_login_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.device_info)
}

::google::protobuf::uint8* device_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.device_info)
  // optional bytes device_id = 1;
  if (has_device_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->device_id(), target);
  }

  // optional bytes brand = 2;
  if (has_brand()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->brand(), target);
  }

  // optional bytes model = 3;
  if (has_model()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->model(), target);
  }

  // optional int32 address_list_num = 4;
  if (has_address_list_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->address_list_num(), target);
  }

  // optional bytes first_time = 5;
  if (has_first_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->first_time(), target);
  }

  // optional bytes last_use_time = 6;
  if (has_last_use_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->last_use_time(), target);
  }

  // optional int32 black_device = 7;
  if (has_black_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->black_device(), target);
  }

  // optional bytes last_use_localtion = 8;
  if (has_last_use_localtion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->last_use_localtion(), target);
  }

  // optional int32 use_days = 9;
  if (has_use_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->use_days(), target);
  }

  // optional int32 use_num = 10;
  if (has_use_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->use_num(), target);
  }

  // repeated .ODP_user_portrayal.device_login_info other_login_info = 11;
  for (int i = 0; i < this->other_login_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->other_login_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.device_info)
  return target;
}

int device_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_id());
    }

    // optional bytes brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->brand());
    }

    // optional bytes model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model());
    }

    // optional int32 address_list_num = 4;
    if (has_address_list_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->address_list_num());
    }

    // optional bytes first_time = 5;
    if (has_first_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_time());
    }

    // optional bytes last_use_time = 6;
    if (has_last_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_use_time());
    }

    // optional int32 black_device = 7;
    if (has_black_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_device());
    }

    // optional bytes last_use_localtion = 8;
    if (has_last_use_localtion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_use_localtion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 use_days = 9;
    if (has_use_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_days());
    }

    // optional int32 use_num = 10;
    if (has_use_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_num());
    }

  }
  // repeated .ODP_user_portrayal.device_login_info other_login_info = 11;
  total_size += 1 * this->other_login_info_size();
  for (int i = 0; i < this->other_login_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other_login_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const device_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const device_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void device_info::MergeFrom(const device_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  other_login_info_.MergeFrom(from.other_login_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_address_list_num()) {
      set_address_list_num(from.address_list_num());
    }
    if (from.has_first_time()) {
      set_first_time(from.first_time());
    }
    if (from.has_last_use_time()) {
      set_last_use_time(from.last_use_time());
    }
    if (from.has_black_device()) {
      set_black_device(from.black_device());
    }
    if (from.has_last_use_localtion()) {
      set_last_use_localtion(from.last_use_localtion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_use_days()) {
      set_use_days(from.use_days());
    }
    if (from.has_use_num()) {
      set_use_num(from.use_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void device_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_info::CopyFrom(const device_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_info::IsInitialized() const {

  return true;
}

void device_info::Swap(device_info* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(address_list_num_, other->address_list_num_);
    std::swap(first_time_, other->first_time_);
    std::swap(last_use_time_, other->last_use_time_);
    std::swap(black_device_, other->black_device_);
    std::swap(last_use_localtion_, other->last_use_localtion_);
    std::swap(use_days_, other->use_days_);
    std::swap(use_num_, other->use_num_);
    other_login_info_.Swap(&other->other_login_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata device_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = device_info_descriptor_;
  metadata.reflection = device_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_info::kUserNickNameFieldNumber;
const int history_info::kHeadPortraitFieldNumber;
const int history_info::kSexFieldNumber;
const int history_info::kBidTitleFieldNumber;
const int history_info::kCreatedateFieldNumber;
const int history_info::kBorrowAmountFieldNumber;
const int history_info::kGuaranteeRatesFieldNumber;
const int history_info::kLendratesFieldNumber;
const int history_info::kBorrowingmonthFieldNumber;
const int history_info::kJdNickNameFieldNumber;
const int history_info::kJdHeadPortraitFieldNumber;
const int history_info::kIslocationFieldNumber;
const int history_info::kBstatusFieldNumber;
const int history_info::kAmountFieldNumber;
const int history_info::kDateTimeFieldNumber;
#endif  // !_MSC_VER

history_info::history_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.history_info)
}

void history_info::InitAsDefaultInstance() {
}

history_info::history_info(const history_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.history_info)
}

void history_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 1;
  bid_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_amount_ = 0;
  guarantee_rates_ = 0;
  lendrates_ = 0;
  borrowingmonth_ = 0;
  jd_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jd_head_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  islocation_ = 0;
  bstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_info::~history_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.history_info)
  SharedDtor();
}

void history_info::SharedDtor() {
  if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nick_name_;
  }
  if (head_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_portrait_;
  }
  if (bid_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_title_;
  }
  if (createdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdate_;
  }
  if (jd_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jd_nick_name_;
  }
  if (jd_head_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jd_head_portrait_;
  }
  if (bstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bstatus_;
  }
  if (datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datetime_;
  }
  if (this != default_instance_) {
  }
}

void history_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_info_descriptor_;
}

const history_info& history_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

history_info* history_info::default_instance_ = NULL;

history_info* history_info::New() const {
  return new history_info;
}

void history_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<history_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(borrow_amount_, guarantee_rates_);
    if (has_user_nick_name()) {
      if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nick_name_->clear();
      }
    }
    if (has_head_portrait()) {
      if (head_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_portrait_->clear();
      }
    }
    sex_ = 1;
    if (has_bid_title()) {
      if (bid_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_title_->clear();
      }
    }
    if (has_createdate()) {
      if (createdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createdate_->clear();
      }
    }
    lendrates_ = 0;
  }
  if (_has_bits_[8 / 32] & 32512) {
    borrowingmonth_ = 0;
    if (has_jd_nick_name()) {
      if (jd_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jd_nick_name_->clear();
      }
    }
    if (has_jd_head_portrait()) {
      if (jd_head_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jd_head_portrait_->clear();
      }
    }
    islocation_ = 0;
    if (has_bstatus()) {
      if (bstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bstatus_->clear();
      }
    }
    amount_ = 0;
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datetime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.history_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_nick_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_head_portrait;
        break;
      }

      // optional bytes head_portrait = 2;
      case 2: {
        if (tag == 18) {
         parse_head_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bid_title;
        break;
      }

      // optional bytes bid_title = 4;
      case 4: {
        if (tag == 34) {
         parse_bid_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_createdate;
        break;
      }

      // optional bytes createdate = 5;
      case 5: {
        if (tag == 42) {
         parse_createdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_createdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_borrow_amount;
        break;
      }

      // optional double borrow_amount = 6;
      case 6: {
        if (tag == 49) {
         parse_borrow_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &borrow_amount_)));
          set_has_borrow_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_guarantee_rates;
        break;
      }

      // optional double guarantee_rates = 7;
      case 7: {
        if (tag == 57) {
         parse_guarantee_rates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &guarantee_rates_)));
          set_has_guarantee_rates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lendrates;
        break;
      }

      // optional double lendrates = 8;
      case 8: {
        if (tag == 65) {
         parse_lendrates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lendrates_)));
          set_has_lendrates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_borrowingmonth;
        break;
      }

      // optional double borrowingmonth = 9;
      case 9: {
        if (tag == 73) {
         parse_borrowingmonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &borrowingmonth_)));
          set_has_borrowingmonth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_jd_nick_name;
        break;
      }

      // optional bytes jd_nick_name = 10;
      case 10: {
        if (tag == 82) {
         parse_jd_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jd_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_jd_head_portrait;
        break;
      }

      // optional bytes jd_head_portrait = 11;
      case 11: {
        if (tag == 90) {
         parse_jd_head_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jd_head_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_islocation;
        break;
      }

      // optional int32 islocation = 12;
      case 12: {
        if (tag == 96) {
         parse_islocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islocation_)));
          set_has_islocation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_bstatus;
        break;
      }

      // optional bytes bstatus = 13;
      case 13: {
        if (tag == 106) {
         parse_bstatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_amount;
        break;
      }

      // optional double amount = 14;
      case 14: {
        if (tag == 113) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_dateTime;
        break;
      }

      // optional bytes dateTime = 15;
      case 15: {
        if (tag == 122) {
         parse_dateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.history_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.history_info)
  return false;
#undef DO_
}

void history_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.history_info)
  // optional bytes user_nick_name = 1;
  if (has_user_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_nick_name(), output);
  }

  // optional bytes head_portrait = 2;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->head_portrait(), output);
  }

  // optional .common.sex sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sex(), output);
  }

  // optional bytes bid_title = 4;
  if (has_bid_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bid_title(), output);
  }

  // optional bytes createdate = 5;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->createdate(), output);
  }

  // optional double borrow_amount = 6;
  if (has_borrow_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->borrow_amount(), output);
  }

  // optional double guarantee_rates = 7;
  if (has_guarantee_rates()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->guarantee_rates(), output);
  }

  // optional double lendrates = 8;
  if (has_lendrates()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lendrates(), output);
  }

  // optional double borrowingmonth = 9;
  if (has_borrowingmonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->borrowingmonth(), output);
  }

  // optional bytes jd_nick_name = 10;
  if (has_jd_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->jd_nick_name(), output);
  }

  // optional bytes jd_head_portrait = 11;
  if (has_jd_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->jd_head_portrait(), output);
  }

  // optional int32 islocation = 12;
  if (has_islocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->islocation(), output);
  }

  // optional bytes bstatus = 13;
  if (has_bstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->bstatus(), output);
  }

  // optional double amount = 14;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->amount(), output);
  }

  // optional bytes dateTime = 15;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->datetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.history_info)
}

::google::protobuf::uint8* history_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.history_info)
  // optional bytes user_nick_name = 1;
  if (has_user_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_nick_name(), target);
  }

  // optional bytes head_portrait = 2;
  if (has_head_portrait()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->head_portrait(), target);
  }

  // optional .common.sex sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sex(), target);
  }

  // optional bytes bid_title = 4;
  if (has_bid_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bid_title(), target);
  }

  // optional bytes createdate = 5;
  if (has_createdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->createdate(), target);
  }

  // optional double borrow_amount = 6;
  if (has_borrow_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->borrow_amount(), target);
  }

  // optional double guarantee_rates = 7;
  if (has_guarantee_rates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->guarantee_rates(), target);
  }

  // optional double lendrates = 8;
  if (has_lendrates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lendrates(), target);
  }

  // optional double borrowingmonth = 9;
  if (has_borrowingmonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->borrowingmonth(), target);
  }

  // optional bytes jd_nick_name = 10;
  if (has_jd_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->jd_nick_name(), target);
  }

  // optional bytes jd_head_portrait = 11;
  if (has_jd_head_portrait()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->jd_head_portrait(), target);
  }

  // optional int32 islocation = 12;
  if (has_islocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->islocation(), target);
  }

  // optional bytes bstatus = 13;
  if (has_bstatus()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->bstatus(), target);
  }

  // optional double amount = 14;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->amount(), target);
  }

  // optional bytes dateTime = 15;
  if (has_datetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->datetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.history_info)
  return target;
}

int history_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_nick_name = 1;
    if (has_user_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nick_name());
    }

    // optional bytes head_portrait = 2;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_portrait());
    }

    // optional .common.sex sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional bytes bid_title = 4;
    if (has_bid_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_title());
    }

    // optional bytes createdate = 5;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->createdate());
    }

    // optional double borrow_amount = 6;
    if (has_borrow_amount()) {
      total_size += 1 + 8;
    }

    // optional double guarantee_rates = 7;
    if (has_guarantee_rates()) {
      total_size += 1 + 8;
    }

    // optional double lendrates = 8;
    if (has_lendrates()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double borrowingmonth = 9;
    if (has_borrowingmonth()) {
      total_size += 1 + 8;
    }

    // optional bytes jd_nick_name = 10;
    if (has_jd_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jd_nick_name());
    }

    // optional bytes jd_head_portrait = 11;
    if (has_jd_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jd_head_portrait());
    }

    // optional int32 islocation = 12;
    if (has_islocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islocation());
    }

    // optional bytes bstatus = 13;
    if (has_bstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bstatus());
    }

    // optional double amount = 14;
    if (has_amount()) {
      total_size += 1 + 8;
    }

    // optional bytes dateTime = 15;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_info::MergeFrom(const history_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_nick_name()) {
      set_user_nick_name(from.user_nick_name());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_bid_title()) {
      set_bid_title(from.bid_title());
    }
    if (from.has_createdate()) {
      set_createdate(from.createdate());
    }
    if (from.has_borrow_amount()) {
      set_borrow_amount(from.borrow_amount());
    }
    if (from.has_guarantee_rates()) {
      set_guarantee_rates(from.guarantee_rates());
    }
    if (from.has_lendrates()) {
      set_lendrates(from.lendrates());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_borrowingmonth()) {
      set_borrowingmonth(from.borrowingmonth());
    }
    if (from.has_jd_nick_name()) {
      set_jd_nick_name(from.jd_nick_name());
    }
    if (from.has_jd_head_portrait()) {
      set_jd_head_portrait(from.jd_head_portrait());
    }
    if (from.has_islocation()) {
      set_islocation(from.islocation());
    }
    if (from.has_bstatus()) {
      set_bstatus(from.bstatus());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_info::CopyFrom(const history_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_info::IsInitialized() const {

  return true;
}

void history_info::Swap(history_info* other) {
  if (other != this) {
    std::swap(user_nick_name_, other->user_nick_name_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(sex_, other->sex_);
    std::swap(bid_title_, other->bid_title_);
    std::swap(createdate_, other->createdate_);
    std::swap(borrow_amount_, other->borrow_amount_);
    std::swap(guarantee_rates_, other->guarantee_rates_);
    std::swap(lendrates_, other->lendrates_);
    std::swap(borrowingmonth_, other->borrowingmonth_);
    std::swap(jd_nick_name_, other->jd_nick_name_);
    std::swap(jd_head_portrait_, other->jd_head_portrait_);
    std::swap(islocation_, other->islocation_);
    std::swap(bstatus_, other->bstatus_);
    std::swap(amount_, other->amount_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_info_descriptor_;
  metadata.reflection = history_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistics_common_info::kHorizontalCoordinateFieldNumber;
const int statistics_common_info::kVerticalCoordinateNumFieldNumber;
#endif  // !_MSC_VER

statistics_common_info::statistics_common_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.statistics_common_info)
}

void statistics_common_info::InitAsDefaultInstance() {
}

statistics_common_info::statistics_common_info(const statistics_common_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.statistics_common_info)
}

void statistics_common_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  horizontal_coordinate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertical_coordinate_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistics_common_info::~statistics_common_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.statistics_common_info)
  SharedDtor();
}

void statistics_common_info::SharedDtor() {
  if (horizontal_coordinate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete horizontal_coordinate_;
  }
  if (this != default_instance_) {
  }
}

void statistics_common_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistics_common_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistics_common_info_descriptor_;
}

const statistics_common_info& statistics_common_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

statistics_common_info* statistics_common_info::default_instance_ = NULL;

statistics_common_info* statistics_common_info::New() const {
  return new statistics_common_info;
}

void statistics_common_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_horizontal_coordinate()) {
      if (horizontal_coordinate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        horizontal_coordinate_->clear();
      }
    }
    vertical_coordinate_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistics_common_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.statistics_common_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes horizontal_coordinate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_horizontal_coordinate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vertical_coordinate_num;
        break;
      }

      // optional int32 vertical_coordinate_num = 2;
      case 2: {
        if (tag == 16) {
         parse_vertical_coordinate_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_coordinate_num_)));
          set_has_vertical_coordinate_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.statistics_common_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.statistics_common_info)
  return false;
#undef DO_
}

void statistics_common_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.statistics_common_info)
  // optional bytes horizontal_coordinate = 1;
  if (has_horizontal_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->horizontal_coordinate(), output);
  }

  // optional int32 vertical_coordinate_num = 2;
  if (has_vertical_coordinate_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vertical_coordinate_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.statistics_common_info)
}

::google::protobuf::uint8* statistics_common_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.statistics_common_info)
  // optional bytes horizontal_coordinate = 1;
  if (has_horizontal_coordinate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->horizontal_coordinate(), target);
  }

  // optional int32 vertical_coordinate_num = 2;
  if (has_vertical_coordinate_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vertical_coordinate_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.statistics_common_info)
  return target;
}

int statistics_common_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes horizontal_coordinate = 1;
    if (has_horizontal_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->horizontal_coordinate());
    }

    // optional int32 vertical_coordinate_num = 2;
    if (has_vertical_coordinate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_coordinate_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistics_common_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistics_common_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistics_common_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistics_common_info::MergeFrom(const statistics_common_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_coordinate()) {
      set_horizontal_coordinate(from.horizontal_coordinate());
    }
    if (from.has_vertical_coordinate_num()) {
      set_vertical_coordinate_num(from.vertical_coordinate_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistics_common_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistics_common_info::CopyFrom(const statistics_common_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistics_common_info::IsInitialized() const {

  return true;
}

void statistics_common_info::Swap(statistics_common_info* other) {
  if (other != this) {
    std::swap(horizontal_coordinate_, other->horizontal_coordinate_);
    std::swap(vertical_coordinate_num_, other->vertical_coordinate_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistics_common_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistics_common_info_descriptor_;
  metadata.reflection = statistics_common_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int danger_param_info::kParam1FieldNumber;
const int danger_param_info::kParam2FieldNumber;
#endif  // !_MSC_VER

danger_param_info::danger_param_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.danger_param_info)
}

void danger_param_info::InitAsDefaultInstance() {
}

danger_param_info::danger_param_info(const danger_param_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.danger_param_info)
}

void danger_param_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

danger_param_info::~danger_param_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.danger_param_info)
  SharedDtor();
}

void danger_param_info::SharedDtor() {
  if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param2_;
  }
  if (this != default_instance_) {
  }
}

void danger_param_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* danger_param_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return danger_param_info_descriptor_;
}

const danger_param_info& danger_param_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

danger_param_info* danger_param_info::default_instance_ = NULL;

danger_param_info* danger_param_info::New() const {
  return new danger_param_info;
}

void danger_param_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool danger_param_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.danger_param_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes param1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param2;
        break;
      }

      // optional bytes param2 = 2;
      case 2: {
        if (tag == 18) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.danger_param_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.danger_param_info)
  return false;
#undef DO_
}

void danger_param_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.danger_param_info)
  // optional bytes param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->param1(), output);
  }

  // optional bytes param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.danger_param_info)
}

::google::protobuf::uint8* danger_param_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.danger_param_info)
  // optional bytes param1 = 1;
  if (has_param1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->param1(), target);
  }

  // optional bytes param2 = 2;
  if (has_param2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.danger_param_info)
  return target;
}

int danger_param_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param1());
    }

    // optional bytes param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void danger_param_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const danger_param_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const danger_param_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void danger_param_info::MergeFrom(const danger_param_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void danger_param_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void danger_param_info::CopyFrom(const danger_param_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool danger_param_info::IsInitialized() const {

  return true;
}

void danger_param_info::Swap(danger_param_info* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata danger_param_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = danger_param_info_descriptor_;
  metadata.reflection = danger_param_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int danger_analysis_info::kTypeFieldNumber;
const int danger_analysis_info::kIsexistFieldNumber;
const int danger_analysis_info::kParamlist1FieldNumber;
const int danger_analysis_info::kParamlist2FieldNumber;
const int danger_analysis_info::kParamlist3FieldNumber;
const int danger_analysis_info::kParamlist4FieldNumber;
#endif  // !_MSC_VER

danger_analysis_info::danger_analysis_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.danger_analysis_info)
}

void danger_analysis_info::InitAsDefaultInstance() {
}

danger_analysis_info::danger_analysis_info(const danger_analysis_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.danger_analysis_info)
}

void danger_analysis_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  isexist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

danger_analysis_info::~danger_analysis_info() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.danger_analysis_info)
  SharedDtor();
}

void danger_analysis_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void danger_analysis_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* danger_analysis_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return danger_analysis_info_descriptor_;
}

const danger_analysis_info& danger_analysis_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

danger_analysis_info* danger_analysis_info::default_instance_ = NULL;

danger_analysis_info* danger_analysis_info::New() const {
  return new danger_analysis_info;
}

void danger_analysis_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    isexist_ = 0;
  }
  paramlist1_.Clear();
  paramlist2_.Clear();
  paramlist3_.Clear();
  paramlist4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool danger_analysis_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.danger_analysis_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_user_portrayal.danger_analysis_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ODP_user_portrayal::danger_analysis_type_IsValid(value)) {
            set_type(static_cast< ::ODP_user_portrayal::danger_analysis_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isexist;
        break;
      }

      // optional int32 isexist = 2;
      case 2: {
        if (tag == 16) {
         parse_isexist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isexist_)));
          set_has_isexist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_paramlist1;
        break;
      }

      // repeated .ODP_user_portrayal.danger_param_info paramlist1 = 3;
      case 3: {
        if (tag == 26) {
         parse_paramlist1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paramlist1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_paramlist1;
        if (input->ExpectTag(34)) goto parse_paramlist2;
        break;
      }

      // repeated .ODP_user_portrayal.danger_param_info paramlist2 = 4;
      case 4: {
        if (tag == 34) {
         parse_paramlist2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paramlist2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_paramlist2;
        if (input->ExpectTag(42)) goto parse_paramlist3;
        break;
      }

      // repeated .ODP_user_portrayal.danger_param_info paramlist3 = 5;
      case 5: {
        if (tag == 42) {
         parse_paramlist3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paramlist3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_paramlist3;
        if (input->ExpectTag(50)) goto parse_paramlist4;
        break;
      }

      // repeated .ODP_user_portrayal.danger_param_info paramlist4 = 6;
      case 6: {
        if (tag == 50) {
         parse_paramlist4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paramlist4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_paramlist4;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.danger_analysis_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.danger_analysis_info)
  return false;
#undef DO_
}

void danger_analysis_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.danger_analysis_info)
  // optional .ODP_user_portrayal.danger_analysis_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 isexist = 2;
  if (has_isexist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isexist(), output);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist1 = 3;
  for (int i = 0; i < this->paramlist1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paramlist1(i), output);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist2 = 4;
  for (int i = 0; i < this->paramlist2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->paramlist2(i), output);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist3 = 5;
  for (int i = 0; i < this->paramlist3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->paramlist3(i), output);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist4 = 6;
  for (int i = 0; i < this->paramlist4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->paramlist4(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.danger_analysis_info)
}

::google::protobuf::uint8* danger_analysis_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.danger_analysis_info)
  // optional .ODP_user_portrayal.danger_analysis_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 isexist = 2;
  if (has_isexist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isexist(), target);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist1 = 3;
  for (int i = 0; i < this->paramlist1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paramlist1(i), target);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist2 = 4;
  for (int i = 0; i < this->paramlist2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->paramlist2(i), target);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist3 = 5;
  for (int i = 0; i < this->paramlist3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->paramlist3(i), target);
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist4 = 6;
  for (int i = 0; i < this->paramlist4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->paramlist4(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.danger_analysis_info)
  return target;
}

int danger_analysis_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_user_portrayal.danger_analysis_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 isexist = 2;
    if (has_isexist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isexist());
    }

  }
  // repeated .ODP_user_portrayal.danger_param_info paramlist1 = 3;
  total_size += 1 * this->paramlist1_size();
  for (int i = 0; i < this->paramlist1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paramlist1(i));
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist2 = 4;
  total_size += 1 * this->paramlist2_size();
  for (int i = 0; i < this->paramlist2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paramlist2(i));
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist3 = 5;
  total_size += 1 * this->paramlist3_size();
  for (int i = 0; i < this->paramlist3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paramlist3(i));
  }

  // repeated .ODP_user_portrayal.danger_param_info paramlist4 = 6;
  total_size += 1 * this->paramlist4_size();
  for (int i = 0; i < this->paramlist4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paramlist4(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void danger_analysis_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const danger_analysis_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const danger_analysis_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void danger_analysis_info::MergeFrom(const danger_analysis_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramlist1_.MergeFrom(from.paramlist1_);
  paramlist2_.MergeFrom(from.paramlist2_);
  paramlist3_.MergeFrom(from.paramlist3_);
  paramlist4_.MergeFrom(from.paramlist4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isexist()) {
      set_isexist(from.isexist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void danger_analysis_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void danger_analysis_info::CopyFrom(const danger_analysis_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool danger_analysis_info::IsInitialized() const {

  return true;
}

void danger_analysis_info::Swap(danger_analysis_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isexist_, other->isexist_);
    paramlist1_.Swap(&other->paramlist1_);
    paramlist2_.Swap(&other->paramlist2_);
    paramlist3_.Swap(&other->paramlist3_);
    paramlist4_.Swap(&other->paramlist4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata danger_analysis_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = danger_analysis_info_descriptor_;
  metadata.reflection = danger_analysis_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_action_ask::kTypeFieldNumber;
const int user_action_ask::kPhoneFieldNumber;
const int user_action_ask::kIdcardFieldNumber;
const int user_action_ask::kCurpageFieldNumber;
const int user_action_ask::kPagenumFieldNumber;
const int user_action_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_action_ask::user_action_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.user_action_ask)
}

void user_action_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_action_ask::user_action_ask(const user_action_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.user_action_ask)
}

void user_action_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curpage_ = 0;
  pagenum_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_action_ask::~user_action_ask() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.user_action_ask)
  SharedDtor();
}

void user_action_ask::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_action_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_action_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_action_ask_descriptor_;
}

const user_action_ask& user_action_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

user_action_ask* user_action_ask::default_instance_ = NULL;

user_action_ask* user_action_ask::New() const {
  return new user_action_ask;
}

void user_action_ask::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 1;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_idcard()) {
      if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idcard_->clear();
      }
    }
    curpage_ = 0;
    pagenum_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_action_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.user_action_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_user_portrayal.action_ask_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ODP_user_portrayal::action_ask_type_IsValid(value)) {
            set_type(static_cast< ::ODP_user_portrayal::action_ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional bytes phone = 2;
      case 2: {
        if (tag == 18) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_idcard;
        break;
      }

      // optional bytes idcard = 3;
      case 3: {
        if (tag == 26) {
         parse_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_idcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curpage;
        break;
      }

      // optional int32 curpage = 4;
      case 4: {
        if (tag == 32) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pagenum;
        break;
      }

      // optional int32 pagenum = 5;
      case 5: {
        if (tag == 40) {
         parse_pagenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.user_action_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.user_action_ask)
  return false;
#undef DO_
}

void user_action_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.user_action_ask)
  // optional .ODP_user_portrayal.action_ask_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone(), output);
  }

  // optional bytes idcard = 3;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->idcard(), output);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curpage(), output);
  }

  // optional int32 pagenum = 5;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pagenum(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.user_action_ask)
}

::google::protobuf::uint8* user_action_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.user_action_ask)
  // optional .ODP_user_portrayal.action_ask_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes phone = 2;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone(), target);
  }

  // optional bytes idcard = 3;
  if (has_idcard()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->idcard(), target);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curpage(), target);
  }

  // optional int32 pagenum = 5;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pagenum(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.user_action_ask)
  return target;
}

int user_action_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_user_portrayal.action_ask_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }

    // optional bytes idcard = 3;
    if (has_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->idcard());
    }

    // optional int32 curpage = 4;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpage());
    }

    // optional int32 pagenum = 5;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagenum());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_action_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_action_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_action_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_action_ask::MergeFrom(const user_action_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_idcard()) {
      set_idcard(from.idcard());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_action_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_action_ask::CopyFrom(const user_action_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_action_ask::IsInitialized() const {

  return true;
}

void user_action_ask::Swap(user_action_ask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(phone_, other->phone_);
    std::swap(idcard_, other->idcard_);
    std::swap(curpage_, other->curpage_);
    std::swap(pagenum_, other->pagenum_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_action_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_action_ask_descriptor_;
  metadata.reflection = user_action_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int location_info_ans::kLocationListFieldNumber;
const int location_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

location_info_ans::location_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.location_info_ans)
}

void location_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

location_info_ans::location_info_ans(const location_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.location_info_ans)
}

void location_info_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

location_info_ans::~location_info_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.location_info_ans)
  SharedDtor();
}

void location_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void location_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* location_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return location_info_ans_descriptor_;
}

const location_info_ans& location_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

location_info_ans* location_info_ans::default_instance_ = NULL;

location_info_ans* location_info_ans::New() const {
  return new location_info_ans;
}

void location_info_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  location_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool location_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.location_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_user_portrayal.location_info location_list = 1;
      case 1: {
        if (tag == 10) {
         parse_location_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_location_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_location_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.location_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.location_info_ans)
  return false;
#undef DO_
}

void location_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.location_info_ans)
  // repeated .ODP_user_portrayal.location_info location_list = 1;
  for (int i = 0; i < this->location_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location_list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.location_info_ans)
}

::google::protobuf::uint8* location_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.location_info_ans)
  // repeated .ODP_user_portrayal.location_info location_list = 1;
  for (int i = 0; i < this->location_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location_list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.location_info_ans)
  return target;
}

int location_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_user_portrayal.location_info location_list = 1;
  total_size += 1 * this->location_list_size();
  for (int i = 0; i < this->location_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->location_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void location_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const location_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const location_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void location_info_ans::MergeFrom(const location_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  location_list_.MergeFrom(from.location_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void location_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_info_ans::CopyFrom(const location_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_info_ans::IsInitialized() const {

  return true;
}

void location_info_ans::Swap(location_info_ans* other) {
  if (other != this) {
    location_list_.Swap(&other->location_list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata location_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = location_info_ans_descriptor_;
  metadata.reflection = location_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_version_info_ans::kVersionListFieldNumber;
const int user_version_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_version_info_ans::user_version_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.user_version_info_ans)
}

void user_version_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_version_info_ans::user_version_info_ans(const user_version_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.user_version_info_ans)
}

void user_version_info_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_version_info_ans::~user_version_info_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.user_version_info_ans)
  SharedDtor();
}

void user_version_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void user_version_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_version_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_version_info_ans_descriptor_;
}

const user_version_info_ans& user_version_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

user_version_info_ans* user_version_info_ans::default_instance_ = NULL;

user_version_info_ans* user_version_info_ans::New() const {
  return new user_version_info_ans;
}

void user_version_info_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_version_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.user_version_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_user_portrayal.version_info version_list = 1;
      case 1: {
        if (tag == 10) {
         parse_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_version_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.user_version_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.user_version_info_ans)
  return false;
#undef DO_
}

void user_version_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.user_version_info_ans)
  // repeated .ODP_user_portrayal.version_info version_list = 1;
  for (int i = 0; i < this->version_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->version_list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.user_version_info_ans)
}

::google::protobuf::uint8* user_version_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.user_version_info_ans)
  // repeated .ODP_user_portrayal.version_info version_list = 1;
  for (int i = 0; i < this->version_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->version_list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.user_version_info_ans)
  return target;
}

int user_version_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_user_portrayal.version_info version_list = 1;
  total_size += 1 * this->version_list_size();
  for (int i = 0; i < this->version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->version_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_version_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_version_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_version_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_version_info_ans::MergeFrom(const user_version_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_list_.MergeFrom(from.version_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_version_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_version_info_ans::CopyFrom(const user_version_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_version_info_ans::IsInitialized() const {

  return true;
}

void user_version_info_ans::Swap(user_version_info_ans* other) {
  if (other != this) {
    version_list_.Swap(&other->version_list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_version_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_version_info_ans_descriptor_;
  metadata.reflection = user_version_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_analysis_ans::kLoginNumFieldNumber;
const int login_analysis_ans::kLoginDaysFieldNumber;
const int login_analysis_ans::kLoginFrequencyFieldNumber;
const int login_analysis_ans::kLastLoginTimeFieldNumber;
const int login_analysis_ans::kFirstLoginTimeFieldNumber;
const int login_analysis_ans::kSilentDaysFieldNumber;
const int login_analysis_ans::kWeekMostLoginFieldNumber;
const int login_analysis_ans::kDayMostActionFieldNumber;
const int login_analysis_ans::kWeekInfoFieldNumber;
const int login_analysis_ans::kDayInfoFieldNumber;
const int login_analysis_ans::kResultFieldNumber;
#endif  // !_MSC_VER

login_analysis_ans::login_analysis_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.login_analysis_ans)
}

void login_analysis_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

login_analysis_ans::login_analysis_ans(const login_analysis_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.login_analysis_ans)
}

void login_analysis_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_num_ = 0;
  login_days_ = 0;
  login_frequency_ = 0;
  last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  silent_days_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_analysis_ans::~login_analysis_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.login_analysis_ans)
  SharedDtor();
}

void login_analysis_ans::SharedDtor() {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (first_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_login_time_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void login_analysis_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_analysis_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_analysis_ans_descriptor_;
}

const login_analysis_ans& login_analysis_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

login_analysis_ans* login_analysis_ans::default_instance_ = NULL;

login_analysis_ans* login_analysis_ans::New() const {
  return new login_analysis_ans;
}

void login_analysis_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<login_analysis_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(login_num_, login_days_);
    ZR_(login_frequency_, silent_days_);
    if (has_last_login_time()) {
      if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_login_time_->clear();
      }
    }
    if (has_first_login_time()) {
      if (first_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_login_time_->clear();
      }
    }
  }
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  week_most_login_.Clear();
  day_most_action_.Clear();
  week_info_.Clear();
  day_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_analysis_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.login_analysis_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 login_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_num_)));
          set_has_login_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_days;
        break;
      }

      // optional int32 login_days = 2;
      case 2: {
        if (tag == 16) {
         parse_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_days_)));
          set_has_login_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_login_frequency;
        break;
      }

      // optional float login_frequency = 3;
      case 3: {
        if (tag == 29) {
         parse_login_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &login_frequency_)));
          set_has_login_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_login_time;
        break;
      }

      // optional bytes last_login_time = 4;
      case 4: {
        if (tag == 34) {
         parse_last_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_login_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_first_login_time;
        break;
      }

      // optional bytes first_login_time = 5;
      case 5: {
        if (tag == 42) {
         parse_first_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_login_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_silent_days;
        break;
      }

      // optional int32 silent_days = 6;
      case 6: {
        if (tag == 48) {
         parse_silent_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silent_days_)));
          set_has_silent_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_week_most_login;
        break;
      }

      // repeated bytes week_most_login = 7;
      case 7: {
        if (tag == 58) {
         parse_week_most_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_week_most_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_week_most_login;
        if (input->ExpectTag(66)) goto parse_day_most_action;
        break;
      }

      // repeated bytes day_most_action = 8;
      case 8: {
        if (tag == 66) {
         parse_day_most_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_day_most_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_day_most_action;
        if (input->ExpectTag(74)) goto parse_week_info;
        break;
      }

      // repeated .ODP_user_portrayal.statistics_common_info week_info = 9;
      case 9: {
        if (tag == 74) {
         parse_week_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_week_info;
        if (input->ExpectTag(82)) goto parse_day_info;
        break;
      }

      // repeated .ODP_user_portrayal.statistics_common_info day_info = 10;
      case 10: {
        if (tag == 82) {
         parse_day_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_day_info;
        if (input->ExpectTag(90)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 11;
      case 11: {
        if (tag == 90) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.login_analysis_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.login_analysis_ans)
  return false;
#undef DO_
}

void login_analysis_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.login_analysis_ans)
  // optional int32 login_num = 1;
  if (has_login_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->login_num(), output);
  }

  // optional int32 login_days = 2;
  if (has_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->login_days(), output);
  }

  // optional float login_frequency = 3;
  if (has_login_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->login_frequency(), output);
  }

  // optional bytes last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->last_login_time(), output);
  }

  // optional bytes first_login_time = 5;
  if (has_first_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->first_login_time(), output);
  }

  // optional int32 silent_days = 6;
  if (has_silent_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->silent_days(), output);
  }

  // repeated bytes week_most_login = 7;
  for (int i = 0; i < this->week_most_login_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->week_most_login(i), output);
  }

  // repeated bytes day_most_action = 8;
  for (int i = 0; i < this->day_most_action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->day_most_action(i), output);
  }

  // repeated .ODP_user_portrayal.statistics_common_info week_info = 9;
  for (int i = 0; i < this->week_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->week_info(i), output);
  }

  // repeated .ODP_user_portrayal.statistics_common_info day_info = 10;
  for (int i = 0; i < this->day_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->day_info(i), output);
  }

  // optional .common.result_info result = 11;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.login_analysis_ans)
}

::google::protobuf::uint8* login_analysis_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.login_analysis_ans)
  // optional int32 login_num = 1;
  if (has_login_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->login_num(), target);
  }

  // optional int32 login_days = 2;
  if (has_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->login_days(), target);
  }

  // optional float login_frequency = 3;
  if (has_login_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->login_frequency(), target);
  }

  // optional bytes last_login_time = 4;
  if (has_last_login_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->last_login_time(), target);
  }

  // optional bytes first_login_time = 5;
  if (has_first_login_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->first_login_time(), target);
  }

  // optional int32 silent_days = 6;
  if (has_silent_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->silent_days(), target);
  }

  // repeated bytes week_most_login = 7;
  for (int i = 0; i < this->week_most_login_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->week_most_login(i), target);
  }

  // repeated bytes day_most_action = 8;
  for (int i = 0; i < this->day_most_action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->day_most_action(i), target);
  }

  // repeated .ODP_user_portrayal.statistics_common_info week_info = 9;
  for (int i = 0; i < this->week_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->week_info(i), target);
  }

  // repeated .ODP_user_portrayal.statistics_common_info day_info = 10;
  for (int i = 0; i < this->day_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->day_info(i), target);
  }

  // optional .common.result_info result = 11;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.login_analysis_ans)
  return target;
}

int login_analysis_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 login_num = 1;
    if (has_login_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_num());
    }

    // optional int32 login_days = 2;
    if (has_login_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_days());
    }

    // optional float login_frequency = 3;
    if (has_login_frequency()) {
      total_size += 1 + 4;
    }

    // optional bytes last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_login_time());
    }

    // optional bytes first_login_time = 5;
    if (has_first_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_login_time());
    }

    // optional int32 silent_days = 6;
    if (has_silent_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silent_days());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .common.result_info result = 11;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated bytes week_most_login = 7;
  total_size += 1 * this->week_most_login_size();
  for (int i = 0; i < this->week_most_login_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->week_most_login(i));
  }

  // repeated bytes day_most_action = 8;
  total_size += 1 * this->day_most_action_size();
  for (int i = 0; i < this->day_most_action_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->day_most_action(i));
  }

  // repeated .ODP_user_portrayal.statistics_common_info week_info = 9;
  total_size += 1 * this->week_info_size();
  for (int i = 0; i < this->week_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week_info(i));
  }

  // repeated .ODP_user_portrayal.statistics_common_info day_info = 10;
  total_size += 1 * this->day_info_size();
  for (int i = 0; i < this->day_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_analysis_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_analysis_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_analysis_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_analysis_ans::MergeFrom(const login_analysis_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  week_most_login_.MergeFrom(from.week_most_login_);
  day_most_action_.MergeFrom(from.day_most_action_);
  week_info_.MergeFrom(from.week_info_);
  day_info_.MergeFrom(from.day_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_num()) {
      set_login_num(from.login_num());
    }
    if (from.has_login_days()) {
      set_login_days(from.login_days());
    }
    if (from.has_login_frequency()) {
      set_login_frequency(from.login_frequency());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_first_login_time()) {
      set_first_login_time(from.first_login_time());
    }
    if (from.has_silent_days()) {
      set_silent_days(from.silent_days());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_analysis_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_analysis_ans::CopyFrom(const login_analysis_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_analysis_ans::IsInitialized() const {

  return true;
}

void login_analysis_ans::Swap(login_analysis_ans* other) {
  if (other != this) {
    std::swap(login_num_, other->login_num_);
    std::swap(login_days_, other->login_days_);
    std::swap(login_frequency_, other->login_frequency_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(first_login_time_, other->first_login_time_);
    std::swap(silent_days_, other->silent_days_);
    week_most_login_.Swap(&other->week_most_login_);
    day_most_action_.Swap(&other->day_most_action_);
    week_info_.Swap(&other->week_info_);
    day_info_.Swap(&other->day_info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_analysis_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_analysis_ans_descriptor_;
  metadata.reflection = login_analysis_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int business_predilection_ans::kInvestIntervalFieldNumber;
const int business_predilection_ans::kInvestRateFieldNumber;
const int business_predilection_ans::kTimeTypeFieldNumber;
const int business_predilection_ans::kAmountIntervalFieldNumber;
const int business_predilection_ans::kGaranteeIntervalFieldNumber;
const int business_predilection_ans::kGaranteeRateFieldNumber;
const int business_predilection_ans::kGaranteeTimeTypeFieldNumber;
const int business_predilection_ans::kGaranteeAmountIntervalFieldNumber;
const int business_predilection_ans::kJdIntervalFieldNumber;
const int business_predilection_ans::kJdRateFieldNumber;
const int business_predilection_ans::kJdTimeTypeFieldNumber;
const int business_predilection_ans::kJdAmountIntervalFieldNumber;
const int business_predilection_ans::kLoanIntervalFieldNumber;
const int business_predilection_ans::kLoanRateFieldNumber;
const int business_predilection_ans::kLoanTimeTypeFieldNumber;
const int business_predilection_ans::kLoanAmountIntervalFieldNumber;
const int business_predilection_ans::kResultFieldNumber;
#endif  // !_MSC_VER

business_predilection_ans::business_predilection_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.business_predilection_ans)
}

void business_predilection_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

business_predilection_ans::business_predilection_ans(const business_predilection_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.business_predilection_ans)
}

void business_predilection_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invest_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invest_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  garantee_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  garantee_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  garantee_time_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  garantee_amount_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jd_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jd_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jd_time_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jd_amount_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loan_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loan_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loan_time_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loan_amount_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

business_predilection_ans::~business_predilection_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.business_predilection_ans)
  SharedDtor();
}

void business_predilection_ans::SharedDtor() {
  if (invest_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invest_interval_;
  }
  if (invest_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invest_rate_;
  }
  if (time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_type_;
  }
  if (amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete amount_interval_;
  }
  if (garantee_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete garantee_interval_;
  }
  if (garantee_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete garantee_rate_;
  }
  if (garantee_time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete garantee_time_type_;
  }
  if (garantee_amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete garantee_amount_interval_;
  }
  if (jd_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jd_interval_;
  }
  if (jd_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jd_rate_;
  }
  if (jd_time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jd_time_type_;
  }
  if (jd_amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jd_amount_interval_;
  }
  if (loan_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loan_interval_;
  }
  if (loan_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loan_rate_;
  }
  if (loan_time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loan_time_type_;
  }
  if (loan_amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loan_amount_interval_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void business_predilection_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* business_predilection_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return business_predilection_ans_descriptor_;
}

const business_predilection_ans& business_predilection_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

business_predilection_ans* business_predilection_ans::default_instance_ = NULL;

business_predilection_ans* business_predilection_ans::New() const {
  return new business_predilection_ans;
}

void business_predilection_ans::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_invest_interval()) {
      if (invest_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invest_interval_->clear();
      }
    }
    if (has_invest_rate()) {
      if (invest_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invest_rate_->clear();
      }
    }
    if (has_time_type()) {
      if (time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_type_->clear();
      }
    }
    if (has_amount_interval()) {
      if (amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        amount_interval_->clear();
      }
    }
    if (has_garantee_interval()) {
      if (garantee_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        garantee_interval_->clear();
      }
    }
    if (has_garantee_rate()) {
      if (garantee_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        garantee_rate_->clear();
      }
    }
    if (has_garantee_time_type()) {
      if (garantee_time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        garantee_time_type_->clear();
      }
    }
    if (has_garantee_amount_interval()) {
      if (garantee_amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        garantee_amount_interval_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_jd_interval()) {
      if (jd_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jd_interval_->clear();
      }
    }
    if (has_jd_rate()) {
      if (jd_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jd_rate_->clear();
      }
    }
    if (has_jd_time_type()) {
      if (jd_time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jd_time_type_->clear();
      }
    }
    if (has_jd_amount_interval()) {
      if (jd_amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jd_amount_interval_->clear();
      }
    }
    if (has_loan_interval()) {
      if (loan_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loan_interval_->clear();
      }
    }
    if (has_loan_rate()) {
      if (loan_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loan_rate_->clear();
      }
    }
    if (has_loan_time_type()) {
      if (loan_time_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loan_time_type_->clear();
      }
    }
    if (has_loan_amount_interval()) {
      if (loan_amount_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loan_amount_interval_->clear();
      }
    }
  }
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool business_predilection_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.business_predilection_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes invest_interval = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invest_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invest_rate;
        break;
      }

      // optional bytes invest_rate = 2;
      case 2: {
        if (tag == 18) {
         parse_invest_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invest_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time_type;
        break;
      }

      // optional bytes time_type = 3;
      case 3: {
        if (tag == 26) {
         parse_time_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_amount_interval;
        break;
      }

      // optional bytes amount_interval = 4;
      case 4: {
        if (tag == 34) {
         parse_amount_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_amount_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_garantee_interval;
        break;
      }

      // optional bytes garantee_interval = 5;
      case 5: {
        if (tag == 42) {
         parse_garantee_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_garantee_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_garantee_rate;
        break;
      }

      // optional bytes garantee_rate = 6;
      case 6: {
        if (tag == 50) {
         parse_garantee_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_garantee_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_garantee_time_type;
        break;
      }

      // optional bytes garantee_time_type = 7;
      case 7: {
        if (tag == 58) {
         parse_garantee_time_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_garantee_time_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_garantee_amount_interval;
        break;
      }

      // optional bytes garantee_amount_interval = 8;
      case 8: {
        if (tag == 66) {
         parse_garantee_amount_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_garantee_amount_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_jd_interval;
        break;
      }

      // optional bytes jd_interval = 9;
      case 9: {
        if (tag == 74) {
         parse_jd_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jd_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_jd_rate;
        break;
      }

      // optional bytes jd_rate = 10;
      case 10: {
        if (tag == 82) {
         parse_jd_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jd_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_jd_time_type;
        break;
      }

      // optional bytes jd_time_type = 11;
      case 11: {
        if (tag == 90) {
         parse_jd_time_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jd_time_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_jd_amount_interval;
        break;
      }

      // optional bytes jd_amount_interval = 12;
      case 12: {
        if (tag == 98) {
         parse_jd_amount_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jd_amount_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loan_interval;
        break;
      }

      // optional bytes loan_interval = 13;
      case 13: {
        if (tag == 106) {
         parse_loan_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loan_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loan_rate;
        break;
      }

      // optional bytes loan_rate = 14;
      case 14: {
        if (tag == 114) {
         parse_loan_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loan_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loan_time_type;
        break;
      }

      // optional bytes loan_time_type = 15;
      case 15: {
        if (tag == 122) {
         parse_loan_time_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loan_time_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loan_amount_interval;
        break;
      }

      // optional bytes loan_amount_interval = 16;
      case 16: {
        if (tag == 130) {
         parse_loan_amount_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loan_amount_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 17;
      case 17: {
        if (tag == 138) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.business_predilection_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.business_predilection_ans)
  return false;
#undef DO_
}

void business_predilection_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.business_predilection_ans)
  // optional bytes invest_interval = 1;
  if (has_invest_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->invest_interval(), output);
  }

  // optional bytes invest_rate = 2;
  if (has_invest_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->invest_rate(), output);
  }

  // optional bytes time_type = 3;
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->time_type(), output);
  }

  // optional bytes amount_interval = 4;
  if (has_amount_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->amount_interval(), output);
  }

  // optional bytes garantee_interval = 5;
  if (has_garantee_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->garantee_interval(), output);
  }

  // optional bytes garantee_rate = 6;
  if (has_garantee_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->garantee_rate(), output);
  }

  // optional bytes garantee_time_type = 7;
  if (has_garantee_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->garantee_time_type(), output);
  }

  // optional bytes garantee_amount_interval = 8;
  if (has_garantee_amount_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->garantee_amount_interval(), output);
  }

  // optional bytes jd_interval = 9;
  if (has_jd_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->jd_interval(), output);
  }

  // optional bytes jd_rate = 10;
  if (has_jd_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->jd_rate(), output);
  }

  // optional bytes jd_time_type = 11;
  if (has_jd_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->jd_time_type(), output);
  }

  // optional bytes jd_amount_interval = 12;
  if (has_jd_amount_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->jd_amount_interval(), output);
  }

  // optional bytes loan_interval = 13;
  if (has_loan_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->loan_interval(), output);
  }

  // optional bytes loan_rate = 14;
  if (has_loan_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->loan_rate(), output);
  }

  // optional bytes loan_time_type = 15;
  if (has_loan_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->loan_time_type(), output);
  }

  // optional bytes loan_amount_interval = 16;
  if (has_loan_amount_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->loan_amount_interval(), output);
  }

  // optional .common.result_info result = 17;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.business_predilection_ans)
}

::google::protobuf::uint8* business_predilection_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.business_predilection_ans)
  // optional bytes invest_interval = 1;
  if (has_invest_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->invest_interval(), target);
  }

  // optional bytes invest_rate = 2;
  if (has_invest_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->invest_rate(), target);
  }

  // optional bytes time_type = 3;
  if (has_time_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->time_type(), target);
  }

  // optional bytes amount_interval = 4;
  if (has_amount_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->amount_interval(), target);
  }

  // optional bytes garantee_interval = 5;
  if (has_garantee_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->garantee_interval(), target);
  }

  // optional bytes garantee_rate = 6;
  if (has_garantee_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->garantee_rate(), target);
  }

  // optional bytes garantee_time_type = 7;
  if (has_garantee_time_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->garantee_time_type(), target);
  }

  // optional bytes garantee_amount_interval = 8;
  if (has_garantee_amount_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->garantee_amount_interval(), target);
  }

  // optional bytes jd_interval = 9;
  if (has_jd_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->jd_interval(), target);
  }

  // optional bytes jd_rate = 10;
  if (has_jd_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->jd_rate(), target);
  }

  // optional bytes jd_time_type = 11;
  if (has_jd_time_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->jd_time_type(), target);
  }

  // optional bytes jd_amount_interval = 12;
  if (has_jd_amount_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->jd_amount_interval(), target);
  }

  // optional bytes loan_interval = 13;
  if (has_loan_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->loan_interval(), target);
  }

  // optional bytes loan_rate = 14;
  if (has_loan_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->loan_rate(), target);
  }

  // optional bytes loan_time_type = 15;
  if (has_loan_time_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->loan_time_type(), target);
  }

  // optional bytes loan_amount_interval = 16;
  if (has_loan_amount_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->loan_amount_interval(), target);
  }

  // optional .common.result_info result = 17;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.business_predilection_ans)
  return target;
}

int business_predilection_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes invest_interval = 1;
    if (has_invest_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invest_interval());
    }

    // optional bytes invest_rate = 2;
    if (has_invest_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invest_rate());
    }

    // optional bytes time_type = 3;
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->time_type());
    }

    // optional bytes amount_interval = 4;
    if (has_amount_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->amount_interval());
    }

    // optional bytes garantee_interval = 5;
    if (has_garantee_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->garantee_interval());
    }

    // optional bytes garantee_rate = 6;
    if (has_garantee_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->garantee_rate());
    }

    // optional bytes garantee_time_type = 7;
    if (has_garantee_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->garantee_time_type());
    }

    // optional bytes garantee_amount_interval = 8;
    if (has_garantee_amount_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->garantee_amount_interval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes jd_interval = 9;
    if (has_jd_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jd_interval());
    }

    // optional bytes jd_rate = 10;
    if (has_jd_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jd_rate());
    }

    // optional bytes jd_time_type = 11;
    if (has_jd_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jd_time_type());
    }

    // optional bytes jd_amount_interval = 12;
    if (has_jd_amount_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jd_amount_interval());
    }

    // optional bytes loan_interval = 13;
    if (has_loan_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loan_interval());
    }

    // optional bytes loan_rate = 14;
    if (has_loan_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loan_rate());
    }

    // optional bytes loan_time_type = 15;
    if (has_loan_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loan_time_type());
    }

    // optional bytes loan_amount_interval = 16;
    if (has_loan_amount_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loan_amount_interval());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .common.result_info result = 17;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void business_predilection_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const business_predilection_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const business_predilection_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void business_predilection_ans::MergeFrom(const business_predilection_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invest_interval()) {
      set_invest_interval(from.invest_interval());
    }
    if (from.has_invest_rate()) {
      set_invest_rate(from.invest_rate());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
    if (from.has_amount_interval()) {
      set_amount_interval(from.amount_interval());
    }
    if (from.has_garantee_interval()) {
      set_garantee_interval(from.garantee_interval());
    }
    if (from.has_garantee_rate()) {
      set_garantee_rate(from.garantee_rate());
    }
    if (from.has_garantee_time_type()) {
      set_garantee_time_type(from.garantee_time_type());
    }
    if (from.has_garantee_amount_interval()) {
      set_garantee_amount_interval(from.garantee_amount_interval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jd_interval()) {
      set_jd_interval(from.jd_interval());
    }
    if (from.has_jd_rate()) {
      set_jd_rate(from.jd_rate());
    }
    if (from.has_jd_time_type()) {
      set_jd_time_type(from.jd_time_type());
    }
    if (from.has_jd_amount_interval()) {
      set_jd_amount_interval(from.jd_amount_interval());
    }
    if (from.has_loan_interval()) {
      set_loan_interval(from.loan_interval());
    }
    if (from.has_loan_rate()) {
      set_loan_rate(from.loan_rate());
    }
    if (from.has_loan_time_type()) {
      set_loan_time_type(from.loan_time_type());
    }
    if (from.has_loan_amount_interval()) {
      set_loan_amount_interval(from.loan_amount_interval());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void business_predilection_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void business_predilection_ans::CopyFrom(const business_predilection_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool business_predilection_ans::IsInitialized() const {

  return true;
}

void business_predilection_ans::Swap(business_predilection_ans* other) {
  if (other != this) {
    std::swap(invest_interval_, other->invest_interval_);
    std::swap(invest_rate_, other->invest_rate_);
    std::swap(time_type_, other->time_type_);
    std::swap(amount_interval_, other->amount_interval_);
    std::swap(garantee_interval_, other->garantee_interval_);
    std::swap(garantee_rate_, other->garantee_rate_);
    std::swap(garantee_time_type_, other->garantee_time_type_);
    std::swap(garantee_amount_interval_, other->garantee_amount_interval_);
    std::swap(jd_interval_, other->jd_interval_);
    std::swap(jd_rate_, other->jd_rate_);
    std::swap(jd_time_type_, other->jd_time_type_);
    std::swap(jd_amount_interval_, other->jd_amount_interval_);
    std::swap(loan_interval_, other->loan_interval_);
    std::swap(loan_rate_, other->loan_rate_);
    std::swap(loan_time_type_, other->loan_time_type_);
    std::swap(loan_amount_interval_, other->loan_amount_interval_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata business_predilection_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = business_predilection_ans_descriptor_;
  metadata.reflection = business_predilection_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auth_info_ans::kPhoneAuthFieldNumber;
const int auth_info_ans::kRealNameAuthFieldNumber;
const int auth_info_ans::kLoanAuthFieldNumber;
const int auth_info_ans::kGaranteeAuthFieldNumber;
const int auth_info_ans::kBigGaranteeFieldNumber;
const int auth_info_ans::kMicroGaranteeFieldNumber;
const int auth_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

auth_info_ans::auth_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.auth_info_ans)
}

void auth_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

auth_info_ans::auth_info_ans(const auth_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.auth_info_ans)
}

void auth_info_ans::SharedCtor() {
  _cached_size_ = 0;
  phone_auth_ = 0;
  real_name_auth_ = 0;
  loan_auth_ = 0;
  garantee_auth_ = 0;
  big_garantee_ = 0;
  micro_garantee_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auth_info_ans::~auth_info_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.auth_info_ans)
  SharedDtor();
}

void auth_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void auth_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auth_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auth_info_ans_descriptor_;
}

const auth_info_ans& auth_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

auth_info_ans* auth_info_ans::default_instance_ = NULL;

auth_info_ans* auth_info_ans::New() const {
  return new auth_info_ans;
}

void auth_info_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<auth_info_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(phone_auth_, micro_garantee_);
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auth_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.auth_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 phone_auth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phone_auth_)));
          set_has_phone_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_real_name_auth;
        break;
      }

      // optional int32 real_name_auth = 2;
      case 2: {
        if (tag == 16) {
         parse_real_name_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_name_auth_)));
          set_has_real_name_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loan_auth;
        break;
      }

      // optional int32 loan_auth = 3;
      case 3: {
        if (tag == 24) {
         parse_loan_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loan_auth_)));
          set_has_loan_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_garantee_auth;
        break;
      }

      // optional int32 garantee_auth = 4;
      case 4: {
        if (tag == 32) {
         parse_garantee_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &garantee_auth_)));
          set_has_garantee_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_big_garantee;
        break;
      }

      // optional int32 big_garantee = 5;
      case 5: {
        if (tag == 40) {
         parse_big_garantee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &big_garantee_)));
          set_has_big_garantee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_micro_garantee;
        break;
      }

      // optional int32 micro_garantee = 6;
      case 6: {
        if (tag == 48) {
         parse_micro_garantee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &micro_garantee_)));
          set_has_micro_garantee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 7;
      case 7: {
        if (tag == 58) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.auth_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.auth_info_ans)
  return false;
#undef DO_
}

void auth_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.auth_info_ans)
  // optional int32 phone_auth = 1;
  if (has_phone_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phone_auth(), output);
  }

  // optional int32 real_name_auth = 2;
  if (has_real_name_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->real_name_auth(), output);
  }

  // optional int32 loan_auth = 3;
  if (has_loan_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loan_auth(), output);
  }

  // optional int32 garantee_auth = 4;
  if (has_garantee_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->garantee_auth(), output);
  }

  // optional int32 big_garantee = 5;
  if (has_big_garantee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->big_garantee(), output);
  }

  // optional int32 micro_garantee = 6;
  if (has_micro_garantee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->micro_garantee(), output);
  }

  // optional .common.result_info result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.auth_info_ans)
}

::google::protobuf::uint8* auth_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.auth_info_ans)
  // optional int32 phone_auth = 1;
  if (has_phone_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phone_auth(), target);
  }

  // optional int32 real_name_auth = 2;
  if (has_real_name_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->real_name_auth(), target);
  }

  // optional int32 loan_auth = 3;
  if (has_loan_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loan_auth(), target);
  }

  // optional int32 garantee_auth = 4;
  if (has_garantee_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->garantee_auth(), target);
  }

  // optional int32 big_garantee = 5;
  if (has_big_garantee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->big_garantee(), target);
  }

  // optional int32 micro_garantee = 6;
  if (has_micro_garantee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->micro_garantee(), target);
  }

  // optional .common.result_info result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.auth_info_ans)
  return target;
}

int auth_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 phone_auth = 1;
    if (has_phone_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phone_auth());
    }

    // optional int32 real_name_auth = 2;
    if (has_real_name_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_name_auth());
    }

    // optional int32 loan_auth = 3;
    if (has_loan_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loan_auth());
    }

    // optional int32 garantee_auth = 4;
    if (has_garantee_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->garantee_auth());
    }

    // optional int32 big_garantee = 5;
    if (has_big_garantee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->big_garantee());
    }

    // optional int32 micro_garantee = 6;
    if (has_micro_garantee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->micro_garantee());
    }

    // optional .common.result_info result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auth_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auth_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auth_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auth_info_ans::MergeFrom(const auth_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_auth()) {
      set_phone_auth(from.phone_auth());
    }
    if (from.has_real_name_auth()) {
      set_real_name_auth(from.real_name_auth());
    }
    if (from.has_loan_auth()) {
      set_loan_auth(from.loan_auth());
    }
    if (from.has_garantee_auth()) {
      set_garantee_auth(from.garantee_auth());
    }
    if (from.has_big_garantee()) {
      set_big_garantee(from.big_garantee());
    }
    if (from.has_micro_garantee()) {
      set_micro_garantee(from.micro_garantee());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auth_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auth_info_ans::CopyFrom(const auth_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auth_info_ans::IsInitialized() const {

  return true;
}

void auth_info_ans::Swap(auth_info_ans* other) {
  if (other != this) {
    std::swap(phone_auth_, other->phone_auth_);
    std::swap(real_name_auth_, other->real_name_auth_);
    std::swap(loan_auth_, other->loan_auth_);
    std::swap(garantee_auth_, other->garantee_auth_);
    std::swap(big_garantee_, other->big_garantee_);
    std::swap(micro_garantee_, other->micro_garantee_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auth_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auth_info_ans_descriptor_;
  metadata.reflection = auth_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int amount_info_ans::kLoanAmountFieldNumber;
const int amount_info_ans::kLoanManualAmountFieldNumber;
const int amount_info_ans::kLoanAwardAmountFieldNumber;
const int amount_info_ans::kLoanUniteAmountFieldNumber;
const int amount_info_ans::kGaranteeAmountFieldNumber;
const int amount_info_ans::kGaranteeManualAmountFieldNumber;
const int amount_info_ans::kGaranteeAwardAmountFieldNumber;
const int amount_info_ans::kGaranteeUniteAmountFieldNumber;
const int amount_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

amount_info_ans::amount_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.amount_info_ans)
}

void amount_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

amount_info_ans::amount_info_ans(const amount_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.amount_info_ans)
}

void amount_info_ans::SharedCtor() {
  _cached_size_ = 0;
  loan_amount_ = 0;
  loan_manual_amount_ = 0;
  loan_award_amount_ = 0;
  loan_unite_amount_ = 0;
  garantee_amount_ = 0;
  garantee_manual_amount_ = 0;
  garantee_award_amount_ = 0;
  garantee_unite_amount_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

amount_info_ans::~amount_info_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.amount_info_ans)
  SharedDtor();
}

void amount_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void amount_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* amount_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return amount_info_ans_descriptor_;
}

const amount_info_ans& amount_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

amount_info_ans* amount_info_ans::default_instance_ = NULL;

amount_info_ans* amount_info_ans::New() const {
  return new amount_info_ans;
}

void amount_info_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<amount_info_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(loan_amount_, garantee_unite_amount_);
  }
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool amount_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.amount_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double loan_amount = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loan_amount_)));
          set_has_loan_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_loan_manual_amount;
        break;
      }

      // optional double loan_manual_amount = 2;
      case 2: {
        if (tag == 17) {
         parse_loan_manual_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loan_manual_amount_)));
          set_has_loan_manual_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_loan_award_amount;
        break;
      }

      // optional double loan_award_amount = 3;
      case 3: {
        if (tag == 25) {
         parse_loan_award_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loan_award_amount_)));
          set_has_loan_award_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_loan_unite_amount;
        break;
      }

      // optional double loan_unite_amount = 4;
      case 4: {
        if (tag == 33) {
         parse_loan_unite_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loan_unite_amount_)));
          set_has_loan_unite_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_garantee_amount;
        break;
      }

      // optional double garantee_amount = 5;
      case 5: {
        if (tag == 41) {
         parse_garantee_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &garantee_amount_)));
          set_has_garantee_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_garantee_manual_amount;
        break;
      }

      // optional double garantee_manual_amount = 6;
      case 6: {
        if (tag == 49) {
         parse_garantee_manual_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &garantee_manual_amount_)));
          set_has_garantee_manual_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_garantee_award_amount;
        break;
      }

      // optional double garantee_award_amount = 7;
      case 7: {
        if (tag == 57) {
         parse_garantee_award_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &garantee_award_amount_)));
          set_has_garantee_award_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_garantee_unite_amount;
        break;
      }

      // optional double garantee_unite_amount = 8;
      case 8: {
        if (tag == 65) {
         parse_garantee_unite_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &garantee_unite_amount_)));
          set_has_garantee_unite_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 9;
      case 9: {
        if (tag == 74) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.amount_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.amount_info_ans)
  return false;
#undef DO_
}

void amount_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.amount_info_ans)
  // optional double loan_amount = 1;
  if (has_loan_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->loan_amount(), output);
  }

  // optional double loan_manual_amount = 2;
  if (has_loan_manual_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->loan_manual_amount(), output);
  }

  // optional double loan_award_amount = 3;
  if (has_loan_award_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->loan_award_amount(), output);
  }

  // optional double loan_unite_amount = 4;
  if (has_loan_unite_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->loan_unite_amount(), output);
  }

  // optional double garantee_amount = 5;
  if (has_garantee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->garantee_amount(), output);
  }

  // optional double garantee_manual_amount = 6;
  if (has_garantee_manual_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->garantee_manual_amount(), output);
  }

  // optional double garantee_award_amount = 7;
  if (has_garantee_award_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->garantee_award_amount(), output);
  }

  // optional double garantee_unite_amount = 8;
  if (has_garantee_unite_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->garantee_unite_amount(), output);
  }

  // optional .common.result_info result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.amount_info_ans)
}

::google::protobuf::uint8* amount_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.amount_info_ans)
  // optional double loan_amount = 1;
  if (has_loan_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->loan_amount(), target);
  }

  // optional double loan_manual_amount = 2;
  if (has_loan_manual_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->loan_manual_amount(), target);
  }

  // optional double loan_award_amount = 3;
  if (has_loan_award_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->loan_award_amount(), target);
  }

  // optional double loan_unite_amount = 4;
  if (has_loan_unite_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->loan_unite_amount(), target);
  }

  // optional double garantee_amount = 5;
  if (has_garantee_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->garantee_amount(), target);
  }

  // optional double garantee_manual_amount = 6;
  if (has_garantee_manual_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->garantee_manual_amount(), target);
  }

  // optional double garantee_award_amount = 7;
  if (has_garantee_award_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->garantee_award_amount(), target);
  }

  // optional double garantee_unite_amount = 8;
  if (has_garantee_unite_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->garantee_unite_amount(), target);
  }

  // optional .common.result_info result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.amount_info_ans)
  return target;
}

int amount_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double loan_amount = 1;
    if (has_loan_amount()) {
      total_size += 1 + 8;
    }

    // optional double loan_manual_amount = 2;
    if (has_loan_manual_amount()) {
      total_size += 1 + 8;
    }

    // optional double loan_award_amount = 3;
    if (has_loan_award_amount()) {
      total_size += 1 + 8;
    }

    // optional double loan_unite_amount = 4;
    if (has_loan_unite_amount()) {
      total_size += 1 + 8;
    }

    // optional double garantee_amount = 5;
    if (has_garantee_amount()) {
      total_size += 1 + 8;
    }

    // optional double garantee_manual_amount = 6;
    if (has_garantee_manual_amount()) {
      total_size += 1 + 8;
    }

    // optional double garantee_award_amount = 7;
    if (has_garantee_award_amount()) {
      total_size += 1 + 8;
    }

    // optional double garantee_unite_amount = 8;
    if (has_garantee_unite_amount()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .common.result_info result = 9;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void amount_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const amount_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const amount_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void amount_info_ans::MergeFrom(const amount_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loan_amount()) {
      set_loan_amount(from.loan_amount());
    }
    if (from.has_loan_manual_amount()) {
      set_loan_manual_amount(from.loan_manual_amount());
    }
    if (from.has_loan_award_amount()) {
      set_loan_award_amount(from.loan_award_amount());
    }
    if (from.has_loan_unite_amount()) {
      set_loan_unite_amount(from.loan_unite_amount());
    }
    if (from.has_garantee_amount()) {
      set_garantee_amount(from.garantee_amount());
    }
    if (from.has_garantee_manual_amount()) {
      set_garantee_manual_amount(from.garantee_manual_amount());
    }
    if (from.has_garantee_award_amount()) {
      set_garantee_award_amount(from.garantee_award_amount());
    }
    if (from.has_garantee_unite_amount()) {
      set_garantee_unite_amount(from.garantee_unite_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void amount_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void amount_info_ans::CopyFrom(const amount_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool amount_info_ans::IsInitialized() const {

  return true;
}

void amount_info_ans::Swap(amount_info_ans* other) {
  if (other != this) {
    std::swap(loan_amount_, other->loan_amount_);
    std::swap(loan_manual_amount_, other->loan_manual_amount_);
    std::swap(loan_award_amount_, other->loan_award_amount_);
    std::swap(loan_unite_amount_, other->loan_unite_amount_);
    std::swap(garantee_amount_, other->garantee_amount_);
    std::swap(garantee_manual_amount_, other->garantee_manual_amount_);
    std::swap(garantee_award_amount_, other->garantee_award_amount_);
    std::swap(garantee_unite_amount_, other->garantee_unite_amount_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata amount_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = amount_info_ans_descriptor_;
  metadata.reflection = amount_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int device_ans::kDeviceListFieldNumber;
const int device_ans::kResultFieldNumber;
#endif  // !_MSC_VER

device_ans::device_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.device_ans)
}

void device_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

device_ans::device_ans(const device_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.device_ans)
}

void device_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

device_ans::~device_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.device_ans)
  SharedDtor();
}

void device_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void device_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return device_ans_descriptor_;
}

const device_ans& device_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

device_ans* device_ans::default_instance_ = NULL;

device_ans* device_ans::New() const {
  return new device_ans;
}

void device_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  device_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool device_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.device_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_user_portrayal.device_info device_list = 1;
      case 1: {
        if (tag == 10) {
         parse_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_device_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.device_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.device_ans)
  return false;
#undef DO_
}

void device_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.device_ans)
  // repeated .ODP_user_portrayal.device_info device_list = 1;
  for (int i = 0; i < this->device_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.device_ans)
}

::google::protobuf::uint8* device_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.device_ans)
  // repeated .ODP_user_portrayal.device_info device_list = 1;
  for (int i = 0; i < this->device_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->device_list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.device_ans)
  return target;
}

int device_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_user_portrayal.device_info device_list = 1;
  total_size += 1 * this->device_list_size();
  for (int i = 0; i < this->device_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const device_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const device_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void device_ans::MergeFrom(const device_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_list_.MergeFrom(from.device_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void device_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_ans::CopyFrom(const device_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_ans::IsInitialized() const {

  return true;
}

void device_ans::Swap(device_ans* other) {
  if (other != this) {
    device_list_.Swap(&other->device_list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata device_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = device_ans_descriptor_;
  metadata.reflection = device_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_research_ans::kIdentityFieldNumber;
const int bid_research_ans::kTotalNumFieldNumber;
const int bid_research_ans::kSuccessNumFieldNumber;
const int bid_research_ans::kFailNumFieldNumber;
const int bid_research_ans::kBidOverdueNumFieldNumber;
const int bid_research_ans::kBidBadDebtFieldNumber;
const int bid_research_ans::kAdvanceOverdueFieldNumber;
const int bid_research_ans::kTravelfeeFieldNumber;
const int bid_research_ans::kResultFieldNumber;
#endif  // !_MSC_VER

bid_research_ans::bid_research_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.bid_research_ans)
}

void bid_research_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

bid_research_ans::bid_research_ans(const bid_research_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.bid_research_ans)
}

void bid_research_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_num_ = 0;
  success_num_ = 0;
  fail_num_ = 0;
  bid_overdue_num_ = 0;
  bid_bad_debt_ = 0;
  advance_overdue_ = 0;
  travelfee_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_research_ans::~bid_research_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.bid_research_ans)
  SharedDtor();
}

void bid_research_ans::SharedDtor() {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void bid_research_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_research_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_research_ans_descriptor_;
}

const bid_research_ans& bid_research_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

bid_research_ans* bid_research_ans::default_instance_ = NULL;

bid_research_ans* bid_research_ans::New() const {
  return new bid_research_ans;
}

void bid_research_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_research_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(total_num_, travelfee_);
    if (has_identity()) {
      if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_->clear();
      }
    }
  }
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_research_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.bid_research_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 2;
      case 2: {
        if (tag == 16) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success_num;
        break;
      }

      // optional int32 success_num = 3;
      case 3: {
        if (tag == 24) {
         parse_success_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_num_)));
          set_has_success_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fail_num;
        break;
      }

      // optional int32 fail_num = 4;
      case 4: {
        if (tag == 32) {
         parse_fail_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_num_)));
          set_has_fail_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bid_overdue_num;
        break;
      }

      // optional int32 bid_overdue_num = 5;
      case 5: {
        if (tag == 40) {
         parse_bid_overdue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_overdue_num_)));
          set_has_bid_overdue_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bid_bad_debt;
        break;
      }

      // optional int32 bid_bad_debt = 6;
      case 6: {
        if (tag == 48) {
         parse_bid_bad_debt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_bad_debt_)));
          set_has_bid_bad_debt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_advance_overdue;
        break;
      }

      // optional int32 advance_overdue = 7;
      case 7: {
        if (tag == 56) {
         parse_advance_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_overdue_)));
          set_has_advance_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_travelfee;
        break;
      }

      // optional double travelfee = 8;
      case 8: {
        if (tag == 65) {
         parse_travelfee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &travelfee_)));
          set_has_travelfee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 9;
      case 9: {
        if (tag == 74) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.bid_research_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.bid_research_ans)
  return false;
#undef DO_
}

void bid_research_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.bid_research_ans)
  // optional bytes identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identity(), output);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }

  // optional int32 success_num = 3;
  if (has_success_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->success_num(), output);
  }

  // optional int32 fail_num = 4;
  if (has_fail_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fail_num(), output);
  }

  // optional int32 bid_overdue_num = 5;
  if (has_bid_overdue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bid_overdue_num(), output);
  }

  // optional int32 bid_bad_debt = 6;
  if (has_bid_bad_debt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bid_bad_debt(), output);
  }

  // optional int32 advance_overdue = 7;
  if (has_advance_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->advance_overdue(), output);
  }

  // optional double travelfee = 8;
  if (has_travelfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->travelfee(), output);
  }

  // optional .common.result_info result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.bid_research_ans)
}

::google::protobuf::uint8* bid_research_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.bid_research_ans)
  // optional bytes identity = 1;
  if (has_identity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identity(), target);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }

  // optional int32 success_num = 3;
  if (has_success_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->success_num(), target);
  }

  // optional int32 fail_num = 4;
  if (has_fail_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fail_num(), target);
  }

  // optional int32 bid_overdue_num = 5;
  if (has_bid_overdue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bid_overdue_num(), target);
  }

  // optional int32 bid_bad_debt = 6;
  if (has_bid_bad_debt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bid_bad_debt(), target);
  }

  // optional int32 advance_overdue = 7;
  if (has_advance_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->advance_overdue(), target);
  }

  // optional double travelfee = 8;
  if (has_travelfee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->travelfee(), target);
  }

  // optional .common.result_info result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.bid_research_ans)
  return target;
}

int bid_research_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity());
    }

    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 success_num = 3;
    if (has_success_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_num());
    }

    // optional int32 fail_num = 4;
    if (has_fail_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_num());
    }

    // optional int32 bid_overdue_num = 5;
    if (has_bid_overdue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_overdue_num());
    }

    // optional int32 bid_bad_debt = 6;
    if (has_bid_bad_debt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_bad_debt());
    }

    // optional int32 advance_overdue = 7;
    if (has_advance_overdue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance_overdue());
    }

    // optional double travelfee = 8;
    if (has_travelfee()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .common.result_info result = 9;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_research_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_research_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_research_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_research_ans::MergeFrom(const bid_research_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_success_num()) {
      set_success_num(from.success_num());
    }
    if (from.has_fail_num()) {
      set_fail_num(from.fail_num());
    }
    if (from.has_bid_overdue_num()) {
      set_bid_overdue_num(from.bid_overdue_num());
    }
    if (from.has_bid_bad_debt()) {
      set_bid_bad_debt(from.bid_bad_debt());
    }
    if (from.has_advance_overdue()) {
      set_advance_overdue(from.advance_overdue());
    }
    if (from.has_travelfee()) {
      set_travelfee(from.travelfee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_research_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_research_ans::CopyFrom(const bid_research_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_research_ans::IsInitialized() const {

  return true;
}

void bid_research_ans::Swap(bid_research_ans* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    std::swap(total_num_, other->total_num_);
    std::swap(success_num_, other->success_num_);
    std::swap(fail_num_, other->fail_num_);
    std::swap(bid_overdue_num_, other->bid_overdue_num_);
    std::swap(bid_bad_debt_, other->bid_bad_debt_);
    std::swap(advance_overdue_, other->advance_overdue_);
    std::swap(travelfee_, other->travelfee_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_research_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_research_ans_descriptor_;
  metadata.reflection = bid_research_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_invest_ans::kTotalNumFieldNumber;
const int bid_invest_ans::kTotalamountFieldNumber;
const int bid_invest_ans::kInvestmentprofitFieldNumber;
const int bid_invest_ans::kReceiveAmountFieldNumber;
const int bid_invest_ans::kLateamountFieldNumber;
const int bid_invest_ans::kResultFieldNumber;
#endif  // !_MSC_VER

bid_invest_ans::bid_invest_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.bid_invest_ans)
}

void bid_invest_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

bid_invest_ans::bid_invest_ans(const bid_invest_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.bid_invest_ans)
}

void bid_invest_ans::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  totalamount_ = 0;
  investmentprofit_ = 0;
  receive_amount_ = 0;
  lateamount_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_invest_ans::~bid_invest_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.bid_invest_ans)
  SharedDtor();
}

void bid_invest_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void bid_invest_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_invest_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_invest_ans_descriptor_;
}

const bid_invest_ans& bid_invest_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

bid_invest_ans* bid_invest_ans::default_instance_ = NULL;

bid_invest_ans* bid_invest_ans::New() const {
  return new bid_invest_ans;
}

void bid_invest_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_invest_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(totalamount_, lateamount_);
    total_num_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_invest_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.bid_invest_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_totalamount;
        break;
      }

      // optional double totalamount = 2;
      case 2: {
        if (tag == 17) {
         parse_totalamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalamount_)));
          set_has_totalamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_investmentprofit;
        break;
      }

      // optional double investmentprofit = 3;
      case 3: {
        if (tag == 25) {
         parse_investmentprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &investmentprofit_)));
          set_has_investmentprofit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_receive_amount;
        break;
      }

      // optional double receive_amount = 4;
      case 4: {
        if (tag == 33) {
         parse_receive_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &receive_amount_)));
          set_has_receive_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lateamount;
        break;
      }

      // optional double lateamount = 5;
      case 5: {
        if (tag == 41) {
         parse_lateamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateamount_)));
          set_has_lateamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 6;
      case 6: {
        if (tag == 50) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.bid_invest_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.bid_invest_ans)
  return false;
#undef DO_
}

void bid_invest_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.bid_invest_ans)
  // optional int32 total_num = 1;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_num(), output);
  }

  // optional double totalamount = 2;
  if (has_totalamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->totalamount(), output);
  }

  // optional double investmentprofit = 3;
  if (has_investmentprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->investmentprofit(), output);
  }

  // optional double receive_amount = 4;
  if (has_receive_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->receive_amount(), output);
  }

  // optional double lateamount = 5;
  if (has_lateamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateamount(), output);
  }

  // optional .common.result_info result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.bid_invest_ans)
}

::google::protobuf::uint8* bid_invest_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.bid_invest_ans)
  // optional int32 total_num = 1;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_num(), target);
  }

  // optional double totalamount = 2;
  if (has_totalamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->totalamount(), target);
  }

  // optional double investmentprofit = 3;
  if (has_investmentprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->investmentprofit(), target);
  }

  // optional double receive_amount = 4;
  if (has_receive_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->receive_amount(), target);
  }

  // optional double lateamount = 5;
  if (has_lateamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateamount(), target);
  }

  // optional .common.result_info result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.bid_invest_ans)
  return target;
}

int bid_invest_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_num = 1;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional double totalamount = 2;
    if (has_totalamount()) {
      total_size += 1 + 8;
    }

    // optional double investmentprofit = 3;
    if (has_investmentprofit()) {
      total_size += 1 + 8;
    }

    // optional double receive_amount = 4;
    if (has_receive_amount()) {
      total_size += 1 + 8;
    }

    // optional double lateamount = 5;
    if (has_lateamount()) {
      total_size += 1 + 8;
    }

    // optional .common.result_info result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_invest_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_invest_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_invest_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_invest_ans::MergeFrom(const bid_invest_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_totalamount()) {
      set_totalamount(from.totalamount());
    }
    if (from.has_investmentprofit()) {
      set_investmentprofit(from.investmentprofit());
    }
    if (from.has_receive_amount()) {
      set_receive_amount(from.receive_amount());
    }
    if (from.has_lateamount()) {
      set_lateamount(from.lateamount());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_invest_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_invest_ans::CopyFrom(const bid_invest_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_invest_ans::IsInitialized() const {

  return true;
}

void bid_invest_ans::Swap(bid_invest_ans* other) {
  if (other != this) {
    std::swap(total_num_, other->total_num_);
    std::swap(totalamount_, other->totalamount_);
    std::swap(investmentprofit_, other->investmentprofit_);
    std::swap(receive_amount_, other->receive_amount_);
    std::swap(lateamount_, other->lateamount_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_invest_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_invest_ans_descriptor_;
  metadata.reflection = bid_invest_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_guarantee_ans::kTotalNumFieldNumber;
const int bid_guarantee_ans::kOverdueNumFieldNumber;
const int bid_guarantee_ans::kBadDebtNumFieldNumber;
const int bid_guarantee_ans::kTotalamountFieldNumber;
const int bid_guarantee_ans::kInvestmentprofitFieldNumber;
const int bid_guarantee_ans::kAdvanceAmountFieldNumber;
const int bid_guarantee_ans::kNotAdvenceFieldNumber;
const int bid_guarantee_ans::kReceiveAmountFieldNumber;
const int bid_guarantee_ans::kLateamountFieldNumber;
const int bid_guarantee_ans::kResultFieldNumber;
#endif  // !_MSC_VER

bid_guarantee_ans::bid_guarantee_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.bid_guarantee_ans)
}

void bid_guarantee_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

bid_guarantee_ans::bid_guarantee_ans(const bid_guarantee_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.bid_guarantee_ans)
}

void bid_guarantee_ans::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  overdue_num_ = 0;
  bad_debt_num_ = 0;
  totalamount_ = 0;
  investmentprofit_ = 0;
  advance_amount_ = 0;
  not_advence_ = 0;
  receive_amount_ = 0;
  lateamount_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_guarantee_ans::~bid_guarantee_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.bid_guarantee_ans)
  SharedDtor();
}

void bid_guarantee_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void bid_guarantee_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_guarantee_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_guarantee_ans_descriptor_;
}

const bid_guarantee_ans& bid_guarantee_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

bid_guarantee_ans* bid_guarantee_ans::default_instance_ = NULL;

bid_guarantee_ans* bid_guarantee_ans::New() const {
  return new bid_guarantee_ans;
}

void bid_guarantee_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_guarantee_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(total_num_, receive_amount_);
    bad_debt_num_ = 0;
  }
  if (_has_bits_[8 / 32] & 768) {
    lateamount_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_guarantee_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.bid_guarantee_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_overdue_num;
        break;
      }

      // optional int32 overdue_num = 2;
      case 2: {
        if (tag == 16) {
         parse_overdue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_num_)));
          set_has_overdue_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bad_debt_num;
        break;
      }

      // optional int32 bad_debt_num = 3;
      case 3: {
        if (tag == 24) {
         parse_bad_debt_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bad_debt_num_)));
          set_has_bad_debt_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_totalamount;
        break;
      }

      // optional double totalamount = 4;
      case 4: {
        if (tag == 33) {
         parse_totalamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalamount_)));
          set_has_totalamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_investmentprofit;
        break;
      }

      // optional double investmentprofit = 5;
      case 5: {
        if (tag == 41) {
         parse_investmentprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &investmentprofit_)));
          set_has_investmentprofit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_advance_amount;
        break;
      }

      // optional double advance_amount = 6;
      case 6: {
        if (tag == 49) {
         parse_advance_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &advance_amount_)));
          set_has_advance_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_not_advence;
        break;
      }

      // optional double not_advence = 7;
      case 7: {
        if (tag == 57) {
         parse_not_advence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &not_advence_)));
          set_has_not_advence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_receive_amount;
        break;
      }

      // optional double receive_amount = 8;
      case 8: {
        if (tag == 65) {
         parse_receive_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &receive_amount_)));
          set_has_receive_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_lateamount;
        break;
      }

      // optional double lateamount = 9;
      case 9: {
        if (tag == 73) {
         parse_lateamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateamount_)));
          set_has_lateamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 10;
      case 10: {
        if (tag == 82) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.bid_guarantee_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.bid_guarantee_ans)
  return false;
#undef DO_
}

void bid_guarantee_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.bid_guarantee_ans)
  // optional int32 total_num = 1;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_num(), output);
  }

  // optional int32 overdue_num = 2;
  if (has_overdue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->overdue_num(), output);
  }

  // optional int32 bad_debt_num = 3;
  if (has_bad_debt_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bad_debt_num(), output);
  }

  // optional double totalamount = 4;
  if (has_totalamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->totalamount(), output);
  }

  // optional double investmentprofit = 5;
  if (has_investmentprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->investmentprofit(), output);
  }

  // optional double advance_amount = 6;
  if (has_advance_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->advance_amount(), output);
  }

  // optional double not_advence = 7;
  if (has_not_advence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->not_advence(), output);
  }

  // optional double receive_amount = 8;
  if (has_receive_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->receive_amount(), output);
  }

  // optional double lateamount = 9;
  if (has_lateamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lateamount(), output);
  }

  // optional .common.result_info result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.bid_guarantee_ans)
}

::google::protobuf::uint8* bid_guarantee_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.bid_guarantee_ans)
  // optional int32 total_num = 1;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_num(), target);
  }

  // optional int32 overdue_num = 2;
  if (has_overdue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->overdue_num(), target);
  }

  // optional int32 bad_debt_num = 3;
  if (has_bad_debt_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bad_debt_num(), target);
  }

  // optional double totalamount = 4;
  if (has_totalamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->totalamount(), target);
  }

  // optional double investmentprofit = 5;
  if (has_investmentprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->investmentprofit(), target);
  }

  // optional double advance_amount = 6;
  if (has_advance_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->advance_amount(), target);
  }

  // optional double not_advence = 7;
  if (has_not_advence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->not_advence(), target);
  }

  // optional double receive_amount = 8;
  if (has_receive_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->receive_amount(), target);
  }

  // optional double lateamount = 9;
  if (has_lateamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lateamount(), target);
  }

  // optional .common.result_info result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.bid_guarantee_ans)
  return target;
}

int bid_guarantee_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_num = 1;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 overdue_num = 2;
    if (has_overdue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_num());
    }

    // optional int32 bad_debt_num = 3;
    if (has_bad_debt_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bad_debt_num());
    }

    // optional double totalamount = 4;
    if (has_totalamount()) {
      total_size += 1 + 8;
    }

    // optional double investmentprofit = 5;
    if (has_investmentprofit()) {
      total_size += 1 + 8;
    }

    // optional double advance_amount = 6;
    if (has_advance_amount()) {
      total_size += 1 + 8;
    }

    // optional double not_advence = 7;
    if (has_not_advence()) {
      total_size += 1 + 8;
    }

    // optional double receive_amount = 8;
    if (has_receive_amount()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double lateamount = 9;
    if (has_lateamount()) {
      total_size += 1 + 8;
    }

    // optional .common.result_info result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_guarantee_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_guarantee_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_guarantee_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_guarantee_ans::MergeFrom(const bid_guarantee_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_overdue_num()) {
      set_overdue_num(from.overdue_num());
    }
    if (from.has_bad_debt_num()) {
      set_bad_debt_num(from.bad_debt_num());
    }
    if (from.has_totalamount()) {
      set_totalamount(from.totalamount());
    }
    if (from.has_investmentprofit()) {
      set_investmentprofit(from.investmentprofit());
    }
    if (from.has_advance_amount()) {
      set_advance_amount(from.advance_amount());
    }
    if (from.has_not_advence()) {
      set_not_advence(from.not_advence());
    }
    if (from.has_receive_amount()) {
      set_receive_amount(from.receive_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lateamount()) {
      set_lateamount(from.lateamount());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_guarantee_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_guarantee_ans::CopyFrom(const bid_guarantee_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_guarantee_ans::IsInitialized() const {

  return true;
}

void bid_guarantee_ans::Swap(bid_guarantee_ans* other) {
  if (other != this) {
    std::swap(total_num_, other->total_num_);
    std::swap(overdue_num_, other->overdue_num_);
    std::swap(bad_debt_num_, other->bad_debt_num_);
    std::swap(totalamount_, other->totalamount_);
    std::swap(investmentprofit_, other->investmentprofit_);
    std::swap(advance_amount_, other->advance_amount_);
    std::swap(not_advence_, other->not_advence_);
    std::swap(receive_amount_, other->receive_amount_);
    std::swap(lateamount_, other->lateamount_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_guarantee_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_guarantee_ans_descriptor_;
  metadata.reflection = bid_guarantee_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_loan_ans::kTotalNumFieldNumber;
const int bid_loan_ans::kSuccessNumFieldNumber;
const int bid_loan_ans::kPaymentSuccessFieldNumber;
const int bid_loan_ans::kTotalamountFieldNumber;
const int bid_loan_ans::kLateamountFieldNumber;
const int bid_loan_ans::kOverdueAmountFieldNumber;
const int bid_loan_ans::kOverdueNumFieldNumber;
const int bid_loan_ans::kGraveOverdueNumFieldNumber;
const int bid_loan_ans::kMaxOverdueDaysFieldNumber;
const int bid_loan_ans::kResultFieldNumber;
#endif  // !_MSC_VER

bid_loan_ans::bid_loan_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.bid_loan_ans)
}

void bid_loan_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

bid_loan_ans::bid_loan_ans(const bid_loan_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.bid_loan_ans)
}

void bid_loan_ans::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  success_num_ = 0;
  payment_success_ = 0;
  totalamount_ = 0;
  lateamount_ = 0;
  overdue_amount_ = 0;
  overdue_num_ = 0;
  grave_overdue_num_ = 0;
  max_overdue_days_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_loan_ans::~bid_loan_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.bid_loan_ans)
  SharedDtor();
}

void bid_loan_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void bid_loan_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_loan_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_loan_ans_descriptor_;
}

const bid_loan_ans& bid_loan_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

bid_loan_ans* bid_loan_ans::default_instance_ = NULL;

bid_loan_ans* bid_loan_ans::New() const {
  return new bid_loan_ans;
}

void bid_loan_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_loan_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(total_num_, grave_overdue_num_);
  }
  if (_has_bits_[8 / 32] & 768) {
    max_overdue_days_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_loan_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.bid_loan_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success_num;
        break;
      }

      // optional int32 success_num = 2;
      case 2: {
        if (tag == 16) {
         parse_success_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_num_)));
          set_has_success_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_payment_success;
        break;
      }

      // optional int32 payment_success = 3;
      case 3: {
        if (tag == 24) {
         parse_payment_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payment_success_)));
          set_has_payment_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_totalamount;
        break;
      }

      // optional double totalamount = 4;
      case 4: {
        if (tag == 33) {
         parse_totalamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalamount_)));
          set_has_totalamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lateamount;
        break;
      }

      // optional double lateamount = 5;
      case 5: {
        if (tag == 41) {
         parse_lateamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateamount_)));
          set_has_lateamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_overdue_amount;
        break;
      }

      // optional double overdue_amount = 6;
      case 6: {
        if (tag == 49) {
         parse_overdue_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overdue_amount_)));
          set_has_overdue_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_overdue_num;
        break;
      }

      // optional int32 overdue_num = 7;
      case 7: {
        if (tag == 56) {
         parse_overdue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_num_)));
          set_has_overdue_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_grave_overdue_num;
        break;
      }

      // optional int32 grave_overdue_num = 8;
      case 8: {
        if (tag == 64) {
         parse_grave_overdue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grave_overdue_num_)));
          set_has_grave_overdue_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_overdue_days;
        break;
      }

      // optional int32 max_overdue_days = 9;
      case 9: {
        if (tag == 72) {
         parse_max_overdue_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_overdue_days_)));
          set_has_max_overdue_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 10;
      case 10: {
        if (tag == 82) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.bid_loan_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.bid_loan_ans)
  return false;
#undef DO_
}

void bid_loan_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.bid_loan_ans)
  // optional int32 total_num = 1;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_num(), output);
  }

  // optional int32 success_num = 2;
  if (has_success_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->success_num(), output);
  }

  // optional int32 payment_success = 3;
  if (has_payment_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->payment_success(), output);
  }

  // optional double totalamount = 4;
  if (has_totalamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->totalamount(), output);
  }

  // optional double lateamount = 5;
  if (has_lateamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateamount(), output);
  }

  // optional double overdue_amount = 6;
  if (has_overdue_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->overdue_amount(), output);
  }

  // optional int32 overdue_num = 7;
  if (has_overdue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->overdue_num(), output);
  }

  // optional int32 grave_overdue_num = 8;
  if (has_grave_overdue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grave_overdue_num(), output);
  }

  // optional int32 max_overdue_days = 9;
  if (has_max_overdue_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_overdue_days(), output);
  }

  // optional .common.result_info result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.bid_loan_ans)
}

::google::protobuf::uint8* bid_loan_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.bid_loan_ans)
  // optional int32 total_num = 1;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_num(), target);
  }

  // optional int32 success_num = 2;
  if (has_success_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->success_num(), target);
  }

  // optional int32 payment_success = 3;
  if (has_payment_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->payment_success(), target);
  }

  // optional double totalamount = 4;
  if (has_totalamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->totalamount(), target);
  }

  // optional double lateamount = 5;
  if (has_lateamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateamount(), target);
  }

  // optional double overdue_amount = 6;
  if (has_overdue_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->overdue_amount(), target);
  }

  // optional int32 overdue_num = 7;
  if (has_overdue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->overdue_num(), target);
  }

  // optional int32 grave_overdue_num = 8;
  if (has_grave_overdue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grave_overdue_num(), target);
  }

  // optional int32 max_overdue_days = 9;
  if (has_max_overdue_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_overdue_days(), target);
  }

  // optional .common.result_info result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.bid_loan_ans)
  return target;
}

int bid_loan_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_num = 1;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 success_num = 2;
    if (has_success_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_num());
    }

    // optional int32 payment_success = 3;
    if (has_payment_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payment_success());
    }

    // optional double totalamount = 4;
    if (has_totalamount()) {
      total_size += 1 + 8;
    }

    // optional double lateamount = 5;
    if (has_lateamount()) {
      total_size += 1 + 8;
    }

    // optional double overdue_amount = 6;
    if (has_overdue_amount()) {
      total_size += 1 + 8;
    }

    // optional int32 overdue_num = 7;
    if (has_overdue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_num());
    }

    // optional int32 grave_overdue_num = 8;
    if (has_grave_overdue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grave_overdue_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_overdue_days = 9;
    if (has_max_overdue_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_overdue_days());
    }

    // optional .common.result_info result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_loan_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_loan_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_loan_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_loan_ans::MergeFrom(const bid_loan_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_success_num()) {
      set_success_num(from.success_num());
    }
    if (from.has_payment_success()) {
      set_payment_success(from.payment_success());
    }
    if (from.has_totalamount()) {
      set_totalamount(from.totalamount());
    }
    if (from.has_lateamount()) {
      set_lateamount(from.lateamount());
    }
    if (from.has_overdue_amount()) {
      set_overdue_amount(from.overdue_amount());
    }
    if (from.has_overdue_num()) {
      set_overdue_num(from.overdue_num());
    }
    if (from.has_grave_overdue_num()) {
      set_grave_overdue_num(from.grave_overdue_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_overdue_days()) {
      set_max_overdue_days(from.max_overdue_days());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_loan_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_loan_ans::CopyFrom(const bid_loan_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_loan_ans::IsInitialized() const {

  return true;
}

void bid_loan_ans::Swap(bid_loan_ans* other) {
  if (other != this) {
    std::swap(total_num_, other->total_num_);
    std::swap(success_num_, other->success_num_);
    std::swap(payment_success_, other->payment_success_);
    std::swap(totalamount_, other->totalamount_);
    std::swap(lateamount_, other->lateamount_);
    std::swap(overdue_amount_, other->overdue_amount_);
    std::swap(overdue_num_, other->overdue_num_);
    std::swap(grave_overdue_num_, other->grave_overdue_num_);
    std::swap(max_overdue_days_, other->max_overdue_days_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_loan_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_loan_ans_descriptor_;
  metadata.reflection = bid_loan_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int danger_analysis_ans::kDangerListFieldNumber;
const int danger_analysis_ans::kResultFieldNumber;
#endif  // !_MSC_VER

danger_analysis_ans::danger_analysis_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.danger_analysis_ans)
}

void danger_analysis_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

danger_analysis_ans::danger_analysis_ans(const danger_analysis_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.danger_analysis_ans)
}

void danger_analysis_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

danger_analysis_ans::~danger_analysis_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.danger_analysis_ans)
  SharedDtor();
}

void danger_analysis_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void danger_analysis_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* danger_analysis_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return danger_analysis_ans_descriptor_;
}

const danger_analysis_ans& danger_analysis_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

danger_analysis_ans* danger_analysis_ans::default_instance_ = NULL;

danger_analysis_ans* danger_analysis_ans::New() const {
  return new danger_analysis_ans;
}

void danger_analysis_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  danger_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool danger_analysis_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.danger_analysis_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_user_portrayal.danger_analysis_info danger_list = 1;
      case 1: {
        if (tag == 10) {
         parse_danger_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_danger_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_danger_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.danger_analysis_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.danger_analysis_ans)
  return false;
#undef DO_
}

void danger_analysis_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.danger_analysis_ans)
  // repeated .ODP_user_portrayal.danger_analysis_info danger_list = 1;
  for (int i = 0; i < this->danger_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->danger_list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.danger_analysis_ans)
}

::google::protobuf::uint8* danger_analysis_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.danger_analysis_ans)
  // repeated .ODP_user_portrayal.danger_analysis_info danger_list = 1;
  for (int i = 0; i < this->danger_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->danger_list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.danger_analysis_ans)
  return target;
}

int danger_analysis_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_user_portrayal.danger_analysis_info danger_list = 1;
  total_size += 1 * this->danger_list_size();
  for (int i = 0; i < this->danger_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->danger_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void danger_analysis_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const danger_analysis_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const danger_analysis_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void danger_analysis_ans::MergeFrom(const danger_analysis_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  danger_list_.MergeFrom(from.danger_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void danger_analysis_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void danger_analysis_ans::CopyFrom(const danger_analysis_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool danger_analysis_ans::IsInitialized() const {

  return true;
}

void danger_analysis_ans::Swap(danger_analysis_ans* other) {
  if (other != this) {
    danger_list_.Swap(&other->danger_list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata danger_analysis_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = danger_analysis_ans_descriptor_;
  metadata.reflection = danger_analysis_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_history_ans::kHistoryListFieldNumber;
const int bid_history_ans::kTotalNumFieldNumber;
const int bid_history_ans::kResultFieldNumber;
#endif  // !_MSC_VER

bid_history_ans::bid_history_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_user_portrayal.bid_history_ans)
}

void bid_history_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

bid_history_ans::bid_history_ans(const bid_history_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_user_portrayal.bid_history_ans)
}

void bid_history_ans::SharedCtor() {
  _cached_size_ = 0;
  total_num_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_history_ans::~bid_history_ans() {
  // @@protoc_insertion_point(destructor:ODP_user_portrayal.bid_history_ans)
  SharedDtor();
}

void bid_history_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void bid_history_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_history_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_history_ans_descriptor_;
}

const bid_history_ans& bid_history_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fuser_5fportrayal_2eproto();
  return *default_instance_;
}

bid_history_ans* bid_history_ans::default_instance_ = NULL;

bid_history_ans* bid_history_ans::New() const {
  return new bid_history_ans;
}

void bid_history_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_num_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_history_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_user_portrayal.bid_history_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_user_portrayal.history_info history_list = 1;
      case 1: {
        if (tag == 10) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_history_list;
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 2;
      case 2: {
        if (tag == 16) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_user_portrayal.bid_history_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_user_portrayal.bid_history_ans)
  return false;
#undef DO_
}

void bid_history_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_user_portrayal.bid_history_ans)
  // repeated .ODP_user_portrayal.history_info history_list = 1;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history_list(i), output);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_user_portrayal.bid_history_ans)
}

::google::protobuf::uint8* bid_history_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_user_portrayal.bid_history_ans)
  // repeated .ODP_user_portrayal.history_info history_list = 1;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history_list(i), target);
  }

  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_user_portrayal.bid_history_ans)
  return target;
}

int bid_history_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_user_portrayal.history_info history_list = 1;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_history_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_history_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_history_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_history_ans::MergeFrom(const bid_history_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_history_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_history_ans::CopyFrom(const bid_history_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_history_ans::IsInitialized() const {

  return true;
}

void bid_history_ans::Swap(bid_history_ans* other) {
  if (other != this) {
    history_list_.Swap(&other->history_list_);
    std::swap(total_num_, other->total_num_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_history_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_history_ans_descriptor_;
  metadata.reflection = bid_history_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ODP_user_portrayal

// @@protoc_insertion_point(global_scope)
