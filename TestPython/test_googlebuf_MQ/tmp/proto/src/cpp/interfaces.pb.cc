// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interfaces.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interfaces.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace interfaces {

namespace {

const ::google::protobuf::Descriptor* interface_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interface_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* interface_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interface_info_ans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_interfaces_2eproto() {
  protobuf_AddDesc_interfaces_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "interfaces.proto");
  GOOGLE_CHECK(file != NULL);
  interface_info_ask_descriptor_ = file->message_type(0);
  static const int interface_info_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, uap_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, json_ask_),
  };
  interface_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      interface_info_ask_descriptor_,
      interface_info_ask::default_instance_,
      interface_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(interface_info_ask));
  interface_info_ans_descriptor_ = file->message_type(1);
  static const int interface_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, json_ans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, error_),
  };
  interface_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      interface_info_ans_descriptor_,
      interface_info_ans::default_instance_,
      interface_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(interface_info_ans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_interfaces_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    interface_info_ask_descriptor_, &interface_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    interface_info_ans_descriptor_, &interface_info_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_interfaces_2eproto() {
  delete interface_info_ask::default_instance_;
  delete interface_info_ask_reflection_;
  delete interface_info_ans::default_instance_;
  delete interface_info_ans_reflection_;
}

void protobuf_AddDesc_interfaces_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020interfaces.proto\022\ninterfaces\032\014common.p"
    "roto\"9\n\022interface_info_ask\022\021\n\tuap_topic\030"
    "\001 \001(\014\022\020\n\010json_ask\030\002 \001(\014\"H\n\022interface_inf"
    "o_ans\022\020\n\010json_ans\030\001 \001(\014\022 \n\005error\030\002 \001(\0132\021"
    ".common.errorinfo", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interfaces.proto", &protobuf_RegisterTypes);
  interface_info_ask::default_instance_ = new interface_info_ask();
  interface_info_ans::default_instance_ = new interface_info_ans();
  interface_info_ask::default_instance_->InitAsDefaultInstance();
  interface_info_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_interfaces_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_interfaces_2eproto {
  StaticDescriptorInitializer_interfaces_2eproto() {
    protobuf_AddDesc_interfaces_2eproto();
  }
} static_descriptor_initializer_interfaces_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int interface_info_ask::kUapTopicFieldNumber;
const int interface_info_ask::kJsonAskFieldNumber;
#endif  // !_MSC_VER

interface_info_ask::interface_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:interfaces.interface_info_ask)
}

void interface_info_ask::InitAsDefaultInstance() {
}

interface_info_ask::interface_info_ask(const interface_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:interfaces.interface_info_ask)
}

void interface_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uap_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_ask_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

interface_info_ask::~interface_info_ask() {
  // @@protoc_insertion_point(destructor:interfaces.interface_info_ask)
  SharedDtor();
}

void interface_info_ask::SharedDtor() {
  if (uap_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uap_topic_;
  }
  if (json_ask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ask_;
  }
  if (this != default_instance_) {
  }
}

void interface_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interface_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interface_info_ask_descriptor_;
}

const interface_info_ask& interface_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interfaces_2eproto();
  return *default_instance_;
}

interface_info_ask* interface_info_ask::default_instance_ = NULL;

interface_info_ask* interface_info_ask::New() const {
  return new interface_info_ask;
}

void interface_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uap_topic()) {
      if (uap_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uap_topic_->clear();
      }
    }
    if (has_json_ask()) {
      if (json_ask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_ask_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool interface_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:interfaces.interface_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uap_topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uap_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_json_ask;
        break;
      }

      // optional bytes json_ask = 2;
      case 2: {
        if (tag == 18) {
         parse_json_ask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_ask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:interfaces.interface_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:interfaces.interface_info_ask)
  return false;
#undef DO_
}

void interface_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:interfaces.interface_info_ask)
  // optional bytes uap_topic = 1;
  if (has_uap_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uap_topic(), output);
  }

  // optional bytes json_ask = 2;
  if (has_json_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->json_ask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:interfaces.interface_info_ask)
}

::google::protobuf::uint8* interface_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.interface_info_ask)
  // optional bytes uap_topic = 1;
  if (has_uap_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uap_topic(), target);
  }

  // optional bytes json_ask = 2;
  if (has_json_ask()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->json_ask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.interface_info_ask)
  return target;
}

int interface_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uap_topic = 1;
    if (has_uap_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uap_topic());
    }

    // optional bytes json_ask = 2;
    if (has_json_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_ask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interface_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const interface_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const interface_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void interface_info_ask::MergeFrom(const interface_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uap_topic()) {
      set_uap_topic(from.uap_topic());
    }
    if (from.has_json_ask()) {
      set_json_ask(from.json_ask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void interface_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interface_info_ask::CopyFrom(const interface_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interface_info_ask::IsInitialized() const {

  return true;
}

void interface_info_ask::Swap(interface_info_ask* other) {
  if (other != this) {
    std::swap(uap_topic_, other->uap_topic_);
    std::swap(json_ask_, other->json_ask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata interface_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interface_info_ask_descriptor_;
  metadata.reflection = interface_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int interface_info_ans::kJsonAnsFieldNumber;
const int interface_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

interface_info_ans::interface_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:interfaces.interface_info_ans)
}

void interface_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

interface_info_ans::interface_info_ans(const interface_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:interfaces.interface_info_ans)
}

void interface_info_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

interface_info_ans::~interface_info_ans() {
  // @@protoc_insertion_point(destructor:interfaces.interface_info_ans)
  SharedDtor();
}

void interface_info_ans::SharedDtor() {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ans_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void interface_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interface_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interface_info_ans_descriptor_;
}

const interface_info_ans& interface_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interfaces_2eproto();
  return *default_instance_;
}

interface_info_ans* interface_info_ans::default_instance_ = NULL;

interface_info_ans* interface_info_ans::New() const {
  return new interface_info_ans;
}

void interface_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_json_ans()) {
      if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_ans_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool interface_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:interfaces.interface_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json_ans = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_ans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:interfaces.interface_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:interfaces.interface_info_ans)
  return false;
#undef DO_
}

void interface_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:interfaces.interface_info_ans)
  // optional bytes json_ans = 1;
  if (has_json_ans()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json_ans(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:interfaces.interface_info_ans)
}

::google::protobuf::uint8* interface_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.interface_info_ans)
  // optional bytes json_ans = 1;
  if (has_json_ans()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json_ans(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.interface_info_ans)
  return target;
}

int interface_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes json_ans = 1;
    if (has_json_ans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_ans());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interface_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const interface_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const interface_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void interface_info_ans::MergeFrom(const interface_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_ans()) {
      set_json_ans(from.json_ans());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void interface_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interface_info_ans::CopyFrom(const interface_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interface_info_ans::IsInitialized() const {

  return true;
}

void interface_info_ans::Swap(interface_info_ans* other) {
  if (other != this) {
    std::swap(json_ans_, other->json_ans_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata interface_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interface_info_ans_descriptor_;
  metadata.reflection = interface_info_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace interfaces

// @@protoc_insertion_point(global_scope)
