// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFP_reptile_control.proto

#ifndef PROTOBUF_AFP_5freptile_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_AFP_5freptile_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace AFP_reptile_control {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

class reptile_basic_info;
class reptile_config_info;
class schedule_info;
class set_reptile_config;
class reptile_history;
class reptile_info_ask;
class reptile_info_ans;
class reptile_schedule_ask;
class set_reptile_config_ask;
class set_reptile_config_ans;
class reptile_operation_status_ask;
class reptile_operation_status_ans;
class reptile_abnormal_ask;
class reptile_history_record_ask;
class reptile_history_record_ans;
class reptile_heartbeat_monitoring_ask;
class reptile_heartbeat_monitoring_ans;

enum operation_status {
  starting = 0,
  closeing = 1
};
bool operation_status_IsValid(int value);
const operation_status operation_status_MIN = starting;
const operation_status operation_status_MAX = closeing;
const int operation_status_ARRAYSIZE = operation_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* operation_status_descriptor();
inline const ::std::string& operation_status_Name(operation_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    operation_status_descriptor(), value);
}
inline bool operation_status_Parse(
    const ::std::string& name, operation_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<operation_status>(
    operation_status_descriptor(), name, value);
}
// ===================================================================

class reptile_basic_info : public ::google::protobuf::Message {
 public:
  reptile_basic_info();
  virtual ~reptile_basic_info();

  reptile_basic_info(const reptile_basic_info& from);

  inline reptile_basic_info& operator=(const reptile_basic_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_basic_info& default_instance();

  void Swap(reptile_basic_info* other);

  // implements Message ----------------------------------------------

  reptile_basic_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_basic_info& from);
  void MergeFrom(const reptile_basic_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional bytes reptile_name = 2;
  inline bool has_reptile_name() const;
  inline void clear_reptile_name();
  static const int kReptileNameFieldNumber = 2;
  inline const ::std::string& reptile_name() const;
  inline void set_reptile_name(const ::std::string& value);
  inline void set_reptile_name(const char* value);
  inline void set_reptile_name(const void* value, size_t size);
  inline ::std::string* mutable_reptile_name();
  inline ::std::string* release_reptile_name();
  inline void set_allocated_reptile_name(::std::string* reptile_name);

  // optional bytes Crawl_site = 3;
  inline bool has_crawl_site() const;
  inline void clear_crawl_site();
  static const int kCrawlSiteFieldNumber = 3;
  inline const ::std::string& crawl_site() const;
  inline void set_crawl_site(const ::std::string& value);
  inline void set_crawl_site(const char* value);
  inline void set_crawl_site(const void* value, size_t size);
  inline ::std::string* mutable_crawl_site();
  inline ::std::string* release_crawl_site();
  inline void set_allocated_crawl_site(::std::string* crawl_site);

  // optional bytes ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional .AFP_reptile_control.operation_status status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::AFP_reptile_control::operation_status status() const;
  inline void set_status(::AFP_reptile_control::operation_status value);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_basic_info)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_reptile_name();
  inline void clear_has_reptile_name();
  inline void set_has_crawl_site();
  inline void clear_has_crawl_site();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reptile_name_;
  ::std::string* crawl_site_;
  ::google::protobuf::int32 reptile_id_;
  int status_;
  ::std::string* ip_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_basic_info* default_instance_;
};
// -------------------------------------------------------------------

class reptile_config_info : public ::google::protobuf::Message {
 public:
  reptile_config_info();
  virtual ~reptile_config_info();

  reptile_config_info(const reptile_config_info& from);

  inline reptile_config_info& operator=(const reptile_config_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_config_info& default_instance();

  void Swap(reptile_config_info* other);

  // implements Message ----------------------------------------------

  reptile_config_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_config_info& from);
  void MergeFrom(const reptile_config_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional bytes reptile_name = 2;
  inline bool has_reptile_name() const;
  inline void clear_reptile_name();
  static const int kReptileNameFieldNumber = 2;
  inline const ::std::string& reptile_name() const;
  inline void set_reptile_name(const ::std::string& value);
  inline void set_reptile_name(const char* value);
  inline void set_reptile_name(const void* value, size_t size);
  inline ::std::string* mutable_reptile_name();
  inline ::std::string* release_reptile_name();
  inline void set_allocated_reptile_name(::std::string* reptile_name);

  // optional bytes mongodb_address = 3;
  inline bool has_mongodb_address() const;
  inline void clear_mongodb_address();
  static const int kMongodbAddressFieldNumber = 3;
  inline const ::std::string& mongodb_address() const;
  inline void set_mongodb_address(const ::std::string& value);
  inline void set_mongodb_address(const char* value);
  inline void set_mongodb_address(const void* value, size_t size);
  inline ::std::string* mutable_mongodb_address();
  inline ::std::string* release_mongodb_address();
  inline void set_allocated_mongodb_address(::std::string* mongodb_address);

  // optional int32 mongodb_port = 4;
  inline bool has_mongodb_port() const;
  inline void clear_mongodb_port();
  static const int kMongodbPortFieldNumber = 4;
  inline ::google::protobuf::int32 mongodb_port() const;
  inline void set_mongodb_port(::google::protobuf::int32 value);

  // optional bytes mongodb_name = 5;
  inline bool has_mongodb_name() const;
  inline void clear_mongodb_name();
  static const int kMongodbNameFieldNumber = 5;
  inline const ::std::string& mongodb_name() const;
  inline void set_mongodb_name(const ::std::string& value);
  inline void set_mongodb_name(const char* value);
  inline void set_mongodb_name(const void* value, size_t size);
  inline ::std::string* mutable_mongodb_name();
  inline ::std::string* release_mongodb_name();
  inline void set_allocated_mongodb_name(::std::string* mongodb_name);

  // optional int32 interval = 6;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 6;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // optional int32 trigger_interval = 7;
  inline bool has_trigger_interval() const;
  inline void clear_trigger_interval();
  static const int kTriggerIntervalFieldNumber = 7;
  inline ::google::protobuf::int32 trigger_interval() const;
  inline void set_trigger_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_config_info)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_reptile_name();
  inline void clear_has_reptile_name();
  inline void set_has_mongodb_address();
  inline void clear_has_mongodb_address();
  inline void set_has_mongodb_port();
  inline void clear_has_mongodb_port();
  inline void set_has_mongodb_name();
  inline void clear_has_mongodb_name();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_trigger_interval();
  inline void clear_has_trigger_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reptile_name_;
  ::google::protobuf::int32 reptile_id_;
  ::google::protobuf::int32 mongodb_port_;
  ::std::string* mongodb_address_;
  ::std::string* mongodb_name_;
  ::google::protobuf::int32 interval_;
  ::google::protobuf::int32 trigger_interval_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_config_info* default_instance_;
};
// -------------------------------------------------------------------

class schedule_info : public ::google::protobuf::Message {
 public:
  schedule_info();
  virtual ~schedule_info();

  schedule_info(const schedule_info& from);

  inline schedule_info& operator=(const schedule_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const schedule_info& default_instance();

  void Swap(schedule_info* other);

  // implements Message ----------------------------------------------

  schedule_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const schedule_info& from);
  void MergeFrom(const schedule_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_reptile_control.reptile_basic_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info() const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info();
  inline ::AFP_reptile_control::reptile_basic_info* release_info();
  inline void set_allocated_info(::AFP_reptile_control::reptile_basic_info* info);

  // optional int32 webpage_sum = 2;
  inline bool has_webpage_sum() const;
  inline void clear_webpage_sum();
  static const int kWebpageSumFieldNumber = 2;
  inline ::google::protobuf::int32 webpage_sum() const;
  inline void set_webpage_sum(::google::protobuf::int32 value);

  // optional int32 invalid_webpage_count = 3;
  inline bool has_invalid_webpage_count() const;
  inline void clear_invalid_webpage_count();
  static const int kInvalidWebpageCountFieldNumber = 3;
  inline ::google::protobuf::int32 invalid_webpage_count() const;
  inline void set_invalid_webpage_count(::google::protobuf::int32 value);

  // optional int32 valid_webpage_count = 4;
  inline bool has_valid_webpage_count() const;
  inline void clear_valid_webpage_count();
  static const int kValidWebpageCountFieldNumber = 4;
  inline ::google::protobuf::int32 valid_webpage_count() const;
  inline void set_valid_webpage_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.schedule_info)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_webpage_sum();
  inline void clear_has_webpage_sum();
  inline void set_has_invalid_webpage_count();
  inline void clear_has_invalid_webpage_count();
  inline void set_has_valid_webpage_count();
  inline void clear_has_valid_webpage_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_reptile_control::reptile_basic_info* info_;
  ::google::protobuf::int32 webpage_sum_;
  ::google::protobuf::int32 invalid_webpage_count_;
  ::google::protobuf::int32 valid_webpage_count_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static schedule_info* default_instance_;
};
// -------------------------------------------------------------------

class set_reptile_config : public ::google::protobuf::Message {
 public:
  set_reptile_config();
  virtual ~set_reptile_config();

  set_reptile_config(const set_reptile_config& from);

  inline set_reptile_config& operator=(const set_reptile_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_reptile_config& default_instance();

  void Swap(set_reptile_config* other);

  // implements Message ----------------------------------------------

  set_reptile_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_reptile_config& from);
  void MergeFrom(const set_reptile_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_reptile_control.reptile_basic_info basic_info = 1;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& basic_info() const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_basic_info();
  inline ::AFP_reptile_control::reptile_basic_info* release_basic_info();
  inline void set_allocated_basic_info(::AFP_reptile_control::reptile_basic_info* basic_info);

  // optional .AFP_reptile_control.reptile_config_info config_info = 2;
  inline bool has_config_info() const;
  inline void clear_config_info();
  static const int kConfigInfoFieldNumber = 2;
  inline const ::AFP_reptile_control::reptile_config_info& config_info() const;
  inline ::AFP_reptile_control::reptile_config_info* mutable_config_info();
  inline ::AFP_reptile_control::reptile_config_info* release_config_info();
  inline void set_allocated_config_info(::AFP_reptile_control::reptile_config_info* config_info);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.set_reptile_config)
 private:
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  inline void set_has_config_info();
  inline void clear_has_config_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_reptile_control::reptile_basic_info* basic_info_;
  ::AFP_reptile_control::reptile_config_info* config_info_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static set_reptile_config* default_instance_;
};
// -------------------------------------------------------------------

class reptile_history : public ::google::protobuf::Message {
 public:
  reptile_history();
  virtual ~reptile_history();

  reptile_history(const reptile_history& from);

  inline reptile_history& operator=(const reptile_history& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_history& default_instance();

  void Swap(reptile_history* other);

  // implements Message ----------------------------------------------

  reptile_history* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_history& from);
  void MergeFrom(const reptile_history& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_reptile_control.reptile_basic_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info() const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info();
  inline ::AFP_reptile_control::reptile_basic_info* release_info();
  inline void set_allocated_info(::AFP_reptile_control::reptile_basic_info* info);

  // optional int32 new_data = 2;
  inline bool has_new_data() const;
  inline void clear_new_data();
  static const int kNewDataFieldNumber = 2;
  inline ::google::protobuf::int32 new_data() const;
  inline void set_new_data(::google::protobuf::int32 value);

  // optional int32 update_data = 3;
  inline bool has_update_data() const;
  inline void clear_update_data();
  static const int kUpdateDataFieldNumber = 3;
  inline ::google::protobuf::int32 update_data() const;
  inline void set_update_data(::google::protobuf::int32 value);

  // optional int32 webpage_count = 4;
  inline bool has_webpage_count() const;
  inline void clear_webpage_count();
  static const int kWebpageCountFieldNumber = 4;
  inline ::google::protobuf::int32 webpage_count() const;
  inline void set_webpage_count(::google::protobuf::int32 value);

  // optional bytes time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const void* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_history)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_new_data();
  inline void clear_has_new_data();
  inline void set_has_update_data();
  inline void clear_has_update_data();
  inline void set_has_webpage_count();
  inline void clear_has_webpage_count();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_reptile_control::reptile_basic_info* info_;
  ::google::protobuf::int32 new_data_;
  ::google::protobuf::int32 update_data_;
  ::std::string* time_;
  ::google::protobuf::int32 webpage_count_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_history* default_instance_;
};
// -------------------------------------------------------------------

class reptile_info_ask : public ::google::protobuf::Message {
 public:
  reptile_info_ask();
  virtual ~reptile_info_ask();

  reptile_info_ask(const reptile_info_ask& from);

  inline reptile_info_ask& operator=(const reptile_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_info_ask& default_instance();

  void Swap(reptile_info_ask* other);

  // implements Message ----------------------------------------------

  reptile_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_info_ask& from);
  void MergeFrom(const reptile_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_basic_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_info_ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info > info_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_info_ans : public ::google::protobuf::Message {
 public:
  reptile_info_ans();
  virtual ~reptile_info_ans();

  reptile_info_ans(const reptile_info_ans& from);

  inline reptile_info_ans& operator=(const reptile_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_info_ans& default_instance();

  void Swap(reptile_info_ans* other);

  // implements Message ----------------------------------------------

  reptile_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_info_ans& from);
  void MergeFrom(const reptile_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // repeated .AFP_reptile_control.reptile_config_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::AFP_reptile_control::reptile_config_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_config_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_config_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_config_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_config_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_info_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_config_info > info_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_schedule_ask : public ::google::protobuf::Message {
 public:
  reptile_schedule_ask();
  virtual ~reptile_schedule_ask();

  reptile_schedule_ask(const reptile_schedule_ask& from);

  inline reptile_schedule_ask& operator=(const reptile_schedule_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_schedule_ask& default_instance();

  void Swap(reptile_schedule_ask* other);

  // implements Message ----------------------------------------------

  reptile_schedule_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_schedule_ask& from);
  void MergeFrom(const reptile_schedule_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.schedule_info schedule = 1;
  inline int schedule_size() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 1;
  inline const ::AFP_reptile_control::schedule_info& schedule(int index) const;
  inline ::AFP_reptile_control::schedule_info* mutable_schedule(int index);
  inline ::AFP_reptile_control::schedule_info* add_schedule();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::schedule_info >&
      schedule() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::schedule_info >*
      mutable_schedule();

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_schedule_ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::schedule_info > schedule_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_schedule_ask* default_instance_;
};
// -------------------------------------------------------------------

class set_reptile_config_ask : public ::google::protobuf::Message {
 public:
  set_reptile_config_ask();
  virtual ~set_reptile_config_ask();

  set_reptile_config_ask(const set_reptile_config_ask& from);

  inline set_reptile_config_ask& operator=(const set_reptile_config_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_reptile_config_ask& default_instance();

  void Swap(set_reptile_config_ask* other);

  // implements Message ----------------------------------------------

  set_reptile_config_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_reptile_config_ask& from);
  void MergeFrom(const set_reptile_config_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.set_reptile_config config = 1;
  inline int config_size() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::AFP_reptile_control::set_reptile_config& config(int index) const;
  inline ::AFP_reptile_control::set_reptile_config* mutable_config(int index);
  inline ::AFP_reptile_control::set_reptile_config* add_config();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::set_reptile_config >&
      config() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::set_reptile_config >*
      mutable_config();

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.set_reptile_config_ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::set_reptile_config > config_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static set_reptile_config_ask* default_instance_;
};
// -------------------------------------------------------------------

class set_reptile_config_ans : public ::google::protobuf::Message {
 public:
  set_reptile_config_ans();
  virtual ~set_reptile_config_ans();

  set_reptile_config_ans(const set_reptile_config_ans& from);

  inline set_reptile_config_ans& operator=(const set_reptile_config_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_reptile_config_ans& default_instance();

  void Swap(set_reptile_config_ans* other);

  // implements Message ----------------------------------------------

  set_reptile_config_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_reptile_config_ans& from);
  void MergeFrom(const set_reptile_config_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_basic_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
      mutable_info();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.set_reptile_config_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info > info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static set_reptile_config_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_operation_status_ask : public ::google::protobuf::Message {
 public:
  reptile_operation_status_ask();
  virtual ~reptile_operation_status_ask();

  reptile_operation_status_ask(const reptile_operation_status_ask& from);

  inline reptile_operation_status_ask& operator=(const reptile_operation_status_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_operation_status_ask& default_instance();

  void Swap(reptile_operation_status_ask* other);

  // implements Message ----------------------------------------------

  reptile_operation_status_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_operation_status_ask& from);
  void MergeFrom(const reptile_operation_status_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_basic_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_operation_status_ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info > info_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_operation_status_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_operation_status_ans : public ::google::protobuf::Message {
 public:
  reptile_operation_status_ans();
  virtual ~reptile_operation_status_ans();

  reptile_operation_status_ans(const reptile_operation_status_ans& from);

  inline reptile_operation_status_ans& operator=(const reptile_operation_status_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_operation_status_ans& default_instance();

  void Swap(reptile_operation_status_ans* other);

  // implements Message ----------------------------------------------

  reptile_operation_status_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_operation_status_ans& from);
  void MergeFrom(const reptile_operation_status_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_basic_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
      mutable_info();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_operation_status_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info > info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_operation_status_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_abnormal_ask : public ::google::protobuf::Message {
 public:
  reptile_abnormal_ask();
  virtual ~reptile_abnormal_ask();

  reptile_abnormal_ask(const reptile_abnormal_ask& from);

  inline reptile_abnormal_ask& operator=(const reptile_abnormal_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_abnormal_ask& default_instance();

  void Swap(reptile_abnormal_ask* other);

  // implements Message ----------------------------------------------

  reptile_abnormal_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_abnormal_ask& from);
  void MergeFrom(const reptile_abnormal_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_basic_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
      mutable_info();

  // optional bytes abnormal_info = 2;
  inline bool has_abnormal_info() const;
  inline void clear_abnormal_info();
  static const int kAbnormalInfoFieldNumber = 2;
  inline const ::std::string& abnormal_info() const;
  inline void set_abnormal_info(const ::std::string& value);
  inline void set_abnormal_info(const char* value);
  inline void set_abnormal_info(const void* value, size_t size);
  inline ::std::string* mutable_abnormal_info();
  inline ::std::string* release_abnormal_info();
  inline void set_allocated_abnormal_info(::std::string* abnormal_info);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_abnormal_ask)
 private:
  inline void set_has_abnormal_info();
  inline void clear_has_abnormal_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info > info_;
  ::std::string* abnormal_info_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_abnormal_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_history_record_ask : public ::google::protobuf::Message {
 public:
  reptile_history_record_ask();
  virtual ~reptile_history_record_ask();

  reptile_history_record_ask(const reptile_history_record_ask& from);

  inline reptile_history_record_ask& operator=(const reptile_history_record_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_history_record_ask& default_instance();

  void Swap(reptile_history_record_ask* other);

  // implements Message ----------------------------------------------

  reptile_history_record_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_history_record_ask& from);
  void MergeFrom(const reptile_history_record_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes reptile_name = 1;
  inline bool has_reptile_name() const;
  inline void clear_reptile_name();
  static const int kReptileNameFieldNumber = 1;
  inline const ::std::string& reptile_name() const;
  inline void set_reptile_name(const ::std::string& value);
  inline void set_reptile_name(const char* value);
  inline void set_reptile_name(const void* value, size_t size);
  inline ::std::string* mutable_reptile_name();
  inline ::std::string* release_reptile_name();
  inline void set_allocated_reptile_name(::std::string* reptile_name);

  // optional bytes time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const void* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_history_record_ask)
 private:
  inline void set_has_reptile_name();
  inline void clear_has_reptile_name();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reptile_name_;
  ::std::string* time_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_history_record_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_history_record_ans : public ::google::protobuf::Message {
 public:
  reptile_history_record_ans();
  virtual ~reptile_history_record_ans();

  reptile_history_record_ans(const reptile_history_record_ans& from);

  inline reptile_history_record_ans& operator=(const reptile_history_record_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_history_record_ans& default_instance();

  void Swap(reptile_history_record_ans* other);

  // implements Message ----------------------------------------------

  reptile_history_record_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_history_record_ans& from);
  void MergeFrom(const reptile_history_record_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_history record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_history& record(int index) const;
  inline ::AFP_reptile_control::reptile_history* mutable_record(int index);
  inline ::AFP_reptile_control::reptile_history* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_history >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_history >*
      mutable_record();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_history_record_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_history > record_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_history_record_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_heartbeat_monitoring_ask : public ::google::protobuf::Message {
 public:
  reptile_heartbeat_monitoring_ask();
  virtual ~reptile_heartbeat_monitoring_ask();

  reptile_heartbeat_monitoring_ask(const reptile_heartbeat_monitoring_ask& from);

  inline reptile_heartbeat_monitoring_ask& operator=(const reptile_heartbeat_monitoring_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_heartbeat_monitoring_ask& default_instance();

  void Swap(reptile_heartbeat_monitoring_ask* other);

  // implements Message ----------------------------------------------

  reptile_heartbeat_monitoring_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_heartbeat_monitoring_ask& from);
  void MergeFrom(const reptile_heartbeat_monitoring_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_heartbeat_monitoring_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_heartbeat_monitoring_ans : public ::google::protobuf::Message {
 public:
  reptile_heartbeat_monitoring_ans();
  virtual ~reptile_heartbeat_monitoring_ans();

  reptile_heartbeat_monitoring_ans(const reptile_heartbeat_monitoring_ans& from);

  inline reptile_heartbeat_monitoring_ans& operator=(const reptile_heartbeat_monitoring_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_heartbeat_monitoring_ans& default_instance();

  void Swap(reptile_heartbeat_monitoring_ans* other);

  // implements Message ----------------------------------------------

  reptile_heartbeat_monitoring_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_heartbeat_monitoring_ans& from);
  void MergeFrom(const reptile_heartbeat_monitoring_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_reptile_control::reptile_basic_info& info(int index) const;
  inline ::AFP_reptile_control::reptile_basic_info* mutable_info(int index);
  inline ::AFP_reptile_control::reptile_basic_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
      mutable_info();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info > info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static reptile_heartbeat_monitoring_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// reptile_basic_info

// optional int32 reptile_id = 1;
inline bool reptile_basic_info::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_basic_info::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_basic_info::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_basic_info::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_basic_info::reptile_id() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_basic_info.reptile_id)
  return reptile_id_;
}
inline void reptile_basic_info::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_basic_info.reptile_id)
}

// optional bytes reptile_name = 2;
inline bool reptile_basic_info::has_reptile_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_basic_info::set_has_reptile_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_basic_info::clear_has_reptile_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_basic_info::clear_reptile_name() {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_->clear();
  }
  clear_has_reptile_name();
}
inline const ::std::string& reptile_basic_info::reptile_name() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_basic_info.reptile_name)
  return *reptile_name_;
}
inline void reptile_basic_info::set_reptile_name(const ::std::string& value) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_basic_info.reptile_name)
}
inline void reptile_basic_info::set_reptile_name(const char* value) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_basic_info.reptile_name)
}
inline void reptile_basic_info::set_reptile_name(const void* value, size_t size) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_basic_info.reptile_name)
}
inline ::std::string* reptile_basic_info::mutable_reptile_name() {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_basic_info.reptile_name)
  return reptile_name_;
}
inline ::std::string* reptile_basic_info::release_reptile_name() {
  clear_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reptile_name_;
    reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_reptile_name(::std::string* reptile_name) {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_name_;
  }
  if (reptile_name) {
    set_has_reptile_name();
    reptile_name_ = reptile_name;
  } else {
    clear_has_reptile_name();
    reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_basic_info.reptile_name)
}

// optional bytes Crawl_site = 3;
inline bool reptile_basic_info::has_crawl_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_basic_info::set_has_crawl_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_basic_info::clear_has_crawl_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_basic_info::clear_crawl_site() {
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_->clear();
  }
  clear_has_crawl_site();
}
inline const ::std::string& reptile_basic_info::crawl_site() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_basic_info.Crawl_site)
  return *crawl_site_;
}
inline void reptile_basic_info::set_crawl_site(const ::std::string& value) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_basic_info.Crawl_site)
}
inline void reptile_basic_info::set_crawl_site(const char* value) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_basic_info.Crawl_site)
}
inline void reptile_basic_info::set_crawl_site(const void* value, size_t size) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_basic_info.Crawl_site)
}
inline ::std::string* reptile_basic_info::mutable_crawl_site() {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_basic_info.Crawl_site)
  return crawl_site_;
}
inline ::std::string* reptile_basic_info::release_crawl_site() {
  clear_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = crawl_site_;
    crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_crawl_site(::std::string* crawl_site) {
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crawl_site_;
  }
  if (crawl_site) {
    set_has_crawl_site();
    crawl_site_ = crawl_site;
  } else {
    clear_has_crawl_site();
    crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_basic_info.Crawl_site)
}

// optional bytes ip = 4;
inline bool reptile_basic_info::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_basic_info::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_basic_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_basic_info::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& reptile_basic_info::ip() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_basic_info.ip)
  return *ip_;
}
inline void reptile_basic_info::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_basic_info.ip)
}
inline void reptile_basic_info::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_basic_info.ip)
}
inline void reptile_basic_info::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_basic_info.ip)
}
inline ::std::string* reptile_basic_info::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_basic_info.ip)
  return ip_;
}
inline ::std::string* reptile_basic_info::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_basic_info.ip)
}

// optional .AFP_reptile_control.operation_status status = 5;
inline bool reptile_basic_info::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reptile_basic_info::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reptile_basic_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reptile_basic_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::AFP_reptile_control::operation_status reptile_basic_info::status() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_basic_info.status)
  return static_cast< ::AFP_reptile_control::operation_status >(status_);
}
inline void reptile_basic_info::set_status(::AFP_reptile_control::operation_status value) {
  assert(::AFP_reptile_control::operation_status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_basic_info.status)
}

// -------------------------------------------------------------------

// reptile_config_info

// optional int32 reptile_id = 1;
inline bool reptile_config_info::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_config_info::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_config_info::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_config_info::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_config_info::reptile_id() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.reptile_id)
  return reptile_id_;
}
inline void reptile_config_info::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.reptile_id)
}

// optional bytes reptile_name = 2;
inline bool reptile_config_info::has_reptile_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_config_info::set_has_reptile_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_config_info::clear_has_reptile_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_config_info::clear_reptile_name() {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_->clear();
  }
  clear_has_reptile_name();
}
inline const ::std::string& reptile_config_info::reptile_name() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.reptile_name)
  return *reptile_name_;
}
inline void reptile_config_info::set_reptile_name(const ::std::string& value) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.reptile_name)
}
inline void reptile_config_info::set_reptile_name(const char* value) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_config_info.reptile_name)
}
inline void reptile_config_info::set_reptile_name(const void* value, size_t size) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_config_info.reptile_name)
}
inline ::std::string* reptile_config_info::mutable_reptile_name() {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_config_info.reptile_name)
  return reptile_name_;
}
inline ::std::string* reptile_config_info::release_reptile_name() {
  clear_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reptile_name_;
    reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_config_info::set_allocated_reptile_name(::std::string* reptile_name) {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_name_;
  }
  if (reptile_name) {
    set_has_reptile_name();
    reptile_name_ = reptile_name;
  } else {
    clear_has_reptile_name();
    reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_config_info.reptile_name)
}

// optional bytes mongodb_address = 3;
inline bool reptile_config_info::has_mongodb_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_config_info::set_has_mongodb_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_config_info::clear_has_mongodb_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_config_info::clear_mongodb_address() {
  if (mongodb_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_address_->clear();
  }
  clear_has_mongodb_address();
}
inline const ::std::string& reptile_config_info::mongodb_address() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.mongodb_address)
  return *mongodb_address_;
}
inline void reptile_config_info::set_mongodb_address(const ::std::string& value) {
  set_has_mongodb_address();
  if (mongodb_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_address_ = new ::std::string;
  }
  mongodb_address_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.mongodb_address)
}
inline void reptile_config_info::set_mongodb_address(const char* value) {
  set_has_mongodb_address();
  if (mongodb_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_address_ = new ::std::string;
  }
  mongodb_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_config_info.mongodb_address)
}
inline void reptile_config_info::set_mongodb_address(const void* value, size_t size) {
  set_has_mongodb_address();
  if (mongodb_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_address_ = new ::std::string;
  }
  mongodb_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_config_info.mongodb_address)
}
inline ::std::string* reptile_config_info::mutable_mongodb_address() {
  set_has_mongodb_address();
  if (mongodb_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_config_info.mongodb_address)
  return mongodb_address_;
}
inline ::std::string* reptile_config_info::release_mongodb_address() {
  clear_has_mongodb_address();
  if (mongodb_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mongodb_address_;
    mongodb_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_config_info::set_allocated_mongodb_address(::std::string* mongodb_address) {
  if (mongodb_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mongodb_address_;
  }
  if (mongodb_address) {
    set_has_mongodb_address();
    mongodb_address_ = mongodb_address;
  } else {
    clear_has_mongodb_address();
    mongodb_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_config_info.mongodb_address)
}

// optional int32 mongodb_port = 4;
inline bool reptile_config_info::has_mongodb_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_config_info::set_has_mongodb_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_config_info::clear_has_mongodb_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_config_info::clear_mongodb_port() {
  mongodb_port_ = 0;
  clear_has_mongodb_port();
}
inline ::google::protobuf::int32 reptile_config_info::mongodb_port() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.mongodb_port)
  return mongodb_port_;
}
inline void reptile_config_info::set_mongodb_port(::google::protobuf::int32 value) {
  set_has_mongodb_port();
  mongodb_port_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.mongodb_port)
}

// optional bytes mongodb_name = 5;
inline bool reptile_config_info::has_mongodb_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reptile_config_info::set_has_mongodb_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reptile_config_info::clear_has_mongodb_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reptile_config_info::clear_mongodb_name() {
  if (mongodb_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_name_->clear();
  }
  clear_has_mongodb_name();
}
inline const ::std::string& reptile_config_info::mongodb_name() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.mongodb_name)
  return *mongodb_name_;
}
inline void reptile_config_info::set_mongodb_name(const ::std::string& value) {
  set_has_mongodb_name();
  if (mongodb_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_name_ = new ::std::string;
  }
  mongodb_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.mongodb_name)
}
inline void reptile_config_info::set_mongodb_name(const char* value) {
  set_has_mongodb_name();
  if (mongodb_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_name_ = new ::std::string;
  }
  mongodb_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_config_info.mongodb_name)
}
inline void reptile_config_info::set_mongodb_name(const void* value, size_t size) {
  set_has_mongodb_name();
  if (mongodb_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_name_ = new ::std::string;
  }
  mongodb_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_config_info.mongodb_name)
}
inline ::std::string* reptile_config_info::mutable_mongodb_name() {
  set_has_mongodb_name();
  if (mongodb_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mongodb_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_config_info.mongodb_name)
  return mongodb_name_;
}
inline ::std::string* reptile_config_info::release_mongodb_name() {
  clear_has_mongodb_name();
  if (mongodb_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mongodb_name_;
    mongodb_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_config_info::set_allocated_mongodb_name(::std::string* mongodb_name) {
  if (mongodb_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mongodb_name_;
  }
  if (mongodb_name) {
    set_has_mongodb_name();
    mongodb_name_ = mongodb_name;
  } else {
    clear_has_mongodb_name();
    mongodb_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_config_info.mongodb_name)
}

// optional int32 interval = 6;
inline bool reptile_config_info::has_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void reptile_config_info::set_has_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void reptile_config_info::clear_has_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void reptile_config_info::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 reptile_config_info::interval() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.interval)
  return interval_;
}
inline void reptile_config_info::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.interval)
}

// optional int32 trigger_interval = 7;
inline bool reptile_config_info::has_trigger_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void reptile_config_info::set_has_trigger_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void reptile_config_info::clear_has_trigger_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void reptile_config_info::clear_trigger_interval() {
  trigger_interval_ = 0;
  clear_has_trigger_interval();
}
inline ::google::protobuf::int32 reptile_config_info::trigger_interval() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_config_info.trigger_interval)
  return trigger_interval_;
}
inline void reptile_config_info::set_trigger_interval(::google::protobuf::int32 value) {
  set_has_trigger_interval();
  trigger_interval_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_config_info.trigger_interval)
}

// -------------------------------------------------------------------

// schedule_info

// optional .AFP_reptile_control.reptile_basic_info info = 1;
inline bool schedule_info::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void schedule_info::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void schedule_info::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void schedule_info::clear_info() {
  if (info_ != NULL) info_->::AFP_reptile_control::reptile_basic_info::Clear();
  clear_has_info();
}
inline const ::AFP_reptile_control::reptile_basic_info& schedule_info::info() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.schedule_info.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::AFP_reptile_control::reptile_basic_info* schedule_info::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::AFP_reptile_control::reptile_basic_info;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.schedule_info.info)
  return info_;
}
inline ::AFP_reptile_control::reptile_basic_info* schedule_info::release_info() {
  clear_has_info();
  ::AFP_reptile_control::reptile_basic_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void schedule_info::set_allocated_info(::AFP_reptile_control::reptile_basic_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.schedule_info.info)
}

// optional int32 webpage_sum = 2;
inline bool schedule_info::has_webpage_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void schedule_info::set_has_webpage_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void schedule_info::clear_has_webpage_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void schedule_info::clear_webpage_sum() {
  webpage_sum_ = 0;
  clear_has_webpage_sum();
}
inline ::google::protobuf::int32 schedule_info::webpage_sum() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.schedule_info.webpage_sum)
  return webpage_sum_;
}
inline void schedule_info::set_webpage_sum(::google::protobuf::int32 value) {
  set_has_webpage_sum();
  webpage_sum_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.schedule_info.webpage_sum)
}

// optional int32 invalid_webpage_count = 3;
inline bool schedule_info::has_invalid_webpage_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void schedule_info::set_has_invalid_webpage_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void schedule_info::clear_has_invalid_webpage_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void schedule_info::clear_invalid_webpage_count() {
  invalid_webpage_count_ = 0;
  clear_has_invalid_webpage_count();
}
inline ::google::protobuf::int32 schedule_info::invalid_webpage_count() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.schedule_info.invalid_webpage_count)
  return invalid_webpage_count_;
}
inline void schedule_info::set_invalid_webpage_count(::google::protobuf::int32 value) {
  set_has_invalid_webpage_count();
  invalid_webpage_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.schedule_info.invalid_webpage_count)
}

// optional int32 valid_webpage_count = 4;
inline bool schedule_info::has_valid_webpage_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void schedule_info::set_has_valid_webpage_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void schedule_info::clear_has_valid_webpage_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void schedule_info::clear_valid_webpage_count() {
  valid_webpage_count_ = 0;
  clear_has_valid_webpage_count();
}
inline ::google::protobuf::int32 schedule_info::valid_webpage_count() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.schedule_info.valid_webpage_count)
  return valid_webpage_count_;
}
inline void schedule_info::set_valid_webpage_count(::google::protobuf::int32 value) {
  set_has_valid_webpage_count();
  valid_webpage_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.schedule_info.valid_webpage_count)
}

// -------------------------------------------------------------------

// set_reptile_config

// optional .AFP_reptile_control.reptile_basic_info basic_info = 1;
inline bool set_reptile_config::has_basic_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_reptile_config::set_has_basic_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_reptile_config::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_reptile_config::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::AFP_reptile_control::reptile_basic_info::Clear();
  clear_has_basic_info();
}
inline const ::AFP_reptile_control::reptile_basic_info& set_reptile_config::basic_info() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.set_reptile_config.basic_info)
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::AFP_reptile_control::reptile_basic_info* set_reptile_config::mutable_basic_info() {
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::AFP_reptile_control::reptile_basic_info;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.set_reptile_config.basic_info)
  return basic_info_;
}
inline ::AFP_reptile_control::reptile_basic_info* set_reptile_config::release_basic_info() {
  clear_has_basic_info();
  ::AFP_reptile_control::reptile_basic_info* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}
inline void set_reptile_config::set_allocated_basic_info(::AFP_reptile_control::reptile_basic_info* basic_info) {
  delete basic_info_;
  basic_info_ = basic_info;
  if (basic_info) {
    set_has_basic_info();
  } else {
    clear_has_basic_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.set_reptile_config.basic_info)
}

// optional .AFP_reptile_control.reptile_config_info config_info = 2;
inline bool set_reptile_config::has_config_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_reptile_config::set_has_config_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_reptile_config::clear_has_config_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_reptile_config::clear_config_info() {
  if (config_info_ != NULL) config_info_->::AFP_reptile_control::reptile_config_info::Clear();
  clear_has_config_info();
}
inline const ::AFP_reptile_control::reptile_config_info& set_reptile_config::config_info() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.set_reptile_config.config_info)
  return config_info_ != NULL ? *config_info_ : *default_instance_->config_info_;
}
inline ::AFP_reptile_control::reptile_config_info* set_reptile_config::mutable_config_info() {
  set_has_config_info();
  if (config_info_ == NULL) config_info_ = new ::AFP_reptile_control::reptile_config_info;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.set_reptile_config.config_info)
  return config_info_;
}
inline ::AFP_reptile_control::reptile_config_info* set_reptile_config::release_config_info() {
  clear_has_config_info();
  ::AFP_reptile_control::reptile_config_info* temp = config_info_;
  config_info_ = NULL;
  return temp;
}
inline void set_reptile_config::set_allocated_config_info(::AFP_reptile_control::reptile_config_info* config_info) {
  delete config_info_;
  config_info_ = config_info;
  if (config_info) {
    set_has_config_info();
  } else {
    clear_has_config_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.set_reptile_config.config_info)
}

// -------------------------------------------------------------------

// reptile_history

// optional .AFP_reptile_control.reptile_basic_info info = 1;
inline bool reptile_history::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_history::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_history::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_history::clear_info() {
  if (info_ != NULL) info_->::AFP_reptile_control::reptile_basic_info::Clear();
  clear_has_info();
}
inline const ::AFP_reptile_control::reptile_basic_info& reptile_history::info() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_history::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::AFP_reptile_control::reptile_basic_info;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_history.info)
  return info_;
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_history::release_info() {
  clear_has_info();
  ::AFP_reptile_control::reptile_basic_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void reptile_history::set_allocated_info(::AFP_reptile_control::reptile_basic_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_history.info)
}

// optional int32 new_data = 2;
inline bool reptile_history::has_new_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_history::set_has_new_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_history::clear_has_new_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_history::clear_new_data() {
  new_data_ = 0;
  clear_has_new_data();
}
inline ::google::protobuf::int32 reptile_history::new_data() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history.new_data)
  return new_data_;
}
inline void reptile_history::set_new_data(::google::protobuf::int32 value) {
  set_has_new_data();
  new_data_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_history.new_data)
}

// optional int32 update_data = 3;
inline bool reptile_history::has_update_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_history::set_has_update_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_history::clear_has_update_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_history::clear_update_data() {
  update_data_ = 0;
  clear_has_update_data();
}
inline ::google::protobuf::int32 reptile_history::update_data() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history.update_data)
  return update_data_;
}
inline void reptile_history::set_update_data(::google::protobuf::int32 value) {
  set_has_update_data();
  update_data_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_history.update_data)
}

// optional int32 webpage_count = 4;
inline bool reptile_history::has_webpage_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_history::set_has_webpage_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_history::clear_has_webpage_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_history::clear_webpage_count() {
  webpage_count_ = 0;
  clear_has_webpage_count();
}
inline ::google::protobuf::int32 reptile_history::webpage_count() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history.webpage_count)
  return webpage_count_;
}
inline void reptile_history::set_webpage_count(::google::protobuf::int32 value) {
  set_has_webpage_count();
  webpage_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_history.webpage_count)
}

// optional bytes time = 5;
inline bool reptile_history::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reptile_history::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reptile_history::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reptile_history::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& reptile_history::time() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history.time)
  return *time_;
}
inline void reptile_history::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_history.time)
}
inline void reptile_history::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_history.time)
}
inline void reptile_history::set_time(const void* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_history.time)
}
inline ::std::string* reptile_history::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_history.time)
  return time_;
}
inline ::std::string* reptile_history::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_history::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_history.time)
}

// -------------------------------------------------------------------

// reptile_info_ask

// repeated .AFP_reptile_control.reptile_basic_info info = 1;
inline int reptile_info_ask::info_size() const {
  return info_.size();
}
inline void reptile_info_ask::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_basic_info& reptile_info_ask::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_info_ask.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_info_ask::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_info_ask.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_info_ask::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_info_ask.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
reptile_info_ask::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_info_ask.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
reptile_info_ask::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_info_ask.info)
  return &info_;
}

// -------------------------------------------------------------------

// reptile_info_ans

// optional .common.errorinfo error = 1;
inline bool reptile_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_info_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_info_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_info_ans.error)
}

// repeated .AFP_reptile_control.reptile_config_info info = 2;
inline int reptile_info_ans::info_size() const {
  return info_.size();
}
inline void reptile_info_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_config_info& reptile_info_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_info_ans.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_config_info* reptile_info_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_info_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_config_info* reptile_info_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_info_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_config_info >&
reptile_info_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_info_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_config_info >*
reptile_info_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_info_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// reptile_schedule_ask

// repeated .AFP_reptile_control.schedule_info schedule = 1;
inline int reptile_schedule_ask::schedule_size() const {
  return schedule_.size();
}
inline void reptile_schedule_ask::clear_schedule() {
  schedule_.Clear();
}
inline const ::AFP_reptile_control::schedule_info& reptile_schedule_ask::schedule(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_schedule_ask.schedule)
  return schedule_.Get(index);
}
inline ::AFP_reptile_control::schedule_info* reptile_schedule_ask::mutable_schedule(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_schedule_ask.schedule)
  return schedule_.Mutable(index);
}
inline ::AFP_reptile_control::schedule_info* reptile_schedule_ask::add_schedule() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_schedule_ask.schedule)
  return schedule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::schedule_info >&
reptile_schedule_ask::schedule() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_schedule_ask.schedule)
  return schedule_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::schedule_info >*
reptile_schedule_ask::mutable_schedule() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_schedule_ask.schedule)
  return &schedule_;
}

// -------------------------------------------------------------------

// set_reptile_config_ask

// repeated .AFP_reptile_control.set_reptile_config config = 1;
inline int set_reptile_config_ask::config_size() const {
  return config_.size();
}
inline void set_reptile_config_ask::clear_config() {
  config_.Clear();
}
inline const ::AFP_reptile_control::set_reptile_config& set_reptile_config_ask::config(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.set_reptile_config_ask.config)
  return config_.Get(index);
}
inline ::AFP_reptile_control::set_reptile_config* set_reptile_config_ask::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.set_reptile_config_ask.config)
  return config_.Mutable(index);
}
inline ::AFP_reptile_control::set_reptile_config* set_reptile_config_ask::add_config() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.set_reptile_config_ask.config)
  return config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::set_reptile_config >&
set_reptile_config_ask::config() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.set_reptile_config_ask.config)
  return config_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::set_reptile_config >*
set_reptile_config_ask::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.set_reptile_config_ask.config)
  return &config_;
}

// -------------------------------------------------------------------

// set_reptile_config_ans

// repeated .AFP_reptile_control.reptile_basic_info info = 1;
inline int set_reptile_config_ans::info_size() const {
  return info_.size();
}
inline void set_reptile_config_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_basic_info& set_reptile_config_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.set_reptile_config_ans.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_basic_info* set_reptile_config_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.set_reptile_config_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_basic_info* set_reptile_config_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.set_reptile_config_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
set_reptile_config_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.set_reptile_config_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
set_reptile_config_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.set_reptile_config_ans.info)
  return &info_;
}

// optional .common.errorinfo error = 2;
inline bool set_reptile_config_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_reptile_config_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_reptile_config_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void set_reptile_config_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& set_reptile_config_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.set_reptile_config_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* set_reptile_config_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.set_reptile_config_ans.error)
  return error_;
}
inline ::common::errorinfo* set_reptile_config_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void set_reptile_config_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.set_reptile_config_ans.error)
}

// -------------------------------------------------------------------

// reptile_operation_status_ask

// repeated .AFP_reptile_control.reptile_basic_info info = 1;
inline int reptile_operation_status_ask::info_size() const {
  return info_.size();
}
inline void reptile_operation_status_ask::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_basic_info& reptile_operation_status_ask::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_operation_status_ask.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_operation_status_ask::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_operation_status_ask.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_operation_status_ask::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_operation_status_ask.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
reptile_operation_status_ask::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_operation_status_ask.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
reptile_operation_status_ask::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_operation_status_ask.info)
  return &info_;
}

// -------------------------------------------------------------------

// reptile_operation_status_ans

// repeated .AFP_reptile_control.reptile_basic_info info = 1;
inline int reptile_operation_status_ans::info_size() const {
  return info_.size();
}
inline void reptile_operation_status_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_basic_info& reptile_operation_status_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_operation_status_ans.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_operation_status_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_operation_status_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_operation_status_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_operation_status_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
reptile_operation_status_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_operation_status_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
reptile_operation_status_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_operation_status_ans.info)
  return &info_;
}

// optional .common.errorinfo error = 2;
inline bool reptile_operation_status_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_operation_status_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_operation_status_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_operation_status_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_operation_status_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_operation_status_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_operation_status_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_operation_status_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_operation_status_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_operation_status_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_operation_status_ans.error)
}

// -------------------------------------------------------------------

// reptile_abnormal_ask

// repeated .AFP_reptile_control.reptile_basic_info info = 1;
inline int reptile_abnormal_ask::info_size() const {
  return info_.size();
}
inline void reptile_abnormal_ask::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_basic_info& reptile_abnormal_ask::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_abnormal_ask.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_abnormal_ask::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_abnormal_ask.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_abnormal_ask::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_abnormal_ask.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
reptile_abnormal_ask::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_abnormal_ask.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
reptile_abnormal_ask::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_abnormal_ask.info)
  return &info_;
}

// optional bytes abnormal_info = 2;
inline bool reptile_abnormal_ask::has_abnormal_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_abnormal_ask::set_has_abnormal_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_abnormal_ask::clear_has_abnormal_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_abnormal_ask::clear_abnormal_info() {
  if (abnormal_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abnormal_info_->clear();
  }
  clear_has_abnormal_info();
}
inline const ::std::string& reptile_abnormal_ask::abnormal_info() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_abnormal_ask.abnormal_info)
  return *abnormal_info_;
}
inline void reptile_abnormal_ask::set_abnormal_info(const ::std::string& value) {
  set_has_abnormal_info();
  if (abnormal_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abnormal_info_ = new ::std::string;
  }
  abnormal_info_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_abnormal_ask.abnormal_info)
}
inline void reptile_abnormal_ask::set_abnormal_info(const char* value) {
  set_has_abnormal_info();
  if (abnormal_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abnormal_info_ = new ::std::string;
  }
  abnormal_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_abnormal_ask.abnormal_info)
}
inline void reptile_abnormal_ask::set_abnormal_info(const void* value, size_t size) {
  set_has_abnormal_info();
  if (abnormal_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abnormal_info_ = new ::std::string;
  }
  abnormal_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_abnormal_ask.abnormal_info)
}
inline ::std::string* reptile_abnormal_ask::mutable_abnormal_info() {
  set_has_abnormal_info();
  if (abnormal_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abnormal_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_abnormal_ask.abnormal_info)
  return abnormal_info_;
}
inline ::std::string* reptile_abnormal_ask::release_abnormal_info() {
  clear_has_abnormal_info();
  if (abnormal_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abnormal_info_;
    abnormal_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_abnormal_ask::set_allocated_abnormal_info(::std::string* abnormal_info) {
  if (abnormal_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abnormal_info_;
  }
  if (abnormal_info) {
    set_has_abnormal_info();
    abnormal_info_ = abnormal_info;
  } else {
    clear_has_abnormal_info();
    abnormal_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_abnormal_ask.abnormal_info)
}

// -------------------------------------------------------------------

// reptile_history_record_ask

// optional bytes reptile_name = 1;
inline bool reptile_history_record_ask::has_reptile_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_history_record_ask::set_has_reptile_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_history_record_ask::clear_has_reptile_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_history_record_ask::clear_reptile_name() {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_->clear();
  }
  clear_has_reptile_name();
}
inline const ::std::string& reptile_history_record_ask::reptile_name() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history_record_ask.reptile_name)
  return *reptile_name_;
}
inline void reptile_history_record_ask::set_reptile_name(const ::std::string& value) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_history_record_ask.reptile_name)
}
inline void reptile_history_record_ask::set_reptile_name(const char* value) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_history_record_ask.reptile_name)
}
inline void reptile_history_record_ask::set_reptile_name(const void* value, size_t size) {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  reptile_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_history_record_ask.reptile_name)
}
inline ::std::string* reptile_history_record_ask::mutable_reptile_name() {
  set_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_history_record_ask.reptile_name)
  return reptile_name_;
}
inline ::std::string* reptile_history_record_ask::release_reptile_name() {
  clear_has_reptile_name();
  if (reptile_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reptile_name_;
    reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_history_record_ask::set_allocated_reptile_name(::std::string* reptile_name) {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_name_;
  }
  if (reptile_name) {
    set_has_reptile_name();
    reptile_name_ = reptile_name;
  } else {
    clear_has_reptile_name();
    reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_history_record_ask.reptile_name)
}

// optional bytes time = 2;
inline bool reptile_history_record_ask::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_history_record_ask::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_history_record_ask::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_history_record_ask::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& reptile_history_record_ask::time() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history_record_ask.time)
  return *time_;
}
inline void reptile_history_record_ask::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_reptile_control.reptile_history_record_ask.time)
}
inline void reptile_history_record_ask::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_reptile_control.reptile_history_record_ask.time)
}
inline void reptile_history_record_ask::set_time(const void* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_reptile_control.reptile_history_record_ask.time)
}
inline ::std::string* reptile_history_record_ask::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_history_record_ask.time)
  return time_;
}
inline ::std::string* reptile_history_record_ask::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_history_record_ask::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_history_record_ask.time)
}

// -------------------------------------------------------------------

// reptile_history_record_ans

// repeated .AFP_reptile_control.reptile_history record = 1;
inline int reptile_history_record_ans::record_size() const {
  return record_.size();
}
inline void reptile_history_record_ans::clear_record() {
  record_.Clear();
}
inline const ::AFP_reptile_control::reptile_history& reptile_history_record_ans::record(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history_record_ans.record)
  return record_.Get(index);
}
inline ::AFP_reptile_control::reptile_history* reptile_history_record_ans::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_history_record_ans.record)
  return record_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_history* reptile_history_record_ans::add_record() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_history_record_ans.record)
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_history >&
reptile_history_record_ans::record() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_history_record_ans.record)
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_history >*
reptile_history_record_ans::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_history_record_ans.record)
  return &record_;
}

// optional .common.errorinfo error = 2;
inline bool reptile_history_record_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_history_record_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_history_record_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_history_record_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_history_record_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_history_record_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_history_record_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_history_record_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_history_record_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_history_record_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_history_record_ans.error)
}

// -------------------------------------------------------------------

// reptile_heartbeat_monitoring_ask

// -------------------------------------------------------------------

// reptile_heartbeat_monitoring_ans

// repeated .AFP_reptile_control.reptile_basic_info info = 1;
inline int reptile_heartbeat_monitoring_ans::info_size() const {
  return info_.size();
}
inline void reptile_heartbeat_monitoring_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_reptile_control::reptile_basic_info& reptile_heartbeat_monitoring_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_heartbeat_monitoring_ans.info)
  return info_.Get(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_heartbeat_monitoring_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_heartbeat_monitoring_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_reptile_control::reptile_basic_info* reptile_heartbeat_monitoring_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_reptile_control.reptile_heartbeat_monitoring_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >&
reptile_heartbeat_monitoring_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_reptile_control.reptile_heartbeat_monitoring_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_reptile_control::reptile_basic_info >*
reptile_heartbeat_monitoring_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_reptile_control.reptile_heartbeat_monitoring_ans.info)
  return &info_;
}

// optional .common.errorinfo error = 2;
inline bool reptile_heartbeat_monitoring_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_heartbeat_monitoring_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_heartbeat_monitoring_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_heartbeat_monitoring_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_heartbeat_monitoring_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_reptile_control.reptile_heartbeat_monitoring_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_heartbeat_monitoring_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_reptile_control.reptile_heartbeat_monitoring_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_heartbeat_monitoring_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_heartbeat_monitoring_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_reptile_control.reptile_heartbeat_monitoring_ans.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFP_reptile_control

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AFP_reptile_control::operation_status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFP_reptile_control::operation_status>() {
  return ::AFP_reptile_control::operation_status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AFP_5freptile_5fcontrol_2eproto__INCLUDED
