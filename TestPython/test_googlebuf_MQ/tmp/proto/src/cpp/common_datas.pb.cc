// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_datas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common_datas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common_datas {

namespace {

const ::google::protobuf::Descriptor* menu_items_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  menu_items_reflection_ = NULL;
const ::google::protobuf::Descriptor* menu_items_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  menu_items_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* menu_items_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  menu_items_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* item_api_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_5fdatas_2eproto() {
  protobuf_AddDesc_common_5fdatas_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common_datas.proto");
  GOOGLE_CHECK(file != NULL);
  menu_items_descriptor_ = file->message_type(0);
  static const int menu_items_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items, title_),
  };
  menu_items_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      menu_items_descriptor_,
      menu_items::default_instance_,
      menu_items_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(menu_items));
  menu_items_ask_descriptor_ = file->message_type(1);
  static const int menu_items_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ask, enum_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ask, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ask, ask_header_),
  };
  menu_items_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      menu_items_ask_descriptor_,
      menu_items_ask::default_instance_,
      menu_items_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(menu_items_ask));
  menu_items_ans_descriptor_ = file->message_type(2);
  static const int menu_items_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ans, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ans, result_),
  };
  menu_items_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      menu_items_ans_descriptor_,
      menu_items_ans::default_instance_,
      menu_items_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(menu_items_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(menu_items_ans));
  item_api_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_5fdatas_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    menu_items_descriptor_, &menu_items::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    menu_items_ask_descriptor_, &menu_items_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    menu_items_ans_descriptor_, &menu_items_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_5fdatas_2eproto() {
  delete menu_items::default_instance_;
  delete menu_items_reflection_;
  delete menu_items_ask::default_instance_;
  delete menu_items_ask_reflection_;
  delete menu_items_ans::default_instance_;
  delete menu_items_ans_reflection_;
}

void protobuf_AddDesc_common_5fdatas_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022common_datas.proto\022\014common_datas\032\014comm"
    "on.proto\"\'\n\nmenu_items\022\n\n\002id\030\001 \001(\014\022\r\n\005ti"
    "tle\030\002 \001(\014\"\203\001\n\016menu_items_ask\022.\n\tenum_typ"
    "e\030\001 \001(\0162\033.common_datas.item_api_type\022\022\n\n"
    "os_version\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132\031.c"
    "ommon.common_ask_header\"]\n\016menu_items_an"
    "s\022&\n\004item\030\001 \003(\0132\030.common_datas.menu_item"
    "s\022#\n\006result\030\002 \001(\0132\023.common.result_info*)"
    "\n\ritem_api_type\022\030\n\024TerminalVersionItems\020"
    "\001", 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_datas.proto", &protobuf_RegisterTypes);
  menu_items::default_instance_ = new menu_items();
  menu_items_ask::default_instance_ = new menu_items_ask();
  menu_items_ans::default_instance_ = new menu_items_ans();
  menu_items::default_instance_->InitAsDefaultInstance();
  menu_items_ask::default_instance_->InitAsDefaultInstance();
  menu_items_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_5fdatas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_5fdatas_2eproto {
  StaticDescriptorInitializer_common_5fdatas_2eproto() {
    protobuf_AddDesc_common_5fdatas_2eproto();
  }
} static_descriptor_initializer_common_5fdatas_2eproto_;
const ::google::protobuf::EnumDescriptor* item_api_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_api_type_descriptor_;
}
bool item_api_type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int menu_items::kIdFieldNumber;
const int menu_items::kTitleFieldNumber;
#endif  // !_MSC_VER

menu_items::menu_items()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common_datas.menu_items)
}

void menu_items::InitAsDefaultInstance() {
}

menu_items::menu_items(const menu_items& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common_datas.menu_items)
}

void menu_items::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

menu_items::~menu_items() {
  // @@protoc_insertion_point(destructor:common_datas.menu_items)
  SharedDtor();
}

void menu_items::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void menu_items::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* menu_items::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return menu_items_descriptor_;
}

const menu_items& menu_items::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdatas_2eproto();
  return *default_instance_;
}

menu_items* menu_items::default_instance_ = NULL;

menu_items* menu_items::New() const {
  return new menu_items;
}

void menu_items::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool menu_items::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common_datas.menu_items)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional bytes title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common_datas.menu_items)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common_datas.menu_items)
  return false;
#undef DO_
}

void menu_items::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common_datas.menu_items)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common_datas.menu_items)
}

::google::protobuf::uint8* menu_items::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common_datas.menu_items)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common_datas.menu_items)
  return target;
}

int menu_items::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void menu_items::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const menu_items* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const menu_items*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void menu_items::MergeFrom(const menu_items& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void menu_items::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void menu_items::CopyFrom(const menu_items& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool menu_items::IsInitialized() const {

  return true;
}

void menu_items::Swap(menu_items* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata menu_items::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = menu_items_descriptor_;
  metadata.reflection = menu_items_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int menu_items_ask::kEnumTypeFieldNumber;
const int menu_items_ask::kOsVersionFieldNumber;
const int menu_items_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

menu_items_ask::menu_items_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common_datas.menu_items_ask)
}

void menu_items_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

menu_items_ask::menu_items_ask(const menu_items_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common_datas.menu_items_ask)
}

void menu_items_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enum_type_ = 1;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

menu_items_ask::~menu_items_ask() {
  // @@protoc_insertion_point(destructor:common_datas.menu_items_ask)
  SharedDtor();
}

void menu_items_ask::SharedDtor() {
  if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_version_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void menu_items_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* menu_items_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return menu_items_ask_descriptor_;
}

const menu_items_ask& menu_items_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdatas_2eproto();
  return *default_instance_;
}

menu_items_ask* menu_items_ask::default_instance_ = NULL;

menu_items_ask* menu_items_ask::New() const {
  return new menu_items_ask;
}

void menu_items_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    enum_type_ = 1;
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_version_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool menu_items_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common_datas.menu_items_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common_datas.item_api_type enum_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common_datas::item_api_type_IsValid(value)) {
            set_enum_type(static_cast< ::common_datas::item_api_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_os_version;
        break;
      }

      // optional bytes os_version = 2;
      case 2: {
        if (tag == 18) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common_datas.menu_items_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common_datas.menu_items_ask)
  return false;
#undef DO_
}

void menu_items_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common_datas.menu_items_ask)
  // optional .common_datas.item_api_type enum_type = 1;
  if (has_enum_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->enum_type(), output);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->os_version(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common_datas.menu_items_ask)
}

::google::protobuf::uint8* menu_items_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common_datas.menu_items_ask)
  // optional .common_datas.item_api_type enum_type = 1;
  if (has_enum_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->enum_type(), target);
  }

  // optional bytes os_version = 2;
  if (has_os_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->os_version(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common_datas.menu_items_ask)
  return target;
}

int menu_items_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common_datas.item_api_type enum_type = 1;
    if (has_enum_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_type());
    }

    // optional bytes os_version = 2;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void menu_items_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const menu_items_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const menu_items_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void menu_items_ask::MergeFrom(const menu_items_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enum_type()) {
      set_enum_type(from.enum_type());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void menu_items_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void menu_items_ask::CopyFrom(const menu_items_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool menu_items_ask::IsInitialized() const {

  return true;
}

void menu_items_ask::Swap(menu_items_ask* other) {
  if (other != this) {
    std::swap(enum_type_, other->enum_type_);
    std::swap(os_version_, other->os_version_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata menu_items_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = menu_items_ask_descriptor_;
  metadata.reflection = menu_items_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int menu_items_ans::kItemFieldNumber;
const int menu_items_ans::kResultFieldNumber;
#endif  // !_MSC_VER

menu_items_ans::menu_items_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common_datas.menu_items_ans)
}

void menu_items_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

menu_items_ans::menu_items_ans(const menu_items_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common_datas.menu_items_ans)
}

void menu_items_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

menu_items_ans::~menu_items_ans() {
  // @@protoc_insertion_point(destructor:common_datas.menu_items_ans)
  SharedDtor();
}

void menu_items_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void menu_items_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* menu_items_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return menu_items_ans_descriptor_;
}

const menu_items_ans& menu_items_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdatas_2eproto();
  return *default_instance_;
}

menu_items_ans* menu_items_ans::default_instance_ = NULL;

menu_items_ans* menu_items_ans::New() const {
  return new menu_items_ans;
}

void menu_items_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool menu_items_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common_datas.menu_items_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common_datas.menu_items item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common_datas.menu_items_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common_datas.menu_items_ans)
  return false;
#undef DO_
}

void menu_items_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common_datas.menu_items_ans)
  // repeated .common_datas.menu_items item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common_datas.menu_items_ans)
}

::google::protobuf::uint8* menu_items_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common_datas.menu_items_ans)
  // repeated .common_datas.menu_items item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common_datas.menu_items_ans)
  return target;
}

int menu_items_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .common_datas.menu_items item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void menu_items_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const menu_items_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const menu_items_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void menu_items_ans::MergeFrom(const menu_items_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void menu_items_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void menu_items_ans::CopyFrom(const menu_items_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool menu_items_ans::IsInitialized() const {

  return true;
}

void menu_items_ans::Swap(menu_items_ans* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata menu_items_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = menu_items_ans_descriptor_;
  metadata.reflection = menu_items_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common_datas

// @@protoc_insertion_point(global_scope)
