// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ODP_bid_analysis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ODP_bid_analysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ODP_bid_analysis {

namespace {

const ::google::protobuf::Descriptor* statistics_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistics_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_count_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_count_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_area_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_area_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_detail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_detail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistics_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistics_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistics_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistics_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* detail_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detail_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* detail_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detail_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* different_rate_fullbid_time_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  different_rate_fullbid_time_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* different_rate_fullbid_time_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  different_rate_fullbid_time_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* different_rate_fullbid_details_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  different_rate_fullbid_details_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_city_inquire_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_city_inquire_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_city_inquire_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_city_inquire_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_area_distribution_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_area_distribution_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_area_distribution_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_area_distribution_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_area_distribution_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_area_distribution_detail_ask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ask_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* full_bid_ask_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto() {
  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ODP_bid_analysis.proto");
  GOOGLE_CHECK(file != NULL);
  statistics_info_descriptor_ = file->message_type(0);
  static const int statistics_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info, tick_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info, tick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info, bid_count_),
  };
  statistics_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistics_info_descriptor_,
      statistics_info::default_instance_,
      statistics_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistics_info));
  bid_count_info_descriptor_ = file->message_type(1);
  static const int bid_count_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_count_info, tick_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_count_info, tick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_count_info, info_),
  };
  bid_count_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_count_info_descriptor_,
      bid_count_info::default_instance_,
      bid_count_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_count_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_count_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_count_info));
  area_name_descriptor_ = file->message_type(2);
  static const int area_name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, name_),
  };
  area_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_name_descriptor_,
      area_name::default_instance_,
      area_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_name));
  bid_area_info_descriptor_ = file->message_type(3);
  static const int bid_area_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_info, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_info, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_info, bid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_info, bid_count_rate_),
  };
  bid_area_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_area_info_descriptor_,
      bid_area_info::default_instance_,
      bid_area_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_area_info));
  bid_detail_info_descriptor_ = file->message_type(4);
  static const int bid_detail_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, mobile_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, id_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, guarantee_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, repayment_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, fullbiddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, fullbidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, borrowing_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, bid_runoff_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, city_),
  };
  bid_detail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_detail_info_descriptor_,
      bid_detail_info::default_instance_,
      bid_detail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_detail_info));
  statistics_info_ask_descriptor_ = file->message_type(5);
  static const int statistics_info_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ask, ask_header_),
  };
  statistics_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistics_info_ask_descriptor_,
      statistics_info_ask::default_instance_,
      statistics_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistics_info_ask));
  statistics_info_ans_descriptor_ = file->message_type(6);
  static const int statistics_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ans, result_),
  };
  statistics_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistics_info_ans_descriptor_,
      statistics_info_ans::default_instance_,
      statistics_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistics_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistics_info_ans));
  detail_info_ask_descriptor_ = file->message_type(7);
  static const int detail_info_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, tick_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, num_of_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, ask_header_),
  };
  detail_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detail_info_ask_descriptor_,
      detail_info_ask::default_instance_,
      detail_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detail_info_ask));
  detail_info_ans_descriptor_ = file->message_type(8);
  static const int detail_info_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ans, result_),
  };
  detail_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detail_info_ans_descriptor_,
      detail_info_ans::default_instance_,
      detail_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detail_info_ans));
  different_rate_fullbid_time_ask_descriptor_ = file->message_type(9);
  static const int different_rate_fullbid_time_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ask, ask_header_),
  };
  different_rate_fullbid_time_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      different_rate_fullbid_time_ask_descriptor_,
      different_rate_fullbid_time_ask::default_instance_,
      different_rate_fullbid_time_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(different_rate_fullbid_time_ask));
  different_rate_fullbid_time_ans_descriptor_ = file->message_type(10);
  static const int different_rate_fullbid_time_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ans, result_),
  };
  different_rate_fullbid_time_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      different_rate_fullbid_time_ans_descriptor_,
      different_rate_fullbid_time_ans::default_instance_,
      different_rate_fullbid_time_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_time_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(different_rate_fullbid_time_ans));
  different_rate_fullbid_details_ask_descriptor_ = file->message_type(11);
  static const int different_rate_fullbid_details_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, bid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, bid_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, num_of_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, ask_header_),
  };
  different_rate_fullbid_details_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      different_rate_fullbid_details_ask_descriptor_,
      different_rate_fullbid_details_ask::default_instance_,
      different_rate_fullbid_details_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(different_rate_fullbid_details_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(different_rate_fullbid_details_ask));
  province_city_inquire_ask_descriptor_ = file->message_type(12);
  static const int province_city_inquire_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, ask_header_),
  };
  province_city_inquire_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      province_city_inquire_ask_descriptor_,
      province_city_inquire_ask::default_instance_,
      province_city_inquire_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(province_city_inquire_ask));
  province_city_inquire_ans_descriptor_ = file->message_type(13);
  static const int province_city_inquire_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, province_or_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, result_),
  };
  province_city_inquire_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      province_city_inquire_ans_descriptor_,
      province_city_inquire_ans::default_instance_,
      province_city_inquire_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(province_city_inquire_ans));
  bid_area_distribution_ask_descriptor_ = file->message_type(14);
  static const int bid_area_distribution_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ask, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ask, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ask, ask_header_),
  };
  bid_area_distribution_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_area_distribution_ask_descriptor_,
      bid_area_distribution_ask::default_instance_,
      bid_area_distribution_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_area_distribution_ask));
  bid_area_distribution_ans_descriptor_ = file->message_type(15);
  static const int bid_area_distribution_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ans, result_),
  };
  bid_area_distribution_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_area_distribution_ans_descriptor_,
      bid_area_distribution_ans::default_instance_,
      bid_area_distribution_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_area_distribution_ans));
  bid_area_distribution_detail_ask_descriptor_ = file->message_type(16);
  static const int bid_area_distribution_detail_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, num_of_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, ask_header_),
  };
  bid_area_distribution_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_area_distribution_detail_ask_descriptor_,
      bid_area_distribution_detail_ask::default_instance_,
      bid_area_distribution_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_area_distribution_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_area_distribution_detail_ask));
  ask_type_descriptor_ = file->enum_type(0);
  full_bid_ask_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistics_info_descriptor_, &statistics_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_count_info_descriptor_, &bid_count_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_name_descriptor_, &area_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_area_info_descriptor_, &bid_area_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_detail_info_descriptor_, &bid_detail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistics_info_ask_descriptor_, &statistics_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistics_info_ans_descriptor_, &statistics_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detail_info_ask_descriptor_, &detail_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detail_info_ans_descriptor_, &detail_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    different_rate_fullbid_time_ask_descriptor_, &different_rate_fullbid_time_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    different_rate_fullbid_time_ans_descriptor_, &different_rate_fullbid_time_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    different_rate_fullbid_details_ask_descriptor_, &different_rate_fullbid_details_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    province_city_inquire_ask_descriptor_, &province_city_inquire_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    province_city_inquire_ans_descriptor_, &province_city_inquire_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_area_distribution_ask_descriptor_, &bid_area_distribution_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_area_distribution_ans_descriptor_, &bid_area_distribution_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_area_distribution_detail_ask_descriptor_, &bid_area_distribution_detail_ask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto() {
  delete statistics_info::default_instance_;
  delete statistics_info_reflection_;
  delete bid_count_info::default_instance_;
  delete bid_count_info_reflection_;
  delete area_name::default_instance_;
  delete area_name_reflection_;
  delete bid_area_info::default_instance_;
  delete bid_area_info_reflection_;
  delete bid_detail_info::default_instance_;
  delete bid_detail_info_reflection_;
  delete statistics_info_ask::default_instance_;
  delete statistics_info_ask_reflection_;
  delete statistics_info_ans::default_instance_;
  delete statistics_info_ans_reflection_;
  delete detail_info_ask::default_instance_;
  delete detail_info_ask_reflection_;
  delete detail_info_ans::default_instance_;
  delete detail_info_ans_reflection_;
  delete different_rate_fullbid_time_ask::default_instance_;
  delete different_rate_fullbid_time_ask_reflection_;
  delete different_rate_fullbid_time_ans::default_instance_;
  delete different_rate_fullbid_time_ans_reflection_;
  delete different_rate_fullbid_details_ask::default_instance_;
  delete different_rate_fullbid_details_ask_reflection_;
  delete province_city_inquire_ask::default_instance_;
  delete province_city_inquire_ask_reflection_;
  delete province_city_inquire_ans::default_instance_;
  delete province_city_inquire_ans_reflection_;
  delete bid_area_distribution_ask::default_instance_;
  delete bid_area_distribution_ask_reflection_;
  delete bid_area_distribution_ans::default_instance_;
  delete bid_area_distribution_ans_reflection_;
  delete bid_area_distribution_detail_ask::default_instance_;
  delete bid_area_distribution_detail_ask_reflection_;
}

void protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ODP_bid_analysis.proto\022\020ODP_bid_analys"
    "is\032\014common.proto\"H\n\017statistics_info\022\017\n\007t"
    "ick_no\030\001 \001(\005\022\021\n\ttick_name\030\002 \001(\014\022\021\n\tbid_c"
    "ount\030\003 \001(\005\"e\n\016bid_count_info\022\017\n\007tick_no\030"
    "\001 \001(\005\022\021\n\ttick_name\030\002 \001(\014\022/\n\004info\030\003 \003(\0132!"
    ".ODP_bid_analysis.statistics_info\"*\n\tare"
    "a_name\022\017\n\007area_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"\224\001"
    "\n\rbid_area_info\022-\n\010province\030\001 \001(\0132\033.ODP_"
    "bid_analysis.area_name\022)\n\004city\030\002 \001(\0132\033.O"
    "DP_bid_analysis.area_name\022\021\n\tbid_count\030\003"
    " \001(\005\022\026\n\016bid_count_rate\030\004 \001(\002\"\311\002\n\017bid_det"
    "ail_info\022\020\n\010username\030\001 \001(\014\022\020\n\010NickName\030\002"
    " \001(\014\022\021\n\tmobile_no\030\003 \001(\014\022\022\n\nid_card_no\030\004 "
    "\001(\014\022\016\n\006amount\030\005 \001(\002\022\020\n\010datetime\030\006 \001(\014\022\014\n"
    "\004rate\030\007 \001(\014\022\026\n\016guarantee_rate\030\010 \001(\014\022\026\n\016r"
    "epayment_type\030\t \001(\014\022\023\n\013fullbiddate\030\n \001(\014"
    "\022\023\n\013fullbidtime\030\013 \001(\005\022\027\n\017borrowing_month"
    "\030\014 \001(\014\022\r\n\005state\030\r \001(\014\022\031\n\021bid_runoff_reas"
    "on\030\016 \001(\014\022\020\n\010province\030\017 \001(\014\022\014\n\004city\030\020 \001(\014"
    "\"n\n\023statistics_info_ask\022(\n\004type\030\001 \001(\0162\032."
    "ODP_bid_analysis.ask_type\022-\n\nask_header\030"
    "\002 \001(\0132\031.common.common_ask_header\"k\n\023stat"
    "istics_info_ans\022/\n\004info\030\001 \003(\0132!.ODP_bid_"
    "analysis.statistics_info\022#\n\006result\030\002 \001(\013"
    "2\023.common.result_info\"\243\001\n\017detail_info_as"
    "k\022(\n\004type\030\001 \001(\0162\032.ODP_bid_analysis.ask_t"
    "ype\022\017\n\007tick_no\030\002 \001(\005\022\025\n\rnum_of_record\030\003 "
    "\001(\005\022\017\n\007curpage\030\004 \001(\005\022-\n\nask_header\030\005 \001(\013"
    "2\031.common.common_ask_header\"}\n\017detail_in"
    "fo_ans\022\024\n\014total_number\030\001 \001(\005\022/\n\004info\030\002 \003"
    "(\0132!.ODP_bid_analysis.bid_detail_info\022#\n"
    "\006result\030\003 \001(\0132\023.common.result_info\"\203\001\n\037d"
    "ifferent_rate_fullbid_time_ask\0221\n\004type\030\001"
    " \001(\0162#.ODP_bid_analysis.full_bid_ask_typ"
    "e\022-\n\nask_header\030\002 \001(\0132\031.common.common_as"
    "k_header\"v\n\037different_rate_fullbid_time_"
    "ans\022.\n\004info\030\001 \003(\0132 .ODP_bid_analysis.bid"
    "_count_info\022#\n\006result\030\002 \001(\0132\023.common.res"
    "ult_info\"\237\001\n\"different_rate_fullbid_deta"
    "ils_ask\022\020\n\010bid_time\030\001 \001(\005\022\020\n\010bid_rate\030\002 "
    "\001(\005\022\025\n\rnum_of_record\030\003 \001(\005\022\017\n\007curpage\030\004 "
    "\001(\005\022-\n\nask_header\030\005 \001(\0132\031.common.common_"
    "ask_header\"y\n\031province_city_inquire_ask\022"
    "-\n\010province\030\001 \001(\0132\033.ODP_bid_analysis.are"
    "a_name\022-\n\nask_header\030\002 \001(\0132\031.common.comm"
    "on_ask_header\"w\n\031province_city_inquire_a"
    "ns\0225\n\020province_or_city\030\001 \003(\0132\033.ODP_bid_a"
    "nalysis.area_name\022#\n\006result\030\002 \001(\0132\023.comm"
    "on.result_info\"\244\001\n\031bid_area_distribution"
    "_ask\022-\n\010province\030\001 \001(\0132\033.ODP_bid_analysi"
    "s.area_name\022)\n\004city\030\002 \001(\0132\033.ODP_bid_anal"
    "ysis.area_name\022-\n\nask_header\030\003 \001(\0132\031.com"
    "mon.common_ask_header\"o\n\031bid_area_distri"
    "bution_ans\022-\n\004info\030\001 \003(\0132\037.ODP_bid_analy"
    "sis.bid_area_info\022#\n\006result\030\002 \001(\0132\023.comm"
    "on.result_info\"\323\001\n bid_area_distribution"
    "_detail_ask\022-\n\010province\030\001 \001(\0132\033.ODP_bid_"
    "analysis.area_name\022)\n\004city\030\002 \001(\0132\033.ODP_b"
    "id_analysis.area_name\022\025\n\rnum_of_record\030\003"
    " \001(\005\022\017\n\007curpage\030\004 \001(\005\022-\n\nask_header\030\005 \001("
    "\0132\031.common.common_ask_header*\200\003\n\010ask_typ"
    "e\022\032\n\026page_bid_interest_rate\020\001\022\027\n\023page_re"
    "payment_type\020\002\022\023\n\017page_limit_time\020\003\022\025\n\021p"
    "age_borrow_mount\020\004\022\022\n\016page_bid_speed\020\005\022\023"
    "\n\017page_bid_status\020\006\022\023\n\017page_bid_runoff\020\007"
    "\022\"\n\036page_bid_interest_rate_tick_no\020\010\022\037\n\033"
    "page_repayment_type_tick_no\020\t\022\033\n\027page_li"
    "mit_time_tick_no\020\n\022\035\n\031page_borrow_mount_"
    "tick_no\020\013\022\032\n\026page_bid_speed_tick_no\020\014\022\033\n"
    "\027page_bid_status_tick_no\020\r\022\033\n\027page_bid_r"
    "unoff_tick_no\020\016*\?\n\021full_bid_ask_type\022\024\n\020"
    "full_bid_statics\020\001\022\024\n\020full_bid_tick_no\020\002", 2880);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ODP_bid_analysis.proto", &protobuf_RegisterTypes);
  statistics_info::default_instance_ = new statistics_info();
  bid_count_info::default_instance_ = new bid_count_info();
  area_name::default_instance_ = new area_name();
  bid_area_info::default_instance_ = new bid_area_info();
  bid_detail_info::default_instance_ = new bid_detail_info();
  statistics_info_ask::default_instance_ = new statistics_info_ask();
  statistics_info_ans::default_instance_ = new statistics_info_ans();
  detail_info_ask::default_instance_ = new detail_info_ask();
  detail_info_ans::default_instance_ = new detail_info_ans();
  different_rate_fullbid_time_ask::default_instance_ = new different_rate_fullbid_time_ask();
  different_rate_fullbid_time_ans::default_instance_ = new different_rate_fullbid_time_ans();
  different_rate_fullbid_details_ask::default_instance_ = new different_rate_fullbid_details_ask();
  province_city_inquire_ask::default_instance_ = new province_city_inquire_ask();
  province_city_inquire_ans::default_instance_ = new province_city_inquire_ans();
  bid_area_distribution_ask::default_instance_ = new bid_area_distribution_ask();
  bid_area_distribution_ans::default_instance_ = new bid_area_distribution_ans();
  bid_area_distribution_detail_ask::default_instance_ = new bid_area_distribution_detail_ask();
  statistics_info::default_instance_->InitAsDefaultInstance();
  bid_count_info::default_instance_->InitAsDefaultInstance();
  area_name::default_instance_->InitAsDefaultInstance();
  bid_area_info::default_instance_->InitAsDefaultInstance();
  bid_detail_info::default_instance_->InitAsDefaultInstance();
  statistics_info_ask::default_instance_->InitAsDefaultInstance();
  statistics_info_ans::default_instance_->InitAsDefaultInstance();
  detail_info_ask::default_instance_->InitAsDefaultInstance();
  detail_info_ans::default_instance_->InitAsDefaultInstance();
  different_rate_fullbid_time_ask::default_instance_->InitAsDefaultInstance();
  different_rate_fullbid_time_ans::default_instance_->InitAsDefaultInstance();
  different_rate_fullbid_details_ask::default_instance_->InitAsDefaultInstance();
  province_city_inquire_ask::default_instance_->InitAsDefaultInstance();
  province_city_inquire_ans::default_instance_->InitAsDefaultInstance();
  bid_area_distribution_ask::default_instance_->InitAsDefaultInstance();
  bid_area_distribution_ans::default_instance_->InitAsDefaultInstance();
  bid_area_distribution_detail_ask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ODP_5fbid_5fanalysis_2eproto {
  StaticDescriptorInitializer_ODP_5fbid_5fanalysis_2eproto() {
    protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  }
} static_descriptor_initializer_ODP_5fbid_5fanalysis_2eproto_;
const ::google::protobuf::EnumDescriptor* ask_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ask_type_descriptor_;
}
bool ask_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* full_bid_ask_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return full_bid_ask_type_descriptor_;
}
bool full_bid_ask_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int statistics_info::kTickNoFieldNumber;
const int statistics_info::kTickNameFieldNumber;
const int statistics_info::kBidCountFieldNumber;
#endif  // !_MSC_VER

statistics_info::statistics_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.statistics_info)
}

void statistics_info::InitAsDefaultInstance() {
}

statistics_info::statistics_info(const statistics_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.statistics_info)
}

void statistics_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tick_no_ = 0;
  tick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistics_info::~statistics_info() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.statistics_info)
  SharedDtor();
}

void statistics_info::SharedDtor() {
  if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tick_name_;
  }
  if (this != default_instance_) {
  }
}

void statistics_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistics_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistics_info_descriptor_;
}

const statistics_info& statistics_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

statistics_info* statistics_info::default_instance_ = NULL;

statistics_info* statistics_info::New() const {
  return new statistics_info;
}

void statistics_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<statistics_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(tick_no_, bid_count_);
    if (has_tick_name()) {
      if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tick_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistics_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.statistics_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_no_)));
          set_has_tick_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tick_name;
        break;
      }

      // optional bytes tick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bid_count;
        break;
      }

      // optional int32 bid_count = 3;
      case 3: {
        if (tag == 24) {
         parse_bid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_count_)));
          set_has_bid_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.statistics_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.statistics_info)
  return false;
#undef DO_
}

void statistics_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.statistics_info)
  // optional int32 tick_no = 1;
  if (has_tick_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick_no(), output);
  }

  // optional bytes tick_name = 2;
  if (has_tick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tick_name(), output);
  }

  // optional int32 bid_count = 3;
  if (has_bid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bid_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.statistics_info)
}

::google::protobuf::uint8* statistics_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.statistics_info)
  // optional int32 tick_no = 1;
  if (has_tick_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick_no(), target);
  }

  // optional bytes tick_name = 2;
  if (has_tick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tick_name(), target);
  }

  // optional int32 bid_count = 3;
  if (has_bid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bid_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.statistics_info)
  return target;
}

int statistics_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tick_no = 1;
    if (has_tick_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_no());
    }

    // optional bytes tick_name = 2;
    if (has_tick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tick_name());
    }

    // optional int32 bid_count = 3;
    if (has_bid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistics_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistics_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistics_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistics_info::MergeFrom(const statistics_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick_no()) {
      set_tick_no(from.tick_no());
    }
    if (from.has_tick_name()) {
      set_tick_name(from.tick_name());
    }
    if (from.has_bid_count()) {
      set_bid_count(from.bid_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistics_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistics_info::CopyFrom(const statistics_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistics_info::IsInitialized() const {

  return true;
}

void statistics_info::Swap(statistics_info* other) {
  if (other != this) {
    std::swap(tick_no_, other->tick_no_);
    std::swap(tick_name_, other->tick_name_);
    std::swap(bid_count_, other->bid_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistics_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistics_info_descriptor_;
  metadata.reflection = statistics_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_count_info::kTickNoFieldNumber;
const int bid_count_info::kTickNameFieldNumber;
const int bid_count_info::kInfoFieldNumber;
#endif  // !_MSC_VER

bid_count_info::bid_count_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.bid_count_info)
}

void bid_count_info::InitAsDefaultInstance() {
}

bid_count_info::bid_count_info(const bid_count_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.bid_count_info)
}

void bid_count_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tick_no_ = 0;
  tick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_count_info::~bid_count_info() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.bid_count_info)
  SharedDtor();
}

void bid_count_info::SharedDtor() {
  if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tick_name_;
  }
  if (this != default_instance_) {
  }
}

void bid_count_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_count_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_count_info_descriptor_;
}

const bid_count_info& bid_count_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

bid_count_info* bid_count_info::default_instance_ = NULL;

bid_count_info* bid_count_info::New() const {
  return new bid_count_info;
}

void bid_count_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tick_no_ = 0;
    if (has_tick_name()) {
      if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tick_name_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_count_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.bid_count_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_no_)));
          set_has_tick_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tick_name;
        break;
      }

      // optional bytes tick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ODP_bid_analysis.statistics_info info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.bid_count_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.bid_count_info)
  return false;
#undef DO_
}

void bid_count_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.bid_count_info)
  // optional int32 tick_no = 1;
  if (has_tick_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick_no(), output);
  }

  // optional bytes tick_name = 2;
  if (has_tick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tick_name(), output);
  }

  // repeated .ODP_bid_analysis.statistics_info info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.bid_count_info)
}

::google::protobuf::uint8* bid_count_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.bid_count_info)
  // optional int32 tick_no = 1;
  if (has_tick_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick_no(), target);
  }

  // optional bytes tick_name = 2;
  if (has_tick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tick_name(), target);
  }

  // repeated .ODP_bid_analysis.statistics_info info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.bid_count_info)
  return target;
}

int bid_count_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tick_no = 1;
    if (has_tick_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_no());
    }

    // optional bytes tick_name = 2;
    if (has_tick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tick_name());
    }

  }
  // repeated .ODP_bid_analysis.statistics_info info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_count_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_count_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_count_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_count_info::MergeFrom(const bid_count_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick_no()) {
      set_tick_no(from.tick_no());
    }
    if (from.has_tick_name()) {
      set_tick_name(from.tick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_count_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_count_info::CopyFrom(const bid_count_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_count_info::IsInitialized() const {

  return true;
}

void bid_count_info::Swap(bid_count_info* other) {
  if (other != this) {
    std::swap(tick_no_, other->tick_no_);
    std::swap(tick_name_, other->tick_name_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_count_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_count_info_descriptor_;
  metadata.reflection = bid_count_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_name::kAreaIdFieldNumber;
const int area_name::kNameFieldNumber;
#endif  // !_MSC_VER

area_name::area_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.area_name)
}

void area_name::InitAsDefaultInstance() {
}

area_name::area_name(const area_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.area_name)
}

void area_name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  area_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_name::~area_name() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.area_name)
  SharedDtor();
}

void area_name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void area_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_name_descriptor_;
}

const area_name& area_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

area_name* area_name::default_instance_ = NULL;

area_name* area_name::New() const {
  return new area_name;
}

void area_name::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    area_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.area_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.area_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.area_name)
  return false;
#undef DO_
}

void area_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.area_name)
  // optional int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.area_name)
}

::google::protobuf::uint8* area_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.area_name)
  // optional int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.area_name)
  return target;
}

int area_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_name::MergeFrom(const area_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_name::CopyFrom(const area_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_name::IsInitialized() const {

  return true;
}

void area_name::Swap(area_name* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_name_descriptor_;
  metadata.reflection = area_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_area_info::kProvinceFieldNumber;
const int bid_area_info::kCityFieldNumber;
const int bid_area_info::kBidCountFieldNumber;
const int bid_area_info::kBidCountRateFieldNumber;
#endif  // !_MSC_VER

bid_area_info::bid_area_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.bid_area_info)
}

void bid_area_info::InitAsDefaultInstance() {
  province_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
  city_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
}

bid_area_info::bid_area_info(const bid_area_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.bid_area_info)
}

void bid_area_info::SharedCtor() {
  _cached_size_ = 0;
  province_ = NULL;
  city_ = NULL;
  bid_count_ = 0;
  bid_count_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_area_info::~bid_area_info() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.bid_area_info)
  SharedDtor();
}

void bid_area_info::SharedDtor() {
  if (this != default_instance_) {
    delete province_;
    delete city_;
  }
}

void bid_area_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_area_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_area_info_descriptor_;
}

const bid_area_info& bid_area_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

bid_area_info* bid_area_info::default_instance_ = NULL;

bid_area_info* bid_area_info::New() const {
  return new bid_area_info;
}

void bid_area_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_area_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(bid_count_, bid_count_rate_);
    if (has_province()) {
      if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
    }
    if (has_city()) {
      if (city_ != NULL) city_->::ODP_bid_analysis::area_name::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_area_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.bid_area_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.area_name province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional .ODP_bid_analysis.area_name city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bid_count;
        break;
      }

      // optional int32 bid_count = 3;
      case 3: {
        if (tag == 24) {
         parse_bid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_count_)));
          set_has_bid_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bid_count_rate;
        break;
      }

      // optional float bid_count_rate = 4;
      case 4: {
        if (tag == 37) {
         parse_bid_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bid_count_rate_)));
          set_has_bid_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.bid_area_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.bid_area_info)
  return false;
#undef DO_
}

void bid_area_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.bid_area_info)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->province(), output);
  }

  // optional .ODP_bid_analysis.area_name city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city(), output);
  }

  // optional int32 bid_count = 3;
  if (has_bid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bid_count(), output);
  }

  // optional float bid_count_rate = 4;
  if (has_bid_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bid_count_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.bid_area_info)
}

::google::protobuf::uint8* bid_area_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.bid_area_info)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->province(), target);
  }

  // optional .ODP_bid_analysis.area_name city = 2;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city(), target);
  }

  // optional int32 bid_count = 3;
  if (has_bid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bid_count(), target);
  }

  // optional float bid_count_rate = 4;
  if (has_bid_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bid_count_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.bid_area_info)
  return target;
}

int bid_area_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.area_name province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->province());
    }

    // optional .ODP_bid_analysis.area_name city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

    // optional int32 bid_count = 3;
    if (has_bid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_count());
    }

    // optional float bid_count_rate = 4;
    if (has_bid_count_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_area_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_area_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_area_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_area_info::MergeFrom(const bid_area_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      mutable_province()->::ODP_bid_analysis::area_name::MergeFrom(from.province());
    }
    if (from.has_city()) {
      mutable_city()->::ODP_bid_analysis::area_name::MergeFrom(from.city());
    }
    if (from.has_bid_count()) {
      set_bid_count(from.bid_count());
    }
    if (from.has_bid_count_rate()) {
      set_bid_count_rate(from.bid_count_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_area_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_area_info::CopyFrom(const bid_area_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_area_info::IsInitialized() const {

  return true;
}

void bid_area_info::Swap(bid_area_info* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(bid_count_, other->bid_count_);
    std::swap(bid_count_rate_, other->bid_count_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_area_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_area_info_descriptor_;
  metadata.reflection = bid_area_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_detail_info::kUsernameFieldNumber;
const int bid_detail_info::kNickNameFieldNumber;
const int bid_detail_info::kMobileNoFieldNumber;
const int bid_detail_info::kIdCardNoFieldNumber;
const int bid_detail_info::kAmountFieldNumber;
const int bid_detail_info::kDatetimeFieldNumber;
const int bid_detail_info::kRateFieldNumber;
const int bid_detail_info::kGuaranteeRateFieldNumber;
const int bid_detail_info::kRepaymentTypeFieldNumber;
const int bid_detail_info::kFullbiddateFieldNumber;
const int bid_detail_info::kFullbidtimeFieldNumber;
const int bid_detail_info::kBorrowingMonthFieldNumber;
const int bid_detail_info::kStateFieldNumber;
const int bid_detail_info::kBidRunoffReasonFieldNumber;
const int bid_detail_info::kProvinceFieldNumber;
const int bid_detail_info::kCityFieldNumber;
#endif  // !_MSC_VER

bid_detail_info::bid_detail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.bid_detail_info)
}

void bid_detail_info::InitAsDefaultInstance() {
}

bid_detail_info::bid_detail_info(const bid_detail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.bid_detail_info)
}

void bid_detail_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guarantee_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repayment_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullbiddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullbidtime_ = 0;
  borrowing_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_runoff_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_detail_info::~bid_detail_info() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.bid_detail_info)
  SharedDtor();
}

void bid_detail_info::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_no_;
  }
  if (datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datetime_;
  }
  if (rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rate_;
  }
  if (guarantee_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guarantee_rate_;
  }
  if (repayment_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_type_;
  }
  if (fullbiddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fullbiddate_;
  }
  if (borrowing_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowing_month_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (bid_runoff_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_runoff_reason_;
  }
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void bid_detail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_detail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_detail_info_descriptor_;
}

const bid_detail_info& bid_detail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

bid_detail_info* bid_detail_info::default_instance_ = NULL;

bid_detail_info* bid_detail_info::New() const {
  return new bid_detail_info;
}

void bid_detail_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_no_->clear();
      }
    }
    if (has_id_card_no()) {
      if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_no_->clear();
      }
    }
    amount_ = 0;
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datetime_->clear();
      }
    }
    if (has_rate()) {
      if (rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rate_->clear();
      }
    }
    if (has_guarantee_rate()) {
      if (guarantee_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guarantee_rate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_repayment_type()) {
      if (repayment_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repayment_type_->clear();
      }
    }
    if (has_fullbiddate()) {
      if (fullbiddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fullbiddate_->clear();
      }
    }
    fullbidtime_ = 0;
    if (has_borrowing_month()) {
      if (borrowing_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrowing_month_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    if (has_bid_runoff_reason()) {
      if (bid_runoff_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_runoff_reason_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_detail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.bid_detail_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // optional bytes NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_no;
        break;
      }

      // optional bytes mobile_no = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_card_no;
        break;
      }

      // optional bytes id_card_no = 4;
      case 4: {
        if (tag == 34) {
         parse_id_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_amount;
        break;
      }

      // optional float amount = 5;
      case 5: {
        if (tag == 45) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_datetime;
        break;
      }

      // optional bytes datetime = 6;
      case 6: {
        if (tag == 50) {
         parse_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rate;
        break;
      }

      // optional bytes rate = 7;
      case 7: {
        if (tag == 58) {
         parse_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_guarantee_rate;
        break;
      }

      // optional bytes guarantee_rate = 8;
      case 8: {
        if (tag == 66) {
         parse_guarantee_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guarantee_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_repayment_type;
        break;
      }

      // optional bytes repayment_type = 9;
      case 9: {
        if (tag == 74) {
         parse_repayment_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repayment_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fullbiddate;
        break;
      }

      // optional bytes fullbiddate = 10;
      case 10: {
        if (tag == 82) {
         parse_fullbiddate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fullbiddate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fullbidtime;
        break;
      }

      // optional int32 fullbidtime = 11;
      case 11: {
        if (tag == 88) {
         parse_fullbidtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullbidtime_)));
          set_has_fullbidtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_borrowing_month;
        break;
      }

      // optional bytes borrowing_month = 12;
      case 12: {
        if (tag == 98) {
         parse_borrowing_month:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrowing_month()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_state;
        break;
      }

      // optional bytes state = 13;
      case 13: {
        if (tag == 106) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bid_runoff_reason;
        break;
      }

      // optional bytes bid_runoff_reason = 14;
      case 14: {
        if (tag == 114) {
         parse_bid_runoff_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_runoff_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_province;
        break;
      }

      // optional bytes province = 15;
      case 15: {
        if (tag == 122) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_city;
        break;
      }

      // optional bytes city = 16;
      case 16: {
        if (tag == 130) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.bid_detail_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.bid_detail_info)
  return false;
#undef DO_
}

void bid_detail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.bid_detail_info)
  // optional bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // optional bytes NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // optional bytes mobile_no = 3;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_no(), output);
  }

  // optional bytes id_card_no = 4;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_card_no(), output);
  }

  // optional float amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->amount(), output);
  }

  // optional bytes datetime = 6;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->datetime(), output);
  }

  // optional bytes rate = 7;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->rate(), output);
  }

  // optional bytes guarantee_rate = 8;
  if (has_guarantee_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->guarantee_rate(), output);
  }

  // optional bytes repayment_type = 9;
  if (has_repayment_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->repayment_type(), output);
  }

  // optional bytes fullbiddate = 10;
  if (has_fullbiddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->fullbiddate(), output);
  }

  // optional int32 fullbidtime = 11;
  if (has_fullbidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fullbidtime(), output);
  }

  // optional bytes borrowing_month = 12;
  if (has_borrowing_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->borrowing_month(), output);
  }

  // optional bytes state = 13;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->state(), output);
  }

  // optional bytes bid_runoff_reason = 14;
  if (has_bid_runoff_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->bid_runoff_reason(), output);
  }

  // optional bytes province = 15;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->province(), output);
  }

  // optional bytes city = 16;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.bid_detail_info)
}

::google::protobuf::uint8* bid_detail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.bid_detail_info)
  // optional bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // optional bytes NickName = 2;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // optional bytes mobile_no = 3;
  if (has_mobile_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_no(), target);
  }

  // optional bytes id_card_no = 4;
  if (has_id_card_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_card_no(), target);
  }

  // optional float amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->amount(), target);
  }

  // optional bytes datetime = 6;
  if (has_datetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->datetime(), target);
  }

  // optional bytes rate = 7;
  if (has_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->rate(), target);
  }

  // optional bytes guarantee_rate = 8;
  if (has_guarantee_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->guarantee_rate(), target);
  }

  // optional bytes repayment_type = 9;
  if (has_repayment_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->repayment_type(), target);
  }

  // optional bytes fullbiddate = 10;
  if (has_fullbiddate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->fullbiddate(), target);
  }

  // optional int32 fullbidtime = 11;
  if (has_fullbidtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fullbidtime(), target);
  }

  // optional bytes borrowing_month = 12;
  if (has_borrowing_month()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->borrowing_month(), target);
  }

  // optional bytes state = 13;
  if (has_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->state(), target);
  }

  // optional bytes bid_runoff_reason = 14;
  if (has_bid_runoff_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->bid_runoff_reason(), target);
  }

  // optional bytes province = 15;
  if (has_province()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->province(), target);
  }

  // optional bytes city = 16;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.bid_detail_info)
  return target;
}

int bid_detail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional bytes NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes mobile_no = 3;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_no());
    }

    // optional bytes id_card_no = 4;
    if (has_id_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card_no());
    }

    // optional float amount = 5;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional bytes datetime = 6;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datetime());
    }

    // optional bytes rate = 7;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rate());
    }

    // optional bytes guarantee_rate = 8;
    if (has_guarantee_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guarantee_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes repayment_type = 9;
    if (has_repayment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->repayment_type());
    }

    // optional bytes fullbiddate = 10;
    if (has_fullbiddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fullbiddate());
    }

    // optional int32 fullbidtime = 11;
    if (has_fullbidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fullbidtime());
    }

    // optional bytes borrowing_month = 12;
    if (has_borrowing_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrowing_month());
    }

    // optional bytes state = 13;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->state());
    }

    // optional bytes bid_runoff_reason = 14;
    if (has_bid_runoff_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_runoff_reason());
    }

    // optional bytes province = 15;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->province());
    }

    // optional bytes city = 16;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_detail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_detail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_detail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_detail_info::MergeFrom(const bid_detail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_id_card_no()) {
      set_id_card_no(from.id_card_no());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_guarantee_rate()) {
      set_guarantee_rate(from.guarantee_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_repayment_type()) {
      set_repayment_type(from.repayment_type());
    }
    if (from.has_fullbiddate()) {
      set_fullbiddate(from.fullbiddate());
    }
    if (from.has_fullbidtime()) {
      set_fullbidtime(from.fullbidtime());
    }
    if (from.has_borrowing_month()) {
      set_borrowing_month(from.borrowing_month());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_bid_runoff_reason()) {
      set_bid_runoff_reason(from.bid_runoff_reason());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_detail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_detail_info::CopyFrom(const bid_detail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_detail_info::IsInitialized() const {

  return true;
}

void bid_detail_info::Swap(bid_detail_info* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(nickname_, other->nickname_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(id_card_no_, other->id_card_no_);
    std::swap(amount_, other->amount_);
    std::swap(datetime_, other->datetime_);
    std::swap(rate_, other->rate_);
    std::swap(guarantee_rate_, other->guarantee_rate_);
    std::swap(repayment_type_, other->repayment_type_);
    std::swap(fullbiddate_, other->fullbiddate_);
    std::swap(fullbidtime_, other->fullbidtime_);
    std::swap(borrowing_month_, other->borrowing_month_);
    std::swap(state_, other->state_);
    std::swap(bid_runoff_reason_, other->bid_runoff_reason_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_detail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_detail_info_descriptor_;
  metadata.reflection = bid_detail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistics_info_ask::kTypeFieldNumber;
const int statistics_info_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

statistics_info_ask::statistics_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.statistics_info_ask)
}

void statistics_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

statistics_info_ask::statistics_info_ask(const statistics_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.statistics_info_ask)
}

void statistics_info_ask::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistics_info_ask::~statistics_info_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.statistics_info_ask)
  SharedDtor();
}

void statistics_info_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void statistics_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistics_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistics_info_ask_descriptor_;
}

const statistics_info_ask& statistics_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

statistics_info_ask* statistics_info_ask::default_instance_ = NULL;

statistics_info_ask* statistics_info_ask::New() const {
  return new statistics_info_ask;
}

void statistics_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistics_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.statistics_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.ask_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ODP_bid_analysis::ask_type_IsValid(value)) {
            set_type(static_cast< ::ODP_bid_analysis::ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.statistics_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.statistics_info_ask)
  return false;
#undef DO_
}

void statistics_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.statistics_info_ask)
  // optional .ODP_bid_analysis.ask_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.statistics_info_ask)
}

::google::protobuf::uint8* statistics_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.statistics_info_ask)
  // optional .ODP_bid_analysis.ask_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.statistics_info_ask)
  return target;
}

int statistics_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.ask_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistics_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistics_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistics_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistics_info_ask::MergeFrom(const statistics_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistics_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistics_info_ask::CopyFrom(const statistics_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistics_info_ask::IsInitialized() const {

  return true;
}

void statistics_info_ask::Swap(statistics_info_ask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistics_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistics_info_ask_descriptor_;
  metadata.reflection = statistics_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistics_info_ans::kInfoFieldNumber;
const int statistics_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

statistics_info_ans::statistics_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.statistics_info_ans)
}

void statistics_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

statistics_info_ans::statistics_info_ans(const statistics_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.statistics_info_ans)
}

void statistics_info_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistics_info_ans::~statistics_info_ans() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.statistics_info_ans)
  SharedDtor();
}

void statistics_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void statistics_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistics_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistics_info_ans_descriptor_;
}

const statistics_info_ans& statistics_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

statistics_info_ans* statistics_info_ans::default_instance_ = NULL;

statistics_info_ans* statistics_info_ans::New() const {
  return new statistics_info_ans;
}

void statistics_info_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistics_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.statistics_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_bid_analysis.statistics_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.statistics_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.statistics_info_ans)
  return false;
#undef DO_
}

void statistics_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.statistics_info_ans)
  // repeated .ODP_bid_analysis.statistics_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.statistics_info_ans)
}

::google::protobuf::uint8* statistics_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.statistics_info_ans)
  // repeated .ODP_bid_analysis.statistics_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.statistics_info_ans)
  return target;
}

int statistics_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_bid_analysis.statistics_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistics_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistics_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistics_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistics_info_ans::MergeFrom(const statistics_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistics_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistics_info_ans::CopyFrom(const statistics_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistics_info_ans::IsInitialized() const {

  return true;
}

void statistics_info_ans::Swap(statistics_info_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistics_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistics_info_ans_descriptor_;
  metadata.reflection = statistics_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int detail_info_ask::kTypeFieldNumber;
const int detail_info_ask::kTickNoFieldNumber;
const int detail_info_ask::kNumOfRecordFieldNumber;
const int detail_info_ask::kCurpageFieldNumber;
const int detail_info_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

detail_info_ask::detail_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.detail_info_ask)
}

void detail_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

detail_info_ask::detail_info_ask(const detail_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.detail_info_ask)
}

void detail_info_ask::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  tick_no_ = 0;
  num_of_record_ = 0;
  curpage_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detail_info_ask::~detail_info_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.detail_info_ask)
  SharedDtor();
}

void detail_info_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void detail_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detail_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detail_info_ask_descriptor_;
}

const detail_info_ask& detail_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

detail_info_ask* detail_info_ask::default_instance_ = NULL;

detail_info_ask* detail_info_ask::New() const {
  return new detail_info_ask;
}

void detail_info_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<detail_info_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tick_no_, curpage_);
    type_ = 1;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detail_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.detail_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.ask_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ODP_bid_analysis::ask_type_IsValid(value)) {
            set_type(static_cast< ::ODP_bid_analysis::ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tick_no;
        break;
      }

      // optional int32 tick_no = 2;
      case 2: {
        if (tag == 16) {
         parse_tick_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_no_)));
          set_has_tick_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_of_record;
        break;
      }

      // optional int32 num_of_record = 3;
      case 3: {
        if (tag == 24) {
         parse_num_of_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_record_)));
          set_has_num_of_record();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curpage;
        break;
      }

      // optional int32 curpage = 4;
      case 4: {
        if (tag == 32) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.detail_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.detail_info_ask)
  return false;
#undef DO_
}

void detail_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.detail_info_ask)
  // optional .ODP_bid_analysis.ask_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 tick_no = 2;
  if (has_tick_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick_no(), output);
  }

  // optional int32 num_of_record = 3;
  if (has_num_of_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_of_record(), output);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curpage(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.detail_info_ask)
}

::google::protobuf::uint8* detail_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.detail_info_ask)
  // optional .ODP_bid_analysis.ask_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 tick_no = 2;
  if (has_tick_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick_no(), target);
  }

  // optional int32 num_of_record = 3;
  if (has_num_of_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_of_record(), target);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curpage(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.detail_info_ask)
  return target;
}

int detail_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.ask_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 tick_no = 2;
    if (has_tick_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_no());
    }

    // optional int32 num_of_record = 3;
    if (has_num_of_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_of_record());
    }

    // optional int32 curpage = 4;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpage());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detail_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detail_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detail_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detail_info_ask::MergeFrom(const detail_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tick_no()) {
      set_tick_no(from.tick_no());
    }
    if (from.has_num_of_record()) {
      set_num_of_record(from.num_of_record());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detail_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detail_info_ask::CopyFrom(const detail_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detail_info_ask::IsInitialized() const {

  return true;
}

void detail_info_ask::Swap(detail_info_ask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tick_no_, other->tick_no_);
    std::swap(num_of_record_, other->num_of_record_);
    std::swap(curpage_, other->curpage_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detail_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detail_info_ask_descriptor_;
  metadata.reflection = detail_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int detail_info_ans::kTotalNumberFieldNumber;
const int detail_info_ans::kInfoFieldNumber;
const int detail_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

detail_info_ans::detail_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.detail_info_ans)
}

void detail_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

detail_info_ans::detail_info_ans(const detail_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.detail_info_ans)
}

void detail_info_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detail_info_ans::~detail_info_ans() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.detail_info_ans)
  SharedDtor();
}

void detail_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void detail_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detail_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detail_info_ans_descriptor_;
}

const detail_info_ans& detail_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

detail_info_ans* detail_info_ans::default_instance_ = NULL;

detail_info_ans* detail_info_ans::New() const {
  return new detail_info_ans;
}

void detail_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detail_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.detail_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ODP_bid_analysis.bid_detail_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.detail_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.detail_info_ans)
  return false;
#undef DO_
}

void detail_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.detail_info_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .ODP_bid_analysis.bid_detail_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.detail_info_ans)
}

::google::protobuf::uint8* detail_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.detail_info_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .ODP_bid_analysis.bid_detail_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.detail_info_ans)
  return target;
}

int detail_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_bid_analysis.bid_detail_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detail_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detail_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detail_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detail_info_ans::MergeFrom(const detail_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detail_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detail_info_ans::CopyFrom(const detail_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detail_info_ans::IsInitialized() const {

  return true;
}

void detail_info_ans::Swap(detail_info_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detail_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detail_info_ans_descriptor_;
  metadata.reflection = detail_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int different_rate_fullbid_time_ask::kTypeFieldNumber;
const int different_rate_fullbid_time_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

different_rate_fullbid_time_ask::different_rate_fullbid_time_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.different_rate_fullbid_time_ask)
}

void different_rate_fullbid_time_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

different_rate_fullbid_time_ask::different_rate_fullbid_time_ask(const different_rate_fullbid_time_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.different_rate_fullbid_time_ask)
}

void different_rate_fullbid_time_ask::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

different_rate_fullbid_time_ask::~different_rate_fullbid_time_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.different_rate_fullbid_time_ask)
  SharedDtor();
}

void different_rate_fullbid_time_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void different_rate_fullbid_time_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* different_rate_fullbid_time_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return different_rate_fullbid_time_ask_descriptor_;
}

const different_rate_fullbid_time_ask& different_rate_fullbid_time_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

different_rate_fullbid_time_ask* different_rate_fullbid_time_ask::default_instance_ = NULL;

different_rate_fullbid_time_ask* different_rate_fullbid_time_ask::New() const {
  return new different_rate_fullbid_time_ask;
}

void different_rate_fullbid_time_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool different_rate_fullbid_time_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.different_rate_fullbid_time_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.full_bid_ask_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ODP_bid_analysis::full_bid_ask_type_IsValid(value)) {
            set_type(static_cast< ::ODP_bid_analysis::full_bid_ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.different_rate_fullbid_time_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.different_rate_fullbid_time_ask)
  return false;
#undef DO_
}

void different_rate_fullbid_time_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.different_rate_fullbid_time_ask)
  // optional .ODP_bid_analysis.full_bid_ask_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.different_rate_fullbid_time_ask)
}

::google::protobuf::uint8* different_rate_fullbid_time_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.different_rate_fullbid_time_ask)
  // optional .ODP_bid_analysis.full_bid_ask_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.different_rate_fullbid_time_ask)
  return target;
}

int different_rate_fullbid_time_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.full_bid_ask_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void different_rate_fullbid_time_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const different_rate_fullbid_time_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const different_rate_fullbid_time_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void different_rate_fullbid_time_ask::MergeFrom(const different_rate_fullbid_time_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void different_rate_fullbid_time_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void different_rate_fullbid_time_ask::CopyFrom(const different_rate_fullbid_time_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool different_rate_fullbid_time_ask::IsInitialized() const {

  return true;
}

void different_rate_fullbid_time_ask::Swap(different_rate_fullbid_time_ask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata different_rate_fullbid_time_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = different_rate_fullbid_time_ask_descriptor_;
  metadata.reflection = different_rate_fullbid_time_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int different_rate_fullbid_time_ans::kInfoFieldNumber;
const int different_rate_fullbid_time_ans::kResultFieldNumber;
#endif  // !_MSC_VER

different_rate_fullbid_time_ans::different_rate_fullbid_time_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.different_rate_fullbid_time_ans)
}

void different_rate_fullbid_time_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

different_rate_fullbid_time_ans::different_rate_fullbid_time_ans(const different_rate_fullbid_time_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.different_rate_fullbid_time_ans)
}

void different_rate_fullbid_time_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

different_rate_fullbid_time_ans::~different_rate_fullbid_time_ans() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.different_rate_fullbid_time_ans)
  SharedDtor();
}

void different_rate_fullbid_time_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void different_rate_fullbid_time_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* different_rate_fullbid_time_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return different_rate_fullbid_time_ans_descriptor_;
}

const different_rate_fullbid_time_ans& different_rate_fullbid_time_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

different_rate_fullbid_time_ans* different_rate_fullbid_time_ans::default_instance_ = NULL;

different_rate_fullbid_time_ans* different_rate_fullbid_time_ans::New() const {
  return new different_rate_fullbid_time_ans;
}

void different_rate_fullbid_time_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool different_rate_fullbid_time_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.different_rate_fullbid_time_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_bid_analysis.bid_count_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.different_rate_fullbid_time_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.different_rate_fullbid_time_ans)
  return false;
#undef DO_
}

void different_rate_fullbid_time_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.different_rate_fullbid_time_ans)
  // repeated .ODP_bid_analysis.bid_count_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.different_rate_fullbid_time_ans)
}

::google::protobuf::uint8* different_rate_fullbid_time_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.different_rate_fullbid_time_ans)
  // repeated .ODP_bid_analysis.bid_count_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.different_rate_fullbid_time_ans)
  return target;
}

int different_rate_fullbid_time_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_bid_analysis.bid_count_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void different_rate_fullbid_time_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const different_rate_fullbid_time_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const different_rate_fullbid_time_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void different_rate_fullbid_time_ans::MergeFrom(const different_rate_fullbid_time_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void different_rate_fullbid_time_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void different_rate_fullbid_time_ans::CopyFrom(const different_rate_fullbid_time_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool different_rate_fullbid_time_ans::IsInitialized() const {

  return true;
}

void different_rate_fullbid_time_ans::Swap(different_rate_fullbid_time_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata different_rate_fullbid_time_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = different_rate_fullbid_time_ans_descriptor_;
  metadata.reflection = different_rate_fullbid_time_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int different_rate_fullbid_details_ask::kBidTimeFieldNumber;
const int different_rate_fullbid_details_ask::kBidRateFieldNumber;
const int different_rate_fullbid_details_ask::kNumOfRecordFieldNumber;
const int different_rate_fullbid_details_ask::kCurpageFieldNumber;
const int different_rate_fullbid_details_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

different_rate_fullbid_details_ask::different_rate_fullbid_details_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.different_rate_fullbid_details_ask)
}

void different_rate_fullbid_details_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

different_rate_fullbid_details_ask::different_rate_fullbid_details_ask(const different_rate_fullbid_details_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.different_rate_fullbid_details_ask)
}

void different_rate_fullbid_details_ask::SharedCtor() {
  _cached_size_ = 0;
  bid_time_ = 0;
  bid_rate_ = 0;
  num_of_record_ = 0;
  curpage_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

different_rate_fullbid_details_ask::~different_rate_fullbid_details_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.different_rate_fullbid_details_ask)
  SharedDtor();
}

void different_rate_fullbid_details_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void different_rate_fullbid_details_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* different_rate_fullbid_details_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return different_rate_fullbid_details_ask_descriptor_;
}

const different_rate_fullbid_details_ask& different_rate_fullbid_details_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

different_rate_fullbid_details_ask* different_rate_fullbid_details_ask::default_instance_ = NULL;

different_rate_fullbid_details_ask* different_rate_fullbid_details_ask::New() const {
  return new different_rate_fullbid_details_ask;
}

void different_rate_fullbid_details_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<different_rate_fullbid_details_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bid_time_, curpage_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool different_rate_fullbid_details_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.different_rate_fullbid_details_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_time_)));
          set_has_bid_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid_rate;
        break;
      }

      // optional int32 bid_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_bid_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_rate_)));
          set_has_bid_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_of_record;
        break;
      }

      // optional int32 num_of_record = 3;
      case 3: {
        if (tag == 24) {
         parse_num_of_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_record_)));
          set_has_num_of_record();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curpage;
        break;
      }

      // optional int32 curpage = 4;
      case 4: {
        if (tag == 32) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.different_rate_fullbid_details_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.different_rate_fullbid_details_ask)
  return false;
#undef DO_
}

void different_rate_fullbid_details_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.different_rate_fullbid_details_ask)
  // optional int32 bid_time = 1;
  if (has_bid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid_time(), output);
  }

  // optional int32 bid_rate = 2;
  if (has_bid_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid_rate(), output);
  }

  // optional int32 num_of_record = 3;
  if (has_num_of_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_of_record(), output);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curpage(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.different_rate_fullbid_details_ask)
}

::google::protobuf::uint8* different_rate_fullbid_details_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.different_rate_fullbid_details_ask)
  // optional int32 bid_time = 1;
  if (has_bid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid_time(), target);
  }

  // optional int32 bid_rate = 2;
  if (has_bid_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid_rate(), target);
  }

  // optional int32 num_of_record = 3;
  if (has_num_of_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_of_record(), target);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curpage(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.different_rate_fullbid_details_ask)
  return target;
}

int different_rate_fullbid_details_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid_time = 1;
    if (has_bid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_time());
    }

    // optional int32 bid_rate = 2;
    if (has_bid_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_rate());
    }

    // optional int32 num_of_record = 3;
    if (has_num_of_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_of_record());
    }

    // optional int32 curpage = 4;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpage());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void different_rate_fullbid_details_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const different_rate_fullbid_details_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const different_rate_fullbid_details_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void different_rate_fullbid_details_ask::MergeFrom(const different_rate_fullbid_details_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid_time()) {
      set_bid_time(from.bid_time());
    }
    if (from.has_bid_rate()) {
      set_bid_rate(from.bid_rate());
    }
    if (from.has_num_of_record()) {
      set_num_of_record(from.num_of_record());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void different_rate_fullbid_details_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void different_rate_fullbid_details_ask::CopyFrom(const different_rate_fullbid_details_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool different_rate_fullbid_details_ask::IsInitialized() const {

  return true;
}

void different_rate_fullbid_details_ask::Swap(different_rate_fullbid_details_ask* other) {
  if (other != this) {
    std::swap(bid_time_, other->bid_time_);
    std::swap(bid_rate_, other->bid_rate_);
    std::swap(num_of_record_, other->num_of_record_);
    std::swap(curpage_, other->curpage_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata different_rate_fullbid_details_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = different_rate_fullbid_details_ask_descriptor_;
  metadata.reflection = different_rate_fullbid_details_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int province_city_inquire_ask::kProvinceFieldNumber;
const int province_city_inquire_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

province_city_inquire_ask::province_city_inquire_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.province_city_inquire_ask)
}

void province_city_inquire_ask::InitAsDefaultInstance() {
  province_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

province_city_inquire_ask::province_city_inquire_ask(const province_city_inquire_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.province_city_inquire_ask)
}

void province_city_inquire_ask::SharedCtor() {
  _cached_size_ = 0;
  province_ = NULL;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

province_city_inquire_ask::~province_city_inquire_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.province_city_inquire_ask)
  SharedDtor();
}

void province_city_inquire_ask::SharedDtor() {
  if (this != default_instance_) {
    delete province_;
    delete ask_header_;
  }
}

void province_city_inquire_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_city_inquire_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_city_inquire_ask_descriptor_;
}

const province_city_inquire_ask& province_city_inquire_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

province_city_inquire_ask* province_city_inquire_ask::default_instance_ = NULL;

province_city_inquire_ask* province_city_inquire_ask::New() const {
  return new province_city_inquire_ask;
}

void province_city_inquire_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_province()) {
      if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool province_city_inquire_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.province_city_inquire_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.area_name province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.province_city_inquire_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.province_city_inquire_ask)
  return false;
#undef DO_
}

void province_city_inquire_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.province_city_inquire_ask)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->province(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.province_city_inquire_ask)
}

::google::protobuf::uint8* province_city_inquire_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.province_city_inquire_ask)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->province(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.province_city_inquire_ask)
  return target;
}

int province_city_inquire_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.area_name province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->province());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_city_inquire_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const province_city_inquire_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const province_city_inquire_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_city_inquire_ask::MergeFrom(const province_city_inquire_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      mutable_province()->::ODP_bid_analysis::area_name::MergeFrom(from.province());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void province_city_inquire_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_city_inquire_ask::CopyFrom(const province_city_inquire_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_city_inquire_ask::IsInitialized() const {

  return true;
}

void province_city_inquire_ask::Swap(province_city_inquire_ask* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata province_city_inquire_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_city_inquire_ask_descriptor_;
  metadata.reflection = province_city_inquire_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int province_city_inquire_ans::kProvinceOrCityFieldNumber;
const int province_city_inquire_ans::kResultFieldNumber;
#endif  // !_MSC_VER

province_city_inquire_ans::province_city_inquire_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.province_city_inquire_ans)
}

void province_city_inquire_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

province_city_inquire_ans::province_city_inquire_ans(const province_city_inquire_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.province_city_inquire_ans)
}

void province_city_inquire_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

province_city_inquire_ans::~province_city_inquire_ans() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.province_city_inquire_ans)
  SharedDtor();
}

void province_city_inquire_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void province_city_inquire_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_city_inquire_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_city_inquire_ans_descriptor_;
}

const province_city_inquire_ans& province_city_inquire_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

province_city_inquire_ans* province_city_inquire_ans::default_instance_ = NULL;

province_city_inquire_ans* province_city_inquire_ans::New() const {
  return new province_city_inquire_ans;
}

void province_city_inquire_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  province_or_city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool province_city_inquire_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.province_city_inquire_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_bid_analysis.area_name province_or_city = 1;
      case 1: {
        if (tag == 10) {
         parse_province_or_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_province_or_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_province_or_city;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.province_city_inquire_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.province_city_inquire_ans)
  return false;
#undef DO_
}

void province_city_inquire_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.province_city_inquire_ans)
  // repeated .ODP_bid_analysis.area_name province_or_city = 1;
  for (int i = 0; i < this->province_or_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->province_or_city(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.province_city_inquire_ans)
}

::google::protobuf::uint8* province_city_inquire_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.province_city_inquire_ans)
  // repeated .ODP_bid_analysis.area_name province_or_city = 1;
  for (int i = 0; i < this->province_or_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->province_or_city(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.province_city_inquire_ans)
  return target;
}

int province_city_inquire_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_bid_analysis.area_name province_or_city = 1;
  total_size += 1 * this->province_or_city_size();
  for (int i = 0; i < this->province_or_city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->province_or_city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_city_inquire_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const province_city_inquire_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const province_city_inquire_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_city_inquire_ans::MergeFrom(const province_city_inquire_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  province_or_city_.MergeFrom(from.province_or_city_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void province_city_inquire_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_city_inquire_ans::CopyFrom(const province_city_inquire_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_city_inquire_ans::IsInitialized() const {

  return true;
}

void province_city_inquire_ans::Swap(province_city_inquire_ans* other) {
  if (other != this) {
    province_or_city_.Swap(&other->province_or_city_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata province_city_inquire_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_city_inquire_ans_descriptor_;
  metadata.reflection = province_city_inquire_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_area_distribution_ask::kProvinceFieldNumber;
const int bid_area_distribution_ask::kCityFieldNumber;
const int bid_area_distribution_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

bid_area_distribution_ask::bid_area_distribution_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.bid_area_distribution_ask)
}

void bid_area_distribution_ask::InitAsDefaultInstance() {
  province_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
  city_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

bid_area_distribution_ask::bid_area_distribution_ask(const bid_area_distribution_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.bid_area_distribution_ask)
}

void bid_area_distribution_ask::SharedCtor() {
  _cached_size_ = 0;
  province_ = NULL;
  city_ = NULL;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_area_distribution_ask::~bid_area_distribution_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.bid_area_distribution_ask)
  SharedDtor();
}

void bid_area_distribution_ask::SharedDtor() {
  if (this != default_instance_) {
    delete province_;
    delete city_;
    delete ask_header_;
  }
}

void bid_area_distribution_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_area_distribution_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_area_distribution_ask_descriptor_;
}

const bid_area_distribution_ask& bid_area_distribution_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

bid_area_distribution_ask* bid_area_distribution_ask::default_instance_ = NULL;

bid_area_distribution_ask* bid_area_distribution_ask::New() const {
  return new bid_area_distribution_ask;
}

void bid_area_distribution_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_province()) {
      if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
    }
    if (has_city()) {
      if (city_ != NULL) city_->::ODP_bid_analysis::area_name::Clear();
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_area_distribution_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.bid_area_distribution_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.area_name province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional .ODP_bid_analysis.area_name city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.bid_area_distribution_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.bid_area_distribution_ask)
  return false;
#undef DO_
}

void bid_area_distribution_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.bid_area_distribution_ask)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->province(), output);
  }

  // optional .ODP_bid_analysis.area_name city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.bid_area_distribution_ask)
}

::google::protobuf::uint8* bid_area_distribution_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.bid_area_distribution_ask)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->province(), target);
  }

  // optional .ODP_bid_analysis.area_name city = 2;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.bid_area_distribution_ask)
  return target;
}

int bid_area_distribution_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.area_name province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->province());
    }

    // optional .ODP_bid_analysis.area_name city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_area_distribution_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_area_distribution_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_area_distribution_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_area_distribution_ask::MergeFrom(const bid_area_distribution_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      mutable_province()->::ODP_bid_analysis::area_name::MergeFrom(from.province());
    }
    if (from.has_city()) {
      mutable_city()->::ODP_bid_analysis::area_name::MergeFrom(from.city());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_area_distribution_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_area_distribution_ask::CopyFrom(const bid_area_distribution_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_area_distribution_ask::IsInitialized() const {

  return true;
}

void bid_area_distribution_ask::Swap(bid_area_distribution_ask* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_area_distribution_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_area_distribution_ask_descriptor_;
  metadata.reflection = bid_area_distribution_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_area_distribution_ans::kInfoFieldNumber;
const int bid_area_distribution_ans::kResultFieldNumber;
#endif  // !_MSC_VER

bid_area_distribution_ans::bid_area_distribution_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.bid_area_distribution_ans)
}

void bid_area_distribution_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

bid_area_distribution_ans::bid_area_distribution_ans(const bid_area_distribution_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.bid_area_distribution_ans)
}

void bid_area_distribution_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_area_distribution_ans::~bid_area_distribution_ans() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.bid_area_distribution_ans)
  SharedDtor();
}

void bid_area_distribution_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void bid_area_distribution_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_area_distribution_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_area_distribution_ans_descriptor_;
}

const bid_area_distribution_ans& bid_area_distribution_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

bid_area_distribution_ans* bid_area_distribution_ans::default_instance_ = NULL;

bid_area_distribution_ans* bid_area_distribution_ans::New() const {
  return new bid_area_distribution_ans;
}

void bid_area_distribution_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_area_distribution_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.bid_area_distribution_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ODP_bid_analysis.bid_area_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.bid_area_distribution_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.bid_area_distribution_ans)
  return false;
#undef DO_
}

void bid_area_distribution_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.bid_area_distribution_ans)
  // repeated .ODP_bid_analysis.bid_area_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.bid_area_distribution_ans)
}

::google::protobuf::uint8* bid_area_distribution_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.bid_area_distribution_ans)
  // repeated .ODP_bid_analysis.bid_area_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.bid_area_distribution_ans)
  return target;
}

int bid_area_distribution_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ODP_bid_analysis.bid_area_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_area_distribution_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_area_distribution_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_area_distribution_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_area_distribution_ans::MergeFrom(const bid_area_distribution_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_area_distribution_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_area_distribution_ans::CopyFrom(const bid_area_distribution_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_area_distribution_ans::IsInitialized() const {

  return true;
}

void bid_area_distribution_ans::Swap(bid_area_distribution_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_area_distribution_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_area_distribution_ans_descriptor_;
  metadata.reflection = bid_area_distribution_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_area_distribution_detail_ask::kProvinceFieldNumber;
const int bid_area_distribution_detail_ask::kCityFieldNumber;
const int bid_area_distribution_detail_ask::kNumOfRecordFieldNumber;
const int bid_area_distribution_detail_ask::kCurpageFieldNumber;
const int bid_area_distribution_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

bid_area_distribution_detail_ask::bid_area_distribution_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ODP_bid_analysis.bid_area_distribution_detail_ask)
}

void bid_area_distribution_detail_ask::InitAsDefaultInstance() {
  province_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
  city_ = const_cast< ::ODP_bid_analysis::area_name*>(&::ODP_bid_analysis::area_name::default_instance());
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

bid_area_distribution_detail_ask::bid_area_distribution_detail_ask(const bid_area_distribution_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ODP_bid_analysis.bid_area_distribution_detail_ask)
}

void bid_area_distribution_detail_ask::SharedCtor() {
  _cached_size_ = 0;
  province_ = NULL;
  city_ = NULL;
  num_of_record_ = 0;
  curpage_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_area_distribution_detail_ask::~bid_area_distribution_detail_ask() {
  // @@protoc_insertion_point(destructor:ODP_bid_analysis.bid_area_distribution_detail_ask)
  SharedDtor();
}

void bid_area_distribution_detail_ask::SharedDtor() {
  if (this != default_instance_) {
    delete province_;
    delete city_;
    delete ask_header_;
  }
}

void bid_area_distribution_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_area_distribution_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_area_distribution_detail_ask_descriptor_;
}

const bid_area_distribution_detail_ask& bid_area_distribution_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  return *default_instance_;
}

bid_area_distribution_detail_ask* bid_area_distribution_detail_ask::default_instance_ = NULL;

bid_area_distribution_detail_ask* bid_area_distribution_detail_ask::New() const {
  return new bid_area_distribution_detail_ask;
}

void bid_area_distribution_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_area_distribution_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(num_of_record_, curpage_);
    if (has_province()) {
      if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
    }
    if (has_city()) {
      if (city_ != NULL) city_->::ODP_bid_analysis::area_name::Clear();
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_area_distribution_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ODP_bid_analysis.bid_area_distribution_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ODP_bid_analysis.area_name province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional .ODP_bid_analysis.area_name city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_of_record;
        break;
      }

      // optional int32 num_of_record = 3;
      case 3: {
        if (tag == 24) {
         parse_num_of_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_record_)));
          set_has_num_of_record();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curpage;
        break;
      }

      // optional int32 curpage = 4;
      case 4: {
        if (tag == 32) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ODP_bid_analysis.bid_area_distribution_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ODP_bid_analysis.bid_area_distribution_detail_ask)
  return false;
#undef DO_
}

void bid_area_distribution_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ODP_bid_analysis.bid_area_distribution_detail_ask)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->province(), output);
  }

  // optional .ODP_bid_analysis.area_name city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city(), output);
  }

  // optional int32 num_of_record = 3;
  if (has_num_of_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_of_record(), output);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curpage(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ODP_bid_analysis.bid_area_distribution_detail_ask)
}

::google::protobuf::uint8* bid_area_distribution_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ODP_bid_analysis.bid_area_distribution_detail_ask)
  // optional .ODP_bid_analysis.area_name province = 1;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->province(), target);
  }

  // optional .ODP_bid_analysis.area_name city = 2;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city(), target);
  }

  // optional int32 num_of_record = 3;
  if (has_num_of_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_of_record(), target);
  }

  // optional int32 curpage = 4;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curpage(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ODP_bid_analysis.bid_area_distribution_detail_ask)
  return target;
}

int bid_area_distribution_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ODP_bid_analysis.area_name province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->province());
    }

    // optional .ODP_bid_analysis.area_name city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

    // optional int32 num_of_record = 3;
    if (has_num_of_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_of_record());
    }

    // optional int32 curpage = 4;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpage());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_area_distribution_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_area_distribution_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_area_distribution_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_area_distribution_detail_ask::MergeFrom(const bid_area_distribution_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      mutable_province()->::ODP_bid_analysis::area_name::MergeFrom(from.province());
    }
    if (from.has_city()) {
      mutable_city()->::ODP_bid_analysis::area_name::MergeFrom(from.city());
    }
    if (from.has_num_of_record()) {
      set_num_of_record(from.num_of_record());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_area_distribution_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_area_distribution_detail_ask::CopyFrom(const bid_area_distribution_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_area_distribution_detail_ask::IsInitialized() const {

  return true;
}

void bid_area_distribution_detail_ask::Swap(bid_area_distribution_detail_ask* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(num_of_record_, other->num_of_record_);
    std::swap(curpage_, other->curpage_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_area_distribution_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_area_distribution_detail_ask_descriptor_;
  metadata.reflection = bid_area_distribution_detail_ask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ODP_bid_analysis

// @@protoc_insertion_point(global_scope)
