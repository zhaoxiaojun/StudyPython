// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFP_main_frame.proto

#ifndef PROTOBUF_AFP_5fmain_5fframe_2eproto__INCLUDED
#define PROTOBUF_AFP_5fmain_5fframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "QDP_basic_info.pb.h"
#include "DW_Location.pb.h"
// @@protoc_insertion_point(includes)

namespace AFP_main_frame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

class interface_info_ask;
class interface_info_ans;
class emergency_contact;
class blacklist_user_info;
class data_sources_info;
class platform_info;
class platform_service;
class model_hit_statistics_info;
class hit_user_info;
class hit_user_analyze_info;
class hit_rule_analyze_info;
class hit_detail_info;
class blacklist_data_sources_ask;
class blacklist_data_sources_ans;
class blacklist_query_ask;
class blacklist_query_ans;
class blacklist_detail_ask;
class blacklist_detail_ans;
class blacklist_save_ask;
class blacklist_save_ans;
class blacklist_remove_ask;
class blacklist_remove_ans;
class auto_trace_info;
class auto_trace_ask;
class auto_trace_ans;
class credit_score_interval_info;
class credit_score_statistics_ask;
class credit_score_statistics_ans;
class credit_ask;
class credit_info;
class credit_ans;
class verify_model_info;
class verify_detail_info;
class verify_model_ask;
class verify_model_ans;
class verify_detail_ask;
class verify_detail_ans;
class afp_verify_info;
class afp_model_verify_ask;
class afp_model_verify_ans;
class third_platform_verify_info;
class identity_sync_ask;
class identity_sync_ans;
class model_verify_info;
class model_verify_ask;
class model_verify_ans;
class platform_info_ask;
class platform_info_ans;
class model_hit_statistics_ask;
class model_hit_statistics_ans;
class hit_list_ask;
class hit_list_ans;
class hit_user_property_analyze_ask;
class hit_user_property_analyze_ans;
class hit_rule_analyze_ask;
class hit_rule_analyze_ans;
class hit_detail_ask;
class hit_detail_ans;
class user_location_track_info;
class user_location_track_ask;
class user_location_track_ans;
class by_inquirers;
class user_info_ask;
class user_info_ans;
class AFP_LandedAccount;
class phone_contacts_info;
class platform_register_user_info;
class phone_info;
class yuliu_common_user_info;
class yuliu_platform_user_info;
class phones_info;
class phone_contacts_analyze_ask;
class phone_contacts_analyze_ans;
class function_verification_in;
class function_verification_out;
class user_verification_list_ask;
class user_verification_list_ans;
class verify_info;
class batch_verify_ask;
class batch_verify_ans;
class area_name;
class bid_info;
class detail_early_warning;
class statistical_Intel_warning_ask;
class statistical_early_warning_ans;
class statistical_Intel_warning_ans;
class detail_early_warning_ask;
class detail_early_warning_ans;
class cancel_the_warning_ask;
class cancel_the_warning_ans;
class modify_save_warning_ask;
class modify_save_warning_ans;
class bid_detail_ask;
class borrow_bid_detail_info;
class qiaoqiao_bid_info;
class borrow_bid_detail_ans;
class qiaoqiao_bid_ans;
class province_city_inquire_ask;
class province_city_inquire_ans;
class friend_info;
class group_info;
class friendqunList_ask;
class friendqunList_ans;
class msg_info;
class single_msg_ask;
class single_msg_ans;
class group_msg_ask;
class group_msg_ans;
class usebasicinfo_ask;
class usebasicinfo_ans;
class afp_detail_ask;
class afp_detail;
class afp_detail_ans;
class ccs_detail_ask;
class ccs_detail;
class ccs_detail_ans;
class weidanbao_detail_ask;
class weidanbao_detail;
class weidanbao_detail_ans;
class qiaoqiaoccs_detail_ask;
class qiaoqiaoccs_detail;
class qiaoqiaoccs_detail_ans;
class credit_request_monitor_ask;
class credit_request_monitor_ans;
class credit_response_monitor_ask;
class credit_response_monitor_ans;
class user_verification_history_ask;
class user_verification_history_ans;

enum platform_type {
  niiwoo_type = 1,
  tuandai_type = 2,
  both_type = 3,
  neither_type = 4
};
bool platform_type_IsValid(int value);
const platform_type platform_type_MIN = niiwoo_type;
const platform_type platform_type_MAX = neither_type;
const int platform_type_ARRAYSIZE = platform_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* platform_type_descriptor();
inline const ::std::string& platform_type_Name(platform_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    platform_type_descriptor(), value);
}
inline bool platform_type_Parse(
    const ::std::string& name, platform_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<platform_type>(
    platform_type_descriptor(), name, value);
}
enum overdue_type {
  borrow_overdue_type = 1,
  dianfu_overdue_type = 2,
  both_overdue = 3,
  not_overdue = 4
};
bool overdue_type_IsValid(int value);
const overdue_type overdue_type_MIN = borrow_overdue_type;
const overdue_type overdue_type_MAX = not_overdue;
const int overdue_type_ARRAYSIZE = overdue_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* overdue_type_descriptor();
inline const ::std::string& overdue_type_Name(overdue_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    overdue_type_descriptor(), value);
}
inline bool overdue_type_Parse(
    const ::std::string& name, overdue_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<overdue_type>(
    overdue_type_descriptor(), name, value);
}
enum function_serial_number {
  ENUM_ZHIMA_FEN = 0,
  ENUM_ZHIMA_XUELIRENZHENG = 1,
  ENUM_ZHIMA_XUEJIRENZHENG = 2,
  ENUM_ZHIMA_FENGXIANMINGDAN = 3,
  ENUM_ZHIMA_SHENFENMAOYONG = 4,
  ENUM_ZHIMA_DIZHIPANDING = 5,
  ENUM_ZHIMA_SHENFENPIPEI = 6,
  ENUM_ZHIMA_SHOUJIHAOMAPANDING = 7,
  ENUM_ZHIMA_YINHANGKAPANDING = 8,
  ENUM_ZHIMA_KXHJFXYZ_IP = 9,
  ENUM_ZHIMA_KXHJFXYZ_SJSBH = 10,
  ENUM_ZHIMA_KXHJFXYZ_MAC = 11,
  ENUM_ZHIMA_GXRRZ = 12,
  ENUM_YUANJIN_SHENFENYANZHENG = 13,
  ENUM_TONGDUN_ZHUCESHIJIAN = 14,
  ENUM_TONGDUN_DENGLUSHIJIAN = 15,
  ENUM_TONGDUN_ZHIFUSHIJIAN = 16,
  ENUM_TONGDUN_CHONGZHISHIJIAN = 17,
  ENUM_TONGDUN_JIEKUANSHIJIAN = 18,
  ENUM_TONGDUN_TIXIANSHIJIAN = 19,
  ENUM_TONGDUN_XIUGAISHIJIAN = 20,
  ENUM_QIANHAIZHENGXIN_HEIMINGDAN = 21,
  ENUM_QIANHAIZHENGXIN_PINGFENKA = 22,
  ENUM_PENGYUAN_GRSFJFXYZ = 23,
  ENUM_PENGYUAN_SJHSMRZ = 24,
  ENUM_PENGYUAN_YHLSRZ = 25,
  ENUM_BAIRONG_FXGD = 26,
  ENUM_ANRONG_MSP_BAOGAO = 27,
  ENUM_FAYUANLAOLAI_LAOLAICHAXUN = 28,
  ENUM_WDHMD_HMDCX = 29,
  ENUM_ZHIMA_INFO = 30,
  ENUM_YUANJING_INFO = 31,
  ENUM_PENGYUAN_INFO = 32,
  ENUM_TONGDUN_INFO = 33,
  ENUM_QIANHAI_INFO = 34,
  ENUM_BAIRONG_INFO = 35,
  ENUM_LAOLAI_INFO = 36,
  ENUM_BLACKLIST_INFO = 37
};
bool function_serial_number_IsValid(int value);
const function_serial_number function_serial_number_MIN = ENUM_ZHIMA_FEN;
const function_serial_number function_serial_number_MAX = ENUM_BLACKLIST_INFO;
const int function_serial_number_ARRAYSIZE = function_serial_number_MAX + 1;

const ::google::protobuf::EnumDescriptor* function_serial_number_descriptor();
inline const ::std::string& function_serial_number_Name(function_serial_number value) {
  return ::google::protobuf::internal::NameOfEnum(
    function_serial_number_descriptor(), value);
}
inline bool function_serial_number_Parse(
    const ::std::string& name, function_serial_number* value) {
  return ::google::protobuf::internal::ParseNamedEnum<function_serial_number>(
    function_serial_number_descriptor(), name, value);
}
// ===================================================================

class interface_info_ask : public ::google::protobuf::Message {
 public:
  interface_info_ask();
  virtual ~interface_info_ask();

  interface_info_ask(const interface_info_ask& from);

  inline interface_info_ask& operator=(const interface_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interface_info_ask& default_instance();

  void Swap(interface_info_ask* other);

  // implements Message ----------------------------------------------

  interface_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const interface_info_ask& from);
  void MergeFrom(const interface_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json_ask = 1;
  inline bool has_json_ask() const;
  inline void clear_json_ask();
  static const int kJsonAskFieldNumber = 1;
  inline const ::std::string& json_ask() const;
  inline void set_json_ask(const ::std::string& value);
  inline void set_json_ask(const char* value);
  inline void set_json_ask(const void* value, size_t size);
  inline ::std::string* mutable_json_ask();
  inline ::std::string* release_json_ask();
  inline void set_allocated_json_ask(::std::string* json_ask);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.interface_info_ask)
 private:
  inline void set_has_json_ask();
  inline void clear_has_json_ask();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_ask_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static interface_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class interface_info_ans : public ::google::protobuf::Message {
 public:
  interface_info_ans();
  virtual ~interface_info_ans();

  interface_info_ans(const interface_info_ans& from);

  inline interface_info_ans& operator=(const interface_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interface_info_ans& default_instance();

  void Swap(interface_info_ans* other);

  // implements Message ----------------------------------------------

  interface_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const interface_info_ans& from);
  void MergeFrom(const interface_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json_ans = 1;
  inline bool has_json_ans() const;
  inline void clear_json_ans();
  static const int kJsonAnsFieldNumber = 1;
  inline const ::std::string& json_ans() const;
  inline void set_json_ans(const ::std::string& value);
  inline void set_json_ans(const char* value);
  inline void set_json_ans(const void* value, size_t size);
  inline ::std::string* mutable_json_ans();
  inline ::std::string* release_json_ans();
  inline void set_allocated_json_ans(::std::string* json_ans);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.interface_info_ans)
 private:
  inline void set_has_json_ans();
  inline void clear_has_json_ans();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_ans_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static interface_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class emergency_contact : public ::google::protobuf::Message {
 public:
  emergency_contact();
  virtual ~emergency_contact();

  emergency_contact(const emergency_contact& from);

  inline emergency_contact& operator=(const emergency_contact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const emergency_contact& default_instance();

  void Swap(emergency_contact* other);

  // implements Message ----------------------------------------------

  emergency_contact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const emergency_contact& from);
  void MergeFrom(const emergency_contact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes appellation = 1;
  inline bool has_appellation() const;
  inline void clear_appellation();
  static const int kAppellationFieldNumber = 1;
  inline const ::std::string& appellation() const;
  inline void set_appellation(const ::std::string& value);
  inline void set_appellation(const char* value);
  inline void set_appellation(const void* value, size_t size);
  inline ::std::string* mutable_appellation();
  inline ::std::string* release_appellation();
  inline void set_allocated_appellation(::std::string* appellation);

  // optional bytes kin_name = 2;
  inline bool has_kin_name() const;
  inline void clear_kin_name();
  static const int kKinNameFieldNumber = 2;
  inline const ::std::string& kin_name() const;
  inline void set_kin_name(const ::std::string& value);
  inline void set_kin_name(const char* value);
  inline void set_kin_name(const void* value, size_t size);
  inline ::std::string* mutable_kin_name();
  inline ::std::string* release_kin_name();
  inline void set_allocated_kin_name(::std::string* kin_name);

  // optional bytes kin_phone = 3;
  inline bool has_kin_phone() const;
  inline void clear_kin_phone();
  static const int kKinPhoneFieldNumber = 3;
  inline const ::std::string& kin_phone() const;
  inline void set_kin_phone(const ::std::string& value);
  inline void set_kin_phone(const char* value);
  inline void set_kin_phone(const void* value, size_t size);
  inline ::std::string* mutable_kin_phone();
  inline ::std::string* release_kin_phone();
  inline void set_allocated_kin_phone(::std::string* kin_phone);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.emergency_contact)
 private:
  inline void set_has_appellation();
  inline void clear_has_appellation();
  inline void set_has_kin_name();
  inline void clear_has_kin_name();
  inline void set_has_kin_phone();
  inline void clear_has_kin_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* appellation_;
  ::std::string* kin_name_;
  ::std::string* kin_phone_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static emergency_contact* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_user_info : public ::google::protobuf::Message {
 public:
  blacklist_user_info();
  virtual ~blacklist_user_info();

  blacklist_user_info(const blacklist_user_info& from);

  inline blacklist_user_info& operator=(const blacklist_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_user_info& default_instance();

  void Swap(blacklist_user_info* other);

  // implements Message ----------------------------------------------

  blacklist_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_user_info& from);
  void MergeFrom(const blacklist_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.user_info user_info = 1;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::common::user_info& user_info() const;
  inline ::common::user_info* mutable_user_info();
  inline ::common::user_info* release_user_info();
  inline void set_allocated_user_info(::common::user_info* user_info);

  // optional float loan_total = 2;
  inline bool has_loan_total() const;
  inline void clear_loan_total();
  static const int kLoanTotalFieldNumber = 2;
  inline float loan_total() const;
  inline void set_loan_total(float value);

  // optional int32 loan_count = 3;
  inline bool has_loan_count() const;
  inline void clear_loan_count();
  static const int kLoanCountFieldNumber = 3;
  inline ::google::protobuf::int32 loan_count() const;
  inline void set_loan_count(::google::protobuf::int32 value);

  // optional float also_total = 4;
  inline bool has_also_total() const;
  inline void clear_also_total();
  static const int kAlsoTotalFieldNumber = 4;
  inline float also_total() const;
  inline void set_also_total(float value);

  // optional int32 overdue_count = 5;
  inline bool has_overdue_count() const;
  inline void clear_overdue_count();
  static const int kOverdueCountFieldNumber = 5;
  inline ::google::protobuf::int32 overdue_count() const;
  inline void set_overdue_count(::google::protobuf::int32 value);

  // optional bytes repayment_state = 6;
  inline bool has_repayment_state() const;
  inline void clear_repayment_state();
  static const int kRepaymentStateFieldNumber = 6;
  inline const ::std::string& repayment_state() const;
  inline void set_repayment_state(const ::std::string& value);
  inline void set_repayment_state(const char* value);
  inline void set_repayment_state(const void* value, size_t size);
  inline ::std::string* mutable_repayment_state();
  inline ::std::string* release_repayment_state();
  inline void set_allocated_repayment_state(::std::string* repayment_state);

  // optional int32 overdue_day = 7;
  inline bool has_overdue_day() const;
  inline void clear_overdue_day();
  static const int kOverdueDayFieldNumber = 7;
  inline ::google::protobuf::int32 overdue_day() const;
  inline void set_overdue_day(::google::protobuf::int32 value);

  // optional bytes cheat_severity = 8;
  inline bool has_cheat_severity() const;
  inline void clear_cheat_severity();
  static const int kCheatSeverityFieldNumber = 8;
  inline const ::std::string& cheat_severity() const;
  inline void set_cheat_severity(const ::std::string& value);
  inline void set_cheat_severity(const char* value);
  inline void set_cheat_severity(const void* value, size_t size);
  inline ::std::string* mutable_cheat_severity();
  inline ::std::string* release_cheat_severity();
  inline void set_allocated_cheat_severity(::std::string* cheat_severity);

  // optional bytes data_sources = 9;
  inline bool has_data_sources() const;
  inline void clear_data_sources();
  static const int kDataSourcesFieldNumber = 9;
  inline const ::std::string& data_sources() const;
  inline void set_data_sources(const ::std::string& value);
  inline void set_data_sources(const char* value);
  inline void set_data_sources(const void* value, size_t size);
  inline ::std::string* mutable_data_sources();
  inline ::std::string* release_data_sources();
  inline void set_allocated_data_sources(::std::string* data_sources);

  // optional bytes operation_personnel = 10;
  inline bool has_operation_personnel() const;
  inline void clear_operation_personnel();
  static const int kOperationPersonnelFieldNumber = 10;
  inline const ::std::string& operation_personnel() const;
  inline void set_operation_personnel(const ::std::string& value);
  inline void set_operation_personnel(const char* value);
  inline void set_operation_personnel(const void* value, size_t size);
  inline ::std::string* mutable_operation_personnel();
  inline ::std::string* release_operation_personnel();
  inline void set_allocated_operation_personnel(::std::string* operation_personnel);

  // optional bytes operation_time = 11;
  inline bool has_operation_time() const;
  inline void clear_operation_time();
  static const int kOperationTimeFieldNumber = 11;
  inline const ::std::string& operation_time() const;
  inline void set_operation_time(const ::std::string& value);
  inline void set_operation_time(const char* value);
  inline void set_operation_time(const void* value, size_t size);
  inline ::std::string* mutable_operation_time();
  inline ::std::string* release_operation_time();
  inline void set_allocated_operation_time(::std::string* operation_time);

  // optional bytes update_time = 12;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 12;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const void* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_user_info)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_loan_total();
  inline void clear_has_loan_total();
  inline void set_has_loan_count();
  inline void clear_has_loan_count();
  inline void set_has_also_total();
  inline void clear_has_also_total();
  inline void set_has_overdue_count();
  inline void clear_has_overdue_count();
  inline void set_has_repayment_state();
  inline void clear_has_repayment_state();
  inline void set_has_overdue_day();
  inline void clear_has_overdue_day();
  inline void set_has_cheat_severity();
  inline void clear_has_cheat_severity();
  inline void set_has_data_sources();
  inline void clear_has_data_sources();
  inline void set_has_operation_personnel();
  inline void clear_has_operation_personnel();
  inline void set_has_operation_time();
  inline void clear_has_operation_time();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::user_info* user_info_;
  float loan_total_;
  ::google::protobuf::int32 loan_count_;
  float also_total_;
  ::google::protobuf::int32 overdue_count_;
  ::std::string* repayment_state_;
  ::std::string* cheat_severity_;
  ::std::string* data_sources_;
  ::std::string* operation_personnel_;
  ::std::string* operation_time_;
  ::std::string* update_time_;
  ::google::protobuf::int32 overdue_day_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_user_info* default_instance_;
};
// -------------------------------------------------------------------

class data_sources_info : public ::google::protobuf::Message {
 public:
  data_sources_info();
  virtual ~data_sources_info();

  data_sources_info(const data_sources_info& from);

  inline data_sources_info& operator=(const data_sources_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data_sources_info& default_instance();

  void Swap(data_sources_info* other);

  // implements Message ----------------------------------------------

  data_sources_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const data_sources_info& from);
  void MergeFrom(const data_sources_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sources_no = 1;
  inline bool has_sources_no() const;
  inline void clear_sources_no();
  static const int kSourcesNoFieldNumber = 1;
  inline const ::std::string& sources_no() const;
  inline void set_sources_no(const ::std::string& value);
  inline void set_sources_no(const char* value);
  inline void set_sources_no(const void* value, size_t size);
  inline ::std::string* mutable_sources_no();
  inline ::std::string* release_sources_no();
  inline void set_allocated_sources_no(::std::string* sources_no);

  // optional bytes sources_name = 2;
  inline bool has_sources_name() const;
  inline void clear_sources_name();
  static const int kSourcesNameFieldNumber = 2;
  inline const ::std::string& sources_name() const;
  inline void set_sources_name(const ::std::string& value);
  inline void set_sources_name(const char* value);
  inline void set_sources_name(const void* value, size_t size);
  inline ::std::string* mutable_sources_name();
  inline ::std::string* release_sources_name();
  inline void set_allocated_sources_name(::std::string* sources_name);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.data_sources_info)
 private:
  inline void set_has_sources_no();
  inline void clear_has_sources_no();
  inline void set_has_sources_name();
  inline void clear_has_sources_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sources_no_;
  ::std::string* sources_name_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static data_sources_info* default_instance_;
};
// -------------------------------------------------------------------

class platform_info : public ::google::protobuf::Message {
 public:
  platform_info();
  virtual ~platform_info();

  platform_info(const platform_info& from);

  inline platform_info& operator=(const platform_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const platform_info& default_instance();

  void Swap(platform_info* other);

  // implements Message ----------------------------------------------

  platform_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const platform_info& from);
  void MergeFrom(const platform_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes platform_no = 1;
  inline bool has_platform_no() const;
  inline void clear_platform_no();
  static const int kPlatformNoFieldNumber = 1;
  inline const ::std::string& platform_no() const;
  inline void set_platform_no(const ::std::string& value);
  inline void set_platform_no(const char* value);
  inline void set_platform_no(const void* value, size_t size);
  inline ::std::string* mutable_platform_no();
  inline ::std::string* release_platform_no();
  inline void set_allocated_platform_no(::std::string* platform_no);

  // optional bytes platform_name = 2;
  inline bool has_platform_name() const;
  inline void clear_platform_name();
  static const int kPlatformNameFieldNumber = 2;
  inline const ::std::string& platform_name() const;
  inline void set_platform_name(const ::std::string& value);
  inline void set_platform_name(const char* value);
  inline void set_platform_name(const void* value, size_t size);
  inline ::std::string* mutable_platform_name();
  inline ::std::string* release_platform_name();
  inline void set_allocated_platform_name(::std::string* platform_name);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.platform_info)
 private:
  inline void set_has_platform_no();
  inline void clear_has_platform_no();
  inline void set_has_platform_name();
  inline void clear_has_platform_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* platform_no_;
  ::std::string* platform_name_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static platform_info* default_instance_;
};
// -------------------------------------------------------------------

class platform_service : public ::google::protobuf::Message {
 public:
  platform_service();
  virtual ~platform_service();

  platform_service(const platform_service& from);

  inline platform_service& operator=(const platform_service& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const platform_service& default_instance();

  void Swap(platform_service* other);

  // implements Message ----------------------------------------------

  platform_service* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const platform_service& from);
  void MergeFrom(const platform_service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serivce_id = 1;
  inline bool has_serivce_id() const;
  inline void clear_serivce_id();
  static const int kSerivceIdFieldNumber = 1;
  inline const ::std::string& serivce_id() const;
  inline void set_serivce_id(const ::std::string& value);
  inline void set_serivce_id(const char* value);
  inline void set_serivce_id(const void* value, size_t size);
  inline ::std::string* mutable_serivce_id();
  inline ::std::string* release_serivce_id();
  inline void set_allocated_serivce_id(::std::string* serivce_id);

  // optional bytes service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const void* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.platform_service)
 private:
  inline void set_has_serivce_id();
  inline void clear_has_serivce_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serivce_id_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static platform_service* default_instance_;
};
// -------------------------------------------------------------------

class model_hit_statistics_info : public ::google::protobuf::Message {
 public:
  model_hit_statistics_info();
  virtual ~model_hit_statistics_info();

  model_hit_statistics_info(const model_hit_statistics_info& from);

  inline model_hit_statistics_info& operator=(const model_hit_statistics_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model_hit_statistics_info& default_instance();

  void Swap(model_hit_statistics_info* other);

  // implements Message ----------------------------------------------

  model_hit_statistics_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model_hit_statistics_info& from);
  void MergeFrom(const model_hit_statistics_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes platform_name = 1;
  inline bool has_platform_name() const;
  inline void clear_platform_name();
  static const int kPlatformNameFieldNumber = 1;
  inline const ::std::string& platform_name() const;
  inline void set_platform_name(const ::std::string& value);
  inline void set_platform_name(const char* value);
  inline void set_platform_name(const void* value, size_t size);
  inline ::std::string* mutable_platform_name();
  inline ::std::string* release_platform_name();
  inline void set_allocated_platform_name(::std::string* platform_name);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.model_hit_statistics_info)
 private:
  inline void set_has_platform_name();
  inline void clear_has_platform_name();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* platform_name_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static model_hit_statistics_info* default_instance_;
};
// -------------------------------------------------------------------

class hit_user_info : public ::google::protobuf::Message {
 public:
  hit_user_info();
  virtual ~hit_user_info();

  hit_user_info(const hit_user_info& from);

  inline hit_user_info& operator=(const hit_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_user_info& default_instance();

  void Swap(hit_user_info* other);

  // implements Message ----------------------------------------------

  hit_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_user_info& from);
  void MergeFrom(const hit_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_main_frame.platform_info platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline const ::AFP_main_frame::platform_info& platform() const;
  inline ::AFP_main_frame::platform_info* mutable_platform();
  inline ::AFP_main_frame::platform_info* release_platform();
  inline void set_allocated_platform(::AFP_main_frame::platform_info* platform);

  // optional bytes real_name = 2;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 2;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes id_card = 3;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 3;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes mobile_phone = 4;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 4;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes platform_service = 5;
  inline bool has_platform_service() const;
  inline void clear_platform_service();
  static const int kPlatformServiceFieldNumber = 5;
  inline const ::std::string& platform_service() const;
  inline void set_platform_service(const ::std::string& value);
  inline void set_platform_service(const char* value);
  inline void set_platform_service(const void* value, size_t size);
  inline ::std::string* mutable_platform_service();
  inline ::std::string* release_platform_service();
  inline void set_allocated_platform_service(::std::string* platform_service);

  // optional bytes hit_result = 6;
  inline bool has_hit_result() const;
  inline void clear_hit_result();
  static const int kHitResultFieldNumber = 6;
  inline const ::std::string& hit_result() const;
  inline void set_hit_result(const ::std::string& value);
  inline void set_hit_result(const char* value);
  inline void set_hit_result(const void* value, size_t size);
  inline ::std::string* mutable_hit_result();
  inline ::std::string* release_hit_result();
  inline void set_allocated_hit_result(::std::string* hit_result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_user_info)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_platform_service();
  inline void clear_has_platform_service();
  inline void set_has_hit_result();
  inline void clear_has_hit_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_main_frame::platform_info* platform_;
  ::std::string* real_name_;
  ::std::string* id_card_;
  ::std::string* mobile_phone_;
  ::std::string* platform_service_;
  ::std::string* hit_result_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_user_info* default_instance_;
};
// -------------------------------------------------------------------

class hit_user_analyze_info : public ::google::protobuf::Message {
 public:
  hit_user_analyze_info();
  virtual ~hit_user_analyze_info();

  hit_user_analyze_info(const hit_user_analyze_info& from);

  inline hit_user_analyze_info& operator=(const hit_user_analyze_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_user_analyze_info& default_instance();

  void Swap(hit_user_analyze_info* other);

  // implements Message ----------------------------------------------

  hit_user_analyze_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_user_analyze_info& from);
  void MergeFrom(const hit_user_analyze_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes property_val = 1;
  inline bool has_property_val() const;
  inline void clear_property_val();
  static const int kPropertyValFieldNumber = 1;
  inline const ::std::string& property_val() const;
  inline void set_property_val(const ::std::string& value);
  inline void set_property_val(const char* value);
  inline void set_property_val(const void* value, size_t size);
  inline ::std::string* mutable_property_val();
  inline ::std::string* release_property_val();
  inline void set_allocated_property_val(::std::string* property_val);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional float percent = 3;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 3;
  inline float percent() const;
  inline void set_percent(float value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_user_analyze_info)
 private:
  inline void set_has_property_val();
  inline void clear_has_property_val();
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* property_val_;
  ::google::protobuf::int32 total_number_;
  float percent_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_user_analyze_info* default_instance_;
};
// -------------------------------------------------------------------

class hit_rule_analyze_info : public ::google::protobuf::Message {
 public:
  hit_rule_analyze_info();
  virtual ~hit_rule_analyze_info();

  hit_rule_analyze_info(const hit_rule_analyze_info& from);

  inline hit_rule_analyze_info& operator=(const hit_rule_analyze_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_rule_analyze_info& default_instance();

  void Swap(hit_rule_analyze_info* other);

  // implements Message ----------------------------------------------

  hit_rule_analyze_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_rule_analyze_info& from);
  void MergeFrom(const hit_rule_analyze_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes rule = 1;
  inline bool has_rule() const;
  inline void clear_rule();
  static const int kRuleFieldNumber = 1;
  inline const ::std::string& rule() const;
  inline void set_rule(const ::std::string& value);
  inline void set_rule(const char* value);
  inline void set_rule(const void* value, size_t size);
  inline ::std::string* mutable_rule();
  inline ::std::string* release_rule();
  inline void set_allocated_rule(::std::string* rule);

  // optional bytes third_service_name = 2;
  inline bool has_third_service_name() const;
  inline void clear_third_service_name();
  static const int kThirdServiceNameFieldNumber = 2;
  inline const ::std::string& third_service_name() const;
  inline void set_third_service_name(const ::std::string& value);
  inline void set_third_service_name(const char* value);
  inline void set_third_service_name(const void* value, size_t size);
  inline ::std::string* mutable_third_service_name();
  inline ::std::string* release_third_service_name();
  inline void set_allocated_third_service_name(::std::string* third_service_name);

  // optional int32 total_number = 3;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 3;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional float percent = 4;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 4;
  inline float percent() const;
  inline void set_percent(float value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_rule_analyze_info)
 private:
  inline void set_has_rule();
  inline void clear_has_rule();
  inline void set_has_third_service_name();
  inline void clear_has_third_service_name();
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* rule_;
  ::std::string* third_service_name_;
  ::google::protobuf::int32 total_number_;
  float percent_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_rule_analyze_info* default_instance_;
};
// -------------------------------------------------------------------

class hit_detail_info : public ::google::protobuf::Message {
 public:
  hit_detail_info();
  virtual ~hit_detail_info();

  hit_detail_info(const hit_detail_info& from);

  inline hit_detail_info& operator=(const hit_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_detail_info& default_instance();

  void Swap(hit_detail_info* other);

  // implements Message ----------------------------------------------

  hit_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_detail_info& from);
  void MergeFrom(const hit_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.user_info user_info = 1;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::common::user_info& user_info() const;
  inline ::common::user_info* mutable_user_info();
  inline ::common::user_info* release_user_info();
  inline void set_allocated_user_info(::common::user_info* user_info);

  // optional .AFP_main_frame.platform_info platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline const ::AFP_main_frame::platform_info& platform() const;
  inline ::AFP_main_frame::platform_info* mutable_platform();
  inline ::AFP_main_frame::platform_info* release_platform();
  inline void set_allocated_platform(::AFP_main_frame::platform_info* platform);

  // optional bytes hit_rule = 3;
  inline bool has_hit_rule() const;
  inline void clear_hit_rule();
  static const int kHitRuleFieldNumber = 3;
  inline const ::std::string& hit_rule() const;
  inline void set_hit_rule(const ::std::string& value);
  inline void set_hit_rule(const char* value);
  inline void set_hit_rule(const void* value, size_t size);
  inline ::std::string* mutable_hit_rule();
  inline ::std::string* release_hit_rule();
  inline void set_allocated_hit_rule(::std::string* hit_rule);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_detail_info)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_hit_rule();
  inline void clear_has_hit_rule();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::user_info* user_info_;
  ::AFP_main_frame::platform_info* platform_;
  ::std::string* hit_rule_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_data_sources_ask : public ::google::protobuf::Message {
 public:
  blacklist_data_sources_ask();
  virtual ~blacklist_data_sources_ask();

  blacklist_data_sources_ask(const blacklist_data_sources_ask& from);

  inline blacklist_data_sources_ask& operator=(const blacklist_data_sources_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_data_sources_ask& default_instance();

  void Swap(blacklist_data_sources_ask* other);

  // implements Message ----------------------------------------------

  blacklist_data_sources_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_data_sources_ask& from);
  void MergeFrom(const blacklist_data_sources_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_data_sources_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_data_sources_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_data_sources_ans : public ::google::protobuf::Message {
 public:
  blacklist_data_sources_ans();
  virtual ~blacklist_data_sources_ans();

  blacklist_data_sources_ans(const blacklist_data_sources_ans& from);

  inline blacklist_data_sources_ans& operator=(const blacklist_data_sources_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_data_sources_ans& default_instance();

  void Swap(blacklist_data_sources_ans* other);

  // implements Message ----------------------------------------------

  blacklist_data_sources_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_data_sources_ans& from);
  void MergeFrom(const blacklist_data_sources_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.data_sources_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::data_sources_info& list(int index) const;
  inline ::AFP_main_frame::data_sources_info* mutable_list(int index);
  inline ::AFP_main_frame::data_sources_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::data_sources_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::data_sources_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_data_sources_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::data_sources_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_data_sources_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_query_ask : public ::google::protobuf::Message {
 public:
  blacklist_query_ask();
  virtual ~blacklist_query_ask();

  blacklist_query_ask(const blacklist_query_ask& from);

  inline blacklist_query_ask& operator=(const blacklist_query_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_query_ask& default_instance();

  void Swap(blacklist_query_ask* other);

  // implements Message ----------------------------------------------

  blacklist_query_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_query_ask& from);
  void MergeFrom(const blacklist_query_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional int32 min_overdue_count = 6;
  inline bool has_min_overdue_count() const;
  inline void clear_min_overdue_count();
  static const int kMinOverdueCountFieldNumber = 6;
  inline ::google::protobuf::int32 min_overdue_count() const;
  inline void set_min_overdue_count(::google::protobuf::int32 value);

  // optional int32 max_overdue_count = 7;
  inline bool has_max_overdue_count() const;
  inline void clear_max_overdue_count();
  static const int kMaxOverdueCountFieldNumber = 7;
  inline ::google::protobuf::int32 max_overdue_count() const;
  inline void set_max_overdue_count(::google::protobuf::int32 value);

  // optional float min_also_total = 8;
  inline bool has_min_also_total() const;
  inline void clear_min_also_total();
  static const int kMinAlsoTotalFieldNumber = 8;
  inline float min_also_total() const;
  inline void set_min_also_total(float value);

  // optional float max_also_total = 9;
  inline bool has_max_also_total() const;
  inline void clear_max_also_total();
  static const int kMaxAlsoTotalFieldNumber = 9;
  inline float max_also_total() const;
  inline void set_max_also_total(float value);

  // optional bytes repayment_state = 10;
  inline bool has_repayment_state() const;
  inline void clear_repayment_state();
  static const int kRepaymentStateFieldNumber = 10;
  inline const ::std::string& repayment_state() const;
  inline void set_repayment_state(const ::std::string& value);
  inline void set_repayment_state(const char* value);
  inline void set_repayment_state(const void* value, size_t size);
  inline ::std::string* mutable_repayment_state();
  inline ::std::string* release_repayment_state();
  inline void set_allocated_repayment_state(::std::string* repayment_state);

  // optional int32 min_overdue_day = 11;
  inline bool has_min_overdue_day() const;
  inline void clear_min_overdue_day();
  static const int kMinOverdueDayFieldNumber = 11;
  inline ::google::protobuf::int32 min_overdue_day() const;
  inline void set_min_overdue_day(::google::protobuf::int32 value);

  // optional int32 max_overdue_day = 12;
  inline bool has_max_overdue_day() const;
  inline void clear_max_overdue_day();
  static const int kMaxOverdueDayFieldNumber = 12;
  inline ::google::protobuf::int32 max_overdue_day() const;
  inline void set_max_overdue_day(::google::protobuf::int32 value);

  // optional bytes cheat_severity = 13;
  inline bool has_cheat_severity() const;
  inline void clear_cheat_severity();
  static const int kCheatSeverityFieldNumber = 13;
  inline const ::std::string& cheat_severity() const;
  inline void set_cheat_severity(const ::std::string& value);
  inline void set_cheat_severity(const char* value);
  inline void set_cheat_severity(const void* value, size_t size);
  inline ::std::string* mutable_cheat_severity();
  inline ::std::string* release_cheat_severity();
  inline void set_allocated_cheat_severity(::std::string* cheat_severity);

  // optional bytes data_sources = 14;
  inline bool has_data_sources() const;
  inline void clear_data_sources();
  static const int kDataSourcesFieldNumber = 14;
  inline const ::std::string& data_sources() const;
  inline void set_data_sources(const ::std::string& value);
  inline void set_data_sources(const char* value);
  inline void set_data_sources(const void* value, size_t size);
  inline ::std::string* mutable_data_sources();
  inline ::std::string* release_data_sources();
  inline void set_allocated_data_sources(::std::string* data_sources);

  // optional int32 page_num = 15;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 15;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 16;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 16;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 17;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 17;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_query_ask)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_min_overdue_count();
  inline void clear_has_min_overdue_count();
  inline void set_has_max_overdue_count();
  inline void clear_has_max_overdue_count();
  inline void set_has_min_also_total();
  inline void clear_has_min_also_total();
  inline void set_has_max_also_total();
  inline void clear_has_max_also_total();
  inline void set_has_repayment_state();
  inline void clear_has_repayment_state();
  inline void set_has_min_overdue_day();
  inline void clear_has_min_overdue_day();
  inline void set_has_max_overdue_day();
  inline void clear_has_max_overdue_day();
  inline void set_has_cheat_severity();
  inline void clear_has_cheat_severity();
  inline void set_has_data_sources();
  inline void clear_has_data_sources();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::google::protobuf::int32 min_overdue_count_;
  ::google::protobuf::int32 max_overdue_count_;
  float min_also_total_;
  float max_also_total_;
  ::std::string* repayment_state_;
  ::google::protobuf::int32 min_overdue_day_;
  ::google::protobuf::int32 max_overdue_day_;
  ::std::string* cheat_severity_;
  ::std::string* data_sources_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_query_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_query_ans : public ::google::protobuf::Message {
 public:
  blacklist_query_ans();
  virtual ~blacklist_query_ans();

  blacklist_query_ans(const blacklist_query_ans& from);

  inline blacklist_query_ans& operator=(const blacklist_query_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_query_ans& default_instance();

  void Swap(blacklist_query_ans* other);

  // implements Message ----------------------------------------------

  blacklist_query_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_query_ans& from);
  void MergeFrom(const blacklist_query_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.blacklist_user_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::blacklist_user_info& list(int index) const;
  inline ::AFP_main_frame::blacklist_user_info* mutable_list(int index);
  inline ::AFP_main_frame::blacklist_user_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::blacklist_user_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::blacklist_user_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_query_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::blacklist_user_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_query_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_detail_ask : public ::google::protobuf::Message {
 public:
  blacklist_detail_ask();
  virtual ~blacklist_detail_ask();

  blacklist_detail_ask(const blacklist_detail_ask& from);

  inline blacklist_detail_ask& operator=(const blacklist_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_detail_ask& default_instance();

  void Swap(blacklist_detail_ask* other);

  // implements Message ----------------------------------------------

  blacklist_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_detail_ask& from);
  void MergeFrom(const blacklist_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_detail_ask)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_detail_ans : public ::google::protobuf::Message {
 public:
  blacklist_detail_ans();
  virtual ~blacklist_detail_ans();

  blacklist_detail_ans(const blacklist_detail_ans& from);

  inline blacklist_detail_ans& operator=(const blacklist_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_detail_ans& default_instance();

  void Swap(blacklist_detail_ans* other);

  // implements Message ----------------------------------------------

  blacklist_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_detail_ans& from);
  void MergeFrom(const blacklist_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
  inline bool has_blacklist() const;
  inline void clear_blacklist();
  static const int kBlacklistFieldNumber = 1;
  inline const ::AFP_main_frame::blacklist_user_info& blacklist() const;
  inline ::AFP_main_frame::blacklist_user_info* mutable_blacklist();
  inline ::AFP_main_frame::blacklist_user_info* release_blacklist();
  inline void set_allocated_blacklist(::AFP_main_frame::blacklist_user_info* blacklist);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_detail_ans)
 private:
  inline void set_has_blacklist();
  inline void clear_has_blacklist();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_main_frame::blacklist_user_info* blacklist_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_save_ask : public ::google::protobuf::Message {
 public:
  blacklist_save_ask();
  virtual ~blacklist_save_ask();

  blacklist_save_ask(const blacklist_save_ask& from);

  inline blacklist_save_ask& operator=(const blacklist_save_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_save_ask& default_instance();

  void Swap(blacklist_save_ask* other);

  // implements Message ----------------------------------------------

  blacklist_save_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_save_ask& from);
  void MergeFrom(const blacklist_save_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
  inline bool has_blacklist() const;
  inline void clear_blacklist();
  static const int kBlacklistFieldNumber = 1;
  inline const ::AFP_main_frame::blacklist_user_info& blacklist() const;
  inline ::AFP_main_frame::blacklist_user_info* mutable_blacklist();
  inline ::AFP_main_frame::blacklist_user_info* release_blacklist();
  inline void set_allocated_blacklist(::AFP_main_frame::blacklist_user_info* blacklist);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_save_ask)
 private:
  inline void set_has_blacklist();
  inline void clear_has_blacklist();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_main_frame::blacklist_user_info* blacklist_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_save_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_save_ans : public ::google::protobuf::Message {
 public:
  blacklist_save_ans();
  virtual ~blacklist_save_ans();

  blacklist_save_ans(const blacklist_save_ans& from);

  inline blacklist_save_ans& operator=(const blacklist_save_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_save_ans& default_instance();

  void Swap(blacklist_save_ans* other);

  // implements Message ----------------------------------------------

  blacklist_save_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_save_ans& from);
  void MergeFrom(const blacklist_save_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_save_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_save_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_remove_ask : public ::google::protobuf::Message {
 public:
  blacklist_remove_ask();
  virtual ~blacklist_remove_ask();

  blacklist_remove_ask(const blacklist_remove_ask& from);

  inline blacklist_remove_ask& operator=(const blacklist_remove_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_remove_ask& default_instance();

  void Swap(blacklist_remove_ask* other);

  // implements Message ----------------------------------------------

  blacklist_remove_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_remove_ask& from);
  void MergeFrom(const blacklist_remove_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_remove_ask)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_remove_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_remove_ans : public ::google::protobuf::Message {
 public:
  blacklist_remove_ans();
  virtual ~blacklist_remove_ans();

  blacklist_remove_ans(const blacklist_remove_ans& from);

  inline blacklist_remove_ans& operator=(const blacklist_remove_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_remove_ans& default_instance();

  void Swap(blacklist_remove_ans* other);

  // implements Message ----------------------------------------------

  blacklist_remove_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_remove_ans& from);
  void MergeFrom(const blacklist_remove_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.blacklist_remove_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static blacklist_remove_ans* default_instance_;
};
// -------------------------------------------------------------------

class auto_trace_info : public ::google::protobuf::Message {
 public:
  auto_trace_info();
  virtual ~auto_trace_info();

  auto_trace_info(const auto_trace_info& from);

  inline auto_trace_info& operator=(const auto_trace_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_trace_info& default_instance();

  void Swap(auto_trace_info* other);

  // implements Message ----------------------------------------------

  auto_trace_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_trace_info& from);
  void MergeFrom(const auto_trace_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes trace_date = 4;
  inline bool has_trace_date() const;
  inline void clear_trace_date();
  static const int kTraceDateFieldNumber = 4;
  inline const ::std::string& trace_date() const;
  inline void set_trace_date(const ::std::string& value);
  inline void set_trace_date(const char* value);
  inline void set_trace_date(const void* value, size_t size);
  inline ::std::string* mutable_trace_date();
  inline ::std::string* release_trace_date();
  inline void set_allocated_trace_date(::std::string* trace_date);

  // optional bytes own_blacklist_hit = 5;
  inline bool has_own_blacklist_hit() const;
  inline void clear_own_blacklist_hit();
  static const int kOwnBlacklistHitFieldNumber = 5;
  inline const ::std::string& own_blacklist_hit() const;
  inline void set_own_blacklist_hit(const ::std::string& value);
  inline void set_own_blacklist_hit(const char* value);
  inline void set_own_blacklist_hit(const void* value, size_t size);
  inline ::std::string* mutable_own_blacklist_hit();
  inline ::std::string* release_own_blacklist_hit();
  inline void set_allocated_own_blacklist_hit(::std::string* own_blacklist_hit);

  // optional bytes qhzh_blacklist_hit = 6;
  inline bool has_qhzh_blacklist_hit() const;
  inline void clear_qhzh_blacklist_hit();
  static const int kQhzhBlacklistHitFieldNumber = 6;
  inline const ::std::string& qhzh_blacklist_hit() const;
  inline void set_qhzh_blacklist_hit(const ::std::string& value);
  inline void set_qhzh_blacklist_hit(const char* value);
  inline void set_qhzh_blacklist_hit(const void* value, size_t size);
  inline ::std::string* mutable_qhzh_blacklist_hit();
  inline ::std::string* release_qhzh_blacklist_hit();
  inline void set_allocated_qhzh_blacklist_hit(::std::string* qhzh_blacklist_hit);

  // optional bytes td_blacklist_hit = 7;
  inline bool has_td_blacklist_hit() const;
  inline void clear_td_blacklist_hit();
  static const int kTdBlacklistHitFieldNumber = 7;
  inline const ::std::string& td_blacklist_hit() const;
  inline void set_td_blacklist_hit(const ::std::string& value);
  inline void set_td_blacklist_hit(const char* value);
  inline void set_td_blacklist_hit(const void* value, size_t size);
  inline ::std::string* mutable_td_blacklist_hit();
  inline ::std::string* release_td_blacklist_hit();
  inline void set_allocated_td_blacklist_hit(::std::string* td_blacklist_hit);

  // optional bytes area = 8;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 8;
  inline const ::std::string& area() const;
  inline void set_area(const ::std::string& value);
  inline void set_area(const char* value);
  inline void set_area(const void* value, size_t size);
  inline ::std::string* mutable_area();
  inline ::std::string* release_area();
  inline void set_allocated_area(::std::string* area);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.auto_trace_info)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_trace_date();
  inline void clear_has_trace_date();
  inline void set_has_own_blacklist_hit();
  inline void clear_has_own_blacklist_hit();
  inline void set_has_qhzh_blacklist_hit();
  inline void clear_has_qhzh_blacklist_hit();
  inline void set_has_td_blacklist_hit();
  inline void clear_has_td_blacklist_hit();
  inline void set_has_area();
  inline void clear_has_area();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::std::string* trace_date_;
  ::std::string* own_blacklist_hit_;
  ::std::string* qhzh_blacklist_hit_;
  ::std::string* td_blacklist_hit_;
  ::std::string* area_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static auto_trace_info* default_instance_;
};
// -------------------------------------------------------------------

class auto_trace_ask : public ::google::protobuf::Message {
 public:
  auto_trace_ask();
  virtual ~auto_trace_ask();

  auto_trace_ask(const auto_trace_ask& from);

  inline auto_trace_ask& operator=(const auto_trace_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_trace_ask& default_instance();

  void Swap(auto_trace_ask* other);

  // implements Message ----------------------------------------------

  auto_trace_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_trace_ask& from);
  void MergeFrom(const auto_trace_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_main_frame.auto_trace_info trace_info = 1;
  inline bool has_trace_info() const;
  inline void clear_trace_info();
  static const int kTraceInfoFieldNumber = 1;
  inline const ::AFP_main_frame::auto_trace_info& trace_info() const;
  inline ::AFP_main_frame::auto_trace_info* mutable_trace_info();
  inline ::AFP_main_frame::auto_trace_info* release_trace_info();
  inline void set_allocated_trace_info(::AFP_main_frame::auto_trace_info* trace_info);

  // optional int32 page_num = 2;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 2;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 3;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 3;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 4;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 4;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.auto_trace_ask)
 private:
  inline void set_has_trace_info();
  inline void clear_has_trace_info();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_main_frame::auto_trace_info* trace_info_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static auto_trace_ask* default_instance_;
};
// -------------------------------------------------------------------

class auto_trace_ans : public ::google::protobuf::Message {
 public:
  auto_trace_ans();
  virtual ~auto_trace_ans();

  auto_trace_ans(const auto_trace_ans& from);

  inline auto_trace_ans& operator=(const auto_trace_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_trace_ans& default_instance();

  void Swap(auto_trace_ans* other);

  // implements Message ----------------------------------------------

  auto_trace_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auto_trace_ans& from);
  void MergeFrom(const auto_trace_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.auto_trace_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::auto_trace_info& list(int index) const;
  inline ::AFP_main_frame::auto_trace_info* mutable_list(int index);
  inline ::AFP_main_frame::auto_trace_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::auto_trace_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::auto_trace_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.auto_trace_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::auto_trace_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static auto_trace_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_score_interval_info : public ::google::protobuf::Message {
 public:
  credit_score_interval_info();
  virtual ~credit_score_interval_info();

  credit_score_interval_info(const credit_score_interval_info& from);

  inline credit_score_interval_info& operator=(const credit_score_interval_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_score_interval_info& default_instance();

  void Swap(credit_score_interval_info* other);

  // implements Message ----------------------------------------------

  credit_score_interval_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_score_interval_info& from);
  void MergeFrom(const credit_score_interval_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes score_interval = 1;
  inline bool has_score_interval() const;
  inline void clear_score_interval();
  static const int kScoreIntervalFieldNumber = 1;
  inline const ::std::string& score_interval() const;
  inline void set_score_interval(const ::std::string& value);
  inline void set_score_interval(const char* value);
  inline void set_score_interval(const void* value, size_t size);
  inline ::std::string* mutable_score_interval();
  inline ::std::string* release_score_interval();
  inline void set_allocated_score_interval(::std::string* score_interval);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_score_interval_info)
 private:
  inline void set_has_score_interval();
  inline void clear_has_score_interval();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* score_interval_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_score_interval_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_score_statistics_ask : public ::google::protobuf::Message {
 public:
  credit_score_statistics_ask();
  virtual ~credit_score_statistics_ask();

  credit_score_statistics_ask(const credit_score_statistics_ask& from);

  inline credit_score_statistics_ask& operator=(const credit_score_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_score_statistics_ask& default_instance();

  void Swap(credit_score_statistics_ask* other);

  // implements Message ----------------------------------------------

  credit_score_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_score_statistics_ask& from);
  void MergeFrom(const credit_score_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_score_statistics_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_score_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_score_statistics_ans : public ::google::protobuf::Message {
 public:
  credit_score_statistics_ans();
  virtual ~credit_score_statistics_ans();

  credit_score_statistics_ans(const credit_score_statistics_ans& from);

  inline credit_score_statistics_ans& operator=(const credit_score_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_score_statistics_ans& default_instance();

  void Swap(credit_score_statistics_ans* other);

  // implements Message ----------------------------------------------

  credit_score_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_score_statistics_ans& from);
  void MergeFrom(const credit_score_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.credit_score_interval_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::credit_score_interval_info& list(int index) const;
  inline ::AFP_main_frame::credit_score_interval_info* mutable_list(int index);
  inline ::AFP_main_frame::credit_score_interval_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_score_interval_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_score_interval_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_score_statistics_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_score_interval_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_score_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_ask : public ::google::protobuf::Message {
 public:
  credit_ask();
  virtual ~credit_ask();

  credit_ask(const credit_ask& from);

  inline credit_ask& operator=(const credit_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_ask& default_instance();

  void Swap(credit_ask* other);

  // implements Message ----------------------------------------------

  credit_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_ask& from);
  void MergeFrom(const credit_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes area = 4;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 4;
  inline const ::std::string& area() const;
  inline void set_area(const ::std::string& value);
  inline void set_area(const char* value);
  inline void set_area(const void* value, size_t size);
  inline ::std::string* mutable_area();
  inline ::std::string* release_area();
  inline void set_allocated_area(::std::string* area);

  // optional bytes score_interval = 5;
  inline bool has_score_interval() const;
  inline void clear_score_interval();
  static const int kScoreIntervalFieldNumber = 5;
  inline const ::std::string& score_interval() const;
  inline void set_score_interval(const ::std::string& value);
  inline void set_score_interval(const char* value);
  inline void set_score_interval(const void* value, size_t size);
  inline ::std::string* mutable_score_interval();
  inline ::std::string* release_score_interval();
  inline void set_allocated_score_interval(::std::string* score_interval);

  // optional int32 page_num = 6;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 6;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 7;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 7;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 8;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 8;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_ask)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_score_interval();
  inline void clear_has_score_interval();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::std::string* area_;
  ::std::string* score_interval_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_info : public ::google::protobuf::Message {
 public:
  credit_info();
  virtual ~credit_info();

  credit_info(const credit_info& from);

  inline credit_info& operator=(const credit_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_info& default_instance();

  void Swap(credit_info* other);

  // implements Message ----------------------------------------------

  credit_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_info& from);
  void MergeFrom(const credit_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.user_info user_info = 1;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::common::user_info& user_info() const;
  inline ::common::user_info* mutable_user_info();
  inline ::common::user_info* release_user_info();
  inline void set_allocated_user_info(::common::user_info* user_info);

  // optional int32 credit_score = 2;
  inline bool has_credit_score() const;
  inline void clear_credit_score();
  static const int kCreditScoreFieldNumber = 2;
  inline ::google::protobuf::int32 credit_score() const;
  inline void set_credit_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_info)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_credit_score();
  inline void clear_has_credit_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::user_info* user_info_;
  ::google::protobuf::int32 credit_score_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_ans : public ::google::protobuf::Message {
 public:
  credit_ans();
  virtual ~credit_ans();

  credit_ans(const credit_ans& from);

  inline credit_ans& operator=(const credit_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_ans& default_instance();

  void Swap(credit_ans* other);

  // implements Message ----------------------------------------------

  credit_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_ans& from);
  void MergeFrom(const credit_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.credit_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::credit_info& list(int index) const;
  inline ::AFP_main_frame::credit_info* mutable_list(int index);
  inline ::AFP_main_frame::credit_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_ans* default_instance_;
};
// -------------------------------------------------------------------

class verify_model_info : public ::google::protobuf::Message {
 public:
  verify_model_info();
  virtual ~verify_model_info();

  verify_model_info(const verify_model_info& from);

  inline verify_model_info& operator=(const verify_model_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_model_info& default_instance();

  void Swap(verify_model_info* other);

  // implements Message ----------------------------------------------

  verify_model_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_model_info& from);
  void MergeFrom(const verify_model_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes model_no = 1;
  inline bool has_model_no() const;
  inline void clear_model_no();
  static const int kModelNoFieldNumber = 1;
  inline const ::std::string& model_no() const;
  inline void set_model_no(const ::std::string& value);
  inline void set_model_no(const char* value);
  inline void set_model_no(const void* value, size_t size);
  inline ::std::string* mutable_model_no();
  inline ::std::string* release_model_no();
  inline void set_allocated_model_no(::std::string* model_no);

  // optional bytes model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const void* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional int32 total_number = 3;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 3;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_model_info)
 private:
  inline void set_has_model_no();
  inline void clear_has_model_no();
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* model_no_;
  ::std::string* model_name_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_model_info* default_instance_;
};
// -------------------------------------------------------------------

class verify_detail_info : public ::google::protobuf::Message {
 public:
  verify_detail_info();
  virtual ~verify_detail_info();

  verify_detail_info(const verify_detail_info& from);

  inline verify_detail_info& operator=(const verify_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_detail_info& default_instance();

  void Swap(verify_detail_info* other);

  // implements Message ----------------------------------------------

  verify_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_detail_info& from);
  void MergeFrom(const verify_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const void* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional int32 pass_number = 3;
  inline bool has_pass_number() const;
  inline void clear_pass_number();
  static const int kPassNumberFieldNumber = 3;
  inline ::google::protobuf::int32 pass_number() const;
  inline void set_pass_number(::google::protobuf::int32 value);

  // optional float pass_percent = 4;
  inline bool has_pass_percent() const;
  inline void clear_pass_percent();
  static const int kPassPercentFieldNumber = 4;
  inline float pass_percent() const;
  inline void set_pass_percent(float value);

  // optional int32 no_pass_number = 5;
  inline bool has_no_pass_number() const;
  inline void clear_no_pass_number();
  static const int kNoPassNumberFieldNumber = 5;
  inline ::google::protobuf::int32 no_pass_number() const;
  inline void set_no_pass_number(::google::protobuf::int32 value);

  // optional float no_pass_percent = 6;
  inline bool has_no_pass_percent() const;
  inline void clear_no_pass_percent();
  static const int kNoPassPercentFieldNumber = 6;
  inline float no_pass_percent() const;
  inline void set_no_pass_percent(float value);

  // optional int32 human_review_number = 7;
  inline bool has_human_review_number() const;
  inline void clear_human_review_number();
  static const int kHumanReviewNumberFieldNumber = 7;
  inline ::google::protobuf::int32 human_review_number() const;
  inline void set_human_review_number(::google::protobuf::int32 value);

  // optional float human_review_percent = 8;
  inline bool has_human_review_percent() const;
  inline void clear_human_review_percent();
  static const int kHumanReviewPercentFieldNumber = 8;
  inline float human_review_percent() const;
  inline void set_human_review_percent(float value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_detail_info)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_pass_number();
  inline void clear_has_pass_number();
  inline void set_has_pass_percent();
  inline void clear_has_pass_percent();
  inline void set_has_no_pass_number();
  inline void clear_has_no_pass_number();
  inline void set_has_no_pass_percent();
  inline void clear_has_no_pass_percent();
  inline void set_has_human_review_number();
  inline void clear_has_human_review_number();
  inline void set_has_human_review_percent();
  inline void clear_has_human_review_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* model_name_;
  ::google::protobuf::int32 total_number_;
  ::google::protobuf::int32 pass_number_;
  float pass_percent_;
  ::google::protobuf::int32 no_pass_number_;
  float no_pass_percent_;
  ::google::protobuf::int32 human_review_number_;
  float human_review_percent_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class verify_model_ask : public ::google::protobuf::Message {
 public:
  verify_model_ask();
  virtual ~verify_model_ask();

  verify_model_ask(const verify_model_ask& from);

  inline verify_model_ask& operator=(const verify_model_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_model_ask& default_instance();

  void Swap(verify_model_ask* other);

  // implements Message ----------------------------------------------

  verify_model_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_model_ask& from);
  void MergeFrom(const verify_model_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_model_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_model_ask* default_instance_;
};
// -------------------------------------------------------------------

class verify_model_ans : public ::google::protobuf::Message {
 public:
  verify_model_ans();
  virtual ~verify_model_ans();

  verify_model_ans(const verify_model_ans& from);

  inline verify_model_ans& operator=(const verify_model_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_model_ans& default_instance();

  void Swap(verify_model_ans* other);

  // implements Message ----------------------------------------------

  verify_model_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_model_ans& from);
  void MergeFrom(const verify_model_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.verify_model_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::verify_model_info& list(int index) const;
  inline ::AFP_main_frame::verify_model_info* mutable_list(int index);
  inline ::AFP_main_frame::verify_model_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_model_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_model_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_model_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_model_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_model_ans* default_instance_;
};
// -------------------------------------------------------------------

class verify_detail_ask : public ::google::protobuf::Message {
 public:
  verify_detail_ask();
  virtual ~verify_detail_ask();

  verify_detail_ask(const verify_detail_ask& from);

  inline verify_detail_ask& operator=(const verify_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_detail_ask& default_instance();

  void Swap(verify_detail_ask* other);

  // implements Message ----------------------------------------------

  verify_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_detail_ask& from);
  void MergeFrom(const verify_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional int32 page_num = 3;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 3;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 4;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 4;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_detail_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class verify_detail_ans : public ::google::protobuf::Message {
 public:
  verify_detail_ans();
  virtual ~verify_detail_ans();

  verify_detail_ans(const verify_detail_ans& from);

  inline verify_detail_ans& operator=(const verify_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_detail_ans& default_instance();

  void Swap(verify_detail_ans* other);

  // implements Message ----------------------------------------------

  verify_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_detail_ans& from);
  void MergeFrom(const verify_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.verify_detail_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::verify_detail_info& list(int index) const;
  inline ::AFP_main_frame::verify_detail_info* mutable_list(int index);
  inline ::AFP_main_frame::verify_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_detail_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_detail_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_detail_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class afp_verify_info : public ::google::protobuf::Message {
 public:
  afp_verify_info();
  virtual ~afp_verify_info();

  afp_verify_info(const afp_verify_info& from);

  inline afp_verify_info& operator=(const afp_verify_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const afp_verify_info& default_instance();

  void Swap(afp_verify_info* other);

  // implements Message ----------------------------------------------

  afp_verify_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const afp_verify_info& from);
  void MergeFrom(const afp_verify_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_main_frame.verify_model_info model_info = 1;
  inline bool has_model_info() const;
  inline void clear_model_info();
  static const int kModelInfoFieldNumber = 1;
  inline const ::AFP_main_frame::verify_model_info& model_info() const;
  inline ::AFP_main_frame::verify_model_info* mutable_model_info();
  inline ::AFP_main_frame::verify_model_info* release_model_info();
  inline void set_allocated_model_info(::AFP_main_frame::verify_model_info* model_info);

  // optional bytes verify_result = 2;
  inline bool has_verify_result() const;
  inline void clear_verify_result();
  static const int kVerifyResultFieldNumber = 2;
  inline const ::std::string& verify_result() const;
  inline void set_verify_result(const ::std::string& value);
  inline void set_verify_result(const char* value);
  inline void set_verify_result(const void* value, size_t size);
  inline ::std::string* mutable_verify_result();
  inline ::std::string* release_verify_result();
  inline void set_allocated_verify_result(::std::string* verify_result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.afp_verify_info)
 private:
  inline void set_has_model_info();
  inline void clear_has_model_info();
  inline void set_has_verify_result();
  inline void clear_has_verify_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_main_frame::verify_model_info* model_info_;
  ::std::string* verify_result_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static afp_verify_info* default_instance_;
};
// -------------------------------------------------------------------

class afp_model_verify_ask : public ::google::protobuf::Message {
 public:
  afp_model_verify_ask();
  virtual ~afp_model_verify_ask();

  afp_model_verify_ask(const afp_model_verify_ask& from);

  inline afp_model_verify_ask& operator=(const afp_model_verify_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const afp_model_verify_ask& default_instance();

  void Swap(afp_model_verify_ask* other);

  // implements Message ----------------------------------------------

  afp_model_verify_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const afp_model_verify_ask& from);
  void MergeFrom(const afp_model_verify_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // repeated bytes model_nos = 4;
  inline int model_nos_size() const;
  inline void clear_model_nos();
  static const int kModelNosFieldNumber = 4;
  inline const ::std::string& model_nos(int index) const;
  inline ::std::string* mutable_model_nos(int index);
  inline void set_model_nos(int index, const ::std::string& value);
  inline void set_model_nos(int index, const char* value);
  inline void set_model_nos(int index, const void* value, size_t size);
  inline ::std::string* add_model_nos();
  inline void add_model_nos(const ::std::string& value);
  inline void add_model_nos(const char* value);
  inline void add_model_nos(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& model_nos() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_model_nos();

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.afp_model_verify_ask)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::google::protobuf::RepeatedPtrField< ::std::string> model_nos_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static afp_model_verify_ask* default_instance_;
};
// -------------------------------------------------------------------

class afp_model_verify_ans : public ::google::protobuf::Message {
 public:
  afp_model_verify_ans();
  virtual ~afp_model_verify_ans();

  afp_model_verify_ans(const afp_model_verify_ans& from);

  inline afp_model_verify_ans& operator=(const afp_model_verify_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const afp_model_verify_ans& default_instance();

  void Swap(afp_model_verify_ans* other);

  // implements Message ----------------------------------------------

  afp_model_verify_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const afp_model_verify_ans& from);
  void MergeFrom(const afp_model_verify_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // repeated .AFP_main_frame.afp_verify_info verify_info = 4;
  inline int verify_info_size() const;
  inline void clear_verify_info();
  static const int kVerifyInfoFieldNumber = 4;
  inline const ::AFP_main_frame::afp_verify_info& verify_info(int index) const;
  inline ::AFP_main_frame::afp_verify_info* mutable_verify_info(int index);
  inline ::AFP_main_frame::afp_verify_info* add_verify_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_verify_info >&
      verify_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_verify_info >*
      mutable_verify_info();

  // optional .common.errorinfo error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.afp_model_verify_ans)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_verify_info > verify_info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static afp_model_verify_ans* default_instance_;
};
// -------------------------------------------------------------------

class third_platform_verify_info : public ::google::protobuf::Message {
 public:
  third_platform_verify_info();
  virtual ~third_platform_verify_info();

  third_platform_verify_info(const third_platform_verify_info& from);

  inline third_platform_verify_info& operator=(const third_platform_verify_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const third_platform_verify_info& default_instance();

  void Swap(third_platform_verify_info* other);

  // implements Message ----------------------------------------------

  third_platform_verify_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const third_platform_verify_info& from);
  void MergeFrom(const third_platform_verify_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes platform_no = 4;
  inline bool has_platform_no() const;
  inline void clear_platform_no();
  static const int kPlatformNoFieldNumber = 4;
  inline const ::std::string& platform_no() const;
  inline void set_platform_no(const ::std::string& value);
  inline void set_platform_no(const char* value);
  inline void set_platform_no(const void* value, size_t size);
  inline ::std::string* mutable_platform_no();
  inline ::std::string* release_platform_no();
  inline void set_allocated_platform_no(::std::string* platform_no);

  // optional bytes serivce_id = 5;
  inline bool has_serivce_id() const;
  inline void clear_serivce_id();
  static const int kSerivceIdFieldNumber = 5;
  inline const ::std::string& serivce_id() const;
  inline void set_serivce_id(const ::std::string& value);
  inline void set_serivce_id(const char* value);
  inline void set_serivce_id(const void* value, size_t size);
  inline ::std::string* mutable_serivce_id();
  inline ::std::string* release_serivce_id();
  inline void set_allocated_serivce_id(::std::string* serivce_id);

  // optional bytes param1 = 6;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 6;
  inline const ::std::string& param1() const;
  inline void set_param1(const ::std::string& value);
  inline void set_param1(const char* value);
  inline void set_param1(const void* value, size_t size);
  inline ::std::string* mutable_param1();
  inline ::std::string* release_param1();
  inline void set_allocated_param1(::std::string* param1);

  // optional bytes param2 = 7;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 7;
  inline const ::std::string& param2() const;
  inline void set_param2(const ::std::string& value);
  inline void set_param2(const char* value);
  inline void set_param2(const void* value, size_t size);
  inline ::std::string* mutable_param2();
  inline ::std::string* release_param2();
  inline void set_allocated_param2(::std::string* param2);

  // optional bytes param3 = 8;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 8;
  inline const ::std::string& param3() const;
  inline void set_param3(const ::std::string& value);
  inline void set_param3(const char* value);
  inline void set_param3(const void* value, size_t size);
  inline ::std::string* mutable_param3();
  inline ::std::string* release_param3();
  inline void set_allocated_param3(::std::string* param3);

  // optional bytes param4 = 9;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 9;
  inline const ::std::string& param4() const;
  inline void set_param4(const ::std::string& value);
  inline void set_param4(const char* value);
  inline void set_param4(const void* value, size_t size);
  inline ::std::string* mutable_param4();
  inline ::std::string* release_param4();
  inline void set_allocated_param4(::std::string* param4);

  // optional bytes param5 = 10;
  inline bool has_param5() const;
  inline void clear_param5();
  static const int kParam5FieldNumber = 10;
  inline const ::std::string& param5() const;
  inline void set_param5(const ::std::string& value);
  inline void set_param5(const char* value);
  inline void set_param5(const void* value, size_t size);
  inline ::std::string* mutable_param5();
  inline ::std::string* release_param5();
  inline void set_allocated_param5(::std::string* param5);

  // optional bytes param6 = 11;
  inline bool has_param6() const;
  inline void clear_param6();
  static const int kParam6FieldNumber = 11;
  inline const ::std::string& param6() const;
  inline void set_param6(const ::std::string& value);
  inline void set_param6(const char* value);
  inline void set_param6(const void* value, size_t size);
  inline ::std::string* mutable_param6();
  inline ::std::string* release_param6();
  inline void set_allocated_param6(::std::string* param6);

  // optional bytes param7 = 12;
  inline bool has_param7() const;
  inline void clear_param7();
  static const int kParam7FieldNumber = 12;
  inline const ::std::string& param7() const;
  inline void set_param7(const ::std::string& value);
  inline void set_param7(const char* value);
  inline void set_param7(const void* value, size_t size);
  inline ::std::string* mutable_param7();
  inline ::std::string* release_param7();
  inline void set_allocated_param7(::std::string* param7);

  // optional bytes param8 = 13;
  inline bool has_param8() const;
  inline void clear_param8();
  static const int kParam8FieldNumber = 13;
  inline const ::std::string& param8() const;
  inline void set_param8(const ::std::string& value);
  inline void set_param8(const char* value);
  inline void set_param8(const void* value, size_t size);
  inline ::std::string* mutable_param8();
  inline ::std::string* release_param8();
  inline void set_allocated_param8(::std::string* param8);

  // optional bytes param9 = 14;
  inline bool has_param9() const;
  inline void clear_param9();
  static const int kParam9FieldNumber = 14;
  inline const ::std::string& param9() const;
  inline void set_param9(const ::std::string& value);
  inline void set_param9(const char* value);
  inline void set_param9(const void* value, size_t size);
  inline ::std::string* mutable_param9();
  inline ::std::string* release_param9();
  inline void set_allocated_param9(::std::string* param9);

  // optional bytes param10 = 15;
  inline bool has_param10() const;
  inline void clear_param10();
  static const int kParam10FieldNumber = 15;
  inline const ::std::string& param10() const;
  inline void set_param10(const ::std::string& value);
  inline void set_param10(const char* value);
  inline void set_param10(const void* value, size_t size);
  inline ::std::string* mutable_param10();
  inline ::std::string* release_param10();
  inline void set_allocated_param10(::std::string* param10);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.third_platform_verify_info)
 private:
  inline void set_has_platform_no();
  inline void clear_has_platform_no();
  inline void set_has_serivce_id();
  inline void clear_has_serivce_id();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();
  inline void set_has_param5();
  inline void clear_has_param5();
  inline void set_has_param6();
  inline void clear_has_param6();
  inline void set_has_param7();
  inline void clear_has_param7();
  inline void set_has_param8();
  inline void clear_has_param8();
  inline void set_has_param9();
  inline void clear_has_param9();
  inline void set_has_param10();
  inline void clear_has_param10();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* platform_no_;
  ::std::string* serivce_id_;
  ::std::string* param1_;
  ::std::string* param2_;
  ::std::string* param3_;
  ::std::string* param4_;
  ::std::string* param5_;
  ::std::string* param6_;
  ::std::string* param7_;
  ::std::string* param8_;
  ::std::string* param9_;
  ::std::string* param10_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static third_platform_verify_info* default_instance_;
};
// -------------------------------------------------------------------

class identity_sync_ask : public ::google::protobuf::Message {
 public:
  identity_sync_ask();
  virtual ~identity_sync_ask();

  identity_sync_ask(const identity_sync_ask& from);

  inline identity_sync_ask& operator=(const identity_sync_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const identity_sync_ask& default_instance();

  void Swap(identity_sync_ask* other);

  // implements Message ----------------------------------------------

  identity_sync_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const identity_sync_ask& from);
  void MergeFrom(const identity_sync_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional .common.common_ask_header ask_header = 4;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 4;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.identity_sync_ask)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static identity_sync_ask* default_instance_;
};
// -------------------------------------------------------------------

class identity_sync_ans : public ::google::protobuf::Message {
 public:
  identity_sync_ans();
  virtual ~identity_sync_ans();

  identity_sync_ans(const identity_sync_ans& from);

  inline identity_sync_ans& operator=(const identity_sync_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const identity_sync_ans& default_instance();

  void Swap(identity_sync_ans* other);

  // implements Message ----------------------------------------------

  identity_sync_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const identity_sync_ans& from);
  void MergeFrom(const identity_sync_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.third_platform_verify_info verify_info = 1;
  inline int verify_info_size() const;
  inline void clear_verify_info();
  static const int kVerifyInfoFieldNumber = 1;
  inline const ::AFP_main_frame::third_platform_verify_info& verify_info(int index) const;
  inline ::AFP_main_frame::third_platform_verify_info* mutable_verify_info(int index);
  inline ::AFP_main_frame::third_platform_verify_info* add_verify_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::third_platform_verify_info >&
      verify_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::third_platform_verify_info >*
      mutable_verify_info();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.identity_sync_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::third_platform_verify_info > verify_info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static identity_sync_ans* default_instance_;
};
// -------------------------------------------------------------------

class model_verify_info : public ::google::protobuf::Message {
 public:
  model_verify_info();
  virtual ~model_verify_info();

  model_verify_info(const model_verify_info& from);

  inline model_verify_info& operator=(const model_verify_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model_verify_info& default_instance();

  void Swap(model_verify_info* other);

  // implements Message ----------------------------------------------

  model_verify_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model_verify_info& from);
  void MergeFrom(const model_verify_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const void* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // optional bytes status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const void* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.model_verify_info)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  ::std::string* status_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static model_verify_info* default_instance_;
};
// -------------------------------------------------------------------

class model_verify_ask : public ::google::protobuf::Message {
 public:
  model_verify_ask();
  virtual ~model_verify_ask();

  model_verify_ask(const model_verify_ask& from);

  inline model_verify_ask& operator=(const model_verify_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model_verify_ask& default_instance();

  void Swap(model_verify_ask* other);

  // implements Message ----------------------------------------------

  model_verify_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model_verify_ask& from);
  void MergeFrom(const model_verify_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.model_verify_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static model_verify_ask* default_instance_;
};
// -------------------------------------------------------------------

class model_verify_ans : public ::google::protobuf::Message {
 public:
  model_verify_ans();
  virtual ~model_verify_ans();

  model_verify_ans(const model_verify_ans& from);

  inline model_verify_ans& operator=(const model_verify_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model_verify_ans& default_instance();

  void Swap(model_verify_ans* other);

  // implements Message ----------------------------------------------

  model_verify_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model_verify_ans& from);
  void MergeFrom(const model_verify_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.model_verify_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::model_verify_info& list(int index) const;
  inline ::AFP_main_frame::model_verify_info* mutable_list(int index);
  inline ::AFP_main_frame::model_verify_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_verify_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_verify_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.model_verify_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_verify_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static model_verify_ans* default_instance_;
};
// -------------------------------------------------------------------

class platform_info_ask : public ::google::protobuf::Message {
 public:
  platform_info_ask();
  virtual ~platform_info_ask();

  platform_info_ask(const platform_info_ask& from);

  inline platform_info_ask& operator=(const platform_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const platform_info_ask& default_instance();

  void Swap(platform_info_ask* other);

  // implements Message ----------------------------------------------

  platform_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const platform_info_ask& from);
  void MergeFrom(const platform_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.platform_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static platform_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class platform_info_ans : public ::google::protobuf::Message {
 public:
  platform_info_ans();
  virtual ~platform_info_ans();

  platform_info_ans(const platform_info_ans& from);

  inline platform_info_ans& operator=(const platform_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const platform_info_ans& default_instance();

  void Swap(platform_info_ans* other);

  // implements Message ----------------------------------------------

  platform_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const platform_info_ans& from);
  void MergeFrom(const platform_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.platform_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::platform_info& list(int index) const;
  inline ::AFP_main_frame::platform_info* mutable_list(int index);
  inline ::AFP_main_frame::platform_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::platform_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::platform_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.platform_info_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::platform_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static platform_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class model_hit_statistics_ask : public ::google::protobuf::Message {
 public:
  model_hit_statistics_ask();
  virtual ~model_hit_statistics_ask();

  model_hit_statistics_ask(const model_hit_statistics_ask& from);

  inline model_hit_statistics_ask& operator=(const model_hit_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model_hit_statistics_ask& default_instance();

  void Swap(model_hit_statistics_ask* other);

  // implements Message ----------------------------------------------

  model_hit_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model_hit_statistics_ask& from);
  void MergeFrom(const model_hit_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.model_hit_statistics_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static model_hit_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class model_hit_statistics_ans : public ::google::protobuf::Message {
 public:
  model_hit_statistics_ans();
  virtual ~model_hit_statistics_ans();

  model_hit_statistics_ans(const model_hit_statistics_ans& from);

  inline model_hit_statistics_ans& operator=(const model_hit_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model_hit_statistics_ans& default_instance();

  void Swap(model_hit_statistics_ans* other);

  // implements Message ----------------------------------------------

  model_hit_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model_hit_statistics_ans& from);
  void MergeFrom(const model_hit_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.model_hit_statistics_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::model_hit_statistics_info& list(int index) const;
  inline ::AFP_main_frame::model_hit_statistics_info* mutable_list(int index);
  inline ::AFP_main_frame::model_hit_statistics_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_hit_statistics_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_hit_statistics_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.model_hit_statistics_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_hit_statistics_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static model_hit_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class hit_list_ask : public ::google::protobuf::Message {
 public:
  hit_list_ask();
  virtual ~hit_list_ask();

  hit_list_ask(const hit_list_ask& from);

  inline hit_list_ask& operator=(const hit_list_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_list_ask& default_instance();

  void Swap(hit_list_ask* other);

  // implements Message ----------------------------------------------

  hit_list_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_list_ask& from);
  void MergeFrom(const hit_list_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes platform_no = 3;
  inline bool has_platform_no() const;
  inline void clear_platform_no();
  static const int kPlatformNoFieldNumber = 3;
  inline const ::std::string& platform_no() const;
  inline void set_platform_no(const ::std::string& value);
  inline void set_platform_no(const char* value);
  inline void set_platform_no(const void* value, size_t size);
  inline ::std::string* mutable_platform_no();
  inline ::std::string* release_platform_no();
  inline void set_allocated_platform_no(::std::string* platform_no);

  // optional int32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 5;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 5;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 6;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 6;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_list_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_platform_no();
  inline void clear_has_platform_no();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* platform_no_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_list_ask* default_instance_;
};
// -------------------------------------------------------------------

class hit_list_ans : public ::google::protobuf::Message {
 public:
  hit_list_ans();
  virtual ~hit_list_ans();

  hit_list_ans(const hit_list_ans& from);

  inline hit_list_ans& operator=(const hit_list_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_list_ans& default_instance();

  void Swap(hit_list_ans* other);

  // implements Message ----------------------------------------------

  hit_list_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_list_ans& from);
  void MergeFrom(const hit_list_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.hit_user_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::hit_user_info& list(int index) const;
  inline ::AFP_main_frame::hit_user_info* mutable_list(int index);
  inline ::AFP_main_frame::hit_user_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_list_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_list_ans* default_instance_;
};
// -------------------------------------------------------------------

class hit_user_property_analyze_ask : public ::google::protobuf::Message {
 public:
  hit_user_property_analyze_ask();
  virtual ~hit_user_property_analyze_ask();

  hit_user_property_analyze_ask(const hit_user_property_analyze_ask& from);

  inline hit_user_property_analyze_ask& operator=(const hit_user_property_analyze_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_user_property_analyze_ask& default_instance();

  void Swap(hit_user_property_analyze_ask* other);

  // implements Message ----------------------------------------------

  hit_user_property_analyze_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_user_property_analyze_ask& from);
  void MergeFrom(const hit_user_property_analyze_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes property = 1;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 1;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const void* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_user_property_analyze_ask)
 private:
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* property_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_user_property_analyze_ask* default_instance_;
};
// -------------------------------------------------------------------

class hit_user_property_analyze_ans : public ::google::protobuf::Message {
 public:
  hit_user_property_analyze_ans();
  virtual ~hit_user_property_analyze_ans();

  hit_user_property_analyze_ans(const hit_user_property_analyze_ans& from);

  inline hit_user_property_analyze_ans& operator=(const hit_user_property_analyze_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_user_property_analyze_ans& default_instance();

  void Swap(hit_user_property_analyze_ans* other);

  // implements Message ----------------------------------------------

  hit_user_property_analyze_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_user_property_analyze_ans& from);
  void MergeFrom(const hit_user_property_analyze_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.hit_user_analyze_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::hit_user_analyze_info& list(int index) const;
  inline ::AFP_main_frame::hit_user_analyze_info* mutable_list(int index);
  inline ::AFP_main_frame::hit_user_analyze_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_analyze_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_analyze_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_user_property_analyze_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_analyze_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_user_property_analyze_ans* default_instance_;
};
// -------------------------------------------------------------------

class hit_rule_analyze_ask : public ::google::protobuf::Message {
 public:
  hit_rule_analyze_ask();
  virtual ~hit_rule_analyze_ask();

  hit_rule_analyze_ask(const hit_rule_analyze_ask& from);

  inline hit_rule_analyze_ask& operator=(const hit_rule_analyze_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_rule_analyze_ask& default_instance();

  void Swap(hit_rule_analyze_ask* other);

  // implements Message ----------------------------------------------

  hit_rule_analyze_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_rule_analyze_ask& from);
  void MergeFrom(const hit_rule_analyze_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes platform_no = 1;
  inline bool has_platform_no() const;
  inline void clear_platform_no();
  static const int kPlatformNoFieldNumber = 1;
  inline const ::std::string& platform_no() const;
  inline void set_platform_no(const ::std::string& value);
  inline void set_platform_no(const char* value);
  inline void set_platform_no(const void* value, size_t size);
  inline ::std::string* mutable_platform_no();
  inline ::std::string* release_platform_no();
  inline void set_allocated_platform_no(::std::string* platform_no);

  // optional int32 page_num = 2;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 2;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 3;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 3;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 4;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 4;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_rule_analyze_ask)
 private:
  inline void set_has_platform_no();
  inline void clear_has_platform_no();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* platform_no_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_rule_analyze_ask* default_instance_;
};
// -------------------------------------------------------------------

class hit_rule_analyze_ans : public ::google::protobuf::Message {
 public:
  hit_rule_analyze_ans();
  virtual ~hit_rule_analyze_ans();

  hit_rule_analyze_ans(const hit_rule_analyze_ans& from);

  inline hit_rule_analyze_ans& operator=(const hit_rule_analyze_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_rule_analyze_ans& default_instance();

  void Swap(hit_rule_analyze_ans* other);

  // implements Message ----------------------------------------------

  hit_rule_analyze_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_rule_analyze_ans& from);
  void MergeFrom(const hit_rule_analyze_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.hit_rule_analyze_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::hit_rule_analyze_info& list(int index) const;
  inline ::AFP_main_frame::hit_rule_analyze_info* mutable_list(int index);
  inline ::AFP_main_frame::hit_rule_analyze_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_rule_analyze_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_rule_analyze_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_rule_analyze_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_rule_analyze_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_rule_analyze_ans* default_instance_;
};
// -------------------------------------------------------------------

class hit_detail_ask : public ::google::protobuf::Message {
 public:
  hit_detail_ask();
  virtual ~hit_detail_ask();

  hit_detail_ask(const hit_detail_ask& from);

  inline hit_detail_ask& operator=(const hit_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_detail_ask& default_instance();

  void Swap(hit_detail_ask* other);

  // implements Message ----------------------------------------------

  hit_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_detail_ask& from);
  void MergeFrom(const hit_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes platform_no = 3;
  inline bool has_platform_no() const;
  inline void clear_platform_no();
  static const int kPlatformNoFieldNumber = 3;
  inline const ::std::string& platform_no() const;
  inline void set_platform_no(const ::std::string& value);
  inline void set_platform_no(const char* value);
  inline void set_platform_no(const void* value, size_t size);
  inline ::std::string* mutable_platform_no();
  inline ::std::string* release_platform_no();
  inline void set_allocated_platform_no(::std::string* platform_no);

  // optional int32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 5;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 5;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 6;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 6;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_detail_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_platform_no();
  inline void clear_has_platform_no();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* platform_no_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class hit_detail_ans : public ::google::protobuf::Message {
 public:
  hit_detail_ans();
  virtual ~hit_detail_ans();

  hit_detail_ans(const hit_detail_ans& from);

  inline hit_detail_ans& operator=(const hit_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hit_detail_ans& default_instance();

  void Swap(hit_detail_ans* other);

  // implements Message ----------------------------------------------

  hit_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hit_detail_ans& from);
  void MergeFrom(const hit_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.hit_detail_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::hit_detail_info& list(int index) const;
  inline ::AFP_main_frame::hit_detail_info* mutable_list(int index);
  inline ::AFP_main_frame::hit_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_detail_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.hit_detail_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_detail_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static hit_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_location_track_info : public ::google::protobuf::Message {
 public:
  user_location_track_info();
  virtual ~user_location_track_info();

  user_location_track_info(const user_location_track_info& from);

  inline user_location_track_info& operator=(const user_location_track_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_location_track_info& default_instance();

  void Swap(user_location_track_info* other);

  // implements Message ----------------------------------------------

  user_location_track_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_location_track_info& from);
  void MergeFrom(const user_location_track_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const void* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional float longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional bytes location_name = 4;
  inline bool has_location_name() const;
  inline void clear_location_name();
  static const int kLocationNameFieldNumber = 4;
  inline const ::std::string& location_name() const;
  inline void set_location_name(const ::std::string& value);
  inline void set_location_name(const char* value);
  inline void set_location_name(const void* value, size_t size);
  inline ::std::string* mutable_location_name();
  inline ::std::string* release_location_name();
  inline void set_allocated_location_name(::std::string* location_name);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_location_track_info)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_location_name();
  inline void clear_has_location_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* time_;
  float longitude_;
  float latitude_;
  ::std::string* location_name_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_location_track_info* default_instance_;
};
// -------------------------------------------------------------------

class user_location_track_ask : public ::google::protobuf::Message {
 public:
  user_location_track_ask();
  virtual ~user_location_track_ask();

  user_location_track_ask(const user_location_track_ask& from);

  inline user_location_track_ask& operator=(const user_location_track_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_location_track_ask& default_instance();

  void Swap(user_location_track_ask* other);

  // implements Message ----------------------------------------------

  user_location_track_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_location_track_ask& from);
  void MergeFrom(const user_location_track_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes identity_card = 3;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 3;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes mobile_phone = 4;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 4;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes is_normal = 5;
  inline bool has_is_normal() const;
  inline void clear_is_normal();
  static const int kIsNormalFieldNumber = 5;
  inline const ::std::string& is_normal() const;
  inline void set_is_normal(const ::std::string& value);
  inline void set_is_normal(const char* value);
  inline void set_is_normal(const void* value, size_t size);
  inline ::std::string* mutable_is_normal();
  inline ::std::string* release_is_normal();
  inline void set_allocated_is_normal(::std::string* is_normal);

  // optional .common.common_ask_header ask_header = 6;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 6;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_location_track_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_is_normal();
  inline void clear_has_is_normal();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* identity_card_;
  ::std::string* mobile_phone_;
  ::std::string* is_normal_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_location_track_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_location_track_ans : public ::google::protobuf::Message {
 public:
  user_location_track_ans();
  virtual ~user_location_track_ans();

  user_location_track_ans(const user_location_track_ans& from);

  inline user_location_track_ans& operator=(const user_location_track_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_location_track_ans& default_instance();

  void Swap(user_location_track_ans* other);

  // implements Message ----------------------------------------------

  user_location_track_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_location_track_ans& from);
  void MergeFrom(const user_location_track_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.user_location_track_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::AFP_main_frame::user_location_track_info& list(int index) const;
  inline ::AFP_main_frame::user_location_track_info* mutable_list(int index);
  inline ::AFP_main_frame::user_location_track_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::user_location_track_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::user_location_track_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_location_track_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::user_location_track_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_location_track_ans* default_instance_;
};
// -------------------------------------------------------------------

class by_inquirers : public ::google::protobuf::Message {
 public:
  by_inquirers();
  virtual ~by_inquirers();

  by_inquirers(const by_inquirers& from);

  inline by_inquirers& operator=(const by_inquirers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const by_inquirers& default_instance();

  void Swap(by_inquirers* other);

  // implements Message ----------------------------------------------

  by_inquirers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const by_inquirers& from);
  void MergeFrom(const by_inquirers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes identity_card = 1;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 1;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.by_inquirers)
 private:
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_real_name();
  inline void clear_has_real_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identity_card_;
  ::std::string* mobile_phone_;
  ::std::string* real_name_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static by_inquirers* default_instance_;
};
// -------------------------------------------------------------------

class user_info_ask : public ::google::protobuf::Message {
 public:
  user_info_ask();
  virtual ~user_info_ask();

  user_info_ask(const user_info_ask& from);

  inline user_info_ask& operator=(const user_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info_ask& default_instance();

  void Swap(user_info_ask* other);

  // implements Message ----------------------------------------------

  user_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info_ask& from);
  void MergeFrom(const user_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.by_inquirers inquirers = 1;
  inline int inquirers_size() const;
  inline void clear_inquirers();
  static const int kInquirersFieldNumber = 1;
  inline const ::AFP_main_frame::by_inquirers& inquirers(int index) const;
  inline ::AFP_main_frame::by_inquirers* mutable_inquirers(int index);
  inline ::AFP_main_frame::by_inquirers* add_inquirers();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::by_inquirers >&
      inquirers() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::by_inquirers >*
      mutable_inquirers();

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes is_normal = 3;
  inline bool has_is_normal() const;
  inline void clear_is_normal();
  static const int kIsNormalFieldNumber = 3;
  inline const ::std::string& is_normal() const;
  inline void set_is_normal(const ::std::string& value);
  inline void set_is_normal(const char* value);
  inline void set_is_normal(const void* value, size_t size);
  inline ::std::string* mutable_is_normal();
  inline ::std::string* release_is_normal();
  inline void set_allocated_is_normal(::std::string* is_normal);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_is_normal();
  inline void clear_has_is_normal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::by_inquirers > inquirers_;
  ::common::common_ask_header* ask_header_;
  ::std::string* is_normal_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_info_ans : public ::google::protobuf::Message {
 public:
  user_info_ans();
  virtual ~user_info_ans();

  user_info_ans(const user_info_ans& from);

  inline user_info_ans& operator=(const user_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info_ans& default_instance();

  void Swap(user_info_ans* other);

  // implements Message ----------------------------------------------

  user_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info_ans& from);
  void MergeFrom(const user_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.user_info user = 1;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::common::user_info& user(int index) const;
  inline ::common::user_info* mutable_user(int index);
  inline ::common::user_info* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::common::user_info >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::user_info >*
      mutable_user();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_info_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::user_info > user_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class AFP_LandedAccount : public ::google::protobuf::Message {
 public:
  AFP_LandedAccount();
  virtual ~AFP_LandedAccount();

  AFP_LandedAccount(const AFP_LandedAccount& from);

  inline AFP_LandedAccount& operator=(const AFP_LandedAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AFP_LandedAccount& default_instance();

  void Swap(AFP_LandedAccount* other);

  // implements Message ----------------------------------------------

  AFP_LandedAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AFP_LandedAccount& from);
  void MergeFrom(const AFP_LandedAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes real_name = 2;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 2;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .common.sex sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::common::sex sex() const;
  inline void set_sex(::common::sex value);

  // optional int32 age = 5;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 5;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional bytes avatar = 6;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes common_terminal = 7;
  inline bool has_common_terminal() const;
  inline void clear_common_terminal();
  static const int kCommonTerminalFieldNumber = 7;
  inline const ::std::string& common_terminal() const;
  inline void set_common_terminal(const ::std::string& value);
  inline void set_common_terminal(const char* value);
  inline void set_common_terminal(const void* value, size_t size);
  inline ::std::string* mutable_common_terminal();
  inline ::std::string* release_common_terminal();
  inline void set_allocated_common_terminal(::std::string* common_terminal);

  // optional bytes mobile_phone = 8;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 8;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bool is_overdue = 9;
  inline bool has_is_overdue() const;
  inline void clear_is_overdue();
  static const int kIsOverdueFieldNumber = 9;
  inline bool is_overdue() const;
  inline void set_is_overdue(bool value);

  // optional bytes last_login_time = 10;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 10;
  inline const ::std::string& last_login_time() const;
  inline void set_last_login_time(const ::std::string& value);
  inline void set_last_login_time(const char* value);
  inline void set_last_login_time(const void* value, size_t size);
  inline ::std::string* mutable_last_login_time();
  inline ::std::string* release_last_login_time();
  inline void set_allocated_last_login_time(::std::string* last_login_time);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.AFP_LandedAccount)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_common_terminal();
  inline void clear_has_common_terminal();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_is_overdue();
  inline void clear_has_is_overdue();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::std::string* real_name_;
  ::std::string* id_;
  int sex_;
  ::google::protobuf::int32 age_;
  ::std::string* avatar_;
  ::std::string* common_terminal_;
  ::std::string* mobile_phone_;
  ::std::string* last_login_time_;
  bool is_overdue_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static AFP_LandedAccount* default_instance_;
};
// -------------------------------------------------------------------

class phone_contacts_info : public ::google::protobuf::Message {
 public:
  phone_contacts_info();
  virtual ~phone_contacts_info();

  phone_contacts_info(const phone_contacts_info& from);

  inline phone_contacts_info& operator=(const phone_contacts_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phone_contacts_info& default_instance();

  void Swap(phone_contacts_info* other);

  // implements Message ----------------------------------------------

  phone_contacts_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phone_contacts_info& from);
  void MergeFrom(const phone_contacts_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes note_name = 1;
  inline bool has_note_name() const;
  inline void clear_note_name();
  static const int kNoteNameFieldNumber = 1;
  inline const ::std::string& note_name() const;
  inline void set_note_name(const ::std::string& value);
  inline void set_note_name(const char* value);
  inline void set_note_name(const void* value, size_t size);
  inline ::std::string* mutable_note_name();
  inline ::std::string* release_note_name();
  inline void set_allocated_note_name(::std::string* note_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bool is_kinship = 3;
  inline bool has_is_kinship() const;
  inline void clear_is_kinship();
  static const int kIsKinshipFieldNumber = 3;
  inline bool is_kinship() const;
  inline void set_is_kinship(bool value);

  // optional bool is_removed = 4;
  inline bool has_is_removed() const;
  inline void clear_is_removed();
  static const int kIsRemovedFieldNumber = 4;
  inline bool is_removed() const;
  inline void set_is_removed(bool value);

  // optional bytes remove_time = 5;
  inline bool has_remove_time() const;
  inline void clear_remove_time();
  static const int kRemoveTimeFieldNumber = 5;
  inline const ::std::string& remove_time() const;
  inline void set_remove_time(const ::std::string& value);
  inline void set_remove_time(const char* value);
  inline void set_remove_time(const void* value, size_t size);
  inline ::std::string* mutable_remove_time();
  inline ::std::string* release_remove_time();
  inline void set_allocated_remove_time(::std::string* remove_time);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.phone_contacts_info)
 private:
  inline void set_has_note_name();
  inline void clear_has_note_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_is_kinship();
  inline void clear_has_is_kinship();
  inline void set_has_is_removed();
  inline void clear_has_is_removed();
  inline void set_has_remove_time();
  inline void clear_has_remove_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* note_name_;
  ::std::string* mobile_phone_;
  ::std::string* remove_time_;
  bool is_kinship_;
  bool is_removed_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static phone_contacts_info* default_instance_;
};
// -------------------------------------------------------------------

class platform_register_user_info : public ::google::protobuf::Message {
 public:
  platform_register_user_info();
  virtual ~platform_register_user_info();

  platform_register_user_info(const platform_register_user_info& from);

  inline platform_register_user_info& operator=(const platform_register_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const platform_register_user_info& default_instance();

  void Swap(platform_register_user_info* other);

  // implements Message ----------------------------------------------

  platform_register_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const platform_register_user_info& from);
  void MergeFrom(const platform_register_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes adressbook_name = 1;
  inline bool has_adressbook_name() const;
  inline void clear_adressbook_name();
  static const int kAdressbookNameFieldNumber = 1;
  inline const ::std::string& adressbook_name() const;
  inline void set_adressbook_name(const ::std::string& value);
  inline void set_adressbook_name(const char* value);
  inline void set_adressbook_name(const void* value, size_t size);
  inline ::std::string* mutable_adressbook_name();
  inline ::std::string* release_adressbook_name();
  inline void set_allocated_adressbook_name(::std::string* adressbook_name);

  // optional bytes phone_num = 2;
  inline bool has_phone_num() const;
  inline void clear_phone_num();
  static const int kPhoneNumFieldNumber = 2;
  inline const ::std::string& phone_num() const;
  inline void set_phone_num(const ::std::string& value);
  inline void set_phone_num(const char* value);
  inline void set_phone_num(const void* value, size_t size);
  inline ::std::string* mutable_phone_num();
  inline ::std::string* release_phone_num();
  inline void set_allocated_phone_num(::std::string* phone_num);

  // optional .AFP_main_frame.platform_type platfom_type_enum = 3;
  inline bool has_platfom_type_enum() const;
  inline void clear_platfom_type_enum();
  static const int kPlatfomTypeEnumFieldNumber = 3;
  inline ::AFP_main_frame::platform_type platfom_type_enum() const;
  inline void set_platfom_type_enum(::AFP_main_frame::platform_type value);

  // optional .AFP_main_frame.overdue_type overdue_type_enum = 4;
  inline bool has_overdue_type_enum() const;
  inline void clear_overdue_type_enum();
  static const int kOverdueTypeEnumFieldNumber = 4;
  inline ::AFP_main_frame::overdue_type overdue_type_enum() const;
  inline void set_overdue_type_enum(::AFP_main_frame::overdue_type value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.platform_register_user_info)
 private:
  inline void set_has_adressbook_name();
  inline void clear_has_adressbook_name();
  inline void set_has_phone_num();
  inline void clear_has_phone_num();
  inline void set_has_platfom_type_enum();
  inline void clear_has_platfom_type_enum();
  inline void set_has_overdue_type_enum();
  inline void clear_has_overdue_type_enum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* adressbook_name_;
  ::std::string* phone_num_;
  int platfom_type_enum_;
  int overdue_type_enum_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static platform_register_user_info* default_instance_;
};
// -------------------------------------------------------------------

class phone_info : public ::google::protobuf::Message {
 public:
  phone_info();
  virtual ~phone_info();

  phone_info(const phone_info& from);

  inline phone_info& operator=(const phone_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phone_info& default_instance();

  void Swap(phone_info* other);

  // implements Message ----------------------------------------------

  phone_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phone_info& from);
  void MergeFrom(const phone_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes imei = 1;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 1;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const void* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional bytes brand_model = 2;
  inline bool has_brand_model() const;
  inline void clear_brand_model();
  static const int kBrandModelFieldNumber = 2;
  inline const ::std::string& brand_model() const;
  inline void set_brand_model(const ::std::string& value);
  inline void set_brand_model(const char* value);
  inline void set_brand_model(const void* value, size_t size);
  inline ::std::string* mutable_brand_model();
  inline ::std::string* release_brand_model();
  inline void set_allocated_brand_model(::std::string* brand_model);

  // optional bool is_common_use = 3;
  inline bool has_is_common_use() const;
  inline void clear_is_common_use();
  static const int kIsCommonUseFieldNumber = 3;
  inline bool is_common_use() const;
  inline void set_is_common_use(bool value);

  // optional bytes last_login_time = 4;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 4;
  inline const ::std::string& last_login_time() const;
  inline void set_last_login_time(const ::std::string& value);
  inline void set_last_login_time(const char* value);
  inline void set_last_login_time(const void* value, size_t size);
  inline ::std::string* mutable_last_login_time();
  inline ::std::string* release_last_login_time();
  inline void set_allocated_last_login_time(::std::string* last_login_time);

  // repeated .AFP_main_frame.phone_contacts_info info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::AFP_main_frame::phone_contacts_info& info(int index) const;
  inline ::AFP_main_frame::phone_contacts_info* mutable_info(int index);
  inline ::AFP_main_frame::phone_contacts_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_contacts_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_contacts_info >*
      mutable_info();

  // repeated .AFP_main_frame.AFP_LandedAccount landedaccount = 6;
  inline int landedaccount_size() const;
  inline void clear_landedaccount();
  static const int kLandedaccountFieldNumber = 6;
  inline const ::AFP_main_frame::AFP_LandedAccount& landedaccount(int index) const;
  inline ::AFP_main_frame::AFP_LandedAccount* mutable_landedaccount(int index);
  inline ::AFP_main_frame::AFP_LandedAccount* add_landedaccount();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::AFP_LandedAccount >&
      landedaccount() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::AFP_LandedAccount >*
      mutable_landedaccount();

  // repeated .DW_Location.platform_register_user_info platform_register_user = 7;
  inline int platform_register_user_size() const;
  inline void clear_platform_register_user();
  static const int kPlatformRegisterUserFieldNumber = 7;
  inline const ::DW_Location::platform_register_user_info& platform_register_user(int index) const;
  inline ::DW_Location::platform_register_user_info* mutable_platform_register_user(int index);
  inline ::DW_Location::platform_register_user_info* add_platform_register_user();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >&
      platform_register_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >*
      mutable_platform_register_user();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.phone_info)
 private:
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_brand_model();
  inline void clear_has_brand_model();
  inline void set_has_is_common_use();
  inline void clear_has_is_common_use();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* imei_;
  ::std::string* brand_model_;
  ::std::string* last_login_time_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_contacts_info > info_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::AFP_LandedAccount > landedaccount_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info > platform_register_user_;
  bool is_common_use_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static phone_info* default_instance_;
};
// -------------------------------------------------------------------

class yuliu_common_user_info : public ::google::protobuf::Message {
 public:
  yuliu_common_user_info();
  virtual ~yuliu_common_user_info();

  yuliu_common_user_info(const yuliu_common_user_info& from);

  inline yuliu_common_user_info& operator=(const yuliu_common_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yuliu_common_user_info& default_instance();

  void Swap(yuliu_common_user_info* other);

  // implements Message ----------------------------------------------

  yuliu_common_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yuliu_common_user_info& from);
  void MergeFrom(const yuliu_common_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes phone_num = 2;
  inline bool has_phone_num() const;
  inline void clear_phone_num();
  static const int kPhoneNumFieldNumber = 2;
  inline const ::std::string& phone_num() const;
  inline void set_phone_num(const ::std::string& value);
  inline void set_phone_num(const char* value);
  inline void set_phone_num(const void* value, size_t size);
  inline ::std::string* mutable_phone_num();
  inline ::std::string* release_phone_num();
  inline void set_allocated_phone_num(::std::string* phone_num);

  // optional bytes relation = 3;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 3;
  inline const ::std::string& relation() const;
  inline void set_relation(const ::std::string& value);
  inline void set_relation(const char* value);
  inline void set_relation(const void* value, size_t size);
  inline ::std::string* mutable_relation();
  inline ::std::string* release_relation();
  inline void set_allocated_relation(::std::string* relation);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.yuliu_common_user_info)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone_num();
  inline void clear_has_phone_num();
  inline void set_has_relation();
  inline void clear_has_relation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* phone_num_;
  ::std::string* relation_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static yuliu_common_user_info* default_instance_;
};
// -------------------------------------------------------------------

class yuliu_platform_user_info : public ::google::protobuf::Message {
 public:
  yuliu_platform_user_info();
  virtual ~yuliu_platform_user_info();

  yuliu_platform_user_info(const yuliu_platform_user_info& from);

  inline yuliu_platform_user_info& operator=(const yuliu_platform_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yuliu_platform_user_info& default_instance();

  void Swap(yuliu_platform_user_info* other);

  // implements Message ----------------------------------------------

  yuliu_platform_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yuliu_platform_user_info& from);
  void MergeFrom(const yuliu_platform_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes avatar = 1;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 1;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes user_nickname = 2;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 2;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const void* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional bytes real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional .common.sex sex_type = 4;
  inline bool has_sex_type() const;
  inline void clear_sex_type();
  static const int kSexTypeFieldNumber = 4;
  inline ::common::sex sex_type() const;
  inline void set_sex_type(::common::sex value);

  // optional .AFP_main_frame.overdue_type type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::AFP_main_frame::overdue_type type() const;
  inline void set_type(::AFP_main_frame::overdue_type value);

  // optional float chonghe_rate = 6;
  inline bool has_chonghe_rate() const;
  inline void clear_chonghe_rate();
  static const int kChongheRateFieldNumber = 6;
  inline float chonghe_rate() const;
  inline void set_chonghe_rate(float value);

  // optional bool is_in_adressbook = 7;
  inline bool has_is_in_adressbook() const;
  inline void clear_is_in_adressbook();
  static const int kIsInAdressbookFieldNumber = 7;
  inline bool is_in_adressbook() const;
  inline void set_is_in_adressbook(bool value);

  // optional bytes adressbook_remark_name = 8;
  inline bool has_adressbook_remark_name() const;
  inline void clear_adressbook_remark_name();
  static const int kAdressbookRemarkNameFieldNumber = 8;
  inline const ::std::string& adressbook_remark_name() const;
  inline void set_adressbook_remark_name(const ::std::string& value);
  inline void set_adressbook_remark_name(const char* value);
  inline void set_adressbook_remark_name(const void* value, size_t size);
  inline ::std::string* mutable_adressbook_remark_name();
  inline ::std::string* release_adressbook_remark_name();
  inline void set_allocated_adressbook_remark_name(::std::string* adressbook_remark_name);

  // optional .AFP_main_frame.yuliu_common_user_info comm_info = 9;
  inline bool has_comm_info() const;
  inline void clear_comm_info();
  static const int kCommInfoFieldNumber = 9;
  inline const ::AFP_main_frame::yuliu_common_user_info& comm_info() const;
  inline ::AFP_main_frame::yuliu_common_user_info* mutable_comm_info();
  inline ::AFP_main_frame::yuliu_common_user_info* release_comm_info();
  inline void set_allocated_comm_info(::AFP_main_frame::yuliu_common_user_info* comm_info);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.yuliu_platform_user_info)
 private:
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_sex_type();
  inline void clear_has_sex_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_chonghe_rate();
  inline void clear_has_chonghe_rate();
  inline void set_has_is_in_adressbook();
  inline void clear_has_is_in_adressbook();
  inline void set_has_adressbook_remark_name();
  inline void clear_has_adressbook_remark_name();
  inline void set_has_comm_info();
  inline void clear_has_comm_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* avatar_;
  ::std::string* user_nickname_;
  ::std::string* real_name_;
  int sex_type_;
  int type_;
  float chonghe_rate_;
  bool is_in_adressbook_;
  ::std::string* adressbook_remark_name_;
  ::AFP_main_frame::yuliu_common_user_info* comm_info_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static yuliu_platform_user_info* default_instance_;
};
// -------------------------------------------------------------------

class phones_info : public ::google::protobuf::Message {
 public:
  phones_info();
  virtual ~phones_info();

  phones_info(const phones_info& from);

  inline phones_info& operator=(const phones_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phones_info& default_instance();

  void Swap(phones_info* other);

  // implements Message ----------------------------------------------

  phones_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phones_info& from);
  void MergeFrom(const phones_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes real_name = 2;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 2;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .common.sex sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::common::sex sex() const;
  inline void set_sex(::common::sex value);

  // optional int32 age = 5;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 5;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional bytes avatar = 6;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes common_terminal = 7;
  inline bool has_common_terminal() const;
  inline void clear_common_terminal();
  static const int kCommonTerminalFieldNumber = 7;
  inline const ::std::string& common_terminal() const;
  inline void set_common_terminal(const ::std::string& value);
  inline void set_common_terminal(const char* value);
  inline void set_common_terminal(const void* value, size_t size);
  inline ::std::string* mutable_common_terminal();
  inline ::std::string* release_common_terminal();
  inline void set_allocated_common_terminal(::std::string* common_terminal);

  // optional bytes mobile_phone = 8;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 8;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bool is_overdue = 9;
  inline bool has_is_overdue() const;
  inline void clear_is_overdue();
  static const int kIsOverdueFieldNumber = 9;
  inline bool is_overdue() const;
  inline void set_is_overdue(bool value);

  // optional .DW_Location.overdue_type type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::DW_Location::overdue_type type() const;
  inline void set_type(::DW_Location::overdue_type value);

  // optional bytes address = 11;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 11;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const void* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // repeated .AFP_main_frame.phone_info list = 12;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 12;
  inline const ::AFP_main_frame::phone_info& list(int index) const;
  inline ::AFP_main_frame::phone_info* mutable_list(int index);
  inline ::AFP_main_frame::phone_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_info >*
      mutable_list();

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 13;
  inline int yuliu_common_user_size() const;
  inline void clear_yuliu_common_user();
  static const int kYuliuCommonUserFieldNumber = 13;
  inline const ::DW_Location::yuliu_common_user_info& yuliu_common_user(int index) const;
  inline ::DW_Location::yuliu_common_user_info* mutable_yuliu_common_user(int index);
  inline ::DW_Location::yuliu_common_user_info* add_yuliu_common_user();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >&
      yuliu_common_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >*
      mutable_yuliu_common_user();

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 14;
  inline int yuliu_platform_user_size() const;
  inline void clear_yuliu_platform_user();
  static const int kYuliuPlatformUserFieldNumber = 14;
  inline const ::DW_Location::yuliu_platform_user_info& yuliu_platform_user(int index) const;
  inline ::DW_Location::yuliu_platform_user_info* mutable_yuliu_platform_user(int index);
  inline ::DW_Location::yuliu_platform_user_info* add_yuliu_platform_user();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >&
      yuliu_platform_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >*
      mutable_yuliu_platform_user();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.phones_info)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_common_terminal();
  inline void clear_has_common_terminal();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_is_overdue();
  inline void clear_has_is_overdue();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::std::string* real_name_;
  ::std::string* id_;
  int sex_;
  ::google::protobuf::int32 age_;
  ::std::string* avatar_;
  ::std::string* common_terminal_;
  ::std::string* mobile_phone_;
  bool is_overdue_;
  int type_;
  ::std::string* address_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_info > list_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info > yuliu_common_user_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info > yuliu_platform_user_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static phones_info* default_instance_;
};
// -------------------------------------------------------------------

class phone_contacts_analyze_ask : public ::google::protobuf::Message {
 public:
  phone_contacts_analyze_ask();
  virtual ~phone_contacts_analyze_ask();

  phone_contacts_analyze_ask(const phone_contacts_analyze_ask& from);

  inline phone_contacts_analyze_ask& operator=(const phone_contacts_analyze_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phone_contacts_analyze_ask& default_instance();

  void Swap(phone_contacts_analyze_ask* other);

  // implements Message ----------------------------------------------

  phone_contacts_analyze_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phone_contacts_analyze_ask& from);
  void MergeFrom(const phone_contacts_analyze_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id_no = 1;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 1;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes is_normal = 4;
  inline bool has_is_normal() const;
  inline void clear_is_normal();
  static const int kIsNormalFieldNumber = 4;
  inline const ::std::string& is_normal() const;
  inline void set_is_normal(const ::std::string& value);
  inline void set_is_normal(const char* value);
  inline void set_is_normal(const void* value, size_t size);
  inline ::std::string* mutable_is_normal();
  inline ::std::string* release_is_normal();
  inline void set_allocated_is_normal(::std::string* is_normal);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.phone_contacts_analyze_ask)
 private:
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_is_normal();
  inline void clear_has_is_normal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_no_;
  ::std::string* mobile_phone_;
  ::common::common_ask_header* ask_header_;
  ::std::string* is_normal_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static phone_contacts_analyze_ask* default_instance_;
};
// -------------------------------------------------------------------

class phone_contacts_analyze_ans : public ::google::protobuf::Message {
 public:
  phone_contacts_analyze_ans();
  virtual ~phone_contacts_analyze_ans();

  phone_contacts_analyze_ans(const phone_contacts_analyze_ans& from);

  inline phone_contacts_analyze_ans& operator=(const phone_contacts_analyze_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phone_contacts_analyze_ans& default_instance();

  void Swap(phone_contacts_analyze_ans* other);

  // implements Message ----------------------------------------------

  phone_contacts_analyze_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phone_contacts_analyze_ans& from);
  void MergeFrom(const phone_contacts_analyze_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AFP_main_frame.phones_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::AFP_main_frame::phones_info& info() const;
  inline ::AFP_main_frame::phones_info* mutable_info();
  inline ::AFP_main_frame::phones_info* release_info();
  inline void set_allocated_info(::AFP_main_frame::phones_info* info);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.phone_contacts_analyze_ans)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFP_main_frame::phones_info* info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static phone_contacts_analyze_ans* default_instance_;
};
// -------------------------------------------------------------------

class function_verification_in : public ::google::protobuf::Message {
 public:
  function_verification_in();
  virtual ~function_verification_in();

  function_verification_in(const function_verification_in& from);

  inline function_verification_in& operator=(const function_verification_in& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const function_verification_in& default_instance();

  void Swap(function_verification_in* other);

  // implements Message ----------------------------------------------

  function_verification_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const function_verification_in& from);
  void MergeFrom(const function_verification_in& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QDP_basic_info.user_basic_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::QDP_basic_info::user_basic_info& info() const;
  inline ::QDP_basic_info::user_basic_info* mutable_info();
  inline ::QDP_basic_info::user_basic_info* release_info();
  inline void set_allocated_info(::QDP_basic_info::user_basic_info* info);

  // optional .AFP_main_frame.function_serial_number number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::AFP_main_frame::function_serial_number number() const;
  inline void set_number(::AFP_main_frame::function_serial_number value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.function_verification_in)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QDP_basic_info::user_basic_info* info_;
  int number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static function_verification_in* default_instance_;
};
// -------------------------------------------------------------------

class function_verification_out : public ::google::protobuf::Message {
 public:
  function_verification_out();
  virtual ~function_verification_out();

  function_verification_out(const function_verification_out& from);

  inline function_verification_out& operator=(const function_verification_out& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const function_verification_out& default_instance();

  void Swap(function_verification_out* other);

  // implements Message ----------------------------------------------

  function_verification_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const function_verification_out& from);
  void MergeFrom(const function_verification_out& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json_ans = 1;
  inline bool has_json_ans() const;
  inline void clear_json_ans();
  static const int kJsonAnsFieldNumber = 1;
  inline const ::std::string& json_ans() const;
  inline void set_json_ans(const ::std::string& value);
  inline void set_json_ans(const char* value);
  inline void set_json_ans(const void* value, size_t size);
  inline ::std::string* mutable_json_ans();
  inline ::std::string* release_json_ans();
  inline void set_allocated_json_ans(::std::string* json_ans);

  // optional .AFP_main_frame.function_serial_number number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::AFP_main_frame::function_serial_number number() const;
  inline void set_number(::AFP_main_frame::function_serial_number value);

  // optional bytes result_time = 3;
  inline bool has_result_time() const;
  inline void clear_result_time();
  static const int kResultTimeFieldNumber = 3;
  inline const ::std::string& result_time() const;
  inline void set_result_time(const ::std::string& value);
  inline void set_result_time(const char* value);
  inline void set_result_time(const void* value, size_t size);
  inline ::std::string* mutable_result_time();
  inline ::std::string* release_result_time();
  inline void set_allocated_result_time(::std::string* result_time);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.function_verification_out)
 private:
  inline void set_has_json_ans();
  inline void clear_has_json_ans();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_result_time();
  inline void clear_has_result_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_ans_;
  ::std::string* result_time_;
  int number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static function_verification_out* default_instance_;
};
// -------------------------------------------------------------------

class user_verification_list_ask : public ::google::protobuf::Message {
 public:
  user_verification_list_ask();
  virtual ~user_verification_list_ask();

  user_verification_list_ask(const user_verification_list_ask& from);

  inline user_verification_list_ask& operator=(const user_verification_list_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_verification_list_ask& default_instance();

  void Swap(user_verification_list_ask* other);

  // implements Message ----------------------------------------------

  user_verification_list_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_verification_list_ask& from);
  void MergeFrom(const user_verification_list_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.function_verification_in fucver_in = 1;
  inline int fucver_in_size() const;
  inline void clear_fucver_in();
  static const int kFucverInFieldNumber = 1;
  inline const ::AFP_main_frame::function_verification_in& fucver_in(int index) const;
  inline ::AFP_main_frame::function_verification_in* mutable_fucver_in(int index);
  inline ::AFP_main_frame::function_verification_in* add_fucver_in();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_in >&
      fucver_in() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_in >*
      mutable_fucver_in();

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_verification_list_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_in > fucver_in_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_verification_list_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_verification_list_ans : public ::google::protobuf::Message {
 public:
  user_verification_list_ans();
  virtual ~user_verification_list_ans();

  user_verification_list_ans(const user_verification_list_ans& from);

  inline user_verification_list_ans& operator=(const user_verification_list_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_verification_list_ans& default_instance();

  void Swap(user_verification_list_ans* other);

  // implements Message ----------------------------------------------

  user_verification_list_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_verification_list_ans& from);
  void MergeFrom(const user_verification_list_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.function_verification_out fucver_out = 1;
  inline int fucver_out_size() const;
  inline void clear_fucver_out();
  static const int kFucverOutFieldNumber = 1;
  inline const ::AFP_main_frame::function_verification_out& fucver_out(int index) const;
  inline ::AFP_main_frame::function_verification_out* mutable_fucver_out(int index);
  inline ::AFP_main_frame::function_verification_out* add_fucver_out();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >&
      fucver_out() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >*
      mutable_fucver_out();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_verification_list_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out > fucver_out_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_verification_list_ans* default_instance_;
};
// -------------------------------------------------------------------

class verify_info : public ::google::protobuf::Message {
 public:
  verify_info();
  virtual ~verify_info();

  verify_info(const verify_info& from);

  inline verify_info& operator=(const verify_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_info& default_instance();

  void Swap(verify_info* other);

  // implements Message ----------------------------------------------

  verify_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_info& from);
  void MergeFrom(const verify_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes verify_result = 4;
  inline bool has_verify_result() const;
  inline void clear_verify_result();
  static const int kVerifyResultFieldNumber = 4;
  inline const ::std::string& verify_result() const;
  inline void set_verify_result(const ::std::string& value);
  inline void set_verify_result(const char* value);
  inline void set_verify_result(const void* value, size_t size);
  inline ::std::string* mutable_verify_result();
  inline ::std::string* release_verify_result();
  inline void set_allocated_verify_result(::std::string* verify_result);

  // optional bytes inquire_time = 5;
  inline bool has_inquire_time() const;
  inline void clear_inquire_time();
  static const int kInquireTimeFieldNumber = 5;
  inline const ::std::string& inquire_time() const;
  inline void set_inquire_time(const ::std::string& value);
  inline void set_inquire_time(const char* value);
  inline void set_inquire_time(const void* value, size_t size);
  inline ::std::string* mutable_inquire_time();
  inline ::std::string* release_inquire_time();
  inline void set_allocated_inquire_time(::std::string* inquire_time);

  // optional bytes json_result = 6;
  inline bool has_json_result() const;
  inline void clear_json_result();
  static const int kJsonResultFieldNumber = 6;
  inline const ::std::string& json_result() const;
  inline void set_json_result(const ::std::string& value);
  inline void set_json_result(const char* value);
  inline void set_json_result(const void* value, size_t size);
  inline ::std::string* mutable_json_result();
  inline ::std::string* release_json_result();
  inline void set_allocated_json_result(::std::string* json_result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.verify_info)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_verify_result();
  inline void clear_has_verify_result();
  inline void set_has_inquire_time();
  inline void clear_has_inquire_time();
  inline void set_has_json_result();
  inline void clear_has_json_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::std::string* verify_result_;
  ::std::string* inquire_time_;
  ::std::string* json_result_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static verify_info* default_instance_;
};
// -------------------------------------------------------------------

class batch_verify_ask : public ::google::protobuf::Message {
 public:
  batch_verify_ask();
  virtual ~batch_verify_ask();

  batch_verify_ask(const batch_verify_ask& from);

  inline batch_verify_ask& operator=(const batch_verify_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const batch_verify_ask& default_instance();

  void Swap(batch_verify_ask* other);

  // implements Message ----------------------------------------------

  batch_verify_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const batch_verify_ask& from);
  void MergeFrom(const batch_verify_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes inquire_session = 1;
  inline bool has_inquire_session() const;
  inline void clear_inquire_session();
  static const int kInquireSessionFieldNumber = 1;
  inline const ::std::string& inquire_session() const;
  inline void set_inquire_session(const ::std::string& value);
  inline void set_inquire_session(const char* value);
  inline void set_inquire_session(const void* value, size_t size);
  inline ::std::string* mutable_inquire_session();
  inline ::std::string* release_inquire_session();
  inline void set_allocated_inquire_session(::std::string* inquire_session);

  // repeated .AFP_main_frame.verify_info list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::AFP_main_frame::verify_info& list(int index) const;
  inline ::AFP_main_frame::verify_info* mutable_list(int index);
  inline ::AFP_main_frame::verify_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >*
      mutable_list();

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated .AFP_main_frame.function_serial_number number = 4;
  inline int number_size() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 4;
  inline ::AFP_main_frame::function_serial_number number(int index) const;
  inline void set_number(int index, ::AFP_main_frame::function_serial_number value);
  inline void add_number(::AFP_main_frame::function_serial_number value);
  inline const ::google::protobuf::RepeatedField<int>& number() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_number();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.batch_verify_ask)
 private:
  inline void set_has_inquire_session();
  inline void clear_has_inquire_session();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* inquire_session_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info > list_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedField<int> number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static batch_verify_ask* default_instance_;
};
// -------------------------------------------------------------------

class batch_verify_ans : public ::google::protobuf::Message {
 public:
  batch_verify_ans();
  virtual ~batch_verify_ans();

  batch_verify_ans(const batch_verify_ans& from);

  inline batch_verify_ans& operator=(const batch_verify_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const batch_verify_ans& default_instance();

  void Swap(batch_verify_ans* other);

  // implements Message ----------------------------------------------

  batch_verify_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const batch_verify_ans& from);
  void MergeFrom(const batch_verify_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result_status = 1;
  inline bool has_result_status() const;
  inline void clear_result_status();
  static const int kResultStatusFieldNumber = 1;
  inline ::google::protobuf::int32 result_status() const;
  inline void set_result_status(::google::protobuf::int32 value);

  // optional bytes inquire_session = 2;
  inline bool has_inquire_session() const;
  inline void clear_inquire_session();
  static const int kInquireSessionFieldNumber = 2;
  inline const ::std::string& inquire_session() const;
  inline void set_inquire_session(const ::std::string& value);
  inline void set_inquire_session(const char* value);
  inline void set_inquire_session(const void* value, size_t size);
  inline ::std::string* mutable_inquire_session();
  inline ::std::string* release_inquire_session();
  inline void set_allocated_inquire_session(::std::string* inquire_session);

  // repeated .AFP_main_frame.verify_info list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline const ::AFP_main_frame::verify_info& list(int index) const;
  inline ::AFP_main_frame::verify_info* mutable_list(int index);
  inline ::AFP_main_frame::verify_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >*
      mutable_list();

  // optional .common.errorinfo error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // repeated .AFP_main_frame.function_serial_number number = 5;
  inline int number_size() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::AFP_main_frame::function_serial_number number(int index) const;
  inline void set_number(int index, ::AFP_main_frame::function_serial_number value);
  inline void add_number(::AFP_main_frame::function_serial_number value);
  inline const ::google::protobuf::RepeatedField<int>& number() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_number();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.batch_verify_ans)
 private:
  inline void set_has_result_status();
  inline void clear_has_result_status();
  inline void set_has_inquire_session();
  inline void clear_has_inquire_session();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* inquire_session_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::RepeatedField<int> number_;
  ::google::protobuf::int32 result_status_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static batch_verify_ans* default_instance_;
};
// -------------------------------------------------------------------

class area_name : public ::google::protobuf::Message {
 public:
  area_name();
  virtual ~area_name();

  area_name(const area_name& from);

  inline area_name& operator=(const area_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const area_name& default_instance();

  void Swap(area_name* other);

  // implements Message ----------------------------------------------

  area_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const area_name& from);
  void MergeFrom(const area_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 area_id = 1;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  inline ::google::protobuf::int32 area_id() const;
  inline void set_area_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.area_name)
 private:
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 area_id_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static area_name* default_instance_;
};
// -------------------------------------------------------------------

class bid_info : public ::google::protobuf::Message {
 public:
  bid_info();
  virtual ~bid_info();

  bid_info(const bid_info& from);

  inline bid_info& operator=(const bid_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_info& default_instance();

  void Swap(bid_info* other);

  // implements Message ----------------------------------------------

  bid_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_info& from);
  void MergeFrom(const bid_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes borrow_bid = 1;
  inline bool has_borrow_bid() const;
  inline void clear_borrow_bid();
  static const int kBorrowBidFieldNumber = 1;
  inline const ::std::string& borrow_bid() const;
  inline void set_borrow_bid(const ::std::string& value);
  inline void set_borrow_bid(const char* value);
  inline void set_borrow_bid(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid();
  inline ::std::string* release_borrow_bid();
  inline void set_allocated_borrow_bid(::std::string* borrow_bid);

  // optional bytes bid_name = 2;
  inline bool has_bid_name() const;
  inline void clear_bid_name();
  static const int kBidNameFieldNumber = 2;
  inline const ::std::string& bid_name() const;
  inline void set_bid_name(const ::std::string& value);
  inline void set_bid_name(const char* value);
  inline void set_bid_name(const void* value, size_t size);
  inline ::std::string* mutable_bid_name();
  inline ::std::string* release_bid_name();
  inline void set_allocated_bid_name(::std::string* bid_name);

  // optional bytes borrow_time = 3;
  inline bool has_borrow_time() const;
  inline void clear_borrow_time();
  static const int kBorrowTimeFieldNumber = 3;
  inline const ::std::string& borrow_time() const;
  inline void set_borrow_time(const ::std::string& value);
  inline void set_borrow_time(const char* value);
  inline void set_borrow_time(const void* value, size_t size);
  inline ::std::string* mutable_borrow_time();
  inline ::std::string* release_borrow_time();
  inline void set_allocated_borrow_time(::std::string* borrow_time);

  // optional bytes borrower_nickname = 4;
  inline bool has_borrower_nickname() const;
  inline void clear_borrower_nickname();
  static const int kBorrowerNicknameFieldNumber = 4;
  inline const ::std::string& borrower_nickname() const;
  inline void set_borrower_nickname(const ::std::string& value);
  inline void set_borrower_nickname(const char* value);
  inline void set_borrower_nickname(const void* value, size_t size);
  inline ::std::string* mutable_borrower_nickname();
  inline ::std::string* release_borrower_nickname();
  inline void set_allocated_borrower_nickname(::std::string* borrower_nickname);

  // optional bytes borrow_describe = 5;
  inline bool has_borrow_describe() const;
  inline void clear_borrow_describe();
  static const int kBorrowDescribeFieldNumber = 5;
  inline const ::std::string& borrow_describe() const;
  inline void set_borrow_describe(const ::std::string& value);
  inline void set_borrow_describe(const char* value);
  inline void set_borrow_describe(const void* value, size_t size);
  inline ::std::string* mutable_borrow_describe();
  inline ::std::string* release_borrow_describe();
  inline void set_allocated_borrow_describe(::std::string* borrow_describe);

  // optional float borrow_money = 6;
  inline bool has_borrow_money() const;
  inline void clear_borrow_money();
  static const int kBorrowMoneyFieldNumber = 6;
  inline float borrow_money() const;
  inline void set_borrow_money(float value);

  // optional float borrow_rate = 7;
  inline bool has_borrow_rate() const;
  inline void clear_borrow_rate();
  static const int kBorrowRateFieldNumber = 7;
  inline float borrow_rate() const;
  inline void set_borrow_rate(float value);

  // optional int32 mortgage_term = 8;
  inline bool has_mortgage_term() const;
  inline void clear_mortgage_term();
  static const int kMortgageTermFieldNumber = 8;
  inline ::google::protobuf::int32 mortgage_term() const;
  inline void set_mortgage_term(::google::protobuf::int32 value);

  // optional bytes mode_of_repayment = 9;
  inline bool has_mode_of_repayment() const;
  inline void clear_mode_of_repayment();
  static const int kModeOfRepaymentFieldNumber = 9;
  inline const ::std::string& mode_of_repayment() const;
  inline void set_mode_of_repayment(const ::std::string& value);
  inline void set_mode_of_repayment(const char* value);
  inline void set_mode_of_repayment(const void* value, size_t size);
  inline ::std::string* mutable_mode_of_repayment();
  inline ::std::string* release_mode_of_repayment();
  inline void set_allocated_mode_of_repayment(::std::string* mode_of_repayment);

  // optional bytes LP_user = 10;
  inline bool has_lp_user() const;
  inline void clear_lp_user();
  static const int kLPUserFieldNumber = 10;
  inline const ::std::string& lp_user() const;
  inline void set_lp_user(const ::std::string& value);
  inline void set_lp_user(const char* value);
  inline void set_lp_user(const void* value, size_t size);
  inline ::std::string* mutable_lp_user();
  inline ::std::string* release_lp_user();
  inline void set_allocated_lp_user(::std::string* lp_user);

  // optional float amount_guaranteed = 11;
  inline bool has_amount_guaranteed() const;
  inline void clear_amount_guaranteed();
  static const int kAmountGuaranteedFieldNumber = 11;
  inline float amount_guaranteed() const;
  inline void set_amount_guaranteed(float value);

  // optional bytes rob_LP_time = 12;
  inline bool has_rob_lp_time() const;
  inline void clear_rob_lp_time();
  static const int kRobLPTimeFieldNumber = 12;
  inline const ::std::string& rob_lp_time() const;
  inline void set_rob_lp_time(const ::std::string& value);
  inline void set_rob_lp_time(const char* value);
  inline void set_rob_lp_time(const void* value, size_t size);
  inline ::std::string* mutable_rob_lp_time();
  inline ::std::string* release_rob_lp_time();
  inline void set_allocated_rob_lp_time(::std::string* rob_lp_time);

  // optional bytes LP_time = 13;
  inline bool has_lp_time() const;
  inline void clear_lp_time();
  static const int kLPTimeFieldNumber = 13;
  inline const ::std::string& lp_time() const;
  inline void set_lp_time(const ::std::string& value);
  inline void set_lp_time(const char* value);
  inline void set_lp_time(const void* value, size_t size);
  inline ::std::string* mutable_lp_time();
  inline ::std::string* release_lp_time();
  inline void set_allocated_lp_time(::std::string* lp_time);

  // optional bytes LP_address = 14;
  inline bool has_lp_address() const;
  inline void clear_lp_address();
  static const int kLPAddressFieldNumber = 14;
  inline const ::std::string& lp_address() const;
  inline void set_lp_address(const ::std::string& value);
  inline void set_lp_address(const char* value);
  inline void set_lp_address(const void* value, size_t size);
  inline ::std::string* mutable_lp_address();
  inline ::std::string* release_lp_address();
  inline void set_allocated_lp_address(::std::string* lp_address);

  // optional int32 is_indeed_LP = 15;
  inline bool has_is_indeed_lp() const;
  inline void clear_is_indeed_lp();
  static const int kIsIndeedLPFieldNumber = 15;
  inline ::google::protobuf::int32 is_indeed_lp() const;
  inline void set_is_indeed_lp(::google::protobuf::int32 value);

  // optional bytes Reasons_for_guarantee = 16;
  inline bool has_reasons_for_guarantee() const;
  inline void clear_reasons_for_guarantee();
  static const int kReasonsForGuaranteeFieldNumber = 16;
  inline const ::std::string& reasons_for_guarantee() const;
  inline void set_reasons_for_guarantee(const ::std::string& value);
  inline void set_reasons_for_guarantee(const char* value);
  inline void set_reasons_for_guarantee(const void* value, size_t size);
  inline ::std::string* mutable_reasons_for_guarantee();
  inline ::std::string* release_reasons_for_guarantee();
  inline void set_allocated_reasons_for_guarantee(::std::string* reasons_for_guarantee);

  // repeated bytes picture_url = 17;
  inline int picture_url_size() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 17;
  inline const ::std::string& picture_url(int index) const;
  inline ::std::string* mutable_picture_url(int index);
  inline void set_picture_url(int index, const ::std::string& value);
  inline void set_picture_url(int index, const char* value);
  inline void set_picture_url(int index, const void* value, size_t size);
  inline ::std::string* add_picture_url();
  inline void add_picture_url(const ::std::string& value);
  inline void add_picture_url(const char* value);
  inline void add_picture_url(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& picture_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_picture_url();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.bid_info)
 private:
  inline void set_has_borrow_bid();
  inline void clear_has_borrow_bid();
  inline void set_has_bid_name();
  inline void clear_has_bid_name();
  inline void set_has_borrow_time();
  inline void clear_has_borrow_time();
  inline void set_has_borrower_nickname();
  inline void clear_has_borrower_nickname();
  inline void set_has_borrow_describe();
  inline void clear_has_borrow_describe();
  inline void set_has_borrow_money();
  inline void clear_has_borrow_money();
  inline void set_has_borrow_rate();
  inline void clear_has_borrow_rate();
  inline void set_has_mortgage_term();
  inline void clear_has_mortgage_term();
  inline void set_has_mode_of_repayment();
  inline void clear_has_mode_of_repayment();
  inline void set_has_lp_user();
  inline void clear_has_lp_user();
  inline void set_has_amount_guaranteed();
  inline void clear_has_amount_guaranteed();
  inline void set_has_rob_lp_time();
  inline void clear_has_rob_lp_time();
  inline void set_has_lp_time();
  inline void clear_has_lp_time();
  inline void set_has_lp_address();
  inline void clear_has_lp_address();
  inline void set_has_is_indeed_lp();
  inline void clear_has_is_indeed_lp();
  inline void set_has_reasons_for_guarantee();
  inline void clear_has_reasons_for_guarantee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* borrow_bid_;
  ::std::string* bid_name_;
  ::std::string* borrow_time_;
  ::std::string* borrower_nickname_;
  ::std::string* borrow_describe_;
  float borrow_money_;
  float borrow_rate_;
  ::std::string* mode_of_repayment_;
  ::google::protobuf::int32 mortgage_term_;
  float amount_guaranteed_;
  ::std::string* lp_user_;
  ::std::string* rob_lp_time_;
  ::std::string* lp_time_;
  ::std::string* lp_address_;
  ::std::string* reasons_for_guarantee_;
  ::google::protobuf::RepeatedPtrField< ::std::string> picture_url_;
  ::google::protobuf::int32 is_indeed_lp_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static bid_info* default_instance_;
};
// -------------------------------------------------------------------

class detail_early_warning : public ::google::protobuf::Message {
 public:
  detail_early_warning();
  virtual ~detail_early_warning();

  detail_early_warning(const detail_early_warning& from);

  inline detail_early_warning& operator=(const detail_early_warning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detail_early_warning& default_instance();

  void Swap(detail_early_warning* other);

  // implements Message ----------------------------------------------

  detail_early_warning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detail_early_warning& from);
  void MergeFrom(const detail_early_warning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes userstatus = 1;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserstatusFieldNumber = 1;
  inline const ::std::string& userstatus() const;
  inline void set_userstatus(const ::std::string& value);
  inline void set_userstatus(const char* value);
  inline void set_userstatus(const void* value, size_t size);
  inline ::std::string* mutable_userstatus();
  inline ::std::string* release_userstatus();
  inline void set_allocated_userstatus(::std::string* userstatus);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 4;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 4;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional .common.sex sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::common::sex sex() const;
  inline void set_sex(::common::sex value);

  // optional int32 age = 6;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 6;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional bytes province = 7;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 7;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const void* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // optional bytes city = 8;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 8;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional int32 loan_bid_amount = 9;
  inline bool has_loan_bid_amount() const;
  inline void clear_loan_bid_amount();
  static const int kLoanBidAmountFieldNumber = 9;
  inline ::google::protobuf::int32 loan_bid_amount() const;
  inline void set_loan_bid_amount(::google::protobuf::int32 value);

  // optional int32 qiao_qiao_loan_amount = 10;
  inline bool has_qiao_qiao_loan_amount() const;
  inline void clear_qiao_qiao_loan_amount();
  static const int kQiaoQiaoLoanAmountFieldNumber = 10;
  inline ::google::protobuf::int32 qiao_qiao_loan_amount() const;
  inline void set_qiao_qiao_loan_amount(::google::protobuf::int32 value);

  // optional bytes warn_type = 11;
  inline bool has_warn_type() const;
  inline void clear_warn_type();
  static const int kWarnTypeFieldNumber = 11;
  inline const ::std::string& warn_type() const;
  inline void set_warn_type(const ::std::string& value);
  inline void set_warn_type(const char* value);
  inline void set_warn_type(const void* value, size_t size);
  inline ::std::string* mutable_warn_type();
  inline ::std::string* release_warn_type();
  inline void set_allocated_warn_type(::std::string* warn_type);

  // optional bytes warn_time = 12;
  inline bool has_warn_time() const;
  inline void clear_warn_time();
  static const int kWarnTimeFieldNumber = 12;
  inline const ::std::string& warn_time() const;
  inline void set_warn_time(const ::std::string& value);
  inline void set_warn_time(const char* value);
  inline void set_warn_time(const void* value, size_t size);
  inline ::std::string* mutable_warn_time();
  inline ::std::string* release_warn_time();
  inline void set_allocated_warn_time(::std::string* warn_time);

  // optional int32 status_early_warning = 13;
  inline bool has_status_early_warning() const;
  inline void clear_status_early_warning();
  static const int kStatusEarlyWarningFieldNumber = 13;
  inline ::google::protobuf::int32 status_early_warning() const;
  inline void set_status_early_warning(::google::protobuf::int32 value);

  // optional bytes remark = 14;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 14;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const void* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // optional bytes operater = 15;
  inline bool has_operater() const;
  inline void clear_operater();
  static const int kOperaterFieldNumber = 15;
  inline const ::std::string& operater() const;
  inline void set_operater(const ::std::string& value);
  inline void set_operater(const char* value);
  inline void set_operater(const void* value, size_t size);
  inline ::std::string* mutable_operater();
  inline ::std::string* release_operater();
  inline void set_allocated_operater(::std::string* operater);

  // optional bytes operator_time = 16;
  inline bool has_operator_time() const;
  inline void clear_operator_time();
  static const int kOperatorTimeFieldNumber = 16;
  inline const ::std::string& operator_time() const;
  inline void set_operator_time(const ::std::string& value);
  inline void set_operator_time(const char* value);
  inline void set_operator_time(const void* value, size_t size);
  inline ::std::string* mutable_operator_time();
  inline ::std::string* release_operator_time();
  inline void set_allocated_operator_time(::std::string* operator_time);

  // optional int32 id = 17;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 17;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes nickname = 18;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 18;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes warn_reason = 19;
  inline bool has_warn_reason() const;
  inline void clear_warn_reason();
  static const int kWarnReasonFieldNumber = 19;
  inline const ::std::string& warn_reason() const;
  inline void set_warn_reason(const ::std::string& value);
  inline void set_warn_reason(const char* value);
  inline void set_warn_reason(const void* value, size_t size);
  inline ::std::string* mutable_warn_reason();
  inline ::std::string* release_warn_reason();
  inline void set_allocated_warn_reason(::std::string* warn_reason);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.detail_early_warning)
 private:
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_loan_bid_amount();
  inline void clear_has_loan_bid_amount();
  inline void set_has_qiao_qiao_loan_amount();
  inline void clear_has_qiao_qiao_loan_amount();
  inline void set_has_warn_type();
  inline void clear_has_warn_type();
  inline void set_has_warn_time();
  inline void clear_has_warn_time();
  inline void set_has_status_early_warning();
  inline void clear_has_status_early_warning();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_operater();
  inline void clear_has_operater();
  inline void set_has_operator_time();
  inline void clear_has_operator_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_warn_reason();
  inline void clear_has_warn_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* userstatus_;
  ::std::string* name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  int sex_;
  ::google::protobuf::int32 age_;
  ::std::string* province_;
  ::std::string* city_;
  ::google::protobuf::int32 loan_bid_amount_;
  ::google::protobuf::int32 qiao_qiao_loan_amount_;
  ::std::string* warn_type_;
  ::std::string* warn_time_;
  ::std::string* remark_;
  ::std::string* operater_;
  ::google::protobuf::int32 status_early_warning_;
  ::google::protobuf::int32 id_;
  ::std::string* operator_time_;
  ::std::string* nickname_;
  ::std::string* warn_reason_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static detail_early_warning* default_instance_;
};
// -------------------------------------------------------------------

class statistical_Intel_warning_ask : public ::google::protobuf::Message {
 public:
  statistical_Intel_warning_ask();
  virtual ~statistical_Intel_warning_ask();

  statistical_Intel_warning_ask(const statistical_Intel_warning_ask& from);

  inline statistical_Intel_warning_ask& operator=(const statistical_Intel_warning_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistical_Intel_warning_ask& default_instance();

  void Swap(statistical_Intel_warning_ask* other);

  // implements Message ----------------------------------------------

  statistical_Intel_warning_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistical_Intel_warning_ask& from);
  void MergeFrom(const statistical_Intel_warning_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.statistical_Intel_warning_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static statistical_Intel_warning_ask* default_instance_;
};
// -------------------------------------------------------------------

class statistical_early_warning_ans : public ::google::protobuf::Message {
 public:
  statistical_early_warning_ans();
  virtual ~statistical_early_warning_ans();

  statistical_early_warning_ans(const statistical_early_warning_ans& from);

  inline statistical_early_warning_ans& operator=(const statistical_early_warning_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistical_early_warning_ans& default_instance();

  void Swap(statistical_early_warning_ans* other);

  // implements Message ----------------------------------------------

  statistical_early_warning_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistical_early_warning_ans& from);
  void MergeFrom(const statistical_early_warning_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 borrow_bid_quantity = 1;
  inline bool has_borrow_bid_quantity() const;
  inline void clear_borrow_bid_quantity();
  static const int kBorrowBidQuantityFieldNumber = 1;
  inline ::google::protobuf::int32 borrow_bid_quantity() const;
  inline void set_borrow_bid_quantity(::google::protobuf::int32 value);

  // optional int32 early_warning_bid_quantity = 2;
  inline bool has_early_warning_bid_quantity() const;
  inline void clear_early_warning_bid_quantity();
  static const int kEarlyWarningBidQuantityFieldNumber = 2;
  inline ::google::protobuf::int32 early_warning_bid_quantity() const;
  inline void set_early_warning_bid_quantity(::google::protobuf::int32 value);

  // optional float early_warning_and_risk = 3;
  inline bool has_early_warning_and_risk() const;
  inline void clear_early_warning_and_risk();
  static const int kEarlyWarningAndRiskFieldNumber = 3;
  inline float early_warning_and_risk() const;
  inline void set_early_warning_and_risk(float value);

  // optional float early_warning_overdue_rate = 4;
  inline bool has_early_warning_overdue_rate() const;
  inline void clear_early_warning_overdue_rate();
  static const int kEarlyWarningOverdueRateFieldNumber = 4;
  inline float early_warning_overdue_rate() const;
  inline void set_early_warning_overdue_rate(float value);

  // optional .common.result_info result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.statistical_early_warning_ans)
 private:
  inline void set_has_borrow_bid_quantity();
  inline void clear_has_borrow_bid_quantity();
  inline void set_has_early_warning_bid_quantity();
  inline void clear_has_early_warning_bid_quantity();
  inline void set_has_early_warning_and_risk();
  inline void clear_has_early_warning_and_risk();
  inline void set_has_early_warning_overdue_rate();
  inline void clear_has_early_warning_overdue_rate();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 borrow_bid_quantity_;
  ::google::protobuf::int32 early_warning_bid_quantity_;
  float early_warning_and_risk_;
  float early_warning_overdue_rate_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static statistical_early_warning_ans* default_instance_;
};
// -------------------------------------------------------------------

class statistical_Intel_warning_ans : public ::google::protobuf::Message {
 public:
  statistical_Intel_warning_ans();
  virtual ~statistical_Intel_warning_ans();

  statistical_Intel_warning_ans(const statistical_Intel_warning_ans& from);

  inline statistical_Intel_warning_ans& operator=(const statistical_Intel_warning_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistical_Intel_warning_ans& default_instance();

  void Swap(statistical_Intel_warning_ans* other);

  // implements Message ----------------------------------------------

  statistical_Intel_warning_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistical_Intel_warning_ans& from);
  void MergeFrom(const statistical_Intel_warning_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // optional int32 cur_user_amount = 2;
  inline bool has_cur_user_amount() const;
  inline void clear_cur_user_amount();
  static const int kCurUserAmountFieldNumber = 2;
  inline ::google::protobuf::int32 cur_user_amount() const;
  inline void set_cur_user_amount(::google::protobuf::int32 value);

  // optional int32 qiandabao_amount = 3;
  inline bool has_qiandabao_amount() const;
  inline void clear_qiandabao_amount();
  static const int kQiandabaoAmountFieldNumber = 3;
  inline ::google::protobuf::int32 qiandabao_amount() const;
  inline void set_qiandabao_amount(::google::protobuf::int32 value);

  // optional int32 weidabao_amount = 4;
  inline bool has_weidabao_amount() const;
  inline void clear_weidabao_amount();
  static const int kWeidabaoAmountFieldNumber = 4;
  inline ::google::protobuf::int32 weidabao_amount() const;
  inline void set_weidabao_amount(::google::protobuf::int32 value);

  // optional int32 credit_borrow_amount = 5;
  inline bool has_credit_borrow_amount() const;
  inline void clear_credit_borrow_amount();
  static const int kCreditBorrowAmountFieldNumber = 5;
  inline ::google::protobuf::int32 credit_borrow_amount() const;
  inline void set_credit_borrow_amount(::google::protobuf::int32 value);

  // optional int32 qiaoqiao_bid_amount = 6;
  inline bool has_qiaoqiao_bid_amount() const;
  inline void clear_qiaoqiao_bid_amount();
  static const int kQiaoqiaoBidAmountFieldNumber = 6;
  inline ::google::protobuf::int32 qiaoqiao_bid_amount() const;
  inline void set_qiaoqiao_bid_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.statistical_Intel_warning_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_cur_user_amount();
  inline void clear_has_cur_user_amount();
  inline void set_has_qiandabao_amount();
  inline void clear_has_qiandabao_amount();
  inline void set_has_weidabao_amount();
  inline void clear_has_weidabao_amount();
  inline void set_has_credit_borrow_amount();
  inline void clear_has_credit_borrow_amount();
  inline void set_has_qiaoqiao_bid_amount();
  inline void clear_has_qiaoqiao_bid_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::int32 cur_user_amount_;
  ::google::protobuf::int32 qiandabao_amount_;
  ::google::protobuf::int32 weidabao_amount_;
  ::google::protobuf::int32 credit_borrow_amount_;
  ::google::protobuf::int32 qiaoqiao_bid_amount_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static statistical_Intel_warning_ans* default_instance_;
};
// -------------------------------------------------------------------

class detail_early_warning_ask : public ::google::protobuf::Message {
 public:
  detail_early_warning_ask();
  virtual ~detail_early_warning_ask();

  detail_early_warning_ask(const detail_early_warning_ask& from);

  inline detail_early_warning_ask& operator=(const detail_early_warning_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detail_early_warning_ask& default_instance();

  void Swap(detail_early_warning_ask* other);

  // implements Message ----------------------------------------------

  detail_early_warning_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detail_early_warning_ask& from);
  void MergeFrom(const detail_early_warning_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes province = 1;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 1;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const void* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // optional bytes city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 4;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 4;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes start_date = 5;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 5;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 6;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 6;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional int32 page_num = 7;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 7;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 8;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 8;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional int32 warn_type = 9;
  inline bool has_warn_type() const;
  inline void clear_warn_type();
  static const int kWarnTypeFieldNumber = 9;
  inline ::google::protobuf::int32 warn_type() const;
  inline void set_warn_type(::google::protobuf::int32 value);

  // optional int32 status_early_warning = 10;
  inline bool has_status_early_warning() const;
  inline void clear_status_early_warning();
  static const int kStatusEarlyWarningFieldNumber = 10;
  inline ::google::protobuf::int32 status_early_warning() const;
  inline void set_status_early_warning(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 11;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 11;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.detail_early_warning_ask)
 private:
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_warn_type();
  inline void clear_has_warn_type();
  inline void set_has_status_early_warning();
  inline void clear_has_status_early_warning();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* province_;
  ::std::string* city_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::google::protobuf::int32 warn_type_;
  ::google::protobuf::int32 status_early_warning_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static detail_early_warning_ask* default_instance_;
};
// -------------------------------------------------------------------

class detail_early_warning_ans : public ::google::protobuf::Message {
 public:
  detail_early_warning_ans();
  virtual ~detail_early_warning_ans();

  detail_early_warning_ans(const detail_early_warning_ans& from);

  inline detail_early_warning_ans& operator=(const detail_early_warning_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detail_early_warning_ans& default_instance();

  void Swap(detail_early_warning_ans* other);

  // implements Message ----------------------------------------------

  detail_early_warning_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detail_early_warning_ans& from);
  void MergeFrom(const detail_early_warning_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_number = 1;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 1;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // repeated .AFP_main_frame.detail_early_warning info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::AFP_main_frame::detail_early_warning& info(int index) const;
  inline ::AFP_main_frame::detail_early_warning* mutable_info(int index);
  inline ::AFP_main_frame::detail_early_warning* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::detail_early_warning >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::detail_early_warning >*
      mutable_info();

  // optional .common.result_info result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.detail_early_warning_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::detail_early_warning > info_;
  ::common::result_info* result_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static detail_early_warning_ans* default_instance_;
};
// -------------------------------------------------------------------

class cancel_the_warning_ask : public ::google::protobuf::Message {
 public:
  cancel_the_warning_ask();
  virtual ~cancel_the_warning_ask();

  cancel_the_warning_ask(const cancel_the_warning_ask& from);

  inline cancel_the_warning_ask& operator=(const cancel_the_warning_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cancel_the_warning_ask& default_instance();

  void Swap(cancel_the_warning_ask* other);

  // implements Message ----------------------------------------------

  cancel_the_warning_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancel_the_warning_ask& from);
  void MergeFrom(const cancel_the_warning_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes borrow_bid = 1;
  inline bool has_borrow_bid() const;
  inline void clear_borrow_bid();
  static const int kBorrowBidFieldNumber = 1;
  inline const ::std::string& borrow_bid() const;
  inline void set_borrow_bid(const ::std::string& value);
  inline void set_borrow_bid(const char* value);
  inline void set_borrow_bid(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid();
  inline ::std::string* release_borrow_bid();
  inline void set_allocated_borrow_bid(::std::string* borrow_bid);

  // optional bytes cancel_the_warning_operation = 2;
  inline bool has_cancel_the_warning_operation() const;
  inline void clear_cancel_the_warning_operation();
  static const int kCancelTheWarningOperationFieldNumber = 2;
  inline const ::std::string& cancel_the_warning_operation() const;
  inline void set_cancel_the_warning_operation(const ::std::string& value);
  inline void set_cancel_the_warning_operation(const char* value);
  inline void set_cancel_the_warning_operation(const void* value, size_t size);
  inline ::std::string* mutable_cancel_the_warning_operation();
  inline ::std::string* release_cancel_the_warning_operation();
  inline void set_allocated_cancel_the_warning_operation(::std::string* cancel_the_warning_operation);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.cancel_the_warning_ask)
 private:
  inline void set_has_borrow_bid();
  inline void clear_has_borrow_bid();
  inline void set_has_cancel_the_warning_operation();
  inline void clear_has_cancel_the_warning_operation();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* borrow_bid_;
  ::std::string* cancel_the_warning_operation_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static cancel_the_warning_ask* default_instance_;
};
// -------------------------------------------------------------------

class cancel_the_warning_ans : public ::google::protobuf::Message {
 public:
  cancel_the_warning_ans();
  virtual ~cancel_the_warning_ans();

  cancel_the_warning_ans(const cancel_the_warning_ans& from);

  inline cancel_the_warning_ans& operator=(const cancel_the_warning_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cancel_the_warning_ans& default_instance();

  void Swap(cancel_the_warning_ans* other);

  // implements Message ----------------------------------------------

  cancel_the_warning_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancel_the_warning_ans& from);
  void MergeFrom(const cancel_the_warning_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // optional bytes borrow_bid = 2;
  inline bool has_borrow_bid() const;
  inline void clear_borrow_bid();
  static const int kBorrowBidFieldNumber = 2;
  inline const ::std::string& borrow_bid() const;
  inline void set_borrow_bid(const ::std::string& value);
  inline void set_borrow_bid(const char* value);
  inline void set_borrow_bid(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid();
  inline ::std::string* release_borrow_bid();
  inline void set_allocated_borrow_bid(::std::string* borrow_bid);

  // optional int32 status_early_warning = 3;
  inline bool has_status_early_warning() const;
  inline void clear_status_early_warning();
  static const int kStatusEarlyWarningFieldNumber = 3;
  inline ::google::protobuf::int32 status_early_warning() const;
  inline void set_status_early_warning(::google::protobuf::int32 value);

  // optional bytes cancel_the_warn_time = 4;
  inline bool has_cancel_the_warn_time() const;
  inline void clear_cancel_the_warn_time();
  static const int kCancelTheWarnTimeFieldNumber = 4;
  inline const ::std::string& cancel_the_warn_time() const;
  inline void set_cancel_the_warn_time(const ::std::string& value);
  inline void set_cancel_the_warn_time(const char* value);
  inline void set_cancel_the_warn_time(const void* value, size_t size);
  inline ::std::string* mutable_cancel_the_warn_time();
  inline ::std::string* release_cancel_the_warn_time();
  inline void set_allocated_cancel_the_warn_time(::std::string* cancel_the_warn_time);

  // optional bytes cancel_the_warning_operation = 5;
  inline bool has_cancel_the_warning_operation() const;
  inline void clear_cancel_the_warning_operation();
  static const int kCancelTheWarningOperationFieldNumber = 5;
  inline const ::std::string& cancel_the_warning_operation() const;
  inline void set_cancel_the_warning_operation(const ::std::string& value);
  inline void set_cancel_the_warning_operation(const char* value);
  inline void set_cancel_the_warning_operation(const void* value, size_t size);
  inline ::std::string* mutable_cancel_the_warning_operation();
  inline ::std::string* release_cancel_the_warning_operation();
  inline void set_allocated_cancel_the_warning_operation(::std::string* cancel_the_warning_operation);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.cancel_the_warning_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_borrow_bid();
  inline void clear_has_borrow_bid();
  inline void set_has_status_early_warning();
  inline void clear_has_status_early_warning();
  inline void set_has_cancel_the_warn_time();
  inline void clear_has_cancel_the_warn_time();
  inline void set_has_cancel_the_warning_operation();
  inline void clear_has_cancel_the_warning_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  ::std::string* borrow_bid_;
  ::std::string* cancel_the_warn_time_;
  ::std::string* cancel_the_warning_operation_;
  ::google::protobuf::int32 status_early_warning_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static cancel_the_warning_ans* default_instance_;
};
// -------------------------------------------------------------------

class modify_save_warning_ask : public ::google::protobuf::Message {
 public:
  modify_save_warning_ask();
  virtual ~modify_save_warning_ask();

  modify_save_warning_ask(const modify_save_warning_ask& from);

  inline modify_save_warning_ask& operator=(const modify_save_warning_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_save_warning_ask& default_instance();

  void Swap(modify_save_warning_ask* other);

  // implements Message ----------------------------------------------

  modify_save_warning_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_save_warning_ask& from);
  void MergeFrom(const modify_save_warning_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes operater = 3;
  inline bool has_operater() const;
  inline void clear_operater();
  static const int kOperaterFieldNumber = 3;
  inline const ::std::string& operater() const;
  inline void set_operater(const ::std::string& value);
  inline void set_operater(const char* value);
  inline void set_operater(const void* value, size_t size);
  inline ::std::string* mutable_operater();
  inline ::std::string* release_operater();
  inline void set_allocated_operater(::std::string* operater);

  // optional bytes operater_time = 4;
  inline bool has_operater_time() const;
  inline void clear_operater_time();
  static const int kOperaterTimeFieldNumber = 4;
  inline const ::std::string& operater_time() const;
  inline void set_operater_time(const ::std::string& value);
  inline void set_operater_time(const char* value);
  inline void set_operater_time(const void* value, size_t size);
  inline ::std::string* mutable_operater_time();
  inline ::std::string* release_operater_time();
  inline void set_allocated_operater_time(::std::string* operater_time);

  // optional bytes remark = 5;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 5;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const void* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.modify_save_warning_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_operater();
  inline void clear_has_operater();
  inline void set_has_operater_time();
  inline void clear_has_operater_time();
  inline void set_has_remark();
  inline void clear_has_remark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* operater_;
  ::std::string* operater_time_;
  ::std::string* remark_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static modify_save_warning_ask* default_instance_;
};
// -------------------------------------------------------------------

class modify_save_warning_ans : public ::google::protobuf::Message {
 public:
  modify_save_warning_ans();
  virtual ~modify_save_warning_ans();

  modify_save_warning_ans(const modify_save_warning_ans& from);

  inline modify_save_warning_ans& operator=(const modify_save_warning_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const modify_save_warning_ans& default_instance();

  void Swap(modify_save_warning_ans* other);

  // implements Message ----------------------------------------------

  modify_save_warning_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const modify_save_warning_ans& from);
  void MergeFrom(const modify_save_warning_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.modify_save_warning_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static modify_save_warning_ans* default_instance_;
};
// -------------------------------------------------------------------

class bid_detail_ask : public ::google::protobuf::Message {
 public:
  bid_detail_ask();
  virtual ~bid_detail_ask();

  bid_detail_ask(const bid_detail_ask& from);

  inline bid_detail_ask& operator=(const bid_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_detail_ask& default_instance();

  void Swap(bid_detail_ask* other);

  // implements Message ----------------------------------------------

  bid_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_detail_ask& from);
  void MergeFrom(const bid_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 4;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 4;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.bid_detail_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static bid_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class borrow_bid_detail_info : public ::google::protobuf::Message {
 public:
  borrow_bid_detail_info();
  virtual ~borrow_bid_detail_info();

  borrow_bid_detail_info(const borrow_bid_detail_info& from);

  inline borrow_bid_detail_info& operator=(const borrow_bid_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const borrow_bid_detail_info& default_instance();

  void Swap(borrow_bid_detail_info* other);

  // implements Message ----------------------------------------------

  borrow_bid_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const borrow_bid_detail_info& from);
  void MergeFrom(const borrow_bid_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes borrow_bid = 1;
  inline bool has_borrow_bid() const;
  inline void clear_borrow_bid();
  static const int kBorrowBidFieldNumber = 1;
  inline const ::std::string& borrow_bid() const;
  inline void set_borrow_bid(const ::std::string& value);
  inline void set_borrow_bid(const char* value);
  inline void set_borrow_bid(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid();
  inline ::std::string* release_borrow_bid();
  inline void set_allocated_borrow_bid(::std::string* borrow_bid);

  // optional bytes bid_name = 2;
  inline bool has_bid_name() const;
  inline void clear_bid_name();
  static const int kBidNameFieldNumber = 2;
  inline const ::std::string& bid_name() const;
  inline void set_bid_name(const ::std::string& value);
  inline void set_bid_name(const char* value);
  inline void set_bid_name(const void* value, size_t size);
  inline ::std::string* mutable_bid_name();
  inline ::std::string* release_bid_name();
  inline void set_allocated_bid_name(::std::string* bid_name);

  // optional float borrow_money = 3;
  inline bool has_borrow_money() const;
  inline void clear_borrow_money();
  static const int kBorrowMoneyFieldNumber = 3;
  inline float borrow_money() const;
  inline void set_borrow_money(float value);

  // optional float borrow_rate = 4;
  inline bool has_borrow_rate() const;
  inline void clear_borrow_rate();
  static const int kBorrowRateFieldNumber = 4;
  inline float borrow_rate() const;
  inline void set_borrow_rate(float value);

  // optional float guaranteed_rate = 5;
  inline bool has_guaranteed_rate() const;
  inline void clear_guaranteed_rate();
  static const int kGuaranteedRateFieldNumber = 5;
  inline float guaranteed_rate() const;
  inline void set_guaranteed_rate(float value);

  // optional bytes borrow_time = 6;
  inline bool has_borrow_time() const;
  inline void clear_borrow_time();
  static const int kBorrowTimeFieldNumber = 6;
  inline const ::std::string& borrow_time() const;
  inline void set_borrow_time(const ::std::string& value);
  inline void set_borrow_time(const char* value);
  inline void set_borrow_time(const void* value, size_t size);
  inline ::std::string* mutable_borrow_time();
  inline ::std::string* release_borrow_time();
  inline void set_allocated_borrow_time(::std::string* borrow_time);

  // optional bytes borrow_bid_type = 7;
  inline bool has_borrow_bid_type() const;
  inline void clear_borrow_bid_type();
  static const int kBorrowBidTypeFieldNumber = 7;
  inline const ::std::string& borrow_bid_type() const;
  inline void set_borrow_bid_type(const ::std::string& value);
  inline void set_borrow_bid_type(const char* value);
  inline void set_borrow_bid_type(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid_type();
  inline ::std::string* release_borrow_bid_type();
  inline void set_allocated_borrow_bid_type(::std::string* borrow_bid_type);

  // optional bytes borrow_bid_status = 8;
  inline bool has_borrow_bid_status() const;
  inline void clear_borrow_bid_status();
  static const int kBorrowBidStatusFieldNumber = 8;
  inline const ::std::string& borrow_bid_status() const;
  inline void set_borrow_bid_status(const ::std::string& value);
  inline void set_borrow_bid_status(const char* value);
  inline void set_borrow_bid_status(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid_status();
  inline ::std::string* release_borrow_bid_status();
  inline void set_allocated_borrow_bid_status(::std::string* borrow_bid_status);

  // optional bytes jindiao_nick = 9;
  inline bool has_jindiao_nick() const;
  inline void clear_jindiao_nick();
  static const int kJindiaoNickFieldNumber = 9;
  inline const ::std::string& jindiao_nick() const;
  inline void set_jindiao_nick(const ::std::string& value);
  inline void set_jindiao_nick(const char* value);
  inline void set_jindiao_nick(const void* value, size_t size);
  inline ::std::string* mutable_jindiao_nick();
  inline ::std::string* release_jindiao_nick();
  inline void set_allocated_jindiao_nick(::std::string* jindiao_nick);

  // optional float amount_guaranteed = 10;
  inline bool has_amount_guaranteed() const;
  inline void clear_amount_guaranteed();
  static const int kAmountGuaranteedFieldNumber = 10;
  inline float amount_guaranteed() const;
  inline void set_amount_guaranteed(float value);

  // optional bytes LP_time = 11;
  inline bool has_lp_time() const;
  inline void clear_lp_time();
  static const int kLPTimeFieldNumber = 11;
  inline const ::std::string& lp_time() const;
  inline void set_lp_time(const ::std::string& value);
  inline void set_lp_time(const char* value);
  inline void set_lp_time(const void* value, size_t size);
  inline ::std::string* mutable_lp_time();
  inline ::std::string* release_lp_time();
  inline void set_allocated_lp_time(::std::string* lp_time);

  // optional int32 is_indeed_LP = 12;
  inline bool has_is_indeed_lp() const;
  inline void clear_is_indeed_lp();
  static const int kIsIndeedLPFieldNumber = 12;
  inline ::google::protobuf::int32 is_indeed_lp() const;
  inline void set_is_indeed_lp(::google::protobuf::int32 value);

  // optional bytes already_reback_amount = 13;
  inline bool has_already_reback_amount() const;
  inline void clear_already_reback_amount();
  static const int kAlreadyRebackAmountFieldNumber = 13;
  inline const ::std::string& already_reback_amount() const;
  inline void set_already_reback_amount(const ::std::string& value);
  inline void set_already_reback_amount(const char* value);
  inline void set_already_reback_amount(const void* value, size_t size);
  inline ::std::string* mutable_already_reback_amount();
  inline ::std::string* release_already_reback_amount();
  inline void set_allocated_already_reback_amount(::std::string* already_reback_amount);

  // optional bytes wait_reback_amount = 14;
  inline bool has_wait_reback_amount() const;
  inline void clear_wait_reback_amount();
  static const int kWaitRebackAmountFieldNumber = 14;
  inline const ::std::string& wait_reback_amount() const;
  inline void set_wait_reback_amount(const ::std::string& value);
  inline void set_wait_reback_amount(const char* value);
  inline void set_wait_reback_amount(const void* value, size_t size);
  inline ::std::string* mutable_wait_reback_amount();
  inline ::std::string* release_wait_reback_amount();
  inline void set_allocated_wait_reback_amount(::std::string* wait_reback_amount);

  // optional bytes LP_address = 15;
  inline bool has_lp_address() const;
  inline void clear_lp_address();
  static const int kLPAddressFieldNumber = 15;
  inline const ::std::string& lp_address() const;
  inline void set_lp_address(const ::std::string& value);
  inline void set_lp_address(const char* value);
  inline void set_lp_address(const void* value, size_t size);
  inline ::std::string* mutable_lp_address();
  inline ::std::string* release_lp_address();
  inline void set_allocated_lp_address(::std::string* lp_address);

  // optional bytes Reasons_for_guarantee = 16;
  inline bool has_reasons_for_guarantee() const;
  inline void clear_reasons_for_guarantee();
  static const int kReasonsForGuaranteeFieldNumber = 16;
  inline const ::std::string& reasons_for_guarantee() const;
  inline void set_reasons_for_guarantee(const ::std::string& value);
  inline void set_reasons_for_guarantee(const char* value);
  inline void set_reasons_for_guarantee(const void* value, size_t size);
  inline ::std::string* mutable_reasons_for_guarantee();
  inline ::std::string* release_reasons_for_guarantee();
  inline void set_allocated_reasons_for_guarantee(::std::string* reasons_for_guarantee);

  // repeated bytes picture_url = 17;
  inline int picture_url_size() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 17;
  inline const ::std::string& picture_url(int index) const;
  inline ::std::string* mutable_picture_url(int index);
  inline void set_picture_url(int index, const ::std::string& value);
  inline void set_picture_url(int index, const char* value);
  inline void set_picture_url(int index, const void* value, size_t size);
  inline ::std::string* add_picture_url();
  inline void add_picture_url(const ::std::string& value);
  inline void add_picture_url(const char* value);
  inline void add_picture_url(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& picture_url() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_picture_url();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.borrow_bid_detail_info)
 private:
  inline void set_has_borrow_bid();
  inline void clear_has_borrow_bid();
  inline void set_has_bid_name();
  inline void clear_has_bid_name();
  inline void set_has_borrow_money();
  inline void clear_has_borrow_money();
  inline void set_has_borrow_rate();
  inline void clear_has_borrow_rate();
  inline void set_has_guaranteed_rate();
  inline void clear_has_guaranteed_rate();
  inline void set_has_borrow_time();
  inline void clear_has_borrow_time();
  inline void set_has_borrow_bid_type();
  inline void clear_has_borrow_bid_type();
  inline void set_has_borrow_bid_status();
  inline void clear_has_borrow_bid_status();
  inline void set_has_jindiao_nick();
  inline void clear_has_jindiao_nick();
  inline void set_has_amount_guaranteed();
  inline void clear_has_amount_guaranteed();
  inline void set_has_lp_time();
  inline void clear_has_lp_time();
  inline void set_has_is_indeed_lp();
  inline void clear_has_is_indeed_lp();
  inline void set_has_already_reback_amount();
  inline void clear_has_already_reback_amount();
  inline void set_has_wait_reback_amount();
  inline void clear_has_wait_reback_amount();
  inline void set_has_lp_address();
  inline void clear_has_lp_address();
  inline void set_has_reasons_for_guarantee();
  inline void clear_has_reasons_for_guarantee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* borrow_bid_;
  ::std::string* bid_name_;
  float borrow_money_;
  float borrow_rate_;
  ::std::string* borrow_time_;
  ::std::string* borrow_bid_type_;
  float guaranteed_rate_;
  float amount_guaranteed_;
  ::std::string* borrow_bid_status_;
  ::std::string* jindiao_nick_;
  ::std::string* lp_time_;
  ::std::string* already_reback_amount_;
  ::std::string* wait_reback_amount_;
  ::std::string* lp_address_;
  ::std::string* reasons_for_guarantee_;
  ::google::protobuf::RepeatedPtrField< ::std::string> picture_url_;
  ::google::protobuf::int32 is_indeed_lp_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static borrow_bid_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class qiaoqiao_bid_info : public ::google::protobuf::Message {
 public:
  qiaoqiao_bid_info();
  virtual ~qiaoqiao_bid_info();

  qiaoqiao_bid_info(const qiaoqiao_bid_info& from);

  inline qiaoqiao_bid_info& operator=(const qiaoqiao_bid_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qiaoqiao_bid_info& default_instance();

  void Swap(qiaoqiao_bid_info* other);

  // implements Message ----------------------------------------------

  qiaoqiao_bid_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qiaoqiao_bid_info& from);
  void MergeFrom(const qiaoqiao_bid_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes borrow_bid = 1;
  inline bool has_borrow_bid() const;
  inline void clear_borrow_bid();
  static const int kBorrowBidFieldNumber = 1;
  inline const ::std::string& borrow_bid() const;
  inline void set_borrow_bid(const ::std::string& value);
  inline void set_borrow_bid(const char* value);
  inline void set_borrow_bid(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid();
  inline ::std::string* release_borrow_bid();
  inline void set_allocated_borrow_bid(::std::string* borrow_bid);

  // optional bytes bid_name = 2;
  inline bool has_bid_name() const;
  inline void clear_bid_name();
  static const int kBidNameFieldNumber = 2;
  inline const ::std::string& bid_name() const;
  inline void set_bid_name(const ::std::string& value);
  inline void set_bid_name(const char* value);
  inline void set_bid_name(const void* value, size_t size);
  inline ::std::string* mutable_bid_name();
  inline ::std::string* release_bid_name();
  inline void set_allocated_bid_name(::std::string* bid_name);

  // optional float borrow_money = 3;
  inline bool has_borrow_money() const;
  inline void clear_borrow_money();
  static const int kBorrowMoneyFieldNumber = 3;
  inline float borrow_money() const;
  inline void set_borrow_money(float value);

  // optional float borrow_rate = 4;
  inline bool has_borrow_rate() const;
  inline void clear_borrow_rate();
  static const int kBorrowRateFieldNumber = 4;
  inline float borrow_rate() const;
  inline void set_borrow_rate(float value);

  // optional bytes repayment_deadtime = 5;
  inline bool has_repayment_deadtime() const;
  inline void clear_repayment_deadtime();
  static const int kRepaymentDeadtimeFieldNumber = 5;
  inline const ::std::string& repayment_deadtime() const;
  inline void set_repayment_deadtime(const ::std::string& value);
  inline void set_repayment_deadtime(const char* value);
  inline void set_repayment_deadtime(const void* value, size_t size);
  inline ::std::string* mutable_repayment_deadtime();
  inline ::std::string* release_repayment_deadtime();
  inline void set_allocated_repayment_deadtime(::std::string* repayment_deadtime);

  // optional bytes publish_borrow_time = 6;
  inline bool has_publish_borrow_time() const;
  inline void clear_publish_borrow_time();
  static const int kPublishBorrowTimeFieldNumber = 6;
  inline const ::std::string& publish_borrow_time() const;
  inline void set_publish_borrow_time(const ::std::string& value);
  inline void set_publish_borrow_time(const char* value);
  inline void set_publish_borrow_time(const void* value, size_t size);
  inline ::std::string* mutable_publish_borrow_time();
  inline ::std::string* release_publish_borrow_time();
  inline void set_allocated_publish_borrow_time(::std::string* publish_borrow_time);

  // optional bytes borrow_bid_status = 7;
  inline bool has_borrow_bid_status() const;
  inline void clear_borrow_bid_status();
  static const int kBorrowBidStatusFieldNumber = 7;
  inline const ::std::string& borrow_bid_status() const;
  inline void set_borrow_bid_status(const ::std::string& value);
  inline void set_borrow_bid_status(const char* value);
  inline void set_borrow_bid_status(const void* value, size_t size);
  inline ::std::string* mutable_borrow_bid_status();
  inline ::std::string* release_borrow_bid_status();
  inline void set_allocated_borrow_bid_status(::std::string* borrow_bid_status);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.qiaoqiao_bid_info)
 private:
  inline void set_has_borrow_bid();
  inline void clear_has_borrow_bid();
  inline void set_has_bid_name();
  inline void clear_has_bid_name();
  inline void set_has_borrow_money();
  inline void clear_has_borrow_money();
  inline void set_has_borrow_rate();
  inline void clear_has_borrow_rate();
  inline void set_has_repayment_deadtime();
  inline void clear_has_repayment_deadtime();
  inline void set_has_publish_borrow_time();
  inline void clear_has_publish_borrow_time();
  inline void set_has_borrow_bid_status();
  inline void clear_has_borrow_bid_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* borrow_bid_;
  ::std::string* bid_name_;
  float borrow_money_;
  float borrow_rate_;
  ::std::string* repayment_deadtime_;
  ::std::string* publish_borrow_time_;
  ::std::string* borrow_bid_status_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static qiaoqiao_bid_info* default_instance_;
};
// -------------------------------------------------------------------

class borrow_bid_detail_ans : public ::google::protobuf::Message {
 public:
  borrow_bid_detail_ans();
  virtual ~borrow_bid_detail_ans();

  borrow_bid_detail_ans(const borrow_bid_detail_ans& from);

  inline borrow_bid_detail_ans& operator=(const borrow_bid_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const borrow_bid_detail_ans& default_instance();

  void Swap(borrow_bid_detail_ans* other);

  // implements Message ----------------------------------------------

  borrow_bid_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const borrow_bid_detail_ans& from);
  void MergeFrom(const borrow_bid_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .AFP_main_frame.borrow_bid_detail_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::AFP_main_frame::borrow_bid_detail_info& info(int index) const;
  inline ::AFP_main_frame::borrow_bid_detail_info* mutable_info(int index);
  inline ::AFP_main_frame::borrow_bid_detail_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::borrow_bid_detail_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::borrow_bid_detail_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.borrow_bid_detail_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::borrow_bid_detail_info > info_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static borrow_bid_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class qiaoqiao_bid_ans : public ::google::protobuf::Message {
 public:
  qiaoqiao_bid_ans();
  virtual ~qiaoqiao_bid_ans();

  qiaoqiao_bid_ans(const qiaoqiao_bid_ans& from);

  inline qiaoqiao_bid_ans& operator=(const qiaoqiao_bid_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qiaoqiao_bid_ans& default_instance();

  void Swap(qiaoqiao_bid_ans* other);

  // implements Message ----------------------------------------------

  qiaoqiao_bid_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qiaoqiao_bid_ans& from);
  void MergeFrom(const qiaoqiao_bid_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .AFP_main_frame.qiaoqiao_bid_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::AFP_main_frame::qiaoqiao_bid_info& info(int index) const;
  inline ::AFP_main_frame::qiaoqiao_bid_info* mutable_info(int index);
  inline ::AFP_main_frame::qiaoqiao_bid_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiao_bid_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiao_bid_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.qiaoqiao_bid_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiao_bid_info > info_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static qiaoqiao_bid_ans* default_instance_;
};
// -------------------------------------------------------------------

class province_city_inquire_ask : public ::google::protobuf::Message {
 public:
  province_city_inquire_ask();
  virtual ~province_city_inquire_ask();

  province_city_inquire_ask(const province_city_inquire_ask& from);

  inline province_city_inquire_ask& operator=(const province_city_inquire_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const province_city_inquire_ask& default_instance();

  void Swap(province_city_inquire_ask* other);

  // implements Message ----------------------------------------------

  province_city_inquire_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const province_city_inquire_ask& from);
  void MergeFrom(const province_city_inquire_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.province_city_inquire_ask)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static province_city_inquire_ask* default_instance_;
};
// -------------------------------------------------------------------

class province_city_inquire_ans : public ::google::protobuf::Message {
 public:
  province_city_inquire_ans();
  virtual ~province_city_inquire_ans();

  province_city_inquire_ans(const province_city_inquire_ans& from);

  inline province_city_inquire_ans& operator=(const province_city_inquire_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const province_city_inquire_ans& default_instance();

  void Swap(province_city_inquire_ans* other);

  // implements Message ----------------------------------------------

  province_city_inquire_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const province_city_inquire_ans& from);
  void MergeFrom(const province_city_inquire_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.area_name province_or_city = 1;
  inline int province_or_city_size() const;
  inline void clear_province_or_city();
  static const int kProvinceOrCityFieldNumber = 1;
  inline const ::AFP_main_frame::area_name& province_or_city(int index) const;
  inline ::AFP_main_frame::area_name* mutable_province_or_city(int index);
  inline ::AFP_main_frame::area_name* add_province_or_city();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::area_name >&
      province_or_city() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::area_name >*
      mutable_province_or_city();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.province_city_inquire_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::area_name > province_or_city_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static province_city_inquire_ans* default_instance_;
};
// -------------------------------------------------------------------

class friend_info : public ::google::protobuf::Message {
 public:
  friend_info();
  virtual ~friend_info();

  friend_info(const friend_info& from);

  inline friend_info& operator=(const friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_info& default_instance();

  void Swap(friend_info* other);

  // implements Message ----------------------------------------------

  friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_info& from);
  void MergeFrom(const friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes friend_id = 1;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  inline const ::std::string& friend_id() const;
  inline void set_friend_id(const ::std::string& value);
  inline void set_friend_id(const char* value);
  inline void set_friend_id(const void* value, size_t size);
  inline ::std::string* mutable_friend_id();
  inline ::std::string* release_friend_id();
  inline void set_allocated_friend_id(::std::string* friend_id);

  // optional bytes friend_uid = 2;
  inline bool has_friend_uid() const;
  inline void clear_friend_uid();
  static const int kFriendUidFieldNumber = 2;
  inline const ::std::string& friend_uid() const;
  inline void set_friend_uid(const ::std::string& value);
  inline void set_friend_uid(const char* value);
  inline void set_friend_uid(const void* value, size_t size);
  inline ::std::string* mutable_friend_uid();
  inline ::std::string* release_friend_uid();
  inline void set_allocated_friend_uid(::std::string* friend_uid);

  // optional bytes nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes avatar = 4;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes updatetime = 5;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 5;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const void* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.friend_info)
 private:
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_friend_uid();
  inline void clear_has_friend_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* friend_id_;
  ::std::string* friend_uid_;
  ::std::string* nickname_;
  ::std::string* avatar_;
  ::std::string* updatetime_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static friend_info* default_instance_;
};
// -------------------------------------------------------------------

class group_info : public ::google::protobuf::Message {
 public:
  group_info();
  virtual ~group_info();

  group_info(const group_info& from);

  inline group_info& operator=(const group_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_info& default_instance();

  void Swap(group_info* other);

  // implements Message ----------------------------------------------

  group_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const group_info& from);
  void MergeFrom(const group_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional bytes qun_nickname = 2;
  inline bool has_qun_nickname() const;
  inline void clear_qun_nickname();
  static const int kQunNicknameFieldNumber = 2;
  inline const ::std::string& qun_nickname() const;
  inline void set_qun_nickname(const ::std::string& value);
  inline void set_qun_nickname(const char* value);
  inline void set_qun_nickname(const void* value, size_t size);
  inline ::std::string* mutable_qun_nickname();
  inline ::std::string* release_qun_nickname();
  inline void set_allocated_qun_nickname(::std::string* qun_nickname);

  // optional bytes avatar_url = 3;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const void* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // optional bytes updatetime = 4;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 4;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const void* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.group_info)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_qun_nickname();
  inline void clear_has_qun_nickname();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gid_;
  ::std::string* qun_nickname_;
  ::std::string* avatar_url_;
  ::std::string* updatetime_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static group_info* default_instance_;
};
// -------------------------------------------------------------------

class friendqunList_ask : public ::google::protobuf::Message {
 public:
  friendqunList_ask();
  virtual ~friendqunList_ask();

  friendqunList_ask(const friendqunList_ask& from);

  inline friendqunList_ask& operator=(const friendqunList_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friendqunList_ask& default_instance();

  void Swap(friendqunList_ask* other);

  // implements Message ----------------------------------------------

  friendqunList_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friendqunList_ask& from);
  void MergeFrom(const friendqunList_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes mobilePhone = 1;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 1;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 2;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 2;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes is_normal = 4;
  inline bool has_is_normal() const;
  inline void clear_is_normal();
  static const int kIsNormalFieldNumber = 4;
  inline const ::std::string& is_normal() const;
  inline void set_is_normal(const ::std::string& value);
  inline void set_is_normal(const char* value);
  inline void set_is_normal(const void* value, size_t size);
  inline ::std::string* mutable_is_normal();
  inline ::std::string* release_is_normal();
  inline void set_allocated_is_normal(::std::string* is_normal);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.friendqunList_ask)
 private:
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_is_normal();
  inline void clear_has_is_normal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::common::common_ask_header* ask_header_;
  ::std::string* is_normal_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static friendqunList_ask* default_instance_;
};
// -------------------------------------------------------------------

class friendqunList_ans : public ::google::protobuf::Message {
 public:
  friendqunList_ans();
  virtual ~friendqunList_ans();

  friendqunList_ans(const friendqunList_ans& from);

  inline friendqunList_ans& operator=(const friendqunList_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friendqunList_ans& default_instance();

  void Swap(friendqunList_ans* other);

  // implements Message ----------------------------------------------

  friendqunList_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friendqunList_ans& from);
  void MergeFrom(const friendqunList_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const void* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional bytes nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes avatar = 4;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // repeated .AFP_main_frame.friend_info friend_list = 5;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 5;
  inline const ::AFP_main_frame::friend_info& friend_list(int index) const;
  inline ::AFP_main_frame::friend_info* mutable_friend_list(int index);
  inline ::AFP_main_frame::friend_info* add_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::friend_info >&
      friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::friend_info >*
      mutable_friend_list();

  // repeated .AFP_main_frame.group_info group_list = 6;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 6;
  inline const ::AFP_main_frame::group_info& group_list(int index) const;
  inline ::AFP_main_frame::group_info* mutable_group_list(int index);
  inline ::AFP_main_frame::group_info* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::group_info >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::group_info >*
      mutable_group_list();

  // optional .common.errorinfo error = 7;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 7;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.friendqunList_ans)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* uid_;
  ::std::string* nickname_;
  ::std::string* avatar_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::friend_info > friend_list_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::group_info > group_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static friendqunList_ans* default_instance_;
};
// -------------------------------------------------------------------

class msg_info : public ::google::protobuf::Message {
 public:
  msg_info();
  virtual ~msg_info();

  msg_info(const msg_info& from);

  inline msg_info& operator=(const msg_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_info& default_instance();

  void Swap(msg_info* other);

  // implements Message ----------------------------------------------

  msg_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_info& from);
  void MergeFrom(const msg_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline const ::std::string& msg_id() const;
  inline void set_msg_id(const ::std::string& value);
  inline void set_msg_id(const char* value);
  inline void set_msg_id(const void* value, size_t size);
  inline ::std::string* mutable_msg_id();
  inline ::std::string* release_msg_id();
  inline void set_allocated_msg_id(::std::string* msg_id);

  // optional bytes nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes avatar_url = 3;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const void* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // optional bytes updatetime = 4;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 4;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const void* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // optional bytes send_id = 5;
  inline bool has_send_id() const;
  inline void clear_send_id();
  static const int kSendIdFieldNumber = 5;
  inline const ::std::string& send_id() const;
  inline void set_send_id(const ::std::string& value);
  inline void set_send_id(const char* value);
  inline void set_send_id(const void* value, size_t size);
  inline ::std::string* mutable_send_id();
  inline ::std::string* release_send_id();
  inline void set_allocated_send_id(::std::string* send_id);

  // optional bytes recv_id = 6;
  inline bool has_recv_id() const;
  inline void clear_recv_id();
  static const int kRecvIdFieldNumber = 6;
  inline const ::std::string& recv_id() const;
  inline void set_recv_id(const ::std::string& value);
  inline void set_recv_id(const char* value);
  inline void set_recv_id(const void* value, size_t size);
  inline ::std::string* mutable_recv_id();
  inline ::std::string* release_recv_id();
  inline void set_allocated_recv_id(::std::string* recv_id);

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes msg = 8;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 8;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes msg_url = 9;
  inline bool has_msg_url() const;
  inline void clear_msg_url();
  static const int kMsgUrlFieldNumber = 9;
  inline const ::std::string& msg_url() const;
  inline void set_msg_url(const ::std::string& value);
  inline void set_msg_url(const char* value);
  inline void set_msg_url(const void* value, size_t size);
  inline ::std::string* mutable_msg_url();
  inline ::std::string* release_msg_url();
  inline void set_allocated_msg_url(::std::string* msg_url);

  // optional int32 voice_len = 10;
  inline bool has_voice_len() const;
  inline void clear_voice_len();
  static const int kVoiceLenFieldNumber = 10;
  inline ::google::protobuf::int32 voice_len() const;
  inline void set_voice_len(::google::protobuf::int32 value);

  // optional float longitude = 11;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 11;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latitude = 12;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 12;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float thumb_width = 13;
  inline bool has_thumb_width() const;
  inline void clear_thumb_width();
  static const int kThumbWidthFieldNumber = 13;
  inline float thumb_width() const;
  inline void set_thumb_width(float value);

  // optional float thumb_hight = 14;
  inline bool has_thumb_hight() const;
  inline void clear_thumb_hight();
  static const int kThumbHightFieldNumber = 14;
  inline float thumb_hight() const;
  inline void set_thumb_hight(float value);

  // optional bytes uid = 15;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 15;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const void* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional bytes json_body = 16;
  inline bool has_json_body() const;
  inline void clear_json_body();
  static const int kJsonBodyFieldNumber = 16;
  inline const ::std::string& json_body() const;
  inline void set_json_body(const ::std::string& value);
  inline void set_json_body(const char* value);
  inline void set_json_body(const void* value, size_t size);
  inline ::std::string* mutable_json_body();
  inline ::std::string* release_json_body();
  inline void set_allocated_json_body(::std::string* json_body);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.msg_info)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_send_id();
  inline void clear_has_send_id();
  inline void set_has_recv_id();
  inline void clear_has_recv_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_msg_url();
  inline void clear_has_msg_url();
  inline void set_has_voice_len();
  inline void clear_has_voice_len();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_thumb_width();
  inline void clear_has_thumb_width();
  inline void set_has_thumb_hight();
  inline void clear_has_thumb_hight();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_json_body();
  inline void clear_has_json_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_id_;
  ::std::string* nickname_;
  ::std::string* avatar_url_;
  ::std::string* updatetime_;
  ::std::string* send_id_;
  ::std::string* recv_id_;
  ::std::string* msg_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 voice_len_;
  ::std::string* msg_url_;
  float longitude_;
  float latitude_;
  float thumb_width_;
  float thumb_hight_;
  ::std::string* uid_;
  ::std::string* json_body_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static msg_info* default_instance_;
};
// -------------------------------------------------------------------

class single_msg_ask : public ::google::protobuf::Message {
 public:
  single_msg_ask();
  virtual ~single_msg_ask();

  single_msg_ask(const single_msg_ask& from);

  inline single_msg_ask& operator=(const single_msg_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const single_msg_ask& default_instance();

  void Swap(single_msg_ask* other);

  // implements Message ----------------------------------------------

  single_msg_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const single_msg_ask& from);
  void MergeFrom(const single_msg_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes u_id = 2;
  inline bool has_u_id() const;
  inline void clear_u_id();
  static const int kUIdFieldNumber = 2;
  inline const ::std::string& u_id() const;
  inline void set_u_id(const ::std::string& value);
  inline void set_u_id(const char* value);
  inline void set_u_id(const void* value, size_t size);
  inline ::std::string* mutable_u_id();
  inline ::std::string* release_u_id();
  inline void set_allocated_u_id(::std::string* u_id);

  // optional bytes friend_id = 3;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 3;
  inline const ::std::string& friend_id() const;
  inline void set_friend_id(const ::std::string& value);
  inline void set_friend_id(const char* value);
  inline void set_friend_id(const void* value, size_t size);
  inline ::std::string* mutable_friend_id();
  inline ::std::string* release_friend_id();
  inline void set_allocated_friend_id(::std::string* friend_id);

  // optional bytes friend_uid = 4;
  inline bool has_friend_uid() const;
  inline void clear_friend_uid();
  static const int kFriendUidFieldNumber = 4;
  inline const ::std::string& friend_uid() const;
  inline void set_friend_uid(const ::std::string& value);
  inline void set_friend_uid(const char* value);
  inline void set_friend_uid(const void* value, size_t size);
  inline ::std::string* mutable_friend_uid();
  inline ::std::string* release_friend_uid();
  inline void set_allocated_friend_uid(::std::string* friend_uid);

  // optional bytes start_time = 5;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional .common.common_ask_header ask_header = 7;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 7;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.single_msg_ask)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_u_id();
  inline void clear_has_u_id();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_friend_uid();
  inline void clear_has_friend_uid();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* u_id_;
  ::std::string* friend_id_;
  ::std::string* friend_uid_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static single_msg_ask* default_instance_;
};
// -------------------------------------------------------------------

class single_msg_ans : public ::google::protobuf::Message {
 public:
  single_msg_ans();
  virtual ~single_msg_ans();

  single_msg_ans(const single_msg_ans& from);

  inline single_msg_ans& operator=(const single_msg_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const single_msg_ans& default_instance();

  void Swap(single_msg_ans* other);

  // implements Message ----------------------------------------------

  single_msg_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const single_msg_ans& from);
  void MergeFrom(const single_msg_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes u_id = 2;
  inline bool has_u_id() const;
  inline void clear_u_id();
  static const int kUIdFieldNumber = 2;
  inline const ::std::string& u_id() const;
  inline void set_u_id(const ::std::string& value);
  inline void set_u_id(const char* value);
  inline void set_u_id(const void* value, size_t size);
  inline ::std::string* mutable_u_id();
  inline ::std::string* release_u_id();
  inline void set_allocated_u_id(::std::string* u_id);

  // optional bytes nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes friend_id = 4;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 4;
  inline const ::std::string& friend_id() const;
  inline void set_friend_id(const ::std::string& value);
  inline void set_friend_id(const char* value);
  inline void set_friend_id(const void* value, size_t size);
  inline ::std::string* mutable_friend_id();
  inline ::std::string* release_friend_id();
  inline void set_allocated_friend_id(::std::string* friend_id);

  // optional bytes friend_uid = 5;
  inline bool has_friend_uid() const;
  inline void clear_friend_uid();
  static const int kFriendUidFieldNumber = 5;
  inline const ::std::string& friend_uid() const;
  inline void set_friend_uid(const ::std::string& value);
  inline void set_friend_uid(const char* value);
  inline void set_friend_uid(const void* value, size_t size);
  inline ::std::string* mutable_friend_uid();
  inline ::std::string* release_friend_uid();
  inline void set_allocated_friend_uid(::std::string* friend_uid);

  // optional bytes start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 7;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // repeated .AFP_main_frame.msg_info msg_list = 8;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 8;
  inline const ::AFP_main_frame::msg_info& msg_list(int index) const;
  inline ::AFP_main_frame::msg_info* mutable_msg_list(int index);
  inline ::AFP_main_frame::msg_info* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >*
      mutable_msg_list();

  // optional .common.errorinfo error = 9;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 9;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.single_msg_ans)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_u_id();
  inline void clear_has_u_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_friend_uid();
  inline void clear_has_friend_uid();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* u_id_;
  ::std::string* nickname_;
  ::std::string* friend_id_;
  ::std::string* friend_uid_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info > msg_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static single_msg_ans* default_instance_;
};
// -------------------------------------------------------------------

class group_msg_ask : public ::google::protobuf::Message {
 public:
  group_msg_ask();
  virtual ~group_msg_ask();

  group_msg_ask(const group_msg_ask& from);

  inline group_msg_ask& operator=(const group_msg_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_msg_ask& default_instance();

  void Swap(group_msg_ask* other);

  // implements Message ----------------------------------------------

  group_msg_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const group_msg_ask& from);
  void MergeFrom(const group_msg_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes u_id = 2;
  inline bool has_u_id() const;
  inline void clear_u_id();
  static const int kUIdFieldNumber = 2;
  inline const ::std::string& u_id() const;
  inline void set_u_id(const ::std::string& value);
  inline void set_u_id(const char* value);
  inline void set_u_id(const void* value, size_t size);
  inline ::std::string* mutable_u_id();
  inline ::std::string* release_u_id();
  inline void set_allocated_u_id(::std::string* u_id);

  // optional bytes group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const void* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  inline void set_allocated_group_id(::std::string* group_id);

  // optional bytes start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional .common.common_ask_header ask_header = 6;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 6;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.group_msg_ask)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_u_id();
  inline void clear_has_u_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* u_id_;
  ::std::string* group_id_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static group_msg_ask* default_instance_;
};
// -------------------------------------------------------------------

class group_msg_ans : public ::google::protobuf::Message {
 public:
  group_msg_ans();
  virtual ~group_msg_ans();

  group_msg_ans(const group_msg_ans& from);

  inline group_msg_ans& operator=(const group_msg_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_msg_ans& default_instance();

  void Swap(group_msg_ans* other);

  // implements Message ----------------------------------------------

  group_msg_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const group_msg_ans& from);
  void MergeFrom(const group_msg_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes u_id = 2;
  inline bool has_u_id() const;
  inline void clear_u_id();
  static const int kUIdFieldNumber = 2;
  inline const ::std::string& u_id() const;
  inline void set_u_id(const ::std::string& value);
  inline void set_u_id(const char* value);
  inline void set_u_id(const void* value, size_t size);
  inline ::std::string* mutable_u_id();
  inline ::std::string* release_u_id();
  inline void set_allocated_u_id(::std::string* u_id);

  // optional bytes group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const void* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  inline void set_allocated_group_id(::std::string* group_id);

  // repeated .AFP_main_frame.msg_info groupmsg_list = 4;
  inline int groupmsg_list_size() const;
  inline void clear_groupmsg_list();
  static const int kGroupmsgListFieldNumber = 4;
  inline const ::AFP_main_frame::msg_info& groupmsg_list(int index) const;
  inline ::AFP_main_frame::msg_info* mutable_groupmsg_list(int index);
  inline ::AFP_main_frame::msg_info* add_groupmsg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >&
      groupmsg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >*
      mutable_groupmsg_list();

  // optional .common.errorinfo error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.group_msg_ans)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_u_id();
  inline void clear_has_u_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* u_id_;
  ::std::string* group_id_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info > groupmsg_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static group_msg_ans* default_instance_;
};
// -------------------------------------------------------------------

class usebasicinfo_ask : public ::google::protobuf::Message {
 public:
  usebasicinfo_ask();
  virtual ~usebasicinfo_ask();

  usebasicinfo_ask(const usebasicinfo_ask& from);

  inline usebasicinfo_ask& operator=(const usebasicinfo_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const usebasicinfo_ask& default_instance();

  void Swap(usebasicinfo_ask* other);

  // implements Message ----------------------------------------------

  usebasicinfo_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const usebasicinfo_ask& from);
  void MergeFrom(const usebasicinfo_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.usebasicinfo_ask)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static usebasicinfo_ask* default_instance_;
};
// -------------------------------------------------------------------

class usebasicinfo_ans : public ::google::protobuf::Message {
 public:
  usebasicinfo_ans();
  virtual ~usebasicinfo_ans();

  usebasicinfo_ans(const usebasicinfo_ans& from);

  inline usebasicinfo_ans& operator=(const usebasicinfo_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const usebasicinfo_ans& default_instance();

  void Swap(usebasicinfo_ans* other);

  // implements Message ----------------------------------------------

  usebasicinfo_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const usebasicinfo_ans& from);
  void MergeFrom(const usebasicinfo_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes mobilePhone = 2;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 3;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 3;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes avatar_url = 4;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 4;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const void* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // optional .common.sex sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::common::sex sex() const;
  inline void set_sex(::common::sex value);

  // optional int32 is_overdue = 6;
  inline bool has_is_overdue() const;
  inline void clear_is_overdue();
  static const int kIsOverdueFieldNumber = 6;
  inline ::google::protobuf::int32 is_overdue() const;
  inline void set_is_overdue(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 7;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 7;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.usebasicinfo_ans)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_is_overdue();
  inline void clear_has_is_overdue();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::std::string* avatar_url_;
  int sex_;
  ::google::protobuf::int32 is_overdue_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static usebasicinfo_ans* default_instance_;
};
// -------------------------------------------------------------------

class afp_detail_ask : public ::google::protobuf::Message {
 public:
  afp_detail_ask();
  virtual ~afp_detail_ask();

  afp_detail_ask(const afp_detail_ask& from);

  inline afp_detail_ask& operator=(const afp_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const afp_detail_ask& default_instance();

  void Swap(afp_detail_ask* other);

  // implements Message ----------------------------------------------

  afp_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const afp_detail_ask& from);
  void MergeFrom(const afp_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional bytes mobilePhone = 3;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 4;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 4;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional int32 model_result = 5;
  inline bool has_model_result() const;
  inline void clear_model_result();
  static const int kModelResultFieldNumber = 5;
  inline ::google::protobuf::int32 model_result() const;
  inline void set_model_result(::google::protobuf::int32 value);

  // optional int32 page_num = 6;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 6;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 7;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 7;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 8;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 8;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.afp_detail_ask)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_model_result();
  inline void clear_has_model_result();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::google::protobuf::int32 model_result_;
  ::google::protobuf::int32 page_num_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static afp_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class afp_detail : public ::google::protobuf::Message {
 public:
  afp_detail();
  virtual ~afp_detail();

  afp_detail(const afp_detail& from);

  inline afp_detail& operator=(const afp_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const afp_detail& default_instance();

  void Swap(afp_detail* other);

  // implements Message ----------------------------------------------

  afp_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const afp_detail& from);
  void MergeFrom(const afp_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobilePhone = 2;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 3;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 3;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes result_time = 4;
  inline bool has_result_time() const;
  inline void clear_result_time();
  static const int kResultTimeFieldNumber = 4;
  inline const ::std::string& result_time() const;
  inline void set_result_time(const ::std::string& value);
  inline void set_result_time(const char* value);
  inline void set_result_time(const void* value, size_t size);
  inline ::std::string* mutable_result_time();
  inline ::std::string* release_result_time();
  inline void set_allocated_result_time(::std::string* result_time);

  // optional bytes model_name = 5;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 5;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const void* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional int32 model_result = 6;
  inline bool has_model_result() const;
  inline void clear_model_result();
  static const int kModelResultFieldNumber = 6;
  inline ::google::protobuf::int32 model_result() const;
  inline void set_model_result(::google::protobuf::int32 value);

  // optional int32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes error_info = 8;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 8;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const void* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // optional bytes app_id = 9;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 9;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const void* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional bytes request_json = 10;
  inline bool has_request_json() const;
  inline void clear_request_json();
  static const int kRequestJsonFieldNumber = 10;
  inline const ::std::string& request_json() const;
  inline void set_request_json(const ::std::string& value);
  inline void set_request_json(const char* value);
  inline void set_request_json(const void* value, size_t size);
  inline ::std::string* mutable_request_json();
  inline ::std::string* release_request_json();
  inline void set_allocated_request_json(::std::string* request_json);

  // optional bytes result_json = 11;
  inline bool has_result_json() const;
  inline void clear_result_json();
  static const int kResultJsonFieldNumber = 11;
  inline const ::std::string& result_json() const;
  inline void set_result_json(const ::std::string& value);
  inline void set_result_json(const char* value);
  inline void set_result_json(const void* value, size_t size);
  inline ::std::string* mutable_result_json();
  inline ::std::string* release_result_json();
  inline void set_allocated_result_json(::std::string* result_json);

  // optional bytes version = 12;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 12;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.afp_detail)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_result_time();
  inline void clear_has_result_time();
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_model_result();
  inline void clear_has_model_result();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error_info();
  inline void clear_has_error_info();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_request_json();
  inline void clear_has_request_json();
  inline void set_has_result_json();
  inline void clear_has_result_json();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::std::string* result_time_;
  ::std::string* model_name_;
  ::google::protobuf::int32 model_result_;
  ::google::protobuf::int32 status_;
  ::std::string* error_info_;
  ::std::string* app_id_;
  ::std::string* request_json_;
  ::std::string* result_json_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static afp_detail* default_instance_;
};
// -------------------------------------------------------------------

class afp_detail_ans : public ::google::protobuf::Message {
 public:
  afp_detail_ans();
  virtual ~afp_detail_ans();

  afp_detail_ans(const afp_detail_ans& from);

  inline afp_detail_ans& operator=(const afp_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const afp_detail_ans& default_instance();

  void Swap(afp_detail_ans* other);

  // implements Message ----------------------------------------------

  afp_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const afp_detail_ans& from);
  void MergeFrom(const afp_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.afp_detail afp_detail_list = 1;
  inline int afp_detail_list_size() const;
  inline void clear_afp_detail_list();
  static const int kAfpDetailListFieldNumber = 1;
  inline const ::AFP_main_frame::afp_detail& afp_detail_list(int index) const;
  inline ::AFP_main_frame::afp_detail* mutable_afp_detail_list(int index);
  inline ::AFP_main_frame::afp_detail* add_afp_detail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_detail >&
      afp_detail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_detail >*
      mutable_afp_detail_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.afp_detail_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_detail > afp_detail_list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static afp_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class ccs_detail_ask : public ::google::protobuf::Message {
 public:
  ccs_detail_ask();
  virtual ~ccs_detail_ask();

  ccs_detail_ask(const ccs_detail_ask& from);

  inline ccs_detail_ask& operator=(const ccs_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ccs_detail_ask& default_instance();

  void Swap(ccs_detail_ask* other);

  // implements Message ----------------------------------------------

  ccs_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ccs_detail_ask& from);
  void MergeFrom(const ccs_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional bytes mobilePhone = 3;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 4;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 4;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 page_num = 6;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 6;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 7;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 7;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.ccs_detail_ask)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static ccs_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class ccs_detail : public ::google::protobuf::Message {
 public:
  ccs_detail();
  virtual ~ccs_detail();

  ccs_detail(const ccs_detail& from);

  inline ccs_detail& operator=(const ccs_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ccs_detail& default_instance();

  void Swap(ccs_detail* other);

  // implements Message ----------------------------------------------

  ccs_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ccs_detail& from);
  void MergeFrom(const ccs_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobilePhone = 2;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 3;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 3;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes result_time = 4;
  inline bool has_result_time() const;
  inline void clear_result_time();
  static const int kResultTimeFieldNumber = 4;
  inline const ::std::string& result_time() const;
  inline void set_result_time(const ::std::string& value);
  inline void set_result_time(const char* value);
  inline void set_result_time(const void* value, size_t size);
  inline ::std::string* mutable_result_time();
  inline ::std::string* release_result_time();
  inline void set_allocated_result_time(::std::string* result_time);

  // optional int32 user_type = 5;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 5;
  inline ::google::protobuf::int32 user_type() const;
  inline void set_user_type(::google::protobuf::int32 value);

  // optional int32 is_success = 6;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 6;
  inline ::google::protobuf::int32 is_success() const;
  inline void set_is_success(::google::protobuf::int32 value);

  // optional int32 cur_credit = 7;
  inline bool has_cur_credit() const;
  inline void clear_cur_credit();
  static const int kCurCreditFieldNumber = 7;
  inline ::google::protobuf::int32 cur_credit() const;
  inline void set_cur_credit(::google::protobuf::int32 value);

  // optional bytes sum_info = 8;
  inline bool has_sum_info() const;
  inline void clear_sum_info();
  static const int kSumInfoFieldNumber = 8;
  inline const ::std::string& sum_info() const;
  inline void set_sum_info(const ::std::string& value);
  inline void set_sum_info(const char* value);
  inline void set_sum_info(const void* value, size_t size);
  inline ::std::string* mutable_sum_info();
  inline ::std::string* release_sum_info();
  inline void set_allocated_sum_info(::std::string* sum_info);

  // optional bytes request_json = 9;
  inline bool has_request_json() const;
  inline void clear_request_json();
  static const int kRequestJsonFieldNumber = 9;
  inline const ::std::string& request_json() const;
  inline void set_request_json(const ::std::string& value);
  inline void set_request_json(const char* value);
  inline void set_request_json(const void* value, size_t size);
  inline ::std::string* mutable_request_json();
  inline ::std::string* release_request_json();
  inline void set_allocated_request_json(::std::string* request_json);

  // optional bytes result_json = 10;
  inline bool has_result_json() const;
  inline void clear_result_json();
  static const int kResultJsonFieldNumber = 10;
  inline const ::std::string& result_json() const;
  inline void set_result_json(const ::std::string& value);
  inline void set_result_json(const char* value);
  inline void set_result_json(const void* value, size_t size);
  inline ::std::string* mutable_result_json();
  inline ::std::string* release_result_json();
  inline void set_allocated_result_json(::std::string* result_json);

  // optional bytes version = 11;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 11;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.ccs_detail)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_result_time();
  inline void clear_has_result_time();
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_cur_credit();
  inline void clear_has_cur_credit();
  inline void set_has_sum_info();
  inline void clear_has_sum_info();
  inline void set_has_request_json();
  inline void clear_has_request_json();
  inline void set_has_result_json();
  inline void clear_has_result_json();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::std::string* result_time_;
  ::google::protobuf::int32 user_type_;
  ::google::protobuf::int32 is_success_;
  ::std::string* sum_info_;
  ::std::string* request_json_;
  ::std::string* result_json_;
  ::std::string* version_;
  ::google::protobuf::int32 cur_credit_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static ccs_detail* default_instance_;
};
// -------------------------------------------------------------------

class ccs_detail_ans : public ::google::protobuf::Message {
 public:
  ccs_detail_ans();
  virtual ~ccs_detail_ans();

  ccs_detail_ans(const ccs_detail_ans& from);

  inline ccs_detail_ans& operator=(const ccs_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ccs_detail_ans& default_instance();

  void Swap(ccs_detail_ans* other);

  // implements Message ----------------------------------------------

  ccs_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ccs_detail_ans& from);
  void MergeFrom(const ccs_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.ccs_detail ccs_detail_list = 1;
  inline int ccs_detail_list_size() const;
  inline void clear_ccs_detail_list();
  static const int kCcsDetailListFieldNumber = 1;
  inline const ::AFP_main_frame::ccs_detail& ccs_detail_list(int index) const;
  inline ::AFP_main_frame::ccs_detail* mutable_ccs_detail_list(int index);
  inline ::AFP_main_frame::ccs_detail* add_ccs_detail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::ccs_detail >&
      ccs_detail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::ccs_detail >*
      mutable_ccs_detail_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // optional int32 total_number = 3;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 3;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.ccs_detail_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::ccs_detail > ccs_detail_list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static ccs_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class weidanbao_detail_ask : public ::google::protobuf::Message {
 public:
  weidanbao_detail_ask();
  virtual ~weidanbao_detail_ask();

  weidanbao_detail_ask(const weidanbao_detail_ask& from);

  inline weidanbao_detail_ask& operator=(const weidanbao_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const weidanbao_detail_ask& default_instance();

  void Swap(weidanbao_detail_ask* other);

  // implements Message ----------------------------------------------

  weidanbao_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const weidanbao_detail_ask& from);
  void MergeFrom(const weidanbao_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional bytes mobilePhone = 3;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 4;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 4;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 page_num = 6;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 6;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 7;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 7;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.weidanbao_detail_ask)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static weidanbao_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class weidanbao_detail : public ::google::protobuf::Message {
 public:
  weidanbao_detail();
  virtual ~weidanbao_detail();

  weidanbao_detail(const weidanbao_detail& from);

  inline weidanbao_detail& operator=(const weidanbao_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const weidanbao_detail& default_instance();

  void Swap(weidanbao_detail* other);

  // implements Message ----------------------------------------------

  weidanbao_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const weidanbao_detail& from);
  void MergeFrom(const weidanbao_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobilePhone = 2;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 3;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 3;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const void* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // optional int32 is_success = 5;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 5;
  inline ::google::protobuf::int32 is_success() const;
  inline void set_is_success(::google::protobuf::int32 value);

  // optional int32 cur_credit = 6;
  inline bool has_cur_credit() const;
  inline void clear_cur_credit();
  static const int kCurCreditFieldNumber = 6;
  inline ::google::protobuf::int32 cur_credit() const;
  inline void set_cur_credit(::google::protobuf::int32 value);

  // optional bytes sum_info = 7;
  inline bool has_sum_info() const;
  inline void clear_sum_info();
  static const int kSumInfoFieldNumber = 7;
  inline const ::std::string& sum_info() const;
  inline void set_sum_info(const ::std::string& value);
  inline void set_sum_info(const char* value);
  inline void set_sum_info(const void* value, size_t size);
  inline ::std::string* mutable_sum_info();
  inline ::std::string* release_sum_info();
  inline void set_allocated_sum_info(::std::string* sum_info);

  // optional bytes request_json = 8;
  inline bool has_request_json() const;
  inline void clear_request_json();
  static const int kRequestJsonFieldNumber = 8;
  inline const ::std::string& request_json() const;
  inline void set_request_json(const ::std::string& value);
  inline void set_request_json(const char* value);
  inline void set_request_json(const void* value, size_t size);
  inline ::std::string* mutable_request_json();
  inline ::std::string* release_request_json();
  inline void set_allocated_request_json(::std::string* request_json);

  // optional bytes result_json = 9;
  inline bool has_result_json() const;
  inline void clear_result_json();
  static const int kResultJsonFieldNumber = 9;
  inline const ::std::string& result_json() const;
  inline void set_result_json(const ::std::string& value);
  inline void set_result_json(const char* value);
  inline void set_result_json(const void* value, size_t size);
  inline ::std::string* mutable_result_json();
  inline ::std::string* release_result_json();
  inline void set_allocated_result_json(::std::string* result_json);

  // optional bytes version = 10;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 10;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.weidanbao_detail)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_is_success();
  inline void clear_has_is_success();
  inline void set_has_cur_credit();
  inline void clear_has_cur_credit();
  inline void set_has_sum_info();
  inline void clear_has_sum_info();
  inline void set_has_request_json();
  inline void clear_has_request_json();
  inline void set_has_result_json();
  inline void clear_has_result_json();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::std::string* update_time_;
  ::google::protobuf::int32 is_success_;
  ::google::protobuf::int32 cur_credit_;
  ::std::string* sum_info_;
  ::std::string* request_json_;
  ::std::string* result_json_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static weidanbao_detail* default_instance_;
};
// -------------------------------------------------------------------

class weidanbao_detail_ans : public ::google::protobuf::Message {
 public:
  weidanbao_detail_ans();
  virtual ~weidanbao_detail_ans();

  weidanbao_detail_ans(const weidanbao_detail_ans& from);

  inline weidanbao_detail_ans& operator=(const weidanbao_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const weidanbao_detail_ans& default_instance();

  void Swap(weidanbao_detail_ans* other);

  // implements Message ----------------------------------------------

  weidanbao_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const weidanbao_detail_ans& from);
  void MergeFrom(const weidanbao_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.weidanbao_detail weidanbao_detail_list = 1;
  inline int weidanbao_detail_list_size() const;
  inline void clear_weidanbao_detail_list();
  static const int kWeidanbaoDetailListFieldNumber = 1;
  inline const ::AFP_main_frame::weidanbao_detail& weidanbao_detail_list(int index) const;
  inline ::AFP_main_frame::weidanbao_detail* mutable_weidanbao_detail_list(int index);
  inline ::AFP_main_frame::weidanbao_detail* add_weidanbao_detail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::weidanbao_detail >&
      weidanbao_detail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::weidanbao_detail >*
      mutable_weidanbao_detail_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // optional int32 total_number = 3;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 3;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.weidanbao_detail_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::weidanbao_detail > weidanbao_detail_list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static weidanbao_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class qiaoqiaoccs_detail_ask : public ::google::protobuf::Message {
 public:
  qiaoqiaoccs_detail_ask();
  virtual ~qiaoqiaoccs_detail_ask();

  qiaoqiaoccs_detail_ask(const qiaoqiaoccs_detail_ask& from);

  inline qiaoqiaoccs_detail_ask& operator=(const qiaoqiaoccs_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qiaoqiaoccs_detail_ask& default_instance();

  void Swap(qiaoqiaoccs_detail_ask* other);

  // implements Message ----------------------------------------------

  qiaoqiaoccs_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qiaoqiaoccs_detail_ask& from);
  void MergeFrom(const qiaoqiaoccs_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional bytes mobilePhone = 3;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 4;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 4;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 page_num = 6;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 6;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 7;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 7;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.qiaoqiaoccs_detail_ask)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static qiaoqiaoccs_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class qiaoqiaoccs_detail : public ::google::protobuf::Message {
 public:
  qiaoqiaoccs_detail();
  virtual ~qiaoqiaoccs_detail();

  qiaoqiaoccs_detail(const qiaoqiaoccs_detail& from);

  inline qiaoqiaoccs_detail& operator=(const qiaoqiaoccs_detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qiaoqiaoccs_detail& default_instance();

  void Swap(qiaoqiaoccs_detail* other);

  // implements Message ----------------------------------------------

  qiaoqiaoccs_detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qiaoqiaoccs_detail& from);
  void MergeFrom(const qiaoqiaoccs_detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobilePhone = 2;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 3;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 3;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional int32 cur_credit = 4;
  inline bool has_cur_credit() const;
  inline void clear_cur_credit();
  static const int kCurCreditFieldNumber = 4;
  inline ::google::protobuf::int32 cur_credit() const;
  inline void set_cur_credit(::google::protobuf::int32 value);

  // optional float friendship_credit = 5;
  inline bool has_friendship_credit() const;
  inline void clear_friendship_credit();
  static const int kFriendshipCreditFieldNumber = 5;
  inline float friendship_credit() const;
  inline void set_friendship_credit(float value);

  // optional float worth_credit = 6;
  inline bool has_worth_credit() const;
  inline void clear_worth_credit();
  static const int kWorthCreditFieldNumber = 6;
  inline float worth_credit() const;
  inline void set_worth_credit(float value);

  // optional float risk_credit = 7;
  inline bool has_risk_credit() const;
  inline void clear_risk_credit();
  static const int kRiskCreditFieldNumber = 7;
  inline float risk_credit() const;
  inline void set_risk_credit(float value);

  // optional bytes sum_info = 8;
  inline bool has_sum_info() const;
  inline void clear_sum_info();
  static const int kSumInfoFieldNumber = 8;
  inline const ::std::string& sum_info() const;
  inline void set_sum_info(const ::std::string& value);
  inline void set_sum_info(const char* value);
  inline void set_sum_info(const void* value, size_t size);
  inline ::std::string* mutable_sum_info();
  inline ::std::string* release_sum_info();
  inline void set_allocated_sum_info(::std::string* sum_info);

  // optional bytes version = 9;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 9;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.qiaoqiaoccs_detail)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_cur_credit();
  inline void clear_has_cur_credit();
  inline void set_has_friendship_credit();
  inline void clear_has_friendship_credit();
  inline void set_has_worth_credit();
  inline void clear_has_worth_credit();
  inline void set_has_risk_credit();
  inline void clear_has_risk_credit();
  inline void set_has_sum_info();
  inline void clear_has_sum_info();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::google::protobuf::int32 cur_credit_;
  float friendship_credit_;
  float worth_credit_;
  float risk_credit_;
  ::std::string* sum_info_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static qiaoqiaoccs_detail* default_instance_;
};
// -------------------------------------------------------------------

class qiaoqiaoccs_detail_ans : public ::google::protobuf::Message {
 public:
  qiaoqiaoccs_detail_ans();
  virtual ~qiaoqiaoccs_detail_ans();

  qiaoqiaoccs_detail_ans(const qiaoqiaoccs_detail_ans& from);

  inline qiaoqiaoccs_detail_ans& operator=(const qiaoqiaoccs_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qiaoqiaoccs_detail_ans& default_instance();

  void Swap(qiaoqiaoccs_detail_ans* other);

  // implements Message ----------------------------------------------

  qiaoqiaoccs_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qiaoqiaoccs_detail_ans& from);
  void MergeFrom(const qiaoqiaoccs_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFP_main_frame.qiaoqiaoccs_detail qiaoqiaoccs_detail_list = 1;
  inline int qiaoqiaoccs_detail_list_size() const;
  inline void clear_qiaoqiaoccs_detail_list();
  static const int kQiaoqiaoccsDetailListFieldNumber = 1;
  inline const ::AFP_main_frame::qiaoqiaoccs_detail& qiaoqiaoccs_detail_list(int index) const;
  inline ::AFP_main_frame::qiaoqiaoccs_detail* mutable_qiaoqiaoccs_detail_list(int index);
  inline ::AFP_main_frame::qiaoqiaoccs_detail* add_qiaoqiaoccs_detail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiaoccs_detail >&
      qiaoqiaoccs_detail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiaoccs_detail >*
      mutable_qiaoqiaoccs_detail_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // optional int32 total_number = 3;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 3;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.qiaoqiaoccs_detail_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiaoccs_detail > qiaoqiaoccs_detail_list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static qiaoqiaoccs_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_request_monitor_ask : public ::google::protobuf::Message {
 public:
  credit_request_monitor_ask();
  virtual ~credit_request_monitor_ask();

  credit_request_monitor_ask(const credit_request_monitor_ask& from);

  inline credit_request_monitor_ask& operator=(const credit_request_monitor_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_request_monitor_ask& default_instance();

  void Swap(credit_request_monitor_ask* other);

  // implements Message ----------------------------------------------

  credit_request_monitor_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_request_monitor_ask& from);
  void MergeFrom(const credit_request_monitor_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 handle_type = 1;
  inline bool has_handle_type() const;
  inline void clear_handle_type();
  static const int kHandleTypeFieldNumber = 1;
  inline ::google::protobuf::int32 handle_type() const;
  inline void set_handle_type(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_request_monitor_ask)
 private:
  inline void set_has_handle_type();
  inline void clear_has_handle_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 handle_type_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_request_monitor_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_request_monitor_ans : public ::google::protobuf::Message {
 public:
  credit_request_monitor_ans();
  virtual ~credit_request_monitor_ans();

  credit_request_monitor_ans(const credit_request_monitor_ans& from);

  inline credit_request_monitor_ans& operator=(const credit_request_monitor_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_request_monitor_ans& default_instance();

  void Swap(credit_request_monitor_ans* other);

  // implements Message ----------------------------------------------

  credit_request_monitor_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_request_monitor_ans& from);
  void MergeFrom(const credit_request_monitor_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const void* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // optional int32 handle_type = 3;
  inline bool has_handle_type() const;
  inline void clear_handle_type();
  static const int kHandleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 handle_type() const;
  inline void set_handle_type(::google::protobuf::int32 value);

  // optional bytes json = 4;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 4;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // optional .common.errorinfo error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_request_monitor_ans)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_handle_type();
  inline void clear_has_handle_type();
  inline void set_has_json();
  inline void clear_has_json();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* update_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 handle_type_;
  ::std::string* json_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_request_monitor_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_response_monitor_ask : public ::google::protobuf::Message {
 public:
  credit_response_monitor_ask();
  virtual ~credit_response_monitor_ask();

  credit_response_monitor_ask(const credit_response_monitor_ask& from);

  inline credit_response_monitor_ask& operator=(const credit_response_monitor_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_response_monitor_ask& default_instance();

  void Swap(credit_response_monitor_ask* other);

  // implements Message ----------------------------------------------

  credit_response_monitor_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_response_monitor_ask& from);
  void MergeFrom(const credit_response_monitor_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 handle_type = 1;
  inline bool has_handle_type() const;
  inline void clear_handle_type();
  static const int kHandleTypeFieldNumber = 1;
  inline ::google::protobuf::int32 handle_type() const;
  inline void set_handle_type(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_response_monitor_ask)
 private:
  inline void set_has_handle_type();
  inline void clear_has_handle_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 handle_type_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_response_monitor_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_response_monitor_ans : public ::google::protobuf::Message {
 public:
  credit_response_monitor_ans();
  virtual ~credit_response_monitor_ans();

  credit_response_monitor_ans(const credit_response_monitor_ans& from);

  inline credit_response_monitor_ans& operator=(const credit_response_monitor_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_response_monitor_ans& default_instance();

  void Swap(credit_response_monitor_ans* other);

  // implements Message ----------------------------------------------

  credit_response_monitor_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_response_monitor_ans& from);
  void MergeFrom(const credit_response_monitor_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes inset_time = 2;
  inline bool has_inset_time() const;
  inline void clear_inset_time();
  static const int kInsetTimeFieldNumber = 2;
  inline const ::std::string& inset_time() const;
  inline void set_inset_time(const ::std::string& value);
  inline void set_inset_time(const char* value);
  inline void set_inset_time(const void* value, size_t size);
  inline ::std::string* mutable_inset_time();
  inline ::std::string* release_inset_time();
  inline void set_allocated_inset_time(::std::string* inset_time);

  // optional bytes json = 3;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 3;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // optional .common.errorinfo error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.credit_response_monitor_ans)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_inset_time();
  inline void clear_has_inset_time();
  inline void set_has_json();
  inline void clear_has_json();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* inset_time_;
  ::std::string* json_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_response_monitor_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_verification_history_ask : public ::google::protobuf::Message {
 public:
  user_verification_history_ask();
  virtual ~user_verification_history_ask();

  user_verification_history_ask(const user_verification_history_ask& from);

  inline user_verification_history_ask& operator=(const user_verification_history_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_verification_history_ask& default_instance();

  void Swap(user_verification_history_ask* other);

  // implements Message ----------------------------------------------

  user_verification_history_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_verification_history_ask& from);
  void MergeFrom(const user_verification_history_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .QDP_basic_info.user_basic_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::QDP_basic_info::user_basic_info& info() const;
  inline ::QDP_basic_info::user_basic_info* mutable_info();
  inline ::QDP_basic_info::user_basic_info* release_info();
  inline void set_allocated_info(::QDP_basic_info::user_basic_info* info);

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_verification_history_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::QDP_basic_info::user_basic_info* info_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_verification_history_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_verification_history_ans : public ::google::protobuf::Message {
 public:
  user_verification_history_ans();
  virtual ~user_verification_history_ans();

  user_verification_history_ans(const user_verification_history_ans& from);

  inline user_verification_history_ans& operator=(const user_verification_history_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_verification_history_ans& default_instance();

  void Swap(user_verification_history_ans* other);

  // implements Message ----------------------------------------------

  user_verification_history_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_verification_history_ans& from);
  void MergeFrom(const user_verification_history_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // repeated .AFP_main_frame.function_verification_out fucver_out = 2;
  inline int fucver_out_size() const;
  inline void clear_fucver_out();
  static const int kFucverOutFieldNumber = 2;
  inline const ::AFP_main_frame::function_verification_out& fucver_out(int index) const;
  inline ::AFP_main_frame::function_verification_out* mutable_fucver_out(int index);
  inline ::AFP_main_frame::function_verification_out* add_fucver_out();
  inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >&
      fucver_out() const;
  inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >*
      mutable_fucver_out();

  // @@protoc_insertion_point(class_scope:AFP_main_frame.user_verification_history_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out > fucver_out_;
  friend void  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static user_verification_history_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// interface_info_ask

// optional bytes json_ask = 1;
inline bool interface_info_ask::has_json_ask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interface_info_ask::set_has_json_ask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interface_info_ask::clear_has_json_ask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interface_info_ask::clear_json_ask() {
  if (json_ask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ask_->clear();
  }
  clear_has_json_ask();
}
inline const ::std::string& interface_info_ask::json_ask() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.interface_info_ask.json_ask)
  return *json_ask_;
}
inline void interface_info_ask::set_json_ask(const ::std::string& value) {
  set_has_json_ask();
  if (json_ask_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ask_ = new ::std::string;
  }
  json_ask_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.interface_info_ask.json_ask)
}
inline void interface_info_ask::set_json_ask(const char* value) {
  set_has_json_ask();
  if (json_ask_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ask_ = new ::std::string;
  }
  json_ask_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.interface_info_ask.json_ask)
}
inline void interface_info_ask::set_json_ask(const void* value, size_t size) {
  set_has_json_ask();
  if (json_ask_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ask_ = new ::std::string;
  }
  json_ask_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.interface_info_ask.json_ask)
}
inline ::std::string* interface_info_ask::mutable_json_ask() {
  set_has_json_ask();
  if (json_ask_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ask_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.interface_info_ask.json_ask)
  return json_ask_;
}
inline ::std::string* interface_info_ask::release_json_ask() {
  clear_has_json_ask();
  if (json_ask_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_ask_;
    json_ask_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void interface_info_ask::set_allocated_json_ask(::std::string* json_ask) {
  if (json_ask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ask_;
  }
  if (json_ask) {
    set_has_json_ask();
    json_ask_ = json_ask;
  } else {
    clear_has_json_ask();
    json_ask_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.interface_info_ask.json_ask)
}

// optional .common.common_ask_header ask_header = 2;
inline bool interface_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interface_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interface_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interface_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& interface_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.interface_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* interface_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.interface_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* interface_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void interface_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.interface_info_ask.ask_header)
}

// -------------------------------------------------------------------

// interface_info_ans

// optional bytes json_ans = 1;
inline bool interface_info_ans::has_json_ans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interface_info_ans::set_has_json_ans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interface_info_ans::clear_has_json_ans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interface_info_ans::clear_json_ans() {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_->clear();
  }
  clear_has_json_ans();
}
inline const ::std::string& interface_info_ans::json_ans() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.interface_info_ans.json_ans)
  return *json_ans_;
}
inline void interface_info_ans::set_json_ans(const ::std::string& value) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.interface_info_ans.json_ans)
}
inline void interface_info_ans::set_json_ans(const char* value) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.interface_info_ans.json_ans)
}
inline void interface_info_ans::set_json_ans(const void* value, size_t size) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.interface_info_ans.json_ans)
}
inline ::std::string* interface_info_ans::mutable_json_ans() {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.interface_info_ans.json_ans)
  return json_ans_;
}
inline ::std::string* interface_info_ans::release_json_ans() {
  clear_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_ans_;
    json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void interface_info_ans::set_allocated_json_ans(::std::string* json_ans) {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ans_;
  }
  if (json_ans) {
    set_has_json_ans();
    json_ans_ = json_ans;
  } else {
    clear_has_json_ans();
    json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.interface_info_ans.json_ans)
}

// optional .common.errorinfo error = 2;
inline bool interface_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interface_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interface_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interface_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& interface_info_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.interface_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* interface_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.interface_info_ans.error)
  return error_;
}
inline ::common::errorinfo* interface_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void interface_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.interface_info_ans.error)
}

// -------------------------------------------------------------------

// emergency_contact

// optional bytes appellation = 1;
inline bool emergency_contact::has_appellation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void emergency_contact::set_has_appellation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void emergency_contact::clear_has_appellation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void emergency_contact::clear_appellation() {
  if (appellation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appellation_->clear();
  }
  clear_has_appellation();
}
inline const ::std::string& emergency_contact::appellation() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.emergency_contact.appellation)
  return *appellation_;
}
inline void emergency_contact::set_appellation(const ::std::string& value) {
  set_has_appellation();
  if (appellation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appellation_ = new ::std::string;
  }
  appellation_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.emergency_contact.appellation)
}
inline void emergency_contact::set_appellation(const char* value) {
  set_has_appellation();
  if (appellation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appellation_ = new ::std::string;
  }
  appellation_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.emergency_contact.appellation)
}
inline void emergency_contact::set_appellation(const void* value, size_t size) {
  set_has_appellation();
  if (appellation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appellation_ = new ::std::string;
  }
  appellation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.emergency_contact.appellation)
}
inline ::std::string* emergency_contact::mutable_appellation() {
  set_has_appellation();
  if (appellation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appellation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.emergency_contact.appellation)
  return appellation_;
}
inline ::std::string* emergency_contact::release_appellation() {
  clear_has_appellation();
  if (appellation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appellation_;
    appellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void emergency_contact::set_allocated_appellation(::std::string* appellation) {
  if (appellation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appellation_;
  }
  if (appellation) {
    set_has_appellation();
    appellation_ = appellation;
  } else {
    clear_has_appellation();
    appellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.emergency_contact.appellation)
}

// optional bytes kin_name = 2;
inline bool emergency_contact::has_kin_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void emergency_contact::set_has_kin_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void emergency_contact::clear_has_kin_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void emergency_contact::clear_kin_name() {
  if (kin_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_name_->clear();
  }
  clear_has_kin_name();
}
inline const ::std::string& emergency_contact::kin_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.emergency_contact.kin_name)
  return *kin_name_;
}
inline void emergency_contact::set_kin_name(const ::std::string& value) {
  set_has_kin_name();
  if (kin_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_name_ = new ::std::string;
  }
  kin_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.emergency_contact.kin_name)
}
inline void emergency_contact::set_kin_name(const char* value) {
  set_has_kin_name();
  if (kin_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_name_ = new ::std::string;
  }
  kin_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.emergency_contact.kin_name)
}
inline void emergency_contact::set_kin_name(const void* value, size_t size) {
  set_has_kin_name();
  if (kin_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_name_ = new ::std::string;
  }
  kin_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.emergency_contact.kin_name)
}
inline ::std::string* emergency_contact::mutable_kin_name() {
  set_has_kin_name();
  if (kin_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.emergency_contact.kin_name)
  return kin_name_;
}
inline ::std::string* emergency_contact::release_kin_name() {
  clear_has_kin_name();
  if (kin_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kin_name_;
    kin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void emergency_contact::set_allocated_kin_name(::std::string* kin_name) {
  if (kin_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kin_name_;
  }
  if (kin_name) {
    set_has_kin_name();
    kin_name_ = kin_name;
  } else {
    clear_has_kin_name();
    kin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.emergency_contact.kin_name)
}

// optional bytes kin_phone = 3;
inline bool emergency_contact::has_kin_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void emergency_contact::set_has_kin_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void emergency_contact::clear_has_kin_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void emergency_contact::clear_kin_phone() {
  if (kin_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_phone_->clear();
  }
  clear_has_kin_phone();
}
inline const ::std::string& emergency_contact::kin_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.emergency_contact.kin_phone)
  return *kin_phone_;
}
inline void emergency_contact::set_kin_phone(const ::std::string& value) {
  set_has_kin_phone();
  if (kin_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_phone_ = new ::std::string;
  }
  kin_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.emergency_contact.kin_phone)
}
inline void emergency_contact::set_kin_phone(const char* value) {
  set_has_kin_phone();
  if (kin_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_phone_ = new ::std::string;
  }
  kin_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.emergency_contact.kin_phone)
}
inline void emergency_contact::set_kin_phone(const void* value, size_t size) {
  set_has_kin_phone();
  if (kin_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_phone_ = new ::std::string;
  }
  kin_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.emergency_contact.kin_phone)
}
inline ::std::string* emergency_contact::mutable_kin_phone() {
  set_has_kin_phone();
  if (kin_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kin_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.emergency_contact.kin_phone)
  return kin_phone_;
}
inline ::std::string* emergency_contact::release_kin_phone() {
  clear_has_kin_phone();
  if (kin_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kin_phone_;
    kin_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void emergency_contact::set_allocated_kin_phone(::std::string* kin_phone) {
  if (kin_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kin_phone_;
  }
  if (kin_phone) {
    set_has_kin_phone();
    kin_phone_ = kin_phone;
  } else {
    clear_has_kin_phone();
    kin_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.emergency_contact.kin_phone)
}

// -------------------------------------------------------------------

// blacklist_user_info

// optional .common.user_info user_info = 1;
inline bool blacklist_user_info::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_user_info::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_user_info::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_user_info::clear_user_info() {
  if (user_info_ != NULL) user_info_->::common::user_info::Clear();
  clear_has_user_info();
}
inline const ::common::user_info& blacklist_user_info::user_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::common::user_info* blacklist_user_info::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::common::user_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.user_info)
  return user_info_;
}
inline ::common::user_info* blacklist_user_info::release_user_info() {
  clear_has_user_info();
  ::common::user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void blacklist_user_info::set_allocated_user_info(::common::user_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.user_info)
}

// optional float loan_total = 2;
inline bool blacklist_user_info::has_loan_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_user_info::set_has_loan_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_user_info::clear_has_loan_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_user_info::clear_loan_total() {
  loan_total_ = 0;
  clear_has_loan_total();
}
inline float blacklist_user_info::loan_total() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.loan_total)
  return loan_total_;
}
inline void blacklist_user_info::set_loan_total(float value) {
  set_has_loan_total();
  loan_total_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.loan_total)
}

// optional int32 loan_count = 3;
inline bool blacklist_user_info::has_loan_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_user_info::set_has_loan_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_user_info::clear_has_loan_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_user_info::clear_loan_count() {
  loan_count_ = 0;
  clear_has_loan_count();
}
inline ::google::protobuf::int32 blacklist_user_info::loan_count() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.loan_count)
  return loan_count_;
}
inline void blacklist_user_info::set_loan_count(::google::protobuf::int32 value) {
  set_has_loan_count();
  loan_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.loan_count)
}

// optional float also_total = 4;
inline bool blacklist_user_info::has_also_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blacklist_user_info::set_has_also_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blacklist_user_info::clear_has_also_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blacklist_user_info::clear_also_total() {
  also_total_ = 0;
  clear_has_also_total();
}
inline float blacklist_user_info::also_total() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.also_total)
  return also_total_;
}
inline void blacklist_user_info::set_also_total(float value) {
  set_has_also_total();
  also_total_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.also_total)
}

// optional int32 overdue_count = 5;
inline bool blacklist_user_info::has_overdue_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blacklist_user_info::set_has_overdue_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blacklist_user_info::clear_has_overdue_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blacklist_user_info::clear_overdue_count() {
  overdue_count_ = 0;
  clear_has_overdue_count();
}
inline ::google::protobuf::int32 blacklist_user_info::overdue_count() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.overdue_count)
  return overdue_count_;
}
inline void blacklist_user_info::set_overdue_count(::google::protobuf::int32 value) {
  set_has_overdue_count();
  overdue_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.overdue_count)
}

// optional bytes repayment_state = 6;
inline bool blacklist_user_info::has_repayment_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blacklist_user_info::set_has_repayment_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blacklist_user_info::clear_has_repayment_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blacklist_user_info::clear_repayment_state() {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_->clear();
  }
  clear_has_repayment_state();
}
inline const ::std::string& blacklist_user_info::repayment_state() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.repayment_state)
  return *repayment_state_;
}
inline void blacklist_user_info::set_repayment_state(const ::std::string& value) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.repayment_state)
}
inline void blacklist_user_info::set_repayment_state(const char* value) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_user_info.repayment_state)
}
inline void blacklist_user_info::set_repayment_state(const void* value, size_t size) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_user_info.repayment_state)
}
inline ::std::string* blacklist_user_info::mutable_repayment_state() {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.repayment_state)
  return repayment_state_;
}
inline ::std::string* blacklist_user_info::release_repayment_state() {
  clear_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repayment_state_;
    repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_user_info::set_allocated_repayment_state(::std::string* repayment_state) {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_state_;
  }
  if (repayment_state) {
    set_has_repayment_state();
    repayment_state_ = repayment_state;
  } else {
    clear_has_repayment_state();
    repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.repayment_state)
}

// optional int32 overdue_day = 7;
inline bool blacklist_user_info::has_overdue_day() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void blacklist_user_info::set_has_overdue_day() {
  _has_bits_[0] |= 0x00000040u;
}
inline void blacklist_user_info::clear_has_overdue_day() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void blacklist_user_info::clear_overdue_day() {
  overdue_day_ = 0;
  clear_has_overdue_day();
}
inline ::google::protobuf::int32 blacklist_user_info::overdue_day() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.overdue_day)
  return overdue_day_;
}
inline void blacklist_user_info::set_overdue_day(::google::protobuf::int32 value) {
  set_has_overdue_day();
  overdue_day_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.overdue_day)
}

// optional bytes cheat_severity = 8;
inline bool blacklist_user_info::has_cheat_severity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void blacklist_user_info::set_has_cheat_severity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void blacklist_user_info::clear_has_cheat_severity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void blacklist_user_info::clear_cheat_severity() {
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_->clear();
  }
  clear_has_cheat_severity();
}
inline const ::std::string& blacklist_user_info::cheat_severity() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.cheat_severity)
  return *cheat_severity_;
}
inline void blacklist_user_info::set_cheat_severity(const ::std::string& value) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.cheat_severity)
}
inline void blacklist_user_info::set_cheat_severity(const char* value) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_user_info.cheat_severity)
}
inline void blacklist_user_info::set_cheat_severity(const void* value, size_t size) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_user_info.cheat_severity)
}
inline ::std::string* blacklist_user_info::mutable_cheat_severity() {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.cheat_severity)
  return cheat_severity_;
}
inline ::std::string* blacklist_user_info::release_cheat_severity() {
  clear_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cheat_severity_;
    cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_user_info::set_allocated_cheat_severity(::std::string* cheat_severity) {
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cheat_severity_;
  }
  if (cheat_severity) {
    set_has_cheat_severity();
    cheat_severity_ = cheat_severity;
  } else {
    clear_has_cheat_severity();
    cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.cheat_severity)
}

// optional bytes data_sources = 9;
inline bool blacklist_user_info::has_data_sources() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void blacklist_user_info::set_has_data_sources() {
  _has_bits_[0] |= 0x00000100u;
}
inline void blacklist_user_info::clear_has_data_sources() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void blacklist_user_info::clear_data_sources() {
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_->clear();
  }
  clear_has_data_sources();
}
inline const ::std::string& blacklist_user_info::data_sources() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.data_sources)
  return *data_sources_;
}
inline void blacklist_user_info::set_data_sources(const ::std::string& value) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.data_sources)
}
inline void blacklist_user_info::set_data_sources(const char* value) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_user_info.data_sources)
}
inline void blacklist_user_info::set_data_sources(const void* value, size_t size) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_user_info.data_sources)
}
inline ::std::string* blacklist_user_info::mutable_data_sources() {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.data_sources)
  return data_sources_;
}
inline ::std::string* blacklist_user_info::release_data_sources() {
  clear_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_sources_;
    data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_user_info::set_allocated_data_sources(::std::string* data_sources) {
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_sources_;
  }
  if (data_sources) {
    set_has_data_sources();
    data_sources_ = data_sources;
  } else {
    clear_has_data_sources();
    data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.data_sources)
}

// optional bytes operation_personnel = 10;
inline bool blacklist_user_info::has_operation_personnel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void blacklist_user_info::set_has_operation_personnel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void blacklist_user_info::clear_has_operation_personnel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void blacklist_user_info::clear_operation_personnel() {
  if (operation_personnel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_personnel_->clear();
  }
  clear_has_operation_personnel();
}
inline const ::std::string& blacklist_user_info::operation_personnel() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.operation_personnel)
  return *operation_personnel_;
}
inline void blacklist_user_info::set_operation_personnel(const ::std::string& value) {
  set_has_operation_personnel();
  if (operation_personnel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_personnel_ = new ::std::string;
  }
  operation_personnel_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.operation_personnel)
}
inline void blacklist_user_info::set_operation_personnel(const char* value) {
  set_has_operation_personnel();
  if (operation_personnel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_personnel_ = new ::std::string;
  }
  operation_personnel_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_user_info.operation_personnel)
}
inline void blacklist_user_info::set_operation_personnel(const void* value, size_t size) {
  set_has_operation_personnel();
  if (operation_personnel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_personnel_ = new ::std::string;
  }
  operation_personnel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_user_info.operation_personnel)
}
inline ::std::string* blacklist_user_info::mutable_operation_personnel() {
  set_has_operation_personnel();
  if (operation_personnel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_personnel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.operation_personnel)
  return operation_personnel_;
}
inline ::std::string* blacklist_user_info::release_operation_personnel() {
  clear_has_operation_personnel();
  if (operation_personnel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operation_personnel_;
    operation_personnel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_user_info::set_allocated_operation_personnel(::std::string* operation_personnel) {
  if (operation_personnel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_personnel_;
  }
  if (operation_personnel) {
    set_has_operation_personnel();
    operation_personnel_ = operation_personnel;
  } else {
    clear_has_operation_personnel();
    operation_personnel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.operation_personnel)
}

// optional bytes operation_time = 11;
inline bool blacklist_user_info::has_operation_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void blacklist_user_info::set_has_operation_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void blacklist_user_info::clear_has_operation_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void blacklist_user_info::clear_operation_time() {
  if (operation_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_time_->clear();
  }
  clear_has_operation_time();
}
inline const ::std::string& blacklist_user_info::operation_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.operation_time)
  return *operation_time_;
}
inline void blacklist_user_info::set_operation_time(const ::std::string& value) {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_time_ = new ::std::string;
  }
  operation_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.operation_time)
}
inline void blacklist_user_info::set_operation_time(const char* value) {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_time_ = new ::std::string;
  }
  operation_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_user_info.operation_time)
}
inline void blacklist_user_info::set_operation_time(const void* value, size_t size) {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_time_ = new ::std::string;
  }
  operation_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_user_info.operation_time)
}
inline ::std::string* blacklist_user_info::mutable_operation_time() {
  set_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.operation_time)
  return operation_time_;
}
inline ::std::string* blacklist_user_info::release_operation_time() {
  clear_has_operation_time();
  if (operation_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operation_time_;
    operation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_user_info::set_allocated_operation_time(::std::string* operation_time) {
  if (operation_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_time_;
  }
  if (operation_time) {
    set_has_operation_time();
    operation_time_ = operation_time;
  } else {
    clear_has_operation_time();
    operation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.operation_time)
}

// optional bytes update_time = 12;
inline bool blacklist_user_info::has_update_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void blacklist_user_info::set_has_update_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void blacklist_user_info::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void blacklist_user_info::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& blacklist_user_info::update_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_user_info.update_time)
  return *update_time_;
}
inline void blacklist_user_info::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_user_info.update_time)
}
inline void blacklist_user_info::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_user_info.update_time)
}
inline void blacklist_user_info::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_user_info.update_time)
}
inline ::std::string* blacklist_user_info::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_user_info.update_time)
  return update_time_;
}
inline ::std::string* blacklist_user_info::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_user_info::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_user_info.update_time)
}

// -------------------------------------------------------------------

// data_sources_info

// optional bytes sources_no = 1;
inline bool data_sources_info::has_sources_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void data_sources_info::set_has_sources_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void data_sources_info::clear_has_sources_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void data_sources_info::clear_sources_no() {
  if (sources_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_no_->clear();
  }
  clear_has_sources_no();
}
inline const ::std::string& data_sources_info::sources_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.data_sources_info.sources_no)
  return *sources_no_;
}
inline void data_sources_info::set_sources_no(const ::std::string& value) {
  set_has_sources_no();
  if (sources_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_no_ = new ::std::string;
  }
  sources_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.data_sources_info.sources_no)
}
inline void data_sources_info::set_sources_no(const char* value) {
  set_has_sources_no();
  if (sources_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_no_ = new ::std::string;
  }
  sources_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.data_sources_info.sources_no)
}
inline void data_sources_info::set_sources_no(const void* value, size_t size) {
  set_has_sources_no();
  if (sources_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_no_ = new ::std::string;
  }
  sources_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.data_sources_info.sources_no)
}
inline ::std::string* data_sources_info::mutable_sources_no() {
  set_has_sources_no();
  if (sources_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.data_sources_info.sources_no)
  return sources_no_;
}
inline ::std::string* data_sources_info::release_sources_no() {
  clear_has_sources_no();
  if (sources_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sources_no_;
    sources_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void data_sources_info::set_allocated_sources_no(::std::string* sources_no) {
  if (sources_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sources_no_;
  }
  if (sources_no) {
    set_has_sources_no();
    sources_no_ = sources_no;
  } else {
    clear_has_sources_no();
    sources_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.data_sources_info.sources_no)
}

// optional bytes sources_name = 2;
inline bool data_sources_info::has_sources_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void data_sources_info::set_has_sources_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void data_sources_info::clear_has_sources_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void data_sources_info::clear_sources_name() {
  if (sources_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_name_->clear();
  }
  clear_has_sources_name();
}
inline const ::std::string& data_sources_info::sources_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.data_sources_info.sources_name)
  return *sources_name_;
}
inline void data_sources_info::set_sources_name(const ::std::string& value) {
  set_has_sources_name();
  if (sources_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_name_ = new ::std::string;
  }
  sources_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.data_sources_info.sources_name)
}
inline void data_sources_info::set_sources_name(const char* value) {
  set_has_sources_name();
  if (sources_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_name_ = new ::std::string;
  }
  sources_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.data_sources_info.sources_name)
}
inline void data_sources_info::set_sources_name(const void* value, size_t size) {
  set_has_sources_name();
  if (sources_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_name_ = new ::std::string;
  }
  sources_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.data_sources_info.sources_name)
}
inline ::std::string* data_sources_info::mutable_sources_name() {
  set_has_sources_name();
  if (sources_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sources_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.data_sources_info.sources_name)
  return sources_name_;
}
inline ::std::string* data_sources_info::release_sources_name() {
  clear_has_sources_name();
  if (sources_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sources_name_;
    sources_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void data_sources_info::set_allocated_sources_name(::std::string* sources_name) {
  if (sources_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sources_name_;
  }
  if (sources_name) {
    set_has_sources_name();
    sources_name_ = sources_name;
  } else {
    clear_has_sources_name();
    sources_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.data_sources_info.sources_name)
}

// -------------------------------------------------------------------

// platform_info

// optional bytes platform_no = 1;
inline bool platform_info::has_platform_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void platform_info::set_has_platform_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void platform_info::clear_has_platform_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void platform_info::clear_platform_no() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_->clear();
  }
  clear_has_platform_no();
}
inline const ::std::string& platform_info::platform_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_info.platform_no)
  return *platform_no_;
}
inline void platform_info::set_platform_no(const ::std::string& value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_info.platform_no)
}
inline void platform_info::set_platform_no(const char* value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.platform_info.platform_no)
}
inline void platform_info::set_platform_no(const void* value, size_t size) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.platform_info.platform_no)
}
inline ::std::string* platform_info::mutable_platform_no() {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_info.platform_no)
  return platform_no_;
}
inline ::std::string* platform_info::release_platform_no() {
  clear_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_no_;
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_info::set_allocated_platform_no(::std::string* platform_no) {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (platform_no) {
    set_has_platform_no();
    platform_no_ = platform_no;
  } else {
    clear_has_platform_no();
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_info.platform_no)
}

// optional bytes platform_name = 2;
inline bool platform_info::has_platform_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void platform_info::set_has_platform_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void platform_info::clear_has_platform_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void platform_info::clear_platform_name() {
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_->clear();
  }
  clear_has_platform_name();
}
inline const ::std::string& platform_info::platform_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_info.platform_name)
  return *platform_name_;
}
inline void platform_info::set_platform_name(const ::std::string& value) {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  platform_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_info.platform_name)
}
inline void platform_info::set_platform_name(const char* value) {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  platform_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.platform_info.platform_name)
}
inline void platform_info::set_platform_name(const void* value, size_t size) {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  platform_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.platform_info.platform_name)
}
inline ::std::string* platform_info::mutable_platform_name() {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_info.platform_name)
  return platform_name_;
}
inline ::std::string* platform_info::release_platform_name() {
  clear_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_name_;
    platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_info::set_allocated_platform_name(::std::string* platform_name) {
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_name_;
  }
  if (platform_name) {
    set_has_platform_name();
    platform_name_ = platform_name;
  } else {
    clear_has_platform_name();
    platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_info.platform_name)
}

// -------------------------------------------------------------------

// platform_service

// optional bytes serivce_id = 1;
inline bool platform_service::has_serivce_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void platform_service::set_has_serivce_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void platform_service::clear_has_serivce_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void platform_service::clear_serivce_id() {
  if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_->clear();
  }
  clear_has_serivce_id();
}
inline const ::std::string& platform_service::serivce_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_service.serivce_id)
  return *serivce_id_;
}
inline void platform_service::set_serivce_id(const ::std::string& value) {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  serivce_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_service.serivce_id)
}
inline void platform_service::set_serivce_id(const char* value) {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  serivce_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.platform_service.serivce_id)
}
inline void platform_service::set_serivce_id(const void* value, size_t size) {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  serivce_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.platform_service.serivce_id)
}
inline ::std::string* platform_service::mutable_serivce_id() {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_service.serivce_id)
  return serivce_id_;
}
inline ::std::string* platform_service::release_serivce_id() {
  clear_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serivce_id_;
    serivce_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_service::set_allocated_serivce_id(::std::string* serivce_id) {
  if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serivce_id_;
  }
  if (serivce_id) {
    set_has_serivce_id();
    serivce_id_ = serivce_id;
  } else {
    clear_has_serivce_id();
    serivce_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_service.serivce_id)
}

// optional bytes service_name = 2;
inline bool platform_service::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void platform_service::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void platform_service::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void platform_service::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& platform_service::service_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_service.service_name)
  return *service_name_;
}
inline void platform_service::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_service.service_name)
}
inline void platform_service::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.platform_service.service_name)
}
inline void platform_service::set_service_name(const void* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.platform_service.service_name)
}
inline ::std::string* platform_service::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_service.service_name)
  return service_name_;
}
inline ::std::string* platform_service::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_service::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_service.service_name)
}

// -------------------------------------------------------------------

// model_hit_statistics_info

// optional bytes platform_name = 1;
inline bool model_hit_statistics_info::has_platform_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void model_hit_statistics_info::set_has_platform_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void model_hit_statistics_info::clear_has_platform_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void model_hit_statistics_info::clear_platform_name() {
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_->clear();
  }
  clear_has_platform_name();
}
inline const ::std::string& model_hit_statistics_info::platform_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_info.platform_name)
  return *platform_name_;
}
inline void model_hit_statistics_info::set_platform_name(const ::std::string& value) {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  platform_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.model_hit_statistics_info.platform_name)
}
inline void model_hit_statistics_info::set_platform_name(const char* value) {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  platform_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.model_hit_statistics_info.platform_name)
}
inline void model_hit_statistics_info::set_platform_name(const void* value, size_t size) {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  platform_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.model_hit_statistics_info.platform_name)
}
inline ::std::string* model_hit_statistics_info::mutable_platform_name() {
  set_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_hit_statistics_info.platform_name)
  return platform_name_;
}
inline ::std::string* model_hit_statistics_info::release_platform_name() {
  clear_has_platform_name();
  if (platform_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_name_;
    platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void model_hit_statistics_info::set_allocated_platform_name(::std::string* platform_name) {
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_name_;
  }
  if (platform_name) {
    set_has_platform_name();
    platform_name_ = platform_name;
  } else {
    clear_has_platform_name();
    platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_hit_statistics_info.platform_name)
}

// optional int32 total_number = 2;
inline bool model_hit_statistics_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void model_hit_statistics_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void model_hit_statistics_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void model_hit_statistics_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 model_hit_statistics_info::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_info.total_number)
  return total_number_;
}
inline void model_hit_statistics_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.model_hit_statistics_info.total_number)
}

// -------------------------------------------------------------------

// hit_user_info

// optional .AFP_main_frame.platform_info platform = 1;
inline bool hit_user_info::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_user_info::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_user_info::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_user_info::clear_platform() {
  if (platform_ != NULL) platform_->::AFP_main_frame::platform_info::Clear();
  clear_has_platform();
}
inline const ::AFP_main_frame::platform_info& hit_user_info::platform() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_info.platform)
  return platform_ != NULL ? *platform_ : *default_instance_->platform_;
}
inline ::AFP_main_frame::platform_info* hit_user_info::mutable_platform() {
  set_has_platform();
  if (platform_ == NULL) platform_ = new ::AFP_main_frame::platform_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_info.platform)
  return platform_;
}
inline ::AFP_main_frame::platform_info* hit_user_info::release_platform() {
  clear_has_platform();
  ::AFP_main_frame::platform_info* temp = platform_;
  platform_ = NULL;
  return temp;
}
inline void hit_user_info::set_allocated_platform(::AFP_main_frame::platform_info* platform) {
  delete platform_;
  platform_ = platform;
  if (platform) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_info.platform)
}

// optional bytes real_name = 2;
inline bool hit_user_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_user_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_user_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_user_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& hit_user_info::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_info.real_name)
  return *real_name_;
}
inline void hit_user_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_info.real_name)
}
inline void hit_user_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_info.real_name)
}
inline void hit_user_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_info.real_name)
}
inline ::std::string* hit_user_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_info.real_name)
  return real_name_;
}
inline ::std::string* hit_user_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_info.real_name)
}

// optional bytes id_card = 3;
inline bool hit_user_info::has_id_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_user_info::set_has_id_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_user_info::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_user_info::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& hit_user_info::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_info.id_card)
  return *id_card_;
}
inline void hit_user_info::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_info.id_card)
}
inline void hit_user_info::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_info.id_card)
}
inline void hit_user_info::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_info.id_card)
}
inline ::std::string* hit_user_info::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_info.id_card)
  return id_card_;
}
inline ::std::string* hit_user_info::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_info::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_info.id_card)
}

// optional bytes mobile_phone = 4;
inline bool hit_user_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hit_user_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hit_user_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hit_user_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& hit_user_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_info.mobile_phone)
  return *mobile_phone_;
}
inline void hit_user_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_info.mobile_phone)
}
inline void hit_user_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_info.mobile_phone)
}
inline void hit_user_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_info.mobile_phone)
}
inline ::std::string* hit_user_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* hit_user_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_info.mobile_phone)
}

// optional bytes platform_service = 5;
inline bool hit_user_info::has_platform_service() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hit_user_info::set_has_platform_service() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hit_user_info::clear_has_platform_service() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hit_user_info::clear_platform_service() {
  if (platform_service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_service_->clear();
  }
  clear_has_platform_service();
}
inline const ::std::string& hit_user_info::platform_service() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_info.platform_service)
  return *platform_service_;
}
inline void hit_user_info::set_platform_service(const ::std::string& value) {
  set_has_platform_service();
  if (platform_service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_service_ = new ::std::string;
  }
  platform_service_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_info.platform_service)
}
inline void hit_user_info::set_platform_service(const char* value) {
  set_has_platform_service();
  if (platform_service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_service_ = new ::std::string;
  }
  platform_service_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_info.platform_service)
}
inline void hit_user_info::set_platform_service(const void* value, size_t size) {
  set_has_platform_service();
  if (platform_service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_service_ = new ::std::string;
  }
  platform_service_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_info.platform_service)
}
inline ::std::string* hit_user_info::mutable_platform_service() {
  set_has_platform_service();
  if (platform_service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_service_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_info.platform_service)
  return platform_service_;
}
inline ::std::string* hit_user_info::release_platform_service() {
  clear_has_platform_service();
  if (platform_service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_service_;
    platform_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_info::set_allocated_platform_service(::std::string* platform_service) {
  if (platform_service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_service_;
  }
  if (platform_service) {
    set_has_platform_service();
    platform_service_ = platform_service;
  } else {
    clear_has_platform_service();
    platform_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_info.platform_service)
}

// optional bytes hit_result = 6;
inline bool hit_user_info::has_hit_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hit_user_info::set_has_hit_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hit_user_info::clear_has_hit_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hit_user_info::clear_hit_result() {
  if (hit_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_result_->clear();
  }
  clear_has_hit_result();
}
inline const ::std::string& hit_user_info::hit_result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_info.hit_result)
  return *hit_result_;
}
inline void hit_user_info::set_hit_result(const ::std::string& value) {
  set_has_hit_result();
  if (hit_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_result_ = new ::std::string;
  }
  hit_result_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_info.hit_result)
}
inline void hit_user_info::set_hit_result(const char* value) {
  set_has_hit_result();
  if (hit_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_result_ = new ::std::string;
  }
  hit_result_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_info.hit_result)
}
inline void hit_user_info::set_hit_result(const void* value, size_t size) {
  set_has_hit_result();
  if (hit_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_result_ = new ::std::string;
  }
  hit_result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_info.hit_result)
}
inline ::std::string* hit_user_info::mutable_hit_result() {
  set_has_hit_result();
  if (hit_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_info.hit_result)
  return hit_result_;
}
inline ::std::string* hit_user_info::release_hit_result() {
  clear_has_hit_result();
  if (hit_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hit_result_;
    hit_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_info::set_allocated_hit_result(::std::string* hit_result) {
  if (hit_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hit_result_;
  }
  if (hit_result) {
    set_has_hit_result();
    hit_result_ = hit_result;
  } else {
    clear_has_hit_result();
    hit_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_info.hit_result)
}

// -------------------------------------------------------------------

// hit_user_analyze_info

// optional bytes property_val = 1;
inline bool hit_user_analyze_info::has_property_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_user_analyze_info::set_has_property_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_user_analyze_info::clear_has_property_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_user_analyze_info::clear_property_val() {
  if (property_val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_val_->clear();
  }
  clear_has_property_val();
}
inline const ::std::string& hit_user_analyze_info::property_val() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_analyze_info.property_val)
  return *property_val_;
}
inline void hit_user_analyze_info::set_property_val(const ::std::string& value) {
  set_has_property_val();
  if (property_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_val_ = new ::std::string;
  }
  property_val_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_analyze_info.property_val)
}
inline void hit_user_analyze_info::set_property_val(const char* value) {
  set_has_property_val();
  if (property_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_val_ = new ::std::string;
  }
  property_val_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_analyze_info.property_val)
}
inline void hit_user_analyze_info::set_property_val(const void* value, size_t size) {
  set_has_property_val();
  if (property_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_val_ = new ::std::string;
  }
  property_val_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_analyze_info.property_val)
}
inline ::std::string* hit_user_analyze_info::mutable_property_val() {
  set_has_property_val();
  if (property_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_val_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_analyze_info.property_val)
  return property_val_;
}
inline ::std::string* hit_user_analyze_info::release_property_val() {
  clear_has_property_val();
  if (property_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = property_val_;
    property_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_analyze_info::set_allocated_property_val(::std::string* property_val) {
  if (property_val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete property_val_;
  }
  if (property_val) {
    set_has_property_val();
    property_val_ = property_val;
  } else {
    clear_has_property_val();
    property_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_analyze_info.property_val)
}

// optional int32 total_number = 2;
inline bool hit_user_analyze_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_user_analyze_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_user_analyze_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_user_analyze_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 hit_user_analyze_info::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_analyze_info.total_number)
  return total_number_;
}
inline void hit_user_analyze_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_analyze_info.total_number)
}

// optional float percent = 3;
inline bool hit_user_analyze_info::has_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_user_analyze_info::set_has_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_user_analyze_info::clear_has_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_user_analyze_info::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float hit_user_analyze_info::percent() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_analyze_info.percent)
  return percent_;
}
inline void hit_user_analyze_info::set_percent(float value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_analyze_info.percent)
}

// -------------------------------------------------------------------

// hit_rule_analyze_info

// optional bytes rule = 1;
inline bool hit_rule_analyze_info::has_rule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_rule_analyze_info::set_has_rule() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_rule_analyze_info::clear_has_rule() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_rule_analyze_info::clear_rule() {
  if (rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rule_->clear();
  }
  clear_has_rule();
}
inline const ::std::string& hit_rule_analyze_info::rule() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_info.rule)
  return *rule_;
}
inline void hit_rule_analyze_info::set_rule(const ::std::string& value) {
  set_has_rule();
  if (rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rule_ = new ::std::string;
  }
  rule_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_info.rule)
}
inline void hit_rule_analyze_info::set_rule(const char* value) {
  set_has_rule();
  if (rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rule_ = new ::std::string;
  }
  rule_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_rule_analyze_info.rule)
}
inline void hit_rule_analyze_info::set_rule(const void* value, size_t size) {
  set_has_rule();
  if (rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rule_ = new ::std::string;
  }
  rule_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_rule_analyze_info.rule)
}
inline ::std::string* hit_rule_analyze_info::mutable_rule() {
  set_has_rule();
  if (rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rule_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_rule_analyze_info.rule)
  return rule_;
}
inline ::std::string* hit_rule_analyze_info::release_rule() {
  clear_has_rule();
  if (rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rule_;
    rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_rule_analyze_info::set_allocated_rule(::std::string* rule) {
  if (rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rule_;
  }
  if (rule) {
    set_has_rule();
    rule_ = rule;
  } else {
    clear_has_rule();
    rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_rule_analyze_info.rule)
}

// optional bytes third_service_name = 2;
inline bool hit_rule_analyze_info::has_third_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_rule_analyze_info::set_has_third_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_rule_analyze_info::clear_has_third_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_rule_analyze_info::clear_third_service_name() {
  if (third_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    third_service_name_->clear();
  }
  clear_has_third_service_name();
}
inline const ::std::string& hit_rule_analyze_info::third_service_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_info.third_service_name)
  return *third_service_name_;
}
inline void hit_rule_analyze_info::set_third_service_name(const ::std::string& value) {
  set_has_third_service_name();
  if (third_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    third_service_name_ = new ::std::string;
  }
  third_service_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_info.third_service_name)
}
inline void hit_rule_analyze_info::set_third_service_name(const char* value) {
  set_has_third_service_name();
  if (third_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    third_service_name_ = new ::std::string;
  }
  third_service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_rule_analyze_info.third_service_name)
}
inline void hit_rule_analyze_info::set_third_service_name(const void* value, size_t size) {
  set_has_third_service_name();
  if (third_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    third_service_name_ = new ::std::string;
  }
  third_service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_rule_analyze_info.third_service_name)
}
inline ::std::string* hit_rule_analyze_info::mutable_third_service_name() {
  set_has_third_service_name();
  if (third_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    third_service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_rule_analyze_info.third_service_name)
  return third_service_name_;
}
inline ::std::string* hit_rule_analyze_info::release_third_service_name() {
  clear_has_third_service_name();
  if (third_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = third_service_name_;
    third_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_rule_analyze_info::set_allocated_third_service_name(::std::string* third_service_name) {
  if (third_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete third_service_name_;
  }
  if (third_service_name) {
    set_has_third_service_name();
    third_service_name_ = third_service_name;
  } else {
    clear_has_third_service_name();
    third_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_rule_analyze_info.third_service_name)
}

// optional int32 total_number = 3;
inline bool hit_rule_analyze_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_rule_analyze_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_rule_analyze_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_rule_analyze_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 hit_rule_analyze_info::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_info.total_number)
  return total_number_;
}
inline void hit_rule_analyze_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_info.total_number)
}

// optional float percent = 4;
inline bool hit_rule_analyze_info::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hit_rule_analyze_info::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hit_rule_analyze_info::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hit_rule_analyze_info::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float hit_rule_analyze_info::percent() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_info.percent)
  return percent_;
}
inline void hit_rule_analyze_info::set_percent(float value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_info.percent)
}

// -------------------------------------------------------------------

// hit_detail_info

// optional .common.user_info user_info = 1;
inline bool hit_detail_info::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_detail_info::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_detail_info::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_detail_info::clear_user_info() {
  if (user_info_ != NULL) user_info_->::common::user_info::Clear();
  clear_has_user_info();
}
inline const ::common::user_info& hit_detail_info::user_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_info.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::common::user_info* hit_detail_info::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::common::user_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_info.user_info)
  return user_info_;
}
inline ::common::user_info* hit_detail_info::release_user_info() {
  clear_has_user_info();
  ::common::user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void hit_detail_info::set_allocated_user_info(::common::user_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_info.user_info)
}

// optional .AFP_main_frame.platform_info platform = 2;
inline bool hit_detail_info::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_detail_info::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_detail_info::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_detail_info::clear_platform() {
  if (platform_ != NULL) platform_->::AFP_main_frame::platform_info::Clear();
  clear_has_platform();
}
inline const ::AFP_main_frame::platform_info& hit_detail_info::platform() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_info.platform)
  return platform_ != NULL ? *platform_ : *default_instance_->platform_;
}
inline ::AFP_main_frame::platform_info* hit_detail_info::mutable_platform() {
  set_has_platform();
  if (platform_ == NULL) platform_ = new ::AFP_main_frame::platform_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_info.platform)
  return platform_;
}
inline ::AFP_main_frame::platform_info* hit_detail_info::release_platform() {
  clear_has_platform();
  ::AFP_main_frame::platform_info* temp = platform_;
  platform_ = NULL;
  return temp;
}
inline void hit_detail_info::set_allocated_platform(::AFP_main_frame::platform_info* platform) {
  delete platform_;
  platform_ = platform;
  if (platform) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_info.platform)
}

// optional bytes hit_rule = 3;
inline bool hit_detail_info::has_hit_rule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_detail_info::set_has_hit_rule() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_detail_info::clear_has_hit_rule() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_detail_info::clear_hit_rule() {
  if (hit_rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_rule_->clear();
  }
  clear_has_hit_rule();
}
inline const ::std::string& hit_detail_info::hit_rule() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_info.hit_rule)
  return *hit_rule_;
}
inline void hit_detail_info::set_hit_rule(const ::std::string& value) {
  set_has_hit_rule();
  if (hit_rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_rule_ = new ::std::string;
  }
  hit_rule_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_info.hit_rule)
}
inline void hit_detail_info::set_hit_rule(const char* value) {
  set_has_hit_rule();
  if (hit_rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_rule_ = new ::std::string;
  }
  hit_rule_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_detail_info.hit_rule)
}
inline void hit_detail_info::set_hit_rule(const void* value, size_t size) {
  set_has_hit_rule();
  if (hit_rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_rule_ = new ::std::string;
  }
  hit_rule_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_detail_info.hit_rule)
}
inline ::std::string* hit_detail_info::mutable_hit_rule() {
  set_has_hit_rule();
  if (hit_rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hit_rule_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_info.hit_rule)
  return hit_rule_;
}
inline ::std::string* hit_detail_info::release_hit_rule() {
  clear_has_hit_rule();
  if (hit_rule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hit_rule_;
    hit_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_detail_info::set_allocated_hit_rule(::std::string* hit_rule) {
  if (hit_rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hit_rule_;
  }
  if (hit_rule) {
    set_has_hit_rule();
    hit_rule_ = hit_rule;
  } else {
    clear_has_hit_rule();
    hit_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_info.hit_rule)
}

// -------------------------------------------------------------------

// blacklist_data_sources_ask

// optional .common.common_ask_header ask_header = 1;
inline bool blacklist_data_sources_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_data_sources_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_data_sources_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_data_sources_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_data_sources_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_data_sources_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_data_sources_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_data_sources_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_data_sources_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_data_sources_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_data_sources_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklist_data_sources_ans

// repeated .AFP_main_frame.data_sources_info list = 1;
inline int blacklist_data_sources_ans::list_size() const {
  return list_.size();
}
inline void blacklist_data_sources_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::data_sources_info& blacklist_data_sources_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_data_sources_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::data_sources_info* blacklist_data_sources_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_data_sources_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::data_sources_info* blacklist_data_sources_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.blacklist_data_sources_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::data_sources_info >&
blacklist_data_sources_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.blacklist_data_sources_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::data_sources_info >*
blacklist_data_sources_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.blacklist_data_sources_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool blacklist_data_sources_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_data_sources_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_data_sources_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_data_sources_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_data_sources_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_data_sources_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_data_sources_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_data_sources_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_data_sources_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_data_sources_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_data_sources_ans.error)
}

// -------------------------------------------------------------------

// blacklist_query_ask

// optional bytes real_name = 1;
inline bool blacklist_query_ask::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_query_ask::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_query_ask::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_query_ask::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& blacklist_query_ask::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.real_name)
  return *real_name_;
}
inline void blacklist_query_ask::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.real_name)
}
inline void blacklist_query_ask::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_query_ask.real_name)
}
inline void blacklist_query_ask::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_query_ask.real_name)
}
inline ::std::string* blacklist_query_ask::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.real_name)
  return real_name_;
}
inline ::std::string* blacklist_query_ask::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_query_ask::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.real_name)
}

// optional bytes mobile_phone = 2;
inline bool blacklist_query_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_query_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_query_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_query_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& blacklist_query_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.mobile_phone)
  return *mobile_phone_;
}
inline void blacklist_query_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.mobile_phone)
}
inline void blacklist_query_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_query_ask.mobile_phone)
}
inline void blacklist_query_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_query_ask.mobile_phone)
}
inline ::std::string* blacklist_query_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* blacklist_query_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_query_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.mobile_phone)
}

// optional bytes id_no = 3;
inline bool blacklist_query_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_query_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_query_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_query_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& blacklist_query_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.id_no)
  return *id_no_;
}
inline void blacklist_query_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.id_no)
}
inline void blacklist_query_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_query_ask.id_no)
}
inline void blacklist_query_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_query_ask.id_no)
}
inline ::std::string* blacklist_query_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.id_no)
  return id_no_;
}
inline ::std::string* blacklist_query_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_query_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.id_no)
}

// optional int32 min_overdue_count = 6;
inline bool blacklist_query_ask::has_min_overdue_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blacklist_query_ask::set_has_min_overdue_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blacklist_query_ask::clear_has_min_overdue_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blacklist_query_ask::clear_min_overdue_count() {
  min_overdue_count_ = 0;
  clear_has_min_overdue_count();
}
inline ::google::protobuf::int32 blacklist_query_ask::min_overdue_count() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.min_overdue_count)
  return min_overdue_count_;
}
inline void blacklist_query_ask::set_min_overdue_count(::google::protobuf::int32 value) {
  set_has_min_overdue_count();
  min_overdue_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.min_overdue_count)
}

// optional int32 max_overdue_count = 7;
inline bool blacklist_query_ask::has_max_overdue_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blacklist_query_ask::set_has_max_overdue_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blacklist_query_ask::clear_has_max_overdue_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blacklist_query_ask::clear_max_overdue_count() {
  max_overdue_count_ = 0;
  clear_has_max_overdue_count();
}
inline ::google::protobuf::int32 blacklist_query_ask::max_overdue_count() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.max_overdue_count)
  return max_overdue_count_;
}
inline void blacklist_query_ask::set_max_overdue_count(::google::protobuf::int32 value) {
  set_has_max_overdue_count();
  max_overdue_count_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.max_overdue_count)
}

// optional float min_also_total = 8;
inline bool blacklist_query_ask::has_min_also_total() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blacklist_query_ask::set_has_min_also_total() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blacklist_query_ask::clear_has_min_also_total() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blacklist_query_ask::clear_min_also_total() {
  min_also_total_ = 0;
  clear_has_min_also_total();
}
inline float blacklist_query_ask::min_also_total() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.min_also_total)
  return min_also_total_;
}
inline void blacklist_query_ask::set_min_also_total(float value) {
  set_has_min_also_total();
  min_also_total_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.min_also_total)
}

// optional float max_also_total = 9;
inline bool blacklist_query_ask::has_max_also_total() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void blacklist_query_ask::set_has_max_also_total() {
  _has_bits_[0] |= 0x00000040u;
}
inline void blacklist_query_ask::clear_has_max_also_total() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void blacklist_query_ask::clear_max_also_total() {
  max_also_total_ = 0;
  clear_has_max_also_total();
}
inline float blacklist_query_ask::max_also_total() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.max_also_total)
  return max_also_total_;
}
inline void blacklist_query_ask::set_max_also_total(float value) {
  set_has_max_also_total();
  max_also_total_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.max_also_total)
}

// optional bytes repayment_state = 10;
inline bool blacklist_query_ask::has_repayment_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void blacklist_query_ask::set_has_repayment_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void blacklist_query_ask::clear_has_repayment_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void blacklist_query_ask::clear_repayment_state() {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_->clear();
  }
  clear_has_repayment_state();
}
inline const ::std::string& blacklist_query_ask::repayment_state() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.repayment_state)
  return *repayment_state_;
}
inline void blacklist_query_ask::set_repayment_state(const ::std::string& value) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.repayment_state)
}
inline void blacklist_query_ask::set_repayment_state(const char* value) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_query_ask.repayment_state)
}
inline void blacklist_query_ask::set_repayment_state(const void* value, size_t size) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_query_ask.repayment_state)
}
inline ::std::string* blacklist_query_ask::mutable_repayment_state() {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.repayment_state)
  return repayment_state_;
}
inline ::std::string* blacklist_query_ask::release_repayment_state() {
  clear_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repayment_state_;
    repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_query_ask::set_allocated_repayment_state(::std::string* repayment_state) {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_state_;
  }
  if (repayment_state) {
    set_has_repayment_state();
    repayment_state_ = repayment_state;
  } else {
    clear_has_repayment_state();
    repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.repayment_state)
}

// optional int32 min_overdue_day = 11;
inline bool blacklist_query_ask::has_min_overdue_day() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void blacklist_query_ask::set_has_min_overdue_day() {
  _has_bits_[0] |= 0x00000100u;
}
inline void blacklist_query_ask::clear_has_min_overdue_day() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void blacklist_query_ask::clear_min_overdue_day() {
  min_overdue_day_ = 0;
  clear_has_min_overdue_day();
}
inline ::google::protobuf::int32 blacklist_query_ask::min_overdue_day() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.min_overdue_day)
  return min_overdue_day_;
}
inline void blacklist_query_ask::set_min_overdue_day(::google::protobuf::int32 value) {
  set_has_min_overdue_day();
  min_overdue_day_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.min_overdue_day)
}

// optional int32 max_overdue_day = 12;
inline bool blacklist_query_ask::has_max_overdue_day() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void blacklist_query_ask::set_has_max_overdue_day() {
  _has_bits_[0] |= 0x00000200u;
}
inline void blacklist_query_ask::clear_has_max_overdue_day() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void blacklist_query_ask::clear_max_overdue_day() {
  max_overdue_day_ = 0;
  clear_has_max_overdue_day();
}
inline ::google::protobuf::int32 blacklist_query_ask::max_overdue_day() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.max_overdue_day)
  return max_overdue_day_;
}
inline void blacklist_query_ask::set_max_overdue_day(::google::protobuf::int32 value) {
  set_has_max_overdue_day();
  max_overdue_day_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.max_overdue_day)
}

// optional bytes cheat_severity = 13;
inline bool blacklist_query_ask::has_cheat_severity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void blacklist_query_ask::set_has_cheat_severity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void blacklist_query_ask::clear_has_cheat_severity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void blacklist_query_ask::clear_cheat_severity() {
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_->clear();
  }
  clear_has_cheat_severity();
}
inline const ::std::string& blacklist_query_ask::cheat_severity() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.cheat_severity)
  return *cheat_severity_;
}
inline void blacklist_query_ask::set_cheat_severity(const ::std::string& value) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.cheat_severity)
}
inline void blacklist_query_ask::set_cheat_severity(const char* value) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_query_ask.cheat_severity)
}
inline void blacklist_query_ask::set_cheat_severity(const void* value, size_t size) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_query_ask.cheat_severity)
}
inline ::std::string* blacklist_query_ask::mutable_cheat_severity() {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.cheat_severity)
  return cheat_severity_;
}
inline ::std::string* blacklist_query_ask::release_cheat_severity() {
  clear_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cheat_severity_;
    cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_query_ask::set_allocated_cheat_severity(::std::string* cheat_severity) {
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cheat_severity_;
  }
  if (cheat_severity) {
    set_has_cheat_severity();
    cheat_severity_ = cheat_severity;
  } else {
    clear_has_cheat_severity();
    cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.cheat_severity)
}

// optional bytes data_sources = 14;
inline bool blacklist_query_ask::has_data_sources() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void blacklist_query_ask::set_has_data_sources() {
  _has_bits_[0] |= 0x00000800u;
}
inline void blacklist_query_ask::clear_has_data_sources() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void blacklist_query_ask::clear_data_sources() {
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_->clear();
  }
  clear_has_data_sources();
}
inline const ::std::string& blacklist_query_ask::data_sources() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.data_sources)
  return *data_sources_;
}
inline void blacklist_query_ask::set_data_sources(const ::std::string& value) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.data_sources)
}
inline void blacklist_query_ask::set_data_sources(const char* value) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_query_ask.data_sources)
}
inline void blacklist_query_ask::set_data_sources(const void* value, size_t size) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_query_ask.data_sources)
}
inline ::std::string* blacklist_query_ask::mutable_data_sources() {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.data_sources)
  return data_sources_;
}
inline ::std::string* blacklist_query_ask::release_data_sources() {
  clear_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_sources_;
    data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_query_ask::set_allocated_data_sources(::std::string* data_sources) {
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_sources_;
  }
  if (data_sources) {
    set_has_data_sources();
    data_sources_ = data_sources;
  } else {
    clear_has_data_sources();
    data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.data_sources)
}

// optional int32 page_num = 15;
inline bool blacklist_query_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void blacklist_query_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void blacklist_query_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void blacklist_query_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 blacklist_query_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.page_num)
  return page_num_;
}
inline void blacklist_query_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.page_num)
}

// optional int32 cur_page = 16;
inline bool blacklist_query_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void blacklist_query_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00002000u;
}
inline void blacklist_query_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void blacklist_query_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 blacklist_query_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.cur_page)
  return cur_page_;
}
inline void blacklist_query_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 17;
inline bool blacklist_query_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void blacklist_query_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00004000u;
}
inline void blacklist_query_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void blacklist_query_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_query_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_query_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_query_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_query_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklist_query_ans

// repeated .AFP_main_frame.blacklist_user_info list = 1;
inline int blacklist_query_ans::list_size() const {
  return list_.size();
}
inline void blacklist_query_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::blacklist_user_info& blacklist_query_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::blacklist_user_info* blacklist_query_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::blacklist_user_info* blacklist_query_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.blacklist_query_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::blacklist_user_info >&
blacklist_query_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.blacklist_query_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::blacklist_user_info >*
blacklist_query_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.blacklist_query_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool blacklist_query_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_query_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_query_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_query_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 blacklist_query_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ans.total_number)
  return total_number_;
}
inline void blacklist_query_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_query_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool blacklist_query_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_query_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_query_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_query_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_query_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_query_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_query_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_query_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_query_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_query_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_query_ans.error)
}

// -------------------------------------------------------------------

// blacklist_detail_ask

// optional bytes user_id = 1;
inline bool blacklist_detail_ask::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_detail_ask::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_detail_ask::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_detail_ask::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& blacklist_detail_ask::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_detail_ask.user_id)
  return *user_id_;
}
inline void blacklist_detail_ask::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_detail_ask.user_id)
}
inline void blacklist_detail_ask::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_detail_ask.user_id)
}
inline void blacklist_detail_ask::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_detail_ask.user_id)
}
inline ::std::string* blacklist_detail_ask::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_detail_ask.user_id)
  return user_id_;
}
inline ::std::string* blacklist_detail_ask::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_detail_ask::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_detail_ask.user_id)
}

// optional .common.common_ask_header ask_header = 2;
inline bool blacklist_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_detail_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklist_detail_ans

// optional .AFP_main_frame.blacklist_user_info blacklist = 1;
inline bool blacklist_detail_ans::has_blacklist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_detail_ans::set_has_blacklist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_detail_ans::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_detail_ans::clear_blacklist() {
  if (blacklist_ != NULL) blacklist_->::AFP_main_frame::blacklist_user_info::Clear();
  clear_has_blacklist();
}
inline const ::AFP_main_frame::blacklist_user_info& blacklist_detail_ans::blacklist() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_detail_ans.blacklist)
  return blacklist_ != NULL ? *blacklist_ : *default_instance_->blacklist_;
}
inline ::AFP_main_frame::blacklist_user_info* blacklist_detail_ans::mutable_blacklist() {
  set_has_blacklist();
  if (blacklist_ == NULL) blacklist_ = new ::AFP_main_frame::blacklist_user_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_detail_ans.blacklist)
  return blacklist_;
}
inline ::AFP_main_frame::blacklist_user_info* blacklist_detail_ans::release_blacklist() {
  clear_has_blacklist();
  ::AFP_main_frame::blacklist_user_info* temp = blacklist_;
  blacklist_ = NULL;
  return temp;
}
inline void blacklist_detail_ans::set_allocated_blacklist(::AFP_main_frame::blacklist_user_info* blacklist) {
  delete blacklist_;
  blacklist_ = blacklist;
  if (blacklist) {
    set_has_blacklist();
  } else {
    clear_has_blacklist();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_detail_ans.blacklist)
}

// optional .common.errorinfo error = 2;
inline bool blacklist_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_detail_ans.error)
}

// -------------------------------------------------------------------

// blacklist_save_ask

// optional .AFP_main_frame.blacklist_user_info blacklist = 1;
inline bool blacklist_save_ask::has_blacklist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_save_ask::set_has_blacklist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_save_ask::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_save_ask::clear_blacklist() {
  if (blacklist_ != NULL) blacklist_->::AFP_main_frame::blacklist_user_info::Clear();
  clear_has_blacklist();
}
inline const ::AFP_main_frame::blacklist_user_info& blacklist_save_ask::blacklist() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_save_ask.blacklist)
  return blacklist_ != NULL ? *blacklist_ : *default_instance_->blacklist_;
}
inline ::AFP_main_frame::blacklist_user_info* blacklist_save_ask::mutable_blacklist() {
  set_has_blacklist();
  if (blacklist_ == NULL) blacklist_ = new ::AFP_main_frame::blacklist_user_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_save_ask.blacklist)
  return blacklist_;
}
inline ::AFP_main_frame::blacklist_user_info* blacklist_save_ask::release_blacklist() {
  clear_has_blacklist();
  ::AFP_main_frame::blacklist_user_info* temp = blacklist_;
  blacklist_ = NULL;
  return temp;
}
inline void blacklist_save_ask::set_allocated_blacklist(::AFP_main_frame::blacklist_user_info* blacklist) {
  delete blacklist_;
  blacklist_ = blacklist;
  if (blacklist) {
    set_has_blacklist();
  } else {
    clear_has_blacklist();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_save_ask.blacklist)
}

// optional .common.common_ask_header ask_header = 2;
inline bool blacklist_save_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_save_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_save_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_save_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_save_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_save_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_save_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_save_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_save_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_save_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_save_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklist_save_ans

// optional .common.errorinfo error = 1;
inline bool blacklist_save_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_save_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_save_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_save_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_save_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_save_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_save_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_save_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_save_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_save_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_save_ans.error)
}

// -------------------------------------------------------------------

// blacklist_remove_ask

// optional bytes user_id = 1;
inline bool blacklist_remove_ask::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_remove_ask::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_remove_ask::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_remove_ask::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& blacklist_remove_ask::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_remove_ask.user_id)
  return *user_id_;
}
inline void blacklist_remove_ask::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.blacklist_remove_ask.user_id)
}
inline void blacklist_remove_ask::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.blacklist_remove_ask.user_id)
}
inline void blacklist_remove_ask::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.blacklist_remove_ask.user_id)
}
inline ::std::string* blacklist_remove_ask::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_remove_ask.user_id)
  return user_id_;
}
inline ::std::string* blacklist_remove_ask::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_remove_ask::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_remove_ask.user_id)
}

// optional .common.common_ask_header ask_header = 2;
inline bool blacklist_remove_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_remove_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_remove_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_remove_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_remove_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_remove_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_remove_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_remove_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_remove_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_remove_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_remove_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklist_remove_ans

// optional .common.errorinfo error = 1;
inline bool blacklist_remove_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_remove_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_remove_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_remove_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_remove_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.blacklist_remove_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_remove_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.blacklist_remove_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_remove_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_remove_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.blacklist_remove_ans.error)
}

// -------------------------------------------------------------------

// auto_trace_info

// optional bytes real_name = 1;
inline bool auto_trace_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auto_trace_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auto_trace_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auto_trace_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& auto_trace_info::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.real_name)
  return *real_name_;
}
inline void auto_trace_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.real_name)
}
inline void auto_trace_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.real_name)
}
inline void auto_trace_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.real_name)
}
inline ::std::string* auto_trace_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.real_name)
  return real_name_;
}
inline ::std::string* auto_trace_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.real_name)
}

// optional bytes mobile_phone = 2;
inline bool auto_trace_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_trace_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_trace_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_trace_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& auto_trace_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.mobile_phone)
  return *mobile_phone_;
}
inline void auto_trace_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.mobile_phone)
}
inline void auto_trace_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.mobile_phone)
}
inline void auto_trace_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.mobile_phone)
}
inline ::std::string* auto_trace_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* auto_trace_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.mobile_phone)
}

// optional bytes id_no = 3;
inline bool auto_trace_info::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auto_trace_info::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auto_trace_info::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auto_trace_info::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& auto_trace_info::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.id_no)
  return *id_no_;
}
inline void auto_trace_info::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.id_no)
}
inline void auto_trace_info::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.id_no)
}
inline void auto_trace_info::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.id_no)
}
inline ::std::string* auto_trace_info::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.id_no)
  return id_no_;
}
inline ::std::string* auto_trace_info::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.id_no)
}

// optional bytes trace_date = 4;
inline bool auto_trace_info::has_trace_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void auto_trace_info::set_has_trace_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void auto_trace_info::clear_has_trace_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void auto_trace_info::clear_trace_date() {
  if (trace_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_date_->clear();
  }
  clear_has_trace_date();
}
inline const ::std::string& auto_trace_info::trace_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.trace_date)
  return *trace_date_;
}
inline void auto_trace_info::set_trace_date(const ::std::string& value) {
  set_has_trace_date();
  if (trace_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_date_ = new ::std::string;
  }
  trace_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.trace_date)
}
inline void auto_trace_info::set_trace_date(const char* value) {
  set_has_trace_date();
  if (trace_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_date_ = new ::std::string;
  }
  trace_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.trace_date)
}
inline void auto_trace_info::set_trace_date(const void* value, size_t size) {
  set_has_trace_date();
  if (trace_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_date_ = new ::std::string;
  }
  trace_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.trace_date)
}
inline ::std::string* auto_trace_info::mutable_trace_date() {
  set_has_trace_date();
  if (trace_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.trace_date)
  return trace_date_;
}
inline ::std::string* auto_trace_info::release_trace_date() {
  clear_has_trace_date();
  if (trace_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trace_date_;
    trace_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_trace_date(::std::string* trace_date) {
  if (trace_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_date_;
  }
  if (trace_date) {
    set_has_trace_date();
    trace_date_ = trace_date;
  } else {
    clear_has_trace_date();
    trace_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.trace_date)
}

// optional bytes own_blacklist_hit = 5;
inline bool auto_trace_info::has_own_blacklist_hit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void auto_trace_info::set_has_own_blacklist_hit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void auto_trace_info::clear_has_own_blacklist_hit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void auto_trace_info::clear_own_blacklist_hit() {
  if (own_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    own_blacklist_hit_->clear();
  }
  clear_has_own_blacklist_hit();
}
inline const ::std::string& auto_trace_info::own_blacklist_hit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.own_blacklist_hit)
  return *own_blacklist_hit_;
}
inline void auto_trace_info::set_own_blacklist_hit(const ::std::string& value) {
  set_has_own_blacklist_hit();
  if (own_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    own_blacklist_hit_ = new ::std::string;
  }
  own_blacklist_hit_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.own_blacklist_hit)
}
inline void auto_trace_info::set_own_blacklist_hit(const char* value) {
  set_has_own_blacklist_hit();
  if (own_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    own_blacklist_hit_ = new ::std::string;
  }
  own_blacklist_hit_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.own_blacklist_hit)
}
inline void auto_trace_info::set_own_blacklist_hit(const void* value, size_t size) {
  set_has_own_blacklist_hit();
  if (own_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    own_blacklist_hit_ = new ::std::string;
  }
  own_blacklist_hit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.own_blacklist_hit)
}
inline ::std::string* auto_trace_info::mutable_own_blacklist_hit() {
  set_has_own_blacklist_hit();
  if (own_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    own_blacklist_hit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.own_blacklist_hit)
  return own_blacklist_hit_;
}
inline ::std::string* auto_trace_info::release_own_blacklist_hit() {
  clear_has_own_blacklist_hit();
  if (own_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = own_blacklist_hit_;
    own_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_own_blacklist_hit(::std::string* own_blacklist_hit) {
  if (own_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete own_blacklist_hit_;
  }
  if (own_blacklist_hit) {
    set_has_own_blacklist_hit();
    own_blacklist_hit_ = own_blacklist_hit;
  } else {
    clear_has_own_blacklist_hit();
    own_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.own_blacklist_hit)
}

// optional bytes qhzh_blacklist_hit = 6;
inline bool auto_trace_info::has_qhzh_blacklist_hit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void auto_trace_info::set_has_qhzh_blacklist_hit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void auto_trace_info::clear_has_qhzh_blacklist_hit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void auto_trace_info::clear_qhzh_blacklist_hit() {
  if (qhzh_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qhzh_blacklist_hit_->clear();
  }
  clear_has_qhzh_blacklist_hit();
}
inline const ::std::string& auto_trace_info::qhzh_blacklist_hit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.qhzh_blacklist_hit)
  return *qhzh_blacklist_hit_;
}
inline void auto_trace_info::set_qhzh_blacklist_hit(const ::std::string& value) {
  set_has_qhzh_blacklist_hit();
  if (qhzh_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qhzh_blacklist_hit_ = new ::std::string;
  }
  qhzh_blacklist_hit_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.qhzh_blacklist_hit)
}
inline void auto_trace_info::set_qhzh_blacklist_hit(const char* value) {
  set_has_qhzh_blacklist_hit();
  if (qhzh_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qhzh_blacklist_hit_ = new ::std::string;
  }
  qhzh_blacklist_hit_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.qhzh_blacklist_hit)
}
inline void auto_trace_info::set_qhzh_blacklist_hit(const void* value, size_t size) {
  set_has_qhzh_blacklist_hit();
  if (qhzh_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qhzh_blacklist_hit_ = new ::std::string;
  }
  qhzh_blacklist_hit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.qhzh_blacklist_hit)
}
inline ::std::string* auto_trace_info::mutable_qhzh_blacklist_hit() {
  set_has_qhzh_blacklist_hit();
  if (qhzh_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qhzh_blacklist_hit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.qhzh_blacklist_hit)
  return qhzh_blacklist_hit_;
}
inline ::std::string* auto_trace_info::release_qhzh_blacklist_hit() {
  clear_has_qhzh_blacklist_hit();
  if (qhzh_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qhzh_blacklist_hit_;
    qhzh_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_qhzh_blacklist_hit(::std::string* qhzh_blacklist_hit) {
  if (qhzh_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qhzh_blacklist_hit_;
  }
  if (qhzh_blacklist_hit) {
    set_has_qhzh_blacklist_hit();
    qhzh_blacklist_hit_ = qhzh_blacklist_hit;
  } else {
    clear_has_qhzh_blacklist_hit();
    qhzh_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.qhzh_blacklist_hit)
}

// optional bytes td_blacklist_hit = 7;
inline bool auto_trace_info::has_td_blacklist_hit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void auto_trace_info::set_has_td_blacklist_hit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void auto_trace_info::clear_has_td_blacklist_hit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void auto_trace_info::clear_td_blacklist_hit() {
  if (td_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    td_blacklist_hit_->clear();
  }
  clear_has_td_blacklist_hit();
}
inline const ::std::string& auto_trace_info::td_blacklist_hit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.td_blacklist_hit)
  return *td_blacklist_hit_;
}
inline void auto_trace_info::set_td_blacklist_hit(const ::std::string& value) {
  set_has_td_blacklist_hit();
  if (td_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    td_blacklist_hit_ = new ::std::string;
  }
  td_blacklist_hit_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.td_blacklist_hit)
}
inline void auto_trace_info::set_td_blacklist_hit(const char* value) {
  set_has_td_blacklist_hit();
  if (td_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    td_blacklist_hit_ = new ::std::string;
  }
  td_blacklist_hit_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.td_blacklist_hit)
}
inline void auto_trace_info::set_td_blacklist_hit(const void* value, size_t size) {
  set_has_td_blacklist_hit();
  if (td_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    td_blacklist_hit_ = new ::std::string;
  }
  td_blacklist_hit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.td_blacklist_hit)
}
inline ::std::string* auto_trace_info::mutable_td_blacklist_hit() {
  set_has_td_blacklist_hit();
  if (td_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    td_blacklist_hit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.td_blacklist_hit)
  return td_blacklist_hit_;
}
inline ::std::string* auto_trace_info::release_td_blacklist_hit() {
  clear_has_td_blacklist_hit();
  if (td_blacklist_hit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = td_blacklist_hit_;
    td_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_td_blacklist_hit(::std::string* td_blacklist_hit) {
  if (td_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete td_blacklist_hit_;
  }
  if (td_blacklist_hit) {
    set_has_td_blacklist_hit();
    td_blacklist_hit_ = td_blacklist_hit;
  } else {
    clear_has_td_blacklist_hit();
    td_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.td_blacklist_hit)
}

// optional bytes area = 8;
inline bool auto_trace_info::has_area() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void auto_trace_info::set_has_area() {
  _has_bits_[0] |= 0x00000080u;
}
inline void auto_trace_info::clear_has_area() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void auto_trace_info::clear_area() {
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_->clear();
  }
  clear_has_area();
}
inline const ::std::string& auto_trace_info::area() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_info.area)
  return *area_;
}
inline void auto_trace_info::set_area(const ::std::string& value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  area_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_info.area)
}
inline void auto_trace_info::set_area(const char* value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  area_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.auto_trace_info.area)
}
inline void auto_trace_info::set_area(const void* value, size_t size) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  area_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.auto_trace_info.area)
}
inline ::std::string* auto_trace_info::mutable_area() {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_info.area)
  return area_;
}
inline ::std::string* auto_trace_info::release_area() {
  clear_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = area_;
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void auto_trace_info::set_allocated_area(::std::string* area) {
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete area_;
  }
  if (area) {
    set_has_area();
    area_ = area;
  } else {
    clear_has_area();
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_info.area)
}

// -------------------------------------------------------------------

// auto_trace_ask

// optional .AFP_main_frame.auto_trace_info trace_info = 1;
inline bool auto_trace_ask::has_trace_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auto_trace_ask::set_has_trace_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auto_trace_ask::clear_has_trace_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auto_trace_ask::clear_trace_info() {
  if (trace_info_ != NULL) trace_info_->::AFP_main_frame::auto_trace_info::Clear();
  clear_has_trace_info();
}
inline const ::AFP_main_frame::auto_trace_info& auto_trace_ask::trace_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ask.trace_info)
  return trace_info_ != NULL ? *trace_info_ : *default_instance_->trace_info_;
}
inline ::AFP_main_frame::auto_trace_info* auto_trace_ask::mutable_trace_info() {
  set_has_trace_info();
  if (trace_info_ == NULL) trace_info_ = new ::AFP_main_frame::auto_trace_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_ask.trace_info)
  return trace_info_;
}
inline ::AFP_main_frame::auto_trace_info* auto_trace_ask::release_trace_info() {
  clear_has_trace_info();
  ::AFP_main_frame::auto_trace_info* temp = trace_info_;
  trace_info_ = NULL;
  return temp;
}
inline void auto_trace_ask::set_allocated_trace_info(::AFP_main_frame::auto_trace_info* trace_info) {
  delete trace_info_;
  trace_info_ = trace_info;
  if (trace_info) {
    set_has_trace_info();
  } else {
    clear_has_trace_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_ask.trace_info)
}

// optional int32 page_num = 2;
inline bool auto_trace_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_trace_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_trace_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_trace_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 auto_trace_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ask.page_num)
  return page_num_;
}
inline void auto_trace_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_ask.page_num)
}

// optional int32 cur_page = 3;
inline bool auto_trace_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auto_trace_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auto_trace_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auto_trace_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 auto_trace_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ask.cur_page)
  return cur_page_;
}
inline void auto_trace_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 4;
inline bool auto_trace_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void auto_trace_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000008u;
}
inline void auto_trace_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void auto_trace_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& auto_trace_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* auto_trace_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* auto_trace_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void auto_trace_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_ask.ask_header)
}

// -------------------------------------------------------------------

// auto_trace_ans

// repeated .AFP_main_frame.auto_trace_info list = 1;
inline int auto_trace_ans::list_size() const {
  return list_.size();
}
inline void auto_trace_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::auto_trace_info& auto_trace_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::auto_trace_info* auto_trace_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::auto_trace_info* auto_trace_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.auto_trace_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::auto_trace_info >&
auto_trace_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.auto_trace_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::auto_trace_info >*
auto_trace_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.auto_trace_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool auto_trace_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auto_trace_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auto_trace_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auto_trace_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 auto_trace_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ans.total_number)
  return total_number_;
}
inline void auto_trace_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.auto_trace_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool auto_trace_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auto_trace_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auto_trace_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auto_trace_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& auto_trace_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.auto_trace_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* auto_trace_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.auto_trace_ans.error)
  return error_;
}
inline ::common::errorinfo* auto_trace_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void auto_trace_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.auto_trace_ans.error)
}

// -------------------------------------------------------------------

// credit_score_interval_info

// optional bytes score_interval = 1;
inline bool credit_score_interval_info::has_score_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_score_interval_info::set_has_score_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_score_interval_info::clear_has_score_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_score_interval_info::clear_score_interval() {
  if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_->clear();
  }
  clear_has_score_interval();
}
inline const ::std::string& credit_score_interval_info::score_interval() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_score_interval_info.score_interval)
  return *score_interval_;
}
inline void credit_score_interval_info::set_score_interval(const ::std::string& value) {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  score_interval_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_score_interval_info.score_interval)
}
inline void credit_score_interval_info::set_score_interval(const char* value) {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  score_interval_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_score_interval_info.score_interval)
}
inline void credit_score_interval_info::set_score_interval(const void* value, size_t size) {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  score_interval_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_score_interval_info.score_interval)
}
inline ::std::string* credit_score_interval_info::mutable_score_interval() {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_score_interval_info.score_interval)
  return score_interval_;
}
inline ::std::string* credit_score_interval_info::release_score_interval() {
  clear_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = score_interval_;
    score_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_score_interval_info::set_allocated_score_interval(::std::string* score_interval) {
  if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete score_interval_;
  }
  if (score_interval) {
    set_has_score_interval();
    score_interval_ = score_interval;
  } else {
    clear_has_score_interval();
    score_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_score_interval_info.score_interval)
}

// optional int32 total_number = 2;
inline bool credit_score_interval_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_score_interval_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_score_interval_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_score_interval_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 credit_score_interval_info::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_score_interval_info.total_number)
  return total_number_;
}
inline void credit_score_interval_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_score_interval_info.total_number)
}

// -------------------------------------------------------------------

// credit_score_statistics_ask

// optional .common.common_ask_header ask_header = 1;
inline bool credit_score_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_score_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_score_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_score_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& credit_score_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_score_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* credit_score_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_score_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* credit_score_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void credit_score_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_score_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// credit_score_statistics_ans

// repeated .AFP_main_frame.credit_score_interval_info list = 1;
inline int credit_score_statistics_ans::list_size() const {
  return list_.size();
}
inline void credit_score_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::credit_score_interval_info& credit_score_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_score_statistics_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::credit_score_interval_info* credit_score_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_score_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::credit_score_interval_info* credit_score_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.credit_score_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_score_interval_info >&
credit_score_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.credit_score_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_score_interval_info >*
credit_score_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.credit_score_statistics_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool credit_score_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_score_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_score_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_score_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_score_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_score_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_score_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_score_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_score_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_score_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_score_statistics_ans.error)
}

// -------------------------------------------------------------------

// credit_ask

// optional bytes real_name = 1;
inline bool credit_ask::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_ask::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_ask::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_ask::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& credit_ask::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.real_name)
  return *real_name_;
}
inline void credit_ask::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.real_name)
}
inline void credit_ask::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_ask.real_name)
}
inline void credit_ask::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_ask.real_name)
}
inline ::std::string* credit_ask::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ask.real_name)
  return real_name_;
}
inline ::std::string* credit_ask::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_ask::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ask.real_name)
}

// optional bytes mobile_phone = 2;
inline bool credit_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& credit_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.mobile_phone)
  return *mobile_phone_;
}
inline void credit_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.mobile_phone)
}
inline void credit_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_ask.mobile_phone)
}
inline void credit_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_ask.mobile_phone)
}
inline ::std::string* credit_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* credit_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ask.mobile_phone)
}

// optional bytes id_no = 3;
inline bool credit_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& credit_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.id_no)
  return *id_no_;
}
inline void credit_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.id_no)
}
inline void credit_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_ask.id_no)
}
inline void credit_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_ask.id_no)
}
inline ::std::string* credit_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ask.id_no)
  return id_no_;
}
inline ::std::string* credit_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ask.id_no)
}

// optional bytes area = 4;
inline bool credit_ask::has_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_ask::set_has_area() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_ask::clear_has_area() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_ask::clear_area() {
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_->clear();
  }
  clear_has_area();
}
inline const ::std::string& credit_ask::area() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.area)
  return *area_;
}
inline void credit_ask::set_area(const ::std::string& value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  area_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.area)
}
inline void credit_ask::set_area(const char* value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  area_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_ask.area)
}
inline void credit_ask::set_area(const void* value, size_t size) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  area_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_ask.area)
}
inline ::std::string* credit_ask::mutable_area() {
  set_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    area_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ask.area)
  return area_;
}
inline ::std::string* credit_ask::release_area() {
  clear_has_area();
  if (area_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = area_;
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_ask::set_allocated_area(::std::string* area) {
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete area_;
  }
  if (area) {
    set_has_area();
    area_ = area;
  } else {
    clear_has_area();
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ask.area)
}

// optional bytes score_interval = 5;
inline bool credit_ask::has_score_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void credit_ask::set_has_score_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void credit_ask::clear_has_score_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void credit_ask::clear_score_interval() {
  if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_->clear();
  }
  clear_has_score_interval();
}
inline const ::std::string& credit_ask::score_interval() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.score_interval)
  return *score_interval_;
}
inline void credit_ask::set_score_interval(const ::std::string& value) {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  score_interval_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.score_interval)
}
inline void credit_ask::set_score_interval(const char* value) {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  score_interval_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_ask.score_interval)
}
inline void credit_ask::set_score_interval(const void* value, size_t size) {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  score_interval_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_ask.score_interval)
}
inline ::std::string* credit_ask::mutable_score_interval() {
  set_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    score_interval_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ask.score_interval)
  return score_interval_;
}
inline ::std::string* credit_ask::release_score_interval() {
  clear_has_score_interval();
  if (score_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = score_interval_;
    score_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_ask::set_allocated_score_interval(::std::string* score_interval) {
  if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete score_interval_;
  }
  if (score_interval) {
    set_has_score_interval();
    score_interval_ = score_interval;
  } else {
    clear_has_score_interval();
    score_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ask.score_interval)
}

// optional int32 page_num = 6;
inline bool credit_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void credit_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void credit_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void credit_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 credit_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.page_num)
  return page_num_;
}
inline void credit_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.page_num)
}

// optional int32 cur_page = 7;
inline bool credit_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void credit_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void credit_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void credit_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 credit_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.cur_page)
  return cur_page_;
}
inline void credit_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 8;
inline bool credit_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void credit_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000080u;
}
inline void credit_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void credit_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& credit_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* credit_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* credit_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void credit_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ask.ask_header)
}

// -------------------------------------------------------------------

// credit_info

// optional .common.user_info user_info = 1;
inline bool credit_info::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_info::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_info::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_info::clear_user_info() {
  if (user_info_ != NULL) user_info_->::common::user_info::Clear();
  clear_has_user_info();
}
inline const ::common::user_info& credit_info::user_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_info.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::common::user_info* credit_info::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::common::user_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_info.user_info)
  return user_info_;
}
inline ::common::user_info* credit_info::release_user_info() {
  clear_has_user_info();
  ::common::user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void credit_info::set_allocated_user_info(::common::user_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_info.user_info)
}

// optional int32 credit_score = 2;
inline bool credit_info::has_credit_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_info::set_has_credit_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_info::clear_has_credit_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_info::clear_credit_score() {
  credit_score_ = 0;
  clear_has_credit_score();
}
inline ::google::protobuf::int32 credit_info::credit_score() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_info.credit_score)
  return credit_score_;
}
inline void credit_info::set_credit_score(::google::protobuf::int32 value) {
  set_has_credit_score();
  credit_score_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_info.credit_score)
}

// -------------------------------------------------------------------

// credit_ans

// repeated .AFP_main_frame.credit_info list = 1;
inline int credit_ans::list_size() const {
  return list_.size();
}
inline void credit_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::credit_info& credit_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::credit_info* credit_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::credit_info* credit_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.credit_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_info >&
credit_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.credit_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::credit_info >*
credit_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.credit_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool credit_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 credit_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ans.total_number)
  return total_number_;
}
inline void credit_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool credit_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_ans.error)
}

// -------------------------------------------------------------------

// verify_model_info

// optional bytes model_no = 1;
inline bool verify_model_info::has_model_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_model_info::set_has_model_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_model_info::clear_has_model_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_model_info::clear_model_no() {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_->clear();
  }
  clear_has_model_no();
}
inline const ::std::string& verify_model_info::model_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_info.model_no)
  return *model_no_;
}
inline void verify_model_info::set_model_no(const ::std::string& value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_model_info.model_no)
}
inline void verify_model_info::set_model_no(const char* value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_model_info.model_no)
}
inline void verify_model_info::set_model_no(const void* value, size_t size) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_model_info.model_no)
}
inline ::std::string* verify_model_info::mutable_model_no() {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_info.model_no)
  return model_no_;
}
inline ::std::string* verify_model_info::release_model_no() {
  clear_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_no_;
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_model_info::set_allocated_model_no(::std::string* model_no) {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_no_;
  }
  if (model_no) {
    set_has_model_no();
    model_no_ = model_no;
  } else {
    clear_has_model_no();
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_model_info.model_no)
}

// optional bytes model_name = 2;
inline bool verify_model_info::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_model_info::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_model_info::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_model_info::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& verify_model_info::model_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_info.model_name)
  return *model_name_;
}
inline void verify_model_info::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_model_info.model_name)
}
inline void verify_model_info::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_model_info.model_name)
}
inline void verify_model_info::set_model_name(const void* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_model_info.model_name)
}
inline ::std::string* verify_model_info::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_info.model_name)
  return model_name_;
}
inline ::std::string* verify_model_info::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_model_info::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_model_info.model_name)
}

// optional int32 total_number = 3;
inline bool verify_model_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_model_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_model_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_model_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 verify_model_info::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_info.total_number)
  return total_number_;
}
inline void verify_model_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_model_info.total_number)
}

// -------------------------------------------------------------------

// verify_detail_info

// optional bytes model_name = 1;
inline bool verify_detail_info::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_detail_info::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_detail_info::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_detail_info::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& verify_detail_info::model_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.model_name)
  return *model_name_;
}
inline void verify_detail_info::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.model_name)
}
inline void verify_detail_info::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_detail_info.model_name)
}
inline void verify_detail_info::set_model_name(const void* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_detail_info.model_name)
}
inline ::std::string* verify_detail_info::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_detail_info.model_name)
  return model_name_;
}
inline ::std::string* verify_detail_info::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_detail_info::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_detail_info.model_name)
}

// optional int32 total_number = 2;
inline bool verify_detail_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_detail_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_detail_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_detail_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 verify_detail_info::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.total_number)
  return total_number_;
}
inline void verify_detail_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.total_number)
}

// optional int32 pass_number = 3;
inline bool verify_detail_info::has_pass_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_detail_info::set_has_pass_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_detail_info::clear_has_pass_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_detail_info::clear_pass_number() {
  pass_number_ = 0;
  clear_has_pass_number();
}
inline ::google::protobuf::int32 verify_detail_info::pass_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.pass_number)
  return pass_number_;
}
inline void verify_detail_info::set_pass_number(::google::protobuf::int32 value) {
  set_has_pass_number();
  pass_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.pass_number)
}

// optional float pass_percent = 4;
inline bool verify_detail_info::has_pass_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void verify_detail_info::set_has_pass_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void verify_detail_info::clear_has_pass_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void verify_detail_info::clear_pass_percent() {
  pass_percent_ = 0;
  clear_has_pass_percent();
}
inline float verify_detail_info::pass_percent() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.pass_percent)
  return pass_percent_;
}
inline void verify_detail_info::set_pass_percent(float value) {
  set_has_pass_percent();
  pass_percent_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.pass_percent)
}

// optional int32 no_pass_number = 5;
inline bool verify_detail_info::has_no_pass_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void verify_detail_info::set_has_no_pass_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void verify_detail_info::clear_has_no_pass_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void verify_detail_info::clear_no_pass_number() {
  no_pass_number_ = 0;
  clear_has_no_pass_number();
}
inline ::google::protobuf::int32 verify_detail_info::no_pass_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.no_pass_number)
  return no_pass_number_;
}
inline void verify_detail_info::set_no_pass_number(::google::protobuf::int32 value) {
  set_has_no_pass_number();
  no_pass_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.no_pass_number)
}

// optional float no_pass_percent = 6;
inline bool verify_detail_info::has_no_pass_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void verify_detail_info::set_has_no_pass_percent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void verify_detail_info::clear_has_no_pass_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void verify_detail_info::clear_no_pass_percent() {
  no_pass_percent_ = 0;
  clear_has_no_pass_percent();
}
inline float verify_detail_info::no_pass_percent() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.no_pass_percent)
  return no_pass_percent_;
}
inline void verify_detail_info::set_no_pass_percent(float value) {
  set_has_no_pass_percent();
  no_pass_percent_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.no_pass_percent)
}

// optional int32 human_review_number = 7;
inline bool verify_detail_info::has_human_review_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void verify_detail_info::set_has_human_review_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void verify_detail_info::clear_has_human_review_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void verify_detail_info::clear_human_review_number() {
  human_review_number_ = 0;
  clear_has_human_review_number();
}
inline ::google::protobuf::int32 verify_detail_info::human_review_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.human_review_number)
  return human_review_number_;
}
inline void verify_detail_info::set_human_review_number(::google::protobuf::int32 value) {
  set_has_human_review_number();
  human_review_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.human_review_number)
}

// optional float human_review_percent = 8;
inline bool verify_detail_info::has_human_review_percent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void verify_detail_info::set_has_human_review_percent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void verify_detail_info::clear_has_human_review_percent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void verify_detail_info::clear_human_review_percent() {
  human_review_percent_ = 0;
  clear_has_human_review_percent();
}
inline float verify_detail_info::human_review_percent() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_info.human_review_percent)
  return human_review_percent_;
}
inline void verify_detail_info::set_human_review_percent(float value) {
  set_has_human_review_percent();
  human_review_percent_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_info.human_review_percent)
}

// -------------------------------------------------------------------

// verify_model_ask

// optional bytes start_date = 1;
inline bool verify_model_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_model_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_model_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_model_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& verify_model_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_ask.start_date)
  return *start_date_;
}
inline void verify_model_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_model_ask.start_date)
}
inline void verify_model_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_model_ask.start_date)
}
inline void verify_model_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_model_ask.start_date)
}
inline ::std::string* verify_model_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_ask.start_date)
  return start_date_;
}
inline ::std::string* verify_model_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_model_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_model_ask.start_date)
}

// optional bytes end_date = 2;
inline bool verify_model_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_model_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_model_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_model_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& verify_model_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_ask.end_date)
  return *end_date_;
}
inline void verify_model_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_model_ask.end_date)
}
inline void verify_model_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_model_ask.end_date)
}
inline void verify_model_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_model_ask.end_date)
}
inline ::std::string* verify_model_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_ask.end_date)
  return end_date_;
}
inline ::std::string* verify_model_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_model_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_model_ask.end_date)
}

// optional .common.common_ask_header ask_header = 3;
inline bool verify_model_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_model_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_model_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_model_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& verify_model_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* verify_model_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* verify_model_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void verify_model_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_model_ask.ask_header)
}

// -------------------------------------------------------------------

// verify_model_ans

// repeated .AFP_main_frame.verify_model_info list = 1;
inline int verify_model_ans::list_size() const {
  return list_.size();
}
inline void verify_model_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::verify_model_info& verify_model_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::verify_model_info* verify_model_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::verify_model_info* verify_model_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.verify_model_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_model_info >&
verify_model_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.verify_model_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_model_info >*
verify_model_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.verify_model_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool verify_model_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_model_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_model_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_model_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& verify_model_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_model_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* verify_model_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_model_ans.error)
  return error_;
}
inline ::common::errorinfo* verify_model_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void verify_model_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_model_ans.error)
}

// -------------------------------------------------------------------

// verify_detail_ask

// optional bytes start_date = 1;
inline bool verify_detail_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_detail_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_detail_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_detail_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& verify_detail_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ask.start_date)
  return *start_date_;
}
inline void verify_detail_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_ask.start_date)
}
inline void verify_detail_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_detail_ask.start_date)
}
inline void verify_detail_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_detail_ask.start_date)
}
inline ::std::string* verify_detail_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_detail_ask.start_date)
  return start_date_;
}
inline ::std::string* verify_detail_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_detail_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_detail_ask.start_date)
}

// optional bytes end_date = 2;
inline bool verify_detail_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_detail_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_detail_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_detail_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& verify_detail_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ask.end_date)
  return *end_date_;
}
inline void verify_detail_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_ask.end_date)
}
inline void verify_detail_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_detail_ask.end_date)
}
inline void verify_detail_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_detail_ask.end_date)
}
inline ::std::string* verify_detail_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_detail_ask.end_date)
  return end_date_;
}
inline ::std::string* verify_detail_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_detail_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_detail_ask.end_date)
}

// optional int32 page_num = 3;
inline bool verify_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 verify_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ask.page_num)
  return page_num_;
}
inline void verify_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_ask.page_num)
}

// optional int32 cur_page = 4;
inline bool verify_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void verify_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void verify_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void verify_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 verify_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ask.cur_page)
  return cur_page_;
}
inline void verify_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 5;
inline bool verify_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void verify_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void verify_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void verify_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& verify_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* verify_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* verify_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void verify_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_detail_ask.ask_header)
}

// -------------------------------------------------------------------

// verify_detail_ans

// repeated .AFP_main_frame.verify_detail_info list = 1;
inline int verify_detail_ans::list_size() const {
  return list_.size();
}
inline void verify_detail_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::verify_detail_info& verify_detail_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::verify_detail_info* verify_detail_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_detail_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::verify_detail_info* verify_detail_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.verify_detail_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_detail_info >&
verify_detail_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.verify_detail_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_detail_info >*
verify_detail_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.verify_detail_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool verify_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 verify_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ans.total_number)
  return total_number_;
}
inline void verify_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_detail_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool verify_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& verify_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* verify_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* verify_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void verify_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_detail_ans.error)
}

// -------------------------------------------------------------------

// afp_verify_info

// optional .AFP_main_frame.verify_model_info model_info = 1;
inline bool afp_verify_info::has_model_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void afp_verify_info::set_has_model_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void afp_verify_info::clear_has_model_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void afp_verify_info::clear_model_info() {
  if (model_info_ != NULL) model_info_->::AFP_main_frame::verify_model_info::Clear();
  clear_has_model_info();
}
inline const ::AFP_main_frame::verify_model_info& afp_verify_info::model_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_verify_info.model_info)
  return model_info_ != NULL ? *model_info_ : *default_instance_->model_info_;
}
inline ::AFP_main_frame::verify_model_info* afp_verify_info::mutable_model_info() {
  set_has_model_info();
  if (model_info_ == NULL) model_info_ = new ::AFP_main_frame::verify_model_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_verify_info.model_info)
  return model_info_;
}
inline ::AFP_main_frame::verify_model_info* afp_verify_info::release_model_info() {
  clear_has_model_info();
  ::AFP_main_frame::verify_model_info* temp = model_info_;
  model_info_ = NULL;
  return temp;
}
inline void afp_verify_info::set_allocated_model_info(::AFP_main_frame::verify_model_info* model_info) {
  delete model_info_;
  model_info_ = model_info;
  if (model_info) {
    set_has_model_info();
  } else {
    clear_has_model_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_verify_info.model_info)
}

// optional bytes verify_result = 2;
inline bool afp_verify_info::has_verify_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void afp_verify_info::set_has_verify_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void afp_verify_info::clear_has_verify_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void afp_verify_info::clear_verify_result() {
  if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_->clear();
  }
  clear_has_verify_result();
}
inline const ::std::string& afp_verify_info::verify_result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_verify_info.verify_result)
  return *verify_result_;
}
inline void afp_verify_info::set_verify_result(const ::std::string& value) {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  verify_result_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_verify_info.verify_result)
}
inline void afp_verify_info::set_verify_result(const char* value) {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  verify_result_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_verify_info.verify_result)
}
inline void afp_verify_info::set_verify_result(const void* value, size_t size) {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  verify_result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_verify_info.verify_result)
}
inline ::std::string* afp_verify_info::mutable_verify_result() {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_verify_info.verify_result)
  return verify_result_;
}
inline ::std::string* afp_verify_info::release_verify_result() {
  clear_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = verify_result_;
    verify_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_verify_info::set_allocated_verify_result(::std::string* verify_result) {
  if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verify_result_;
  }
  if (verify_result) {
    set_has_verify_result();
    verify_result_ = verify_result;
  } else {
    clear_has_verify_result();
    verify_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_verify_info.verify_result)
}

// -------------------------------------------------------------------

// afp_model_verify_ask

// optional bytes real_name = 1;
inline bool afp_model_verify_ask::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void afp_model_verify_ask::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void afp_model_verify_ask::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void afp_model_verify_ask::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& afp_model_verify_ask::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ask.real_name)
  return *real_name_;
}
inline void afp_model_verify_ask::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ask.real_name)
}
inline void afp_model_verify_ask::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ask.real_name)
}
inline void afp_model_verify_ask::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ask.real_name)
}
inline ::std::string* afp_model_verify_ask::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ask.real_name)
  return real_name_;
}
inline ::std::string* afp_model_verify_ask::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_model_verify_ask::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ask.real_name)
}

// optional bytes mobile_phone = 2;
inline bool afp_model_verify_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void afp_model_verify_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void afp_model_verify_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void afp_model_verify_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& afp_model_verify_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ask.mobile_phone)
  return *mobile_phone_;
}
inline void afp_model_verify_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ask.mobile_phone)
}
inline void afp_model_verify_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ask.mobile_phone)
}
inline void afp_model_verify_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ask.mobile_phone)
}
inline ::std::string* afp_model_verify_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* afp_model_verify_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_model_verify_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ask.mobile_phone)
}

// optional bytes id_no = 3;
inline bool afp_model_verify_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void afp_model_verify_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void afp_model_verify_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void afp_model_verify_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& afp_model_verify_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ask.id_no)
  return *id_no_;
}
inline void afp_model_verify_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ask.id_no)
}
inline void afp_model_verify_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ask.id_no)
}
inline void afp_model_verify_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ask.id_no)
}
inline ::std::string* afp_model_verify_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ask.id_no)
  return id_no_;
}
inline ::std::string* afp_model_verify_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_model_verify_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ask.id_no)
}

// repeated bytes model_nos = 4;
inline int afp_model_verify_ask::model_nos_size() const {
  return model_nos_.size();
}
inline void afp_model_verify_ask::clear_model_nos() {
  model_nos_.Clear();
}
inline const ::std::string& afp_model_verify_ask::model_nos(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ask.model_nos)
  return model_nos_.Get(index);
}
inline ::std::string* afp_model_verify_ask::mutable_model_nos(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ask.model_nos)
  return model_nos_.Mutable(index);
}
inline void afp_model_verify_ask::set_model_nos(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ask.model_nos)
  model_nos_.Mutable(index)->assign(value);
}
inline void afp_model_verify_ask::set_model_nos(int index, const char* value) {
  model_nos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ask.model_nos)
}
inline void afp_model_verify_ask::set_model_nos(int index, const void* value, size_t size) {
  model_nos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ask.model_nos)
}
inline ::std::string* afp_model_verify_ask::add_model_nos() {
  return model_nos_.Add();
}
inline void afp_model_verify_ask::add_model_nos(const ::std::string& value) {
  model_nos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AFP_main_frame.afp_model_verify_ask.model_nos)
}
inline void afp_model_verify_ask::add_model_nos(const char* value) {
  model_nos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AFP_main_frame.afp_model_verify_ask.model_nos)
}
inline void afp_model_verify_ask::add_model_nos(const void* value, size_t size) {
  model_nos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AFP_main_frame.afp_model_verify_ask.model_nos)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
afp_model_verify_ask::model_nos() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.afp_model_verify_ask.model_nos)
  return model_nos_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
afp_model_verify_ask::mutable_model_nos() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.afp_model_verify_ask.model_nos)
  return &model_nos_;
}

// optional .common.common_ask_header ask_header = 5;
inline bool afp_model_verify_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void afp_model_verify_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void afp_model_verify_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void afp_model_verify_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& afp_model_verify_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* afp_model_verify_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* afp_model_verify_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void afp_model_verify_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ask.ask_header)
}

// -------------------------------------------------------------------

// afp_model_verify_ans

// optional bytes real_name = 1;
inline bool afp_model_verify_ans::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void afp_model_verify_ans::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void afp_model_verify_ans::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void afp_model_verify_ans::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& afp_model_verify_ans::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ans.real_name)
  return *real_name_;
}
inline void afp_model_verify_ans::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ans.real_name)
}
inline void afp_model_verify_ans::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ans.real_name)
}
inline void afp_model_verify_ans::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ans.real_name)
}
inline ::std::string* afp_model_verify_ans::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ans.real_name)
  return real_name_;
}
inline ::std::string* afp_model_verify_ans::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_model_verify_ans::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ans.real_name)
}

// optional bytes mobile_phone = 2;
inline bool afp_model_verify_ans::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void afp_model_verify_ans::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void afp_model_verify_ans::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void afp_model_verify_ans::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& afp_model_verify_ans::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ans.mobile_phone)
  return *mobile_phone_;
}
inline void afp_model_verify_ans::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ans.mobile_phone)
}
inline void afp_model_verify_ans::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ans.mobile_phone)
}
inline void afp_model_verify_ans::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ans.mobile_phone)
}
inline ::std::string* afp_model_verify_ans::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ans.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* afp_model_verify_ans::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_model_verify_ans::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ans.mobile_phone)
}

// optional bytes id_no = 3;
inline bool afp_model_verify_ans::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void afp_model_verify_ans::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void afp_model_verify_ans::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void afp_model_verify_ans::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& afp_model_verify_ans::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ans.id_no)
  return *id_no_;
}
inline void afp_model_verify_ans::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_model_verify_ans.id_no)
}
inline void afp_model_verify_ans::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_model_verify_ans.id_no)
}
inline void afp_model_verify_ans::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_model_verify_ans.id_no)
}
inline ::std::string* afp_model_verify_ans::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ans.id_no)
  return id_no_;
}
inline ::std::string* afp_model_verify_ans::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_model_verify_ans::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ans.id_no)
}

// repeated .AFP_main_frame.afp_verify_info verify_info = 4;
inline int afp_model_verify_ans::verify_info_size() const {
  return verify_info_.size();
}
inline void afp_model_verify_ans::clear_verify_info() {
  verify_info_.Clear();
}
inline const ::AFP_main_frame::afp_verify_info& afp_model_verify_ans::verify_info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ans.verify_info)
  return verify_info_.Get(index);
}
inline ::AFP_main_frame::afp_verify_info* afp_model_verify_ans::mutable_verify_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ans.verify_info)
  return verify_info_.Mutable(index);
}
inline ::AFP_main_frame::afp_verify_info* afp_model_verify_ans::add_verify_info() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.afp_model_verify_ans.verify_info)
  return verify_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_verify_info >&
afp_model_verify_ans::verify_info() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.afp_model_verify_ans.verify_info)
  return verify_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_verify_info >*
afp_model_verify_ans::mutable_verify_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.afp_model_verify_ans.verify_info)
  return &verify_info_;
}

// optional .common.errorinfo error = 5;
inline bool afp_model_verify_ans::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void afp_model_verify_ans::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void afp_model_verify_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void afp_model_verify_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& afp_model_verify_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_model_verify_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* afp_model_verify_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_model_verify_ans.error)
  return error_;
}
inline ::common::errorinfo* afp_model_verify_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void afp_model_verify_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_model_verify_ans.error)
}

// -------------------------------------------------------------------

// third_platform_verify_info

// optional bytes platform_no = 4;
inline bool third_platform_verify_info::has_platform_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void third_platform_verify_info::set_has_platform_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void third_platform_verify_info::clear_has_platform_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void third_platform_verify_info::clear_platform_no() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_->clear();
  }
  clear_has_platform_no();
}
inline const ::std::string& third_platform_verify_info::platform_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.platform_no)
  return *platform_no_;
}
inline void third_platform_verify_info::set_platform_no(const ::std::string& value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.platform_no)
}
inline void third_platform_verify_info::set_platform_no(const char* value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.platform_no)
}
inline void third_platform_verify_info::set_platform_no(const void* value, size_t size) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.platform_no)
}
inline ::std::string* third_platform_verify_info::mutable_platform_no() {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.platform_no)
  return platform_no_;
}
inline ::std::string* third_platform_verify_info::release_platform_no() {
  clear_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_no_;
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_platform_no(::std::string* platform_no) {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (platform_no) {
    set_has_platform_no();
    platform_no_ = platform_no;
  } else {
    clear_has_platform_no();
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.platform_no)
}

// optional bytes serivce_id = 5;
inline bool third_platform_verify_info::has_serivce_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void third_platform_verify_info::set_has_serivce_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void third_platform_verify_info::clear_has_serivce_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void third_platform_verify_info::clear_serivce_id() {
  if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_->clear();
  }
  clear_has_serivce_id();
}
inline const ::std::string& third_platform_verify_info::serivce_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.serivce_id)
  return *serivce_id_;
}
inline void third_platform_verify_info::set_serivce_id(const ::std::string& value) {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  serivce_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.serivce_id)
}
inline void third_platform_verify_info::set_serivce_id(const char* value) {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  serivce_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.serivce_id)
}
inline void third_platform_verify_info::set_serivce_id(const void* value, size_t size) {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  serivce_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.serivce_id)
}
inline ::std::string* third_platform_verify_info::mutable_serivce_id() {
  set_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serivce_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.serivce_id)
  return serivce_id_;
}
inline ::std::string* third_platform_verify_info::release_serivce_id() {
  clear_has_serivce_id();
  if (serivce_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serivce_id_;
    serivce_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_serivce_id(::std::string* serivce_id) {
  if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serivce_id_;
  }
  if (serivce_id) {
    set_has_serivce_id();
    serivce_id_ = serivce_id;
  } else {
    clear_has_serivce_id();
    serivce_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.serivce_id)
}

// optional bytes param1 = 6;
inline bool third_platform_verify_info::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void third_platform_verify_info::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void third_platform_verify_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void third_platform_verify_info::clear_param1() {
  if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param1_->clear();
  }
  clear_has_param1();
}
inline const ::std::string& third_platform_verify_info::param1() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param1)
  return *param1_;
}
inline void third_platform_verify_info::set_param1(const ::std::string& value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param1)
}
inline void third_platform_verify_info::set_param1(const char* value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param1)
}
inline void third_platform_verify_info::set_param1(const void* value, size_t size) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param1_ = new ::std::string;
  }
  param1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param1)
}
inline ::std::string* third_platform_verify_info::mutable_param1() {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param1)
  return param1_;
}
inline ::std::string* third_platform_verify_info::release_param1() {
  clear_has_param1();
  if (param1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param1_;
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param1(::std::string* param1) {
  if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param1_;
  }
  if (param1) {
    set_has_param1();
    param1_ = param1;
  } else {
    clear_has_param1();
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param1)
}

// optional bytes param2 = 7;
inline bool third_platform_verify_info::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void third_platform_verify_info::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void third_platform_verify_info::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void third_platform_verify_info::clear_param2() {
  if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param2_->clear();
  }
  clear_has_param2();
}
inline const ::std::string& third_platform_verify_info::param2() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param2)
  return *param2_;
}
inline void third_platform_verify_info::set_param2(const ::std::string& value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param2)
}
inline void third_platform_verify_info::set_param2(const char* value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param2)
}
inline void third_platform_verify_info::set_param2(const void* value, size_t size) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param2_ = new ::std::string;
  }
  param2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param2)
}
inline ::std::string* third_platform_verify_info::mutable_param2() {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param2)
  return param2_;
}
inline ::std::string* third_platform_verify_info::release_param2() {
  clear_has_param2();
  if (param2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param2_;
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param2(::std::string* param2) {
  if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param2_;
  }
  if (param2) {
    set_has_param2();
    param2_ = param2;
  } else {
    clear_has_param2();
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param2)
}

// optional bytes param3 = 8;
inline bool third_platform_verify_info::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void third_platform_verify_info::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void third_platform_verify_info::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void third_platform_verify_info::clear_param3() {
  if (param3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param3_->clear();
  }
  clear_has_param3();
}
inline const ::std::string& third_platform_verify_info::param3() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param3)
  return *param3_;
}
inline void third_platform_verify_info::set_param3(const ::std::string& value) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param3_ = new ::std::string;
  }
  param3_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param3)
}
inline void third_platform_verify_info::set_param3(const char* value) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param3_ = new ::std::string;
  }
  param3_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param3)
}
inline void third_platform_verify_info::set_param3(const void* value, size_t size) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param3_ = new ::std::string;
  }
  param3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param3)
}
inline ::std::string* third_platform_verify_info::mutable_param3() {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param3)
  return param3_;
}
inline ::std::string* third_platform_verify_info::release_param3() {
  clear_has_param3();
  if (param3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param3_;
    param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param3(::std::string* param3) {
  if (param3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param3_;
  }
  if (param3) {
    set_has_param3();
    param3_ = param3;
  } else {
    clear_has_param3();
    param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param3)
}

// optional bytes param4 = 9;
inline bool third_platform_verify_info::has_param4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void third_platform_verify_info::set_has_param4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void third_platform_verify_info::clear_has_param4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void third_platform_verify_info::clear_param4() {
  if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param4_->clear();
  }
  clear_has_param4();
}
inline const ::std::string& third_platform_verify_info::param4() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param4)
  return *param4_;
}
inline void third_platform_verify_info::set_param4(const ::std::string& value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param4)
}
inline void third_platform_verify_info::set_param4(const char* value) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param4_ = new ::std::string;
  }
  param4_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param4)
}
inline void third_platform_verify_info::set_param4(const void* value, size_t size) {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param4_ = new ::std::string;
  }
  param4_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param4)
}
inline ::std::string* third_platform_verify_info::mutable_param4() {
  set_has_param4();
  if (param4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param4_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param4)
  return param4_;
}
inline ::std::string* third_platform_verify_info::release_param4() {
  clear_has_param4();
  if (param4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param4_;
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param4(::std::string* param4) {
  if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param4_;
  }
  if (param4) {
    set_has_param4();
    param4_ = param4;
  } else {
    clear_has_param4();
    param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param4)
}

// optional bytes param5 = 10;
inline bool third_platform_verify_info::has_param5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void third_platform_verify_info::set_has_param5() {
  _has_bits_[0] |= 0x00000040u;
}
inline void third_platform_verify_info::clear_has_param5() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void third_platform_verify_info::clear_param5() {
  if (param5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param5_->clear();
  }
  clear_has_param5();
}
inline const ::std::string& third_platform_verify_info::param5() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param5)
  return *param5_;
}
inline void third_platform_verify_info::set_param5(const ::std::string& value) {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param5_ = new ::std::string;
  }
  param5_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param5)
}
inline void third_platform_verify_info::set_param5(const char* value) {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param5_ = new ::std::string;
  }
  param5_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param5)
}
inline void third_platform_verify_info::set_param5(const void* value, size_t size) {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param5_ = new ::std::string;
  }
  param5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param5)
}
inline ::std::string* third_platform_verify_info::mutable_param5() {
  set_has_param5();
  if (param5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param5)
  return param5_;
}
inline ::std::string* third_platform_verify_info::release_param5() {
  clear_has_param5();
  if (param5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param5_;
    param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param5(::std::string* param5) {
  if (param5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param5_;
  }
  if (param5) {
    set_has_param5();
    param5_ = param5;
  } else {
    clear_has_param5();
    param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param5)
}

// optional bytes param6 = 11;
inline bool third_platform_verify_info::has_param6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void third_platform_verify_info::set_has_param6() {
  _has_bits_[0] |= 0x00000080u;
}
inline void third_platform_verify_info::clear_has_param6() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void third_platform_verify_info::clear_param6() {
  if (param6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param6_->clear();
  }
  clear_has_param6();
}
inline const ::std::string& third_platform_verify_info::param6() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param6)
  return *param6_;
}
inline void third_platform_verify_info::set_param6(const ::std::string& value) {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param6_ = new ::std::string;
  }
  param6_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param6)
}
inline void third_platform_verify_info::set_param6(const char* value) {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param6_ = new ::std::string;
  }
  param6_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param6)
}
inline void third_platform_verify_info::set_param6(const void* value, size_t size) {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param6_ = new ::std::string;
  }
  param6_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param6)
}
inline ::std::string* third_platform_verify_info::mutable_param6() {
  set_has_param6();
  if (param6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param6_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param6)
  return param6_;
}
inline ::std::string* third_platform_verify_info::release_param6() {
  clear_has_param6();
  if (param6_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param6_;
    param6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param6(::std::string* param6) {
  if (param6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param6_;
  }
  if (param6) {
    set_has_param6();
    param6_ = param6;
  } else {
    clear_has_param6();
    param6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param6)
}

// optional bytes param7 = 12;
inline bool third_platform_verify_info::has_param7() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void third_platform_verify_info::set_has_param7() {
  _has_bits_[0] |= 0x00000100u;
}
inline void third_platform_verify_info::clear_has_param7() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void third_platform_verify_info::clear_param7() {
  if (param7_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param7_->clear();
  }
  clear_has_param7();
}
inline const ::std::string& third_platform_verify_info::param7() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param7)
  return *param7_;
}
inline void third_platform_verify_info::set_param7(const ::std::string& value) {
  set_has_param7();
  if (param7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param7_ = new ::std::string;
  }
  param7_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param7)
}
inline void third_platform_verify_info::set_param7(const char* value) {
  set_has_param7();
  if (param7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param7_ = new ::std::string;
  }
  param7_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param7)
}
inline void third_platform_verify_info::set_param7(const void* value, size_t size) {
  set_has_param7();
  if (param7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param7_ = new ::std::string;
  }
  param7_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param7)
}
inline ::std::string* third_platform_verify_info::mutable_param7() {
  set_has_param7();
  if (param7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param7_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param7)
  return param7_;
}
inline ::std::string* third_platform_verify_info::release_param7() {
  clear_has_param7();
  if (param7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param7_;
    param7_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param7(::std::string* param7) {
  if (param7_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param7_;
  }
  if (param7) {
    set_has_param7();
    param7_ = param7;
  } else {
    clear_has_param7();
    param7_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param7)
}

// optional bytes param8 = 13;
inline bool third_platform_verify_info::has_param8() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void third_platform_verify_info::set_has_param8() {
  _has_bits_[0] |= 0x00000200u;
}
inline void third_platform_verify_info::clear_has_param8() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void third_platform_verify_info::clear_param8() {
  if (param8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param8_->clear();
  }
  clear_has_param8();
}
inline const ::std::string& third_platform_verify_info::param8() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param8)
  return *param8_;
}
inline void third_platform_verify_info::set_param8(const ::std::string& value) {
  set_has_param8();
  if (param8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param8_ = new ::std::string;
  }
  param8_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param8)
}
inline void third_platform_verify_info::set_param8(const char* value) {
  set_has_param8();
  if (param8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param8_ = new ::std::string;
  }
  param8_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param8)
}
inline void third_platform_verify_info::set_param8(const void* value, size_t size) {
  set_has_param8();
  if (param8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param8_ = new ::std::string;
  }
  param8_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param8)
}
inline ::std::string* third_platform_verify_info::mutable_param8() {
  set_has_param8();
  if (param8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param8_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param8)
  return param8_;
}
inline ::std::string* third_platform_verify_info::release_param8() {
  clear_has_param8();
  if (param8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param8_;
    param8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param8(::std::string* param8) {
  if (param8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param8_;
  }
  if (param8) {
    set_has_param8();
    param8_ = param8;
  } else {
    clear_has_param8();
    param8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param8)
}

// optional bytes param9 = 14;
inline bool third_platform_verify_info::has_param9() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void third_platform_verify_info::set_has_param9() {
  _has_bits_[0] |= 0x00000400u;
}
inline void third_platform_verify_info::clear_has_param9() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void third_platform_verify_info::clear_param9() {
  if (param9_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param9_->clear();
  }
  clear_has_param9();
}
inline const ::std::string& third_platform_verify_info::param9() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param9)
  return *param9_;
}
inline void third_platform_verify_info::set_param9(const ::std::string& value) {
  set_has_param9();
  if (param9_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param9_ = new ::std::string;
  }
  param9_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param9)
}
inline void third_platform_verify_info::set_param9(const char* value) {
  set_has_param9();
  if (param9_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param9_ = new ::std::string;
  }
  param9_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param9)
}
inline void third_platform_verify_info::set_param9(const void* value, size_t size) {
  set_has_param9();
  if (param9_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param9_ = new ::std::string;
  }
  param9_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param9)
}
inline ::std::string* third_platform_verify_info::mutable_param9() {
  set_has_param9();
  if (param9_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param9_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param9)
  return param9_;
}
inline ::std::string* third_platform_verify_info::release_param9() {
  clear_has_param9();
  if (param9_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param9_;
    param9_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param9(::std::string* param9) {
  if (param9_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param9_;
  }
  if (param9) {
    set_has_param9();
    param9_ = param9;
  } else {
    clear_has_param9();
    param9_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param9)
}

// optional bytes param10 = 15;
inline bool third_platform_verify_info::has_param10() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void third_platform_verify_info::set_has_param10() {
  _has_bits_[0] |= 0x00000800u;
}
inline void third_platform_verify_info::clear_has_param10() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void third_platform_verify_info::clear_param10() {
  if (param10_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param10_->clear();
  }
  clear_has_param10();
}
inline const ::std::string& third_platform_verify_info::param10() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.third_platform_verify_info.param10)
  return *param10_;
}
inline void third_platform_verify_info::set_param10(const ::std::string& value) {
  set_has_param10();
  if (param10_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param10_ = new ::std::string;
  }
  param10_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.third_platform_verify_info.param10)
}
inline void third_platform_verify_info::set_param10(const char* value) {
  set_has_param10();
  if (param10_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param10_ = new ::std::string;
  }
  param10_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.third_platform_verify_info.param10)
}
inline void third_platform_verify_info::set_param10(const void* value, size_t size) {
  set_has_param10();
  if (param10_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param10_ = new ::std::string;
  }
  param10_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.third_platform_verify_info.param10)
}
inline ::std::string* third_platform_verify_info::mutable_param10() {
  set_has_param10();
  if (param10_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param10_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.third_platform_verify_info.param10)
  return param10_;
}
inline ::std::string* third_platform_verify_info::release_param10() {
  clear_has_param10();
  if (param10_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param10_;
    param10_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void third_platform_verify_info::set_allocated_param10(::std::string* param10) {
  if (param10_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param10_;
  }
  if (param10) {
    set_has_param10();
    param10_ = param10;
  } else {
    clear_has_param10();
    param10_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.third_platform_verify_info.param10)
}

// -------------------------------------------------------------------

// identity_sync_ask

// optional bytes real_name = 1;
inline bool identity_sync_ask::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void identity_sync_ask::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void identity_sync_ask::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void identity_sync_ask::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& identity_sync_ask::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.identity_sync_ask.real_name)
  return *real_name_;
}
inline void identity_sync_ask::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.identity_sync_ask.real_name)
}
inline void identity_sync_ask::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.identity_sync_ask.real_name)
}
inline void identity_sync_ask::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.identity_sync_ask.real_name)
}
inline ::std::string* identity_sync_ask::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.identity_sync_ask.real_name)
  return real_name_;
}
inline ::std::string* identity_sync_ask::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void identity_sync_ask::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.identity_sync_ask.real_name)
}

// optional bytes mobile_phone = 2;
inline bool identity_sync_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void identity_sync_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void identity_sync_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void identity_sync_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& identity_sync_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.identity_sync_ask.mobile_phone)
  return *mobile_phone_;
}
inline void identity_sync_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.identity_sync_ask.mobile_phone)
}
inline void identity_sync_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.identity_sync_ask.mobile_phone)
}
inline void identity_sync_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.identity_sync_ask.mobile_phone)
}
inline ::std::string* identity_sync_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.identity_sync_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* identity_sync_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void identity_sync_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.identity_sync_ask.mobile_phone)
}

// optional bytes id_no = 3;
inline bool identity_sync_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void identity_sync_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void identity_sync_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void identity_sync_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& identity_sync_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.identity_sync_ask.id_no)
  return *id_no_;
}
inline void identity_sync_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.identity_sync_ask.id_no)
}
inline void identity_sync_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.identity_sync_ask.id_no)
}
inline void identity_sync_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.identity_sync_ask.id_no)
}
inline ::std::string* identity_sync_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.identity_sync_ask.id_no)
  return id_no_;
}
inline ::std::string* identity_sync_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void identity_sync_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.identity_sync_ask.id_no)
}

// optional .common.common_ask_header ask_header = 4;
inline bool identity_sync_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void identity_sync_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000008u;
}
inline void identity_sync_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void identity_sync_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& identity_sync_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.identity_sync_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* identity_sync_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.identity_sync_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* identity_sync_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void identity_sync_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.identity_sync_ask.ask_header)
}

// -------------------------------------------------------------------

// identity_sync_ans

// repeated .AFP_main_frame.third_platform_verify_info verify_info = 1;
inline int identity_sync_ans::verify_info_size() const {
  return verify_info_.size();
}
inline void identity_sync_ans::clear_verify_info() {
  verify_info_.Clear();
}
inline const ::AFP_main_frame::third_platform_verify_info& identity_sync_ans::verify_info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.identity_sync_ans.verify_info)
  return verify_info_.Get(index);
}
inline ::AFP_main_frame::third_platform_verify_info* identity_sync_ans::mutable_verify_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.identity_sync_ans.verify_info)
  return verify_info_.Mutable(index);
}
inline ::AFP_main_frame::third_platform_verify_info* identity_sync_ans::add_verify_info() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.identity_sync_ans.verify_info)
  return verify_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::third_platform_verify_info >&
identity_sync_ans::verify_info() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.identity_sync_ans.verify_info)
  return verify_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::third_platform_verify_info >*
identity_sync_ans::mutable_verify_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.identity_sync_ans.verify_info)
  return &verify_info_;
}

// optional .common.errorinfo error = 2;
inline bool identity_sync_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void identity_sync_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void identity_sync_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void identity_sync_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& identity_sync_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.identity_sync_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* identity_sync_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.identity_sync_ans.error)
  return error_;
}
inline ::common::errorinfo* identity_sync_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void identity_sync_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.identity_sync_ans.error)
}

// -------------------------------------------------------------------

// model_verify_info

// optional bytes service_name = 1;
inline bool model_verify_info::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void model_verify_info::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void model_verify_info::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void model_verify_info::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& model_verify_info::service_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_verify_info.service_name)
  return *service_name_;
}
inline void model_verify_info::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.model_verify_info.service_name)
}
inline void model_verify_info::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.model_verify_info.service_name)
}
inline void model_verify_info::set_service_name(const void* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.model_verify_info.service_name)
}
inline ::std::string* model_verify_info::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_verify_info.service_name)
  return service_name_;
}
inline ::std::string* model_verify_info::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void model_verify_info::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_verify_info.service_name)
}

// optional bytes status = 2;
inline bool model_verify_info::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void model_verify_info::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void model_verify_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void model_verify_info::clear_status() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& model_verify_info::status() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_verify_info.status)
  return *status_;
}
inline void model_verify_info::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.model_verify_info.status)
}
inline void model_verify_info::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.model_verify_info.status)
}
inline void model_verify_info::set_status(const void* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.model_verify_info.status)
}
inline ::std::string* model_verify_info::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_verify_info.status)
  return status_;
}
inline ::std::string* model_verify_info::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void model_verify_info::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_verify_info.status)
}

// -------------------------------------------------------------------

// model_verify_ask

// optional .common.common_ask_header ask_header = 1;
inline bool model_verify_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void model_verify_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void model_verify_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void model_verify_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& model_verify_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_verify_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* model_verify_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_verify_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* model_verify_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void model_verify_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_verify_ask.ask_header)
}

// -------------------------------------------------------------------

// model_verify_ans

// repeated .AFP_main_frame.model_verify_info list = 1;
inline int model_verify_ans::list_size() const {
  return list_.size();
}
inline void model_verify_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::model_verify_info& model_verify_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_verify_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::model_verify_info* model_verify_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_verify_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::model_verify_info* model_verify_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.model_verify_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_verify_info >&
model_verify_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.model_verify_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_verify_info >*
model_verify_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.model_verify_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool model_verify_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void model_verify_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void model_verify_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void model_verify_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& model_verify_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_verify_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* model_verify_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_verify_ans.error)
  return error_;
}
inline ::common::errorinfo* model_verify_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void model_verify_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_verify_ans.error)
}

// -------------------------------------------------------------------

// platform_info_ask

// optional .common.common_ask_header ask_header = 1;
inline bool platform_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void platform_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void platform_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void platform_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& platform_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* platform_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* platform_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void platform_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_info_ask.ask_header)
}

// -------------------------------------------------------------------

// platform_info_ans

// repeated .AFP_main_frame.platform_info list = 1;
inline int platform_info_ans::list_size() const {
  return list_.size();
}
inline void platform_info_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::platform_info& platform_info_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_info_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::platform_info* platform_info_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_info_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::platform_info* platform_info_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.platform_info_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::platform_info >&
platform_info_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.platform_info_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::platform_info >*
platform_info_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.platform_info_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool platform_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void platform_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void platform_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void platform_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& platform_info_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* platform_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_info_ans.error)
  return error_;
}
inline ::common::errorinfo* platform_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void platform_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_info_ans.error)
}

// -------------------------------------------------------------------

// model_hit_statistics_ask

// optional bytes start_date = 1;
inline bool model_hit_statistics_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void model_hit_statistics_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void model_hit_statistics_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void model_hit_statistics_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& model_hit_statistics_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_ask.start_date)
  return *start_date_;
}
inline void model_hit_statistics_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.model_hit_statistics_ask.start_date)
}
inline void model_hit_statistics_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.model_hit_statistics_ask.start_date)
}
inline void model_hit_statistics_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.model_hit_statistics_ask.start_date)
}
inline ::std::string* model_hit_statistics_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_hit_statistics_ask.start_date)
  return start_date_;
}
inline ::std::string* model_hit_statistics_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void model_hit_statistics_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_hit_statistics_ask.start_date)
}

// optional bytes end_date = 2;
inline bool model_hit_statistics_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void model_hit_statistics_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void model_hit_statistics_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void model_hit_statistics_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& model_hit_statistics_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_ask.end_date)
  return *end_date_;
}
inline void model_hit_statistics_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.model_hit_statistics_ask.end_date)
}
inline void model_hit_statistics_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.model_hit_statistics_ask.end_date)
}
inline void model_hit_statistics_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.model_hit_statistics_ask.end_date)
}
inline ::std::string* model_hit_statistics_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_hit_statistics_ask.end_date)
  return end_date_;
}
inline ::std::string* model_hit_statistics_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void model_hit_statistics_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_hit_statistics_ask.end_date)
}

// optional .common.common_ask_header ask_header = 3;
inline bool model_hit_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void model_hit_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void model_hit_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void model_hit_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& model_hit_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* model_hit_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_hit_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* model_hit_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void model_hit_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_hit_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// model_hit_statistics_ans

// repeated .AFP_main_frame.model_hit_statistics_info list = 1;
inline int model_hit_statistics_ans::list_size() const {
  return list_.size();
}
inline void model_hit_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::model_hit_statistics_info& model_hit_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::model_hit_statistics_info* model_hit_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_hit_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::model_hit_statistics_info* model_hit_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.model_hit_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_hit_statistics_info >&
model_hit_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.model_hit_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::model_hit_statistics_info >*
model_hit_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.model_hit_statistics_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool model_hit_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void model_hit_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void model_hit_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void model_hit_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& model_hit_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.model_hit_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* model_hit_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.model_hit_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* model_hit_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void model_hit_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.model_hit_statistics_ans.error)
}

// -------------------------------------------------------------------

// hit_list_ask

// optional bytes start_date = 1;
inline bool hit_list_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_list_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_list_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_list_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& hit_list_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ask.start_date)
  return *start_date_;
}
inline void hit_list_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_list_ask.start_date)
}
inline void hit_list_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_list_ask.start_date)
}
inline void hit_list_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_list_ask.start_date)
}
inline ::std::string* hit_list_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_list_ask.start_date)
  return start_date_;
}
inline ::std::string* hit_list_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_list_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_list_ask.start_date)
}

// optional bytes end_date = 2;
inline bool hit_list_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_list_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_list_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_list_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& hit_list_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ask.end_date)
  return *end_date_;
}
inline void hit_list_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_list_ask.end_date)
}
inline void hit_list_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_list_ask.end_date)
}
inline void hit_list_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_list_ask.end_date)
}
inline ::std::string* hit_list_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_list_ask.end_date)
  return end_date_;
}
inline ::std::string* hit_list_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_list_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_list_ask.end_date)
}

// optional bytes platform_no = 3;
inline bool hit_list_ask::has_platform_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_list_ask::set_has_platform_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_list_ask::clear_has_platform_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_list_ask::clear_platform_no() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_->clear();
  }
  clear_has_platform_no();
}
inline const ::std::string& hit_list_ask::platform_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ask.platform_no)
  return *platform_no_;
}
inline void hit_list_ask::set_platform_no(const ::std::string& value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_list_ask.platform_no)
}
inline void hit_list_ask::set_platform_no(const char* value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_list_ask.platform_no)
}
inline void hit_list_ask::set_platform_no(const void* value, size_t size) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_list_ask.platform_no)
}
inline ::std::string* hit_list_ask::mutable_platform_no() {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_list_ask.platform_no)
  return platform_no_;
}
inline ::std::string* hit_list_ask::release_platform_no() {
  clear_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_no_;
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_list_ask::set_allocated_platform_no(::std::string* platform_no) {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (platform_no) {
    set_has_platform_no();
    platform_no_ = platform_no;
  } else {
    clear_has_platform_no();
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_list_ask.platform_no)
}

// optional int32 page_num = 4;
inline bool hit_list_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hit_list_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hit_list_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hit_list_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 hit_list_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ask.page_num)
  return page_num_;
}
inline void hit_list_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_list_ask.page_num)
}

// optional int32 cur_page = 5;
inline bool hit_list_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hit_list_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hit_list_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hit_list_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 hit_list_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ask.cur_page)
  return cur_page_;
}
inline void hit_list_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_list_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 6;
inline bool hit_list_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hit_list_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hit_list_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hit_list_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& hit_list_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* hit_list_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_list_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* hit_list_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void hit_list_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_list_ask.ask_header)
}

// -------------------------------------------------------------------

// hit_list_ans

// repeated .AFP_main_frame.hit_user_info list = 1;
inline int hit_list_ans::list_size() const {
  return list_.size();
}
inline void hit_list_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::hit_user_info& hit_list_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::hit_user_info* hit_list_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_list_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::hit_user_info* hit_list_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.hit_list_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_info >&
hit_list_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.hit_list_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_info >*
hit_list_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.hit_list_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool hit_list_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_list_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_list_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_list_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 hit_list_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ans.total_number)
  return total_number_;
}
inline void hit_list_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_list_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool hit_list_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_list_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_list_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_list_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& hit_list_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_list_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* hit_list_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_list_ans.error)
  return error_;
}
inline ::common::errorinfo* hit_list_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void hit_list_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_list_ans.error)
}

// -------------------------------------------------------------------

// hit_user_property_analyze_ask

// optional bytes property = 1;
inline bool hit_user_property_analyze_ask::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_user_property_analyze_ask::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_user_property_analyze_ask::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_user_property_analyze_ask::clear_property() {
  if (property_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_->clear();
  }
  clear_has_property();
}
inline const ::std::string& hit_user_property_analyze_ask::property() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_property_analyze_ask.property)
  return *property_;
}
inline void hit_user_property_analyze_ask::set_property(const ::std::string& value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_ = new ::std::string;
  }
  property_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_user_property_analyze_ask.property)
}
inline void hit_user_property_analyze_ask::set_property(const char* value) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_ = new ::std::string;
  }
  property_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_user_property_analyze_ask.property)
}
inline void hit_user_property_analyze_ask::set_property(const void* value, size_t size) {
  set_has_property();
  if (property_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_ = new ::std::string;
  }
  property_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_user_property_analyze_ask.property)
}
inline ::std::string* hit_user_property_analyze_ask::mutable_property() {
  set_has_property();
  if (property_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    property_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_property_analyze_ask.property)
  return property_;
}
inline ::std::string* hit_user_property_analyze_ask::release_property() {
  clear_has_property();
  if (property_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = property_;
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_user_property_analyze_ask::set_allocated_property(::std::string* property) {
  if (property_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete property_;
  }
  if (property) {
    set_has_property();
    property_ = property;
  } else {
    clear_has_property();
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_property_analyze_ask.property)
}

// optional .common.common_ask_header ask_header = 2;
inline bool hit_user_property_analyze_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_user_property_analyze_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_user_property_analyze_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_user_property_analyze_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& hit_user_property_analyze_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_property_analyze_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* hit_user_property_analyze_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_property_analyze_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* hit_user_property_analyze_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void hit_user_property_analyze_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_property_analyze_ask.ask_header)
}

// -------------------------------------------------------------------

// hit_user_property_analyze_ans

// repeated .AFP_main_frame.hit_user_analyze_info list = 1;
inline int hit_user_property_analyze_ans::list_size() const {
  return list_.size();
}
inline void hit_user_property_analyze_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::hit_user_analyze_info& hit_user_property_analyze_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_property_analyze_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::hit_user_analyze_info* hit_user_property_analyze_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_property_analyze_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::hit_user_analyze_info* hit_user_property_analyze_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.hit_user_property_analyze_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_analyze_info >&
hit_user_property_analyze_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.hit_user_property_analyze_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_user_analyze_info >*
hit_user_property_analyze_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.hit_user_property_analyze_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool hit_user_property_analyze_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_user_property_analyze_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_user_property_analyze_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_user_property_analyze_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& hit_user_property_analyze_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_user_property_analyze_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* hit_user_property_analyze_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_user_property_analyze_ans.error)
  return error_;
}
inline ::common::errorinfo* hit_user_property_analyze_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void hit_user_property_analyze_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_user_property_analyze_ans.error)
}

// -------------------------------------------------------------------

// hit_rule_analyze_ask

// optional bytes platform_no = 1;
inline bool hit_rule_analyze_ask::has_platform_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_rule_analyze_ask::set_has_platform_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_rule_analyze_ask::clear_has_platform_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_rule_analyze_ask::clear_platform_no() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_->clear();
  }
  clear_has_platform_no();
}
inline const ::std::string& hit_rule_analyze_ask::platform_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ask.platform_no)
  return *platform_no_;
}
inline void hit_rule_analyze_ask::set_platform_no(const ::std::string& value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_ask.platform_no)
}
inline void hit_rule_analyze_ask::set_platform_no(const char* value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_rule_analyze_ask.platform_no)
}
inline void hit_rule_analyze_ask::set_platform_no(const void* value, size_t size) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_rule_analyze_ask.platform_no)
}
inline ::std::string* hit_rule_analyze_ask::mutable_platform_no() {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_rule_analyze_ask.platform_no)
  return platform_no_;
}
inline ::std::string* hit_rule_analyze_ask::release_platform_no() {
  clear_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_no_;
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_rule_analyze_ask::set_allocated_platform_no(::std::string* platform_no) {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (platform_no) {
    set_has_platform_no();
    platform_no_ = platform_no;
  } else {
    clear_has_platform_no();
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_rule_analyze_ask.platform_no)
}

// optional int32 page_num = 2;
inline bool hit_rule_analyze_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_rule_analyze_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_rule_analyze_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_rule_analyze_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 hit_rule_analyze_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ask.page_num)
  return page_num_;
}
inline void hit_rule_analyze_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_ask.page_num)
}

// optional int32 cur_page = 3;
inline bool hit_rule_analyze_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_rule_analyze_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_rule_analyze_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_rule_analyze_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 hit_rule_analyze_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ask.cur_page)
  return cur_page_;
}
inline void hit_rule_analyze_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 4;
inline bool hit_rule_analyze_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hit_rule_analyze_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hit_rule_analyze_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hit_rule_analyze_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& hit_rule_analyze_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* hit_rule_analyze_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_rule_analyze_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* hit_rule_analyze_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void hit_rule_analyze_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_rule_analyze_ask.ask_header)
}

// -------------------------------------------------------------------

// hit_rule_analyze_ans

// repeated .AFP_main_frame.hit_rule_analyze_info list = 1;
inline int hit_rule_analyze_ans::list_size() const {
  return list_.size();
}
inline void hit_rule_analyze_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::hit_rule_analyze_info& hit_rule_analyze_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::hit_rule_analyze_info* hit_rule_analyze_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_rule_analyze_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::hit_rule_analyze_info* hit_rule_analyze_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.hit_rule_analyze_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_rule_analyze_info >&
hit_rule_analyze_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.hit_rule_analyze_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_rule_analyze_info >*
hit_rule_analyze_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.hit_rule_analyze_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool hit_rule_analyze_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_rule_analyze_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_rule_analyze_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_rule_analyze_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 hit_rule_analyze_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ans.total_number)
  return total_number_;
}
inline void hit_rule_analyze_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_rule_analyze_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool hit_rule_analyze_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_rule_analyze_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_rule_analyze_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_rule_analyze_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& hit_rule_analyze_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_rule_analyze_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* hit_rule_analyze_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_rule_analyze_ans.error)
  return error_;
}
inline ::common::errorinfo* hit_rule_analyze_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void hit_rule_analyze_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_rule_analyze_ans.error)
}

// -------------------------------------------------------------------

// hit_detail_ask

// optional bytes start_date = 1;
inline bool hit_detail_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hit_detail_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hit_detail_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hit_detail_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& hit_detail_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ask.start_date)
  return *start_date_;
}
inline void hit_detail_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_ask.start_date)
}
inline void hit_detail_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_detail_ask.start_date)
}
inline void hit_detail_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_detail_ask.start_date)
}
inline ::std::string* hit_detail_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_ask.start_date)
  return start_date_;
}
inline ::std::string* hit_detail_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_detail_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_ask.start_date)
}

// optional bytes end_date = 2;
inline bool hit_detail_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_detail_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_detail_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_detail_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& hit_detail_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ask.end_date)
  return *end_date_;
}
inline void hit_detail_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_ask.end_date)
}
inline void hit_detail_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_detail_ask.end_date)
}
inline void hit_detail_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_detail_ask.end_date)
}
inline ::std::string* hit_detail_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_ask.end_date)
  return end_date_;
}
inline ::std::string* hit_detail_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_detail_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_ask.end_date)
}

// optional bytes platform_no = 3;
inline bool hit_detail_ask::has_platform_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_detail_ask::set_has_platform_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_detail_ask::clear_has_platform_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_detail_ask::clear_platform_no() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_->clear();
  }
  clear_has_platform_no();
}
inline const ::std::string& hit_detail_ask::platform_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ask.platform_no)
  return *platform_no_;
}
inline void hit_detail_ask::set_platform_no(const ::std::string& value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_ask.platform_no)
}
inline void hit_detail_ask::set_platform_no(const char* value) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.hit_detail_ask.platform_no)
}
inline void hit_detail_ask::set_platform_no(const void* value, size_t size) {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  platform_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.hit_detail_ask.platform_no)
}
inline ::std::string* hit_detail_ask::mutable_platform_no() {
  set_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_ask.platform_no)
  return platform_no_;
}
inline ::std::string* hit_detail_ask::release_platform_no() {
  clear_has_platform_no();
  if (platform_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_no_;
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void hit_detail_ask::set_allocated_platform_no(::std::string* platform_no) {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (platform_no) {
    set_has_platform_no();
    platform_no_ = platform_no;
  } else {
    clear_has_platform_no();
    platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_ask.platform_no)
}

// optional int32 page_num = 4;
inline bool hit_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hit_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hit_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hit_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 hit_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ask.page_num)
  return page_num_;
}
inline void hit_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_ask.page_num)
}

// optional int32 cur_page = 5;
inline bool hit_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hit_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hit_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hit_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 hit_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ask.cur_page)
  return cur_page_;
}
inline void hit_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 6;
inline bool hit_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hit_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hit_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hit_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& hit_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* hit_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* hit_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void hit_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_ask.ask_header)
}

// -------------------------------------------------------------------

// hit_detail_ans

// repeated .AFP_main_frame.hit_detail_info list = 1;
inline int hit_detail_ans::list_size() const {
  return list_.size();
}
inline void hit_detail_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::hit_detail_info& hit_detail_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::hit_detail_info* hit_detail_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::hit_detail_info* hit_detail_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.hit_detail_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_detail_info >&
hit_detail_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.hit_detail_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::hit_detail_info >*
hit_detail_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.hit_detail_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool hit_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hit_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hit_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hit_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 hit_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ans.total_number)
  return total_number_;
}
inline void hit_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.hit_detail_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool hit_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hit_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hit_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hit_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& hit_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.hit_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* hit_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.hit_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* hit_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void hit_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.hit_detail_ans.error)
}

// -------------------------------------------------------------------

// user_location_track_info

// optional bytes time = 1;
inline bool user_location_track_info::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_location_track_info::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_location_track_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_location_track_info::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& user_location_track_info::time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_info.time)
  return *time_;
}
inline void user_location_track_info::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_info.time)
}
inline void user_location_track_info::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_info.time)
}
inline void user_location_track_info::set_time(const void* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_info.time)
}
inline ::std::string* user_location_track_info::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_info.time)
  return time_;
}
inline ::std::string* user_location_track_info::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_info::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_info.time)
}

// optional float longitude = 2;
inline bool user_location_track_info::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_location_track_info::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_location_track_info::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_location_track_info::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float user_location_track_info::longitude() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_info.longitude)
  return longitude_;
}
inline void user_location_track_info::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_info.longitude)
}

// optional float latitude = 3;
inline bool user_location_track_info::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_location_track_info::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_location_track_info::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_location_track_info::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float user_location_track_info::latitude() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_info.latitude)
  return latitude_;
}
inline void user_location_track_info::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_info.latitude)
}

// optional bytes location_name = 4;
inline bool user_location_track_info::has_location_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_location_track_info::set_has_location_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_location_track_info::clear_has_location_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_location_track_info::clear_location_name() {
  if (location_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_name_->clear();
  }
  clear_has_location_name();
}
inline const ::std::string& user_location_track_info::location_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_info.location_name)
  return *location_name_;
}
inline void user_location_track_info::set_location_name(const ::std::string& value) {
  set_has_location_name();
  if (location_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_name_ = new ::std::string;
  }
  location_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_info.location_name)
}
inline void user_location_track_info::set_location_name(const char* value) {
  set_has_location_name();
  if (location_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_name_ = new ::std::string;
  }
  location_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_info.location_name)
}
inline void user_location_track_info::set_location_name(const void* value, size_t size) {
  set_has_location_name();
  if (location_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_name_ = new ::std::string;
  }
  location_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_info.location_name)
}
inline ::std::string* user_location_track_info::mutable_location_name() {
  set_has_location_name();
  if (location_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_info.location_name)
  return location_name_;
}
inline ::std::string* user_location_track_info::release_location_name() {
  clear_has_location_name();
  if (location_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = location_name_;
    location_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_info::set_allocated_location_name(::std::string* location_name) {
  if (location_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_name_;
  }
  if (location_name) {
    set_has_location_name();
    location_name_ = location_name;
  } else {
    clear_has_location_name();
    location_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_info.location_name)
}

// -------------------------------------------------------------------

// user_location_track_ask

// optional bytes start_date = 1;
inline bool user_location_track_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_location_track_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_location_track_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_location_track_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& user_location_track_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ask.start_date)
  return *start_date_;
}
inline void user_location_track_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_ask.start_date)
}
inline void user_location_track_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_ask.start_date)
}
inline void user_location_track_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_ask.start_date)
}
inline ::std::string* user_location_track_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ask.start_date)
  return start_date_;
}
inline ::std::string* user_location_track_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ask.start_date)
}

// optional bytes end_date = 2;
inline bool user_location_track_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_location_track_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_location_track_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_location_track_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& user_location_track_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ask.end_date)
  return *end_date_;
}
inline void user_location_track_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_ask.end_date)
}
inline void user_location_track_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_ask.end_date)
}
inline void user_location_track_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_ask.end_date)
}
inline ::std::string* user_location_track_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ask.end_date)
  return end_date_;
}
inline ::std::string* user_location_track_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ask.end_date)
}

// optional bytes identity_card = 3;
inline bool user_location_track_ask::has_identity_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_location_track_ask::set_has_identity_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_location_track_ask::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_location_track_ask::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& user_location_track_ask::identity_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ask.identity_card)
  return *identity_card_;
}
inline void user_location_track_ask::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_ask.identity_card)
}
inline void user_location_track_ask::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_ask.identity_card)
}
inline void user_location_track_ask::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_ask.identity_card)
}
inline ::std::string* user_location_track_ask::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ask.identity_card)
  return identity_card_;
}
inline ::std::string* user_location_track_ask::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_ask::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ask.identity_card)
}

// optional bytes mobile_phone = 4;
inline bool user_location_track_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_location_track_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_location_track_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_location_track_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_location_track_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ask.mobile_phone)
  return *mobile_phone_;
}
inline void user_location_track_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_ask.mobile_phone)
}
inline void user_location_track_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_ask.mobile_phone)
}
inline void user_location_track_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_ask.mobile_phone)
}
inline ::std::string* user_location_track_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_location_track_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ask.mobile_phone)
}

// optional bytes is_normal = 5;
inline bool user_location_track_ask::has_is_normal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_location_track_ask::set_has_is_normal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_location_track_ask::clear_has_is_normal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_location_track_ask::clear_is_normal() {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_->clear();
  }
  clear_has_is_normal();
}
inline const ::std::string& user_location_track_ask::is_normal() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ask.is_normal)
  return *is_normal_;
}
inline void user_location_track_ask::set_is_normal(const ::std::string& value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_location_track_ask.is_normal)
}
inline void user_location_track_ask::set_is_normal(const char* value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_location_track_ask.is_normal)
}
inline void user_location_track_ask::set_is_normal(const void* value, size_t size) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_location_track_ask.is_normal)
}
inline ::std::string* user_location_track_ask::mutable_is_normal() {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ask.is_normal)
  return is_normal_;
}
inline ::std::string* user_location_track_ask::release_is_normal() {
  clear_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = is_normal_;
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_location_track_ask::set_allocated_is_normal(::std::string* is_normal) {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (is_normal) {
    set_has_is_normal();
    is_normal_ = is_normal;
  } else {
    clear_has_is_normal();
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ask.is_normal)
}

// optional .common.common_ask_header ask_header = 6;
inline bool user_location_track_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_location_track_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_location_track_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_location_track_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_location_track_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_location_track_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_location_track_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_location_track_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ask.ask_header)
}

// -------------------------------------------------------------------

// user_location_track_ans

// repeated .AFP_main_frame.user_location_track_info list = 1;
inline int user_location_track_ans::list_size() const {
  return list_.size();
}
inline void user_location_track_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::user_location_track_info& user_location_track_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::user_location_track_info* user_location_track_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::user_location_track_info* user_location_track_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.user_location_track_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::user_location_track_info >&
user_location_track_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.user_location_track_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::user_location_track_info >*
user_location_track_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.user_location_track_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool user_location_track_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_location_track_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_location_track_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_location_track_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_location_track_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_location_track_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_location_track_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_location_track_ans.error)
  return error_;
}
inline ::common::errorinfo* user_location_track_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_location_track_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_location_track_ans.error)
}

// -------------------------------------------------------------------

// by_inquirers

// optional bytes identity_card = 1;
inline bool by_inquirers::has_identity_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void by_inquirers::set_has_identity_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void by_inquirers::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void by_inquirers::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& by_inquirers::identity_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.by_inquirers.identity_card)
  return *identity_card_;
}
inline void by_inquirers::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.by_inquirers.identity_card)
}
inline void by_inquirers::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.by_inquirers.identity_card)
}
inline void by_inquirers::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.by_inquirers.identity_card)
}
inline ::std::string* by_inquirers::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.by_inquirers.identity_card)
  return identity_card_;
}
inline ::std::string* by_inquirers::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void by_inquirers::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.by_inquirers.identity_card)
}

// optional bytes mobile_phone = 2;
inline bool by_inquirers::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void by_inquirers::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void by_inquirers::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void by_inquirers::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& by_inquirers::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.by_inquirers.mobile_phone)
  return *mobile_phone_;
}
inline void by_inquirers::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.by_inquirers.mobile_phone)
}
inline void by_inquirers::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.by_inquirers.mobile_phone)
}
inline void by_inquirers::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.by_inquirers.mobile_phone)
}
inline ::std::string* by_inquirers::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.by_inquirers.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* by_inquirers::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void by_inquirers::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.by_inquirers.mobile_phone)
}

// optional bytes real_name = 3;
inline bool by_inquirers::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void by_inquirers::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void by_inquirers::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void by_inquirers::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& by_inquirers::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.by_inquirers.real_name)
  return *real_name_;
}
inline void by_inquirers::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.by_inquirers.real_name)
}
inline void by_inquirers::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.by_inquirers.real_name)
}
inline void by_inquirers::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.by_inquirers.real_name)
}
inline ::std::string* by_inquirers::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.by_inquirers.real_name)
  return real_name_;
}
inline ::std::string* by_inquirers::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void by_inquirers::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.by_inquirers.real_name)
}

// -------------------------------------------------------------------

// user_info_ask

// repeated .AFP_main_frame.by_inquirers inquirers = 1;
inline int user_info_ask::inquirers_size() const {
  return inquirers_.size();
}
inline void user_info_ask::clear_inquirers() {
  inquirers_.Clear();
}
inline const ::AFP_main_frame::by_inquirers& user_info_ask::inquirers(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_info_ask.inquirers)
  return inquirers_.Get(index);
}
inline ::AFP_main_frame::by_inquirers* user_info_ask::mutable_inquirers(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_info_ask.inquirers)
  return inquirers_.Mutable(index);
}
inline ::AFP_main_frame::by_inquirers* user_info_ask::add_inquirers() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.user_info_ask.inquirers)
  return inquirers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::by_inquirers >&
user_info_ask::inquirers() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.user_info_ask.inquirers)
  return inquirers_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::by_inquirers >*
user_info_ask::mutable_inquirers() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.user_info_ask.inquirers)
  return &inquirers_;
}

// optional .common.common_ask_header ask_header = 2;
inline bool user_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_info_ask.ask_header)
}

// optional bytes is_normal = 3;
inline bool user_info_ask::has_is_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_info_ask::set_has_is_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_info_ask::clear_has_is_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_info_ask::clear_is_normal() {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_->clear();
  }
  clear_has_is_normal();
}
inline const ::std::string& user_info_ask::is_normal() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_info_ask.is_normal)
  return *is_normal_;
}
inline void user_info_ask::set_is_normal(const ::std::string& value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.user_info_ask.is_normal)
}
inline void user_info_ask::set_is_normal(const char* value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.user_info_ask.is_normal)
}
inline void user_info_ask::set_is_normal(const void* value, size_t size) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.user_info_ask.is_normal)
}
inline ::std::string* user_info_ask::mutable_is_normal() {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_info_ask.is_normal)
  return is_normal_;
}
inline ::std::string* user_info_ask::release_is_normal() {
  clear_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = is_normal_;
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ask::set_allocated_is_normal(::std::string* is_normal) {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (is_normal) {
    set_has_is_normal();
    is_normal_ = is_normal;
  } else {
    clear_has_is_normal();
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_info_ask.is_normal)
}

// -------------------------------------------------------------------

// user_info_ans

// repeated .common.user_info user = 1;
inline int user_info_ans::user_size() const {
  return user_.size();
}
inline void user_info_ans::clear_user() {
  user_.Clear();
}
inline const ::common::user_info& user_info_ans::user(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_info_ans.user)
  return user_.Get(index);
}
inline ::common::user_info* user_info_ans::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_info_ans.user)
  return user_.Mutable(index);
}
inline ::common::user_info* user_info_ans::add_user() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.user_info_ans.user)
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::user_info >&
user_info_ans::user() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.user_info_ans.user)
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::user_info >*
user_info_ans::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.user_info_ans.user)
  return &user_;
}

// optional .common.errorinfo error = 2;
inline bool user_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_info_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_info_ans.error)
  return error_;
}
inline ::common::errorinfo* user_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_info_ans.error)
}

// -------------------------------------------------------------------

// AFP_LandedAccount

// optional bytes nickname = 1;
inline bool AFP_LandedAccount::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AFP_LandedAccount::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AFP_LandedAccount::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AFP_LandedAccount::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& AFP_LandedAccount::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.nickname)
  return *nickname_;
}
inline void AFP_LandedAccount::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.nickname)
}
inline void AFP_LandedAccount::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.nickname)
}
inline void AFP_LandedAccount::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.nickname)
}
inline ::std::string* AFP_LandedAccount::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.nickname)
  return nickname_;
}
inline ::std::string* AFP_LandedAccount::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.nickname)
}

// optional bytes real_name = 2;
inline bool AFP_LandedAccount::has_real_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AFP_LandedAccount::set_has_real_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AFP_LandedAccount::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AFP_LandedAccount::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& AFP_LandedAccount::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.real_name)
  return *real_name_;
}
inline void AFP_LandedAccount::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.real_name)
}
inline void AFP_LandedAccount::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.real_name)
}
inline void AFP_LandedAccount::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.real_name)
}
inline ::std::string* AFP_LandedAccount::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.real_name)
  return real_name_;
}
inline ::std::string* AFP_LandedAccount::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.real_name)
}

// optional bytes id = 3;
inline bool AFP_LandedAccount::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AFP_LandedAccount::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AFP_LandedAccount::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AFP_LandedAccount::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AFP_LandedAccount::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.id)
  return *id_;
}
inline void AFP_LandedAccount::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.id)
}
inline void AFP_LandedAccount::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.id)
}
inline void AFP_LandedAccount::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.id)
}
inline ::std::string* AFP_LandedAccount::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.id)
  return id_;
}
inline ::std::string* AFP_LandedAccount::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.id)
}

// optional .common.sex sex = 4;
inline bool AFP_LandedAccount::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AFP_LandedAccount::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AFP_LandedAccount::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AFP_LandedAccount::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::common::sex AFP_LandedAccount::sex() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.sex)
  return static_cast< ::common::sex >(sex_);
}
inline void AFP_LandedAccount::set_sex(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.sex)
}

// optional int32 age = 5;
inline bool AFP_LandedAccount::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AFP_LandedAccount::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AFP_LandedAccount::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AFP_LandedAccount::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 AFP_LandedAccount::age() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.age)
  return age_;
}
inline void AFP_LandedAccount::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.age)
}

// optional bytes avatar = 6;
inline bool AFP_LandedAccount::has_avatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AFP_LandedAccount::set_has_avatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AFP_LandedAccount::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AFP_LandedAccount::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& AFP_LandedAccount::avatar() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.avatar)
  return *avatar_;
}
inline void AFP_LandedAccount::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.avatar)
}
inline void AFP_LandedAccount::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.avatar)
}
inline void AFP_LandedAccount::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.avatar)
}
inline ::std::string* AFP_LandedAccount::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.avatar)
  return avatar_;
}
inline ::std::string* AFP_LandedAccount::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.avatar)
}

// optional bytes common_terminal = 7;
inline bool AFP_LandedAccount::has_common_terminal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AFP_LandedAccount::set_has_common_terminal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AFP_LandedAccount::clear_has_common_terminal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AFP_LandedAccount::clear_common_terminal() {
  if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_->clear();
  }
  clear_has_common_terminal();
}
inline const ::std::string& AFP_LandedAccount::common_terminal() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.common_terminal)
  return *common_terminal_;
}
inline void AFP_LandedAccount::set_common_terminal(const ::std::string& value) {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  common_terminal_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.common_terminal)
}
inline void AFP_LandedAccount::set_common_terminal(const char* value) {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  common_terminal_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.common_terminal)
}
inline void AFP_LandedAccount::set_common_terminal(const void* value, size_t size) {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  common_terminal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.common_terminal)
}
inline ::std::string* AFP_LandedAccount::mutable_common_terminal() {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.common_terminal)
  return common_terminal_;
}
inline ::std::string* AFP_LandedAccount::release_common_terminal() {
  clear_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = common_terminal_;
    common_terminal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_common_terminal(::std::string* common_terminal) {
  if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete common_terminal_;
  }
  if (common_terminal) {
    set_has_common_terminal();
    common_terminal_ = common_terminal;
  } else {
    clear_has_common_terminal();
    common_terminal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.common_terminal)
}

// optional bytes mobile_phone = 8;
inline bool AFP_LandedAccount::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AFP_LandedAccount::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AFP_LandedAccount::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AFP_LandedAccount::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& AFP_LandedAccount::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.mobile_phone)
  return *mobile_phone_;
}
inline void AFP_LandedAccount::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.mobile_phone)
}
inline void AFP_LandedAccount::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.mobile_phone)
}
inline void AFP_LandedAccount::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.mobile_phone)
}
inline ::std::string* AFP_LandedAccount::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* AFP_LandedAccount::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.mobile_phone)
}

// optional bool is_overdue = 9;
inline bool AFP_LandedAccount::has_is_overdue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AFP_LandedAccount::set_has_is_overdue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AFP_LandedAccount::clear_has_is_overdue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AFP_LandedAccount::clear_is_overdue() {
  is_overdue_ = false;
  clear_has_is_overdue();
}
inline bool AFP_LandedAccount::is_overdue() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.is_overdue)
  return is_overdue_;
}
inline void AFP_LandedAccount::set_is_overdue(bool value) {
  set_has_is_overdue();
  is_overdue_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.is_overdue)
}

// optional bytes last_login_time = 10;
inline bool AFP_LandedAccount::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AFP_LandedAccount::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AFP_LandedAccount::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AFP_LandedAccount::clear_last_login_time() {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_->clear();
  }
  clear_has_last_login_time();
}
inline const ::std::string& AFP_LandedAccount::last_login_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.AFP_LandedAccount.last_login_time)
  return *last_login_time_;
}
inline void AFP_LandedAccount::set_last_login_time(const ::std::string& value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.AFP_LandedAccount.last_login_time)
}
inline void AFP_LandedAccount::set_last_login_time(const char* value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.AFP_LandedAccount.last_login_time)
}
inline void AFP_LandedAccount::set_last_login_time(const void* value, size_t size) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.AFP_LandedAccount.last_login_time)
}
inline ::std::string* AFP_LandedAccount::mutable_last_login_time() {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.AFP_LandedAccount.last_login_time)
  return last_login_time_;
}
inline ::std::string* AFP_LandedAccount::release_last_login_time() {
  clear_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_login_time_;
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AFP_LandedAccount::set_allocated_last_login_time(::std::string* last_login_time) {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (last_login_time) {
    set_has_last_login_time();
    last_login_time_ = last_login_time;
  } else {
    clear_has_last_login_time();
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.AFP_LandedAccount.last_login_time)
}

// -------------------------------------------------------------------

// phone_contacts_info

// optional bytes note_name = 1;
inline bool phone_contacts_info::has_note_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phone_contacts_info::set_has_note_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phone_contacts_info::clear_has_note_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phone_contacts_info::clear_note_name() {
  if (note_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_name_->clear();
  }
  clear_has_note_name();
}
inline const ::std::string& phone_contacts_info::note_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_info.note_name)
  return *note_name_;
}
inline void phone_contacts_info::set_note_name(const ::std::string& value) {
  set_has_note_name();
  if (note_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_name_ = new ::std::string;
  }
  note_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_info.note_name)
}
inline void phone_contacts_info::set_note_name(const char* value) {
  set_has_note_name();
  if (note_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_name_ = new ::std::string;
  }
  note_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_contacts_info.note_name)
}
inline void phone_contacts_info::set_note_name(const void* value, size_t size) {
  set_has_note_name();
  if (note_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_name_ = new ::std::string;
  }
  note_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_contacts_info.note_name)
}
inline ::std::string* phone_contacts_info::mutable_note_name() {
  set_has_note_name();
  if (note_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_info.note_name)
  return note_name_;
}
inline ::std::string* phone_contacts_info::release_note_name() {
  clear_has_note_name();
  if (note_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = note_name_;
    note_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_contacts_info::set_allocated_note_name(::std::string* note_name) {
  if (note_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_name_;
  }
  if (note_name) {
    set_has_note_name();
    note_name_ = note_name;
  } else {
    clear_has_note_name();
    note_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_info.note_name)
}

// optional bytes mobile_phone = 2;
inline bool phone_contacts_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phone_contacts_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phone_contacts_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phone_contacts_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& phone_contacts_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_info.mobile_phone)
  return *mobile_phone_;
}
inline void phone_contacts_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_info.mobile_phone)
}
inline void phone_contacts_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_contacts_info.mobile_phone)
}
inline void phone_contacts_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_contacts_info.mobile_phone)
}
inline ::std::string* phone_contacts_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* phone_contacts_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_contacts_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_info.mobile_phone)
}

// optional bool is_kinship = 3;
inline bool phone_contacts_info::has_is_kinship() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phone_contacts_info::set_has_is_kinship() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phone_contacts_info::clear_has_is_kinship() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phone_contacts_info::clear_is_kinship() {
  is_kinship_ = false;
  clear_has_is_kinship();
}
inline bool phone_contacts_info::is_kinship() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_info.is_kinship)
  return is_kinship_;
}
inline void phone_contacts_info::set_is_kinship(bool value) {
  set_has_is_kinship();
  is_kinship_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_info.is_kinship)
}

// optional bool is_removed = 4;
inline bool phone_contacts_info::has_is_removed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void phone_contacts_info::set_has_is_removed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void phone_contacts_info::clear_has_is_removed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void phone_contacts_info::clear_is_removed() {
  is_removed_ = false;
  clear_has_is_removed();
}
inline bool phone_contacts_info::is_removed() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_info.is_removed)
  return is_removed_;
}
inline void phone_contacts_info::set_is_removed(bool value) {
  set_has_is_removed();
  is_removed_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_info.is_removed)
}

// optional bytes remove_time = 5;
inline bool phone_contacts_info::has_remove_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void phone_contacts_info::set_has_remove_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void phone_contacts_info::clear_has_remove_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void phone_contacts_info::clear_remove_time() {
  if (remove_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remove_time_->clear();
  }
  clear_has_remove_time();
}
inline const ::std::string& phone_contacts_info::remove_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_info.remove_time)
  return *remove_time_;
}
inline void phone_contacts_info::set_remove_time(const ::std::string& value) {
  set_has_remove_time();
  if (remove_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remove_time_ = new ::std::string;
  }
  remove_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_info.remove_time)
}
inline void phone_contacts_info::set_remove_time(const char* value) {
  set_has_remove_time();
  if (remove_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remove_time_ = new ::std::string;
  }
  remove_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_contacts_info.remove_time)
}
inline void phone_contacts_info::set_remove_time(const void* value, size_t size) {
  set_has_remove_time();
  if (remove_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remove_time_ = new ::std::string;
  }
  remove_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_contacts_info.remove_time)
}
inline ::std::string* phone_contacts_info::mutable_remove_time() {
  set_has_remove_time();
  if (remove_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remove_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_info.remove_time)
  return remove_time_;
}
inline ::std::string* phone_contacts_info::release_remove_time() {
  clear_has_remove_time();
  if (remove_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remove_time_;
    remove_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_contacts_info::set_allocated_remove_time(::std::string* remove_time) {
  if (remove_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remove_time_;
  }
  if (remove_time) {
    set_has_remove_time();
    remove_time_ = remove_time;
  } else {
    clear_has_remove_time();
    remove_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_info.remove_time)
}

// -------------------------------------------------------------------

// platform_register_user_info

// optional bytes adressbook_name = 1;
inline bool platform_register_user_info::has_adressbook_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void platform_register_user_info::set_has_adressbook_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void platform_register_user_info::clear_has_adressbook_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void platform_register_user_info::clear_adressbook_name() {
  if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_->clear();
  }
  clear_has_adressbook_name();
}
inline const ::std::string& platform_register_user_info::adressbook_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_register_user_info.adressbook_name)
  return *adressbook_name_;
}
inline void platform_register_user_info::set_adressbook_name(const ::std::string& value) {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  adressbook_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_register_user_info.adressbook_name)
}
inline void platform_register_user_info::set_adressbook_name(const char* value) {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  adressbook_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.platform_register_user_info.adressbook_name)
}
inline void platform_register_user_info::set_adressbook_name(const void* value, size_t size) {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  adressbook_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.platform_register_user_info.adressbook_name)
}
inline ::std::string* platform_register_user_info::mutable_adressbook_name() {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_register_user_info.adressbook_name)
  return adressbook_name_;
}
inline ::std::string* platform_register_user_info::release_adressbook_name() {
  clear_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adressbook_name_;
    adressbook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_register_user_info::set_allocated_adressbook_name(::std::string* adressbook_name) {
  if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_name_;
  }
  if (adressbook_name) {
    set_has_adressbook_name();
    adressbook_name_ = adressbook_name;
  } else {
    clear_has_adressbook_name();
    adressbook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_register_user_info.adressbook_name)
}

// optional bytes phone_num = 2;
inline bool platform_register_user_info::has_phone_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void platform_register_user_info::set_has_phone_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void platform_register_user_info::clear_has_phone_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void platform_register_user_info::clear_phone_num() {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_->clear();
  }
  clear_has_phone_num();
}
inline const ::std::string& platform_register_user_info::phone_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_register_user_info.phone_num)
  return *phone_num_;
}
inline void platform_register_user_info::set_phone_num(const ::std::string& value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_register_user_info.phone_num)
}
inline void platform_register_user_info::set_phone_num(const char* value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.platform_register_user_info.phone_num)
}
inline void platform_register_user_info::set_phone_num(const void* value, size_t size) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.platform_register_user_info.phone_num)
}
inline ::std::string* platform_register_user_info::mutable_phone_num() {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.platform_register_user_info.phone_num)
  return phone_num_;
}
inline ::std::string* platform_register_user_info::release_phone_num() {
  clear_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_num_;
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_register_user_info::set_allocated_phone_num(::std::string* phone_num) {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (phone_num) {
    set_has_phone_num();
    phone_num_ = phone_num;
  } else {
    clear_has_phone_num();
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.platform_register_user_info.phone_num)
}

// optional .AFP_main_frame.platform_type platfom_type_enum = 3;
inline bool platform_register_user_info::has_platfom_type_enum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void platform_register_user_info::set_has_platfom_type_enum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void platform_register_user_info::clear_has_platfom_type_enum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void platform_register_user_info::clear_platfom_type_enum() {
  platfom_type_enum_ = 1;
  clear_has_platfom_type_enum();
}
inline ::AFP_main_frame::platform_type platform_register_user_info::platfom_type_enum() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_register_user_info.platfom_type_enum)
  return static_cast< ::AFP_main_frame::platform_type >(platfom_type_enum_);
}
inline void platform_register_user_info::set_platfom_type_enum(::AFP_main_frame::platform_type value) {
  assert(::AFP_main_frame::platform_type_IsValid(value));
  set_has_platfom_type_enum();
  platfom_type_enum_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_register_user_info.platfom_type_enum)
}

// optional .AFP_main_frame.overdue_type overdue_type_enum = 4;
inline bool platform_register_user_info::has_overdue_type_enum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void platform_register_user_info::set_has_overdue_type_enum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void platform_register_user_info::clear_has_overdue_type_enum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void platform_register_user_info::clear_overdue_type_enum() {
  overdue_type_enum_ = 1;
  clear_has_overdue_type_enum();
}
inline ::AFP_main_frame::overdue_type platform_register_user_info::overdue_type_enum() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.platform_register_user_info.overdue_type_enum)
  return static_cast< ::AFP_main_frame::overdue_type >(overdue_type_enum_);
}
inline void platform_register_user_info::set_overdue_type_enum(::AFP_main_frame::overdue_type value) {
  assert(::AFP_main_frame::overdue_type_IsValid(value));
  set_has_overdue_type_enum();
  overdue_type_enum_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.platform_register_user_info.overdue_type_enum)
}

// -------------------------------------------------------------------

// phone_info

// optional bytes imei = 1;
inline bool phone_info::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phone_info::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phone_info::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phone_info::clear_imei() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& phone_info::imei() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.imei)
  return *imei_;
}
inline void phone_info::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_info.imei)
}
inline void phone_info::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_info.imei)
}
inline void phone_info::set_imei(const void* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_info.imei)
}
inline ::std::string* phone_info::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_info.imei)
  return imei_;
}
inline ::std::string* phone_info::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_info::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_info.imei)
}

// optional bytes brand_model = 2;
inline bool phone_info::has_brand_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phone_info::set_has_brand_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phone_info::clear_has_brand_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phone_info::clear_brand_model() {
  if (brand_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_model_->clear();
  }
  clear_has_brand_model();
}
inline const ::std::string& phone_info::brand_model() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.brand_model)
  return *brand_model_;
}
inline void phone_info::set_brand_model(const ::std::string& value) {
  set_has_brand_model();
  if (brand_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_model_ = new ::std::string;
  }
  brand_model_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_info.brand_model)
}
inline void phone_info::set_brand_model(const char* value) {
  set_has_brand_model();
  if (brand_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_model_ = new ::std::string;
  }
  brand_model_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_info.brand_model)
}
inline void phone_info::set_brand_model(const void* value, size_t size) {
  set_has_brand_model();
  if (brand_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_model_ = new ::std::string;
  }
  brand_model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_info.brand_model)
}
inline ::std::string* phone_info::mutable_brand_model() {
  set_has_brand_model();
  if (brand_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    brand_model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_info.brand_model)
  return brand_model_;
}
inline ::std::string* phone_info::release_brand_model() {
  clear_has_brand_model();
  if (brand_model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = brand_model_;
    brand_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_info::set_allocated_brand_model(::std::string* brand_model) {
  if (brand_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_model_;
  }
  if (brand_model) {
    set_has_brand_model();
    brand_model_ = brand_model;
  } else {
    clear_has_brand_model();
    brand_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_info.brand_model)
}

// optional bool is_common_use = 3;
inline bool phone_info::has_is_common_use() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phone_info::set_has_is_common_use() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phone_info::clear_has_is_common_use() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phone_info::clear_is_common_use() {
  is_common_use_ = false;
  clear_has_is_common_use();
}
inline bool phone_info::is_common_use() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.is_common_use)
  return is_common_use_;
}
inline void phone_info::set_is_common_use(bool value) {
  set_has_is_common_use();
  is_common_use_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_info.is_common_use)
}

// optional bytes last_login_time = 4;
inline bool phone_info::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void phone_info::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void phone_info::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void phone_info::clear_last_login_time() {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_->clear();
  }
  clear_has_last_login_time();
}
inline const ::std::string& phone_info::last_login_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.last_login_time)
  return *last_login_time_;
}
inline void phone_info::set_last_login_time(const ::std::string& value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_info.last_login_time)
}
inline void phone_info::set_last_login_time(const char* value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_info.last_login_time)
}
inline void phone_info::set_last_login_time(const void* value, size_t size) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_info.last_login_time)
}
inline ::std::string* phone_info::mutable_last_login_time() {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_info.last_login_time)
  return last_login_time_;
}
inline ::std::string* phone_info::release_last_login_time() {
  clear_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_login_time_;
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_info::set_allocated_last_login_time(::std::string* last_login_time) {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (last_login_time) {
    set_has_last_login_time();
    last_login_time_ = last_login_time;
  } else {
    clear_has_last_login_time();
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_info.last_login_time)
}

// repeated .AFP_main_frame.phone_contacts_info info = 5;
inline int phone_info::info_size() const {
  return info_.size();
}
inline void phone_info::clear_info() {
  info_.Clear();
}
inline const ::AFP_main_frame::phone_contacts_info& phone_info::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.info)
  return info_.Get(index);
}
inline ::AFP_main_frame::phone_contacts_info* phone_info::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_info.info)
  return info_.Mutable(index);
}
inline ::AFP_main_frame::phone_contacts_info* phone_info::add_info() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.phone_info.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_contacts_info >&
phone_info::info() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.phone_info.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_contacts_info >*
phone_info::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.phone_info.info)
  return &info_;
}

// repeated .AFP_main_frame.AFP_LandedAccount landedaccount = 6;
inline int phone_info::landedaccount_size() const {
  return landedaccount_.size();
}
inline void phone_info::clear_landedaccount() {
  landedaccount_.Clear();
}
inline const ::AFP_main_frame::AFP_LandedAccount& phone_info::landedaccount(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.landedaccount)
  return landedaccount_.Get(index);
}
inline ::AFP_main_frame::AFP_LandedAccount* phone_info::mutable_landedaccount(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_info.landedaccount)
  return landedaccount_.Mutable(index);
}
inline ::AFP_main_frame::AFP_LandedAccount* phone_info::add_landedaccount() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.phone_info.landedaccount)
  return landedaccount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::AFP_LandedAccount >&
phone_info::landedaccount() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.phone_info.landedaccount)
  return landedaccount_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::AFP_LandedAccount >*
phone_info::mutable_landedaccount() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.phone_info.landedaccount)
  return &landedaccount_;
}

// repeated .DW_Location.platform_register_user_info platform_register_user = 7;
inline int phone_info::platform_register_user_size() const {
  return platform_register_user_.size();
}
inline void phone_info::clear_platform_register_user() {
  platform_register_user_.Clear();
}
inline const ::DW_Location::platform_register_user_info& phone_info::platform_register_user(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_info.platform_register_user)
  return platform_register_user_.Get(index);
}
inline ::DW_Location::platform_register_user_info* phone_info::mutable_platform_register_user(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_info.platform_register_user)
  return platform_register_user_.Mutable(index);
}
inline ::DW_Location::platform_register_user_info* phone_info::add_platform_register_user() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.phone_info.platform_register_user)
  return platform_register_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >&
phone_info::platform_register_user() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.phone_info.platform_register_user)
  return platform_register_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >*
phone_info::mutable_platform_register_user() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.phone_info.platform_register_user)
  return &platform_register_user_;
}

// -------------------------------------------------------------------

// yuliu_common_user_info

// optional bytes name = 1;
inline bool yuliu_common_user_info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yuliu_common_user_info::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yuliu_common_user_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yuliu_common_user_info::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& yuliu_common_user_info::name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_common_user_info.name)
  return *name_;
}
inline void yuliu_common_user_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_common_user_info.name)
}
inline void yuliu_common_user_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_common_user_info.name)
}
inline void yuliu_common_user_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_common_user_info.name)
}
inline ::std::string* yuliu_common_user_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_common_user_info.name)
  return name_;
}
inline ::std::string* yuliu_common_user_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_common_user_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_common_user_info.name)
}

// optional bytes phone_num = 2;
inline bool yuliu_common_user_info::has_phone_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yuliu_common_user_info::set_has_phone_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yuliu_common_user_info::clear_has_phone_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yuliu_common_user_info::clear_phone_num() {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_->clear();
  }
  clear_has_phone_num();
}
inline const ::std::string& yuliu_common_user_info::phone_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_common_user_info.phone_num)
  return *phone_num_;
}
inline void yuliu_common_user_info::set_phone_num(const ::std::string& value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_common_user_info.phone_num)
}
inline void yuliu_common_user_info::set_phone_num(const char* value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_common_user_info.phone_num)
}
inline void yuliu_common_user_info::set_phone_num(const void* value, size_t size) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_common_user_info.phone_num)
}
inline ::std::string* yuliu_common_user_info::mutable_phone_num() {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_common_user_info.phone_num)
  return phone_num_;
}
inline ::std::string* yuliu_common_user_info::release_phone_num() {
  clear_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_num_;
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_common_user_info::set_allocated_phone_num(::std::string* phone_num) {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (phone_num) {
    set_has_phone_num();
    phone_num_ = phone_num;
  } else {
    clear_has_phone_num();
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_common_user_info.phone_num)
}

// optional bytes relation = 3;
inline bool yuliu_common_user_info::has_relation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yuliu_common_user_info::set_has_relation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yuliu_common_user_info::clear_has_relation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yuliu_common_user_info::clear_relation() {
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_->clear();
  }
  clear_has_relation();
}
inline const ::std::string& yuliu_common_user_info::relation() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_common_user_info.relation)
  return *relation_;
}
inline void yuliu_common_user_info::set_relation(const ::std::string& value) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_common_user_info.relation)
}
inline void yuliu_common_user_info::set_relation(const char* value) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_common_user_info.relation)
}
inline void yuliu_common_user_info::set_relation(const void* value, size_t size) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_common_user_info.relation)
}
inline ::std::string* yuliu_common_user_info::mutable_relation() {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_common_user_info.relation)
  return relation_;
}
inline ::std::string* yuliu_common_user_info::release_relation() {
  clear_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relation_;
    relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_common_user_info::set_allocated_relation(::std::string* relation) {
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relation_;
  }
  if (relation) {
    set_has_relation();
    relation_ = relation;
  } else {
    clear_has_relation();
    relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_common_user_info.relation)
}

// -------------------------------------------------------------------

// yuliu_platform_user_info

// optional bytes avatar = 1;
inline bool yuliu_platform_user_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yuliu_platform_user_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yuliu_platform_user_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yuliu_platform_user_info::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& yuliu_platform_user_info::avatar() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.avatar)
  return *avatar_;
}
inline void yuliu_platform_user_info::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.avatar)
}
inline void yuliu_platform_user_info::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_platform_user_info.avatar)
}
inline void yuliu_platform_user_info::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_platform_user_info.avatar)
}
inline ::std::string* yuliu_platform_user_info::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_platform_user_info.avatar)
  return avatar_;
}
inline ::std::string* yuliu_platform_user_info::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_platform_user_info.avatar)
}

// optional bytes user_nickname = 2;
inline bool yuliu_platform_user_info::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yuliu_platform_user_info::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yuliu_platform_user_info::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yuliu_platform_user_info::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& yuliu_platform_user_info::user_nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.user_nickname)
  return *user_nickname_;
}
inline void yuliu_platform_user_info::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.user_nickname)
}
inline void yuliu_platform_user_info::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_platform_user_info.user_nickname)
}
inline void yuliu_platform_user_info::set_user_nickname(const void* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_platform_user_info.user_nickname)
}
inline ::std::string* yuliu_platform_user_info::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_platform_user_info.user_nickname)
  return user_nickname_;
}
inline ::std::string* yuliu_platform_user_info::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_platform_user_info.user_nickname)
}

// optional bytes real_name = 3;
inline bool yuliu_platform_user_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yuliu_platform_user_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yuliu_platform_user_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yuliu_platform_user_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& yuliu_platform_user_info::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.real_name)
  return *real_name_;
}
inline void yuliu_platform_user_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.real_name)
}
inline void yuliu_platform_user_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_platform_user_info.real_name)
}
inline void yuliu_platform_user_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_platform_user_info.real_name)
}
inline ::std::string* yuliu_platform_user_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_platform_user_info.real_name)
  return real_name_;
}
inline ::std::string* yuliu_platform_user_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_platform_user_info.real_name)
}

// optional .common.sex sex_type = 4;
inline bool yuliu_platform_user_info::has_sex_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yuliu_platform_user_info::set_has_sex_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yuliu_platform_user_info::clear_has_sex_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yuliu_platform_user_info::clear_sex_type() {
  sex_type_ = 1;
  clear_has_sex_type();
}
inline ::common::sex yuliu_platform_user_info::sex_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.sex_type)
  return static_cast< ::common::sex >(sex_type_);
}
inline void yuliu_platform_user_info::set_sex_type(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex_type();
  sex_type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.sex_type)
}

// optional .AFP_main_frame.overdue_type type = 5;
inline bool yuliu_platform_user_info::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yuliu_platform_user_info::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yuliu_platform_user_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yuliu_platform_user_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::AFP_main_frame::overdue_type yuliu_platform_user_info::type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.type)
  return static_cast< ::AFP_main_frame::overdue_type >(type_);
}
inline void yuliu_platform_user_info::set_type(::AFP_main_frame::overdue_type value) {
  assert(::AFP_main_frame::overdue_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.type)
}

// optional float chonghe_rate = 6;
inline bool yuliu_platform_user_info::has_chonghe_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yuliu_platform_user_info::set_has_chonghe_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yuliu_platform_user_info::clear_has_chonghe_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yuliu_platform_user_info::clear_chonghe_rate() {
  chonghe_rate_ = 0;
  clear_has_chonghe_rate();
}
inline float yuliu_platform_user_info::chonghe_rate() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.chonghe_rate)
  return chonghe_rate_;
}
inline void yuliu_platform_user_info::set_chonghe_rate(float value) {
  set_has_chonghe_rate();
  chonghe_rate_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.chonghe_rate)
}

// optional bool is_in_adressbook = 7;
inline bool yuliu_platform_user_info::has_is_in_adressbook() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yuliu_platform_user_info::set_has_is_in_adressbook() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yuliu_platform_user_info::clear_has_is_in_adressbook() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yuliu_platform_user_info::clear_is_in_adressbook() {
  is_in_adressbook_ = false;
  clear_has_is_in_adressbook();
}
inline bool yuliu_platform_user_info::is_in_adressbook() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.is_in_adressbook)
  return is_in_adressbook_;
}
inline void yuliu_platform_user_info::set_is_in_adressbook(bool value) {
  set_has_is_in_adressbook();
  is_in_adressbook_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.is_in_adressbook)
}

// optional bytes adressbook_remark_name = 8;
inline bool yuliu_platform_user_info::has_adressbook_remark_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yuliu_platform_user_info::set_has_adressbook_remark_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yuliu_platform_user_info::clear_has_adressbook_remark_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yuliu_platform_user_info::clear_adressbook_remark_name() {
  if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_->clear();
  }
  clear_has_adressbook_remark_name();
}
inline const ::std::string& yuliu_platform_user_info::adressbook_remark_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.adressbook_remark_name)
  return *adressbook_remark_name_;
}
inline void yuliu_platform_user_info::set_adressbook_remark_name(const ::std::string& value) {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  adressbook_remark_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.yuliu_platform_user_info.adressbook_remark_name)
}
inline void yuliu_platform_user_info::set_adressbook_remark_name(const char* value) {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  adressbook_remark_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.yuliu_platform_user_info.adressbook_remark_name)
}
inline void yuliu_platform_user_info::set_adressbook_remark_name(const void* value, size_t size) {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  adressbook_remark_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.yuliu_platform_user_info.adressbook_remark_name)
}
inline ::std::string* yuliu_platform_user_info::mutable_adressbook_remark_name() {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_platform_user_info.adressbook_remark_name)
  return adressbook_remark_name_;
}
inline ::std::string* yuliu_platform_user_info::release_adressbook_remark_name() {
  clear_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adressbook_remark_name_;
    adressbook_remark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_adressbook_remark_name(::std::string* adressbook_remark_name) {
  if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_remark_name_;
  }
  if (adressbook_remark_name) {
    set_has_adressbook_remark_name();
    adressbook_remark_name_ = adressbook_remark_name;
  } else {
    clear_has_adressbook_remark_name();
    adressbook_remark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_platform_user_info.adressbook_remark_name)
}

// optional .AFP_main_frame.yuliu_common_user_info comm_info = 9;
inline bool yuliu_platform_user_info::has_comm_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void yuliu_platform_user_info::set_has_comm_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void yuliu_platform_user_info::clear_has_comm_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void yuliu_platform_user_info::clear_comm_info() {
  if (comm_info_ != NULL) comm_info_->::AFP_main_frame::yuliu_common_user_info::Clear();
  clear_has_comm_info();
}
inline const ::AFP_main_frame::yuliu_common_user_info& yuliu_platform_user_info::comm_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.yuliu_platform_user_info.comm_info)
  return comm_info_ != NULL ? *comm_info_ : *default_instance_->comm_info_;
}
inline ::AFP_main_frame::yuliu_common_user_info* yuliu_platform_user_info::mutable_comm_info() {
  set_has_comm_info();
  if (comm_info_ == NULL) comm_info_ = new ::AFP_main_frame::yuliu_common_user_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.yuliu_platform_user_info.comm_info)
  return comm_info_;
}
inline ::AFP_main_frame::yuliu_common_user_info* yuliu_platform_user_info::release_comm_info() {
  clear_has_comm_info();
  ::AFP_main_frame::yuliu_common_user_info* temp = comm_info_;
  comm_info_ = NULL;
  return temp;
}
inline void yuliu_platform_user_info::set_allocated_comm_info(::AFP_main_frame::yuliu_common_user_info* comm_info) {
  delete comm_info_;
  comm_info_ = comm_info;
  if (comm_info) {
    set_has_comm_info();
  } else {
    clear_has_comm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.yuliu_platform_user_info.comm_info)
}

// -------------------------------------------------------------------

// phones_info

// optional bytes nickname = 1;
inline bool phones_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phones_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phones_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phones_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& phones_info::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.nickname)
  return *nickname_;
}
inline void phones_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.nickname)
}
inline void phones_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.nickname)
}
inline void phones_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.nickname)
}
inline ::std::string* phones_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.nickname)
  return nickname_;
}
inline ::std::string* phones_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.nickname)
}

// optional bytes real_name = 2;
inline bool phones_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phones_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phones_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phones_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& phones_info::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.real_name)
  return *real_name_;
}
inline void phones_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.real_name)
}
inline void phones_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.real_name)
}
inline void phones_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.real_name)
}
inline ::std::string* phones_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.real_name)
  return real_name_;
}
inline ::std::string* phones_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.real_name)
}

// optional bytes id = 3;
inline bool phones_info::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phones_info::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phones_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phones_info::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& phones_info::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.id)
  return *id_;
}
inline void phones_info::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.id)
}
inline void phones_info::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.id)
}
inline void phones_info::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.id)
}
inline ::std::string* phones_info::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.id)
  return id_;
}
inline ::std::string* phones_info::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.id)
}

// optional .common.sex sex = 4;
inline bool phones_info::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void phones_info::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void phones_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void phones_info::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::common::sex phones_info::sex() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.sex)
  return static_cast< ::common::sex >(sex_);
}
inline void phones_info::set_sex(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.sex)
}

// optional int32 age = 5;
inline bool phones_info::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void phones_info::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void phones_info::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void phones_info::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 phones_info::age() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.age)
  return age_;
}
inline void phones_info::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.age)
}

// optional bytes avatar = 6;
inline bool phones_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void phones_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void phones_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void phones_info::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& phones_info::avatar() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.avatar)
  return *avatar_;
}
inline void phones_info::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.avatar)
}
inline void phones_info::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.avatar)
}
inline void phones_info::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.avatar)
}
inline ::std::string* phones_info::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.avatar)
  return avatar_;
}
inline ::std::string* phones_info::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.avatar)
}

// optional bytes common_terminal = 7;
inline bool phones_info::has_common_terminal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void phones_info::set_has_common_terminal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void phones_info::clear_has_common_terminal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void phones_info::clear_common_terminal() {
  if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_->clear();
  }
  clear_has_common_terminal();
}
inline const ::std::string& phones_info::common_terminal() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.common_terminal)
  return *common_terminal_;
}
inline void phones_info::set_common_terminal(const ::std::string& value) {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  common_terminal_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.common_terminal)
}
inline void phones_info::set_common_terminal(const char* value) {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  common_terminal_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.common_terminal)
}
inline void phones_info::set_common_terminal(const void* value, size_t size) {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  common_terminal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.common_terminal)
}
inline ::std::string* phones_info::mutable_common_terminal() {
  set_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    common_terminal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.common_terminal)
  return common_terminal_;
}
inline ::std::string* phones_info::release_common_terminal() {
  clear_has_common_terminal();
  if (common_terminal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = common_terminal_;
    common_terminal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_common_terminal(::std::string* common_terminal) {
  if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete common_terminal_;
  }
  if (common_terminal) {
    set_has_common_terminal();
    common_terminal_ = common_terminal;
  } else {
    clear_has_common_terminal();
    common_terminal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.common_terminal)
}

// optional bytes mobile_phone = 8;
inline bool phones_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void phones_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void phones_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void phones_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& phones_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.mobile_phone)
  return *mobile_phone_;
}
inline void phones_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.mobile_phone)
}
inline void phones_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.mobile_phone)
}
inline void phones_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.mobile_phone)
}
inline ::std::string* phones_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* phones_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.mobile_phone)
}

// optional bool is_overdue = 9;
inline bool phones_info::has_is_overdue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void phones_info::set_has_is_overdue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void phones_info::clear_has_is_overdue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void phones_info::clear_is_overdue() {
  is_overdue_ = false;
  clear_has_is_overdue();
}
inline bool phones_info::is_overdue() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.is_overdue)
  return is_overdue_;
}
inline void phones_info::set_is_overdue(bool value) {
  set_has_is_overdue();
  is_overdue_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.is_overdue)
}

// optional .DW_Location.overdue_type type = 10;
inline bool phones_info::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void phones_info::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void phones_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void phones_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DW_Location::overdue_type phones_info::type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.type)
  return static_cast< ::DW_Location::overdue_type >(type_);
}
inline void phones_info::set_type(::DW_Location::overdue_type value) {
  assert(::DW_Location::overdue_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.type)
}

// optional bytes address = 11;
inline bool phones_info::has_address() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void phones_info::set_has_address() {
  _has_bits_[0] |= 0x00000400u;
}
inline void phones_info::clear_has_address() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void phones_info::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& phones_info::address() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.address)
  return *address_;
}
inline void phones_info::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phones_info.address)
}
inline void phones_info::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phones_info.address)
}
inline void phones_info::set_address(const void* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phones_info.address)
}
inline ::std::string* phones_info::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.address)
  return address_;
}
inline ::std::string* phones_info::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phones_info::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phones_info.address)
}

// repeated .AFP_main_frame.phone_info list = 12;
inline int phones_info::list_size() const {
  return list_.size();
}
inline void phones_info::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::phone_info& phones_info::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::phone_info* phones_info::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::phone_info* phones_info::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.phones_info.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_info >&
phones_info::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.phones_info.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::phone_info >*
phones_info::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.phones_info.list)
  return &list_;
}

// repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 13;
inline int phones_info::yuliu_common_user_size() const {
  return yuliu_common_user_.size();
}
inline void phones_info::clear_yuliu_common_user() {
  yuliu_common_user_.Clear();
}
inline const ::DW_Location::yuliu_common_user_info& phones_info::yuliu_common_user(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.yuliu_common_user)
  return yuliu_common_user_.Get(index);
}
inline ::DW_Location::yuliu_common_user_info* phones_info::mutable_yuliu_common_user(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.yuliu_common_user)
  return yuliu_common_user_.Mutable(index);
}
inline ::DW_Location::yuliu_common_user_info* phones_info::add_yuliu_common_user() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.phones_info.yuliu_common_user)
  return yuliu_common_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >&
phones_info::yuliu_common_user() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.phones_info.yuliu_common_user)
  return yuliu_common_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >*
phones_info::mutable_yuliu_common_user() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.phones_info.yuliu_common_user)
  return &yuliu_common_user_;
}

// repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 14;
inline int phones_info::yuliu_platform_user_size() const {
  return yuliu_platform_user_.size();
}
inline void phones_info::clear_yuliu_platform_user() {
  yuliu_platform_user_.Clear();
}
inline const ::DW_Location::yuliu_platform_user_info& phones_info::yuliu_platform_user(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phones_info.yuliu_platform_user)
  return yuliu_platform_user_.Get(index);
}
inline ::DW_Location::yuliu_platform_user_info* phones_info::mutable_yuliu_platform_user(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phones_info.yuliu_platform_user)
  return yuliu_platform_user_.Mutable(index);
}
inline ::DW_Location::yuliu_platform_user_info* phones_info::add_yuliu_platform_user() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.phones_info.yuliu_platform_user)
  return yuliu_platform_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >&
phones_info::yuliu_platform_user() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.phones_info.yuliu_platform_user)
  return yuliu_platform_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >*
phones_info::mutable_yuliu_platform_user() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.phones_info.yuliu_platform_user)
  return &yuliu_platform_user_;
}

// -------------------------------------------------------------------

// phone_contacts_analyze_ask

// optional bytes id_no = 1;
inline bool phone_contacts_analyze_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phone_contacts_analyze_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phone_contacts_analyze_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phone_contacts_analyze_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& phone_contacts_analyze_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_analyze_ask.id_no)
  return *id_no_;
}
inline void phone_contacts_analyze_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_analyze_ask.id_no)
}
inline void phone_contacts_analyze_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_contacts_analyze_ask.id_no)
}
inline void phone_contacts_analyze_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_contacts_analyze_ask.id_no)
}
inline ::std::string* phone_contacts_analyze_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_analyze_ask.id_no)
  return id_no_;
}
inline ::std::string* phone_contacts_analyze_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_contacts_analyze_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_analyze_ask.id_no)
}

// optional bytes mobile_phone = 2;
inline bool phone_contacts_analyze_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phone_contacts_analyze_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phone_contacts_analyze_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phone_contacts_analyze_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& phone_contacts_analyze_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_analyze_ask.mobile_phone)
  return *mobile_phone_;
}
inline void phone_contacts_analyze_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_analyze_ask.mobile_phone)
}
inline void phone_contacts_analyze_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_contacts_analyze_ask.mobile_phone)
}
inline void phone_contacts_analyze_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_contacts_analyze_ask.mobile_phone)
}
inline ::std::string* phone_contacts_analyze_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_analyze_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* phone_contacts_analyze_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_contacts_analyze_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_analyze_ask.mobile_phone)
}

// optional .common.common_ask_header ask_header = 3;
inline bool phone_contacts_analyze_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phone_contacts_analyze_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phone_contacts_analyze_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phone_contacts_analyze_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& phone_contacts_analyze_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_analyze_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* phone_contacts_analyze_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_analyze_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* phone_contacts_analyze_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void phone_contacts_analyze_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_analyze_ask.ask_header)
}

// optional bytes is_normal = 4;
inline bool phone_contacts_analyze_ask::has_is_normal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void phone_contacts_analyze_ask::set_has_is_normal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void phone_contacts_analyze_ask::clear_has_is_normal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void phone_contacts_analyze_ask::clear_is_normal() {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_->clear();
  }
  clear_has_is_normal();
}
inline const ::std::string& phone_contacts_analyze_ask::is_normal() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_analyze_ask.is_normal)
  return *is_normal_;
}
inline void phone_contacts_analyze_ask::set_is_normal(const ::std::string& value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.phone_contacts_analyze_ask.is_normal)
}
inline void phone_contacts_analyze_ask::set_is_normal(const char* value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.phone_contacts_analyze_ask.is_normal)
}
inline void phone_contacts_analyze_ask::set_is_normal(const void* value, size_t size) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.phone_contacts_analyze_ask.is_normal)
}
inline ::std::string* phone_contacts_analyze_ask::mutable_is_normal() {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_analyze_ask.is_normal)
  return is_normal_;
}
inline ::std::string* phone_contacts_analyze_ask::release_is_normal() {
  clear_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = is_normal_;
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void phone_contacts_analyze_ask::set_allocated_is_normal(::std::string* is_normal) {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (is_normal) {
    set_has_is_normal();
    is_normal_ = is_normal;
  } else {
    clear_has_is_normal();
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_analyze_ask.is_normal)
}

// -------------------------------------------------------------------

// phone_contacts_analyze_ans

// optional .AFP_main_frame.phones_info info = 1;
inline bool phone_contacts_analyze_ans::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phone_contacts_analyze_ans::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phone_contacts_analyze_ans::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phone_contacts_analyze_ans::clear_info() {
  if (info_ != NULL) info_->::AFP_main_frame::phones_info::Clear();
  clear_has_info();
}
inline const ::AFP_main_frame::phones_info& phone_contacts_analyze_ans::info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_analyze_ans.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::AFP_main_frame::phones_info* phone_contacts_analyze_ans::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::AFP_main_frame::phones_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_analyze_ans.info)
  return info_;
}
inline ::AFP_main_frame::phones_info* phone_contacts_analyze_ans::release_info() {
  clear_has_info();
  ::AFP_main_frame::phones_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void phone_contacts_analyze_ans::set_allocated_info(::AFP_main_frame::phones_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_analyze_ans.info)
}

// optional .common.errorinfo error = 2;
inline bool phone_contacts_analyze_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phone_contacts_analyze_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phone_contacts_analyze_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phone_contacts_analyze_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& phone_contacts_analyze_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.phone_contacts_analyze_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* phone_contacts_analyze_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.phone_contacts_analyze_ans.error)
  return error_;
}
inline ::common::errorinfo* phone_contacts_analyze_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void phone_contacts_analyze_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.phone_contacts_analyze_ans.error)
}

// -------------------------------------------------------------------

// function_verification_in

// optional .QDP_basic_info.user_basic_info info = 1;
inline bool function_verification_in::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void function_verification_in::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void function_verification_in::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void function_verification_in::clear_info() {
  if (info_ != NULL) info_->::QDP_basic_info::user_basic_info::Clear();
  clear_has_info();
}
inline const ::QDP_basic_info::user_basic_info& function_verification_in::info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.function_verification_in.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::QDP_basic_info::user_basic_info* function_verification_in::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::QDP_basic_info::user_basic_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.function_verification_in.info)
  return info_;
}
inline ::QDP_basic_info::user_basic_info* function_verification_in::release_info() {
  clear_has_info();
  ::QDP_basic_info::user_basic_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void function_verification_in::set_allocated_info(::QDP_basic_info::user_basic_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.function_verification_in.info)
}

// optional .AFP_main_frame.function_serial_number number = 2;
inline bool function_verification_in::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void function_verification_in::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void function_verification_in::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void function_verification_in::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::AFP_main_frame::function_serial_number function_verification_in::number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.function_verification_in.number)
  return static_cast< ::AFP_main_frame::function_serial_number >(number_);
}
inline void function_verification_in::set_number(::AFP_main_frame::function_serial_number value) {
  assert(::AFP_main_frame::function_serial_number_IsValid(value));
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.function_verification_in.number)
}

// -------------------------------------------------------------------

// function_verification_out

// optional bytes json_ans = 1;
inline bool function_verification_out::has_json_ans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void function_verification_out::set_has_json_ans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void function_verification_out::clear_has_json_ans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void function_verification_out::clear_json_ans() {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_->clear();
  }
  clear_has_json_ans();
}
inline const ::std::string& function_verification_out::json_ans() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.function_verification_out.json_ans)
  return *json_ans_;
}
inline void function_verification_out::set_json_ans(const ::std::string& value) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.function_verification_out.json_ans)
}
inline void function_verification_out::set_json_ans(const char* value) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.function_verification_out.json_ans)
}
inline void function_verification_out::set_json_ans(const void* value, size_t size) {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  json_ans_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.function_verification_out.json_ans)
}
inline ::std::string* function_verification_out::mutable_json_ans() {
  set_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ans_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.function_verification_out.json_ans)
  return json_ans_;
}
inline ::std::string* function_verification_out::release_json_ans() {
  clear_has_json_ans();
  if (json_ans_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_ans_;
    json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void function_verification_out::set_allocated_json_ans(::std::string* json_ans) {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ans_;
  }
  if (json_ans) {
    set_has_json_ans();
    json_ans_ = json_ans;
  } else {
    clear_has_json_ans();
    json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.function_verification_out.json_ans)
}

// optional .AFP_main_frame.function_serial_number number = 2;
inline bool function_verification_out::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void function_verification_out::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void function_verification_out::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void function_verification_out::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::AFP_main_frame::function_serial_number function_verification_out::number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.function_verification_out.number)
  return static_cast< ::AFP_main_frame::function_serial_number >(number_);
}
inline void function_verification_out::set_number(::AFP_main_frame::function_serial_number value) {
  assert(::AFP_main_frame::function_serial_number_IsValid(value));
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.function_verification_out.number)
}

// optional bytes result_time = 3;
inline bool function_verification_out::has_result_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void function_verification_out::set_has_result_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void function_verification_out::clear_has_result_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void function_verification_out::clear_result_time() {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_->clear();
  }
  clear_has_result_time();
}
inline const ::std::string& function_verification_out::result_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.function_verification_out.result_time)
  return *result_time_;
}
inline void function_verification_out::set_result_time(const ::std::string& value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.function_verification_out.result_time)
}
inline void function_verification_out::set_result_time(const char* value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.function_verification_out.result_time)
}
inline void function_verification_out::set_result_time(const void* value, size_t size) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.function_verification_out.result_time)
}
inline ::std::string* function_verification_out::mutable_result_time() {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.function_verification_out.result_time)
  return result_time_;
}
inline ::std::string* function_verification_out::release_result_time() {
  clear_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_time_;
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void function_verification_out::set_allocated_result_time(::std::string* result_time) {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (result_time) {
    set_has_result_time();
    result_time_ = result_time;
  } else {
    clear_has_result_time();
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.function_verification_out.result_time)
}

// -------------------------------------------------------------------

// user_verification_list_ask

// repeated .AFP_main_frame.function_verification_in fucver_in = 1;
inline int user_verification_list_ask::fucver_in_size() const {
  return fucver_in_.size();
}
inline void user_verification_list_ask::clear_fucver_in() {
  fucver_in_.Clear();
}
inline const ::AFP_main_frame::function_verification_in& user_verification_list_ask::fucver_in(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_list_ask.fucver_in)
  return fucver_in_.Get(index);
}
inline ::AFP_main_frame::function_verification_in* user_verification_list_ask::mutable_fucver_in(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_list_ask.fucver_in)
  return fucver_in_.Mutable(index);
}
inline ::AFP_main_frame::function_verification_in* user_verification_list_ask::add_fucver_in() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.user_verification_list_ask.fucver_in)
  return fucver_in_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_in >&
user_verification_list_ask::fucver_in() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.user_verification_list_ask.fucver_in)
  return fucver_in_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_in >*
user_verification_list_ask::mutable_fucver_in() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.user_verification_list_ask.fucver_in)
  return &fucver_in_;
}

// optional .common.common_ask_header ask_header = 2;
inline bool user_verification_list_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_verification_list_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_verification_list_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_verification_list_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_verification_list_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_list_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_verification_list_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_list_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_verification_list_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_verification_list_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_verification_list_ask.ask_header)
}

// -------------------------------------------------------------------

// user_verification_list_ans

// repeated .AFP_main_frame.function_verification_out fucver_out = 1;
inline int user_verification_list_ans::fucver_out_size() const {
  return fucver_out_.size();
}
inline void user_verification_list_ans::clear_fucver_out() {
  fucver_out_.Clear();
}
inline const ::AFP_main_frame::function_verification_out& user_verification_list_ans::fucver_out(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_list_ans.fucver_out)
  return fucver_out_.Get(index);
}
inline ::AFP_main_frame::function_verification_out* user_verification_list_ans::mutable_fucver_out(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_list_ans.fucver_out)
  return fucver_out_.Mutable(index);
}
inline ::AFP_main_frame::function_verification_out* user_verification_list_ans::add_fucver_out() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.user_verification_list_ans.fucver_out)
  return fucver_out_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >&
user_verification_list_ans::fucver_out() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.user_verification_list_ans.fucver_out)
  return fucver_out_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >*
user_verification_list_ans::mutable_fucver_out() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.user_verification_list_ans.fucver_out)
  return &fucver_out_;
}

// optional .common.errorinfo error = 2;
inline bool user_verification_list_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_verification_list_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_verification_list_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_verification_list_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_verification_list_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_list_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_verification_list_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_list_ans.error)
  return error_;
}
inline ::common::errorinfo* user_verification_list_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_verification_list_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_verification_list_ans.error)
}

// -------------------------------------------------------------------

// verify_info

// optional bytes real_name = 1;
inline bool verify_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& verify_info::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_info.real_name)
  return *real_name_;
}
inline void verify_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_info.real_name)
}
inline void verify_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_info.real_name)
}
inline void verify_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_info.real_name)
}
inline ::std::string* verify_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_info.real_name)
  return real_name_;
}
inline ::std::string* verify_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_info.real_name)
}

// optional bytes mobile_phone = 2;
inline bool verify_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& verify_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_info.mobile_phone)
  return *mobile_phone_;
}
inline void verify_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_info.mobile_phone)
}
inline void verify_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_info.mobile_phone)
}
inline void verify_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_info.mobile_phone)
}
inline ::std::string* verify_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* verify_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_info.mobile_phone)
}

// optional bytes id_no = 3;
inline bool verify_info::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_info::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_info::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_info::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& verify_info::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_info.id_no)
  return *id_no_;
}
inline void verify_info::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_info.id_no)
}
inline void verify_info::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_info.id_no)
}
inline void verify_info::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_info.id_no)
}
inline ::std::string* verify_info::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_info.id_no)
  return id_no_;
}
inline ::std::string* verify_info::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_info::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_info.id_no)
}

// optional bytes verify_result = 4;
inline bool verify_info::has_verify_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void verify_info::set_has_verify_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void verify_info::clear_has_verify_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void verify_info::clear_verify_result() {
  if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_->clear();
  }
  clear_has_verify_result();
}
inline const ::std::string& verify_info::verify_result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_info.verify_result)
  return *verify_result_;
}
inline void verify_info::set_verify_result(const ::std::string& value) {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  verify_result_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_info.verify_result)
}
inline void verify_info::set_verify_result(const char* value) {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  verify_result_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_info.verify_result)
}
inline void verify_info::set_verify_result(const void* value, size_t size) {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  verify_result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_info.verify_result)
}
inline ::std::string* verify_info::mutable_verify_result() {
  set_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    verify_result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_info.verify_result)
  return verify_result_;
}
inline ::std::string* verify_info::release_verify_result() {
  clear_has_verify_result();
  if (verify_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = verify_result_;
    verify_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_info::set_allocated_verify_result(::std::string* verify_result) {
  if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verify_result_;
  }
  if (verify_result) {
    set_has_verify_result();
    verify_result_ = verify_result;
  } else {
    clear_has_verify_result();
    verify_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_info.verify_result)
}

// optional bytes inquire_time = 5;
inline bool verify_info::has_inquire_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void verify_info::set_has_inquire_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void verify_info::clear_has_inquire_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void verify_info::clear_inquire_time() {
  if (inquire_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_time_->clear();
  }
  clear_has_inquire_time();
}
inline const ::std::string& verify_info::inquire_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_info.inquire_time)
  return *inquire_time_;
}
inline void verify_info::set_inquire_time(const ::std::string& value) {
  set_has_inquire_time();
  if (inquire_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_time_ = new ::std::string;
  }
  inquire_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_info.inquire_time)
}
inline void verify_info::set_inquire_time(const char* value) {
  set_has_inquire_time();
  if (inquire_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_time_ = new ::std::string;
  }
  inquire_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_info.inquire_time)
}
inline void verify_info::set_inquire_time(const void* value, size_t size) {
  set_has_inquire_time();
  if (inquire_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_time_ = new ::std::string;
  }
  inquire_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_info.inquire_time)
}
inline ::std::string* verify_info::mutable_inquire_time() {
  set_has_inquire_time();
  if (inquire_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_info.inquire_time)
  return inquire_time_;
}
inline ::std::string* verify_info::release_inquire_time() {
  clear_has_inquire_time();
  if (inquire_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inquire_time_;
    inquire_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_info::set_allocated_inquire_time(::std::string* inquire_time) {
  if (inquire_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inquire_time_;
  }
  if (inquire_time) {
    set_has_inquire_time();
    inquire_time_ = inquire_time;
  } else {
    clear_has_inquire_time();
    inquire_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_info.inquire_time)
}

// optional bytes json_result = 6;
inline bool verify_info::has_json_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void verify_info::set_has_json_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void verify_info::clear_has_json_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void verify_info::clear_json_result() {
  if (json_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_result_->clear();
  }
  clear_has_json_result();
}
inline const ::std::string& verify_info::json_result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.verify_info.json_result)
  return *json_result_;
}
inline void verify_info::set_json_result(const ::std::string& value) {
  set_has_json_result();
  if (json_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_result_ = new ::std::string;
  }
  json_result_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.verify_info.json_result)
}
inline void verify_info::set_json_result(const char* value) {
  set_has_json_result();
  if (json_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_result_ = new ::std::string;
  }
  json_result_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.verify_info.json_result)
}
inline void verify_info::set_json_result(const void* value, size_t size) {
  set_has_json_result();
  if (json_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_result_ = new ::std::string;
  }
  json_result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.verify_info.json_result)
}
inline ::std::string* verify_info::mutable_json_result() {
  set_has_json_result();
  if (json_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.verify_info.json_result)
  return json_result_;
}
inline ::std::string* verify_info::release_json_result() {
  clear_has_json_result();
  if (json_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_result_;
    json_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void verify_info::set_allocated_json_result(::std::string* json_result) {
  if (json_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_result_;
  }
  if (json_result) {
    set_has_json_result();
    json_result_ = json_result;
  } else {
    clear_has_json_result();
    json_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.verify_info.json_result)
}

// -------------------------------------------------------------------

// batch_verify_ask

// optional bytes inquire_session = 1;
inline bool batch_verify_ask::has_inquire_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void batch_verify_ask::set_has_inquire_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void batch_verify_ask::clear_has_inquire_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void batch_verify_ask::clear_inquire_session() {
  if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_->clear();
  }
  clear_has_inquire_session();
}
inline const ::std::string& batch_verify_ask::inquire_session() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ask.inquire_session)
  return *inquire_session_;
}
inline void batch_verify_ask::set_inquire_session(const ::std::string& value) {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  inquire_session_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.batch_verify_ask.inquire_session)
}
inline void batch_verify_ask::set_inquire_session(const char* value) {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  inquire_session_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.batch_verify_ask.inquire_session)
}
inline void batch_verify_ask::set_inquire_session(const void* value, size_t size) {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  inquire_session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.batch_verify_ask.inquire_session)
}
inline ::std::string* batch_verify_ask::mutable_inquire_session() {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.batch_verify_ask.inquire_session)
  return inquire_session_;
}
inline ::std::string* batch_verify_ask::release_inquire_session() {
  clear_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inquire_session_;
    inquire_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void batch_verify_ask::set_allocated_inquire_session(::std::string* inquire_session) {
  if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inquire_session_;
  }
  if (inquire_session) {
    set_has_inquire_session();
    inquire_session_ = inquire_session;
  } else {
    clear_has_inquire_session();
    inquire_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.batch_verify_ask.inquire_session)
}

// repeated .AFP_main_frame.verify_info list = 2;
inline int batch_verify_ask::list_size() const {
  return list_.size();
}
inline void batch_verify_ask::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::verify_info& batch_verify_ask::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ask.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::verify_info* batch_verify_ask::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.batch_verify_ask.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::verify_info* batch_verify_ask::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.batch_verify_ask.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >&
batch_verify_ask::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.batch_verify_ask.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >*
batch_verify_ask::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.batch_verify_ask.list)
  return &list_;
}

// optional .common.common_ask_header ask_header = 3;
inline bool batch_verify_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void batch_verify_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void batch_verify_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void batch_verify_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& batch_verify_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* batch_verify_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.batch_verify_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* batch_verify_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void batch_verify_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.batch_verify_ask.ask_header)
}

// repeated .AFP_main_frame.function_serial_number number = 4;
inline int batch_verify_ask::number_size() const {
  return number_.size();
}
inline void batch_verify_ask::clear_number() {
  number_.Clear();
}
inline ::AFP_main_frame::function_serial_number batch_verify_ask::number(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ask.number)
  return static_cast< ::AFP_main_frame::function_serial_number >(number_.Get(index));
}
inline void batch_verify_ask::set_number(int index, ::AFP_main_frame::function_serial_number value) {
  assert(::AFP_main_frame::function_serial_number_IsValid(value));
  number_.Set(index, value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.batch_verify_ask.number)
}
inline void batch_verify_ask::add_number(::AFP_main_frame::function_serial_number value) {
  assert(::AFP_main_frame::function_serial_number_IsValid(value));
  number_.Add(value);
  // @@protoc_insertion_point(field_add:AFP_main_frame.batch_verify_ask.number)
}
inline const ::google::protobuf::RepeatedField<int>&
batch_verify_ask::number() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.batch_verify_ask.number)
  return number_;
}
inline ::google::protobuf::RepeatedField<int>*
batch_verify_ask::mutable_number() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.batch_verify_ask.number)
  return &number_;
}

// -------------------------------------------------------------------

// batch_verify_ans

// optional int32 result_status = 1;
inline bool batch_verify_ans::has_result_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void batch_verify_ans::set_has_result_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void batch_verify_ans::clear_has_result_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void batch_verify_ans::clear_result_status() {
  result_status_ = 0;
  clear_has_result_status();
}
inline ::google::protobuf::int32 batch_verify_ans::result_status() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ans.result_status)
  return result_status_;
}
inline void batch_verify_ans::set_result_status(::google::protobuf::int32 value) {
  set_has_result_status();
  result_status_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.batch_verify_ans.result_status)
}

// optional bytes inquire_session = 2;
inline bool batch_verify_ans::has_inquire_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void batch_verify_ans::set_has_inquire_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void batch_verify_ans::clear_has_inquire_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void batch_verify_ans::clear_inquire_session() {
  if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_->clear();
  }
  clear_has_inquire_session();
}
inline const ::std::string& batch_verify_ans::inquire_session() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ans.inquire_session)
  return *inquire_session_;
}
inline void batch_verify_ans::set_inquire_session(const ::std::string& value) {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  inquire_session_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.batch_verify_ans.inquire_session)
}
inline void batch_verify_ans::set_inquire_session(const char* value) {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  inquire_session_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.batch_verify_ans.inquire_session)
}
inline void batch_verify_ans::set_inquire_session(const void* value, size_t size) {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  inquire_session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.batch_verify_ans.inquire_session)
}
inline ::std::string* batch_verify_ans::mutable_inquire_session() {
  set_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inquire_session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.batch_verify_ans.inquire_session)
  return inquire_session_;
}
inline ::std::string* batch_verify_ans::release_inquire_session() {
  clear_has_inquire_session();
  if (inquire_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inquire_session_;
    inquire_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void batch_verify_ans::set_allocated_inquire_session(::std::string* inquire_session) {
  if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inquire_session_;
  }
  if (inquire_session) {
    set_has_inquire_session();
    inquire_session_ = inquire_session;
  } else {
    clear_has_inquire_session();
    inquire_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.batch_verify_ans.inquire_session)
}

// repeated .AFP_main_frame.verify_info list = 3;
inline int batch_verify_ans::list_size() const {
  return list_.size();
}
inline void batch_verify_ans::clear_list() {
  list_.Clear();
}
inline const ::AFP_main_frame::verify_info& batch_verify_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ans.list)
  return list_.Get(index);
}
inline ::AFP_main_frame::verify_info* batch_verify_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.batch_verify_ans.list)
  return list_.Mutable(index);
}
inline ::AFP_main_frame::verify_info* batch_verify_ans::add_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.batch_verify_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >&
batch_verify_ans::list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.batch_verify_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::verify_info >*
batch_verify_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.batch_verify_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 4;
inline bool batch_verify_ans::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void batch_verify_ans::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void batch_verify_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void batch_verify_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& batch_verify_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* batch_verify_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.batch_verify_ans.error)
  return error_;
}
inline ::common::errorinfo* batch_verify_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void batch_verify_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.batch_verify_ans.error)
}

// repeated .AFP_main_frame.function_serial_number number = 5;
inline int batch_verify_ans::number_size() const {
  return number_.size();
}
inline void batch_verify_ans::clear_number() {
  number_.Clear();
}
inline ::AFP_main_frame::function_serial_number batch_verify_ans::number(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.batch_verify_ans.number)
  return static_cast< ::AFP_main_frame::function_serial_number >(number_.Get(index));
}
inline void batch_verify_ans::set_number(int index, ::AFP_main_frame::function_serial_number value) {
  assert(::AFP_main_frame::function_serial_number_IsValid(value));
  number_.Set(index, value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.batch_verify_ans.number)
}
inline void batch_verify_ans::add_number(::AFP_main_frame::function_serial_number value) {
  assert(::AFP_main_frame::function_serial_number_IsValid(value));
  number_.Add(value);
  // @@protoc_insertion_point(field_add:AFP_main_frame.batch_verify_ans.number)
}
inline const ::google::protobuf::RepeatedField<int>&
batch_verify_ans::number() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.batch_verify_ans.number)
  return number_;
}
inline ::google::protobuf::RepeatedField<int>*
batch_verify_ans::mutable_number() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.batch_verify_ans.number)
  return &number_;
}

// -------------------------------------------------------------------

// area_name

// optional int32 area_id = 1;
inline bool area_name::has_area_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void area_name::set_has_area_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void area_name::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void area_name::clear_area_id() {
  area_id_ = 0;
  clear_has_area_id();
}
inline ::google::protobuf::int32 area_name::area_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.area_name.area_id)
  return area_id_;
}
inline void area_name::set_area_id(::google::protobuf::int32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.area_name.area_id)
}

// optional bytes name = 2;
inline bool area_name::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void area_name::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void area_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void area_name::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& area_name::name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.area_name.name)
  return *name_;
}
inline void area_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.area_name.name)
}
inline void area_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.area_name.name)
}
inline void area_name::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.area_name.name)
}
inline ::std::string* area_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.area_name.name)
  return name_;
}
inline ::std::string* area_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void area_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.area_name.name)
}

// -------------------------------------------------------------------

// bid_info

// optional bytes borrow_bid = 1;
inline bool bid_info::has_borrow_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_info::set_has_borrow_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_info::clear_has_borrow_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_info::clear_borrow_bid() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_->clear();
  }
  clear_has_borrow_bid();
}
inline const ::std::string& bid_info::borrow_bid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.borrow_bid)
  return *borrow_bid_;
}
inline void bid_info::set_borrow_bid(const ::std::string& value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.borrow_bid)
}
inline void bid_info::set_borrow_bid(const char* value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.borrow_bid)
}
inline void bid_info::set_borrow_bid(const void* value, size_t size) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.borrow_bid)
}
inline ::std::string* bid_info::mutable_borrow_bid() {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.borrow_bid)
  return borrow_bid_;
}
inline ::std::string* bid_info::release_borrow_bid() {
  clear_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_;
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_borrow_bid(::std::string* borrow_bid) {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (borrow_bid) {
    set_has_borrow_bid();
    borrow_bid_ = borrow_bid;
  } else {
    clear_has_borrow_bid();
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.borrow_bid)
}

// optional bytes bid_name = 2;
inline bool bid_info::has_bid_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_info::set_has_bid_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_info::clear_has_bid_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_info::clear_bid_name() {
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_->clear();
  }
  clear_has_bid_name();
}
inline const ::std::string& bid_info::bid_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.bid_name)
  return *bid_name_;
}
inline void bid_info::set_bid_name(const ::std::string& value) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.bid_name)
}
inline void bid_info::set_bid_name(const char* value) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.bid_name)
}
inline void bid_info::set_bid_name(const void* value, size_t size) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.bid_name)
}
inline ::std::string* bid_info::mutable_bid_name() {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.bid_name)
  return bid_name_;
}
inline ::std::string* bid_info::release_bid_name() {
  clear_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_name_;
    bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_bid_name(::std::string* bid_name) {
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_name_;
  }
  if (bid_name) {
    set_has_bid_name();
    bid_name_ = bid_name;
  } else {
    clear_has_bid_name();
    bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.bid_name)
}

// optional bytes borrow_time = 3;
inline bool bid_info::has_borrow_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bid_info::set_has_borrow_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bid_info::clear_has_borrow_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bid_info::clear_borrow_time() {
  if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_->clear();
  }
  clear_has_borrow_time();
}
inline const ::std::string& bid_info::borrow_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.borrow_time)
  return *borrow_time_;
}
inline void bid_info::set_borrow_time(const ::std::string& value) {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  borrow_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.borrow_time)
}
inline void bid_info::set_borrow_time(const char* value) {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  borrow_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.borrow_time)
}
inline void bid_info::set_borrow_time(const void* value, size_t size) {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  borrow_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.borrow_time)
}
inline ::std::string* bid_info::mutable_borrow_time() {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.borrow_time)
  return borrow_time_;
}
inline ::std::string* bid_info::release_borrow_time() {
  clear_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_time_;
    borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_borrow_time(::std::string* borrow_time) {
  if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_time_;
  }
  if (borrow_time) {
    set_has_borrow_time();
    borrow_time_ = borrow_time;
  } else {
    clear_has_borrow_time();
    borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.borrow_time)
}

// optional bytes borrower_nickname = 4;
inline bool bid_info::has_borrower_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bid_info::set_has_borrower_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bid_info::clear_has_borrower_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bid_info::clear_borrower_nickname() {
  if (borrower_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrower_nickname_->clear();
  }
  clear_has_borrower_nickname();
}
inline const ::std::string& bid_info::borrower_nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.borrower_nickname)
  return *borrower_nickname_;
}
inline void bid_info::set_borrower_nickname(const ::std::string& value) {
  set_has_borrower_nickname();
  if (borrower_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrower_nickname_ = new ::std::string;
  }
  borrower_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.borrower_nickname)
}
inline void bid_info::set_borrower_nickname(const char* value) {
  set_has_borrower_nickname();
  if (borrower_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrower_nickname_ = new ::std::string;
  }
  borrower_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.borrower_nickname)
}
inline void bid_info::set_borrower_nickname(const void* value, size_t size) {
  set_has_borrower_nickname();
  if (borrower_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrower_nickname_ = new ::std::string;
  }
  borrower_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.borrower_nickname)
}
inline ::std::string* bid_info::mutable_borrower_nickname() {
  set_has_borrower_nickname();
  if (borrower_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrower_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.borrower_nickname)
  return borrower_nickname_;
}
inline ::std::string* bid_info::release_borrower_nickname() {
  clear_has_borrower_nickname();
  if (borrower_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrower_nickname_;
    borrower_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_borrower_nickname(::std::string* borrower_nickname) {
  if (borrower_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrower_nickname_;
  }
  if (borrower_nickname) {
    set_has_borrower_nickname();
    borrower_nickname_ = borrower_nickname;
  } else {
    clear_has_borrower_nickname();
    borrower_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.borrower_nickname)
}

// optional bytes borrow_describe = 5;
inline bool bid_info::has_borrow_describe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bid_info::set_has_borrow_describe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bid_info::clear_has_borrow_describe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bid_info::clear_borrow_describe() {
  if (borrow_describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_describe_->clear();
  }
  clear_has_borrow_describe();
}
inline const ::std::string& bid_info::borrow_describe() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.borrow_describe)
  return *borrow_describe_;
}
inline void bid_info::set_borrow_describe(const ::std::string& value) {
  set_has_borrow_describe();
  if (borrow_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_describe_ = new ::std::string;
  }
  borrow_describe_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.borrow_describe)
}
inline void bid_info::set_borrow_describe(const char* value) {
  set_has_borrow_describe();
  if (borrow_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_describe_ = new ::std::string;
  }
  borrow_describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.borrow_describe)
}
inline void bid_info::set_borrow_describe(const void* value, size_t size) {
  set_has_borrow_describe();
  if (borrow_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_describe_ = new ::std::string;
  }
  borrow_describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.borrow_describe)
}
inline ::std::string* bid_info::mutable_borrow_describe() {
  set_has_borrow_describe();
  if (borrow_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.borrow_describe)
  return borrow_describe_;
}
inline ::std::string* bid_info::release_borrow_describe() {
  clear_has_borrow_describe();
  if (borrow_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_describe_;
    borrow_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_borrow_describe(::std::string* borrow_describe) {
  if (borrow_describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_describe_;
  }
  if (borrow_describe) {
    set_has_borrow_describe();
    borrow_describe_ = borrow_describe;
  } else {
    clear_has_borrow_describe();
    borrow_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.borrow_describe)
}

// optional float borrow_money = 6;
inline bool bid_info::has_borrow_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bid_info::set_has_borrow_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bid_info::clear_has_borrow_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bid_info::clear_borrow_money() {
  borrow_money_ = 0;
  clear_has_borrow_money();
}
inline float bid_info::borrow_money() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.borrow_money)
  return borrow_money_;
}
inline void bid_info::set_borrow_money(float value) {
  set_has_borrow_money();
  borrow_money_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.borrow_money)
}

// optional float borrow_rate = 7;
inline bool bid_info::has_borrow_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void bid_info::set_has_borrow_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void bid_info::clear_has_borrow_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void bid_info::clear_borrow_rate() {
  borrow_rate_ = 0;
  clear_has_borrow_rate();
}
inline float bid_info::borrow_rate() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.borrow_rate)
  return borrow_rate_;
}
inline void bid_info::set_borrow_rate(float value) {
  set_has_borrow_rate();
  borrow_rate_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.borrow_rate)
}

// optional int32 mortgage_term = 8;
inline bool bid_info::has_mortgage_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void bid_info::set_has_mortgage_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void bid_info::clear_has_mortgage_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void bid_info::clear_mortgage_term() {
  mortgage_term_ = 0;
  clear_has_mortgage_term();
}
inline ::google::protobuf::int32 bid_info::mortgage_term() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.mortgage_term)
  return mortgage_term_;
}
inline void bid_info::set_mortgage_term(::google::protobuf::int32 value) {
  set_has_mortgage_term();
  mortgage_term_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.mortgage_term)
}

// optional bytes mode_of_repayment = 9;
inline bool bid_info::has_mode_of_repayment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void bid_info::set_has_mode_of_repayment() {
  _has_bits_[0] |= 0x00000100u;
}
inline void bid_info::clear_has_mode_of_repayment() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void bid_info::clear_mode_of_repayment() {
  if (mode_of_repayment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mode_of_repayment_->clear();
  }
  clear_has_mode_of_repayment();
}
inline const ::std::string& bid_info::mode_of_repayment() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.mode_of_repayment)
  return *mode_of_repayment_;
}
inline void bid_info::set_mode_of_repayment(const ::std::string& value) {
  set_has_mode_of_repayment();
  if (mode_of_repayment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mode_of_repayment_ = new ::std::string;
  }
  mode_of_repayment_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.mode_of_repayment)
}
inline void bid_info::set_mode_of_repayment(const char* value) {
  set_has_mode_of_repayment();
  if (mode_of_repayment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mode_of_repayment_ = new ::std::string;
  }
  mode_of_repayment_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.mode_of_repayment)
}
inline void bid_info::set_mode_of_repayment(const void* value, size_t size) {
  set_has_mode_of_repayment();
  if (mode_of_repayment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mode_of_repayment_ = new ::std::string;
  }
  mode_of_repayment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.mode_of_repayment)
}
inline ::std::string* bid_info::mutable_mode_of_repayment() {
  set_has_mode_of_repayment();
  if (mode_of_repayment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mode_of_repayment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.mode_of_repayment)
  return mode_of_repayment_;
}
inline ::std::string* bid_info::release_mode_of_repayment() {
  clear_has_mode_of_repayment();
  if (mode_of_repayment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mode_of_repayment_;
    mode_of_repayment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_mode_of_repayment(::std::string* mode_of_repayment) {
  if (mode_of_repayment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mode_of_repayment_;
  }
  if (mode_of_repayment) {
    set_has_mode_of_repayment();
    mode_of_repayment_ = mode_of_repayment;
  } else {
    clear_has_mode_of_repayment();
    mode_of_repayment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.mode_of_repayment)
}

// optional bytes LP_user = 10;
inline bool bid_info::has_lp_user() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void bid_info::set_has_lp_user() {
  _has_bits_[0] |= 0x00000200u;
}
inline void bid_info::clear_has_lp_user() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void bid_info::clear_lp_user() {
  if (lp_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_user_->clear();
  }
  clear_has_lp_user();
}
inline const ::std::string& bid_info::lp_user() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.LP_user)
  return *lp_user_;
}
inline void bid_info::set_lp_user(const ::std::string& value) {
  set_has_lp_user();
  if (lp_user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_user_ = new ::std::string;
  }
  lp_user_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.LP_user)
}
inline void bid_info::set_lp_user(const char* value) {
  set_has_lp_user();
  if (lp_user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_user_ = new ::std::string;
  }
  lp_user_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.LP_user)
}
inline void bid_info::set_lp_user(const void* value, size_t size) {
  set_has_lp_user();
  if (lp_user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_user_ = new ::std::string;
  }
  lp_user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.LP_user)
}
inline ::std::string* bid_info::mutable_lp_user() {
  set_has_lp_user();
  if (lp_user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.LP_user)
  return lp_user_;
}
inline ::std::string* bid_info::release_lp_user() {
  clear_has_lp_user();
  if (lp_user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lp_user_;
    lp_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_lp_user(::std::string* lp_user) {
  if (lp_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_user_;
  }
  if (lp_user) {
    set_has_lp_user();
    lp_user_ = lp_user;
  } else {
    clear_has_lp_user();
    lp_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.LP_user)
}

// optional float amount_guaranteed = 11;
inline bool bid_info::has_amount_guaranteed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void bid_info::set_has_amount_guaranteed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void bid_info::clear_has_amount_guaranteed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void bid_info::clear_amount_guaranteed() {
  amount_guaranteed_ = 0;
  clear_has_amount_guaranteed();
}
inline float bid_info::amount_guaranteed() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.amount_guaranteed)
  return amount_guaranteed_;
}
inline void bid_info::set_amount_guaranteed(float value) {
  set_has_amount_guaranteed();
  amount_guaranteed_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.amount_guaranteed)
}

// optional bytes rob_LP_time = 12;
inline bool bid_info::has_rob_lp_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void bid_info::set_has_rob_lp_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void bid_info::clear_has_rob_lp_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void bid_info::clear_rob_lp_time() {
  if (rob_lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rob_lp_time_->clear();
  }
  clear_has_rob_lp_time();
}
inline const ::std::string& bid_info::rob_lp_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.rob_LP_time)
  return *rob_lp_time_;
}
inline void bid_info::set_rob_lp_time(const ::std::string& value) {
  set_has_rob_lp_time();
  if (rob_lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rob_lp_time_ = new ::std::string;
  }
  rob_lp_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.rob_LP_time)
}
inline void bid_info::set_rob_lp_time(const char* value) {
  set_has_rob_lp_time();
  if (rob_lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rob_lp_time_ = new ::std::string;
  }
  rob_lp_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.rob_LP_time)
}
inline void bid_info::set_rob_lp_time(const void* value, size_t size) {
  set_has_rob_lp_time();
  if (rob_lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rob_lp_time_ = new ::std::string;
  }
  rob_lp_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.rob_LP_time)
}
inline ::std::string* bid_info::mutable_rob_lp_time() {
  set_has_rob_lp_time();
  if (rob_lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rob_lp_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.rob_LP_time)
  return rob_lp_time_;
}
inline ::std::string* bid_info::release_rob_lp_time() {
  clear_has_rob_lp_time();
  if (rob_lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rob_lp_time_;
    rob_lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_rob_lp_time(::std::string* rob_lp_time) {
  if (rob_lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rob_lp_time_;
  }
  if (rob_lp_time) {
    set_has_rob_lp_time();
    rob_lp_time_ = rob_lp_time;
  } else {
    clear_has_rob_lp_time();
    rob_lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.rob_LP_time)
}

// optional bytes LP_time = 13;
inline bool bid_info::has_lp_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void bid_info::set_has_lp_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void bid_info::clear_has_lp_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void bid_info::clear_lp_time() {
  if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_->clear();
  }
  clear_has_lp_time();
}
inline const ::std::string& bid_info::lp_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.LP_time)
  return *lp_time_;
}
inline void bid_info::set_lp_time(const ::std::string& value) {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  lp_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.LP_time)
}
inline void bid_info::set_lp_time(const char* value) {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  lp_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.LP_time)
}
inline void bid_info::set_lp_time(const void* value, size_t size) {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  lp_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.LP_time)
}
inline ::std::string* bid_info::mutable_lp_time() {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.LP_time)
  return lp_time_;
}
inline ::std::string* bid_info::release_lp_time() {
  clear_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lp_time_;
    lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_lp_time(::std::string* lp_time) {
  if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_time_;
  }
  if (lp_time) {
    set_has_lp_time();
    lp_time_ = lp_time;
  } else {
    clear_has_lp_time();
    lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.LP_time)
}

// optional bytes LP_address = 14;
inline bool bid_info::has_lp_address() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void bid_info::set_has_lp_address() {
  _has_bits_[0] |= 0x00002000u;
}
inline void bid_info::clear_has_lp_address() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void bid_info::clear_lp_address() {
  if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_->clear();
  }
  clear_has_lp_address();
}
inline const ::std::string& bid_info::lp_address() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.LP_address)
  return *lp_address_;
}
inline void bid_info::set_lp_address(const ::std::string& value) {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  lp_address_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.LP_address)
}
inline void bid_info::set_lp_address(const char* value) {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  lp_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.LP_address)
}
inline void bid_info::set_lp_address(const void* value, size_t size) {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  lp_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.LP_address)
}
inline ::std::string* bid_info::mutable_lp_address() {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.LP_address)
  return lp_address_;
}
inline ::std::string* bid_info::release_lp_address() {
  clear_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lp_address_;
    lp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_lp_address(::std::string* lp_address) {
  if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_address_;
  }
  if (lp_address) {
    set_has_lp_address();
    lp_address_ = lp_address;
  } else {
    clear_has_lp_address();
    lp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.LP_address)
}

// optional int32 is_indeed_LP = 15;
inline bool bid_info::has_is_indeed_lp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void bid_info::set_has_is_indeed_lp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void bid_info::clear_has_is_indeed_lp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void bid_info::clear_is_indeed_lp() {
  is_indeed_lp_ = 0;
  clear_has_is_indeed_lp();
}
inline ::google::protobuf::int32 bid_info::is_indeed_lp() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.is_indeed_LP)
  return is_indeed_lp_;
}
inline void bid_info::set_is_indeed_lp(::google::protobuf::int32 value) {
  set_has_is_indeed_lp();
  is_indeed_lp_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.is_indeed_LP)
}

// optional bytes Reasons_for_guarantee = 16;
inline bool bid_info::has_reasons_for_guarantee() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void bid_info::set_has_reasons_for_guarantee() {
  _has_bits_[0] |= 0x00008000u;
}
inline void bid_info::clear_has_reasons_for_guarantee() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void bid_info::clear_reasons_for_guarantee() {
  if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_->clear();
  }
  clear_has_reasons_for_guarantee();
}
inline const ::std::string& bid_info::reasons_for_guarantee() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.Reasons_for_guarantee)
  return *reasons_for_guarantee_;
}
inline void bid_info::set_reasons_for_guarantee(const ::std::string& value) {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  reasons_for_guarantee_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.Reasons_for_guarantee)
}
inline void bid_info::set_reasons_for_guarantee(const char* value) {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  reasons_for_guarantee_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.Reasons_for_guarantee)
}
inline void bid_info::set_reasons_for_guarantee(const void* value, size_t size) {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  reasons_for_guarantee_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.Reasons_for_guarantee)
}
inline ::std::string* bid_info::mutable_reasons_for_guarantee() {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.Reasons_for_guarantee)
  return reasons_for_guarantee_;
}
inline ::std::string* bid_info::release_reasons_for_guarantee() {
  clear_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reasons_for_guarantee_;
    reasons_for_guarantee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_info::set_allocated_reasons_for_guarantee(::std::string* reasons_for_guarantee) {
  if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reasons_for_guarantee_;
  }
  if (reasons_for_guarantee) {
    set_has_reasons_for_guarantee();
    reasons_for_guarantee_ = reasons_for_guarantee;
  } else {
    clear_has_reasons_for_guarantee();
    reasons_for_guarantee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_info.Reasons_for_guarantee)
}

// repeated bytes picture_url = 17;
inline int bid_info::picture_url_size() const {
  return picture_url_.size();
}
inline void bid_info::clear_picture_url() {
  picture_url_.Clear();
}
inline const ::std::string& bid_info::picture_url(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_info.picture_url)
  return picture_url_.Get(index);
}
inline ::std::string* bid_info::mutable_picture_url(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_info.picture_url)
  return picture_url_.Mutable(index);
}
inline void bid_info::set_picture_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_info.picture_url)
  picture_url_.Mutable(index)->assign(value);
}
inline void bid_info::set_picture_url(int index, const char* value) {
  picture_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_info.picture_url)
}
inline void bid_info::set_picture_url(int index, const void* value, size_t size) {
  picture_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_info.picture_url)
}
inline ::std::string* bid_info::add_picture_url() {
  return picture_url_.Add();
}
inline void bid_info::add_picture_url(const ::std::string& value) {
  picture_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AFP_main_frame.bid_info.picture_url)
}
inline void bid_info::add_picture_url(const char* value) {
  picture_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AFP_main_frame.bid_info.picture_url)
}
inline void bid_info::add_picture_url(const void* value, size_t size) {
  picture_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AFP_main_frame.bid_info.picture_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
bid_info::picture_url() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.bid_info.picture_url)
  return picture_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
bid_info::mutable_picture_url() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.bid_info.picture_url)
  return &picture_url_;
}

// -------------------------------------------------------------------

// detail_early_warning

// optional bytes userstatus = 1;
inline bool detail_early_warning::has_userstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detail_early_warning::set_has_userstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detail_early_warning::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detail_early_warning::clear_userstatus() {
  if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_->clear();
  }
  clear_has_userstatus();
}
inline const ::std::string& detail_early_warning::userstatus() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.userstatus)
  return *userstatus_;
}
inline void detail_early_warning::set_userstatus(const ::std::string& value) {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  userstatus_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.userstatus)
}
inline void detail_early_warning::set_userstatus(const char* value) {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  userstatus_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.userstatus)
}
inline void detail_early_warning::set_userstatus(const void* value, size_t size) {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  userstatus_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.userstatus)
}
inline ::std::string* detail_early_warning::mutable_userstatus() {
  set_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userstatus_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.userstatus)
  return userstatus_;
}
inline ::std::string* detail_early_warning::release_userstatus() {
  clear_has_userstatus();
  if (userstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userstatus_;
    userstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_userstatus(::std::string* userstatus) {
  if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userstatus_;
  }
  if (userstatus) {
    set_has_userstatus();
    userstatus_ = userstatus;
  } else {
    clear_has_userstatus();
    userstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.userstatus)
}

// optional bytes name = 2;
inline bool detail_early_warning::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void detail_early_warning::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void detail_early_warning::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void detail_early_warning::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& detail_early_warning::name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.name)
  return *name_;
}
inline void detail_early_warning::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.name)
}
inline void detail_early_warning::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.name)
}
inline void detail_early_warning::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.name)
}
inline ::std::string* detail_early_warning::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.name)
  return name_;
}
inline ::std::string* detail_early_warning::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.name)
}

// optional bytes mobile_phone = 3;
inline bool detail_early_warning::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detail_early_warning::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detail_early_warning::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detail_early_warning::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& detail_early_warning::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.mobile_phone)
  return *mobile_phone_;
}
inline void detail_early_warning::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.mobile_phone)
}
inline void detail_early_warning::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.mobile_phone)
}
inline void detail_early_warning::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.mobile_phone)
}
inline ::std::string* detail_early_warning::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* detail_early_warning::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.mobile_phone)
}

// optional bytes id_no = 4;
inline bool detail_early_warning::has_id_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void detail_early_warning::set_has_id_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void detail_early_warning::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void detail_early_warning::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& detail_early_warning::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.id_no)
  return *id_no_;
}
inline void detail_early_warning::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.id_no)
}
inline void detail_early_warning::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.id_no)
}
inline void detail_early_warning::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.id_no)
}
inline ::std::string* detail_early_warning::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.id_no)
  return id_no_;
}
inline ::std::string* detail_early_warning::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.id_no)
}

// optional .common.sex sex = 5;
inline bool detail_early_warning::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void detail_early_warning::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void detail_early_warning::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void detail_early_warning::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::common::sex detail_early_warning::sex() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.sex)
  return static_cast< ::common::sex >(sex_);
}
inline void detail_early_warning::set_sex(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.sex)
}

// optional int32 age = 6;
inline bool detail_early_warning::has_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void detail_early_warning::set_has_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void detail_early_warning::clear_has_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void detail_early_warning::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 detail_early_warning::age() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.age)
  return age_;
}
inline void detail_early_warning::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.age)
}

// optional bytes province = 7;
inline bool detail_early_warning::has_province() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void detail_early_warning::set_has_province() {
  _has_bits_[0] |= 0x00000040u;
}
inline void detail_early_warning::clear_has_province() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void detail_early_warning::clear_province() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& detail_early_warning::province() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.province)
  return *province_;
}
inline void detail_early_warning::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.province)
}
inline void detail_early_warning::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.province)
}
inline void detail_early_warning::set_province(const void* value, size_t size) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.province)
}
inline ::std::string* detail_early_warning::mutable_province() {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.province)
  return province_;
}
inline ::std::string* detail_early_warning::release_province() {
  clear_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_province(::std::string* province) {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.province)
}

// optional bytes city = 8;
inline bool detail_early_warning::has_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void detail_early_warning::set_has_city() {
  _has_bits_[0] |= 0x00000080u;
}
inline void detail_early_warning::clear_has_city() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void detail_early_warning::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& detail_early_warning::city() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.city)
  return *city_;
}
inline void detail_early_warning::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.city)
}
inline void detail_early_warning::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.city)
}
inline void detail_early_warning::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.city)
}
inline ::std::string* detail_early_warning::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.city)
  return city_;
}
inline ::std::string* detail_early_warning::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.city)
}

// optional int32 loan_bid_amount = 9;
inline bool detail_early_warning::has_loan_bid_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void detail_early_warning::set_has_loan_bid_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void detail_early_warning::clear_has_loan_bid_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void detail_early_warning::clear_loan_bid_amount() {
  loan_bid_amount_ = 0;
  clear_has_loan_bid_amount();
}
inline ::google::protobuf::int32 detail_early_warning::loan_bid_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.loan_bid_amount)
  return loan_bid_amount_;
}
inline void detail_early_warning::set_loan_bid_amount(::google::protobuf::int32 value) {
  set_has_loan_bid_amount();
  loan_bid_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.loan_bid_amount)
}

// optional int32 qiao_qiao_loan_amount = 10;
inline bool detail_early_warning::has_qiao_qiao_loan_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void detail_early_warning::set_has_qiao_qiao_loan_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void detail_early_warning::clear_has_qiao_qiao_loan_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void detail_early_warning::clear_qiao_qiao_loan_amount() {
  qiao_qiao_loan_amount_ = 0;
  clear_has_qiao_qiao_loan_amount();
}
inline ::google::protobuf::int32 detail_early_warning::qiao_qiao_loan_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.qiao_qiao_loan_amount)
  return qiao_qiao_loan_amount_;
}
inline void detail_early_warning::set_qiao_qiao_loan_amount(::google::protobuf::int32 value) {
  set_has_qiao_qiao_loan_amount();
  qiao_qiao_loan_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.qiao_qiao_loan_amount)
}

// optional bytes warn_type = 11;
inline bool detail_early_warning::has_warn_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void detail_early_warning::set_has_warn_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void detail_early_warning::clear_has_warn_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void detail_early_warning::clear_warn_type() {
  if (warn_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_type_->clear();
  }
  clear_has_warn_type();
}
inline const ::std::string& detail_early_warning::warn_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.warn_type)
  return *warn_type_;
}
inline void detail_early_warning::set_warn_type(const ::std::string& value) {
  set_has_warn_type();
  if (warn_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_type_ = new ::std::string;
  }
  warn_type_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.warn_type)
}
inline void detail_early_warning::set_warn_type(const char* value) {
  set_has_warn_type();
  if (warn_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_type_ = new ::std::string;
  }
  warn_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.warn_type)
}
inline void detail_early_warning::set_warn_type(const void* value, size_t size) {
  set_has_warn_type();
  if (warn_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_type_ = new ::std::string;
  }
  warn_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.warn_type)
}
inline ::std::string* detail_early_warning::mutable_warn_type() {
  set_has_warn_type();
  if (warn_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.warn_type)
  return warn_type_;
}
inline ::std::string* detail_early_warning::release_warn_type() {
  clear_has_warn_type();
  if (warn_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = warn_type_;
    warn_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_warn_type(::std::string* warn_type) {
  if (warn_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_type_;
  }
  if (warn_type) {
    set_has_warn_type();
    warn_type_ = warn_type;
  } else {
    clear_has_warn_type();
    warn_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.warn_type)
}

// optional bytes warn_time = 12;
inline bool detail_early_warning::has_warn_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void detail_early_warning::set_has_warn_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void detail_early_warning::clear_has_warn_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void detail_early_warning::clear_warn_time() {
  if (warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_time_->clear();
  }
  clear_has_warn_time();
}
inline const ::std::string& detail_early_warning::warn_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.warn_time)
  return *warn_time_;
}
inline void detail_early_warning::set_warn_time(const ::std::string& value) {
  set_has_warn_time();
  if (warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_time_ = new ::std::string;
  }
  warn_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.warn_time)
}
inline void detail_early_warning::set_warn_time(const char* value) {
  set_has_warn_time();
  if (warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_time_ = new ::std::string;
  }
  warn_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.warn_time)
}
inline void detail_early_warning::set_warn_time(const void* value, size_t size) {
  set_has_warn_time();
  if (warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_time_ = new ::std::string;
  }
  warn_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.warn_time)
}
inline ::std::string* detail_early_warning::mutable_warn_time() {
  set_has_warn_time();
  if (warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.warn_time)
  return warn_time_;
}
inline ::std::string* detail_early_warning::release_warn_time() {
  clear_has_warn_time();
  if (warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = warn_time_;
    warn_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_warn_time(::std::string* warn_time) {
  if (warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_time_;
  }
  if (warn_time) {
    set_has_warn_time();
    warn_time_ = warn_time;
  } else {
    clear_has_warn_time();
    warn_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.warn_time)
}

// optional int32 status_early_warning = 13;
inline bool detail_early_warning::has_status_early_warning() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void detail_early_warning::set_has_status_early_warning() {
  _has_bits_[0] |= 0x00001000u;
}
inline void detail_early_warning::clear_has_status_early_warning() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void detail_early_warning::clear_status_early_warning() {
  status_early_warning_ = 0;
  clear_has_status_early_warning();
}
inline ::google::protobuf::int32 detail_early_warning::status_early_warning() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.status_early_warning)
  return status_early_warning_;
}
inline void detail_early_warning::set_status_early_warning(::google::protobuf::int32 value) {
  set_has_status_early_warning();
  status_early_warning_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.status_early_warning)
}

// optional bytes remark = 14;
inline bool detail_early_warning::has_remark() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void detail_early_warning::set_has_remark() {
  _has_bits_[0] |= 0x00002000u;
}
inline void detail_early_warning::clear_has_remark() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void detail_early_warning::clear_remark() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& detail_early_warning::remark() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.remark)
  return *remark_;
}
inline void detail_early_warning::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.remark)
}
inline void detail_early_warning::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.remark)
}
inline void detail_early_warning::set_remark(const void* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.remark)
}
inline ::std::string* detail_early_warning::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.remark)
  return remark_;
}
inline ::std::string* detail_early_warning::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.remark)
}

// optional bytes operater = 15;
inline bool detail_early_warning::has_operater() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void detail_early_warning::set_has_operater() {
  _has_bits_[0] |= 0x00004000u;
}
inline void detail_early_warning::clear_has_operater() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void detail_early_warning::clear_operater() {
  if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_->clear();
  }
  clear_has_operater();
}
inline const ::std::string& detail_early_warning::operater() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.operater)
  return *operater_;
}
inline void detail_early_warning::set_operater(const ::std::string& value) {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  operater_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.operater)
}
inline void detail_early_warning::set_operater(const char* value) {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  operater_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.operater)
}
inline void detail_early_warning::set_operater(const void* value, size_t size) {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  operater_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.operater)
}
inline ::std::string* detail_early_warning::mutable_operater() {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.operater)
  return operater_;
}
inline ::std::string* detail_early_warning::release_operater() {
  clear_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operater_;
    operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_operater(::std::string* operater) {
  if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operater_;
  }
  if (operater) {
    set_has_operater();
    operater_ = operater;
  } else {
    clear_has_operater();
    operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.operater)
}

// optional bytes operator_time = 16;
inline bool detail_early_warning::has_operator_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void detail_early_warning::set_has_operator_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void detail_early_warning::clear_has_operator_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void detail_early_warning::clear_operator_time() {
  if (operator_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operator_time_->clear();
  }
  clear_has_operator_time();
}
inline const ::std::string& detail_early_warning::operator_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.operator_time)
  return *operator_time_;
}
inline void detail_early_warning::set_operator_time(const ::std::string& value) {
  set_has_operator_time();
  if (operator_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operator_time_ = new ::std::string;
  }
  operator_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.operator_time)
}
inline void detail_early_warning::set_operator_time(const char* value) {
  set_has_operator_time();
  if (operator_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operator_time_ = new ::std::string;
  }
  operator_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.operator_time)
}
inline void detail_early_warning::set_operator_time(const void* value, size_t size) {
  set_has_operator_time();
  if (operator_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operator_time_ = new ::std::string;
  }
  operator_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.operator_time)
}
inline ::std::string* detail_early_warning::mutable_operator_time() {
  set_has_operator_time();
  if (operator_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operator_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.operator_time)
  return operator_time_;
}
inline ::std::string* detail_early_warning::release_operator_time() {
  clear_has_operator_time();
  if (operator_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operator_time_;
    operator_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_operator_time(::std::string* operator_time) {
  if (operator_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operator_time_;
  }
  if (operator_time) {
    set_has_operator_time();
    operator_time_ = operator_time;
  } else {
    clear_has_operator_time();
    operator_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.operator_time)
}

// optional int32 id = 17;
inline bool detail_early_warning::has_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void detail_early_warning::set_has_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void detail_early_warning::clear_has_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void detail_early_warning::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 detail_early_warning::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.id)
  return id_;
}
inline void detail_early_warning::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.id)
}

// optional bytes nickname = 18;
inline bool detail_early_warning::has_nickname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void detail_early_warning::set_has_nickname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void detail_early_warning::clear_has_nickname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void detail_early_warning::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& detail_early_warning::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.nickname)
  return *nickname_;
}
inline void detail_early_warning::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.nickname)
}
inline void detail_early_warning::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.nickname)
}
inline void detail_early_warning::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.nickname)
}
inline ::std::string* detail_early_warning::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.nickname)
  return nickname_;
}
inline ::std::string* detail_early_warning::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.nickname)
}

// optional bytes warn_reason = 19;
inline bool detail_early_warning::has_warn_reason() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void detail_early_warning::set_has_warn_reason() {
  _has_bits_[0] |= 0x00040000u;
}
inline void detail_early_warning::clear_has_warn_reason() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void detail_early_warning::clear_warn_reason() {
  if (warn_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_reason_->clear();
  }
  clear_has_warn_reason();
}
inline const ::std::string& detail_early_warning::warn_reason() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning.warn_reason)
  return *warn_reason_;
}
inline void detail_early_warning::set_warn_reason(const ::std::string& value) {
  set_has_warn_reason();
  if (warn_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_reason_ = new ::std::string;
  }
  warn_reason_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning.warn_reason)
}
inline void detail_early_warning::set_warn_reason(const char* value) {
  set_has_warn_reason();
  if (warn_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_reason_ = new ::std::string;
  }
  warn_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning.warn_reason)
}
inline void detail_early_warning::set_warn_reason(const void* value, size_t size) {
  set_has_warn_reason();
  if (warn_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_reason_ = new ::std::string;
  }
  warn_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning.warn_reason)
}
inline ::std::string* detail_early_warning::mutable_warn_reason() {
  set_has_warn_reason();
  if (warn_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning.warn_reason)
  return warn_reason_;
}
inline ::std::string* detail_early_warning::release_warn_reason() {
  clear_has_warn_reason();
  if (warn_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = warn_reason_;
    warn_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning::set_allocated_warn_reason(::std::string* warn_reason) {
  if (warn_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_reason_;
  }
  if (warn_reason) {
    set_has_warn_reason();
    warn_reason_ = warn_reason;
  } else {
    clear_has_warn_reason();
    warn_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning.warn_reason)
}

// -------------------------------------------------------------------

// statistical_Intel_warning_ask

// optional .common.common_ask_header ask_header = 1;
inline bool statistical_Intel_warning_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistical_Intel_warning_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistical_Intel_warning_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistical_Intel_warning_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& statistical_Intel_warning_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* statistical_Intel_warning_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.statistical_Intel_warning_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* statistical_Intel_warning_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void statistical_Intel_warning_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.statistical_Intel_warning_ask.ask_header)
}

// -------------------------------------------------------------------

// statistical_early_warning_ans

// optional int32 borrow_bid_quantity = 1;
inline bool statistical_early_warning_ans::has_borrow_bid_quantity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistical_early_warning_ans::set_has_borrow_bid_quantity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistical_early_warning_ans::clear_has_borrow_bid_quantity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistical_early_warning_ans::clear_borrow_bid_quantity() {
  borrow_bid_quantity_ = 0;
  clear_has_borrow_bid_quantity();
}
inline ::google::protobuf::int32 statistical_early_warning_ans::borrow_bid_quantity() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_early_warning_ans.borrow_bid_quantity)
  return borrow_bid_quantity_;
}
inline void statistical_early_warning_ans::set_borrow_bid_quantity(::google::protobuf::int32 value) {
  set_has_borrow_bid_quantity();
  borrow_bid_quantity_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_early_warning_ans.borrow_bid_quantity)
}

// optional int32 early_warning_bid_quantity = 2;
inline bool statistical_early_warning_ans::has_early_warning_bid_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void statistical_early_warning_ans::set_has_early_warning_bid_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void statistical_early_warning_ans::clear_has_early_warning_bid_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void statistical_early_warning_ans::clear_early_warning_bid_quantity() {
  early_warning_bid_quantity_ = 0;
  clear_has_early_warning_bid_quantity();
}
inline ::google::protobuf::int32 statistical_early_warning_ans::early_warning_bid_quantity() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_early_warning_ans.early_warning_bid_quantity)
  return early_warning_bid_quantity_;
}
inline void statistical_early_warning_ans::set_early_warning_bid_quantity(::google::protobuf::int32 value) {
  set_has_early_warning_bid_quantity();
  early_warning_bid_quantity_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_early_warning_ans.early_warning_bid_quantity)
}

// optional float early_warning_and_risk = 3;
inline bool statistical_early_warning_ans::has_early_warning_and_risk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void statistical_early_warning_ans::set_has_early_warning_and_risk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void statistical_early_warning_ans::clear_has_early_warning_and_risk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void statistical_early_warning_ans::clear_early_warning_and_risk() {
  early_warning_and_risk_ = 0;
  clear_has_early_warning_and_risk();
}
inline float statistical_early_warning_ans::early_warning_and_risk() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_early_warning_ans.early_warning_and_risk)
  return early_warning_and_risk_;
}
inline void statistical_early_warning_ans::set_early_warning_and_risk(float value) {
  set_has_early_warning_and_risk();
  early_warning_and_risk_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_early_warning_ans.early_warning_and_risk)
}

// optional float early_warning_overdue_rate = 4;
inline bool statistical_early_warning_ans::has_early_warning_overdue_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void statistical_early_warning_ans::set_has_early_warning_overdue_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void statistical_early_warning_ans::clear_has_early_warning_overdue_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void statistical_early_warning_ans::clear_early_warning_overdue_rate() {
  early_warning_overdue_rate_ = 0;
  clear_has_early_warning_overdue_rate();
}
inline float statistical_early_warning_ans::early_warning_overdue_rate() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_early_warning_ans.early_warning_overdue_rate)
  return early_warning_overdue_rate_;
}
inline void statistical_early_warning_ans::set_early_warning_overdue_rate(float value) {
  set_has_early_warning_overdue_rate();
  early_warning_overdue_rate_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_early_warning_ans.early_warning_overdue_rate)
}

// optional .common.result_info result = 5;
inline bool statistical_early_warning_ans::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void statistical_early_warning_ans::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void statistical_early_warning_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void statistical_early_warning_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& statistical_early_warning_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_early_warning_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* statistical_early_warning_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.statistical_early_warning_ans.result)
  return result_;
}
inline ::common::result_info* statistical_early_warning_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void statistical_early_warning_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.statistical_early_warning_ans.result)
}

// -------------------------------------------------------------------

// statistical_Intel_warning_ans

// optional .common.result_info result = 1;
inline bool statistical_Intel_warning_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistical_Intel_warning_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistical_Intel_warning_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistical_Intel_warning_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& statistical_Intel_warning_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* statistical_Intel_warning_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.statistical_Intel_warning_ans.result)
  return result_;
}
inline ::common::result_info* statistical_Intel_warning_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void statistical_Intel_warning_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.statistical_Intel_warning_ans.result)
}

// optional int32 cur_user_amount = 2;
inline bool statistical_Intel_warning_ans::has_cur_user_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void statistical_Intel_warning_ans::set_has_cur_user_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void statistical_Intel_warning_ans::clear_has_cur_user_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void statistical_Intel_warning_ans::clear_cur_user_amount() {
  cur_user_amount_ = 0;
  clear_has_cur_user_amount();
}
inline ::google::protobuf::int32 statistical_Intel_warning_ans::cur_user_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ans.cur_user_amount)
  return cur_user_amount_;
}
inline void statistical_Intel_warning_ans::set_cur_user_amount(::google::protobuf::int32 value) {
  set_has_cur_user_amount();
  cur_user_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_Intel_warning_ans.cur_user_amount)
}

// optional int32 qiandabao_amount = 3;
inline bool statistical_Intel_warning_ans::has_qiandabao_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void statistical_Intel_warning_ans::set_has_qiandabao_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void statistical_Intel_warning_ans::clear_has_qiandabao_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void statistical_Intel_warning_ans::clear_qiandabao_amount() {
  qiandabao_amount_ = 0;
  clear_has_qiandabao_amount();
}
inline ::google::protobuf::int32 statistical_Intel_warning_ans::qiandabao_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ans.qiandabao_amount)
  return qiandabao_amount_;
}
inline void statistical_Intel_warning_ans::set_qiandabao_amount(::google::protobuf::int32 value) {
  set_has_qiandabao_amount();
  qiandabao_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_Intel_warning_ans.qiandabao_amount)
}

// optional int32 weidabao_amount = 4;
inline bool statistical_Intel_warning_ans::has_weidabao_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void statistical_Intel_warning_ans::set_has_weidabao_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void statistical_Intel_warning_ans::clear_has_weidabao_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void statistical_Intel_warning_ans::clear_weidabao_amount() {
  weidabao_amount_ = 0;
  clear_has_weidabao_amount();
}
inline ::google::protobuf::int32 statistical_Intel_warning_ans::weidabao_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ans.weidabao_amount)
  return weidabao_amount_;
}
inline void statistical_Intel_warning_ans::set_weidabao_amount(::google::protobuf::int32 value) {
  set_has_weidabao_amount();
  weidabao_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_Intel_warning_ans.weidabao_amount)
}

// optional int32 credit_borrow_amount = 5;
inline bool statistical_Intel_warning_ans::has_credit_borrow_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void statistical_Intel_warning_ans::set_has_credit_borrow_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void statistical_Intel_warning_ans::clear_has_credit_borrow_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void statistical_Intel_warning_ans::clear_credit_borrow_amount() {
  credit_borrow_amount_ = 0;
  clear_has_credit_borrow_amount();
}
inline ::google::protobuf::int32 statistical_Intel_warning_ans::credit_borrow_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ans.credit_borrow_amount)
  return credit_borrow_amount_;
}
inline void statistical_Intel_warning_ans::set_credit_borrow_amount(::google::protobuf::int32 value) {
  set_has_credit_borrow_amount();
  credit_borrow_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_Intel_warning_ans.credit_borrow_amount)
}

// optional int32 qiaoqiao_bid_amount = 6;
inline bool statistical_Intel_warning_ans::has_qiaoqiao_bid_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void statistical_Intel_warning_ans::set_has_qiaoqiao_bid_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void statistical_Intel_warning_ans::clear_has_qiaoqiao_bid_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void statistical_Intel_warning_ans::clear_qiaoqiao_bid_amount() {
  qiaoqiao_bid_amount_ = 0;
  clear_has_qiaoqiao_bid_amount();
}
inline ::google::protobuf::int32 statistical_Intel_warning_ans::qiaoqiao_bid_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.statistical_Intel_warning_ans.qiaoqiao_bid_amount)
  return qiaoqiao_bid_amount_;
}
inline void statistical_Intel_warning_ans::set_qiaoqiao_bid_amount(::google::protobuf::int32 value) {
  set_has_qiaoqiao_bid_amount();
  qiaoqiao_bid_amount_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.statistical_Intel_warning_ans.qiaoqiao_bid_amount)
}

// -------------------------------------------------------------------

// detail_early_warning_ask

// optional bytes province = 1;
inline bool detail_early_warning_ask::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detail_early_warning_ask::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detail_early_warning_ask::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detail_early_warning_ask::clear_province() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& detail_early_warning_ask::province() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.province)
  return *province_;
}
inline void detail_early_warning_ask::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.province)
}
inline void detail_early_warning_ask::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning_ask.province)
}
inline void detail_early_warning_ask::set_province(const void* value, size_t size) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning_ask.province)
}
inline ::std::string* detail_early_warning_ask::mutable_province() {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.province)
  return province_;
}
inline ::std::string* detail_early_warning_ask::release_province() {
  clear_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning_ask::set_allocated_province(::std::string* province) {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.province)
}

// optional bytes city = 2;
inline bool detail_early_warning_ask::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void detail_early_warning_ask::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void detail_early_warning_ask::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void detail_early_warning_ask::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& detail_early_warning_ask::city() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.city)
  return *city_;
}
inline void detail_early_warning_ask::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.city)
}
inline void detail_early_warning_ask::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning_ask.city)
}
inline void detail_early_warning_ask::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning_ask.city)
}
inline ::std::string* detail_early_warning_ask::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.city)
  return city_;
}
inline ::std::string* detail_early_warning_ask::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning_ask::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.city)
}

// optional bytes mobile_phone = 3;
inline bool detail_early_warning_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detail_early_warning_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detail_early_warning_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detail_early_warning_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& detail_early_warning_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.mobile_phone)
  return *mobile_phone_;
}
inline void detail_early_warning_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.mobile_phone)
}
inline void detail_early_warning_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning_ask.mobile_phone)
}
inline void detail_early_warning_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning_ask.mobile_phone)
}
inline ::std::string* detail_early_warning_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* detail_early_warning_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.mobile_phone)
}

// optional bytes id_no = 4;
inline bool detail_early_warning_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void detail_early_warning_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void detail_early_warning_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void detail_early_warning_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& detail_early_warning_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.id_no)
  return *id_no_;
}
inline void detail_early_warning_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.id_no)
}
inline void detail_early_warning_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning_ask.id_no)
}
inline void detail_early_warning_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning_ask.id_no)
}
inline ::std::string* detail_early_warning_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.id_no)
  return id_no_;
}
inline ::std::string* detail_early_warning_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.id_no)
}

// optional bytes start_date = 5;
inline bool detail_early_warning_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void detail_early_warning_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void detail_early_warning_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void detail_early_warning_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& detail_early_warning_ask::start_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.start_date)
  return *start_date_;
}
inline void detail_early_warning_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.start_date)
}
inline void detail_early_warning_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning_ask.start_date)
}
inline void detail_early_warning_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning_ask.start_date)
}
inline ::std::string* detail_early_warning_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.start_date)
  return start_date_;
}
inline ::std::string* detail_early_warning_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.start_date)
}

// optional bytes end_date = 6;
inline bool detail_early_warning_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void detail_early_warning_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void detail_early_warning_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void detail_early_warning_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& detail_early_warning_ask::end_date() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.end_date)
  return *end_date_;
}
inline void detail_early_warning_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.end_date)
}
inline void detail_early_warning_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.detail_early_warning_ask.end_date)
}
inline void detail_early_warning_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.detail_early_warning_ask.end_date)
}
inline ::std::string* detail_early_warning_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.end_date)
  return end_date_;
}
inline ::std::string* detail_early_warning_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void detail_early_warning_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.end_date)
}

// optional int32 page_num = 7;
inline bool detail_early_warning_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void detail_early_warning_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void detail_early_warning_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void detail_early_warning_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 detail_early_warning_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.page_num)
  return page_num_;
}
inline void detail_early_warning_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.page_num)
}

// optional int32 cur_page = 8;
inline bool detail_early_warning_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void detail_early_warning_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000080u;
}
inline void detail_early_warning_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void detail_early_warning_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 detail_early_warning_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.cur_page)
  return cur_page_;
}
inline void detail_early_warning_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.cur_page)
}

// optional int32 warn_type = 9;
inline bool detail_early_warning_ask::has_warn_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void detail_early_warning_ask::set_has_warn_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void detail_early_warning_ask::clear_has_warn_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void detail_early_warning_ask::clear_warn_type() {
  warn_type_ = 0;
  clear_has_warn_type();
}
inline ::google::protobuf::int32 detail_early_warning_ask::warn_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.warn_type)
  return warn_type_;
}
inline void detail_early_warning_ask::set_warn_type(::google::protobuf::int32 value) {
  set_has_warn_type();
  warn_type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.warn_type)
}

// optional int32 status_early_warning = 10;
inline bool detail_early_warning_ask::has_status_early_warning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void detail_early_warning_ask::set_has_status_early_warning() {
  _has_bits_[0] |= 0x00000200u;
}
inline void detail_early_warning_ask::clear_has_status_early_warning() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void detail_early_warning_ask::clear_status_early_warning() {
  status_early_warning_ = 0;
  clear_has_status_early_warning();
}
inline ::google::protobuf::int32 detail_early_warning_ask::status_early_warning() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.status_early_warning)
  return status_early_warning_;
}
inline void detail_early_warning_ask::set_status_early_warning(::google::protobuf::int32 value) {
  set_has_status_early_warning();
  status_early_warning_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ask.status_early_warning)
}

// optional .common.common_ask_header ask_header = 11;
inline bool detail_early_warning_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void detail_early_warning_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000400u;
}
inline void detail_early_warning_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void detail_early_warning_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& detail_early_warning_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* detail_early_warning_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* detail_early_warning_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void detail_early_warning_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ask.ask_header)
}

// -------------------------------------------------------------------

// detail_early_warning_ans

// optional int32 total_number = 1;
inline bool detail_early_warning_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detail_early_warning_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detail_early_warning_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detail_early_warning_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 detail_early_warning_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ans.total_number)
  return total_number_;
}
inline void detail_early_warning_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.detail_early_warning_ans.total_number)
}

// repeated .AFP_main_frame.detail_early_warning info = 2;
inline int detail_early_warning_ans::info_size() const {
  return info_.size();
}
inline void detail_early_warning_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_main_frame::detail_early_warning& detail_early_warning_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ans.info)
  return info_.Get(index);
}
inline ::AFP_main_frame::detail_early_warning* detail_early_warning_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_main_frame::detail_early_warning* detail_early_warning_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.detail_early_warning_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::detail_early_warning >&
detail_early_warning_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.detail_early_warning_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::detail_early_warning >*
detail_early_warning_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.detail_early_warning_ans.info)
  return &info_;
}

// optional .common.result_info result = 3;
inline bool detail_early_warning_ans::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detail_early_warning_ans::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detail_early_warning_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detail_early_warning_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& detail_early_warning_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.detail_early_warning_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* detail_early_warning_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.detail_early_warning_ans.result)
  return result_;
}
inline ::common::result_info* detail_early_warning_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void detail_early_warning_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.detail_early_warning_ans.result)
}

// -------------------------------------------------------------------

// cancel_the_warning_ask

// optional bytes borrow_bid = 1;
inline bool cancel_the_warning_ask::has_borrow_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancel_the_warning_ask::set_has_borrow_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancel_the_warning_ask::clear_has_borrow_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancel_the_warning_ask::clear_borrow_bid() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_->clear();
  }
  clear_has_borrow_bid();
}
inline const ::std::string& cancel_the_warning_ask::borrow_bid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ask.borrow_bid)
  return *borrow_bid_;
}
inline void cancel_the_warning_ask::set_borrow_bid(const ::std::string& value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.cancel_the_warning_ask.borrow_bid)
}
inline void cancel_the_warning_ask::set_borrow_bid(const char* value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.cancel_the_warning_ask.borrow_bid)
}
inline void cancel_the_warning_ask::set_borrow_bid(const void* value, size_t size) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.cancel_the_warning_ask.borrow_bid)
}
inline ::std::string* cancel_the_warning_ask::mutable_borrow_bid() {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ask.borrow_bid)
  return borrow_bid_;
}
inline ::std::string* cancel_the_warning_ask::release_borrow_bid() {
  clear_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_;
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cancel_the_warning_ask::set_allocated_borrow_bid(::std::string* borrow_bid) {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (borrow_bid) {
    set_has_borrow_bid();
    borrow_bid_ = borrow_bid;
  } else {
    clear_has_borrow_bid();
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ask.borrow_bid)
}

// optional bytes cancel_the_warning_operation = 2;
inline bool cancel_the_warning_ask::has_cancel_the_warning_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cancel_the_warning_ask::set_has_cancel_the_warning_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cancel_the_warning_ask::clear_has_cancel_the_warning_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cancel_the_warning_ask::clear_cancel_the_warning_operation() {
  if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_->clear();
  }
  clear_has_cancel_the_warning_operation();
}
inline const ::std::string& cancel_the_warning_ask::cancel_the_warning_operation() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ask.cancel_the_warning_operation)
  return *cancel_the_warning_operation_;
}
inline void cancel_the_warning_ask::set_cancel_the_warning_operation(const ::std::string& value) {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  cancel_the_warning_operation_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.cancel_the_warning_ask.cancel_the_warning_operation)
}
inline void cancel_the_warning_ask::set_cancel_the_warning_operation(const char* value) {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  cancel_the_warning_operation_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.cancel_the_warning_ask.cancel_the_warning_operation)
}
inline void cancel_the_warning_ask::set_cancel_the_warning_operation(const void* value, size_t size) {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  cancel_the_warning_operation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.cancel_the_warning_ask.cancel_the_warning_operation)
}
inline ::std::string* cancel_the_warning_ask::mutable_cancel_the_warning_operation() {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ask.cancel_the_warning_operation)
  return cancel_the_warning_operation_;
}
inline ::std::string* cancel_the_warning_ask::release_cancel_the_warning_operation() {
  clear_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cancel_the_warning_operation_;
    cancel_the_warning_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cancel_the_warning_ask::set_allocated_cancel_the_warning_operation(::std::string* cancel_the_warning_operation) {
  if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cancel_the_warning_operation_;
  }
  if (cancel_the_warning_operation) {
    set_has_cancel_the_warning_operation();
    cancel_the_warning_operation_ = cancel_the_warning_operation;
  } else {
    clear_has_cancel_the_warning_operation();
    cancel_the_warning_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ask.cancel_the_warning_operation)
}

// optional .common.common_ask_header ask_header = 3;
inline bool cancel_the_warning_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cancel_the_warning_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cancel_the_warning_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cancel_the_warning_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& cancel_the_warning_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* cancel_the_warning_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* cancel_the_warning_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void cancel_the_warning_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ask.ask_header)
}

// -------------------------------------------------------------------

// cancel_the_warning_ans

// optional .common.errorinfo error = 1;
inline bool cancel_the_warning_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancel_the_warning_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancel_the_warning_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancel_the_warning_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& cancel_the_warning_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* cancel_the_warning_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ans.error)
  return error_;
}
inline ::common::errorinfo* cancel_the_warning_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void cancel_the_warning_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ans.error)
}

// optional bytes borrow_bid = 2;
inline bool cancel_the_warning_ans::has_borrow_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cancel_the_warning_ans::set_has_borrow_bid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cancel_the_warning_ans::clear_has_borrow_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cancel_the_warning_ans::clear_borrow_bid() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_->clear();
  }
  clear_has_borrow_bid();
}
inline const ::std::string& cancel_the_warning_ans::borrow_bid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ans.borrow_bid)
  return *borrow_bid_;
}
inline void cancel_the_warning_ans::set_borrow_bid(const ::std::string& value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.cancel_the_warning_ans.borrow_bid)
}
inline void cancel_the_warning_ans::set_borrow_bid(const char* value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.cancel_the_warning_ans.borrow_bid)
}
inline void cancel_the_warning_ans::set_borrow_bid(const void* value, size_t size) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.cancel_the_warning_ans.borrow_bid)
}
inline ::std::string* cancel_the_warning_ans::mutable_borrow_bid() {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ans.borrow_bid)
  return borrow_bid_;
}
inline ::std::string* cancel_the_warning_ans::release_borrow_bid() {
  clear_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_;
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cancel_the_warning_ans::set_allocated_borrow_bid(::std::string* borrow_bid) {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (borrow_bid) {
    set_has_borrow_bid();
    borrow_bid_ = borrow_bid;
  } else {
    clear_has_borrow_bid();
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ans.borrow_bid)
}

// optional int32 status_early_warning = 3;
inline bool cancel_the_warning_ans::has_status_early_warning() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cancel_the_warning_ans::set_has_status_early_warning() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cancel_the_warning_ans::clear_has_status_early_warning() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cancel_the_warning_ans::clear_status_early_warning() {
  status_early_warning_ = 0;
  clear_has_status_early_warning();
}
inline ::google::protobuf::int32 cancel_the_warning_ans::status_early_warning() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ans.status_early_warning)
  return status_early_warning_;
}
inline void cancel_the_warning_ans::set_status_early_warning(::google::protobuf::int32 value) {
  set_has_status_early_warning();
  status_early_warning_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.cancel_the_warning_ans.status_early_warning)
}

// optional bytes cancel_the_warn_time = 4;
inline bool cancel_the_warning_ans::has_cancel_the_warn_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cancel_the_warning_ans::set_has_cancel_the_warn_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cancel_the_warning_ans::clear_has_cancel_the_warn_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cancel_the_warning_ans::clear_cancel_the_warn_time() {
  if (cancel_the_warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warn_time_->clear();
  }
  clear_has_cancel_the_warn_time();
}
inline const ::std::string& cancel_the_warning_ans::cancel_the_warn_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ans.cancel_the_warn_time)
  return *cancel_the_warn_time_;
}
inline void cancel_the_warning_ans::set_cancel_the_warn_time(const ::std::string& value) {
  set_has_cancel_the_warn_time();
  if (cancel_the_warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warn_time_ = new ::std::string;
  }
  cancel_the_warn_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.cancel_the_warning_ans.cancel_the_warn_time)
}
inline void cancel_the_warning_ans::set_cancel_the_warn_time(const char* value) {
  set_has_cancel_the_warn_time();
  if (cancel_the_warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warn_time_ = new ::std::string;
  }
  cancel_the_warn_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.cancel_the_warning_ans.cancel_the_warn_time)
}
inline void cancel_the_warning_ans::set_cancel_the_warn_time(const void* value, size_t size) {
  set_has_cancel_the_warn_time();
  if (cancel_the_warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warn_time_ = new ::std::string;
  }
  cancel_the_warn_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.cancel_the_warning_ans.cancel_the_warn_time)
}
inline ::std::string* cancel_the_warning_ans::mutable_cancel_the_warn_time() {
  set_has_cancel_the_warn_time();
  if (cancel_the_warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warn_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ans.cancel_the_warn_time)
  return cancel_the_warn_time_;
}
inline ::std::string* cancel_the_warning_ans::release_cancel_the_warn_time() {
  clear_has_cancel_the_warn_time();
  if (cancel_the_warn_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cancel_the_warn_time_;
    cancel_the_warn_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cancel_the_warning_ans::set_allocated_cancel_the_warn_time(::std::string* cancel_the_warn_time) {
  if (cancel_the_warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cancel_the_warn_time_;
  }
  if (cancel_the_warn_time) {
    set_has_cancel_the_warn_time();
    cancel_the_warn_time_ = cancel_the_warn_time;
  } else {
    clear_has_cancel_the_warn_time();
    cancel_the_warn_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ans.cancel_the_warn_time)
}

// optional bytes cancel_the_warning_operation = 5;
inline bool cancel_the_warning_ans::has_cancel_the_warning_operation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cancel_the_warning_ans::set_has_cancel_the_warning_operation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cancel_the_warning_ans::clear_has_cancel_the_warning_operation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cancel_the_warning_ans::clear_cancel_the_warning_operation() {
  if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_->clear();
  }
  clear_has_cancel_the_warning_operation();
}
inline const ::std::string& cancel_the_warning_ans::cancel_the_warning_operation() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.cancel_the_warning_ans.cancel_the_warning_operation)
  return *cancel_the_warning_operation_;
}
inline void cancel_the_warning_ans::set_cancel_the_warning_operation(const ::std::string& value) {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  cancel_the_warning_operation_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.cancel_the_warning_ans.cancel_the_warning_operation)
}
inline void cancel_the_warning_ans::set_cancel_the_warning_operation(const char* value) {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  cancel_the_warning_operation_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.cancel_the_warning_ans.cancel_the_warning_operation)
}
inline void cancel_the_warning_ans::set_cancel_the_warning_operation(const void* value, size_t size) {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  cancel_the_warning_operation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.cancel_the_warning_ans.cancel_the_warning_operation)
}
inline ::std::string* cancel_the_warning_ans::mutable_cancel_the_warning_operation() {
  set_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cancel_the_warning_operation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.cancel_the_warning_ans.cancel_the_warning_operation)
  return cancel_the_warning_operation_;
}
inline ::std::string* cancel_the_warning_ans::release_cancel_the_warning_operation() {
  clear_has_cancel_the_warning_operation();
  if (cancel_the_warning_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cancel_the_warning_operation_;
    cancel_the_warning_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cancel_the_warning_ans::set_allocated_cancel_the_warning_operation(::std::string* cancel_the_warning_operation) {
  if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cancel_the_warning_operation_;
  }
  if (cancel_the_warning_operation) {
    set_has_cancel_the_warning_operation();
    cancel_the_warning_operation_ = cancel_the_warning_operation;
  } else {
    clear_has_cancel_the_warning_operation();
    cancel_the_warning_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.cancel_the_warning_ans.cancel_the_warning_operation)
}

// -------------------------------------------------------------------

// modify_save_warning_ask

// optional .common.common_ask_header ask_header = 1;
inline bool modify_save_warning_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_save_warning_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_save_warning_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_save_warning_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& modify_save_warning_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.modify_save_warning_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* modify_save_warning_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.modify_save_warning_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* modify_save_warning_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void modify_save_warning_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.modify_save_warning_ask.ask_header)
}

// optional int32 id = 2;
inline bool modify_save_warning_ask::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void modify_save_warning_ask::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void modify_save_warning_ask::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void modify_save_warning_ask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 modify_save_warning_ask::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.modify_save_warning_ask.id)
  return id_;
}
inline void modify_save_warning_ask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.modify_save_warning_ask.id)
}

// optional bytes operater = 3;
inline bool modify_save_warning_ask::has_operater() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void modify_save_warning_ask::set_has_operater() {
  _has_bits_[0] |= 0x00000004u;
}
inline void modify_save_warning_ask::clear_has_operater() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void modify_save_warning_ask::clear_operater() {
  if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_->clear();
  }
  clear_has_operater();
}
inline const ::std::string& modify_save_warning_ask::operater() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.modify_save_warning_ask.operater)
  return *operater_;
}
inline void modify_save_warning_ask::set_operater(const ::std::string& value) {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  operater_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.modify_save_warning_ask.operater)
}
inline void modify_save_warning_ask::set_operater(const char* value) {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  operater_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.modify_save_warning_ask.operater)
}
inline void modify_save_warning_ask::set_operater(const void* value, size_t size) {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  operater_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.modify_save_warning_ask.operater)
}
inline ::std::string* modify_save_warning_ask::mutable_operater() {
  set_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.modify_save_warning_ask.operater)
  return operater_;
}
inline ::std::string* modify_save_warning_ask::release_operater() {
  clear_has_operater();
  if (operater_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operater_;
    operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void modify_save_warning_ask::set_allocated_operater(::std::string* operater) {
  if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operater_;
  }
  if (operater) {
    set_has_operater();
    operater_ = operater;
  } else {
    clear_has_operater();
    operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.modify_save_warning_ask.operater)
}

// optional bytes operater_time = 4;
inline bool modify_save_warning_ask::has_operater_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void modify_save_warning_ask::set_has_operater_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void modify_save_warning_ask::clear_has_operater_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void modify_save_warning_ask::clear_operater_time() {
  if (operater_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_time_->clear();
  }
  clear_has_operater_time();
}
inline const ::std::string& modify_save_warning_ask::operater_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.modify_save_warning_ask.operater_time)
  return *operater_time_;
}
inline void modify_save_warning_ask::set_operater_time(const ::std::string& value) {
  set_has_operater_time();
  if (operater_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_time_ = new ::std::string;
  }
  operater_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.modify_save_warning_ask.operater_time)
}
inline void modify_save_warning_ask::set_operater_time(const char* value) {
  set_has_operater_time();
  if (operater_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_time_ = new ::std::string;
  }
  operater_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.modify_save_warning_ask.operater_time)
}
inline void modify_save_warning_ask::set_operater_time(const void* value, size_t size) {
  set_has_operater_time();
  if (operater_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_time_ = new ::std::string;
  }
  operater_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.modify_save_warning_ask.operater_time)
}
inline ::std::string* modify_save_warning_ask::mutable_operater_time() {
  set_has_operater_time();
  if (operater_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operater_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.modify_save_warning_ask.operater_time)
  return operater_time_;
}
inline ::std::string* modify_save_warning_ask::release_operater_time() {
  clear_has_operater_time();
  if (operater_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operater_time_;
    operater_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void modify_save_warning_ask::set_allocated_operater_time(::std::string* operater_time) {
  if (operater_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operater_time_;
  }
  if (operater_time) {
    set_has_operater_time();
    operater_time_ = operater_time;
  } else {
    clear_has_operater_time();
    operater_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.modify_save_warning_ask.operater_time)
}

// optional bytes remark = 5;
inline bool modify_save_warning_ask::has_remark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void modify_save_warning_ask::set_has_remark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void modify_save_warning_ask::clear_has_remark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void modify_save_warning_ask::clear_remark() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& modify_save_warning_ask::remark() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.modify_save_warning_ask.remark)
  return *remark_;
}
inline void modify_save_warning_ask::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.modify_save_warning_ask.remark)
}
inline void modify_save_warning_ask::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.modify_save_warning_ask.remark)
}
inline void modify_save_warning_ask::set_remark(const void* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.modify_save_warning_ask.remark)
}
inline ::std::string* modify_save_warning_ask::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.modify_save_warning_ask.remark)
  return remark_;
}
inline ::std::string* modify_save_warning_ask::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void modify_save_warning_ask::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.modify_save_warning_ask.remark)
}

// -------------------------------------------------------------------

// modify_save_warning_ans

// optional .common.result_info result = 1;
inline bool modify_save_warning_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void modify_save_warning_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void modify_save_warning_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void modify_save_warning_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& modify_save_warning_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.modify_save_warning_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* modify_save_warning_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.modify_save_warning_ans.result)
  return result_;
}
inline ::common::result_info* modify_save_warning_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void modify_save_warning_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.modify_save_warning_ans.result)
}

// -------------------------------------------------------------------

// bid_detail_ask

// optional .common.common_ask_header ask_header = 1;
inline bool bid_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& bid_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* bid_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* bid_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void bid_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_detail_ask.ask_header)
}

// optional int32 id = 2;
inline bool bid_detail_ask::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_detail_ask::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_detail_ask::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_detail_ask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 bid_detail_ask::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_detail_ask.id)
  return id_;
}
inline void bid_detail_ask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_detail_ask.id)
}

// optional bytes mobile_phone = 3;
inline bool bid_detail_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bid_detail_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bid_detail_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bid_detail_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& bid_detail_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_detail_ask.mobile_phone)
  return *mobile_phone_;
}
inline void bid_detail_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_detail_ask.mobile_phone)
}
inline void bid_detail_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_detail_ask.mobile_phone)
}
inline void bid_detail_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_detail_ask.mobile_phone)
}
inline ::std::string* bid_detail_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_detail_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* bid_detail_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_detail_ask.mobile_phone)
}

// optional bytes id_no = 4;
inline bool bid_detail_ask::has_id_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bid_detail_ask::set_has_id_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bid_detail_ask::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bid_detail_ask::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& bid_detail_ask::id_no() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.bid_detail_ask.id_no)
  return *id_no_;
}
inline void bid_detail_ask::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.bid_detail_ask.id_no)
}
inline void bid_detail_ask::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.bid_detail_ask.id_no)
}
inline void bid_detail_ask::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.bid_detail_ask.id_no)
}
inline ::std::string* bid_detail_ask::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.bid_detail_ask.id_no)
  return id_no_;
}
inline ::std::string* bid_detail_ask::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_ask::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.bid_detail_ask.id_no)
}

// -------------------------------------------------------------------

// borrow_bid_detail_info

// optional bytes borrow_bid = 1;
inline bool borrow_bid_detail_info::has_borrow_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void borrow_bid_detail_info::set_has_borrow_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void borrow_bid_detail_info::clear_has_borrow_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void borrow_bid_detail_info::clear_borrow_bid() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_->clear();
  }
  clear_has_borrow_bid();
}
inline const ::std::string& borrow_bid_detail_info::borrow_bid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.borrow_bid)
  return *borrow_bid_;
}
inline void borrow_bid_detail_info::set_borrow_bid(const ::std::string& value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.borrow_bid)
}
inline void borrow_bid_detail_info::set_borrow_bid(const char* value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.borrow_bid)
}
inline void borrow_bid_detail_info::set_borrow_bid(const void* value, size_t size) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.borrow_bid)
}
inline ::std::string* borrow_bid_detail_info::mutable_borrow_bid() {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.borrow_bid)
  return borrow_bid_;
}
inline ::std::string* borrow_bid_detail_info::release_borrow_bid() {
  clear_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_;
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_borrow_bid(::std::string* borrow_bid) {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (borrow_bid) {
    set_has_borrow_bid();
    borrow_bid_ = borrow_bid;
  } else {
    clear_has_borrow_bid();
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.borrow_bid)
}

// optional bytes bid_name = 2;
inline bool borrow_bid_detail_info::has_bid_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void borrow_bid_detail_info::set_has_bid_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void borrow_bid_detail_info::clear_has_bid_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void borrow_bid_detail_info::clear_bid_name() {
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_->clear();
  }
  clear_has_bid_name();
}
inline const ::std::string& borrow_bid_detail_info::bid_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.bid_name)
  return *bid_name_;
}
inline void borrow_bid_detail_info::set_bid_name(const ::std::string& value) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.bid_name)
}
inline void borrow_bid_detail_info::set_bid_name(const char* value) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.bid_name)
}
inline void borrow_bid_detail_info::set_bid_name(const void* value, size_t size) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.bid_name)
}
inline ::std::string* borrow_bid_detail_info::mutable_bid_name() {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.bid_name)
  return bid_name_;
}
inline ::std::string* borrow_bid_detail_info::release_bid_name() {
  clear_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_name_;
    bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_bid_name(::std::string* bid_name) {
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_name_;
  }
  if (bid_name) {
    set_has_bid_name();
    bid_name_ = bid_name;
  } else {
    clear_has_bid_name();
    bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.bid_name)
}

// optional float borrow_money = 3;
inline bool borrow_bid_detail_info::has_borrow_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void borrow_bid_detail_info::set_has_borrow_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void borrow_bid_detail_info::clear_has_borrow_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void borrow_bid_detail_info::clear_borrow_money() {
  borrow_money_ = 0;
  clear_has_borrow_money();
}
inline float borrow_bid_detail_info::borrow_money() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.borrow_money)
  return borrow_money_;
}
inline void borrow_bid_detail_info::set_borrow_money(float value) {
  set_has_borrow_money();
  borrow_money_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.borrow_money)
}

// optional float borrow_rate = 4;
inline bool borrow_bid_detail_info::has_borrow_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void borrow_bid_detail_info::set_has_borrow_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void borrow_bid_detail_info::clear_has_borrow_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void borrow_bid_detail_info::clear_borrow_rate() {
  borrow_rate_ = 0;
  clear_has_borrow_rate();
}
inline float borrow_bid_detail_info::borrow_rate() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.borrow_rate)
  return borrow_rate_;
}
inline void borrow_bid_detail_info::set_borrow_rate(float value) {
  set_has_borrow_rate();
  borrow_rate_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.borrow_rate)
}

// optional float guaranteed_rate = 5;
inline bool borrow_bid_detail_info::has_guaranteed_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void borrow_bid_detail_info::set_has_guaranteed_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void borrow_bid_detail_info::clear_has_guaranteed_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void borrow_bid_detail_info::clear_guaranteed_rate() {
  guaranteed_rate_ = 0;
  clear_has_guaranteed_rate();
}
inline float borrow_bid_detail_info::guaranteed_rate() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.guaranteed_rate)
  return guaranteed_rate_;
}
inline void borrow_bid_detail_info::set_guaranteed_rate(float value) {
  set_has_guaranteed_rate();
  guaranteed_rate_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.guaranteed_rate)
}

// optional bytes borrow_time = 6;
inline bool borrow_bid_detail_info::has_borrow_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void borrow_bid_detail_info::set_has_borrow_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void borrow_bid_detail_info::clear_has_borrow_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void borrow_bid_detail_info::clear_borrow_time() {
  if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_->clear();
  }
  clear_has_borrow_time();
}
inline const ::std::string& borrow_bid_detail_info::borrow_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.borrow_time)
  return *borrow_time_;
}
inline void borrow_bid_detail_info::set_borrow_time(const ::std::string& value) {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  borrow_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.borrow_time)
}
inline void borrow_bid_detail_info::set_borrow_time(const char* value) {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  borrow_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.borrow_time)
}
inline void borrow_bid_detail_info::set_borrow_time(const void* value, size_t size) {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  borrow_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.borrow_time)
}
inline ::std::string* borrow_bid_detail_info::mutable_borrow_time() {
  set_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.borrow_time)
  return borrow_time_;
}
inline ::std::string* borrow_bid_detail_info::release_borrow_time() {
  clear_has_borrow_time();
  if (borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_time_;
    borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_borrow_time(::std::string* borrow_time) {
  if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_time_;
  }
  if (borrow_time) {
    set_has_borrow_time();
    borrow_time_ = borrow_time;
  } else {
    clear_has_borrow_time();
    borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.borrow_time)
}

// optional bytes borrow_bid_type = 7;
inline bool borrow_bid_detail_info::has_borrow_bid_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void borrow_bid_detail_info::set_has_borrow_bid_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void borrow_bid_detail_info::clear_has_borrow_bid_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void borrow_bid_detail_info::clear_borrow_bid_type() {
  if (borrow_bid_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_type_->clear();
  }
  clear_has_borrow_bid_type();
}
inline const ::std::string& borrow_bid_detail_info::borrow_bid_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.borrow_bid_type)
  return *borrow_bid_type_;
}
inline void borrow_bid_detail_info::set_borrow_bid_type(const ::std::string& value) {
  set_has_borrow_bid_type();
  if (borrow_bid_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_type_ = new ::std::string;
  }
  borrow_bid_type_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.borrow_bid_type)
}
inline void borrow_bid_detail_info::set_borrow_bid_type(const char* value) {
  set_has_borrow_bid_type();
  if (borrow_bid_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_type_ = new ::std::string;
  }
  borrow_bid_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.borrow_bid_type)
}
inline void borrow_bid_detail_info::set_borrow_bid_type(const void* value, size_t size) {
  set_has_borrow_bid_type();
  if (borrow_bid_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_type_ = new ::std::string;
  }
  borrow_bid_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.borrow_bid_type)
}
inline ::std::string* borrow_bid_detail_info::mutable_borrow_bid_type() {
  set_has_borrow_bid_type();
  if (borrow_bid_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.borrow_bid_type)
  return borrow_bid_type_;
}
inline ::std::string* borrow_bid_detail_info::release_borrow_bid_type() {
  clear_has_borrow_bid_type();
  if (borrow_bid_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_type_;
    borrow_bid_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_borrow_bid_type(::std::string* borrow_bid_type) {
  if (borrow_bid_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_type_;
  }
  if (borrow_bid_type) {
    set_has_borrow_bid_type();
    borrow_bid_type_ = borrow_bid_type;
  } else {
    clear_has_borrow_bid_type();
    borrow_bid_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.borrow_bid_type)
}

// optional bytes borrow_bid_status = 8;
inline bool borrow_bid_detail_info::has_borrow_bid_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void borrow_bid_detail_info::set_has_borrow_bid_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void borrow_bid_detail_info::clear_has_borrow_bid_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void borrow_bid_detail_info::clear_borrow_bid_status() {
  if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_->clear();
  }
  clear_has_borrow_bid_status();
}
inline const ::std::string& borrow_bid_detail_info::borrow_bid_status() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.borrow_bid_status)
  return *borrow_bid_status_;
}
inline void borrow_bid_detail_info::set_borrow_bid_status(const ::std::string& value) {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  borrow_bid_status_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.borrow_bid_status)
}
inline void borrow_bid_detail_info::set_borrow_bid_status(const char* value) {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  borrow_bid_status_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.borrow_bid_status)
}
inline void borrow_bid_detail_info::set_borrow_bid_status(const void* value, size_t size) {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  borrow_bid_status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.borrow_bid_status)
}
inline ::std::string* borrow_bid_detail_info::mutable_borrow_bid_status() {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.borrow_bid_status)
  return borrow_bid_status_;
}
inline ::std::string* borrow_bid_detail_info::release_borrow_bid_status() {
  clear_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_status_;
    borrow_bid_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_borrow_bid_status(::std::string* borrow_bid_status) {
  if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_status_;
  }
  if (borrow_bid_status) {
    set_has_borrow_bid_status();
    borrow_bid_status_ = borrow_bid_status;
  } else {
    clear_has_borrow_bid_status();
    borrow_bid_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.borrow_bid_status)
}

// optional bytes jindiao_nick = 9;
inline bool borrow_bid_detail_info::has_jindiao_nick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void borrow_bid_detail_info::set_has_jindiao_nick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void borrow_bid_detail_info::clear_has_jindiao_nick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void borrow_bid_detail_info::clear_jindiao_nick() {
  if (jindiao_nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jindiao_nick_->clear();
  }
  clear_has_jindiao_nick();
}
inline const ::std::string& borrow_bid_detail_info::jindiao_nick() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.jindiao_nick)
  return *jindiao_nick_;
}
inline void borrow_bid_detail_info::set_jindiao_nick(const ::std::string& value) {
  set_has_jindiao_nick();
  if (jindiao_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jindiao_nick_ = new ::std::string;
  }
  jindiao_nick_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.jindiao_nick)
}
inline void borrow_bid_detail_info::set_jindiao_nick(const char* value) {
  set_has_jindiao_nick();
  if (jindiao_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jindiao_nick_ = new ::std::string;
  }
  jindiao_nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.jindiao_nick)
}
inline void borrow_bid_detail_info::set_jindiao_nick(const void* value, size_t size) {
  set_has_jindiao_nick();
  if (jindiao_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jindiao_nick_ = new ::std::string;
  }
  jindiao_nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.jindiao_nick)
}
inline ::std::string* borrow_bid_detail_info::mutable_jindiao_nick() {
  set_has_jindiao_nick();
  if (jindiao_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jindiao_nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.jindiao_nick)
  return jindiao_nick_;
}
inline ::std::string* borrow_bid_detail_info::release_jindiao_nick() {
  clear_has_jindiao_nick();
  if (jindiao_nick_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jindiao_nick_;
    jindiao_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_jindiao_nick(::std::string* jindiao_nick) {
  if (jindiao_nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jindiao_nick_;
  }
  if (jindiao_nick) {
    set_has_jindiao_nick();
    jindiao_nick_ = jindiao_nick;
  } else {
    clear_has_jindiao_nick();
    jindiao_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.jindiao_nick)
}

// optional float amount_guaranteed = 10;
inline bool borrow_bid_detail_info::has_amount_guaranteed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void borrow_bid_detail_info::set_has_amount_guaranteed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void borrow_bid_detail_info::clear_has_amount_guaranteed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void borrow_bid_detail_info::clear_amount_guaranteed() {
  amount_guaranteed_ = 0;
  clear_has_amount_guaranteed();
}
inline float borrow_bid_detail_info::amount_guaranteed() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.amount_guaranteed)
  return amount_guaranteed_;
}
inline void borrow_bid_detail_info::set_amount_guaranteed(float value) {
  set_has_amount_guaranteed();
  amount_guaranteed_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.amount_guaranteed)
}

// optional bytes LP_time = 11;
inline bool borrow_bid_detail_info::has_lp_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void borrow_bid_detail_info::set_has_lp_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void borrow_bid_detail_info::clear_has_lp_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void borrow_bid_detail_info::clear_lp_time() {
  if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_->clear();
  }
  clear_has_lp_time();
}
inline const ::std::string& borrow_bid_detail_info::lp_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.LP_time)
  return *lp_time_;
}
inline void borrow_bid_detail_info::set_lp_time(const ::std::string& value) {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  lp_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.LP_time)
}
inline void borrow_bid_detail_info::set_lp_time(const char* value) {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  lp_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.LP_time)
}
inline void borrow_bid_detail_info::set_lp_time(const void* value, size_t size) {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  lp_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.LP_time)
}
inline ::std::string* borrow_bid_detail_info::mutable_lp_time() {
  set_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.LP_time)
  return lp_time_;
}
inline ::std::string* borrow_bid_detail_info::release_lp_time() {
  clear_has_lp_time();
  if (lp_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lp_time_;
    lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_lp_time(::std::string* lp_time) {
  if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_time_;
  }
  if (lp_time) {
    set_has_lp_time();
    lp_time_ = lp_time;
  } else {
    clear_has_lp_time();
    lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.LP_time)
}

// optional int32 is_indeed_LP = 12;
inline bool borrow_bid_detail_info::has_is_indeed_lp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void borrow_bid_detail_info::set_has_is_indeed_lp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void borrow_bid_detail_info::clear_has_is_indeed_lp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void borrow_bid_detail_info::clear_is_indeed_lp() {
  is_indeed_lp_ = 0;
  clear_has_is_indeed_lp();
}
inline ::google::protobuf::int32 borrow_bid_detail_info::is_indeed_lp() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.is_indeed_LP)
  return is_indeed_lp_;
}
inline void borrow_bid_detail_info::set_is_indeed_lp(::google::protobuf::int32 value) {
  set_has_is_indeed_lp();
  is_indeed_lp_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.is_indeed_LP)
}

// optional bytes already_reback_amount = 13;
inline bool borrow_bid_detail_info::has_already_reback_amount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void borrow_bid_detail_info::set_has_already_reback_amount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void borrow_bid_detail_info::clear_has_already_reback_amount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void borrow_bid_detail_info::clear_already_reback_amount() {
  if (already_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    already_reback_amount_->clear();
  }
  clear_has_already_reback_amount();
}
inline const ::std::string& borrow_bid_detail_info::already_reback_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.already_reback_amount)
  return *already_reback_amount_;
}
inline void borrow_bid_detail_info::set_already_reback_amount(const ::std::string& value) {
  set_has_already_reback_amount();
  if (already_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    already_reback_amount_ = new ::std::string;
  }
  already_reback_amount_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.already_reback_amount)
}
inline void borrow_bid_detail_info::set_already_reback_amount(const char* value) {
  set_has_already_reback_amount();
  if (already_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    already_reback_amount_ = new ::std::string;
  }
  already_reback_amount_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.already_reback_amount)
}
inline void borrow_bid_detail_info::set_already_reback_amount(const void* value, size_t size) {
  set_has_already_reback_amount();
  if (already_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    already_reback_amount_ = new ::std::string;
  }
  already_reback_amount_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.already_reback_amount)
}
inline ::std::string* borrow_bid_detail_info::mutable_already_reback_amount() {
  set_has_already_reback_amount();
  if (already_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    already_reback_amount_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.already_reback_amount)
  return already_reback_amount_;
}
inline ::std::string* borrow_bid_detail_info::release_already_reback_amount() {
  clear_has_already_reback_amount();
  if (already_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = already_reback_amount_;
    already_reback_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_already_reback_amount(::std::string* already_reback_amount) {
  if (already_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete already_reback_amount_;
  }
  if (already_reback_amount) {
    set_has_already_reback_amount();
    already_reback_amount_ = already_reback_amount;
  } else {
    clear_has_already_reback_amount();
    already_reback_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.already_reback_amount)
}

// optional bytes wait_reback_amount = 14;
inline bool borrow_bid_detail_info::has_wait_reback_amount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void borrow_bid_detail_info::set_has_wait_reback_amount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void borrow_bid_detail_info::clear_has_wait_reback_amount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void borrow_bid_detail_info::clear_wait_reback_amount() {
  if (wait_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wait_reback_amount_->clear();
  }
  clear_has_wait_reback_amount();
}
inline const ::std::string& borrow_bid_detail_info::wait_reback_amount() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.wait_reback_amount)
  return *wait_reback_amount_;
}
inline void borrow_bid_detail_info::set_wait_reback_amount(const ::std::string& value) {
  set_has_wait_reback_amount();
  if (wait_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wait_reback_amount_ = new ::std::string;
  }
  wait_reback_amount_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.wait_reback_amount)
}
inline void borrow_bid_detail_info::set_wait_reback_amount(const char* value) {
  set_has_wait_reback_amount();
  if (wait_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wait_reback_amount_ = new ::std::string;
  }
  wait_reback_amount_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.wait_reback_amount)
}
inline void borrow_bid_detail_info::set_wait_reback_amount(const void* value, size_t size) {
  set_has_wait_reback_amount();
  if (wait_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wait_reback_amount_ = new ::std::string;
  }
  wait_reback_amount_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.wait_reback_amount)
}
inline ::std::string* borrow_bid_detail_info::mutable_wait_reback_amount() {
  set_has_wait_reback_amount();
  if (wait_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wait_reback_amount_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.wait_reback_amount)
  return wait_reback_amount_;
}
inline ::std::string* borrow_bid_detail_info::release_wait_reback_amount() {
  clear_has_wait_reback_amount();
  if (wait_reback_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wait_reback_amount_;
    wait_reback_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_wait_reback_amount(::std::string* wait_reback_amount) {
  if (wait_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wait_reback_amount_;
  }
  if (wait_reback_amount) {
    set_has_wait_reback_amount();
    wait_reback_amount_ = wait_reback_amount;
  } else {
    clear_has_wait_reback_amount();
    wait_reback_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.wait_reback_amount)
}

// optional bytes LP_address = 15;
inline bool borrow_bid_detail_info::has_lp_address() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void borrow_bid_detail_info::set_has_lp_address() {
  _has_bits_[0] |= 0x00004000u;
}
inline void borrow_bid_detail_info::clear_has_lp_address() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void borrow_bid_detail_info::clear_lp_address() {
  if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_->clear();
  }
  clear_has_lp_address();
}
inline const ::std::string& borrow_bid_detail_info::lp_address() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.LP_address)
  return *lp_address_;
}
inline void borrow_bid_detail_info::set_lp_address(const ::std::string& value) {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  lp_address_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.LP_address)
}
inline void borrow_bid_detail_info::set_lp_address(const char* value) {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  lp_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.LP_address)
}
inline void borrow_bid_detail_info::set_lp_address(const void* value, size_t size) {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  lp_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.LP_address)
}
inline ::std::string* borrow_bid_detail_info::mutable_lp_address() {
  set_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lp_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.LP_address)
  return lp_address_;
}
inline ::std::string* borrow_bid_detail_info::release_lp_address() {
  clear_has_lp_address();
  if (lp_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lp_address_;
    lp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_lp_address(::std::string* lp_address) {
  if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_address_;
  }
  if (lp_address) {
    set_has_lp_address();
    lp_address_ = lp_address;
  } else {
    clear_has_lp_address();
    lp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.LP_address)
}

// optional bytes Reasons_for_guarantee = 16;
inline bool borrow_bid_detail_info::has_reasons_for_guarantee() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void borrow_bid_detail_info::set_has_reasons_for_guarantee() {
  _has_bits_[0] |= 0x00008000u;
}
inline void borrow_bid_detail_info::clear_has_reasons_for_guarantee() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void borrow_bid_detail_info::clear_reasons_for_guarantee() {
  if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_->clear();
  }
  clear_has_reasons_for_guarantee();
}
inline const ::std::string& borrow_bid_detail_info::reasons_for_guarantee() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.Reasons_for_guarantee)
  return *reasons_for_guarantee_;
}
inline void borrow_bid_detail_info::set_reasons_for_guarantee(const ::std::string& value) {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  reasons_for_guarantee_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.Reasons_for_guarantee)
}
inline void borrow_bid_detail_info::set_reasons_for_guarantee(const char* value) {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  reasons_for_guarantee_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.Reasons_for_guarantee)
}
inline void borrow_bid_detail_info::set_reasons_for_guarantee(const void* value, size_t size) {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  reasons_for_guarantee_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.Reasons_for_guarantee)
}
inline ::std::string* borrow_bid_detail_info::mutable_reasons_for_guarantee() {
  set_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reasons_for_guarantee_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.Reasons_for_guarantee)
  return reasons_for_guarantee_;
}
inline ::std::string* borrow_bid_detail_info::release_reasons_for_guarantee() {
  clear_has_reasons_for_guarantee();
  if (reasons_for_guarantee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reasons_for_guarantee_;
    reasons_for_guarantee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_bid_detail_info::set_allocated_reasons_for_guarantee(::std::string* reasons_for_guarantee) {
  if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reasons_for_guarantee_;
  }
  if (reasons_for_guarantee) {
    set_has_reasons_for_guarantee();
    reasons_for_guarantee_ = reasons_for_guarantee;
  } else {
    clear_has_reasons_for_guarantee();
    reasons_for_guarantee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_info.Reasons_for_guarantee)
}

// repeated bytes picture_url = 17;
inline int borrow_bid_detail_info::picture_url_size() const {
  return picture_url_.size();
}
inline void borrow_bid_detail_info::clear_picture_url() {
  picture_url_.Clear();
}
inline const ::std::string& borrow_bid_detail_info::picture_url(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_info.picture_url)
  return picture_url_.Get(index);
}
inline ::std::string* borrow_bid_detail_info::mutable_picture_url(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_info.picture_url)
  return picture_url_.Mutable(index);
}
inline void borrow_bid_detail_info::set_picture_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AFP_main_frame.borrow_bid_detail_info.picture_url)
  picture_url_.Mutable(index)->assign(value);
}
inline void borrow_bid_detail_info::set_picture_url(int index, const char* value) {
  picture_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.borrow_bid_detail_info.picture_url)
}
inline void borrow_bid_detail_info::set_picture_url(int index, const void* value, size_t size) {
  picture_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.borrow_bid_detail_info.picture_url)
}
inline ::std::string* borrow_bid_detail_info::add_picture_url() {
  return picture_url_.Add();
}
inline void borrow_bid_detail_info::add_picture_url(const ::std::string& value) {
  picture_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AFP_main_frame.borrow_bid_detail_info.picture_url)
}
inline void borrow_bid_detail_info::add_picture_url(const char* value) {
  picture_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AFP_main_frame.borrow_bid_detail_info.picture_url)
}
inline void borrow_bid_detail_info::add_picture_url(const void* value, size_t size) {
  picture_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AFP_main_frame.borrow_bid_detail_info.picture_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
borrow_bid_detail_info::picture_url() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.borrow_bid_detail_info.picture_url)
  return picture_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
borrow_bid_detail_info::mutable_picture_url() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.borrow_bid_detail_info.picture_url)
  return &picture_url_;
}

// -------------------------------------------------------------------

// qiaoqiao_bid_info

// optional bytes borrow_bid = 1;
inline bool qiaoqiao_bid_info::has_borrow_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qiaoqiao_bid_info::set_has_borrow_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qiaoqiao_bid_info::clear_has_borrow_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qiaoqiao_bid_info::clear_borrow_bid() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_->clear();
  }
  clear_has_borrow_bid();
}
inline const ::std::string& qiaoqiao_bid_info::borrow_bid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.borrow_bid)
  return *borrow_bid_;
}
inline void qiaoqiao_bid_info::set_borrow_bid(const ::std::string& value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.borrow_bid)
}
inline void qiaoqiao_bid_info::set_borrow_bid(const char* value) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiao_bid_info.borrow_bid)
}
inline void qiaoqiao_bid_info::set_borrow_bid(const void* value, size_t size) {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  borrow_bid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiao_bid_info.borrow_bid)
}
inline ::std::string* qiaoqiao_bid_info::mutable_borrow_bid() {
  set_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_info.borrow_bid)
  return borrow_bid_;
}
inline ::std::string* qiaoqiao_bid_info::release_borrow_bid() {
  clear_has_borrow_bid();
  if (borrow_bid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_;
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiao_bid_info::set_allocated_borrow_bid(::std::string* borrow_bid) {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (borrow_bid) {
    set_has_borrow_bid();
    borrow_bid_ = borrow_bid;
  } else {
    clear_has_borrow_bid();
    borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiao_bid_info.borrow_bid)
}

// optional bytes bid_name = 2;
inline bool qiaoqiao_bid_info::has_bid_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qiaoqiao_bid_info::set_has_bid_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qiaoqiao_bid_info::clear_has_bid_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qiaoqiao_bid_info::clear_bid_name() {
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_->clear();
  }
  clear_has_bid_name();
}
inline const ::std::string& qiaoqiao_bid_info::bid_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.bid_name)
  return *bid_name_;
}
inline void qiaoqiao_bid_info::set_bid_name(const ::std::string& value) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.bid_name)
}
inline void qiaoqiao_bid_info::set_bid_name(const char* value) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiao_bid_info.bid_name)
}
inline void qiaoqiao_bid_info::set_bid_name(const void* value, size_t size) {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  bid_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiao_bid_info.bid_name)
}
inline ::std::string* qiaoqiao_bid_info::mutable_bid_name() {
  set_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_info.bid_name)
  return bid_name_;
}
inline ::std::string* qiaoqiao_bid_info::release_bid_name() {
  clear_has_bid_name();
  if (bid_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_name_;
    bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiao_bid_info::set_allocated_bid_name(::std::string* bid_name) {
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_name_;
  }
  if (bid_name) {
    set_has_bid_name();
    bid_name_ = bid_name;
  } else {
    clear_has_bid_name();
    bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiao_bid_info.bid_name)
}

// optional float borrow_money = 3;
inline bool qiaoqiao_bid_info::has_borrow_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qiaoqiao_bid_info::set_has_borrow_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qiaoqiao_bid_info::clear_has_borrow_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qiaoqiao_bid_info::clear_borrow_money() {
  borrow_money_ = 0;
  clear_has_borrow_money();
}
inline float qiaoqiao_bid_info::borrow_money() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.borrow_money)
  return borrow_money_;
}
inline void qiaoqiao_bid_info::set_borrow_money(float value) {
  set_has_borrow_money();
  borrow_money_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.borrow_money)
}

// optional float borrow_rate = 4;
inline bool qiaoqiao_bid_info::has_borrow_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void qiaoqiao_bid_info::set_has_borrow_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void qiaoqiao_bid_info::clear_has_borrow_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void qiaoqiao_bid_info::clear_borrow_rate() {
  borrow_rate_ = 0;
  clear_has_borrow_rate();
}
inline float qiaoqiao_bid_info::borrow_rate() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.borrow_rate)
  return borrow_rate_;
}
inline void qiaoqiao_bid_info::set_borrow_rate(float value) {
  set_has_borrow_rate();
  borrow_rate_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.borrow_rate)
}

// optional bytes repayment_deadtime = 5;
inline bool qiaoqiao_bid_info::has_repayment_deadtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void qiaoqiao_bid_info::set_has_repayment_deadtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void qiaoqiao_bid_info::clear_has_repayment_deadtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void qiaoqiao_bid_info::clear_repayment_deadtime() {
  if (repayment_deadtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_deadtime_->clear();
  }
  clear_has_repayment_deadtime();
}
inline const ::std::string& qiaoqiao_bid_info::repayment_deadtime() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.repayment_deadtime)
  return *repayment_deadtime_;
}
inline void qiaoqiao_bid_info::set_repayment_deadtime(const ::std::string& value) {
  set_has_repayment_deadtime();
  if (repayment_deadtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_deadtime_ = new ::std::string;
  }
  repayment_deadtime_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.repayment_deadtime)
}
inline void qiaoqiao_bid_info::set_repayment_deadtime(const char* value) {
  set_has_repayment_deadtime();
  if (repayment_deadtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_deadtime_ = new ::std::string;
  }
  repayment_deadtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiao_bid_info.repayment_deadtime)
}
inline void qiaoqiao_bid_info::set_repayment_deadtime(const void* value, size_t size) {
  set_has_repayment_deadtime();
  if (repayment_deadtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_deadtime_ = new ::std::string;
  }
  repayment_deadtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiao_bid_info.repayment_deadtime)
}
inline ::std::string* qiaoqiao_bid_info::mutable_repayment_deadtime() {
  set_has_repayment_deadtime();
  if (repayment_deadtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_deadtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_info.repayment_deadtime)
  return repayment_deadtime_;
}
inline ::std::string* qiaoqiao_bid_info::release_repayment_deadtime() {
  clear_has_repayment_deadtime();
  if (repayment_deadtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repayment_deadtime_;
    repayment_deadtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiao_bid_info::set_allocated_repayment_deadtime(::std::string* repayment_deadtime) {
  if (repayment_deadtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_deadtime_;
  }
  if (repayment_deadtime) {
    set_has_repayment_deadtime();
    repayment_deadtime_ = repayment_deadtime;
  } else {
    clear_has_repayment_deadtime();
    repayment_deadtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiao_bid_info.repayment_deadtime)
}

// optional bytes publish_borrow_time = 6;
inline bool qiaoqiao_bid_info::has_publish_borrow_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void qiaoqiao_bid_info::set_has_publish_borrow_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void qiaoqiao_bid_info::clear_has_publish_borrow_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void qiaoqiao_bid_info::clear_publish_borrow_time() {
  if (publish_borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publish_borrow_time_->clear();
  }
  clear_has_publish_borrow_time();
}
inline const ::std::string& qiaoqiao_bid_info::publish_borrow_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.publish_borrow_time)
  return *publish_borrow_time_;
}
inline void qiaoqiao_bid_info::set_publish_borrow_time(const ::std::string& value) {
  set_has_publish_borrow_time();
  if (publish_borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publish_borrow_time_ = new ::std::string;
  }
  publish_borrow_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.publish_borrow_time)
}
inline void qiaoqiao_bid_info::set_publish_borrow_time(const char* value) {
  set_has_publish_borrow_time();
  if (publish_borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publish_borrow_time_ = new ::std::string;
  }
  publish_borrow_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiao_bid_info.publish_borrow_time)
}
inline void qiaoqiao_bid_info::set_publish_borrow_time(const void* value, size_t size) {
  set_has_publish_borrow_time();
  if (publish_borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publish_borrow_time_ = new ::std::string;
  }
  publish_borrow_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiao_bid_info.publish_borrow_time)
}
inline ::std::string* qiaoqiao_bid_info::mutable_publish_borrow_time() {
  set_has_publish_borrow_time();
  if (publish_borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publish_borrow_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_info.publish_borrow_time)
  return publish_borrow_time_;
}
inline ::std::string* qiaoqiao_bid_info::release_publish_borrow_time() {
  clear_has_publish_borrow_time();
  if (publish_borrow_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = publish_borrow_time_;
    publish_borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiao_bid_info::set_allocated_publish_borrow_time(::std::string* publish_borrow_time) {
  if (publish_borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publish_borrow_time_;
  }
  if (publish_borrow_time) {
    set_has_publish_borrow_time();
    publish_borrow_time_ = publish_borrow_time;
  } else {
    clear_has_publish_borrow_time();
    publish_borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiao_bid_info.publish_borrow_time)
}

// optional bytes borrow_bid_status = 7;
inline bool qiaoqiao_bid_info::has_borrow_bid_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void qiaoqiao_bid_info::set_has_borrow_bid_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void qiaoqiao_bid_info::clear_has_borrow_bid_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void qiaoqiao_bid_info::clear_borrow_bid_status() {
  if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_->clear();
  }
  clear_has_borrow_bid_status();
}
inline const ::std::string& qiaoqiao_bid_info::borrow_bid_status() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_info.borrow_bid_status)
  return *borrow_bid_status_;
}
inline void qiaoqiao_bid_info::set_borrow_bid_status(const ::std::string& value) {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  borrow_bid_status_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiao_bid_info.borrow_bid_status)
}
inline void qiaoqiao_bid_info::set_borrow_bid_status(const char* value) {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  borrow_bid_status_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiao_bid_info.borrow_bid_status)
}
inline void qiaoqiao_bid_info::set_borrow_bid_status(const void* value, size_t size) {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  borrow_bid_status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiao_bid_info.borrow_bid_status)
}
inline ::std::string* qiaoqiao_bid_info::mutable_borrow_bid_status() {
  set_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrow_bid_status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_info.borrow_bid_status)
  return borrow_bid_status_;
}
inline ::std::string* qiaoqiao_bid_info::release_borrow_bid_status() {
  clear_has_borrow_bid_status();
  if (borrow_bid_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrow_bid_status_;
    borrow_bid_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiao_bid_info::set_allocated_borrow_bid_status(::std::string* borrow_bid_status) {
  if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_status_;
  }
  if (borrow_bid_status) {
    set_has_borrow_bid_status();
    borrow_bid_status_ = borrow_bid_status;
  } else {
    clear_has_borrow_bid_status();
    borrow_bid_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiao_bid_info.borrow_bid_status)
}

// -------------------------------------------------------------------

// borrow_bid_detail_ans

// optional .common.result_info result = 1;
inline bool borrow_bid_detail_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void borrow_bid_detail_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void borrow_bid_detail_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void borrow_bid_detail_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& borrow_bid_detail_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* borrow_bid_detail_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_ans.result)
  return result_;
}
inline ::common::result_info* borrow_bid_detail_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void borrow_bid_detail_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.borrow_bid_detail_ans.result)
}

// repeated .AFP_main_frame.borrow_bid_detail_info info = 2;
inline int borrow_bid_detail_ans::info_size() const {
  return info_.size();
}
inline void borrow_bid_detail_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_main_frame::borrow_bid_detail_info& borrow_bid_detail_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.borrow_bid_detail_ans.info)
  return info_.Get(index);
}
inline ::AFP_main_frame::borrow_bid_detail_info* borrow_bid_detail_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.borrow_bid_detail_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_main_frame::borrow_bid_detail_info* borrow_bid_detail_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.borrow_bid_detail_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::borrow_bid_detail_info >&
borrow_bid_detail_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.borrow_bid_detail_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::borrow_bid_detail_info >*
borrow_bid_detail_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.borrow_bid_detail_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// qiaoqiao_bid_ans

// optional .common.result_info result = 1;
inline bool qiaoqiao_bid_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qiaoqiao_bid_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qiaoqiao_bid_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qiaoqiao_bid_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& qiaoqiao_bid_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* qiaoqiao_bid_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_ans.result)
  return result_;
}
inline ::common::result_info* qiaoqiao_bid_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void qiaoqiao_bid_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiao_bid_ans.result)
}

// repeated .AFP_main_frame.qiaoqiao_bid_info info = 2;
inline int qiaoqiao_bid_ans::info_size() const {
  return info_.size();
}
inline void qiaoqiao_bid_ans::clear_info() {
  info_.Clear();
}
inline const ::AFP_main_frame::qiaoqiao_bid_info& qiaoqiao_bid_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiao_bid_ans.info)
  return info_.Get(index);
}
inline ::AFP_main_frame::qiaoqiao_bid_info* qiaoqiao_bid_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiao_bid_ans.info)
  return info_.Mutable(index);
}
inline ::AFP_main_frame::qiaoqiao_bid_info* qiaoqiao_bid_ans::add_info() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.qiaoqiao_bid_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiao_bid_info >&
qiaoqiao_bid_ans::info() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.qiaoqiao_bid_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiao_bid_info >*
qiaoqiao_bid_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.qiaoqiao_bid_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// province_city_inquire_ask

// optional int32 id = 1;
inline bool province_city_inquire_ask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void province_city_inquire_ask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void province_city_inquire_ask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void province_city_inquire_ask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 province_city_inquire_ask::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.province_city_inquire_ask.id)
  return id_;
}
inline void province_city_inquire_ask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.province_city_inquire_ask.id)
}

// optional .common.common_ask_header ask_header = 2;
inline bool province_city_inquire_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void province_city_inquire_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void province_city_inquire_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void province_city_inquire_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& province_city_inquire_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.province_city_inquire_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* province_city_inquire_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.province_city_inquire_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* province_city_inquire_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void province_city_inquire_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.province_city_inquire_ask.ask_header)
}

// -------------------------------------------------------------------

// province_city_inquire_ans

// repeated .AFP_main_frame.area_name province_or_city = 1;
inline int province_city_inquire_ans::province_or_city_size() const {
  return province_or_city_.size();
}
inline void province_city_inquire_ans::clear_province_or_city() {
  province_or_city_.Clear();
}
inline const ::AFP_main_frame::area_name& province_city_inquire_ans::province_or_city(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.province_city_inquire_ans.province_or_city)
  return province_or_city_.Get(index);
}
inline ::AFP_main_frame::area_name* province_city_inquire_ans::mutable_province_or_city(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.province_city_inquire_ans.province_or_city)
  return province_or_city_.Mutable(index);
}
inline ::AFP_main_frame::area_name* province_city_inquire_ans::add_province_or_city() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.province_city_inquire_ans.province_or_city)
  return province_or_city_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::area_name >&
province_city_inquire_ans::province_or_city() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.province_city_inquire_ans.province_or_city)
  return province_or_city_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::area_name >*
province_city_inquire_ans::mutable_province_or_city() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.province_city_inquire_ans.province_or_city)
  return &province_or_city_;
}

// optional .common.result_info result = 2;
inline bool province_city_inquire_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void province_city_inquire_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void province_city_inquire_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void province_city_inquire_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& province_city_inquire_ans::result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.province_city_inquire_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* province_city_inquire_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.province_city_inquire_ans.result)
  return result_;
}
inline ::common::result_info* province_city_inquire_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void province_city_inquire_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.province_city_inquire_ans.result)
}

// -------------------------------------------------------------------

// friend_info

// optional bytes friend_id = 1;
inline bool friend_info::has_friend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_info::set_has_friend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_info::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_info::clear_friend_id() {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_->clear();
  }
  clear_has_friend_id();
}
inline const ::std::string& friend_info::friend_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friend_info.friend_id)
  return *friend_id_;
}
inline void friend_info::set_friend_id(const ::std::string& value) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friend_info.friend_id)
}
inline void friend_info::set_friend_id(const char* value) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friend_info.friend_id)
}
inline void friend_info::set_friend_id(const void* value, size_t size) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friend_info.friend_id)
}
inline ::std::string* friend_info::mutable_friend_id() {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friend_info.friend_id)
  return friend_id_;
}
inline ::std::string* friend_info::release_friend_id() {
  clear_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_id_;
    friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_info::set_allocated_friend_id(::std::string* friend_id) {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_id_;
  }
  if (friend_id) {
    set_has_friend_id();
    friend_id_ = friend_id;
  } else {
    clear_has_friend_id();
    friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friend_info.friend_id)
}

// optional bytes friend_uid = 2;
inline bool friend_info::has_friend_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_info::set_has_friend_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_info::clear_has_friend_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_info::clear_friend_uid() {
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_->clear();
  }
  clear_has_friend_uid();
}
inline const ::std::string& friend_info::friend_uid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friend_info.friend_uid)
  return *friend_uid_;
}
inline void friend_info::set_friend_uid(const ::std::string& value) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friend_info.friend_uid)
}
inline void friend_info::set_friend_uid(const char* value) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friend_info.friend_uid)
}
inline void friend_info::set_friend_uid(const void* value, size_t size) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friend_info.friend_uid)
}
inline ::std::string* friend_info::mutable_friend_uid() {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friend_info.friend_uid)
  return friend_uid_;
}
inline ::std::string* friend_info::release_friend_uid() {
  clear_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_uid_;
    friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_info::set_allocated_friend_uid(::std::string* friend_uid) {
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_uid_;
  }
  if (friend_uid) {
    set_has_friend_uid();
    friend_uid_ = friend_uid;
  } else {
    clear_has_friend_uid();
    friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friend_info.friend_uid)
}

// optional bytes nickname = 3;
inline bool friend_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& friend_info::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friend_info.nickname)
  return *nickname_;
}
inline void friend_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friend_info.nickname)
}
inline void friend_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friend_info.nickname)
}
inline void friend_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friend_info.nickname)
}
inline ::std::string* friend_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friend_info.nickname)
  return nickname_;
}
inline ::std::string* friend_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friend_info.nickname)
}

// optional bytes avatar = 4;
inline bool friend_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friend_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friend_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friend_info::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& friend_info::avatar() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friend_info.avatar)
  return *avatar_;
}
inline void friend_info::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friend_info.avatar)
}
inline void friend_info::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friend_info.avatar)
}
inline void friend_info::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friend_info.avatar)
}
inline ::std::string* friend_info::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friend_info.avatar)
  return avatar_;
}
inline ::std::string* friend_info::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_info::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friend_info.avatar)
}

// optional bytes updatetime = 5;
inline bool friend_info::has_updatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void friend_info::set_has_updatetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void friend_info::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void friend_info::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& friend_info::updatetime() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friend_info.updatetime)
  return *updatetime_;
}
inline void friend_info::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friend_info.updatetime)
}
inline void friend_info::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friend_info.updatetime)
}
inline void friend_info::set_updatetime(const void* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friend_info.updatetime)
}
inline ::std::string* friend_info::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friend_info.updatetime)
  return updatetime_;
}
inline ::std::string* friend_info::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_info::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friend_info.updatetime)
}

// -------------------------------------------------------------------

// group_info

// optional bytes gid = 1;
inline bool group_info::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_info::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_info::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_info::clear_gid() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& group_info::gid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_info.gid)
  return *gid_;
}
inline void group_info::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_info.gid)
}
inline void group_info::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_info.gid)
}
inline void group_info::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_info.gid)
}
inline ::std::string* group_info::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_info.gid)
  return gid_;
}
inline ::std::string* group_info::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_info::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_info.gid)
}

// optional bytes qun_nickname = 2;
inline bool group_info::has_qun_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void group_info::set_has_qun_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void group_info::clear_has_qun_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void group_info::clear_qun_nickname() {
  if (qun_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qun_nickname_->clear();
  }
  clear_has_qun_nickname();
}
inline const ::std::string& group_info::qun_nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_info.qun_nickname)
  return *qun_nickname_;
}
inline void group_info::set_qun_nickname(const ::std::string& value) {
  set_has_qun_nickname();
  if (qun_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qun_nickname_ = new ::std::string;
  }
  qun_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_info.qun_nickname)
}
inline void group_info::set_qun_nickname(const char* value) {
  set_has_qun_nickname();
  if (qun_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qun_nickname_ = new ::std::string;
  }
  qun_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_info.qun_nickname)
}
inline void group_info::set_qun_nickname(const void* value, size_t size) {
  set_has_qun_nickname();
  if (qun_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qun_nickname_ = new ::std::string;
  }
  qun_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_info.qun_nickname)
}
inline ::std::string* group_info::mutable_qun_nickname() {
  set_has_qun_nickname();
  if (qun_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qun_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_info.qun_nickname)
  return qun_nickname_;
}
inline ::std::string* group_info::release_qun_nickname() {
  clear_has_qun_nickname();
  if (qun_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qun_nickname_;
    qun_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_info::set_allocated_qun_nickname(::std::string* qun_nickname) {
  if (qun_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qun_nickname_;
  }
  if (qun_nickname) {
    set_has_qun_nickname();
    qun_nickname_ = qun_nickname;
  } else {
    clear_has_qun_nickname();
    qun_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_info.qun_nickname)
}

// optional bytes avatar_url = 3;
inline bool group_info::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void group_info::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void group_info::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void group_info::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& group_info::avatar_url() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_info.avatar_url)
  return *avatar_url_;
}
inline void group_info::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_info.avatar_url)
}
inline void group_info::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_info.avatar_url)
}
inline void group_info::set_avatar_url(const void* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_info.avatar_url)
}
inline ::std::string* group_info::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_info.avatar_url)
  return avatar_url_;
}
inline ::std::string* group_info::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_info::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_info.avatar_url)
}

// optional bytes updatetime = 4;
inline bool group_info::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void group_info::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void group_info::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void group_info::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& group_info::updatetime() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_info.updatetime)
  return *updatetime_;
}
inline void group_info::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_info.updatetime)
}
inline void group_info::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_info.updatetime)
}
inline void group_info::set_updatetime(const void* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_info.updatetime)
}
inline ::std::string* group_info::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_info.updatetime)
  return updatetime_;
}
inline ::std::string* group_info::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_info::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_info.updatetime)
}

// -------------------------------------------------------------------

// friendqunList_ask

// optional bytes mobilePhone = 1;
inline bool friendqunList_ask::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friendqunList_ask::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friendqunList_ask::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friendqunList_ask::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& friendqunList_ask::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ask.mobilePhone)
  return *mobilephone_;
}
inline void friendqunList_ask::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ask.mobilePhone)
}
inline void friendqunList_ask::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ask.mobilePhone)
}
inline void friendqunList_ask::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ask.mobilePhone)
}
inline ::std::string* friendqunList_ask::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ask.mobilePhone)
  return mobilephone_;
}
inline ::std::string* friendqunList_ask::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ask::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ask.mobilePhone)
}

// optional bytes id_card = 2;
inline bool friendqunList_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friendqunList_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friendqunList_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friendqunList_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& friendqunList_ask::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ask.id_card)
  return *id_card_;
}
inline void friendqunList_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ask.id_card)
}
inline void friendqunList_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ask.id_card)
}
inline void friendqunList_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ask.id_card)
}
inline ::std::string* friendqunList_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ask.id_card)
  return id_card_;
}
inline ::std::string* friendqunList_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ask.id_card)
}

// optional .common.common_ask_header ask_header = 3;
inline bool friendqunList_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friendqunList_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friendqunList_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friendqunList_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& friendqunList_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* friendqunList_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* friendqunList_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void friendqunList_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ask.ask_header)
}

// optional bytes is_normal = 4;
inline bool friendqunList_ask::has_is_normal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friendqunList_ask::set_has_is_normal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friendqunList_ask::clear_has_is_normal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friendqunList_ask::clear_is_normal() {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_->clear();
  }
  clear_has_is_normal();
}
inline const ::std::string& friendqunList_ask::is_normal() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ask.is_normal)
  return *is_normal_;
}
inline void friendqunList_ask::set_is_normal(const ::std::string& value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ask.is_normal)
}
inline void friendqunList_ask::set_is_normal(const char* value) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ask.is_normal)
}
inline void friendqunList_ask::set_is_normal(const void* value, size_t size) {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  is_normal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ask.is_normal)
}
inline ::std::string* friendqunList_ask::mutable_is_normal() {
  set_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    is_normal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ask.is_normal)
  return is_normal_;
}
inline ::std::string* friendqunList_ask::release_is_normal() {
  clear_has_is_normal();
  if (is_normal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = is_normal_;
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ask::set_allocated_is_normal(::std::string* is_normal) {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (is_normal) {
    set_has_is_normal();
    is_normal_ = is_normal;
  } else {
    clear_has_is_normal();
    is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ask.is_normal)
}

// -------------------------------------------------------------------

// friendqunList_ans

// optional bytes user_id = 1;
inline bool friendqunList_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friendqunList_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friendqunList_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friendqunList_ans::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& friendqunList_ans::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.user_id)
  return *user_id_;
}
inline void friendqunList_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ans.user_id)
}
inline void friendqunList_ans::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ans.user_id)
}
inline void friendqunList_ans::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ans.user_id)
}
inline ::std::string* friendqunList_ans::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.user_id)
  return user_id_;
}
inline ::std::string* friendqunList_ans::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ans.user_id)
}

// optional bytes uid = 2;
inline bool friendqunList_ans::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friendqunList_ans::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friendqunList_ans::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friendqunList_ans::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& friendqunList_ans::uid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.uid)
  return *uid_;
}
inline void friendqunList_ans::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ans.uid)
}
inline void friendqunList_ans::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ans.uid)
}
inline void friendqunList_ans::set_uid(const void* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ans.uid)
}
inline ::std::string* friendqunList_ans::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.uid)
  return uid_;
}
inline ::std::string* friendqunList_ans::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ans::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ans.uid)
}

// optional bytes nickname = 3;
inline bool friendqunList_ans::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friendqunList_ans::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friendqunList_ans::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friendqunList_ans::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& friendqunList_ans::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.nickname)
  return *nickname_;
}
inline void friendqunList_ans::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ans.nickname)
}
inline void friendqunList_ans::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ans.nickname)
}
inline void friendqunList_ans::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ans.nickname)
}
inline ::std::string* friendqunList_ans::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.nickname)
  return nickname_;
}
inline ::std::string* friendqunList_ans::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ans::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ans.nickname)
}

// optional bytes avatar = 4;
inline bool friendqunList_ans::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friendqunList_ans::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friendqunList_ans::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friendqunList_ans::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& friendqunList_ans::avatar() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.avatar)
  return *avatar_;
}
inline void friendqunList_ans::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.friendqunList_ans.avatar)
}
inline void friendqunList_ans::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.friendqunList_ans.avatar)
}
inline void friendqunList_ans::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.friendqunList_ans.avatar)
}
inline ::std::string* friendqunList_ans::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.avatar)
  return avatar_;
}
inline ::std::string* friendqunList_ans::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friendqunList_ans::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ans.avatar)
}

// repeated .AFP_main_frame.friend_info friend_list = 5;
inline int friendqunList_ans::friend_list_size() const {
  return friend_list_.size();
}
inline void friendqunList_ans::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::AFP_main_frame::friend_info& friendqunList_ans::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.friend_list)
  return friend_list_.Get(index);
}
inline ::AFP_main_frame::friend_info* friendqunList_ans::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.friend_list)
  return friend_list_.Mutable(index);
}
inline ::AFP_main_frame::friend_info* friendqunList_ans::add_friend_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.friendqunList_ans.friend_list)
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::friend_info >&
friendqunList_ans::friend_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.friendqunList_ans.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::friend_info >*
friendqunList_ans::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.friendqunList_ans.friend_list)
  return &friend_list_;
}

// repeated .AFP_main_frame.group_info group_list = 6;
inline int friendqunList_ans::group_list_size() const {
  return group_list_.size();
}
inline void friendqunList_ans::clear_group_list() {
  group_list_.Clear();
}
inline const ::AFP_main_frame::group_info& friendqunList_ans::group_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.group_list)
  return group_list_.Get(index);
}
inline ::AFP_main_frame::group_info* friendqunList_ans::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.group_list)
  return group_list_.Mutable(index);
}
inline ::AFP_main_frame::group_info* friendqunList_ans::add_group_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.friendqunList_ans.group_list)
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::group_info >&
friendqunList_ans::group_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.friendqunList_ans.group_list)
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::group_info >*
friendqunList_ans::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.friendqunList_ans.group_list)
  return &group_list_;
}

// optional .common.errorinfo error = 7;
inline bool friendqunList_ans::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void friendqunList_ans::set_has_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void friendqunList_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void friendqunList_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& friendqunList_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.friendqunList_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* friendqunList_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.friendqunList_ans.error)
  return error_;
}
inline ::common::errorinfo* friendqunList_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void friendqunList_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.friendqunList_ans.error)
}

// -------------------------------------------------------------------

// msg_info

// optional bytes msg_id = 1;
inline bool msg_info::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_info::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_info::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_info::clear_msg_id() {
  if (msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_id_->clear();
  }
  clear_has_msg_id();
}
inline const ::std::string& msg_info::msg_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.msg_id)
  return *msg_id_;
}
inline void msg_info::set_msg_id(const ::std::string& value) {
  set_has_msg_id();
  if (msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_id_ = new ::std::string;
  }
  msg_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.msg_id)
}
inline void msg_info::set_msg_id(const char* value) {
  set_has_msg_id();
  if (msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_id_ = new ::std::string;
  }
  msg_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.msg_id)
}
inline void msg_info::set_msg_id(const void* value, size_t size) {
  set_has_msg_id();
  if (msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_id_ = new ::std::string;
  }
  msg_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.msg_id)
}
inline ::std::string* msg_info::mutable_msg_id() {
  set_has_msg_id();
  if (msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.msg_id)
  return msg_id_;
}
inline ::std::string* msg_info::release_msg_id() {
  clear_has_msg_id();
  if (msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_id_;
    msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_id_;
  }
  if (msg_id) {
    set_has_msg_id();
    msg_id_ = msg_id;
  } else {
    clear_has_msg_id();
    msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.msg_id)
}

// optional bytes nickname = 2;
inline bool msg_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& msg_info::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.nickname)
  return *nickname_;
}
inline void msg_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.nickname)
}
inline void msg_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.nickname)
}
inline void msg_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.nickname)
}
inline ::std::string* msg_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.nickname)
  return nickname_;
}
inline ::std::string* msg_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.nickname)
}

// optional bytes avatar_url = 3;
inline bool msg_info::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_info::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_info::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_info::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& msg_info::avatar_url() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.avatar_url)
  return *avatar_url_;
}
inline void msg_info::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.avatar_url)
}
inline void msg_info::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.avatar_url)
}
inline void msg_info::set_avatar_url(const void* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.avatar_url)
}
inline ::std::string* msg_info::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.avatar_url)
  return avatar_url_;
}
inline ::std::string* msg_info::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.avatar_url)
}

// optional bytes updatetime = 4;
inline bool msg_info::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_info::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_info::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_info::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& msg_info::updatetime() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.updatetime)
  return *updatetime_;
}
inline void msg_info::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.updatetime)
}
inline void msg_info::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.updatetime)
}
inline void msg_info::set_updatetime(const void* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.updatetime)
}
inline ::std::string* msg_info::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.updatetime)
  return updatetime_;
}
inline ::std::string* msg_info::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.updatetime)
}

// optional bytes send_id = 5;
inline bool msg_info::has_send_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_info::set_has_send_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_info::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_info::clear_send_id() {
  if (send_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    send_id_->clear();
  }
  clear_has_send_id();
}
inline const ::std::string& msg_info::send_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.send_id)
  return *send_id_;
}
inline void msg_info::set_send_id(const ::std::string& value) {
  set_has_send_id();
  if (send_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    send_id_ = new ::std::string;
  }
  send_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.send_id)
}
inline void msg_info::set_send_id(const char* value) {
  set_has_send_id();
  if (send_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    send_id_ = new ::std::string;
  }
  send_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.send_id)
}
inline void msg_info::set_send_id(const void* value, size_t size) {
  set_has_send_id();
  if (send_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    send_id_ = new ::std::string;
  }
  send_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.send_id)
}
inline ::std::string* msg_info::mutable_send_id() {
  set_has_send_id();
  if (send_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    send_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.send_id)
  return send_id_;
}
inline ::std::string* msg_info::release_send_id() {
  clear_has_send_id();
  if (send_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = send_id_;
    send_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_send_id(::std::string* send_id) {
  if (send_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete send_id_;
  }
  if (send_id) {
    set_has_send_id();
    send_id_ = send_id;
  } else {
    clear_has_send_id();
    send_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.send_id)
}

// optional bytes recv_id = 6;
inline bool msg_info::has_recv_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_info::set_has_recv_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_info::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_info::clear_recv_id() {
  if (recv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recv_id_->clear();
  }
  clear_has_recv_id();
}
inline const ::std::string& msg_info::recv_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.recv_id)
  return *recv_id_;
}
inline void msg_info::set_recv_id(const ::std::string& value) {
  set_has_recv_id();
  if (recv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recv_id_ = new ::std::string;
  }
  recv_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.recv_id)
}
inline void msg_info::set_recv_id(const char* value) {
  set_has_recv_id();
  if (recv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recv_id_ = new ::std::string;
  }
  recv_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.recv_id)
}
inline void msg_info::set_recv_id(const void* value, size_t size) {
  set_has_recv_id();
  if (recv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recv_id_ = new ::std::string;
  }
  recv_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.recv_id)
}
inline ::std::string* msg_info::mutable_recv_id() {
  set_has_recv_id();
  if (recv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recv_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.recv_id)
  return recv_id_;
}
inline ::std::string* msg_info::release_recv_id() {
  clear_has_recv_id();
  if (recv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recv_id_;
    recv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_recv_id(::std::string* recv_id) {
  if (recv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recv_id_;
  }
  if (recv_id) {
    set_has_recv_id();
    recv_id_ = recv_id;
  } else {
    clear_has_recv_id();
    recv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.recv_id)
}

// optional int32 type = 7;
inline bool msg_info::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_info::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 msg_info::type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.type)
  return type_;
}
inline void msg_info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.type)
}

// optional bytes msg = 8;
inline bool msg_info::has_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_info::set_has_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_info::clear_has_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_info::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& msg_info::msg() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.msg)
  return *msg_;
}
inline void msg_info::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.msg)
}
inline void msg_info::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.msg)
}
inline void msg_info::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.msg)
}
inline ::std::string* msg_info::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.msg)
  return msg_;
}
inline ::std::string* msg_info::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.msg)
}

// optional bytes msg_url = 9;
inline bool msg_info::has_msg_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_info::set_has_msg_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_info::clear_has_msg_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_info::clear_msg_url() {
  if (msg_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_url_->clear();
  }
  clear_has_msg_url();
}
inline const ::std::string& msg_info::msg_url() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.msg_url)
  return *msg_url_;
}
inline void msg_info::set_msg_url(const ::std::string& value) {
  set_has_msg_url();
  if (msg_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_url_ = new ::std::string;
  }
  msg_url_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.msg_url)
}
inline void msg_info::set_msg_url(const char* value) {
  set_has_msg_url();
  if (msg_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_url_ = new ::std::string;
  }
  msg_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.msg_url)
}
inline void msg_info::set_msg_url(const void* value, size_t size) {
  set_has_msg_url();
  if (msg_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_url_ = new ::std::string;
  }
  msg_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.msg_url)
}
inline ::std::string* msg_info::mutable_msg_url() {
  set_has_msg_url();
  if (msg_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.msg_url)
  return msg_url_;
}
inline ::std::string* msg_info::release_msg_url() {
  clear_has_msg_url();
  if (msg_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_url_;
    msg_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_msg_url(::std::string* msg_url) {
  if (msg_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_url_;
  }
  if (msg_url) {
    set_has_msg_url();
    msg_url_ = msg_url;
  } else {
    clear_has_msg_url();
    msg_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.msg_url)
}

// optional int32 voice_len = 10;
inline bool msg_info::has_voice_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_info::set_has_voice_len() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_info::clear_has_voice_len() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_info::clear_voice_len() {
  voice_len_ = 0;
  clear_has_voice_len();
}
inline ::google::protobuf::int32 msg_info::voice_len() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.voice_len)
  return voice_len_;
}
inline void msg_info::set_voice_len(::google::protobuf::int32 value) {
  set_has_voice_len();
  voice_len_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.voice_len)
}

// optional float longitude = 11;
inline bool msg_info::has_longitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_info::set_has_longitude() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_info::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_info::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float msg_info::longitude() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.longitude)
  return longitude_;
}
inline void msg_info::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.longitude)
}

// optional float latitude = 12;
inline bool msg_info::has_latitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_info::set_has_latitude() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_info::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_info::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float msg_info::latitude() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.latitude)
  return latitude_;
}
inline void msg_info::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.latitude)
}

// optional float thumb_width = 13;
inline bool msg_info::has_thumb_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void msg_info::set_has_thumb_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void msg_info::clear_has_thumb_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void msg_info::clear_thumb_width() {
  thumb_width_ = 0;
  clear_has_thumb_width();
}
inline float msg_info::thumb_width() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.thumb_width)
  return thumb_width_;
}
inline void msg_info::set_thumb_width(float value) {
  set_has_thumb_width();
  thumb_width_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.thumb_width)
}

// optional float thumb_hight = 14;
inline bool msg_info::has_thumb_hight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void msg_info::set_has_thumb_hight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void msg_info::clear_has_thumb_hight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void msg_info::clear_thumb_hight() {
  thumb_hight_ = 0;
  clear_has_thumb_hight();
}
inline float msg_info::thumb_hight() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.thumb_hight)
  return thumb_hight_;
}
inline void msg_info::set_thumb_hight(float value) {
  set_has_thumb_hight();
  thumb_hight_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.thumb_hight)
}

// optional bytes uid = 15;
inline bool msg_info::has_uid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void msg_info::set_has_uid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void msg_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void msg_info::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& msg_info::uid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.uid)
  return *uid_;
}
inline void msg_info::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.uid)
}
inline void msg_info::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.uid)
}
inline void msg_info::set_uid(const void* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.uid)
}
inline ::std::string* msg_info::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.uid)
  return uid_;
}
inline ::std::string* msg_info::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.uid)
}

// optional bytes json_body = 16;
inline bool msg_info::has_json_body() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void msg_info::set_has_json_body() {
  _has_bits_[0] |= 0x00008000u;
}
inline void msg_info::clear_has_json_body() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void msg_info::clear_json_body() {
  if (json_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_body_->clear();
  }
  clear_has_json_body();
}
inline const ::std::string& msg_info::json_body() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.msg_info.json_body)
  return *json_body_;
}
inline void msg_info::set_json_body(const ::std::string& value) {
  set_has_json_body();
  if (json_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_body_ = new ::std::string;
  }
  json_body_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.msg_info.json_body)
}
inline void msg_info::set_json_body(const char* value) {
  set_has_json_body();
  if (json_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_body_ = new ::std::string;
  }
  json_body_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.msg_info.json_body)
}
inline void msg_info::set_json_body(const void* value, size_t size) {
  set_has_json_body();
  if (json_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_body_ = new ::std::string;
  }
  json_body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.msg_info.json_body)
}
inline ::std::string* msg_info::mutable_json_body() {
  set_has_json_body();
  if (json_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.msg_info.json_body)
  return json_body_;
}
inline ::std::string* msg_info::release_json_body() {
  clear_has_json_body();
  if (json_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_body_;
    json_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_info::set_allocated_json_body(::std::string* json_body) {
  if (json_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_body_;
  }
  if (json_body) {
    set_has_json_body();
    json_body_ = json_body;
  } else {
    clear_has_json_body();
    json_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.msg_info.json_body)
}

// -------------------------------------------------------------------

// single_msg_ask

// optional bytes user_id = 1;
inline bool single_msg_ask::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void single_msg_ask::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void single_msg_ask::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void single_msg_ask::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& single_msg_ask::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.user_id)
  return *user_id_;
}
inline void single_msg_ask::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ask.user_id)
}
inline void single_msg_ask::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ask.user_id)
}
inline void single_msg_ask::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ask.user_id)
}
inline ::std::string* single_msg_ask::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.user_id)
  return user_id_;
}
inline ::std::string* single_msg_ask::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ask::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.user_id)
}

// optional bytes u_id = 2;
inline bool single_msg_ask::has_u_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void single_msg_ask::set_has_u_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void single_msg_ask::clear_has_u_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void single_msg_ask::clear_u_id() {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_->clear();
  }
  clear_has_u_id();
}
inline const ::std::string& single_msg_ask::u_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.u_id)
  return *u_id_;
}
inline void single_msg_ask::set_u_id(const ::std::string& value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ask.u_id)
}
inline void single_msg_ask::set_u_id(const char* value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ask.u_id)
}
inline void single_msg_ask::set_u_id(const void* value, size_t size) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ask.u_id)
}
inline ::std::string* single_msg_ask::mutable_u_id() {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.u_id)
  return u_id_;
}
inline ::std::string* single_msg_ask::release_u_id() {
  clear_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = u_id_;
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ask::set_allocated_u_id(::std::string* u_id) {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (u_id) {
    set_has_u_id();
    u_id_ = u_id;
  } else {
    clear_has_u_id();
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.u_id)
}

// optional bytes friend_id = 3;
inline bool single_msg_ask::has_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void single_msg_ask::set_has_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void single_msg_ask::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void single_msg_ask::clear_friend_id() {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_->clear();
  }
  clear_has_friend_id();
}
inline const ::std::string& single_msg_ask::friend_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.friend_id)
  return *friend_id_;
}
inline void single_msg_ask::set_friend_id(const ::std::string& value) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ask.friend_id)
}
inline void single_msg_ask::set_friend_id(const char* value) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ask.friend_id)
}
inline void single_msg_ask::set_friend_id(const void* value, size_t size) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ask.friend_id)
}
inline ::std::string* single_msg_ask::mutable_friend_id() {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.friend_id)
  return friend_id_;
}
inline ::std::string* single_msg_ask::release_friend_id() {
  clear_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_id_;
    friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ask::set_allocated_friend_id(::std::string* friend_id) {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_id_;
  }
  if (friend_id) {
    set_has_friend_id();
    friend_id_ = friend_id;
  } else {
    clear_has_friend_id();
    friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.friend_id)
}

// optional bytes friend_uid = 4;
inline bool single_msg_ask::has_friend_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void single_msg_ask::set_has_friend_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void single_msg_ask::clear_has_friend_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void single_msg_ask::clear_friend_uid() {
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_->clear();
  }
  clear_has_friend_uid();
}
inline const ::std::string& single_msg_ask::friend_uid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.friend_uid)
  return *friend_uid_;
}
inline void single_msg_ask::set_friend_uid(const ::std::string& value) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ask.friend_uid)
}
inline void single_msg_ask::set_friend_uid(const char* value) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ask.friend_uid)
}
inline void single_msg_ask::set_friend_uid(const void* value, size_t size) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ask.friend_uid)
}
inline ::std::string* single_msg_ask::mutable_friend_uid() {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.friend_uid)
  return friend_uid_;
}
inline ::std::string* single_msg_ask::release_friend_uid() {
  clear_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_uid_;
    friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ask::set_allocated_friend_uid(::std::string* friend_uid) {
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_uid_;
  }
  if (friend_uid) {
    set_has_friend_uid();
    friend_uid_ = friend_uid;
  } else {
    clear_has_friend_uid();
    friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.friend_uid)
}

// optional bytes start_time = 5;
inline bool single_msg_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void single_msg_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void single_msg_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void single_msg_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& single_msg_ask::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.start_time)
  return *start_time_;
}
inline void single_msg_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ask.start_time)
}
inline void single_msg_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ask.start_time)
}
inline void single_msg_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ask.start_time)
}
inline ::std::string* single_msg_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.start_time)
  return start_time_;
}
inline ::std::string* single_msg_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.start_time)
}

// optional bytes end_time = 6;
inline bool single_msg_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void single_msg_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void single_msg_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void single_msg_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& single_msg_ask::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.end_time)
  return *end_time_;
}
inline void single_msg_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ask.end_time)
}
inline void single_msg_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ask.end_time)
}
inline void single_msg_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ask.end_time)
}
inline ::std::string* single_msg_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.end_time)
  return end_time_;
}
inline ::std::string* single_msg_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.end_time)
}

// optional .common.common_ask_header ask_header = 7;
inline bool single_msg_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void single_msg_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000040u;
}
inline void single_msg_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void single_msg_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& single_msg_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* single_msg_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* single_msg_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void single_msg_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ask.ask_header)
}

// -------------------------------------------------------------------

// single_msg_ans

// optional bytes user_id = 1;
inline bool single_msg_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void single_msg_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void single_msg_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void single_msg_ans::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& single_msg_ans::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.user_id)
  return *user_id_;
}
inline void single_msg_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.user_id)
}
inline void single_msg_ans::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.user_id)
}
inline void single_msg_ans::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.user_id)
}
inline ::std::string* single_msg_ans::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.user_id)
  return user_id_;
}
inline ::std::string* single_msg_ans::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.user_id)
}

// optional bytes u_id = 2;
inline bool single_msg_ans::has_u_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void single_msg_ans::set_has_u_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void single_msg_ans::clear_has_u_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void single_msg_ans::clear_u_id() {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_->clear();
  }
  clear_has_u_id();
}
inline const ::std::string& single_msg_ans::u_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.u_id)
  return *u_id_;
}
inline void single_msg_ans::set_u_id(const ::std::string& value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.u_id)
}
inline void single_msg_ans::set_u_id(const char* value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.u_id)
}
inline void single_msg_ans::set_u_id(const void* value, size_t size) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.u_id)
}
inline ::std::string* single_msg_ans::mutable_u_id() {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.u_id)
  return u_id_;
}
inline ::std::string* single_msg_ans::release_u_id() {
  clear_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = u_id_;
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_u_id(::std::string* u_id) {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (u_id) {
    set_has_u_id();
    u_id_ = u_id;
  } else {
    clear_has_u_id();
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.u_id)
}

// optional bytes nickname = 3;
inline bool single_msg_ans::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void single_msg_ans::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void single_msg_ans::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void single_msg_ans::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& single_msg_ans::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.nickname)
  return *nickname_;
}
inline void single_msg_ans::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.nickname)
}
inline void single_msg_ans::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.nickname)
}
inline void single_msg_ans::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.nickname)
}
inline ::std::string* single_msg_ans::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.nickname)
  return nickname_;
}
inline ::std::string* single_msg_ans::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.nickname)
}

// optional bytes friend_id = 4;
inline bool single_msg_ans::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void single_msg_ans::set_has_friend_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void single_msg_ans::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void single_msg_ans::clear_friend_id() {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_->clear();
  }
  clear_has_friend_id();
}
inline const ::std::string& single_msg_ans::friend_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.friend_id)
  return *friend_id_;
}
inline void single_msg_ans::set_friend_id(const ::std::string& value) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.friend_id)
}
inline void single_msg_ans::set_friend_id(const char* value) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.friend_id)
}
inline void single_msg_ans::set_friend_id(const void* value, size_t size) {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  friend_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.friend_id)
}
inline ::std::string* single_msg_ans::mutable_friend_id() {
  set_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.friend_id)
  return friend_id_;
}
inline ::std::string* single_msg_ans::release_friend_id() {
  clear_has_friend_id();
  if (friend_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_id_;
    friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_friend_id(::std::string* friend_id) {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_id_;
  }
  if (friend_id) {
    set_has_friend_id();
    friend_id_ = friend_id;
  } else {
    clear_has_friend_id();
    friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.friend_id)
}

// optional bytes friend_uid = 5;
inline bool single_msg_ans::has_friend_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void single_msg_ans::set_has_friend_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void single_msg_ans::clear_has_friend_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void single_msg_ans::clear_friend_uid() {
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_->clear();
  }
  clear_has_friend_uid();
}
inline const ::std::string& single_msg_ans::friend_uid() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.friend_uid)
  return *friend_uid_;
}
inline void single_msg_ans::set_friend_uid(const ::std::string& value) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.friend_uid)
}
inline void single_msg_ans::set_friend_uid(const char* value) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.friend_uid)
}
inline void single_msg_ans::set_friend_uid(const void* value, size_t size) {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  friend_uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.friend_uid)
}
inline ::std::string* single_msg_ans::mutable_friend_uid() {
  set_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.friend_uid)
  return friend_uid_;
}
inline ::std::string* single_msg_ans::release_friend_uid() {
  clear_has_friend_uid();
  if (friend_uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_uid_;
    friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_friend_uid(::std::string* friend_uid) {
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_uid_;
  }
  if (friend_uid) {
    set_has_friend_uid();
    friend_uid_ = friend_uid;
  } else {
    clear_has_friend_uid();
    friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.friend_uid)
}

// optional bytes start_time = 6;
inline bool single_msg_ans::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void single_msg_ans::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void single_msg_ans::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void single_msg_ans::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& single_msg_ans::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.start_time)
  return *start_time_;
}
inline void single_msg_ans::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.start_time)
}
inline void single_msg_ans::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.start_time)
}
inline void single_msg_ans::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.start_time)
}
inline ::std::string* single_msg_ans::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.start_time)
  return start_time_;
}
inline ::std::string* single_msg_ans::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.start_time)
}

// optional bytes end_time = 7;
inline bool single_msg_ans::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void single_msg_ans::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void single_msg_ans::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void single_msg_ans::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& single_msg_ans::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.end_time)
  return *end_time_;
}
inline void single_msg_ans::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.single_msg_ans.end_time)
}
inline void single_msg_ans::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.single_msg_ans.end_time)
}
inline void single_msg_ans::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.single_msg_ans.end_time)
}
inline ::std::string* single_msg_ans::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.end_time)
  return end_time_;
}
inline ::std::string* single_msg_ans::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void single_msg_ans::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.end_time)
}

// repeated .AFP_main_frame.msg_info msg_list = 8;
inline int single_msg_ans::msg_list_size() const {
  return msg_list_.size();
}
inline void single_msg_ans::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::AFP_main_frame::msg_info& single_msg_ans::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.msg_list)
  return msg_list_.Get(index);
}
inline ::AFP_main_frame::msg_info* single_msg_ans::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.msg_list)
  return msg_list_.Mutable(index);
}
inline ::AFP_main_frame::msg_info* single_msg_ans::add_msg_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.single_msg_ans.msg_list)
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >&
single_msg_ans::msg_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.single_msg_ans.msg_list)
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >*
single_msg_ans::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.single_msg_ans.msg_list)
  return &msg_list_;
}

// optional .common.errorinfo error = 9;
inline bool single_msg_ans::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void single_msg_ans::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void single_msg_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void single_msg_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& single_msg_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.single_msg_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* single_msg_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.single_msg_ans.error)
  return error_;
}
inline ::common::errorinfo* single_msg_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void single_msg_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.single_msg_ans.error)
}

// -------------------------------------------------------------------

// group_msg_ask

// optional bytes user_id = 1;
inline bool group_msg_ask::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_msg_ask::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_msg_ask::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_msg_ask::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& group_msg_ask::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ask.user_id)
  return *user_id_;
}
inline void group_msg_ask::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ask.user_id)
}
inline void group_msg_ask::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ask.user_id)
}
inline void group_msg_ask::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ask.user_id)
}
inline ::std::string* group_msg_ask::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ask.user_id)
  return user_id_;
}
inline ::std::string* group_msg_ask::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ask::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ask.user_id)
}

// optional bytes u_id = 2;
inline bool group_msg_ask::has_u_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void group_msg_ask::set_has_u_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void group_msg_ask::clear_has_u_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void group_msg_ask::clear_u_id() {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_->clear();
  }
  clear_has_u_id();
}
inline const ::std::string& group_msg_ask::u_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ask.u_id)
  return *u_id_;
}
inline void group_msg_ask::set_u_id(const ::std::string& value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ask.u_id)
}
inline void group_msg_ask::set_u_id(const char* value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ask.u_id)
}
inline void group_msg_ask::set_u_id(const void* value, size_t size) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ask.u_id)
}
inline ::std::string* group_msg_ask::mutable_u_id() {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ask.u_id)
  return u_id_;
}
inline ::std::string* group_msg_ask::release_u_id() {
  clear_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = u_id_;
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ask::set_allocated_u_id(::std::string* u_id) {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (u_id) {
    set_has_u_id();
    u_id_ = u_id;
  } else {
    clear_has_u_id();
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ask.u_id)
}

// optional bytes group_id = 3;
inline bool group_msg_ask::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void group_msg_ask::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void group_msg_ask::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void group_msg_ask::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& group_msg_ask::group_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ask.group_id)
  return *group_id_;
}
inline void group_msg_ask::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ask.group_id)
}
inline void group_msg_ask::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ask.group_id)
}
inline void group_msg_ask::set_group_id(const void* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ask.group_id)
}
inline ::std::string* group_msg_ask::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ask.group_id)
  return group_id_;
}
inline ::std::string* group_msg_ask::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ask::set_allocated_group_id(::std::string* group_id) {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (group_id) {
    set_has_group_id();
    group_id_ = group_id;
  } else {
    clear_has_group_id();
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ask.group_id)
}

// optional bytes start_time = 4;
inline bool group_msg_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void group_msg_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void group_msg_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void group_msg_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& group_msg_ask::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ask.start_time)
  return *start_time_;
}
inline void group_msg_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ask.start_time)
}
inline void group_msg_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ask.start_time)
}
inline void group_msg_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ask.start_time)
}
inline ::std::string* group_msg_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ask.start_time)
  return start_time_;
}
inline ::std::string* group_msg_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ask.start_time)
}

// optional bytes end_time = 5;
inline bool group_msg_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void group_msg_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void group_msg_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void group_msg_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& group_msg_ask::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ask.end_time)
  return *end_time_;
}
inline void group_msg_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ask.end_time)
}
inline void group_msg_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ask.end_time)
}
inline void group_msg_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ask.end_time)
}
inline ::std::string* group_msg_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ask.end_time)
  return end_time_;
}
inline ::std::string* group_msg_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ask.end_time)
}

// optional .common.common_ask_header ask_header = 6;
inline bool group_msg_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void group_msg_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void group_msg_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void group_msg_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& group_msg_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* group_msg_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* group_msg_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void group_msg_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ask.ask_header)
}

// -------------------------------------------------------------------

// group_msg_ans

// optional bytes user_id = 1;
inline bool group_msg_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_msg_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_msg_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_msg_ans::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& group_msg_ans::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ans.user_id)
  return *user_id_;
}
inline void group_msg_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ans.user_id)
}
inline void group_msg_ans::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ans.user_id)
}
inline void group_msg_ans::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ans.user_id)
}
inline ::std::string* group_msg_ans::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ans.user_id)
  return user_id_;
}
inline ::std::string* group_msg_ans::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ans.user_id)
}

// optional bytes u_id = 2;
inline bool group_msg_ans::has_u_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void group_msg_ans::set_has_u_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void group_msg_ans::clear_has_u_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void group_msg_ans::clear_u_id() {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_->clear();
  }
  clear_has_u_id();
}
inline const ::std::string& group_msg_ans::u_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ans.u_id)
  return *u_id_;
}
inline void group_msg_ans::set_u_id(const ::std::string& value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ans.u_id)
}
inline void group_msg_ans::set_u_id(const char* value) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ans.u_id)
}
inline void group_msg_ans::set_u_id(const void* value, size_t size) {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  u_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ans.u_id)
}
inline ::std::string* group_msg_ans::mutable_u_id() {
  set_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ans.u_id)
  return u_id_;
}
inline ::std::string* group_msg_ans::release_u_id() {
  clear_has_u_id();
  if (u_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = u_id_;
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ans::set_allocated_u_id(::std::string* u_id) {
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (u_id) {
    set_has_u_id();
    u_id_ = u_id;
  } else {
    clear_has_u_id();
    u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ans.u_id)
}

// optional bytes group_id = 3;
inline bool group_msg_ans::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void group_msg_ans::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void group_msg_ans::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void group_msg_ans::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& group_msg_ans::group_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ans.group_id)
  return *group_id_;
}
inline void group_msg_ans::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.group_msg_ans.group_id)
}
inline void group_msg_ans::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.group_msg_ans.group_id)
}
inline void group_msg_ans::set_group_id(const void* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.group_msg_ans.group_id)
}
inline ::std::string* group_msg_ans::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ans.group_id)
  return group_id_;
}
inline ::std::string* group_msg_ans::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void group_msg_ans::set_allocated_group_id(::std::string* group_id) {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (group_id) {
    set_has_group_id();
    group_id_ = group_id;
  } else {
    clear_has_group_id();
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ans.group_id)
}

// repeated .AFP_main_frame.msg_info groupmsg_list = 4;
inline int group_msg_ans::groupmsg_list_size() const {
  return groupmsg_list_.size();
}
inline void group_msg_ans::clear_groupmsg_list() {
  groupmsg_list_.Clear();
}
inline const ::AFP_main_frame::msg_info& group_msg_ans::groupmsg_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ans.groupmsg_list)
  return groupmsg_list_.Get(index);
}
inline ::AFP_main_frame::msg_info* group_msg_ans::mutable_groupmsg_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ans.groupmsg_list)
  return groupmsg_list_.Mutable(index);
}
inline ::AFP_main_frame::msg_info* group_msg_ans::add_groupmsg_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.group_msg_ans.groupmsg_list)
  return groupmsg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >&
group_msg_ans::groupmsg_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.group_msg_ans.groupmsg_list)
  return groupmsg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::msg_info >*
group_msg_ans::mutable_groupmsg_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.group_msg_ans.groupmsg_list)
  return &groupmsg_list_;
}

// optional .common.errorinfo error = 5;
inline bool group_msg_ans::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void group_msg_ans::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void group_msg_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void group_msg_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& group_msg_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.group_msg_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* group_msg_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.group_msg_ans.error)
  return error_;
}
inline ::common::errorinfo* group_msg_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void group_msg_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.group_msg_ans.error)
}

// -------------------------------------------------------------------

// usebasicinfo_ask

// optional bytes user_id = 1;
inline bool usebasicinfo_ask::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void usebasicinfo_ask::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void usebasicinfo_ask::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void usebasicinfo_ask::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& usebasicinfo_ask::user_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ask.user_id)
  return *user_id_;
}
inline void usebasicinfo_ask::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ask.user_id)
}
inline void usebasicinfo_ask::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.usebasicinfo_ask.user_id)
}
inline void usebasicinfo_ask::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.usebasicinfo_ask.user_id)
}
inline ::std::string* usebasicinfo_ask::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ask.user_id)
  return user_id_;
}
inline ::std::string* usebasicinfo_ask::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void usebasicinfo_ask::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ask.user_id)
}

// optional .common.common_ask_header ask_header = 2;
inline bool usebasicinfo_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void usebasicinfo_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void usebasicinfo_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void usebasicinfo_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& usebasicinfo_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* usebasicinfo_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* usebasicinfo_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void usebasicinfo_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ask.ask_header)
}

// -------------------------------------------------------------------

// usebasicinfo_ans

// optional bytes nickname = 1;
inline bool usebasicinfo_ans::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void usebasicinfo_ans::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void usebasicinfo_ans::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void usebasicinfo_ans::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& usebasicinfo_ans::nickname() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.nickname)
  return *nickname_;
}
inline void usebasicinfo_ans::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ans.nickname)
}
inline void usebasicinfo_ans::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.usebasicinfo_ans.nickname)
}
inline void usebasicinfo_ans::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.usebasicinfo_ans.nickname)
}
inline ::std::string* usebasicinfo_ans::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ans.nickname)
  return nickname_;
}
inline ::std::string* usebasicinfo_ans::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void usebasicinfo_ans::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ans.nickname)
}

// optional bytes mobilePhone = 2;
inline bool usebasicinfo_ans::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void usebasicinfo_ans::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void usebasicinfo_ans::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void usebasicinfo_ans::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& usebasicinfo_ans::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.mobilePhone)
  return *mobilephone_;
}
inline void usebasicinfo_ans::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ans.mobilePhone)
}
inline void usebasicinfo_ans::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.usebasicinfo_ans.mobilePhone)
}
inline void usebasicinfo_ans::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.usebasicinfo_ans.mobilePhone)
}
inline ::std::string* usebasicinfo_ans::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ans.mobilePhone)
  return mobilephone_;
}
inline ::std::string* usebasicinfo_ans::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void usebasicinfo_ans::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ans.mobilePhone)
}

// optional bytes id_card = 3;
inline bool usebasicinfo_ans::has_id_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void usebasicinfo_ans::set_has_id_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void usebasicinfo_ans::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void usebasicinfo_ans::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& usebasicinfo_ans::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.id_card)
  return *id_card_;
}
inline void usebasicinfo_ans::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ans.id_card)
}
inline void usebasicinfo_ans::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.usebasicinfo_ans.id_card)
}
inline void usebasicinfo_ans::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.usebasicinfo_ans.id_card)
}
inline ::std::string* usebasicinfo_ans::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ans.id_card)
  return id_card_;
}
inline ::std::string* usebasicinfo_ans::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void usebasicinfo_ans::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ans.id_card)
}

// optional bytes avatar_url = 4;
inline bool usebasicinfo_ans::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void usebasicinfo_ans::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void usebasicinfo_ans::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void usebasicinfo_ans::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& usebasicinfo_ans::avatar_url() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.avatar_url)
  return *avatar_url_;
}
inline void usebasicinfo_ans::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ans.avatar_url)
}
inline void usebasicinfo_ans::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.usebasicinfo_ans.avatar_url)
}
inline void usebasicinfo_ans::set_avatar_url(const void* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.usebasicinfo_ans.avatar_url)
}
inline ::std::string* usebasicinfo_ans::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ans.avatar_url)
  return avatar_url_;
}
inline ::std::string* usebasicinfo_ans::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void usebasicinfo_ans::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ans.avatar_url)
}

// optional .common.sex sex = 5;
inline bool usebasicinfo_ans::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void usebasicinfo_ans::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void usebasicinfo_ans::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void usebasicinfo_ans::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::common::sex usebasicinfo_ans::sex() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.sex)
  return static_cast< ::common::sex >(sex_);
}
inline void usebasicinfo_ans::set_sex(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ans.sex)
}

// optional int32 is_overdue = 6;
inline bool usebasicinfo_ans::has_is_overdue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void usebasicinfo_ans::set_has_is_overdue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void usebasicinfo_ans::clear_has_is_overdue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void usebasicinfo_ans::clear_is_overdue() {
  is_overdue_ = 0;
  clear_has_is_overdue();
}
inline ::google::protobuf::int32 usebasicinfo_ans::is_overdue() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.is_overdue)
  return is_overdue_;
}
inline void usebasicinfo_ans::set_is_overdue(::google::protobuf::int32 value) {
  set_has_is_overdue();
  is_overdue_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.usebasicinfo_ans.is_overdue)
}

// optional .common.errorinfo error = 7;
inline bool usebasicinfo_ans::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void usebasicinfo_ans::set_has_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void usebasicinfo_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void usebasicinfo_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& usebasicinfo_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.usebasicinfo_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* usebasicinfo_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.usebasicinfo_ans.error)
  return error_;
}
inline ::common::errorinfo* usebasicinfo_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void usebasicinfo_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.usebasicinfo_ans.error)
}

// -------------------------------------------------------------------

// afp_detail_ask

// optional bytes start_time = 1;
inline bool afp_detail_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void afp_detail_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void afp_detail_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void afp_detail_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& afp_detail_ask::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.start_time)
  return *start_time_;
}
inline void afp_detail_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.start_time)
}
inline void afp_detail_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail_ask.start_time)
}
inline void afp_detail_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail_ask.start_time)
}
inline ::std::string* afp_detail_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ask.start_time)
  return start_time_;
}
inline ::std::string* afp_detail_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail_ask.start_time)
}

// optional bytes end_time = 2;
inline bool afp_detail_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void afp_detail_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void afp_detail_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void afp_detail_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& afp_detail_ask::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.end_time)
  return *end_time_;
}
inline void afp_detail_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.end_time)
}
inline void afp_detail_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail_ask.end_time)
}
inline void afp_detail_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail_ask.end_time)
}
inline ::std::string* afp_detail_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ask.end_time)
  return end_time_;
}
inline ::std::string* afp_detail_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail_ask.end_time)
}

// optional bytes mobilePhone = 3;
inline bool afp_detail_ask::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void afp_detail_ask::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void afp_detail_ask::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void afp_detail_ask::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& afp_detail_ask::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.mobilePhone)
  return *mobilephone_;
}
inline void afp_detail_ask::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.mobilePhone)
}
inline void afp_detail_ask::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail_ask.mobilePhone)
}
inline void afp_detail_ask::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail_ask.mobilePhone)
}
inline ::std::string* afp_detail_ask::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ask.mobilePhone)
  return mobilephone_;
}
inline ::std::string* afp_detail_ask::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail_ask::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail_ask.mobilePhone)
}

// optional bytes id_card = 4;
inline bool afp_detail_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void afp_detail_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void afp_detail_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void afp_detail_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& afp_detail_ask::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.id_card)
  return *id_card_;
}
inline void afp_detail_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.id_card)
}
inline void afp_detail_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail_ask.id_card)
}
inline void afp_detail_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail_ask.id_card)
}
inline ::std::string* afp_detail_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ask.id_card)
  return id_card_;
}
inline ::std::string* afp_detail_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail_ask.id_card)
}

// optional int32 model_result = 5;
inline bool afp_detail_ask::has_model_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void afp_detail_ask::set_has_model_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void afp_detail_ask::clear_has_model_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void afp_detail_ask::clear_model_result() {
  model_result_ = 0;
  clear_has_model_result();
}
inline ::google::protobuf::int32 afp_detail_ask::model_result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.model_result)
  return model_result_;
}
inline void afp_detail_ask::set_model_result(::google::protobuf::int32 value) {
  set_has_model_result();
  model_result_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.model_result)
}

// optional int32 page_num = 6;
inline bool afp_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void afp_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void afp_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void afp_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 afp_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.page_num)
  return page_num_;
}
inline void afp_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.page_num)
}

// optional int32 cur_page = 7;
inline bool afp_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void afp_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void afp_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void afp_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 afp_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.cur_page)
  return cur_page_;
}
inline void afp_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 8;
inline bool afp_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void afp_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000080u;
}
inline void afp_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void afp_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& afp_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* afp_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* afp_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void afp_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail_ask.ask_header)
}

// -------------------------------------------------------------------

// afp_detail

// optional bytes real_name = 1;
inline bool afp_detail::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void afp_detail::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void afp_detail::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void afp_detail::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& afp_detail::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.real_name)
  return *real_name_;
}
inline void afp_detail::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.real_name)
}
inline void afp_detail::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.real_name)
}
inline void afp_detail::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.real_name)
}
inline ::std::string* afp_detail::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.real_name)
  return real_name_;
}
inline ::std::string* afp_detail::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.real_name)
}

// optional bytes mobilePhone = 2;
inline bool afp_detail::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void afp_detail::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void afp_detail::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void afp_detail::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& afp_detail::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.mobilePhone)
  return *mobilephone_;
}
inline void afp_detail::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.mobilePhone)
}
inline void afp_detail::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.mobilePhone)
}
inline void afp_detail::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.mobilePhone)
}
inline ::std::string* afp_detail::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.mobilePhone)
  return mobilephone_;
}
inline ::std::string* afp_detail::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.mobilePhone)
}

// optional bytes id_card = 3;
inline bool afp_detail::has_id_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void afp_detail::set_has_id_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void afp_detail::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void afp_detail::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& afp_detail::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.id_card)
  return *id_card_;
}
inline void afp_detail::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.id_card)
}
inline void afp_detail::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.id_card)
}
inline void afp_detail::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.id_card)
}
inline ::std::string* afp_detail::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.id_card)
  return id_card_;
}
inline ::std::string* afp_detail::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.id_card)
}

// optional bytes result_time = 4;
inline bool afp_detail::has_result_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void afp_detail::set_has_result_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void afp_detail::clear_has_result_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void afp_detail::clear_result_time() {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_->clear();
  }
  clear_has_result_time();
}
inline const ::std::string& afp_detail::result_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.result_time)
  return *result_time_;
}
inline void afp_detail::set_result_time(const ::std::string& value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.result_time)
}
inline void afp_detail::set_result_time(const char* value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.result_time)
}
inline void afp_detail::set_result_time(const void* value, size_t size) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.result_time)
}
inline ::std::string* afp_detail::mutable_result_time() {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.result_time)
  return result_time_;
}
inline ::std::string* afp_detail::release_result_time() {
  clear_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_time_;
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_result_time(::std::string* result_time) {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (result_time) {
    set_has_result_time();
    result_time_ = result_time;
  } else {
    clear_has_result_time();
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.result_time)
}

// optional bytes model_name = 5;
inline bool afp_detail::has_model_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void afp_detail::set_has_model_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void afp_detail::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void afp_detail::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& afp_detail::model_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.model_name)
  return *model_name_;
}
inline void afp_detail::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.model_name)
}
inline void afp_detail::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.model_name)
}
inline void afp_detail::set_model_name(const void* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.model_name)
}
inline ::std::string* afp_detail::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.model_name)
  return model_name_;
}
inline ::std::string* afp_detail::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.model_name)
}

// optional int32 model_result = 6;
inline bool afp_detail::has_model_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void afp_detail::set_has_model_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void afp_detail::clear_has_model_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void afp_detail::clear_model_result() {
  model_result_ = 0;
  clear_has_model_result();
}
inline ::google::protobuf::int32 afp_detail::model_result() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.model_result)
  return model_result_;
}
inline void afp_detail::set_model_result(::google::protobuf::int32 value) {
  set_has_model_result();
  model_result_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.model_result)
}

// optional int32 status = 7;
inline bool afp_detail::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void afp_detail::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void afp_detail::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void afp_detail::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 afp_detail::status() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.status)
  return status_;
}
inline void afp_detail::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.status)
}

// optional bytes error_info = 8;
inline bool afp_detail::has_error_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void afp_detail::set_has_error_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void afp_detail::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void afp_detail::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& afp_detail::error_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.error_info)
  return *error_info_;
}
inline void afp_detail::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.error_info)
}
inline void afp_detail::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.error_info)
}
inline void afp_detail::set_error_info(const void* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.error_info)
}
inline ::std::string* afp_detail::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.error_info)
  return error_info_;
}
inline ::std::string* afp_detail::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.error_info)
}

// optional bytes app_id = 9;
inline bool afp_detail::has_app_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void afp_detail::set_has_app_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void afp_detail::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void afp_detail::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& afp_detail::app_id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.app_id)
  return *app_id_;
}
inline void afp_detail::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.app_id)
}
inline void afp_detail::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.app_id)
}
inline void afp_detail::set_app_id(const void* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.app_id)
}
inline ::std::string* afp_detail::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.app_id)
  return app_id_;
}
inline ::std::string* afp_detail::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.app_id)
}

// optional bytes request_json = 10;
inline bool afp_detail::has_request_json() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void afp_detail::set_has_request_json() {
  _has_bits_[0] |= 0x00000200u;
}
inline void afp_detail::clear_has_request_json() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void afp_detail::clear_request_json() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_->clear();
  }
  clear_has_request_json();
}
inline const ::std::string& afp_detail::request_json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.request_json)
  return *request_json_;
}
inline void afp_detail::set_request_json(const ::std::string& value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.request_json)
}
inline void afp_detail::set_request_json(const char* value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.request_json)
}
inline void afp_detail::set_request_json(const void* value, size_t size) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.request_json)
}
inline ::std::string* afp_detail::mutable_request_json() {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.request_json)
  return request_json_;
}
inline ::std::string* afp_detail::release_request_json() {
  clear_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_json_;
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_request_json(::std::string* request_json) {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (request_json) {
    set_has_request_json();
    request_json_ = request_json;
  } else {
    clear_has_request_json();
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.request_json)
}

// optional bytes result_json = 11;
inline bool afp_detail::has_result_json() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void afp_detail::set_has_result_json() {
  _has_bits_[0] |= 0x00000400u;
}
inline void afp_detail::clear_has_result_json() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void afp_detail::clear_result_json() {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_->clear();
  }
  clear_has_result_json();
}
inline const ::std::string& afp_detail::result_json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.result_json)
  return *result_json_;
}
inline void afp_detail::set_result_json(const ::std::string& value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.result_json)
}
inline void afp_detail::set_result_json(const char* value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.result_json)
}
inline void afp_detail::set_result_json(const void* value, size_t size) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.result_json)
}
inline ::std::string* afp_detail::mutable_result_json() {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.result_json)
  return result_json_;
}
inline ::std::string* afp_detail::release_result_json() {
  clear_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_json_;
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_result_json(::std::string* result_json) {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (result_json) {
    set_has_result_json();
    result_json_ = result_json;
  } else {
    clear_has_result_json();
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.result_json)
}

// optional bytes version = 12;
inline bool afp_detail::has_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void afp_detail::set_has_version() {
  _has_bits_[0] |= 0x00000800u;
}
inline void afp_detail::clear_has_version() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void afp_detail::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& afp_detail::version() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail.version)
  return *version_;
}
inline void afp_detail::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail.version)
}
inline void afp_detail::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.afp_detail.version)
}
inline void afp_detail::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.afp_detail.version)
}
inline ::std::string* afp_detail::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail.version)
  return version_;
}
inline ::std::string* afp_detail::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void afp_detail::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail.version)
}

// -------------------------------------------------------------------

// afp_detail_ans

// repeated .AFP_main_frame.afp_detail afp_detail_list = 1;
inline int afp_detail_ans::afp_detail_list_size() const {
  return afp_detail_list_.size();
}
inline void afp_detail_ans::clear_afp_detail_list() {
  afp_detail_list_.Clear();
}
inline const ::AFP_main_frame::afp_detail& afp_detail_ans::afp_detail_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ans.afp_detail_list)
  return afp_detail_list_.Get(index);
}
inline ::AFP_main_frame::afp_detail* afp_detail_ans::mutable_afp_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ans.afp_detail_list)
  return afp_detail_list_.Mutable(index);
}
inline ::AFP_main_frame::afp_detail* afp_detail_ans::add_afp_detail_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.afp_detail_ans.afp_detail_list)
  return afp_detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_detail >&
afp_detail_ans::afp_detail_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.afp_detail_ans.afp_detail_list)
  return afp_detail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::afp_detail >*
afp_detail_ans::mutable_afp_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.afp_detail_ans.afp_detail_list)
  return &afp_detail_list_;
}

// optional int32 total_number = 2;
inline bool afp_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void afp_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void afp_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void afp_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 afp_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ans.total_number)
  return total_number_;
}
inline void afp_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.afp_detail_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool afp_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void afp_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void afp_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void afp_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& afp_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.afp_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* afp_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.afp_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* afp_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void afp_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.afp_detail_ans.error)
}

// -------------------------------------------------------------------

// ccs_detail_ask

// optional bytes start_time = 1;
inline bool ccs_detail_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ccs_detail_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ccs_detail_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ccs_detail_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& ccs_detail_ask::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.start_time)
  return *start_time_;
}
inline void ccs_detail_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ask.start_time)
}
inline void ccs_detail_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail_ask.start_time)
}
inline void ccs_detail_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail_ask.start_time)
}
inline ::std::string* ccs_detail_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ask.start_time)
  return start_time_;
}
inline ::std::string* ccs_detail_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail_ask.start_time)
}

// optional bytes end_time = 2;
inline bool ccs_detail_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ccs_detail_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ccs_detail_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ccs_detail_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& ccs_detail_ask::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.end_time)
  return *end_time_;
}
inline void ccs_detail_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ask.end_time)
}
inline void ccs_detail_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail_ask.end_time)
}
inline void ccs_detail_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail_ask.end_time)
}
inline ::std::string* ccs_detail_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ask.end_time)
  return end_time_;
}
inline ::std::string* ccs_detail_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail_ask.end_time)
}

// optional bytes mobilePhone = 3;
inline bool ccs_detail_ask::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ccs_detail_ask::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ccs_detail_ask::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ccs_detail_ask::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& ccs_detail_ask::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.mobilePhone)
  return *mobilephone_;
}
inline void ccs_detail_ask::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ask.mobilePhone)
}
inline void ccs_detail_ask::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail_ask.mobilePhone)
}
inline void ccs_detail_ask::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail_ask.mobilePhone)
}
inline ::std::string* ccs_detail_ask::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ask.mobilePhone)
  return mobilephone_;
}
inline ::std::string* ccs_detail_ask::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail_ask::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail_ask.mobilePhone)
}

// optional bytes id_card = 4;
inline bool ccs_detail_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ccs_detail_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ccs_detail_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ccs_detail_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& ccs_detail_ask::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.id_card)
  return *id_card_;
}
inline void ccs_detail_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ask.id_card)
}
inline void ccs_detail_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail_ask.id_card)
}
inline void ccs_detail_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail_ask.id_card)
}
inline ::std::string* ccs_detail_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ask.id_card)
  return id_card_;
}
inline ::std::string* ccs_detail_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail_ask.id_card)
}

// optional .common.common_ask_header ask_header = 5;
inline bool ccs_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ccs_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ccs_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ccs_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& ccs_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* ccs_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* ccs_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void ccs_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail_ask.ask_header)
}

// optional int32 page_num = 6;
inline bool ccs_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ccs_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ccs_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ccs_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 ccs_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.page_num)
  return page_num_;
}
inline void ccs_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ask.page_num)
}

// optional int32 cur_page = 7;
inline bool ccs_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ccs_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ccs_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ccs_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 ccs_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ask.cur_page)
  return cur_page_;
}
inline void ccs_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ask.cur_page)
}

// -------------------------------------------------------------------

// ccs_detail

// optional bytes real_name = 1;
inline bool ccs_detail::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ccs_detail::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ccs_detail::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ccs_detail::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& ccs_detail::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.real_name)
  return *real_name_;
}
inline void ccs_detail::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.real_name)
}
inline void ccs_detail::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.real_name)
}
inline void ccs_detail::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.real_name)
}
inline ::std::string* ccs_detail::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.real_name)
  return real_name_;
}
inline ::std::string* ccs_detail::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.real_name)
}

// optional bytes mobilePhone = 2;
inline bool ccs_detail::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ccs_detail::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ccs_detail::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ccs_detail::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& ccs_detail::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.mobilePhone)
  return *mobilephone_;
}
inline void ccs_detail::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.mobilePhone)
}
inline void ccs_detail::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.mobilePhone)
}
inline void ccs_detail::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.mobilePhone)
}
inline ::std::string* ccs_detail::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.mobilePhone)
  return mobilephone_;
}
inline ::std::string* ccs_detail::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.mobilePhone)
}

// optional bytes id_card = 3;
inline bool ccs_detail::has_id_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ccs_detail::set_has_id_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ccs_detail::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ccs_detail::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& ccs_detail::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.id_card)
  return *id_card_;
}
inline void ccs_detail::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.id_card)
}
inline void ccs_detail::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.id_card)
}
inline void ccs_detail::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.id_card)
}
inline ::std::string* ccs_detail::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.id_card)
  return id_card_;
}
inline ::std::string* ccs_detail::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.id_card)
}

// optional bytes result_time = 4;
inline bool ccs_detail::has_result_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ccs_detail::set_has_result_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ccs_detail::clear_has_result_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ccs_detail::clear_result_time() {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_->clear();
  }
  clear_has_result_time();
}
inline const ::std::string& ccs_detail::result_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.result_time)
  return *result_time_;
}
inline void ccs_detail::set_result_time(const ::std::string& value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.result_time)
}
inline void ccs_detail::set_result_time(const char* value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.result_time)
}
inline void ccs_detail::set_result_time(const void* value, size_t size) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.result_time)
}
inline ::std::string* ccs_detail::mutable_result_time() {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.result_time)
  return result_time_;
}
inline ::std::string* ccs_detail::release_result_time() {
  clear_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_time_;
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_result_time(::std::string* result_time) {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (result_time) {
    set_has_result_time();
    result_time_ = result_time;
  } else {
    clear_has_result_time();
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.result_time)
}

// optional int32 user_type = 5;
inline bool ccs_detail::has_user_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ccs_detail::set_has_user_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ccs_detail::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ccs_detail::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::google::protobuf::int32 ccs_detail::user_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.user_type)
  return user_type_;
}
inline void ccs_detail::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.user_type)
}

// optional int32 is_success = 6;
inline bool ccs_detail::has_is_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ccs_detail::set_has_is_success() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ccs_detail::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ccs_detail::clear_is_success() {
  is_success_ = 0;
  clear_has_is_success();
}
inline ::google::protobuf::int32 ccs_detail::is_success() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.is_success)
  return is_success_;
}
inline void ccs_detail::set_is_success(::google::protobuf::int32 value) {
  set_has_is_success();
  is_success_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.is_success)
}

// optional int32 cur_credit = 7;
inline bool ccs_detail::has_cur_credit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ccs_detail::set_has_cur_credit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ccs_detail::clear_has_cur_credit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ccs_detail::clear_cur_credit() {
  cur_credit_ = 0;
  clear_has_cur_credit();
}
inline ::google::protobuf::int32 ccs_detail::cur_credit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.cur_credit)
  return cur_credit_;
}
inline void ccs_detail::set_cur_credit(::google::protobuf::int32 value) {
  set_has_cur_credit();
  cur_credit_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.cur_credit)
}

// optional bytes sum_info = 8;
inline bool ccs_detail::has_sum_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ccs_detail::set_has_sum_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ccs_detail::clear_has_sum_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ccs_detail::clear_sum_info() {
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_->clear();
  }
  clear_has_sum_info();
}
inline const ::std::string& ccs_detail::sum_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.sum_info)
  return *sum_info_;
}
inline void ccs_detail::set_sum_info(const ::std::string& value) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.sum_info)
}
inline void ccs_detail::set_sum_info(const char* value) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.sum_info)
}
inline void ccs_detail::set_sum_info(const void* value, size_t size) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.sum_info)
}
inline ::std::string* ccs_detail::mutable_sum_info() {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.sum_info)
  return sum_info_;
}
inline ::std::string* ccs_detail::release_sum_info() {
  clear_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sum_info_;
    sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_sum_info(::std::string* sum_info) {
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_info_;
  }
  if (sum_info) {
    set_has_sum_info();
    sum_info_ = sum_info;
  } else {
    clear_has_sum_info();
    sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.sum_info)
}

// optional bytes request_json = 9;
inline bool ccs_detail::has_request_json() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ccs_detail::set_has_request_json() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ccs_detail::clear_has_request_json() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ccs_detail::clear_request_json() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_->clear();
  }
  clear_has_request_json();
}
inline const ::std::string& ccs_detail::request_json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.request_json)
  return *request_json_;
}
inline void ccs_detail::set_request_json(const ::std::string& value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.request_json)
}
inline void ccs_detail::set_request_json(const char* value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.request_json)
}
inline void ccs_detail::set_request_json(const void* value, size_t size) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.request_json)
}
inline ::std::string* ccs_detail::mutable_request_json() {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.request_json)
  return request_json_;
}
inline ::std::string* ccs_detail::release_request_json() {
  clear_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_json_;
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_request_json(::std::string* request_json) {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (request_json) {
    set_has_request_json();
    request_json_ = request_json;
  } else {
    clear_has_request_json();
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.request_json)
}

// optional bytes result_json = 10;
inline bool ccs_detail::has_result_json() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ccs_detail::set_has_result_json() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ccs_detail::clear_has_result_json() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ccs_detail::clear_result_json() {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_->clear();
  }
  clear_has_result_json();
}
inline const ::std::string& ccs_detail::result_json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.result_json)
  return *result_json_;
}
inline void ccs_detail::set_result_json(const ::std::string& value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.result_json)
}
inline void ccs_detail::set_result_json(const char* value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.result_json)
}
inline void ccs_detail::set_result_json(const void* value, size_t size) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.result_json)
}
inline ::std::string* ccs_detail::mutable_result_json() {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.result_json)
  return result_json_;
}
inline ::std::string* ccs_detail::release_result_json() {
  clear_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_json_;
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_result_json(::std::string* result_json) {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (result_json) {
    set_has_result_json();
    result_json_ = result_json;
  } else {
    clear_has_result_json();
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.result_json)
}

// optional bytes version = 11;
inline bool ccs_detail::has_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ccs_detail::set_has_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ccs_detail::clear_has_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ccs_detail::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ccs_detail::version() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail.version)
  return *version_;
}
inline void ccs_detail::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail.version)
}
inline void ccs_detail::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.ccs_detail.version)
}
inline void ccs_detail::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.ccs_detail.version)
}
inline ::std::string* ccs_detail::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail.version)
  return version_;
}
inline ::std::string* ccs_detail::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ccs_detail::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail.version)
}

// -------------------------------------------------------------------

// ccs_detail_ans

// repeated .AFP_main_frame.ccs_detail ccs_detail_list = 1;
inline int ccs_detail_ans::ccs_detail_list_size() const {
  return ccs_detail_list_.size();
}
inline void ccs_detail_ans::clear_ccs_detail_list() {
  ccs_detail_list_.Clear();
}
inline const ::AFP_main_frame::ccs_detail& ccs_detail_ans::ccs_detail_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ans.ccs_detail_list)
  return ccs_detail_list_.Get(index);
}
inline ::AFP_main_frame::ccs_detail* ccs_detail_ans::mutable_ccs_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ans.ccs_detail_list)
  return ccs_detail_list_.Mutable(index);
}
inline ::AFP_main_frame::ccs_detail* ccs_detail_ans::add_ccs_detail_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.ccs_detail_ans.ccs_detail_list)
  return ccs_detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::ccs_detail >&
ccs_detail_ans::ccs_detail_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.ccs_detail_ans.ccs_detail_list)
  return ccs_detail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::ccs_detail >*
ccs_detail_ans::mutable_ccs_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.ccs_detail_ans.ccs_detail_list)
  return &ccs_detail_list_;
}

// optional .common.errorinfo error = 2;
inline bool ccs_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ccs_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ccs_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ccs_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& ccs_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* ccs_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.ccs_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* ccs_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ccs_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.ccs_detail_ans.error)
}

// optional int32 total_number = 3;
inline bool ccs_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ccs_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ccs_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ccs_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 ccs_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.ccs_detail_ans.total_number)
  return total_number_;
}
inline void ccs_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.ccs_detail_ans.total_number)
}

// -------------------------------------------------------------------

// weidanbao_detail_ask

// optional bytes start_time = 1;
inline bool weidanbao_detail_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void weidanbao_detail_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void weidanbao_detail_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void weidanbao_detail_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& weidanbao_detail_ask::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.start_time)
  return *start_time_;
}
inline void weidanbao_detail_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ask.start_time)
}
inline void weidanbao_detail_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail_ask.start_time)
}
inline void weidanbao_detail_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail_ask.start_time)
}
inline ::std::string* weidanbao_detail_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ask.start_time)
  return start_time_;
}
inline ::std::string* weidanbao_detail_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail_ask.start_time)
}

// optional bytes end_time = 2;
inline bool weidanbao_detail_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void weidanbao_detail_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void weidanbao_detail_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void weidanbao_detail_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& weidanbao_detail_ask::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.end_time)
  return *end_time_;
}
inline void weidanbao_detail_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ask.end_time)
}
inline void weidanbao_detail_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail_ask.end_time)
}
inline void weidanbao_detail_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail_ask.end_time)
}
inline ::std::string* weidanbao_detail_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ask.end_time)
  return end_time_;
}
inline ::std::string* weidanbao_detail_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail_ask.end_time)
}

// optional bytes mobilePhone = 3;
inline bool weidanbao_detail_ask::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void weidanbao_detail_ask::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void weidanbao_detail_ask::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void weidanbao_detail_ask::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& weidanbao_detail_ask::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.mobilePhone)
  return *mobilephone_;
}
inline void weidanbao_detail_ask::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ask.mobilePhone)
}
inline void weidanbao_detail_ask::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail_ask.mobilePhone)
}
inline void weidanbao_detail_ask::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail_ask.mobilePhone)
}
inline ::std::string* weidanbao_detail_ask::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ask.mobilePhone)
  return mobilephone_;
}
inline ::std::string* weidanbao_detail_ask::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail_ask::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail_ask.mobilePhone)
}

// optional bytes id_card = 4;
inline bool weidanbao_detail_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void weidanbao_detail_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void weidanbao_detail_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void weidanbao_detail_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& weidanbao_detail_ask::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.id_card)
  return *id_card_;
}
inline void weidanbao_detail_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ask.id_card)
}
inline void weidanbao_detail_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail_ask.id_card)
}
inline void weidanbao_detail_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail_ask.id_card)
}
inline ::std::string* weidanbao_detail_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ask.id_card)
  return id_card_;
}
inline ::std::string* weidanbao_detail_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail_ask.id_card)
}

// optional .common.common_ask_header ask_header = 5;
inline bool weidanbao_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void weidanbao_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void weidanbao_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void weidanbao_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& weidanbao_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* weidanbao_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* weidanbao_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void weidanbao_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail_ask.ask_header)
}

// optional int32 page_num = 6;
inline bool weidanbao_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void weidanbao_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void weidanbao_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void weidanbao_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 weidanbao_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.page_num)
  return page_num_;
}
inline void weidanbao_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ask.page_num)
}

// optional int32 cur_page = 7;
inline bool weidanbao_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void weidanbao_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void weidanbao_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void weidanbao_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 weidanbao_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ask.cur_page)
  return cur_page_;
}
inline void weidanbao_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ask.cur_page)
}

// -------------------------------------------------------------------

// weidanbao_detail

// optional bytes real_name = 1;
inline bool weidanbao_detail::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void weidanbao_detail::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void weidanbao_detail::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void weidanbao_detail::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& weidanbao_detail::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.real_name)
  return *real_name_;
}
inline void weidanbao_detail::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.real_name)
}
inline void weidanbao_detail::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.real_name)
}
inline void weidanbao_detail::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.real_name)
}
inline ::std::string* weidanbao_detail::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.real_name)
  return real_name_;
}
inline ::std::string* weidanbao_detail::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.real_name)
}

// optional bytes mobilePhone = 2;
inline bool weidanbao_detail::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void weidanbao_detail::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void weidanbao_detail::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void weidanbao_detail::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& weidanbao_detail::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.mobilePhone)
  return *mobilephone_;
}
inline void weidanbao_detail::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.mobilePhone)
}
inline void weidanbao_detail::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.mobilePhone)
}
inline void weidanbao_detail::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.mobilePhone)
}
inline ::std::string* weidanbao_detail::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.mobilePhone)
  return mobilephone_;
}
inline ::std::string* weidanbao_detail::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.mobilePhone)
}

// optional bytes id_card = 3;
inline bool weidanbao_detail::has_id_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void weidanbao_detail::set_has_id_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void weidanbao_detail::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void weidanbao_detail::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& weidanbao_detail::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.id_card)
  return *id_card_;
}
inline void weidanbao_detail::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.id_card)
}
inline void weidanbao_detail::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.id_card)
}
inline void weidanbao_detail::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.id_card)
}
inline ::std::string* weidanbao_detail::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.id_card)
  return id_card_;
}
inline ::std::string* weidanbao_detail::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.id_card)
}

// optional bytes update_time = 4;
inline bool weidanbao_detail::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void weidanbao_detail::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void weidanbao_detail::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void weidanbao_detail::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& weidanbao_detail::update_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.update_time)
  return *update_time_;
}
inline void weidanbao_detail::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.update_time)
}
inline void weidanbao_detail::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.update_time)
}
inline void weidanbao_detail::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.update_time)
}
inline ::std::string* weidanbao_detail::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.update_time)
  return update_time_;
}
inline ::std::string* weidanbao_detail::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.update_time)
}

// optional int32 is_success = 5;
inline bool weidanbao_detail::has_is_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void weidanbao_detail::set_has_is_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void weidanbao_detail::clear_has_is_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void weidanbao_detail::clear_is_success() {
  is_success_ = 0;
  clear_has_is_success();
}
inline ::google::protobuf::int32 weidanbao_detail::is_success() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.is_success)
  return is_success_;
}
inline void weidanbao_detail::set_is_success(::google::protobuf::int32 value) {
  set_has_is_success();
  is_success_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.is_success)
}

// optional int32 cur_credit = 6;
inline bool weidanbao_detail::has_cur_credit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void weidanbao_detail::set_has_cur_credit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void weidanbao_detail::clear_has_cur_credit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void weidanbao_detail::clear_cur_credit() {
  cur_credit_ = 0;
  clear_has_cur_credit();
}
inline ::google::protobuf::int32 weidanbao_detail::cur_credit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.cur_credit)
  return cur_credit_;
}
inline void weidanbao_detail::set_cur_credit(::google::protobuf::int32 value) {
  set_has_cur_credit();
  cur_credit_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.cur_credit)
}

// optional bytes sum_info = 7;
inline bool weidanbao_detail::has_sum_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void weidanbao_detail::set_has_sum_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void weidanbao_detail::clear_has_sum_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void weidanbao_detail::clear_sum_info() {
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_->clear();
  }
  clear_has_sum_info();
}
inline const ::std::string& weidanbao_detail::sum_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.sum_info)
  return *sum_info_;
}
inline void weidanbao_detail::set_sum_info(const ::std::string& value) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.sum_info)
}
inline void weidanbao_detail::set_sum_info(const char* value) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.sum_info)
}
inline void weidanbao_detail::set_sum_info(const void* value, size_t size) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.sum_info)
}
inline ::std::string* weidanbao_detail::mutable_sum_info() {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.sum_info)
  return sum_info_;
}
inline ::std::string* weidanbao_detail::release_sum_info() {
  clear_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sum_info_;
    sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_sum_info(::std::string* sum_info) {
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_info_;
  }
  if (sum_info) {
    set_has_sum_info();
    sum_info_ = sum_info;
  } else {
    clear_has_sum_info();
    sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.sum_info)
}

// optional bytes request_json = 8;
inline bool weidanbao_detail::has_request_json() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void weidanbao_detail::set_has_request_json() {
  _has_bits_[0] |= 0x00000080u;
}
inline void weidanbao_detail::clear_has_request_json() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void weidanbao_detail::clear_request_json() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_->clear();
  }
  clear_has_request_json();
}
inline const ::std::string& weidanbao_detail::request_json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.request_json)
  return *request_json_;
}
inline void weidanbao_detail::set_request_json(const ::std::string& value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.request_json)
}
inline void weidanbao_detail::set_request_json(const char* value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.request_json)
}
inline void weidanbao_detail::set_request_json(const void* value, size_t size) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.request_json)
}
inline ::std::string* weidanbao_detail::mutable_request_json() {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.request_json)
  return request_json_;
}
inline ::std::string* weidanbao_detail::release_request_json() {
  clear_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_json_;
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_request_json(::std::string* request_json) {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (request_json) {
    set_has_request_json();
    request_json_ = request_json;
  } else {
    clear_has_request_json();
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.request_json)
}

// optional bytes result_json = 9;
inline bool weidanbao_detail::has_result_json() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void weidanbao_detail::set_has_result_json() {
  _has_bits_[0] |= 0x00000100u;
}
inline void weidanbao_detail::clear_has_result_json() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void weidanbao_detail::clear_result_json() {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_->clear();
  }
  clear_has_result_json();
}
inline const ::std::string& weidanbao_detail::result_json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.result_json)
  return *result_json_;
}
inline void weidanbao_detail::set_result_json(const ::std::string& value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.result_json)
}
inline void weidanbao_detail::set_result_json(const char* value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.result_json)
}
inline void weidanbao_detail::set_result_json(const void* value, size_t size) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.result_json)
}
inline ::std::string* weidanbao_detail::mutable_result_json() {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.result_json)
  return result_json_;
}
inline ::std::string* weidanbao_detail::release_result_json() {
  clear_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_json_;
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_result_json(::std::string* result_json) {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (result_json) {
    set_has_result_json();
    result_json_ = result_json;
  } else {
    clear_has_result_json();
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.result_json)
}

// optional bytes version = 10;
inline bool weidanbao_detail::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void weidanbao_detail::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void weidanbao_detail::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void weidanbao_detail::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& weidanbao_detail::version() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail.version)
  return *version_;
}
inline void weidanbao_detail::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail.version)
}
inline void weidanbao_detail::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.weidanbao_detail.version)
}
inline void weidanbao_detail::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.weidanbao_detail.version)
}
inline ::std::string* weidanbao_detail::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail.version)
  return version_;
}
inline ::std::string* weidanbao_detail::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void weidanbao_detail::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail.version)
}

// -------------------------------------------------------------------

// weidanbao_detail_ans

// repeated .AFP_main_frame.weidanbao_detail weidanbao_detail_list = 1;
inline int weidanbao_detail_ans::weidanbao_detail_list_size() const {
  return weidanbao_detail_list_.size();
}
inline void weidanbao_detail_ans::clear_weidanbao_detail_list() {
  weidanbao_detail_list_.Clear();
}
inline const ::AFP_main_frame::weidanbao_detail& weidanbao_detail_ans::weidanbao_detail_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ans.weidanbao_detail_list)
  return weidanbao_detail_list_.Get(index);
}
inline ::AFP_main_frame::weidanbao_detail* weidanbao_detail_ans::mutable_weidanbao_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ans.weidanbao_detail_list)
  return weidanbao_detail_list_.Mutable(index);
}
inline ::AFP_main_frame::weidanbao_detail* weidanbao_detail_ans::add_weidanbao_detail_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.weidanbao_detail_ans.weidanbao_detail_list)
  return weidanbao_detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::weidanbao_detail >&
weidanbao_detail_ans::weidanbao_detail_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.weidanbao_detail_ans.weidanbao_detail_list)
  return weidanbao_detail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::weidanbao_detail >*
weidanbao_detail_ans::mutable_weidanbao_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.weidanbao_detail_ans.weidanbao_detail_list)
  return &weidanbao_detail_list_;
}

// optional .common.errorinfo error = 2;
inline bool weidanbao_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void weidanbao_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void weidanbao_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void weidanbao_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& weidanbao_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* weidanbao_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.weidanbao_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* weidanbao_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void weidanbao_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.weidanbao_detail_ans.error)
}

// optional int32 total_number = 3;
inline bool weidanbao_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void weidanbao_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void weidanbao_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void weidanbao_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 weidanbao_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.weidanbao_detail_ans.total_number)
  return total_number_;
}
inline void weidanbao_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.weidanbao_detail_ans.total_number)
}

// -------------------------------------------------------------------

// qiaoqiaoccs_detail_ask

// optional bytes start_time = 1;
inline bool qiaoqiaoccs_detail_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qiaoqiaoccs_detail_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& qiaoqiaoccs_detail_ask::start_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.start_time)
  return *start_time_;
}
inline void qiaoqiaoccs_detail_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ask.start_time)
}
inline void qiaoqiaoccs_detail_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail_ask.start_time)
}
inline void qiaoqiaoccs_detail_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail_ask.start_time)
}
inline ::std::string* qiaoqiaoccs_detail_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ask.start_time)
  return start_time_;
}
inline ::std::string* qiaoqiaoccs_detail_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail_ask.start_time)
}

// optional bytes end_time = 2;
inline bool qiaoqiaoccs_detail_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qiaoqiaoccs_detail_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& qiaoqiaoccs_detail_ask::end_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.end_time)
  return *end_time_;
}
inline void qiaoqiaoccs_detail_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ask.end_time)
}
inline void qiaoqiaoccs_detail_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail_ask.end_time)
}
inline void qiaoqiaoccs_detail_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail_ask.end_time)
}
inline ::std::string* qiaoqiaoccs_detail_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ask.end_time)
  return end_time_;
}
inline ::std::string* qiaoqiaoccs_detail_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail_ask.end_time)
}

// optional bytes mobilePhone = 3;
inline bool qiaoqiaoccs_detail_ask::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qiaoqiaoccs_detail_ask::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& qiaoqiaoccs_detail_ask::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.mobilePhone)
  return *mobilephone_;
}
inline void qiaoqiaoccs_detail_ask::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ask.mobilePhone)
}
inline void qiaoqiaoccs_detail_ask::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail_ask.mobilePhone)
}
inline void qiaoqiaoccs_detail_ask::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail_ask.mobilePhone)
}
inline ::std::string* qiaoqiaoccs_detail_ask::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ask.mobilePhone)
  return mobilephone_;
}
inline ::std::string* qiaoqiaoccs_detail_ask::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail_ask::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail_ask.mobilePhone)
}

// optional bytes id_card = 4;
inline bool qiaoqiaoccs_detail_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void qiaoqiaoccs_detail_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& qiaoqiaoccs_detail_ask::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.id_card)
  return *id_card_;
}
inline void qiaoqiaoccs_detail_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ask.id_card)
}
inline void qiaoqiaoccs_detail_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail_ask.id_card)
}
inline void qiaoqiaoccs_detail_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail_ask.id_card)
}
inline ::std::string* qiaoqiaoccs_detail_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ask.id_card)
  return id_card_;
}
inline ::std::string* qiaoqiaoccs_detail_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail_ask.id_card)
}

// optional .common.common_ask_header ask_header = 5;
inline bool qiaoqiaoccs_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void qiaoqiaoccs_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& qiaoqiaoccs_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* qiaoqiaoccs_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* qiaoqiaoccs_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void qiaoqiaoccs_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail_ask.ask_header)
}

// optional int32 page_num = 6;
inline bool qiaoqiaoccs_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void qiaoqiaoccs_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 qiaoqiaoccs_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.page_num)
  return page_num_;
}
inline void qiaoqiaoccs_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ask.page_num)
}

// optional int32 cur_page = 7;
inline bool qiaoqiaoccs_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void qiaoqiaoccs_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000040u;
}
inline void qiaoqiaoccs_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void qiaoqiaoccs_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 qiaoqiaoccs_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ask.cur_page)
  return cur_page_;
}
inline void qiaoqiaoccs_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ask.cur_page)
}

// -------------------------------------------------------------------

// qiaoqiaoccs_detail

// optional bytes real_name = 1;
inline bool qiaoqiaoccs_detail::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qiaoqiaoccs_detail::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qiaoqiaoccs_detail::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& qiaoqiaoccs_detail::real_name() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.real_name)
  return *real_name_;
}
inline void qiaoqiaoccs_detail::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.real_name)
}
inline void qiaoqiaoccs_detail::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail.real_name)
}
inline void qiaoqiaoccs_detail::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail.real_name)
}
inline ::std::string* qiaoqiaoccs_detail::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail.real_name)
  return real_name_;
}
inline ::std::string* qiaoqiaoccs_detail::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail.real_name)
}

// optional bytes mobilePhone = 2;
inline bool qiaoqiaoccs_detail::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qiaoqiaoccs_detail::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qiaoqiaoccs_detail::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& qiaoqiaoccs_detail::mobilephone() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.mobilePhone)
  return *mobilephone_;
}
inline void qiaoqiaoccs_detail::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.mobilePhone)
}
inline void qiaoqiaoccs_detail::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail.mobilePhone)
}
inline void qiaoqiaoccs_detail::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail.mobilePhone)
}
inline ::std::string* qiaoqiaoccs_detail::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail.mobilePhone)
  return mobilephone_;
}
inline ::std::string* qiaoqiaoccs_detail::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail.mobilePhone)
}

// optional bytes id_card = 3;
inline bool qiaoqiaoccs_detail::has_id_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_id_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qiaoqiaoccs_detail::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qiaoqiaoccs_detail::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& qiaoqiaoccs_detail::id_card() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.id_card)
  return *id_card_;
}
inline void qiaoqiaoccs_detail::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.id_card)
}
inline void qiaoqiaoccs_detail::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail.id_card)
}
inline void qiaoqiaoccs_detail::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail.id_card)
}
inline ::std::string* qiaoqiaoccs_detail::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail.id_card)
  return id_card_;
}
inline ::std::string* qiaoqiaoccs_detail::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail.id_card)
}

// optional int32 cur_credit = 4;
inline bool qiaoqiaoccs_detail::has_cur_credit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_cur_credit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void qiaoqiaoccs_detail::clear_has_cur_credit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void qiaoqiaoccs_detail::clear_cur_credit() {
  cur_credit_ = 0;
  clear_has_cur_credit();
}
inline ::google::protobuf::int32 qiaoqiaoccs_detail::cur_credit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.cur_credit)
  return cur_credit_;
}
inline void qiaoqiaoccs_detail::set_cur_credit(::google::protobuf::int32 value) {
  set_has_cur_credit();
  cur_credit_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.cur_credit)
}

// optional float friendship_credit = 5;
inline bool qiaoqiaoccs_detail::has_friendship_credit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_friendship_credit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void qiaoqiaoccs_detail::clear_has_friendship_credit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void qiaoqiaoccs_detail::clear_friendship_credit() {
  friendship_credit_ = 0;
  clear_has_friendship_credit();
}
inline float qiaoqiaoccs_detail::friendship_credit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.friendship_credit)
  return friendship_credit_;
}
inline void qiaoqiaoccs_detail::set_friendship_credit(float value) {
  set_has_friendship_credit();
  friendship_credit_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.friendship_credit)
}

// optional float worth_credit = 6;
inline bool qiaoqiaoccs_detail::has_worth_credit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_worth_credit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void qiaoqiaoccs_detail::clear_has_worth_credit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void qiaoqiaoccs_detail::clear_worth_credit() {
  worth_credit_ = 0;
  clear_has_worth_credit();
}
inline float qiaoqiaoccs_detail::worth_credit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.worth_credit)
  return worth_credit_;
}
inline void qiaoqiaoccs_detail::set_worth_credit(float value) {
  set_has_worth_credit();
  worth_credit_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.worth_credit)
}

// optional float risk_credit = 7;
inline bool qiaoqiaoccs_detail::has_risk_credit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_risk_credit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void qiaoqiaoccs_detail::clear_has_risk_credit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void qiaoqiaoccs_detail::clear_risk_credit() {
  risk_credit_ = 0;
  clear_has_risk_credit();
}
inline float qiaoqiaoccs_detail::risk_credit() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.risk_credit)
  return risk_credit_;
}
inline void qiaoqiaoccs_detail::set_risk_credit(float value) {
  set_has_risk_credit();
  risk_credit_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.risk_credit)
}

// optional bytes sum_info = 8;
inline bool qiaoqiaoccs_detail::has_sum_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_sum_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void qiaoqiaoccs_detail::clear_has_sum_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void qiaoqiaoccs_detail::clear_sum_info() {
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_->clear();
  }
  clear_has_sum_info();
}
inline const ::std::string& qiaoqiaoccs_detail::sum_info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.sum_info)
  return *sum_info_;
}
inline void qiaoqiaoccs_detail::set_sum_info(const ::std::string& value) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.sum_info)
}
inline void qiaoqiaoccs_detail::set_sum_info(const char* value) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail.sum_info)
}
inline void qiaoqiaoccs_detail::set_sum_info(const void* value, size_t size) {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  sum_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail.sum_info)
}
inline ::std::string* qiaoqiaoccs_detail::mutable_sum_info() {
  set_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sum_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail.sum_info)
  return sum_info_;
}
inline ::std::string* qiaoqiaoccs_detail::release_sum_info() {
  clear_has_sum_info();
  if (sum_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sum_info_;
    sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail::set_allocated_sum_info(::std::string* sum_info) {
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_info_;
  }
  if (sum_info) {
    set_has_sum_info();
    sum_info_ = sum_info;
  } else {
    clear_has_sum_info();
    sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail.sum_info)
}

// optional bytes version = 9;
inline bool qiaoqiaoccs_detail::has_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void qiaoqiaoccs_detail::set_has_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void qiaoqiaoccs_detail::clear_has_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void qiaoqiaoccs_detail::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& qiaoqiaoccs_detail::version() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail.version)
  return *version_;
}
inline void qiaoqiaoccs_detail::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail.version)
}
inline void qiaoqiaoccs_detail::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.qiaoqiaoccs_detail.version)
}
inline void qiaoqiaoccs_detail::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.qiaoqiaoccs_detail.version)
}
inline ::std::string* qiaoqiaoccs_detail::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail.version)
  return version_;
}
inline ::std::string* qiaoqiaoccs_detail::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void qiaoqiaoccs_detail::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail.version)
}

// -------------------------------------------------------------------

// qiaoqiaoccs_detail_ans

// repeated .AFP_main_frame.qiaoqiaoccs_detail qiaoqiaoccs_detail_list = 1;
inline int qiaoqiaoccs_detail_ans::qiaoqiaoccs_detail_list_size() const {
  return qiaoqiaoccs_detail_list_.size();
}
inline void qiaoqiaoccs_detail_ans::clear_qiaoqiaoccs_detail_list() {
  qiaoqiaoccs_detail_list_.Clear();
}
inline const ::AFP_main_frame::qiaoqiaoccs_detail& qiaoqiaoccs_detail_ans::qiaoqiaoccs_detail_list(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ans.qiaoqiaoccs_detail_list)
  return qiaoqiaoccs_detail_list_.Get(index);
}
inline ::AFP_main_frame::qiaoqiaoccs_detail* qiaoqiaoccs_detail_ans::mutable_qiaoqiaoccs_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ans.qiaoqiaoccs_detail_list)
  return qiaoqiaoccs_detail_list_.Mutable(index);
}
inline ::AFP_main_frame::qiaoqiaoccs_detail* qiaoqiaoccs_detail_ans::add_qiaoqiaoccs_detail_list() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.qiaoqiaoccs_detail_ans.qiaoqiaoccs_detail_list)
  return qiaoqiaoccs_detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiaoccs_detail >&
qiaoqiaoccs_detail_ans::qiaoqiaoccs_detail_list() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.qiaoqiaoccs_detail_ans.qiaoqiaoccs_detail_list)
  return qiaoqiaoccs_detail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::qiaoqiaoccs_detail >*
qiaoqiaoccs_detail_ans::mutable_qiaoqiaoccs_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.qiaoqiaoccs_detail_ans.qiaoqiaoccs_detail_list)
  return &qiaoqiaoccs_detail_list_;
}

// optional .common.errorinfo error = 2;
inline bool qiaoqiaoccs_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qiaoqiaoccs_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qiaoqiaoccs_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qiaoqiaoccs_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& qiaoqiaoccs_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* qiaoqiaoccs_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.qiaoqiaoccs_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* qiaoqiaoccs_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void qiaoqiaoccs_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.qiaoqiaoccs_detail_ans.error)
}

// optional int32 total_number = 3;
inline bool qiaoqiaoccs_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qiaoqiaoccs_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qiaoqiaoccs_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qiaoqiaoccs_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 qiaoqiaoccs_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.qiaoqiaoccs_detail_ans.total_number)
  return total_number_;
}
inline void qiaoqiaoccs_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.qiaoqiaoccs_detail_ans.total_number)
}

// -------------------------------------------------------------------

// credit_request_monitor_ask

// optional int32 handle_type = 1;
inline bool credit_request_monitor_ask::has_handle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_request_monitor_ask::set_has_handle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_request_monitor_ask::clear_has_handle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_request_monitor_ask::clear_handle_type() {
  handle_type_ = 0;
  clear_has_handle_type();
}
inline ::google::protobuf::int32 credit_request_monitor_ask::handle_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ask.handle_type)
  return handle_type_;
}
inline void credit_request_monitor_ask::set_handle_type(::google::protobuf::int32 value) {
  set_has_handle_type();
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_request_monitor_ask.handle_type)
}

// optional .common.common_ask_header ask_header = 2;
inline bool credit_request_monitor_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_request_monitor_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_request_monitor_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_request_monitor_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& credit_request_monitor_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* credit_request_monitor_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_request_monitor_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* credit_request_monitor_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void credit_request_monitor_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_request_monitor_ask.ask_header)
}

// -------------------------------------------------------------------

// credit_request_monitor_ans

// optional int32 id = 1;
inline bool credit_request_monitor_ans::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_request_monitor_ans::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_request_monitor_ans::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_request_monitor_ans::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 credit_request_monitor_ans::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ans.id)
  return id_;
}
inline void credit_request_monitor_ans::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_request_monitor_ans.id)
}

// optional bytes update_time = 2;
inline bool credit_request_monitor_ans::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_request_monitor_ans::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_request_monitor_ans::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_request_monitor_ans::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& credit_request_monitor_ans::update_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ans.update_time)
  return *update_time_;
}
inline void credit_request_monitor_ans::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_request_monitor_ans.update_time)
}
inline void credit_request_monitor_ans::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_request_monitor_ans.update_time)
}
inline void credit_request_monitor_ans::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_request_monitor_ans.update_time)
}
inline ::std::string* credit_request_monitor_ans::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_request_monitor_ans.update_time)
  return update_time_;
}
inline ::std::string* credit_request_monitor_ans::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_request_monitor_ans::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_request_monitor_ans.update_time)
}

// optional int32 handle_type = 3;
inline bool credit_request_monitor_ans::has_handle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_request_monitor_ans::set_has_handle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_request_monitor_ans::clear_has_handle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_request_monitor_ans::clear_handle_type() {
  handle_type_ = 0;
  clear_has_handle_type();
}
inline ::google::protobuf::int32 credit_request_monitor_ans::handle_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ans.handle_type)
  return handle_type_;
}
inline void credit_request_monitor_ans::set_handle_type(::google::protobuf::int32 value) {
  set_has_handle_type();
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_request_monitor_ans.handle_type)
}

// optional bytes json = 4;
inline bool credit_request_monitor_ans::has_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_request_monitor_ans::set_has_json() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_request_monitor_ans::clear_has_json() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_request_monitor_ans::clear_json() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& credit_request_monitor_ans::json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ans.json)
  return *json_;
}
inline void credit_request_monitor_ans::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_request_monitor_ans.json)
}
inline void credit_request_monitor_ans::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_request_monitor_ans.json)
}
inline void credit_request_monitor_ans::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_request_monitor_ans.json)
}
inline ::std::string* credit_request_monitor_ans::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_request_monitor_ans.json)
  return json_;
}
inline ::std::string* credit_request_monitor_ans::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_request_monitor_ans::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_request_monitor_ans.json)
}

// optional .common.errorinfo error = 5;
inline bool credit_request_monitor_ans::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void credit_request_monitor_ans::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void credit_request_monitor_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void credit_request_monitor_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_request_monitor_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_request_monitor_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_request_monitor_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_request_monitor_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_request_monitor_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_request_monitor_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_request_monitor_ans.error)
}

// -------------------------------------------------------------------

// credit_response_monitor_ask

// optional int32 handle_type = 1;
inline bool credit_response_monitor_ask::has_handle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_response_monitor_ask::set_has_handle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_response_monitor_ask::clear_has_handle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_response_monitor_ask::clear_handle_type() {
  handle_type_ = 0;
  clear_has_handle_type();
}
inline ::google::protobuf::int32 credit_response_monitor_ask::handle_type() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_response_monitor_ask.handle_type)
  return handle_type_;
}
inline void credit_response_monitor_ask::set_handle_type(::google::protobuf::int32 value) {
  set_has_handle_type();
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_response_monitor_ask.handle_type)
}

// optional .common.common_ask_header ask_header = 2;
inline bool credit_response_monitor_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_response_monitor_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_response_monitor_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_response_monitor_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& credit_response_monitor_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_response_monitor_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* credit_response_monitor_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_response_monitor_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* credit_response_monitor_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void credit_response_monitor_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_response_monitor_ask.ask_header)
}

// -------------------------------------------------------------------

// credit_response_monitor_ans

// optional int32 id = 1;
inline bool credit_response_monitor_ans::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_response_monitor_ans::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_response_monitor_ans::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_response_monitor_ans::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 credit_response_monitor_ans::id() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_response_monitor_ans.id)
  return id_;
}
inline void credit_response_monitor_ans::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_response_monitor_ans.id)
}

// optional bytes inset_time = 2;
inline bool credit_response_monitor_ans::has_inset_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_response_monitor_ans::set_has_inset_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_response_monitor_ans::clear_has_inset_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_response_monitor_ans::clear_inset_time() {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_->clear();
  }
  clear_has_inset_time();
}
inline const ::std::string& credit_response_monitor_ans::inset_time() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_response_monitor_ans.inset_time)
  return *inset_time_;
}
inline void credit_response_monitor_ans::set_inset_time(const ::std::string& value) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_response_monitor_ans.inset_time)
}
inline void credit_response_monitor_ans::set_inset_time(const char* value) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_response_monitor_ans.inset_time)
}
inline void credit_response_monitor_ans::set_inset_time(const void* value, size_t size) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_response_monitor_ans.inset_time)
}
inline ::std::string* credit_response_monitor_ans::mutable_inset_time() {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_response_monitor_ans.inset_time)
  return inset_time_;
}
inline ::std::string* credit_response_monitor_ans::release_inset_time() {
  clear_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inset_time_;
    inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_response_monitor_ans::set_allocated_inset_time(::std::string* inset_time) {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inset_time_;
  }
  if (inset_time) {
    set_has_inset_time();
    inset_time_ = inset_time;
  } else {
    clear_has_inset_time();
    inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_response_monitor_ans.inset_time)
}

// optional bytes json = 3;
inline bool credit_response_monitor_ans::has_json() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_response_monitor_ans::set_has_json() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_response_monitor_ans::clear_has_json() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_response_monitor_ans::clear_json() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& credit_response_monitor_ans::json() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_response_monitor_ans.json)
  return *json_;
}
inline void credit_response_monitor_ans::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set:AFP_main_frame.credit_response_monitor_ans.json)
}
inline void credit_response_monitor_ans::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set_char:AFP_main_frame.credit_response_monitor_ans.json)
}
inline void credit_response_monitor_ans::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFP_main_frame.credit_response_monitor_ans.json)
}
inline ::std::string* credit_response_monitor_ans::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_response_monitor_ans.json)
  return json_;
}
inline ::std::string* credit_response_monitor_ans::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_response_monitor_ans::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_response_monitor_ans.json)
}

// optional .common.errorinfo error = 4;
inline bool credit_response_monitor_ans::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_response_monitor_ans::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_response_monitor_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_response_monitor_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_response_monitor_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.credit_response_monitor_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_response_monitor_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.credit_response_monitor_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_response_monitor_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_response_monitor_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.credit_response_monitor_ans.error)
}

// -------------------------------------------------------------------

// user_verification_history_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_verification_history_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_verification_history_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_verification_history_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_verification_history_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_verification_history_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_history_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_verification_history_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_history_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_verification_history_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_verification_history_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_verification_history_ask.ask_header)
}

// optional .QDP_basic_info.user_basic_info info = 2;
inline bool user_verification_history_ask::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_verification_history_ask::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_verification_history_ask::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_verification_history_ask::clear_info() {
  if (info_ != NULL) info_->::QDP_basic_info::user_basic_info::Clear();
  clear_has_info();
}
inline const ::QDP_basic_info::user_basic_info& user_verification_history_ask::info() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_history_ask.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::QDP_basic_info::user_basic_info* user_verification_history_ask::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::QDP_basic_info::user_basic_info;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_history_ask.info)
  return info_;
}
inline ::QDP_basic_info::user_basic_info* user_verification_history_ask::release_info() {
  clear_has_info();
  ::QDP_basic_info::user_basic_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void user_verification_history_ask::set_allocated_info(::QDP_basic_info::user_basic_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_verification_history_ask.info)
}

// -------------------------------------------------------------------

// user_verification_history_ans

// optional .common.errorinfo error = 1;
inline bool user_verification_history_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_verification_history_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_verification_history_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_verification_history_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_verification_history_ans::error() const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_history_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_verification_history_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_history_ans.error)
  return error_;
}
inline ::common::errorinfo* user_verification_history_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_verification_history_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:AFP_main_frame.user_verification_history_ans.error)
}

// repeated .AFP_main_frame.function_verification_out fucver_out = 2;
inline int user_verification_history_ans::fucver_out_size() const {
  return fucver_out_.size();
}
inline void user_verification_history_ans::clear_fucver_out() {
  fucver_out_.Clear();
}
inline const ::AFP_main_frame::function_verification_out& user_verification_history_ans::fucver_out(int index) const {
  // @@protoc_insertion_point(field_get:AFP_main_frame.user_verification_history_ans.fucver_out)
  return fucver_out_.Get(index);
}
inline ::AFP_main_frame::function_verification_out* user_verification_history_ans::mutable_fucver_out(int index) {
  // @@protoc_insertion_point(field_mutable:AFP_main_frame.user_verification_history_ans.fucver_out)
  return fucver_out_.Mutable(index);
}
inline ::AFP_main_frame::function_verification_out* user_verification_history_ans::add_fucver_out() {
  // @@protoc_insertion_point(field_add:AFP_main_frame.user_verification_history_ans.fucver_out)
  return fucver_out_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >&
user_verification_history_ans::fucver_out() const {
  // @@protoc_insertion_point(field_list:AFP_main_frame.user_verification_history_ans.fucver_out)
  return fucver_out_;
}
inline ::google::protobuf::RepeatedPtrField< ::AFP_main_frame::function_verification_out >*
user_verification_history_ans::mutable_fucver_out() {
  // @@protoc_insertion_point(field_mutable_list:AFP_main_frame.user_verification_history_ans.fucver_out)
  return &fucver_out_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFP_main_frame

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AFP_main_frame::platform_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFP_main_frame::platform_type>() {
  return ::AFP_main_frame::platform_type_descriptor();
}
template <> struct is_proto_enum< ::AFP_main_frame::overdue_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFP_main_frame::overdue_type>() {
  return ::AFP_main_frame::overdue_type_descriptor();
}
template <> struct is_proto_enum< ::AFP_main_frame::function_serial_number> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFP_main_frame::function_serial_number>() {
  return ::AFP_main_frame::function_serial_number_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AFP_5fmain_5fframe_2eproto__INCLUDED
