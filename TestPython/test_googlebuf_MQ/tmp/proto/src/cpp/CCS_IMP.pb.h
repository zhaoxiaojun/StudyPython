// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CCS_IMP.proto

#ifndef PROTOBUF_CCS_5fIMP_2eproto__INCLUDED
#define PROTOBUF_CCS_5fIMP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace CCS_IMP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CCS_5fIMP_2eproto();
void protobuf_AssignDesc_CCS_5fIMP_2eproto();
void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

class credit_line_statistics_info;
class credit_line_model_detail_info;
class credit_detail_info;
class credit_line_statistics_ask;
class credit_line_statistics_ans;
class credit_detail_ask;
class credit_detail_ans;
class credit_model_type_detail_info;
class credit_model_detail_info;
class credit_model_detail_load_ask;
class credit_model_detail_load_ans;
class credit_model_detail_save_ask;
class credit_model_detail_save_ans;

// ===================================================================

class credit_line_statistics_info : public ::google::protobuf::Message {
 public:
  credit_line_statistics_info();
  virtual ~credit_line_statistics_info();

  credit_line_statistics_info(const credit_line_statistics_info& from);

  inline credit_line_statistics_info& operator=(const credit_line_statistics_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_line_statistics_info& default_instance();

  void Swap(credit_line_statistics_info* other);

  // implements Message ----------------------------------------------

  credit_line_statistics_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_line_statistics_info& from);
  void MergeFrom(const credit_line_statistics_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes line_interval = 1;
  inline bool has_line_interval() const;
  inline void clear_line_interval();
  static const int kLineIntervalFieldNumber = 1;
  inline const ::std::string& line_interval() const;
  inline void set_line_interval(const ::std::string& value);
  inline void set_line_interval(const char* value);
  inline void set_line_interval(const void* value, size_t size);
  inline ::std::string* mutable_line_interval();
  inline ::std::string* release_line_interval();
  inline void set_allocated_line_interval(::std::string* line_interval);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional float value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_line_statistics_info)
 private:
  inline void set_has_line_interval();
  inline void clear_has_line_interval();
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* line_interval_;
  ::google::protobuf::int32 total_number_;
  float value_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_line_statistics_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_line_model_detail_info : public ::google::protobuf::Message {
 public:
  credit_line_model_detail_info();
  virtual ~credit_line_model_detail_info();

  credit_line_model_detail_info(const credit_line_model_detail_info& from);

  inline credit_line_model_detail_info& operator=(const credit_line_model_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_line_model_detail_info& default_instance();

  void Swap(credit_line_model_detail_info* other);

  // implements Message ----------------------------------------------

  credit_line_model_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_line_model_detail_info& from);
  void MergeFrom(const credit_line_model_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes model_no = 1;
  inline bool has_model_no() const;
  inline void clear_model_no();
  static const int kModelNoFieldNumber = 1;
  inline const ::std::string& model_no() const;
  inline void set_model_no(const ::std::string& value);
  inline void set_model_no(const char* value);
  inline void set_model_no(const void* value, size_t size);
  inline ::std::string* mutable_model_no();
  inline ::std::string* release_model_no();
  inline void set_allocated_model_no(::std::string* model_no);

  // optional float percent = 2;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 2;
  inline float percent() const;
  inline void set_percent(float value);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_line_model_detail_info)
 private:
  inline void set_has_model_no();
  inline void clear_has_model_no();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* model_no_;
  float percent_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_line_model_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_detail_info : public ::google::protobuf::Message {
 public:
  credit_detail_info();
  virtual ~credit_detail_info();

  credit_detail_info(const credit_detail_info& from);

  inline credit_detail_info& operator=(const credit_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_detail_info& default_instance();

  void Swap(credit_detail_info* other);

  // implements Message ----------------------------------------------

  credit_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_detail_info& from);
  void MergeFrom(const credit_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_no = 3;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 3;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes line_val = 4;
  inline bool has_line_val() const;
  inline void clear_line_val();
  static const int kLineValFieldNumber = 4;
  inline const ::std::string& line_val() const;
  inline void set_line_val(const ::std::string& value);
  inline void set_line_val(const char* value);
  inline void set_line_val(const void* value, size_t size);
  inline ::std::string* mutable_line_val();
  inline ::std::string* release_line_val();
  inline void set_allocated_line_val(::std::string* line_val);

  // repeated .CCS_IMP.credit_line_model_detail_info list = 5;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 5;
  inline const ::CCS_IMP::credit_line_model_detail_info& list(int index) const;
  inline ::CCS_IMP::credit_line_model_detail_info* mutable_list(int index);
  inline ::CCS_IMP::credit_line_model_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_model_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_model_detail_info >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_detail_info)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_line_val();
  inline void clear_has_line_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_no_;
  ::std::string* line_val_;
  ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_model_detail_info > list_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_line_statistics_ask : public ::google::protobuf::Message {
 public:
  credit_line_statistics_ask();
  virtual ~credit_line_statistics_ask();

  credit_line_statistics_ask(const credit_line_statistics_ask& from);

  inline credit_line_statistics_ask& operator=(const credit_line_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_line_statistics_ask& default_instance();

  void Swap(credit_line_statistics_ask* other);

  // implements Message ----------------------------------------------

  credit_line_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_line_statistics_ask& from);
  void MergeFrom(const credit_line_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes credit_type = 1;
  inline bool has_credit_type() const;
  inline void clear_credit_type();
  static const int kCreditTypeFieldNumber = 1;
  inline const ::std::string& credit_type() const;
  inline void set_credit_type(const ::std::string& value);
  inline void set_credit_type(const char* value);
  inline void set_credit_type(const void* value, size_t size);
  inline ::std::string* mutable_credit_type();
  inline ::std::string* release_credit_type();
  inline void set_allocated_credit_type(::std::string* credit_type);

  // optional bytes user_type = 2;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  inline const ::std::string& user_type() const;
  inline void set_user_type(const ::std::string& value);
  inline void set_user_type(const char* value);
  inline void set_user_type(const void* value, size_t size);
  inline ::std::string* mutable_user_type();
  inline ::std::string* release_user_type();
  inline void set_allocated_user_type(::std::string* user_type);

  // optional bytes start_date = 3;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 3;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 4;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 4;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes model_no = 5;
  inline bool has_model_no() const;
  inline void clear_model_no();
  static const int kModelNoFieldNumber = 5;
  inline const ::std::string& model_no() const;
  inline void set_model_no(const ::std::string& value);
  inline void set_model_no(const char* value);
  inline void set_model_no(const void* value, size_t size);
  inline ::std::string* mutable_model_no();
  inline ::std::string* release_model_no();
  inline void set_allocated_model_no(::std::string* model_no);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_line_statistics_ask)
 private:
  inline void set_has_credit_type();
  inline void clear_has_credit_type();
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_model_no();
  inline void clear_has_model_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* credit_type_;
  ::std::string* user_type_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* model_no_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_line_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_line_statistics_ans : public ::google::protobuf::Message {
 public:
  credit_line_statistics_ans();
  virtual ~credit_line_statistics_ans();

  credit_line_statistics_ans(const credit_line_statistics_ans& from);

  inline credit_line_statistics_ans& operator=(const credit_line_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_line_statistics_ans& default_instance();

  void Swap(credit_line_statistics_ans* other);

  // implements Message ----------------------------------------------

  credit_line_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_line_statistics_ans& from);
  void MergeFrom(const credit_line_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCS_IMP.credit_line_statistics_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::CCS_IMP::credit_line_statistics_info& list(int index) const;
  inline ::CCS_IMP::credit_line_statistics_info* mutable_list(int index);
  inline ::CCS_IMP::credit_line_statistics_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_statistics_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_statistics_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_line_statistics_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_statistics_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_line_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_detail_ask : public ::google::protobuf::Message {
 public:
  credit_detail_ask();
  virtual ~credit_detail_ask();

  credit_detail_ask(const credit_detail_ask& from);

  inline credit_detail_ask& operator=(const credit_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_detail_ask& default_instance();

  void Swap(credit_detail_ask* other);

  // implements Message ----------------------------------------------

  credit_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_detail_ask& from);
  void MergeFrom(const credit_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes credit_type = 1;
  inline bool has_credit_type() const;
  inline void clear_credit_type();
  static const int kCreditTypeFieldNumber = 1;
  inline const ::std::string& credit_type() const;
  inline void set_credit_type(const ::std::string& value);
  inline void set_credit_type(const char* value);
  inline void set_credit_type(const void* value, size_t size);
  inline ::std::string* mutable_credit_type();
  inline ::std::string* release_credit_type();
  inline void set_allocated_credit_type(::std::string* credit_type);

  // optional bytes user_type = 2;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  inline const ::std::string& user_type() const;
  inline void set_user_type(const ::std::string& value);
  inline void set_user_type(const char* value);
  inline void set_user_type(const void* value, size_t size);
  inline ::std::string* mutable_user_type();
  inline ::std::string* release_user_type();
  inline void set_allocated_user_type(::std::string* user_type);

  // optional bytes start_date = 3;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 3;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 4;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 4;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional int32 page_num = 5;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 5;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 6;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 6;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_detail_ask)
 private:
  inline void set_has_credit_type();
  inline void clear_has_credit_type();
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* credit_type_;
  ::std::string* user_type_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_detail_ans : public ::google::protobuf::Message {
 public:
  credit_detail_ans();
  virtual ~credit_detail_ans();

  credit_detail_ans(const credit_detail_ans& from);

  inline credit_detail_ans& operator=(const credit_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_detail_ans& default_instance();

  void Swap(credit_detail_ans* other);

  // implements Message ----------------------------------------------

  credit_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_detail_ans& from);
  void MergeFrom(const credit_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCS_IMP.credit_detail_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::CCS_IMP::credit_detail_info& list(int index) const;
  inline ::CCS_IMP::credit_detail_info* mutable_list(int index);
  inline ::CCS_IMP::credit_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_detail_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_detail_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_detail_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_model_type_detail_info : public ::google::protobuf::Message {
 public:
  credit_model_type_detail_info();
  virtual ~credit_model_type_detail_info();

  credit_model_type_detail_info(const credit_model_type_detail_info& from);

  inline credit_model_type_detail_info& operator=(const credit_model_type_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_model_type_detail_info& default_instance();

  void Swap(credit_model_type_detail_info* other);

  // implements Message ----------------------------------------------

  credit_model_type_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_model_type_detail_info& from);
  void MergeFrom(const credit_model_type_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float param1 = 2;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  inline float param1() const;
  inline void set_param1(float value);

  // optional float param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline float param2() const;
  inline void set_param2(float value);

  // optional float param3 = 4;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 4;
  inline float param3() const;
  inline void set_param3(float value);

  // optional float param4 = 5;
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 5;
  inline float param4() const;
  inline void set_param4(float value);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_model_type_detail_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_model_type_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_model_detail_info : public ::google::protobuf::Message {
 public:
  credit_model_detail_info();
  virtual ~credit_model_detail_info();

  credit_model_detail_info(const credit_model_detail_info& from);

  inline credit_model_detail_info& operator=(const credit_model_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_model_detail_info& default_instance();

  void Swap(credit_model_detail_info* other);

  // implements Message ----------------------------------------------

  credit_model_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_model_detail_info& from);
  void MergeFrom(const credit_model_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes credit_type = 1;
  inline bool has_credit_type() const;
  inline void clear_credit_type();
  static const int kCreditTypeFieldNumber = 1;
  inline const ::std::string& credit_type() const;
  inline void set_credit_type(const ::std::string& value);
  inline void set_credit_type(const char* value);
  inline void set_credit_type(const void* value, size_t size);
  inline ::std::string* mutable_credit_type();
  inline ::std::string* release_credit_type();
  inline void set_allocated_credit_type(::std::string* credit_type);

  // optional bytes user_type = 2;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  inline const ::std::string& user_type() const;
  inline void set_user_type(const ::std::string& value);
  inline void set_user_type(const char* value);
  inline void set_user_type(const void* value, size_t size);
  inline ::std::string* mutable_user_type();
  inline ::std::string* release_user_type();
  inline void set_allocated_user_type(::std::string* user_type);

  // optional bytes model_no = 3;
  inline bool has_model_no() const;
  inline void clear_model_no();
  static const int kModelNoFieldNumber = 3;
  inline const ::std::string& model_no() const;
  inline void set_model_no(const ::std::string& value);
  inline void set_model_no(const char* value);
  inline void set_model_no(const void* value, size_t size);
  inline ::std::string* mutable_model_no();
  inline ::std::string* release_model_no();
  inline void set_allocated_model_no(::std::string* model_no);

  // repeated .CCS_IMP.credit_model_type_detail_info list = 4;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 4;
  inline const ::CCS_IMP::credit_model_type_detail_info& list(int index) const;
  inline ::CCS_IMP::credit_model_type_detail_info* mutable_list(int index);
  inline ::CCS_IMP::credit_model_type_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_type_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_type_detail_info >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_model_detail_info)
 private:
  inline void set_has_credit_type();
  inline void clear_has_credit_type();
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_model_no();
  inline void clear_has_model_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* credit_type_;
  ::std::string* user_type_;
  ::std::string* model_no_;
  ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_type_detail_info > list_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_model_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class credit_model_detail_load_ask : public ::google::protobuf::Message {
 public:
  credit_model_detail_load_ask();
  virtual ~credit_model_detail_load_ask();

  credit_model_detail_load_ask(const credit_model_detail_load_ask& from);

  inline credit_model_detail_load_ask& operator=(const credit_model_detail_load_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_model_detail_load_ask& default_instance();

  void Swap(credit_model_detail_load_ask* other);

  // implements Message ----------------------------------------------

  credit_model_detail_load_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_model_detail_load_ask& from);
  void MergeFrom(const credit_model_detail_load_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CCS_IMP.credit_model_detail_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::CCS_IMP::credit_model_detail_info& info() const;
  inline ::CCS_IMP::credit_model_detail_info* mutable_info();
  inline ::CCS_IMP::credit_model_detail_info* release_info();
  inline void set_allocated_info(::CCS_IMP::credit_model_detail_info* info);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_model_detail_load_ask)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CCS_IMP::credit_model_detail_info* info_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_model_detail_load_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_model_detail_load_ans : public ::google::protobuf::Message {
 public:
  credit_model_detail_load_ans();
  virtual ~credit_model_detail_load_ans();

  credit_model_detail_load_ans(const credit_model_detail_load_ans& from);

  inline credit_model_detail_load_ans& operator=(const credit_model_detail_load_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_model_detail_load_ans& default_instance();

  void Swap(credit_model_detail_load_ans* other);

  // implements Message ----------------------------------------------

  credit_model_detail_load_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_model_detail_load_ans& from);
  void MergeFrom(const credit_model_detail_load_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCS_IMP.credit_model_detail_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::CCS_IMP::credit_model_detail_info& list(int index) const;
  inline ::CCS_IMP::credit_model_detail_info* mutable_list(int index);
  inline ::CCS_IMP::credit_model_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_model_detail_load_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_model_detail_load_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_model_detail_save_ask : public ::google::protobuf::Message {
 public:
  credit_model_detail_save_ask();
  virtual ~credit_model_detail_save_ask();

  credit_model_detail_save_ask(const credit_model_detail_save_ask& from);

  inline credit_model_detail_save_ask& operator=(const credit_model_detail_save_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_model_detail_save_ask& default_instance();

  void Swap(credit_model_detail_save_ask* other);

  // implements Message ----------------------------------------------

  credit_model_detail_save_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_model_detail_save_ask& from);
  void MergeFrom(const credit_model_detail_save_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CCS_IMP.credit_model_detail_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::CCS_IMP::credit_model_detail_info& list(int index) const;
  inline ::CCS_IMP::credit_model_detail_info* mutable_list(int index);
  inline ::CCS_IMP::credit_model_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_model_detail_save_ask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info > list_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_model_detail_save_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_model_detail_save_ans : public ::google::protobuf::Message {
 public:
  credit_model_detail_save_ans();
  virtual ~credit_model_detail_save_ans();

  credit_model_detail_save_ans(const credit_model_detail_save_ans& from);

  inline credit_model_detail_save_ans& operator=(const credit_model_detail_save_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_model_detail_save_ans& default_instance();

  void Swap(credit_model_detail_save_ans* other);

  // implements Message ----------------------------------------------

  credit_model_detail_save_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_model_detail_save_ans& from);
  void MergeFrom(const credit_model_detail_save_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:CCS_IMP.credit_model_detail_save_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_CCS_5fIMP_2eproto();
  friend void protobuf_AssignDesc_CCS_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_CCS_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static credit_model_detail_save_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// credit_line_statistics_info

// optional bytes line_interval = 1;
inline bool credit_line_statistics_info::has_line_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_line_statistics_info::set_has_line_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_line_statistics_info::clear_has_line_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_line_statistics_info::clear_line_interval() {
  if (line_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_interval_->clear();
  }
  clear_has_line_interval();
}
inline const ::std::string& credit_line_statistics_info::line_interval() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_info.line_interval)
  return *line_interval_;
}
inline void credit_line_statistics_info::set_line_interval(const ::std::string& value) {
  set_has_line_interval();
  if (line_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_interval_ = new ::std::string;
  }
  line_interval_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_info.line_interval)
}
inline void credit_line_statistics_info::set_line_interval(const char* value) {
  set_has_line_interval();
  if (line_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_interval_ = new ::std::string;
  }
  line_interval_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_statistics_info.line_interval)
}
inline void credit_line_statistics_info::set_line_interval(const void* value, size_t size) {
  set_has_line_interval();
  if (line_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_interval_ = new ::std::string;
  }
  line_interval_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_statistics_info.line_interval)
}
inline ::std::string* credit_line_statistics_info::mutable_line_interval() {
  set_has_line_interval();
  if (line_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_interval_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_info.line_interval)
  return line_interval_;
}
inline ::std::string* credit_line_statistics_info::release_line_interval() {
  clear_has_line_interval();
  if (line_interval_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = line_interval_;
    line_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_statistics_info::set_allocated_line_interval(::std::string* line_interval) {
  if (line_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete line_interval_;
  }
  if (line_interval) {
    set_has_line_interval();
    line_interval_ = line_interval;
  } else {
    clear_has_line_interval();
    line_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_info.line_interval)
}

// optional int32 total_number = 2;
inline bool credit_line_statistics_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_line_statistics_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_line_statistics_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_line_statistics_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 credit_line_statistics_info::total_number() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_info.total_number)
  return total_number_;
}
inline void credit_line_statistics_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_info.total_number)
}

// optional float value = 3;
inline bool credit_line_statistics_info::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_line_statistics_info::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_line_statistics_info::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_line_statistics_info::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float credit_line_statistics_info::value() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_info.value)
  return value_;
}
inline void credit_line_statistics_info::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_info.value)
}

// -------------------------------------------------------------------

// credit_line_model_detail_info

// optional bytes model_no = 1;
inline bool credit_line_model_detail_info::has_model_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_line_model_detail_info::set_has_model_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_line_model_detail_info::clear_has_model_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_line_model_detail_info::clear_model_no() {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_->clear();
  }
  clear_has_model_no();
}
inline const ::std::string& credit_line_model_detail_info::model_no() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_model_detail_info.model_no)
  return *model_no_;
}
inline void credit_line_model_detail_info::set_model_no(const ::std::string& value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_model_detail_info.model_no)
}
inline void credit_line_model_detail_info::set_model_no(const char* value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_model_detail_info.model_no)
}
inline void credit_line_model_detail_info::set_model_no(const void* value, size_t size) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_model_detail_info.model_no)
}
inline ::std::string* credit_line_model_detail_info::mutable_model_no() {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_model_detail_info.model_no)
  return model_no_;
}
inline ::std::string* credit_line_model_detail_info::release_model_no() {
  clear_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_no_;
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_model_detail_info::set_allocated_model_no(::std::string* model_no) {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_no_;
  }
  if (model_no) {
    set_has_model_no();
    model_no_ = model_no;
  } else {
    clear_has_model_no();
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_model_detail_info.model_no)
}

// optional float percent = 2;
inline bool credit_line_model_detail_info::has_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_line_model_detail_info::set_has_percent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_line_model_detail_info::clear_has_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_line_model_detail_info::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float credit_line_model_detail_info::percent() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_model_detail_info.percent)
  return percent_;
}
inline void credit_line_model_detail_info::set_percent(float value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_model_detail_info.percent)
}

// -------------------------------------------------------------------

// credit_detail_info

// optional bytes real_name = 1;
inline bool credit_detail_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_detail_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_detail_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_detail_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& credit_detail_info::real_name() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_info.real_name)
  return *real_name_;
}
inline void credit_detail_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_info.real_name)
}
inline void credit_detail_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_info.real_name)
}
inline void credit_detail_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_info.real_name)
}
inline ::std::string* credit_detail_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_info.real_name)
  return real_name_;
}
inline ::std::string* credit_detail_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_info.real_name)
}

// optional bytes mobile_phone = 2;
inline bool credit_detail_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_detail_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_detail_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_detail_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& credit_detail_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_info.mobile_phone)
  return *mobile_phone_;
}
inline void credit_detail_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_info.mobile_phone)
}
inline void credit_detail_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_info.mobile_phone)
}
inline void credit_detail_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_info.mobile_phone)
}
inline ::std::string* credit_detail_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* credit_detail_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_info.mobile_phone)
}

// optional bytes id_no = 3;
inline bool credit_detail_info::has_id_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_detail_info::set_has_id_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_detail_info::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_detail_info::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& credit_detail_info::id_no() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_info.id_no)
  return *id_no_;
}
inline void credit_detail_info::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_info.id_no)
}
inline void credit_detail_info::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_info.id_no)
}
inline void credit_detail_info::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_info.id_no)
}
inline ::std::string* credit_detail_info::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_info.id_no)
  return id_no_;
}
inline ::std::string* credit_detail_info::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_info::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_info.id_no)
}

// optional bytes line_val = 4;
inline bool credit_detail_info::has_line_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_detail_info::set_has_line_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_detail_info::clear_has_line_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_detail_info::clear_line_val() {
  if (line_val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_val_->clear();
  }
  clear_has_line_val();
}
inline const ::std::string& credit_detail_info::line_val() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_info.line_val)
  return *line_val_;
}
inline void credit_detail_info::set_line_val(const ::std::string& value) {
  set_has_line_val();
  if (line_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_val_ = new ::std::string;
  }
  line_val_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_info.line_val)
}
inline void credit_detail_info::set_line_val(const char* value) {
  set_has_line_val();
  if (line_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_val_ = new ::std::string;
  }
  line_val_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_info.line_val)
}
inline void credit_detail_info::set_line_val(const void* value, size_t size) {
  set_has_line_val();
  if (line_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_val_ = new ::std::string;
  }
  line_val_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_info.line_val)
}
inline ::std::string* credit_detail_info::mutable_line_val() {
  set_has_line_val();
  if (line_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_val_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_info.line_val)
  return line_val_;
}
inline ::std::string* credit_detail_info::release_line_val() {
  clear_has_line_val();
  if (line_val_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = line_val_;
    line_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_info::set_allocated_line_val(::std::string* line_val) {
  if (line_val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete line_val_;
  }
  if (line_val) {
    set_has_line_val();
    line_val_ = line_val;
  } else {
    clear_has_line_val();
    line_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_info.line_val)
}

// repeated .CCS_IMP.credit_line_model_detail_info list = 5;
inline int credit_detail_info::list_size() const {
  return list_.size();
}
inline void credit_detail_info::clear_list() {
  list_.Clear();
}
inline const ::CCS_IMP::credit_line_model_detail_info& credit_detail_info::list(int index) const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_info.list)
  return list_.Get(index);
}
inline ::CCS_IMP::credit_line_model_detail_info* credit_detail_info::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_info.list)
  return list_.Mutable(index);
}
inline ::CCS_IMP::credit_line_model_detail_info* credit_detail_info::add_list() {
  // @@protoc_insertion_point(field_add:CCS_IMP.credit_detail_info.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_model_detail_info >&
credit_detail_info::list() const {
  // @@protoc_insertion_point(field_list:CCS_IMP.credit_detail_info.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_model_detail_info >*
credit_detail_info::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CCS_IMP.credit_detail_info.list)
  return &list_;
}

// -------------------------------------------------------------------

// credit_line_statistics_ask

// optional bytes credit_type = 1;
inline bool credit_line_statistics_ask::has_credit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_line_statistics_ask::set_has_credit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_line_statistics_ask::clear_has_credit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_line_statistics_ask::clear_credit_type() {
  if (credit_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_->clear();
  }
  clear_has_credit_type();
}
inline const ::std::string& credit_line_statistics_ask::credit_type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ask.credit_type)
  return *credit_type_;
}
inline void credit_line_statistics_ask::set_credit_type(const ::std::string& value) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_ask.credit_type)
}
inline void credit_line_statistics_ask::set_credit_type(const char* value) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_statistics_ask.credit_type)
}
inline void credit_line_statistics_ask::set_credit_type(const void* value, size_t size) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_statistics_ask.credit_type)
}
inline ::std::string* credit_line_statistics_ask::mutable_credit_type() {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ask.credit_type)
  return credit_type_;
}
inline ::std::string* credit_line_statistics_ask::release_credit_type() {
  clear_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = credit_type_;
    credit_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_statistics_ask::set_allocated_credit_type(::std::string* credit_type) {
  if (credit_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete credit_type_;
  }
  if (credit_type) {
    set_has_credit_type();
    credit_type_ = credit_type;
  } else {
    clear_has_credit_type();
    credit_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_ask.credit_type)
}

// optional bytes user_type = 2;
inline bool credit_line_statistics_ask::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_line_statistics_ask::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_line_statistics_ask::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_line_statistics_ask::clear_user_type() {
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_->clear();
  }
  clear_has_user_type();
}
inline const ::std::string& credit_line_statistics_ask::user_type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ask.user_type)
  return *user_type_;
}
inline void credit_line_statistics_ask::set_user_type(const ::std::string& value) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_ask.user_type)
}
inline void credit_line_statistics_ask::set_user_type(const char* value) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_statistics_ask.user_type)
}
inline void credit_line_statistics_ask::set_user_type(const void* value, size_t size) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_statistics_ask.user_type)
}
inline ::std::string* credit_line_statistics_ask::mutable_user_type() {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ask.user_type)
  return user_type_;
}
inline ::std::string* credit_line_statistics_ask::release_user_type() {
  clear_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_type_;
    user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_statistics_ask::set_allocated_user_type(::std::string* user_type) {
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_type_;
  }
  if (user_type) {
    set_has_user_type();
    user_type_ = user_type;
  } else {
    clear_has_user_type();
    user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_ask.user_type)
}

// optional bytes start_date = 3;
inline bool credit_line_statistics_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_line_statistics_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_line_statistics_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_line_statistics_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& credit_line_statistics_ask::start_date() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ask.start_date)
  return *start_date_;
}
inline void credit_line_statistics_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_ask.start_date)
}
inline void credit_line_statistics_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_statistics_ask.start_date)
}
inline void credit_line_statistics_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_statistics_ask.start_date)
}
inline ::std::string* credit_line_statistics_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ask.start_date)
  return start_date_;
}
inline ::std::string* credit_line_statistics_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_statistics_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_ask.start_date)
}

// optional bytes end_date = 4;
inline bool credit_line_statistics_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_line_statistics_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_line_statistics_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_line_statistics_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& credit_line_statistics_ask::end_date() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ask.end_date)
  return *end_date_;
}
inline void credit_line_statistics_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_ask.end_date)
}
inline void credit_line_statistics_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_statistics_ask.end_date)
}
inline void credit_line_statistics_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_statistics_ask.end_date)
}
inline ::std::string* credit_line_statistics_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ask.end_date)
  return end_date_;
}
inline ::std::string* credit_line_statistics_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_statistics_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_ask.end_date)
}

// optional bytes model_no = 5;
inline bool credit_line_statistics_ask::has_model_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void credit_line_statistics_ask::set_has_model_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void credit_line_statistics_ask::clear_has_model_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void credit_line_statistics_ask::clear_model_no() {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_->clear();
  }
  clear_has_model_no();
}
inline const ::std::string& credit_line_statistics_ask::model_no() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ask.model_no)
  return *model_no_;
}
inline void credit_line_statistics_ask::set_model_no(const ::std::string& value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_line_statistics_ask.model_no)
}
inline void credit_line_statistics_ask::set_model_no(const char* value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_line_statistics_ask.model_no)
}
inline void credit_line_statistics_ask::set_model_no(const void* value, size_t size) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_line_statistics_ask.model_no)
}
inline ::std::string* credit_line_statistics_ask::mutable_model_no() {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ask.model_no)
  return model_no_;
}
inline ::std::string* credit_line_statistics_ask::release_model_no() {
  clear_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_no_;
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_line_statistics_ask::set_allocated_model_no(::std::string* model_no) {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_no_;
  }
  if (model_no) {
    set_has_model_no();
    model_no_ = model_no;
  } else {
    clear_has_model_no();
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_ask.model_no)
}

// -------------------------------------------------------------------

// credit_line_statistics_ans

// repeated .CCS_IMP.credit_line_statistics_info list = 1;
inline int credit_line_statistics_ans::list_size() const {
  return list_.size();
}
inline void credit_line_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::CCS_IMP::credit_line_statistics_info& credit_line_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ans.list)
  return list_.Get(index);
}
inline ::CCS_IMP::credit_line_statistics_info* credit_line_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::CCS_IMP::credit_line_statistics_info* credit_line_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:CCS_IMP.credit_line_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_statistics_info >&
credit_line_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:CCS_IMP.credit_line_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_line_statistics_info >*
credit_line_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CCS_IMP.credit_line_statistics_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool credit_line_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_line_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_line_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_line_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_line_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_line_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_line_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_line_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_line_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_line_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_line_statistics_ans.error)
}

// -------------------------------------------------------------------

// credit_detail_ask

// optional bytes credit_type = 1;
inline bool credit_detail_ask::has_credit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_detail_ask::set_has_credit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_detail_ask::clear_has_credit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_detail_ask::clear_credit_type() {
  if (credit_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_->clear();
  }
  clear_has_credit_type();
}
inline const ::std::string& credit_detail_ask::credit_type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ask.credit_type)
  return *credit_type_;
}
inline void credit_detail_ask::set_credit_type(const ::std::string& value) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ask.credit_type)
}
inline void credit_detail_ask::set_credit_type(const char* value) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_ask.credit_type)
}
inline void credit_detail_ask::set_credit_type(const void* value, size_t size) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_ask.credit_type)
}
inline ::std::string* credit_detail_ask::mutable_credit_type() {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_ask.credit_type)
  return credit_type_;
}
inline ::std::string* credit_detail_ask::release_credit_type() {
  clear_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = credit_type_;
    credit_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_ask::set_allocated_credit_type(::std::string* credit_type) {
  if (credit_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete credit_type_;
  }
  if (credit_type) {
    set_has_credit_type();
    credit_type_ = credit_type;
  } else {
    clear_has_credit_type();
    credit_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_ask.credit_type)
}

// optional bytes user_type = 2;
inline bool credit_detail_ask::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_detail_ask::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_detail_ask::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_detail_ask::clear_user_type() {
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_->clear();
  }
  clear_has_user_type();
}
inline const ::std::string& credit_detail_ask::user_type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ask.user_type)
  return *user_type_;
}
inline void credit_detail_ask::set_user_type(const ::std::string& value) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ask.user_type)
}
inline void credit_detail_ask::set_user_type(const char* value) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_ask.user_type)
}
inline void credit_detail_ask::set_user_type(const void* value, size_t size) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_ask.user_type)
}
inline ::std::string* credit_detail_ask::mutable_user_type() {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_ask.user_type)
  return user_type_;
}
inline ::std::string* credit_detail_ask::release_user_type() {
  clear_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_type_;
    user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_ask::set_allocated_user_type(::std::string* user_type) {
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_type_;
  }
  if (user_type) {
    set_has_user_type();
    user_type_ = user_type;
  } else {
    clear_has_user_type();
    user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_ask.user_type)
}

// optional bytes start_date = 3;
inline bool credit_detail_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_detail_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_detail_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_detail_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& credit_detail_ask::start_date() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ask.start_date)
  return *start_date_;
}
inline void credit_detail_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ask.start_date)
}
inline void credit_detail_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_ask.start_date)
}
inline void credit_detail_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_ask.start_date)
}
inline ::std::string* credit_detail_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_ask.start_date)
  return start_date_;
}
inline ::std::string* credit_detail_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_ask.start_date)
}

// optional bytes end_date = 4;
inline bool credit_detail_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_detail_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_detail_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_detail_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& credit_detail_ask::end_date() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ask.end_date)
  return *end_date_;
}
inline void credit_detail_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ask.end_date)
}
inline void credit_detail_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_detail_ask.end_date)
}
inline void credit_detail_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_detail_ask.end_date)
}
inline ::std::string* credit_detail_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_ask.end_date)
  return end_date_;
}
inline ::std::string* credit_detail_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_detail_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_ask.end_date)
}

// optional int32 page_num = 5;
inline bool credit_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void credit_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void credit_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void credit_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 credit_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ask.page_num)
  return page_num_;
}
inline void credit_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ask.page_num)
}

// optional int32 cur_page = 6;
inline bool credit_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void credit_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000020u;
}
inline void credit_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void credit_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 credit_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ask.cur_page)
  return cur_page_;
}
inline void credit_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ask.cur_page)
}

// -------------------------------------------------------------------

// credit_detail_ans

// repeated .CCS_IMP.credit_detail_info list = 1;
inline int credit_detail_ans::list_size() const {
  return list_.size();
}
inline void credit_detail_ans::clear_list() {
  list_.Clear();
}
inline const ::CCS_IMP::credit_detail_info& credit_detail_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ans.list)
  return list_.Get(index);
}
inline ::CCS_IMP::credit_detail_info* credit_detail_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_ans.list)
  return list_.Mutable(index);
}
inline ::CCS_IMP::credit_detail_info* credit_detail_ans::add_list() {
  // @@protoc_insertion_point(field_add:CCS_IMP.credit_detail_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_detail_info >&
credit_detail_ans::list() const {
  // @@protoc_insertion_point(field_list:CCS_IMP.credit_detail_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_detail_info >*
credit_detail_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CCS_IMP.credit_detail_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool credit_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 credit_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ans.total_number)
  return total_number_;
}
inline void credit_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_detail_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool credit_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_detail_ans.error)
}

// -------------------------------------------------------------------

// credit_model_type_detail_info

// optional bytes type = 1;
inline bool credit_model_type_detail_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_model_type_detail_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_model_type_detail_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_model_type_detail_info::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& credit_model_type_detail_info::type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_type_detail_info.type)
  return *type_;
}
inline void credit_model_type_detail_info::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_type_detail_info.type)
}
inline void credit_model_type_detail_info::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_model_type_detail_info.type)
}
inline void credit_model_type_detail_info::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_model_type_detail_info.type)
}
inline ::std::string* credit_model_type_detail_info::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_type_detail_info.type)
  return type_;
}
inline ::std::string* credit_model_type_detail_info::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_model_type_detail_info::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_type_detail_info.type)
}

// optional float param1 = 2;
inline bool credit_model_type_detail_info::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_model_type_detail_info::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_model_type_detail_info::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_model_type_detail_info::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline float credit_model_type_detail_info::param1() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_type_detail_info.param1)
  return param1_;
}
inline void credit_model_type_detail_info::set_param1(float value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_type_detail_info.param1)
}

// optional float param2 = 3;
inline bool credit_model_type_detail_info::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_model_type_detail_info::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_model_type_detail_info::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_model_type_detail_info::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline float credit_model_type_detail_info::param2() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_type_detail_info.param2)
  return param2_;
}
inline void credit_model_type_detail_info::set_param2(float value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_type_detail_info.param2)
}

// optional float param3 = 4;
inline bool credit_model_type_detail_info::has_param3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_model_type_detail_info::set_has_param3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_model_type_detail_info::clear_has_param3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_model_type_detail_info::clear_param3() {
  param3_ = 0;
  clear_has_param3();
}
inline float credit_model_type_detail_info::param3() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_type_detail_info.param3)
  return param3_;
}
inline void credit_model_type_detail_info::set_param3(float value) {
  set_has_param3();
  param3_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_type_detail_info.param3)
}

// optional float param4 = 5;
inline bool credit_model_type_detail_info::has_param4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void credit_model_type_detail_info::set_has_param4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void credit_model_type_detail_info::clear_has_param4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void credit_model_type_detail_info::clear_param4() {
  param4_ = 0;
  clear_has_param4();
}
inline float credit_model_type_detail_info::param4() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_type_detail_info.param4)
  return param4_;
}
inline void credit_model_type_detail_info::set_param4(float value) {
  set_has_param4();
  param4_ = value;
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_type_detail_info.param4)
}

// -------------------------------------------------------------------

// credit_model_detail_info

// optional bytes credit_type = 1;
inline bool credit_model_detail_info::has_credit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_model_detail_info::set_has_credit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_model_detail_info::clear_has_credit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_model_detail_info::clear_credit_type() {
  if (credit_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_->clear();
  }
  clear_has_credit_type();
}
inline const ::std::string& credit_model_detail_info::credit_type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_info.credit_type)
  return *credit_type_;
}
inline void credit_model_detail_info::set_credit_type(const ::std::string& value) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_detail_info.credit_type)
}
inline void credit_model_detail_info::set_credit_type(const char* value) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_model_detail_info.credit_type)
}
inline void credit_model_detail_info::set_credit_type(const void* value, size_t size) {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  credit_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_model_detail_info.credit_type)
}
inline ::std::string* credit_model_detail_info::mutable_credit_type() {
  set_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    credit_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_info.credit_type)
  return credit_type_;
}
inline ::std::string* credit_model_detail_info::release_credit_type() {
  clear_has_credit_type();
  if (credit_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = credit_type_;
    credit_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_model_detail_info::set_allocated_credit_type(::std::string* credit_type) {
  if (credit_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete credit_type_;
  }
  if (credit_type) {
    set_has_credit_type();
    credit_type_ = credit_type;
  } else {
    clear_has_credit_type();
    credit_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_detail_info.credit_type)
}

// optional bytes user_type = 2;
inline bool credit_model_detail_info::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_model_detail_info::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_model_detail_info::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_model_detail_info::clear_user_type() {
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_->clear();
  }
  clear_has_user_type();
}
inline const ::std::string& credit_model_detail_info::user_type() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_info.user_type)
  return *user_type_;
}
inline void credit_model_detail_info::set_user_type(const ::std::string& value) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_detail_info.user_type)
}
inline void credit_model_detail_info::set_user_type(const char* value) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_model_detail_info.user_type)
}
inline void credit_model_detail_info::set_user_type(const void* value, size_t size) {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  user_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_model_detail_info.user_type)
}
inline ::std::string* credit_model_detail_info::mutable_user_type() {
  set_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_info.user_type)
  return user_type_;
}
inline ::std::string* credit_model_detail_info::release_user_type() {
  clear_has_user_type();
  if (user_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_type_;
    user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_model_detail_info::set_allocated_user_type(::std::string* user_type) {
  if (user_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_type_;
  }
  if (user_type) {
    set_has_user_type();
    user_type_ = user_type;
  } else {
    clear_has_user_type();
    user_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_detail_info.user_type)
}

// optional bytes model_no = 3;
inline bool credit_model_detail_info::has_model_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_model_detail_info::set_has_model_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_model_detail_info::clear_has_model_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_model_detail_info::clear_model_no() {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_->clear();
  }
  clear_has_model_no();
}
inline const ::std::string& credit_model_detail_info::model_no() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_info.model_no)
  return *model_no_;
}
inline void credit_model_detail_info::set_model_no(const ::std::string& value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set:CCS_IMP.credit_model_detail_info.model_no)
}
inline void credit_model_detail_info::set_model_no(const char* value) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:CCS_IMP.credit_model_detail_info.model_no)
}
inline void credit_model_detail_info::set_model_no(const void* value, size_t size) {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  model_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCS_IMP.credit_model_detail_info.model_no)
}
inline ::std::string* credit_model_detail_info::mutable_model_no() {
  set_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_info.model_no)
  return model_no_;
}
inline ::std::string* credit_model_detail_info::release_model_no() {
  clear_has_model_no();
  if (model_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_no_;
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_model_detail_info::set_allocated_model_no(::std::string* model_no) {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_no_;
  }
  if (model_no) {
    set_has_model_no();
    model_no_ = model_no;
  } else {
    clear_has_model_no();
    model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_detail_info.model_no)
}

// repeated .CCS_IMP.credit_model_type_detail_info list = 4;
inline int credit_model_detail_info::list_size() const {
  return list_.size();
}
inline void credit_model_detail_info::clear_list() {
  list_.Clear();
}
inline const ::CCS_IMP::credit_model_type_detail_info& credit_model_detail_info::list(int index) const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_info.list)
  return list_.Get(index);
}
inline ::CCS_IMP::credit_model_type_detail_info* credit_model_detail_info::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_info.list)
  return list_.Mutable(index);
}
inline ::CCS_IMP::credit_model_type_detail_info* credit_model_detail_info::add_list() {
  // @@protoc_insertion_point(field_add:CCS_IMP.credit_model_detail_info.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_type_detail_info >&
credit_model_detail_info::list() const {
  // @@protoc_insertion_point(field_list:CCS_IMP.credit_model_detail_info.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_type_detail_info >*
credit_model_detail_info::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CCS_IMP.credit_model_detail_info.list)
  return &list_;
}

// -------------------------------------------------------------------

// credit_model_detail_load_ask

// optional .CCS_IMP.credit_model_detail_info info = 1;
inline bool credit_model_detail_load_ask::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_model_detail_load_ask::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_model_detail_load_ask::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_model_detail_load_ask::clear_info() {
  if (info_ != NULL) info_->::CCS_IMP::credit_model_detail_info::Clear();
  clear_has_info();
}
inline const ::CCS_IMP::credit_model_detail_info& credit_model_detail_load_ask::info() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_load_ask.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::CCS_IMP::credit_model_detail_info* credit_model_detail_load_ask::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::CCS_IMP::credit_model_detail_info;
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_load_ask.info)
  return info_;
}
inline ::CCS_IMP::credit_model_detail_info* credit_model_detail_load_ask::release_info() {
  clear_has_info();
  ::CCS_IMP::credit_model_detail_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void credit_model_detail_load_ask::set_allocated_info(::CCS_IMP::credit_model_detail_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_detail_load_ask.info)
}

// -------------------------------------------------------------------

// credit_model_detail_load_ans

// repeated .CCS_IMP.credit_model_detail_info list = 1;
inline int credit_model_detail_load_ans::list_size() const {
  return list_.size();
}
inline void credit_model_detail_load_ans::clear_list() {
  list_.Clear();
}
inline const ::CCS_IMP::credit_model_detail_info& credit_model_detail_load_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_load_ans.list)
  return list_.Get(index);
}
inline ::CCS_IMP::credit_model_detail_info* credit_model_detail_load_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_load_ans.list)
  return list_.Mutable(index);
}
inline ::CCS_IMP::credit_model_detail_info* credit_model_detail_load_ans::add_list() {
  // @@protoc_insertion_point(field_add:CCS_IMP.credit_model_detail_load_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >&
credit_model_detail_load_ans::list() const {
  // @@protoc_insertion_point(field_list:CCS_IMP.credit_model_detail_load_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >*
credit_model_detail_load_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CCS_IMP.credit_model_detail_load_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool credit_model_detail_load_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_model_detail_load_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_model_detail_load_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_model_detail_load_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_model_detail_load_ans::error() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_load_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_model_detail_load_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_load_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_model_detail_load_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_model_detail_load_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_detail_load_ans.error)
}

// -------------------------------------------------------------------

// credit_model_detail_save_ask

// repeated .CCS_IMP.credit_model_detail_info list = 1;
inline int credit_model_detail_save_ask::list_size() const {
  return list_.size();
}
inline void credit_model_detail_save_ask::clear_list() {
  list_.Clear();
}
inline const ::CCS_IMP::credit_model_detail_info& credit_model_detail_save_ask::list(int index) const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_save_ask.list)
  return list_.Get(index);
}
inline ::CCS_IMP::credit_model_detail_info* credit_model_detail_save_ask::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_save_ask.list)
  return list_.Mutable(index);
}
inline ::CCS_IMP::credit_model_detail_info* credit_model_detail_save_ask::add_list() {
  // @@protoc_insertion_point(field_add:CCS_IMP.credit_model_detail_save_ask.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >&
credit_model_detail_save_ask::list() const {
  // @@protoc_insertion_point(field_list:CCS_IMP.credit_model_detail_save_ask.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCS_IMP::credit_model_detail_info >*
credit_model_detail_save_ask::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CCS_IMP.credit_model_detail_save_ask.list)
  return &list_;
}

// -------------------------------------------------------------------

// credit_model_detail_save_ans

// optional .common.errorinfo error = 1;
inline bool credit_model_detail_save_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_model_detail_save_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_model_detail_save_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_model_detail_save_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_model_detail_save_ans::error() const {
  // @@protoc_insertion_point(field_get:CCS_IMP.credit_model_detail_save_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_model_detail_save_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:CCS_IMP.credit_model_detail_save_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_model_detail_save_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_model_detail_save_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:CCS_IMP.credit_model_detail_save_ans.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CCS_IMP

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CCS_5fIMP_2eproto__INCLUDED
