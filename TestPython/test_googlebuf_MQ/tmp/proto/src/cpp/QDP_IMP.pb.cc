// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QDP_IMP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QDP_IMP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QDP_IMP {

namespace {

const ::google::protobuf::Descriptor* user_basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_data_statistics_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_data_statistics_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_data_detail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_data_detail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_monitoring_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_monitoring_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_monitoring_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_monitoring_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_monitoring_manage_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_monitoring_manage_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_monitoring_manage_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_monitoring_manage_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_data_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_data_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_data_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_data_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_data_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_data_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_data_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_data_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_conf_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_conf_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_conf_query_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_conf_query_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_conf_query_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_conf_query_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_conf_edit_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_conf_edit_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_conf_edit_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_conf_edit_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklis_statistics_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklis_statistics_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* data_sources_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  data_sources_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* data_sources_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  data_sources_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* data_sources_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  data_sources_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_ans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QDP_5fIMP_2eproto() {
  protobuf_AddDesc_QDP_5fIMP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QDP_IMP.proto");
  GOOGLE_CHECK(file != NULL);
  user_basic_info_descriptor_ = file->message_type(0);
  static const int user_basic_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, id_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, id_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, house_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, company_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, company_tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, contact_list_),
  };
  user_basic_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_info_descriptor_,
      user_basic_info::default_instance_,
      user_basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_info));
  blacklist_info_descriptor_ = file->message_type(1);
  static const int blacklist_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, user_basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, borrow_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, has_also_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, overdue_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, overdue_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, overdue_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, repayment_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, also_late_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, also_urgent_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, cheat_severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, data_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, data_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, record_date_),
  };
  blacklist_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_info_descriptor_,
      blacklist_info::default_instance_,
      blacklist_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_info));
  reptile_data_statistics_info_descriptor_ = file->message_type(2);
  static const int reptile_data_statistics_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, website_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, crawl_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, modify_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, add_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, access_page_total_),
  };
  reptile_data_statistics_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_data_statistics_info_descriptor_,
      reptile_data_statistics_info::default_instance_,
      reptile_data_statistics_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_data_statistics_info));
  reptile_data_detail_info_descriptor_ = file->message_type(3);
  static const int reptile_data_detail_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_info, get_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_info, modify_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_info, add_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_info, access_page_total_),
  };
  reptile_data_detail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_data_detail_info_descriptor_,
      reptile_data_detail_info::default_instance_,
      reptile_data_detail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_data_detail_info));
  reptile_basic_info_descriptor_ = file->message_type(4);
  static const int reptile_basic_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, website_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, crawl_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, reptile_status_),
  };
  reptile_basic_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_basic_info_descriptor_,
      reptile_basic_info::default_instance_,
      reptile_basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_basic_info));
  reptile_monitoring_ask_descriptor_ = file->message_type(5);
  static const int reptile_monitoring_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ask, ask_header_),
  };
  reptile_monitoring_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_monitoring_ask_descriptor_,
      reptile_monitoring_ask::default_instance_,
      reptile_monitoring_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_monitoring_ask));
  reptile_monitoring_ans_descriptor_ = file->message_type(6);
  static const int reptile_monitoring_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ans, error_),
  };
  reptile_monitoring_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_monitoring_ans_descriptor_,
      reptile_monitoring_ans::default_instance_,
      reptile_monitoring_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_monitoring_ans));
  reptile_monitoring_manage_ask_descriptor_ = file->message_type(7);
  static const int reptile_monitoring_manage_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ask, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ask, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ask, ask_header_),
  };
  reptile_monitoring_manage_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_monitoring_manage_ask_descriptor_,
      reptile_monitoring_manage_ask::default_instance_,
      reptile_monitoring_manage_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_monitoring_manage_ask));
  reptile_monitoring_manage_ans_descriptor_ = file->message_type(8);
  static const int reptile_monitoring_manage_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ans, error_),
  };
  reptile_monitoring_manage_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_monitoring_manage_ans_descriptor_,
      reptile_monitoring_manage_ans::default_instance_,
      reptile_monitoring_manage_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_monitoring_manage_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_monitoring_manage_ans));
  reptile_data_statistics_ask_descriptor_ = file->message_type(9);
  static const int reptile_data_statistics_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ask, ask_header_),
  };
  reptile_data_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_data_statistics_ask_descriptor_,
      reptile_data_statistics_ask::default_instance_,
      reptile_data_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_data_statistics_ask));
  reptile_data_statistics_ans_descriptor_ = file->message_type(10);
  static const int reptile_data_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ans, error_),
  };
  reptile_data_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_data_statistics_ans_descriptor_,
      reptile_data_statistics_ans::default_instance_,
      reptile_data_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_data_statistics_ans));
  reptile_data_detail_ask_descriptor_ = file->message_type(11);
  static const int reptile_data_detail_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ask, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ask, ask_header_),
  };
  reptile_data_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_data_detail_ask_descriptor_,
      reptile_data_detail_ask::default_instance_,
      reptile_data_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_data_detail_ask));
  reptile_data_detail_ans_descriptor_ = file->message_type(12);
  static const int reptile_data_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ans, error_),
  };
  reptile_data_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_data_detail_ans_descriptor_,
      reptile_data_detail_ans::default_instance_,
      reptile_data_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_data_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_data_detail_ans));
  reptile_conf_info_descriptor_ = file->message_type(13);
  static const int reptile_conf_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_info, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_info, start_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_info, get_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_info, reptile_desc_),
  };
  reptile_conf_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_conf_info_descriptor_,
      reptile_conf_info::default_instance_,
      reptile_conf_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_conf_info));
  reptile_conf_query_ask_descriptor_ = file->message_type(14);
  static const int reptile_conf_query_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ask, ask_header_),
  };
  reptile_conf_query_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_conf_query_ask_descriptor_,
      reptile_conf_query_ask::default_instance_,
      reptile_conf_query_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_conf_query_ask));
  reptile_conf_query_ans_descriptor_ = file->message_type(15);
  static const int reptile_conf_query_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ans, error_),
  };
  reptile_conf_query_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_conf_query_ans_descriptor_,
      reptile_conf_query_ans::default_instance_,
      reptile_conf_query_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_query_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_conf_query_ans));
  reptile_conf_edit_ask_descriptor_ = file->message_type(16);
  static const int reptile_conf_edit_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ask, reptile_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ask, ask_header_),
  };
  reptile_conf_edit_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_conf_edit_ask_descriptor_,
      reptile_conf_edit_ask::default_instance_,
      reptile_conf_edit_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_conf_edit_ask));
  reptile_conf_edit_ans_descriptor_ = file->message_type(17);
  static const int reptile_conf_edit_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ans, error_),
  };
  reptile_conf_edit_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_conf_edit_ans_descriptor_,
      reptile_conf_edit_ans::default_instance_,
      reptile_conf_edit_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_conf_edit_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_conf_edit_ans));
  blacklist_statistics_ask_descriptor_ = file->message_type(18);
  static const int blacklist_statistics_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ask, ask_header_),
  };
  blacklist_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_statistics_ask_descriptor_,
      blacklist_statistics_ask::default_instance_,
      blacklist_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_statistics_ask));
  blacklis_statistics_info_descriptor_ = file->message_type(19);
  static const int blacklis_statistics_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklis_statistics_info, website_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklis_statistics_info, total_number_),
  };
  blacklis_statistics_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklis_statistics_info_descriptor_,
      blacklis_statistics_info::default_instance_,
      blacklis_statistics_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklis_statistics_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklis_statistics_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklis_statistics_info));
  blacklist_statistics_ans_descriptor_ = file->message_type(20);
  static const int blacklist_statistics_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ans, error_),
  };
  blacklist_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_statistics_ans_descriptor_,
      blacklist_statistics_ans::default_instance_,
      blacklist_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_statistics_ans));
  data_sources_info_descriptor_ = file->message_type(21);
  static const int data_sources_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, website_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, website_name_),
  };
  data_sources_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      data_sources_info_descriptor_,
      data_sources_info::default_instance_,
      data_sources_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(data_sources_info));
  data_sources_ask_descriptor_ = file->message_type(22);
  static const int data_sources_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ask, ask_header_),
  };
  data_sources_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      data_sources_ask_descriptor_,
      data_sources_ask::default_instance_,
      data_sources_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(data_sources_ask));
  data_sources_ans_descriptor_ = file->message_type(23);
  static const int data_sources_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ans, error_),
  };
  data_sources_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      data_sources_ans_descriptor_,
      data_sources_ans::default_instance_,
      data_sources_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(data_sources_ans));
  blacklist_ask_descriptor_ = file->message_type(24);
  static const int blacklist_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, website_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, ask_header_),
  };
  blacklist_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_ask_descriptor_,
      blacklist_ask::default_instance_,
      blacklist_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_ask));
  blacklist_ans_descriptor_ = file->message_type(25);
  static const int blacklist_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ans, error_),
  };
  blacklist_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_ans_descriptor_,
      blacklist_ans::default_instance_,
      blacklist_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_ans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QDP_5fIMP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_info_descriptor_, &user_basic_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_info_descriptor_, &blacklist_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_data_statistics_info_descriptor_, &reptile_data_statistics_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_data_detail_info_descriptor_, &reptile_data_detail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_basic_info_descriptor_, &reptile_basic_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_monitoring_ask_descriptor_, &reptile_monitoring_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_monitoring_ans_descriptor_, &reptile_monitoring_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_monitoring_manage_ask_descriptor_, &reptile_monitoring_manage_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_monitoring_manage_ans_descriptor_, &reptile_monitoring_manage_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_data_statistics_ask_descriptor_, &reptile_data_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_data_statistics_ans_descriptor_, &reptile_data_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_data_detail_ask_descriptor_, &reptile_data_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_data_detail_ans_descriptor_, &reptile_data_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_conf_info_descriptor_, &reptile_conf_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_conf_query_ask_descriptor_, &reptile_conf_query_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_conf_query_ans_descriptor_, &reptile_conf_query_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_conf_edit_ask_descriptor_, &reptile_conf_edit_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_conf_edit_ans_descriptor_, &reptile_conf_edit_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_statistics_ask_descriptor_, &blacklist_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklis_statistics_info_descriptor_, &blacklis_statistics_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_statistics_ans_descriptor_, &blacklist_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    data_sources_info_descriptor_, &data_sources_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    data_sources_ask_descriptor_, &data_sources_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    data_sources_ans_descriptor_, &data_sources_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_ask_descriptor_, &blacklist_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_ans_descriptor_, &blacklist_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QDP_5fIMP_2eproto() {
  delete user_basic_info::default_instance_;
  delete user_basic_info_reflection_;
  delete blacklist_info::default_instance_;
  delete blacklist_info_reflection_;
  delete reptile_data_statistics_info::default_instance_;
  delete reptile_data_statistics_info_reflection_;
  delete reptile_data_detail_info::default_instance_;
  delete reptile_data_detail_info_reflection_;
  delete reptile_basic_info::default_instance_;
  delete reptile_basic_info_reflection_;
  delete reptile_monitoring_ask::default_instance_;
  delete reptile_monitoring_ask_reflection_;
  delete reptile_monitoring_ans::default_instance_;
  delete reptile_monitoring_ans_reflection_;
  delete reptile_monitoring_manage_ask::default_instance_;
  delete reptile_monitoring_manage_ask_reflection_;
  delete reptile_monitoring_manage_ans::default_instance_;
  delete reptile_monitoring_manage_ans_reflection_;
  delete reptile_data_statistics_ask::default_instance_;
  delete reptile_data_statistics_ask_reflection_;
  delete reptile_data_statistics_ans::default_instance_;
  delete reptile_data_statistics_ans_reflection_;
  delete reptile_data_detail_ask::default_instance_;
  delete reptile_data_detail_ask_reflection_;
  delete reptile_data_detail_ans::default_instance_;
  delete reptile_data_detail_ans_reflection_;
  delete reptile_conf_info::default_instance_;
  delete reptile_conf_info_reflection_;
  delete reptile_conf_query_ask::default_instance_;
  delete reptile_conf_query_ask_reflection_;
  delete reptile_conf_query_ans::default_instance_;
  delete reptile_conf_query_ans_reflection_;
  delete reptile_conf_edit_ask::default_instance_;
  delete reptile_conf_edit_ask_reflection_;
  delete reptile_conf_edit_ans::default_instance_;
  delete reptile_conf_edit_ans_reflection_;
  delete blacklist_statistics_ask::default_instance_;
  delete blacklist_statistics_ask_reflection_;
  delete blacklis_statistics_info::default_instance_;
  delete blacklis_statistics_info_reflection_;
  delete blacklist_statistics_ans::default_instance_;
  delete blacklist_statistics_ans_reflection_;
  delete data_sources_info::default_instance_;
  delete data_sources_info_reflection_;
  delete data_sources_ask::default_instance_;
  delete data_sources_ask_reflection_;
  delete data_sources_ans::default_instance_;
  delete data_sources_ans_reflection_;
  delete blacklist_ask::default_instance_;
  delete blacklist_ask_reflection_;
  delete blacklist_ans::default_instance_;
  delete blacklist_ans_reflection_;
}

void protobuf_AddDesc_QDP_5fIMP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rQDP_IMP.proto\022\007QDP_IMP\032\014common.proto\"\315"
    "\002\n\017user_basic_info\022\017\n\007user_id\030\001 \001(\014\022\021\n\tr"
    "eal_name\030\002 \001(\014\022\024\n\014mobile_phone\030\003 \001(\014\022\013\n\003"
    "age\030\004 \001(\005\022\030\n\003sex\030\005 \001(\0162\013.common.sex\022%\n\007i"
    "d_type\030\006 \001(\0162\024.common.user_id_type\022\r\n\005id"
    "_no\030\007 \001(\014\022\017\n\007id_addr\030\010 \001(\014\022\r\n\005email\030\t \001("
    "\014\022\022\n\nhouse_addr\030\n \001(\014\022\024\n\014company_name\030\013 "
    "\001(\014\022\024\n\014company_addr\030\014 \001(\014\022\023\n\013company_tel"
    "\030\r \001(\014\022.\n\014contact_list\030\016 \003(\0132\030.common.re"
    "lation_contact\"\322\002\n\016blacklist_info\0221\n\017use"
    "r_basic_info\030\001 \001(\0132\030.QDP_IMP.user_basic_"
    "info\022\024\n\014borrow_total\030\002 \001(\001\022\026\n\016has_also_t"
    "otal\030\003 \001(\001\022\025\n\roverdue_count\030\004 \001(\005\022\025\n\rove"
    "rdue_total\030\005 \001(\001\022\023\n\013overdue_day\030\006 \001(\005\022\027\n"
    "\017repayment_state\030\007 \001(\014\022\025\n\ralso_late_fee\030"
    "\010 \001(\001\022\027\n\017also_urgent_fee\030\t \001(\001\022\026\n\016cheat_"
    "severity\030\n \001(\014\022\024\n\014data_sources\030\013 \001(\014\022\020\n\010"
    "data_url\030\014 \001(\014\022\023\n\013record_date\030\r \001(\014\"\240\001\n\034"
    "reptile_data_statistics_info\022\022\n\nreptile_"
    "id\030\001 \001(\005\022\024\n\014website_name\030\002 \001(\014\022\022\n\ncrawl_"
    "site\030\003 \001(\014\022\024\n\014modify_total\030\004 \001(\005\022\021\n\tadd_"
    "total\030\005 \001(\005\022\031\n\021access_page_total\030\006 \001(\005\"p"
    "\n\030reptile_data_detail_info\022\020\n\010get_date\030\001"
    " \001(\014\022\024\n\014modify_total\030\002 \001(\005\022\021\n\tadd_total\030"
    "\003 \001(\005\022\031\n\021access_page_total\030\004 \001(\005\"\210\001\n\022rep"
    "tile_basic_info\022\022\n\nreptile_id\030\001 \001(\005\022\024\n\014w"
    "ebsite_name\030\002 \001(\014\022\022\n\ncrawl_site\030\003 \001(\014\022\n\n"
    "\002ip\030\004 \001(\014\022\020\n\010schedule\030\005 \001(\014\022\026\n\016reptile_s"
    "tatus\030\006 \001(\014\"G\n\026reptile_monitoring_ask\022-\n"
    "\nask_header\030\001 \001(\0132\031.common.common_ask_he"
    "ader\"e\n\026reptile_monitoring_ans\022)\n\004list\030\001"
    " \003(\0132\033.QDP_IMP.reptile_basic_info\022 \n\005err"
    "or\030\002 \001(\0132\021.common.errorinfo\"u\n\035reptile_m"
    "onitoring_manage_ask\022\022\n\nreptile_id\030\001 \001(\005"
    "\022\021\n\toperation\030\002 \001(\005\022-\n\nask_header\030\003 \001(\0132"
    "\031.common.common_ask_header\"A\n\035reptile_mo"
    "nitoring_manage_ans\022 \n\005error\030\001 \001(\0132\021.com"
    "mon.errorinfo\"L\n\033reptile_data_statistics"
    "_ask\022-\n\nask_header\030\001 \001(\0132\031.common.common"
    "_ask_header\"t\n\033reptile_data_statistics_a"
    "ns\0223\n\004list\030\001 \003(\0132%.QDP_IMP.reptile_data_"
    "statistics_info\022 \n\005error\030\002 \001(\0132\021.common."
    "errorinfo\"\200\001\n\027reptile_data_detail_ask\022\022\n"
    "\nreptile_id\030\001 \001(\005\022\020\n\010page_num\030\002 \001(\005\022\020\n\010c"
    "ur_page\030\003 \001(\005\022-\n\nask_header\030\004 \001(\0132\031.comm"
    "on.common_ask_header\"\202\001\n\027reptile_data_de"
    "tail_ans\022/\n\004list\030\001 \003(\0132!.QDP_IMP.reptile"
    "_data_detail_info\022\024\n\014total_number\030\002 \001(\005\022"
    " \n\005error\030\003 \001(\0132\021.common.errorinfo\"k\n\021rep"
    "tile_conf_info\022\022\n\nreptile_id\030\001 \001(\005\022\026\n\016st"
    "art_interval\030\002 \001(\005\022\024\n\014get_interval\030\003 \001(\005"
    "\022\024\n\014reptile_desc\030\004 \001(\014\"k\n\026reptile_conf_q"
    "uery_ask\022\020\n\010page_num\030\001 \001(\005\022\020\n\010cur_page\030\002"
    " \001(\005\022-\n\nask_header\030\003 \001(\0132\031.common.common"
    "_ask_header\"z\n\026reptile_conf_query_ans\022(\n"
    "\004list\030\001 \003(\0132\032.QDP_IMP.reptile_conf_info\022"
    "\024\n\014total_number\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.c"
    "ommon.errorinfo\"x\n\025reptile_conf_edit_ask"
    "\0220\n\014reptile_conf\030\001 \001(\0132\032.QDP_IMP.reptile"
    "_conf_info\022-\n\nask_header\030\002 \001(\0132\031.common."
    "common_ask_header\"9\n\025reptile_conf_edit_a"
    "ns\022 \n\005error\030\001 \001(\0132\021.common.errorinfo\"o\n\030"
    "blacklist_statistics_ask\022\022\n\nstart_date\030\001"
    " \001(\014\022\020\n\010end_date\030\002 \001(\014\022-\n\nask_header\030\003 \001"
    "(\0132\031.common.common_ask_header\"F\n\030blackli"
    "s_statistics_info\022\024\n\014website_name\030\001 \001(\014\022"
    "\024\n\014total_number\030\002 \001(\005\"\203\001\n\030blacklist_stat"
    "istics_ans\022/\n\004list\030\001 \003(\0132!.QDP_IMP.black"
    "lis_statistics_info\022\024\n\014total_number\030\002 \001("
    "\005\022 \n\005error\030\003 \001(\0132\021.common.errorinfo\"=\n\021d"
    "ata_sources_info\022\022\n\nwebsite_id\030\001 \001(\014\022\024\n\014"
    "website_name\030\002 \001(\014\"A\n\020data_sources_ask\022-"
    "\n\nask_header\030\001 \001(\0132\031.common.common_ask_h"
    "eader\"^\n\020data_sources_ans\022(\n\004list\030\001 \003(\0132"
    "\032.QDP_IMP.data_sources_info\022 \n\005error\030\002 \001"
    "(\0132\021.common.errorinfo\"\234\001\n\rblacklist_ask\022"
    "\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\022\n"
    "\nwebsite_id\030\003 \001(\014\022\020\n\010page_num\030\004 \001(\005\022\020\n\010c"
    "ur_page\030\005 \001(\005\022-\n\nask_header\030\006 \001(\0132\031.comm"
    "on.common_ask_header\"n\n\rblacklist_ans\022%\n"
    "\004list\030\001 \003(\0132\027.QDP_IMP.blacklist_info\022\024\n\014"
    "total_number\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.comm"
    "on.errorinfo", 3292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QDP_IMP.proto", &protobuf_RegisterTypes);
  user_basic_info::default_instance_ = new user_basic_info();
  blacklist_info::default_instance_ = new blacklist_info();
  reptile_data_statistics_info::default_instance_ = new reptile_data_statistics_info();
  reptile_data_detail_info::default_instance_ = new reptile_data_detail_info();
  reptile_basic_info::default_instance_ = new reptile_basic_info();
  reptile_monitoring_ask::default_instance_ = new reptile_monitoring_ask();
  reptile_monitoring_ans::default_instance_ = new reptile_monitoring_ans();
  reptile_monitoring_manage_ask::default_instance_ = new reptile_monitoring_manage_ask();
  reptile_monitoring_manage_ans::default_instance_ = new reptile_monitoring_manage_ans();
  reptile_data_statistics_ask::default_instance_ = new reptile_data_statistics_ask();
  reptile_data_statistics_ans::default_instance_ = new reptile_data_statistics_ans();
  reptile_data_detail_ask::default_instance_ = new reptile_data_detail_ask();
  reptile_data_detail_ans::default_instance_ = new reptile_data_detail_ans();
  reptile_conf_info::default_instance_ = new reptile_conf_info();
  reptile_conf_query_ask::default_instance_ = new reptile_conf_query_ask();
  reptile_conf_query_ans::default_instance_ = new reptile_conf_query_ans();
  reptile_conf_edit_ask::default_instance_ = new reptile_conf_edit_ask();
  reptile_conf_edit_ans::default_instance_ = new reptile_conf_edit_ans();
  blacklist_statistics_ask::default_instance_ = new blacklist_statistics_ask();
  blacklis_statistics_info::default_instance_ = new blacklis_statistics_info();
  blacklist_statistics_ans::default_instance_ = new blacklist_statistics_ans();
  data_sources_info::default_instance_ = new data_sources_info();
  data_sources_ask::default_instance_ = new data_sources_ask();
  data_sources_ans::default_instance_ = new data_sources_ans();
  blacklist_ask::default_instance_ = new blacklist_ask();
  blacklist_ans::default_instance_ = new blacklist_ans();
  user_basic_info::default_instance_->InitAsDefaultInstance();
  blacklist_info::default_instance_->InitAsDefaultInstance();
  reptile_data_statistics_info::default_instance_->InitAsDefaultInstance();
  reptile_data_detail_info::default_instance_->InitAsDefaultInstance();
  reptile_basic_info::default_instance_->InitAsDefaultInstance();
  reptile_monitoring_ask::default_instance_->InitAsDefaultInstance();
  reptile_monitoring_ans::default_instance_->InitAsDefaultInstance();
  reptile_monitoring_manage_ask::default_instance_->InitAsDefaultInstance();
  reptile_monitoring_manage_ans::default_instance_->InitAsDefaultInstance();
  reptile_data_statistics_ask::default_instance_->InitAsDefaultInstance();
  reptile_data_statistics_ans::default_instance_->InitAsDefaultInstance();
  reptile_data_detail_ask::default_instance_->InitAsDefaultInstance();
  reptile_data_detail_ans::default_instance_->InitAsDefaultInstance();
  reptile_conf_info::default_instance_->InitAsDefaultInstance();
  reptile_conf_query_ask::default_instance_->InitAsDefaultInstance();
  reptile_conf_query_ans::default_instance_->InitAsDefaultInstance();
  reptile_conf_edit_ask::default_instance_->InitAsDefaultInstance();
  reptile_conf_edit_ans::default_instance_->InitAsDefaultInstance();
  blacklist_statistics_ask::default_instance_->InitAsDefaultInstance();
  blacklis_statistics_info::default_instance_->InitAsDefaultInstance();
  blacklist_statistics_ans::default_instance_->InitAsDefaultInstance();
  data_sources_info::default_instance_->InitAsDefaultInstance();
  data_sources_ask::default_instance_->InitAsDefaultInstance();
  data_sources_ans::default_instance_->InitAsDefaultInstance();
  blacklist_ask::default_instance_->InitAsDefaultInstance();
  blacklist_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QDP_5fIMP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QDP_5fIMP_2eproto {
  StaticDescriptorInitializer_QDP_5fIMP_2eproto() {
    protobuf_AddDesc_QDP_5fIMP_2eproto();
  }
} static_descriptor_initializer_QDP_5fIMP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int user_basic_info::kUserIdFieldNumber;
const int user_basic_info::kRealNameFieldNumber;
const int user_basic_info::kMobilePhoneFieldNumber;
const int user_basic_info::kAgeFieldNumber;
const int user_basic_info::kSexFieldNumber;
const int user_basic_info::kIdTypeFieldNumber;
const int user_basic_info::kIdNoFieldNumber;
const int user_basic_info::kIdAddrFieldNumber;
const int user_basic_info::kEmailFieldNumber;
const int user_basic_info::kHouseAddrFieldNumber;
const int user_basic_info::kCompanyNameFieldNumber;
const int user_basic_info::kCompanyAddrFieldNumber;
const int user_basic_info::kCompanyTelFieldNumber;
const int user_basic_info::kContactListFieldNumber;
#endif  // !_MSC_VER

user_basic_info::user_basic_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.user_basic_info)
}

void user_basic_info::InitAsDefaultInstance() {
}

user_basic_info::user_basic_info(const user_basic_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.user_basic_info)
}

void user_basic_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  sex_ = 1;
  id_type_ = 0;
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  house_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_info::~user_basic_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.user_basic_info)
  SharedDtor();
}

void user_basic_info::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_addr_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (house_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete house_addr_;
  }
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (company_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_addr_;
  }
  if (company_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_tel_;
  }
  if (this != default_instance_) {
  }
}

void user_basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_info_descriptor_;
}

const user_basic_info& user_basic_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

user_basic_info* user_basic_info::default_instance_ = NULL;

user_basic_info* user_basic_info::New() const {
  return new user_basic_info;
}

void user_basic_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    age_ = 0;
    sex_ = 1;
    id_type_ = 0;
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_id_addr()) {
      if (id_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_addr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_house_addr()) {
      if (house_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        house_addr_->clear();
      }
    }
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_name_->clear();
      }
    }
    if (has_company_addr()) {
      if (company_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_addr_->clear();
      }
    }
    if (has_company_tel()) {
      if (company_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_tel_->clear();
      }
    }
  }
  contact_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.user_basic_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 2;
      case 2: {
        if (tag == 18) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_age;
        break;
      }

      // optional int32 age = 4;
      case 4: {
        if (tag == 32) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id_type;
        break;
      }

      // optional .common.user_id_type id_type = 6;
      case 6: {
        if (tag == 48) {
         parse_id_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::user_id_type_IsValid(value)) {
            set_id_type(static_cast< ::common::user_id_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 7;
      case 7: {
        if (tag == 58) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_id_addr;
        break;
      }

      // optional bytes id_addr = 8;
      case 8: {
        if (tag == 66) {
         parse_id_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_email;
        break;
      }

      // optional bytes email = 9;
      case 9: {
        if (tag == 74) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_house_addr;
        break;
      }

      // optional bytes house_addr = 10;
      case 10: {
        if (tag == 82) {
         parse_house_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_house_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_company_name;
        break;
      }

      // optional bytes company_name = 11;
      case 11: {
        if (tag == 90) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_company_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_company_addr;
        break;
      }

      // optional bytes company_addr = 12;
      case 12: {
        if (tag == 98) {
         parse_company_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_company_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_company_tel;
        break;
      }

      // optional bytes company_tel = 13;
      case 13: {
        if (tag == 106) {
         parse_company_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_company_tel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_contact_list;
        break;
      }

      // repeated .common.relation_contact contact_list = 14;
      case 14: {
        if (tag == 114) {
         parse_contact_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_contact_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.user_basic_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.user_basic_info)
  return false;
#undef DO_
}

void user_basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.user_basic_info)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->real_name(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // optional int32 age = 4;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->age(), output);
  }

  // optional .common.sex sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  // optional .common.user_id_type id_type = 6;
  if (has_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->id_type(), output);
  }

  // optional bytes id_no = 7;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->id_no(), output);
  }

  // optional bytes id_addr = 8;
  if (has_id_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->id_addr(), output);
  }

  // optional bytes email = 9;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->email(), output);
  }

  // optional bytes house_addr = 10;
  if (has_house_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->house_addr(), output);
  }

  // optional bytes company_name = 11;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->company_name(), output);
  }

  // optional bytes company_addr = 12;
  if (has_company_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->company_addr(), output);
  }

  // optional bytes company_tel = 13;
  if (has_company_tel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->company_tel(), output);
  }

  // repeated .common.relation_contact contact_list = 14;
  for (int i = 0; i < this->contact_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->contact_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.user_basic_info)
}

::google::protobuf::uint8* user_basic_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.user_basic_info)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->real_name(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // optional int32 age = 4;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->age(), target);
  }

  // optional .common.sex sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  // optional .common.user_id_type id_type = 6;
  if (has_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->id_type(), target);
  }

  // optional bytes id_no = 7;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->id_no(), target);
  }

  // optional bytes id_addr = 8;
  if (has_id_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->id_addr(), target);
  }

  // optional bytes email = 9;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->email(), target);
  }

  // optional bytes house_addr = 10;
  if (has_house_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->house_addr(), target);
  }

  // optional bytes company_name = 11;
  if (has_company_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->company_name(), target);
  }

  // optional bytes company_addr = 12;
  if (has_company_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->company_addr(), target);
  }

  // optional bytes company_tel = 13;
  if (has_company_tel()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->company_tel(), target);
  }

  // repeated .common.relation_contact contact_list = 14;
  for (int i = 0; i < this->contact_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->contact_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.user_basic_info)
  return target;
}

int user_basic_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes real_name = 2;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional int32 age = 4;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional .common.sex sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional .common.user_id_type id_type = 6;
    if (has_id_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id_type());
    }

    // optional bytes id_no = 7;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional bytes id_addr = 8;
    if (has_id_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_addr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes email = 9;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

    // optional bytes house_addr = 10;
    if (has_house_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->house_addr());
    }

    // optional bytes company_name = 11;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->company_name());
    }

    // optional bytes company_addr = 12;
    if (has_company_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->company_addr());
    }

    // optional bytes company_tel = 13;
    if (has_company_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->company_tel());
    }

  }
  // repeated .common.relation_contact contact_list = 14;
  total_size += 1 * this->contact_list_size();
  for (int i = 0; i < this->contact_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_info::MergeFrom(const user_basic_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_list_.MergeFrom(from.contact_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_id_type()) {
      set_id_type(from.id_type());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_id_addr()) {
      set_id_addr(from.id_addr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_house_addr()) {
      set_house_addr(from.house_addr());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_company_addr()) {
      set_company_addr(from.company_addr());
    }
    if (from.has_company_tel()) {
      set_company_tel(from.company_tel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_info::CopyFrom(const user_basic_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_info::IsInitialized() const {

  return true;
}

void user_basic_info::Swap(user_basic_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(age_, other->age_);
    std::swap(sex_, other->sex_);
    std::swap(id_type_, other->id_type_);
    std::swap(id_no_, other->id_no_);
    std::swap(id_addr_, other->id_addr_);
    std::swap(email_, other->email_);
    std::swap(house_addr_, other->house_addr_);
    std::swap(company_name_, other->company_name_);
    std::swap(company_addr_, other->company_addr_);
    std::swap(company_tel_, other->company_tel_);
    contact_list_.Swap(&other->contact_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_info_descriptor_;
  metadata.reflection = user_basic_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_info::kUserBasicInfoFieldNumber;
const int blacklist_info::kBorrowTotalFieldNumber;
const int blacklist_info::kHasAlsoTotalFieldNumber;
const int blacklist_info::kOverdueCountFieldNumber;
const int blacklist_info::kOverdueTotalFieldNumber;
const int blacklist_info::kOverdueDayFieldNumber;
const int blacklist_info::kRepaymentStateFieldNumber;
const int blacklist_info::kAlsoLateFeeFieldNumber;
const int blacklist_info::kAlsoUrgentFeeFieldNumber;
const int blacklist_info::kCheatSeverityFieldNumber;
const int blacklist_info::kDataSourcesFieldNumber;
const int blacklist_info::kDataUrlFieldNumber;
const int blacklist_info::kRecordDateFieldNumber;
#endif  // !_MSC_VER

blacklist_info::blacklist_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.blacklist_info)
}

void blacklist_info::InitAsDefaultInstance() {
  user_basic_info_ = const_cast< ::QDP_IMP::user_basic_info*>(&::QDP_IMP::user_basic_info::default_instance());
}

blacklist_info::blacklist_info(const blacklist_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.blacklist_info)
}

void blacklist_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_basic_info_ = NULL;
  borrow_total_ = 0;
  has_also_total_ = 0;
  overdue_count_ = 0;
  overdue_total_ = 0;
  overdue_day_ = 0;
  repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  also_late_fee_ = 0;
  also_urgent_fee_ = 0;
  cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_info::~blacklist_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.blacklist_info)
  SharedDtor();
}

void blacklist_info::SharedDtor() {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_state_;
  }
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cheat_severity_;
  }
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_sources_;
  }
  if (data_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_url_;
  }
  if (record_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_date_;
  }
  if (this != default_instance_) {
    delete user_basic_info_;
  }
}

void blacklist_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_info_descriptor_;
}

const blacklist_info& blacklist_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

blacklist_info* blacklist_info::default_instance_ = NULL;

blacklist_info* blacklist_info::New() const {
  return new blacklist_info;
}

void blacklist_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<blacklist_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(borrow_total_, overdue_day_);
    if (has_user_basic_info()) {
      if (user_basic_info_ != NULL) user_basic_info_->::QDP_IMP::user_basic_info::Clear();
    }
    if (has_repayment_state()) {
      if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repayment_state_->clear();
      }
    }
    also_late_fee_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936) {
    also_urgent_fee_ = 0;
    if (has_cheat_severity()) {
      if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cheat_severity_->clear();
      }
    }
    if (has_data_sources()) {
      if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_sources_->clear();
      }
    }
    if (has_data_url()) {
      if (data_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_url_->clear();
      }
    }
    if (has_record_date()) {
      if (record_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        record_date_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.blacklist_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QDP_IMP.user_basic_info user_basic_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_basic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_borrow_total;
        break;
      }

      // optional double borrow_total = 2;
      case 2: {
        if (tag == 17) {
         parse_borrow_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &borrow_total_)));
          set_has_borrow_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_has_also_total;
        break;
      }

      // optional double has_also_total = 3;
      case 3: {
        if (tag == 25) {
         parse_has_also_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_also_total_)));
          set_has_has_also_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overdue_count;
        break;
      }

      // optional int32 overdue_count = 4;
      case 4: {
        if (tag == 32) {
         parse_overdue_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_count_)));
          set_has_overdue_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_overdue_total;
        break;
      }

      // optional double overdue_total = 5;
      case 5: {
        if (tag == 41) {
         parse_overdue_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overdue_total_)));
          set_has_overdue_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_overdue_day;
        break;
      }

      // optional int32 overdue_day = 6;
      case 6: {
        if (tag == 48) {
         parse_overdue_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_day_)));
          set_has_overdue_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_repayment_state;
        break;
      }

      // optional bytes repayment_state = 7;
      case 7: {
        if (tag == 58) {
         parse_repayment_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repayment_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_also_late_fee;
        break;
      }

      // optional double also_late_fee = 8;
      case 8: {
        if (tag == 65) {
         parse_also_late_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &also_late_fee_)));
          set_has_also_late_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_also_urgent_fee;
        break;
      }

      // optional double also_urgent_fee = 9;
      case 9: {
        if (tag == 73) {
         parse_also_urgent_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &also_urgent_fee_)));
          set_has_also_urgent_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cheat_severity;
        break;
      }

      // optional bytes cheat_severity = 10;
      case 10: {
        if (tag == 82) {
         parse_cheat_severity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cheat_severity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data_sources;
        break;
      }

      // optional bytes data_sources = 11;
      case 11: {
        if (tag == 90) {
         parse_data_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_data_url;
        break;
      }

      // optional bytes data_url = 12;
      case 12: {
        if (tag == 98) {
         parse_data_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_record_date;
        break;
      }

      // optional bytes record_date = 13;
      case 13: {
        if (tag == 106) {
         parse_record_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.blacklist_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.blacklist_info)
  return false;
#undef DO_
}

void blacklist_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.blacklist_info)
  // optional .QDP_IMP.user_basic_info user_basic_info = 1;
  if (has_user_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_basic_info(), output);
  }

  // optional double borrow_total = 2;
  if (has_borrow_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->borrow_total(), output);
  }

  // optional double has_also_total = 3;
  if (has_has_also_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->has_also_total(), output);
  }

  // optional int32 overdue_count = 4;
  if (has_overdue_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overdue_count(), output);
  }

  // optional double overdue_total = 5;
  if (has_overdue_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->overdue_total(), output);
  }

  // optional int32 overdue_day = 6;
  if (has_overdue_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->overdue_day(), output);
  }

  // optional bytes repayment_state = 7;
  if (has_repayment_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->repayment_state(), output);
  }

  // optional double also_late_fee = 8;
  if (has_also_late_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->also_late_fee(), output);
  }

  // optional double also_urgent_fee = 9;
  if (has_also_urgent_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->also_urgent_fee(), output);
  }

  // optional bytes cheat_severity = 10;
  if (has_cheat_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->cheat_severity(), output);
  }

  // optional bytes data_sources = 11;
  if (has_data_sources()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->data_sources(), output);
  }

  // optional bytes data_url = 12;
  if (has_data_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->data_url(), output);
  }

  // optional bytes record_date = 13;
  if (has_record_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->record_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.blacklist_info)
}

::google::protobuf::uint8* blacklist_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.blacklist_info)
  // optional .QDP_IMP.user_basic_info user_basic_info = 1;
  if (has_user_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_basic_info(), target);
  }

  // optional double borrow_total = 2;
  if (has_borrow_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->borrow_total(), target);
  }

  // optional double has_also_total = 3;
  if (has_has_also_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->has_also_total(), target);
  }

  // optional int32 overdue_count = 4;
  if (has_overdue_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->overdue_count(), target);
  }

  // optional double overdue_total = 5;
  if (has_overdue_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->overdue_total(), target);
  }

  // optional int32 overdue_day = 6;
  if (has_overdue_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->overdue_day(), target);
  }

  // optional bytes repayment_state = 7;
  if (has_repayment_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->repayment_state(), target);
  }

  // optional double also_late_fee = 8;
  if (has_also_late_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->also_late_fee(), target);
  }

  // optional double also_urgent_fee = 9;
  if (has_also_urgent_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->also_urgent_fee(), target);
  }

  // optional bytes cheat_severity = 10;
  if (has_cheat_severity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->cheat_severity(), target);
  }

  // optional bytes data_sources = 11;
  if (has_data_sources()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->data_sources(), target);
  }

  // optional bytes data_url = 12;
  if (has_data_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->data_url(), target);
  }

  // optional bytes record_date = 13;
  if (has_record_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->record_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.blacklist_info)
  return target;
}

int blacklist_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QDP_IMP.user_basic_info user_basic_info = 1;
    if (has_user_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_basic_info());
    }

    // optional double borrow_total = 2;
    if (has_borrow_total()) {
      total_size += 1 + 8;
    }

    // optional double has_also_total = 3;
    if (has_has_also_total()) {
      total_size += 1 + 8;
    }

    // optional int32 overdue_count = 4;
    if (has_overdue_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_count());
    }

    // optional double overdue_total = 5;
    if (has_overdue_total()) {
      total_size += 1 + 8;
    }

    // optional int32 overdue_day = 6;
    if (has_overdue_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_day());
    }

    // optional bytes repayment_state = 7;
    if (has_repayment_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->repayment_state());
    }

    // optional double also_late_fee = 8;
    if (has_also_late_fee()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double also_urgent_fee = 9;
    if (has_also_urgent_fee()) {
      total_size += 1 + 8;
    }

    // optional bytes cheat_severity = 10;
    if (has_cheat_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cheat_severity());
    }

    // optional bytes data_sources = 11;
    if (has_data_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_sources());
    }

    // optional bytes data_url = 12;
    if (has_data_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_url());
    }

    // optional bytes record_date = 13;
    if (has_record_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_info::MergeFrom(const blacklist_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_basic_info()) {
      mutable_user_basic_info()->::QDP_IMP::user_basic_info::MergeFrom(from.user_basic_info());
    }
    if (from.has_borrow_total()) {
      set_borrow_total(from.borrow_total());
    }
    if (from.has_has_also_total()) {
      set_has_also_total(from.has_also_total());
    }
    if (from.has_overdue_count()) {
      set_overdue_count(from.overdue_count());
    }
    if (from.has_overdue_total()) {
      set_overdue_total(from.overdue_total());
    }
    if (from.has_overdue_day()) {
      set_overdue_day(from.overdue_day());
    }
    if (from.has_repayment_state()) {
      set_repayment_state(from.repayment_state());
    }
    if (from.has_also_late_fee()) {
      set_also_late_fee(from.also_late_fee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_also_urgent_fee()) {
      set_also_urgent_fee(from.also_urgent_fee());
    }
    if (from.has_cheat_severity()) {
      set_cheat_severity(from.cheat_severity());
    }
    if (from.has_data_sources()) {
      set_data_sources(from.data_sources());
    }
    if (from.has_data_url()) {
      set_data_url(from.data_url());
    }
    if (from.has_record_date()) {
      set_record_date(from.record_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_info::CopyFrom(const blacklist_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_info::IsInitialized() const {

  return true;
}

void blacklist_info::Swap(blacklist_info* other) {
  if (other != this) {
    std::swap(user_basic_info_, other->user_basic_info_);
    std::swap(borrow_total_, other->borrow_total_);
    std::swap(has_also_total_, other->has_also_total_);
    std::swap(overdue_count_, other->overdue_count_);
    std::swap(overdue_total_, other->overdue_total_);
    std::swap(overdue_day_, other->overdue_day_);
    std::swap(repayment_state_, other->repayment_state_);
    std::swap(also_late_fee_, other->also_late_fee_);
    std::swap(also_urgent_fee_, other->also_urgent_fee_);
    std::swap(cheat_severity_, other->cheat_severity_);
    std::swap(data_sources_, other->data_sources_);
    std::swap(data_url_, other->data_url_);
    std::swap(record_date_, other->record_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_info_descriptor_;
  metadata.reflection = blacklist_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_data_statistics_info::kReptileIdFieldNumber;
const int reptile_data_statistics_info::kWebsiteNameFieldNumber;
const int reptile_data_statistics_info::kCrawlSiteFieldNumber;
const int reptile_data_statistics_info::kModifyTotalFieldNumber;
const int reptile_data_statistics_info::kAddTotalFieldNumber;
const int reptile_data_statistics_info::kAccessPageTotalFieldNumber;
#endif  // !_MSC_VER

reptile_data_statistics_info::reptile_data_statistics_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_data_statistics_info)
}

void reptile_data_statistics_info::InitAsDefaultInstance() {
}

reptile_data_statistics_info::reptile_data_statistics_info(const reptile_data_statistics_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_data_statistics_info)
}

void reptile_data_statistics_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reptile_id_ = 0;
  website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modify_total_ = 0;
  add_total_ = 0;
  access_page_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_data_statistics_info::~reptile_data_statistics_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_data_statistics_info)
  SharedDtor();
}

void reptile_data_statistics_info::SharedDtor() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crawl_site_;
  }
  if (this != default_instance_) {
  }
}

void reptile_data_statistics_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_data_statistics_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_data_statistics_info_descriptor_;
}

const reptile_data_statistics_info& reptile_data_statistics_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_data_statistics_info* reptile_data_statistics_info::default_instance_ = NULL;

reptile_data_statistics_info* reptile_data_statistics_info::New() const {
  return new reptile_data_statistics_info;
}

void reptile_data_statistics_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_data_statistics_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(reptile_id_, modify_total_);
    ZR_(add_total_, access_page_total_);
    if (has_website_name()) {
      if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        website_name_->clear();
      }
    }
    if (has_crawl_site()) {
      if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crawl_site_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_data_statistics_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_data_statistics_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_website_name;
        break;
      }

      // optional bytes website_name = 2;
      case 2: {
        if (tag == 18) {
         parse_website_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_website_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_crawl_site;
        break;
      }

      // optional bytes crawl_site = 3;
      case 3: {
        if (tag == 26) {
         parse_crawl_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crawl_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modify_total;
        break;
      }

      // optional int32 modify_total = 4;
      case 4: {
        if (tag == 32) {
         parse_modify_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modify_total_)));
          set_has_modify_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_add_total;
        break;
      }

      // optional int32 add_total = 5;
      case 5: {
        if (tag == 40) {
         parse_add_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_total_)));
          set_has_add_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_access_page_total;
        break;
      }

      // optional int32 access_page_total = 6;
      case 6: {
        if (tag == 48) {
         parse_access_page_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_page_total_)));
          set_has_access_page_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_data_statistics_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_data_statistics_info)
  return false;
#undef DO_
}

void reptile_data_statistics_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_data_statistics_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional bytes website_name = 2;
  if (has_website_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->website_name(), output);
  }

  // optional bytes crawl_site = 3;
  if (has_crawl_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->crawl_site(), output);
  }

  // optional int32 modify_total = 4;
  if (has_modify_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modify_total(), output);
  }

  // optional int32 add_total = 5;
  if (has_add_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_total(), output);
  }

  // optional int32 access_page_total = 6;
  if (has_access_page_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->access_page_total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_data_statistics_info)
}

::google::protobuf::uint8* reptile_data_statistics_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_data_statistics_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional bytes website_name = 2;
  if (has_website_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->website_name(), target);
  }

  // optional bytes crawl_site = 3;
  if (has_crawl_site()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->crawl_site(), target);
  }

  // optional int32 modify_total = 4;
  if (has_modify_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modify_total(), target);
  }

  // optional int32 add_total = 5;
  if (has_add_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_total(), target);
  }

  // optional int32 access_page_total = 6;
  if (has_access_page_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->access_page_total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_data_statistics_info)
  return target;
}

int reptile_data_statistics_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional bytes website_name = 2;
    if (has_website_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->website_name());
    }

    // optional bytes crawl_site = 3;
    if (has_crawl_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crawl_site());
    }

    // optional int32 modify_total = 4;
    if (has_modify_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modify_total());
    }

    // optional int32 add_total = 5;
    if (has_add_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_total());
    }

    // optional int32 access_page_total = 6;
    if (has_access_page_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_page_total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_data_statistics_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_data_statistics_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_data_statistics_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_data_statistics_info::MergeFrom(const reptile_data_statistics_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_website_name()) {
      set_website_name(from.website_name());
    }
    if (from.has_crawl_site()) {
      set_crawl_site(from.crawl_site());
    }
    if (from.has_modify_total()) {
      set_modify_total(from.modify_total());
    }
    if (from.has_add_total()) {
      set_add_total(from.add_total());
    }
    if (from.has_access_page_total()) {
      set_access_page_total(from.access_page_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_data_statistics_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_data_statistics_info::CopyFrom(const reptile_data_statistics_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_data_statistics_info::IsInitialized() const {

  return true;
}

void reptile_data_statistics_info::Swap(reptile_data_statistics_info* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(website_name_, other->website_name_);
    std::swap(crawl_site_, other->crawl_site_);
    std::swap(modify_total_, other->modify_total_);
    std::swap(add_total_, other->add_total_);
    std::swap(access_page_total_, other->access_page_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_data_statistics_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_data_statistics_info_descriptor_;
  metadata.reflection = reptile_data_statistics_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_data_detail_info::kGetDateFieldNumber;
const int reptile_data_detail_info::kModifyTotalFieldNumber;
const int reptile_data_detail_info::kAddTotalFieldNumber;
const int reptile_data_detail_info::kAccessPageTotalFieldNumber;
#endif  // !_MSC_VER

reptile_data_detail_info::reptile_data_detail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_data_detail_info)
}

void reptile_data_detail_info::InitAsDefaultInstance() {
}

reptile_data_detail_info::reptile_data_detail_info(const reptile_data_detail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_data_detail_info)
}

void reptile_data_detail_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  get_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modify_total_ = 0;
  add_total_ = 0;
  access_page_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_data_detail_info::~reptile_data_detail_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_data_detail_info)
  SharedDtor();
}

void reptile_data_detail_info::SharedDtor() {
  if (get_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete get_date_;
  }
  if (this != default_instance_) {
  }
}

void reptile_data_detail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_data_detail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_data_detail_info_descriptor_;
}

const reptile_data_detail_info& reptile_data_detail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_data_detail_info* reptile_data_detail_info::default_instance_ = NULL;

reptile_data_detail_info* reptile_data_detail_info::New() const {
  return new reptile_data_detail_info;
}

void reptile_data_detail_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_data_detail_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(modify_total_, access_page_total_);
    if (has_get_date()) {
      if (get_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        get_date_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_data_detail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_data_detail_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes get_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modify_total;
        break;
      }

      // optional int32 modify_total = 2;
      case 2: {
        if (tag == 16) {
         parse_modify_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modify_total_)));
          set_has_modify_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add_total;
        break;
      }

      // optional int32 add_total = 3;
      case 3: {
        if (tag == 24) {
         parse_add_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_total_)));
          set_has_add_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_access_page_total;
        break;
      }

      // optional int32 access_page_total = 4;
      case 4: {
        if (tag == 32) {
         parse_access_page_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_page_total_)));
          set_has_access_page_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_data_detail_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_data_detail_info)
  return false;
#undef DO_
}

void reptile_data_detail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_data_detail_info)
  // optional bytes get_date = 1;
  if (has_get_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->get_date(), output);
  }

  // optional int32 modify_total = 2;
  if (has_modify_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modify_total(), output);
  }

  // optional int32 add_total = 3;
  if (has_add_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_total(), output);
  }

  // optional int32 access_page_total = 4;
  if (has_access_page_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->access_page_total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_data_detail_info)
}

::google::protobuf::uint8* reptile_data_detail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_data_detail_info)
  // optional bytes get_date = 1;
  if (has_get_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->get_date(), target);
  }

  // optional int32 modify_total = 2;
  if (has_modify_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modify_total(), target);
  }

  // optional int32 add_total = 3;
  if (has_add_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_total(), target);
  }

  // optional int32 access_page_total = 4;
  if (has_access_page_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->access_page_total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_data_detail_info)
  return target;
}

int reptile_data_detail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes get_date = 1;
    if (has_get_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->get_date());
    }

    // optional int32 modify_total = 2;
    if (has_modify_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modify_total());
    }

    // optional int32 add_total = 3;
    if (has_add_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_total());
    }

    // optional int32 access_page_total = 4;
    if (has_access_page_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_page_total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_data_detail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_data_detail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_data_detail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_data_detail_info::MergeFrom(const reptile_data_detail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_date()) {
      set_get_date(from.get_date());
    }
    if (from.has_modify_total()) {
      set_modify_total(from.modify_total());
    }
    if (from.has_add_total()) {
      set_add_total(from.add_total());
    }
    if (from.has_access_page_total()) {
      set_access_page_total(from.access_page_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_data_detail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_data_detail_info::CopyFrom(const reptile_data_detail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_data_detail_info::IsInitialized() const {

  return true;
}

void reptile_data_detail_info::Swap(reptile_data_detail_info* other) {
  if (other != this) {
    std::swap(get_date_, other->get_date_);
    std::swap(modify_total_, other->modify_total_);
    std::swap(add_total_, other->add_total_);
    std::swap(access_page_total_, other->access_page_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_data_detail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_data_detail_info_descriptor_;
  metadata.reflection = reptile_data_detail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_basic_info::kReptileIdFieldNumber;
const int reptile_basic_info::kWebsiteNameFieldNumber;
const int reptile_basic_info::kCrawlSiteFieldNumber;
const int reptile_basic_info::kIpFieldNumber;
const int reptile_basic_info::kScheduleFieldNumber;
const int reptile_basic_info::kReptileStatusFieldNumber;
#endif  // !_MSC_VER

reptile_basic_info::reptile_basic_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_basic_info)
}

void reptile_basic_info::InitAsDefaultInstance() {
}

reptile_basic_info::reptile_basic_info(const reptile_basic_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_basic_info)
}

void reptile_basic_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reptile_id_ = 0;
  website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reptile_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_basic_info::~reptile_basic_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_basic_info)
  SharedDtor();
}

void reptile_basic_info::SharedDtor() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crawl_site_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (schedule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schedule_;
  }
  if (reptile_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_status_;
  }
  if (this != default_instance_) {
  }
}

void reptile_basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_basic_info_descriptor_;
}

const reptile_basic_info& reptile_basic_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_basic_info* reptile_basic_info::default_instance_ = NULL;

reptile_basic_info* reptile_basic_info::New() const {
  return new reptile_basic_info;
}

void reptile_basic_info::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    reptile_id_ = 0;
    if (has_website_name()) {
      if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        website_name_->clear();
      }
    }
    if (has_crawl_site()) {
      if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crawl_site_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_schedule()) {
      if (schedule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schedule_->clear();
      }
    }
    if (has_reptile_status()) {
      if (reptile_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reptile_status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_basic_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_website_name;
        break;
      }

      // optional bytes website_name = 2;
      case 2: {
        if (tag == 18) {
         parse_website_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_website_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_crawl_site;
        break;
      }

      // optional bytes crawl_site = 3;
      case 3: {
        if (tag == 26) {
         parse_crawl_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crawl_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional bytes ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_schedule;
        break;
      }

      // optional bytes schedule = 5;
      case 5: {
        if (tag == 42) {
         parse_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reptile_status;
        break;
      }

      // optional bytes reptile_status = 6;
      case 6: {
        if (tag == 50) {
         parse_reptile_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reptile_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_basic_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_basic_info)
  return false;
#undef DO_
}

void reptile_basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_basic_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional bytes website_name = 2;
  if (has_website_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->website_name(), output);
  }

  // optional bytes crawl_site = 3;
  if (has_crawl_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->crawl_site(), output);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ip(), output);
  }

  // optional bytes schedule = 5;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->schedule(), output);
  }

  // optional bytes reptile_status = 6;
  if (has_reptile_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->reptile_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_basic_info)
}

::google::protobuf::uint8* reptile_basic_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_basic_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional bytes website_name = 2;
  if (has_website_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->website_name(), target);
  }

  // optional bytes crawl_site = 3;
  if (has_crawl_site()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->crawl_site(), target);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // optional bytes schedule = 5;
  if (has_schedule()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->schedule(), target);
  }

  // optional bytes reptile_status = 6;
  if (has_reptile_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->reptile_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_basic_info)
  return target;
}

int reptile_basic_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional bytes website_name = 2;
    if (has_website_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->website_name());
    }

    // optional bytes crawl_site = 3;
    if (has_crawl_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crawl_site());
    }

    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes schedule = 5;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schedule());
    }

    // optional bytes reptile_status = 6;
    if (has_reptile_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reptile_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_basic_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_basic_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_basic_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_basic_info::MergeFrom(const reptile_basic_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_website_name()) {
      set_website_name(from.website_name());
    }
    if (from.has_crawl_site()) {
      set_crawl_site(from.crawl_site());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_schedule()) {
      set_schedule(from.schedule());
    }
    if (from.has_reptile_status()) {
      set_reptile_status(from.reptile_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_basic_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_basic_info::CopyFrom(const reptile_basic_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_basic_info::IsInitialized() const {

  return true;
}

void reptile_basic_info::Swap(reptile_basic_info* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(website_name_, other->website_name_);
    std::swap(crawl_site_, other->crawl_site_);
    std::swap(ip_, other->ip_);
    std::swap(schedule_, other->schedule_);
    std::swap(reptile_status_, other->reptile_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_basic_info_descriptor_;
  metadata.reflection = reptile_basic_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_monitoring_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

reptile_monitoring_ask::reptile_monitoring_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_monitoring_ask)
}

void reptile_monitoring_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

reptile_monitoring_ask::reptile_monitoring_ask(const reptile_monitoring_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_monitoring_ask)
}

void reptile_monitoring_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_monitoring_ask::~reptile_monitoring_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_monitoring_ask)
  SharedDtor();
}

void reptile_monitoring_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void reptile_monitoring_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_monitoring_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_monitoring_ask_descriptor_;
}

const reptile_monitoring_ask& reptile_monitoring_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_monitoring_ask* reptile_monitoring_ask::default_instance_ = NULL;

reptile_monitoring_ask* reptile_monitoring_ask::New() const {
  return new reptile_monitoring_ask;
}

void reptile_monitoring_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_monitoring_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_monitoring_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_monitoring_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_monitoring_ask)
  return false;
#undef DO_
}

void reptile_monitoring_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_monitoring_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_monitoring_ask)
}

::google::protobuf::uint8* reptile_monitoring_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_monitoring_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_monitoring_ask)
  return target;
}

int reptile_monitoring_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_monitoring_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_monitoring_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_monitoring_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_monitoring_ask::MergeFrom(const reptile_monitoring_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_monitoring_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_monitoring_ask::CopyFrom(const reptile_monitoring_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_monitoring_ask::IsInitialized() const {

  return true;
}

void reptile_monitoring_ask::Swap(reptile_monitoring_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_monitoring_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_monitoring_ask_descriptor_;
  metadata.reflection = reptile_monitoring_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_monitoring_ans::kListFieldNumber;
const int reptile_monitoring_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_monitoring_ans::reptile_monitoring_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_monitoring_ans)
}

void reptile_monitoring_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_monitoring_ans::reptile_monitoring_ans(const reptile_monitoring_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_monitoring_ans)
}

void reptile_monitoring_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_monitoring_ans::~reptile_monitoring_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_monitoring_ans)
  SharedDtor();
}

void reptile_monitoring_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_monitoring_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_monitoring_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_monitoring_ans_descriptor_;
}

const reptile_monitoring_ans& reptile_monitoring_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_monitoring_ans* reptile_monitoring_ans::default_instance_ = NULL;

reptile_monitoring_ans* reptile_monitoring_ans::New() const {
  return new reptile_monitoring_ans;
}

void reptile_monitoring_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_monitoring_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_monitoring_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.reptile_basic_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_monitoring_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_monitoring_ans)
  return false;
#undef DO_
}

void reptile_monitoring_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_monitoring_ans)
  // repeated .QDP_IMP.reptile_basic_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_monitoring_ans)
}

::google::protobuf::uint8* reptile_monitoring_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_monitoring_ans)
  // repeated .QDP_IMP.reptile_basic_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_monitoring_ans)
  return target;
}

int reptile_monitoring_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.reptile_basic_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_monitoring_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_monitoring_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_monitoring_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_monitoring_ans::MergeFrom(const reptile_monitoring_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_monitoring_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_monitoring_ans::CopyFrom(const reptile_monitoring_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_monitoring_ans::IsInitialized() const {

  return true;
}

void reptile_monitoring_ans::Swap(reptile_monitoring_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_monitoring_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_monitoring_ans_descriptor_;
  metadata.reflection = reptile_monitoring_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_monitoring_manage_ask::kReptileIdFieldNumber;
const int reptile_monitoring_manage_ask::kOperationFieldNumber;
const int reptile_monitoring_manage_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

reptile_monitoring_manage_ask::reptile_monitoring_manage_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_monitoring_manage_ask)
}

void reptile_monitoring_manage_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

reptile_monitoring_manage_ask::reptile_monitoring_manage_ask(const reptile_monitoring_manage_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_monitoring_manage_ask)
}

void reptile_monitoring_manage_ask::SharedCtor() {
  _cached_size_ = 0;
  reptile_id_ = 0;
  operation_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_monitoring_manage_ask::~reptile_monitoring_manage_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_monitoring_manage_ask)
  SharedDtor();
}

void reptile_monitoring_manage_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void reptile_monitoring_manage_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_monitoring_manage_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_monitoring_manage_ask_descriptor_;
}

const reptile_monitoring_manage_ask& reptile_monitoring_manage_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_monitoring_manage_ask* reptile_monitoring_manage_ask::default_instance_ = NULL;

reptile_monitoring_manage_ask* reptile_monitoring_manage_ask::New() const {
  return new reptile_monitoring_manage_ask;
}

void reptile_monitoring_manage_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_monitoring_manage_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(reptile_id_, operation_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_monitoring_manage_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_monitoring_manage_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // optional int32 operation = 2;
      case 2: {
        if (tag == 16) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_monitoring_manage_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_monitoring_manage_ask)
  return false;
#undef DO_
}

void reptile_monitoring_manage_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_monitoring_manage_ask)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional int32 operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operation(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_monitoring_manage_ask)
}

::google::protobuf::uint8* reptile_monitoring_manage_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_monitoring_manage_ask)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional int32 operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operation(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_monitoring_manage_ask)
  return target;
}

int reptile_monitoring_manage_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional int32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_monitoring_manage_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_monitoring_manage_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_monitoring_manage_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_monitoring_manage_ask::MergeFrom(const reptile_monitoring_manage_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_monitoring_manage_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_monitoring_manage_ask::CopyFrom(const reptile_monitoring_manage_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_monitoring_manage_ask::IsInitialized() const {

  return true;
}

void reptile_monitoring_manage_ask::Swap(reptile_monitoring_manage_ask* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(operation_, other->operation_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_monitoring_manage_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_monitoring_manage_ask_descriptor_;
  metadata.reflection = reptile_monitoring_manage_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_monitoring_manage_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_monitoring_manage_ans::reptile_monitoring_manage_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_monitoring_manage_ans)
}

void reptile_monitoring_manage_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_monitoring_manage_ans::reptile_monitoring_manage_ans(const reptile_monitoring_manage_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_monitoring_manage_ans)
}

void reptile_monitoring_manage_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_monitoring_manage_ans::~reptile_monitoring_manage_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_monitoring_manage_ans)
  SharedDtor();
}

void reptile_monitoring_manage_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_monitoring_manage_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_monitoring_manage_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_monitoring_manage_ans_descriptor_;
}

const reptile_monitoring_manage_ans& reptile_monitoring_manage_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_monitoring_manage_ans* reptile_monitoring_manage_ans::default_instance_ = NULL;

reptile_monitoring_manage_ans* reptile_monitoring_manage_ans::New() const {
  return new reptile_monitoring_manage_ans;
}

void reptile_monitoring_manage_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_monitoring_manage_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_monitoring_manage_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_monitoring_manage_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_monitoring_manage_ans)
  return false;
#undef DO_
}

void reptile_monitoring_manage_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_monitoring_manage_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_monitoring_manage_ans)
}

::google::protobuf::uint8* reptile_monitoring_manage_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_monitoring_manage_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_monitoring_manage_ans)
  return target;
}

int reptile_monitoring_manage_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_monitoring_manage_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_monitoring_manage_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_monitoring_manage_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_monitoring_manage_ans::MergeFrom(const reptile_monitoring_manage_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_monitoring_manage_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_monitoring_manage_ans::CopyFrom(const reptile_monitoring_manage_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_monitoring_manage_ans::IsInitialized() const {

  return true;
}

void reptile_monitoring_manage_ans::Swap(reptile_monitoring_manage_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_monitoring_manage_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_monitoring_manage_ans_descriptor_;
  metadata.reflection = reptile_monitoring_manage_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_data_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

reptile_data_statistics_ask::reptile_data_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_data_statistics_ask)
}

void reptile_data_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

reptile_data_statistics_ask::reptile_data_statistics_ask(const reptile_data_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_data_statistics_ask)
}

void reptile_data_statistics_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_data_statistics_ask::~reptile_data_statistics_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_data_statistics_ask)
  SharedDtor();
}

void reptile_data_statistics_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void reptile_data_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_data_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_data_statistics_ask_descriptor_;
}

const reptile_data_statistics_ask& reptile_data_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_data_statistics_ask* reptile_data_statistics_ask::default_instance_ = NULL;

reptile_data_statistics_ask* reptile_data_statistics_ask::New() const {
  return new reptile_data_statistics_ask;
}

void reptile_data_statistics_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_data_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_data_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_data_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_data_statistics_ask)
  return false;
#undef DO_
}

void reptile_data_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_data_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_data_statistics_ask)
}

::google::protobuf::uint8* reptile_data_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_data_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_data_statistics_ask)
  return target;
}

int reptile_data_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_data_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_data_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_data_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_data_statistics_ask::MergeFrom(const reptile_data_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_data_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_data_statistics_ask::CopyFrom(const reptile_data_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_data_statistics_ask::IsInitialized() const {

  return true;
}

void reptile_data_statistics_ask::Swap(reptile_data_statistics_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_data_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_data_statistics_ask_descriptor_;
  metadata.reflection = reptile_data_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_data_statistics_ans::kListFieldNumber;
const int reptile_data_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_data_statistics_ans::reptile_data_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_data_statistics_ans)
}

void reptile_data_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_data_statistics_ans::reptile_data_statistics_ans(const reptile_data_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_data_statistics_ans)
}

void reptile_data_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_data_statistics_ans::~reptile_data_statistics_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_data_statistics_ans)
  SharedDtor();
}

void reptile_data_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_data_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_data_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_data_statistics_ans_descriptor_;
}

const reptile_data_statistics_ans& reptile_data_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_data_statistics_ans* reptile_data_statistics_ans::default_instance_ = NULL;

reptile_data_statistics_ans* reptile_data_statistics_ans::New() const {
  return new reptile_data_statistics_ans;
}

void reptile_data_statistics_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_data_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_data_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.reptile_data_statistics_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_data_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_data_statistics_ans)
  return false;
#undef DO_
}

void reptile_data_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_data_statistics_ans)
  // repeated .QDP_IMP.reptile_data_statistics_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_data_statistics_ans)
}

::google::protobuf::uint8* reptile_data_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_data_statistics_ans)
  // repeated .QDP_IMP.reptile_data_statistics_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_data_statistics_ans)
  return target;
}

int reptile_data_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.reptile_data_statistics_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_data_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_data_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_data_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_data_statistics_ans::MergeFrom(const reptile_data_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_data_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_data_statistics_ans::CopyFrom(const reptile_data_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_data_statistics_ans::IsInitialized() const {

  return true;
}

void reptile_data_statistics_ans::Swap(reptile_data_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_data_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_data_statistics_ans_descriptor_;
  metadata.reflection = reptile_data_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_data_detail_ask::kReptileIdFieldNumber;
const int reptile_data_detail_ask::kPageNumFieldNumber;
const int reptile_data_detail_ask::kCurPageFieldNumber;
const int reptile_data_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

reptile_data_detail_ask::reptile_data_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_data_detail_ask)
}

void reptile_data_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

reptile_data_detail_ask::reptile_data_detail_ask(const reptile_data_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_data_detail_ask)
}

void reptile_data_detail_ask::SharedCtor() {
  _cached_size_ = 0;
  reptile_id_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_data_detail_ask::~reptile_data_detail_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_data_detail_ask)
  SharedDtor();
}

void reptile_data_detail_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void reptile_data_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_data_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_data_detail_ask_descriptor_;
}

const reptile_data_detail_ask& reptile_data_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_data_detail_ask* reptile_data_detail_ask::default_instance_ = NULL;

reptile_data_detail_ask* reptile_data_detail_ask::New() const {
  return new reptile_data_detail_ask;
}

void reptile_data_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_data_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(reptile_id_, page_num_);
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_data_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_data_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 2;
      case 2: {
        if (tag == 16) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_data_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_data_detail_ask)
  return false;
#undef DO_
}

void reptile_data_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_data_detail_ask)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional int32 page_num = 2;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_num(), output);
  }

  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_data_detail_ask)
}

::google::protobuf::uint8* reptile_data_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_data_detail_ask)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional int32 page_num = 2;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_num(), target);
  }

  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_data_detail_ask)
  return target;
}

int reptile_data_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional int32 page_num = 2;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 3;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_data_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_data_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_data_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_data_detail_ask::MergeFrom(const reptile_data_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_data_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_data_detail_ask::CopyFrom(const reptile_data_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_data_detail_ask::IsInitialized() const {

  return true;
}

void reptile_data_detail_ask::Swap(reptile_data_detail_ask* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_data_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_data_detail_ask_descriptor_;
  metadata.reflection = reptile_data_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_data_detail_ans::kListFieldNumber;
const int reptile_data_detail_ans::kTotalNumberFieldNumber;
const int reptile_data_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_data_detail_ans::reptile_data_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_data_detail_ans)
}

void reptile_data_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_data_detail_ans::reptile_data_detail_ans(const reptile_data_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_data_detail_ans)
}

void reptile_data_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_data_detail_ans::~reptile_data_detail_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_data_detail_ans)
  SharedDtor();
}

void reptile_data_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_data_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_data_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_data_detail_ans_descriptor_;
}

const reptile_data_detail_ans& reptile_data_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_data_detail_ans* reptile_data_detail_ans::default_instance_ = NULL;

reptile_data_detail_ans* reptile_data_detail_ans::New() const {
  return new reptile_data_detail_ans;
}

void reptile_data_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_data_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_data_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.reptile_data_detail_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_data_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_data_detail_ans)
  return false;
#undef DO_
}

void reptile_data_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_data_detail_ans)
  // repeated .QDP_IMP.reptile_data_detail_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_data_detail_ans)
}

::google::protobuf::uint8* reptile_data_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_data_detail_ans)
  // repeated .QDP_IMP.reptile_data_detail_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_data_detail_ans)
  return target;
}

int reptile_data_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.reptile_data_detail_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_data_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_data_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_data_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_data_detail_ans::MergeFrom(const reptile_data_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_data_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_data_detail_ans::CopyFrom(const reptile_data_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_data_detail_ans::IsInitialized() const {

  return true;
}

void reptile_data_detail_ans::Swap(reptile_data_detail_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_data_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_data_detail_ans_descriptor_;
  metadata.reflection = reptile_data_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_conf_info::kReptileIdFieldNumber;
const int reptile_conf_info::kStartIntervalFieldNumber;
const int reptile_conf_info::kGetIntervalFieldNumber;
const int reptile_conf_info::kReptileDescFieldNumber;
#endif  // !_MSC_VER

reptile_conf_info::reptile_conf_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_conf_info)
}

void reptile_conf_info::InitAsDefaultInstance() {
}

reptile_conf_info::reptile_conf_info(const reptile_conf_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_conf_info)
}

void reptile_conf_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reptile_id_ = 0;
  start_interval_ = 0;
  get_interval_ = 0;
  reptile_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_conf_info::~reptile_conf_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_conf_info)
  SharedDtor();
}

void reptile_conf_info::SharedDtor() {
  if (reptile_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_desc_;
  }
  if (this != default_instance_) {
  }
}

void reptile_conf_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_conf_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_conf_info_descriptor_;
}

const reptile_conf_info& reptile_conf_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_conf_info* reptile_conf_info::default_instance_ = NULL;

reptile_conf_info* reptile_conf_info::New() const {
  return new reptile_conf_info;
}

void reptile_conf_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_conf_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(reptile_id_, start_interval_);
    get_interval_ = 0;
    if (has_reptile_desc()) {
      if (reptile_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reptile_desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_conf_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_conf_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_interval;
        break;
      }

      // optional int32 start_interval = 2;
      case 2: {
        if (tag == 16) {
         parse_start_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_interval_)));
          set_has_start_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_get_interval;
        break;
      }

      // optional int32 get_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_get_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_interval_)));
          set_has_get_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reptile_desc;
        break;
      }

      // optional bytes reptile_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_reptile_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reptile_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_conf_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_conf_info)
  return false;
#undef DO_
}

void reptile_conf_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_conf_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional int32 start_interval = 2;
  if (has_start_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_interval(), output);
  }

  // optional int32 get_interval = 3;
  if (has_get_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_interval(), output);
  }

  // optional bytes reptile_desc = 4;
  if (has_reptile_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->reptile_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_conf_info)
}

::google::protobuf::uint8* reptile_conf_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_conf_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional int32 start_interval = 2;
  if (has_start_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_interval(), target);
  }

  // optional int32 get_interval = 3;
  if (has_get_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_interval(), target);
  }

  // optional bytes reptile_desc = 4;
  if (has_reptile_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->reptile_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_conf_info)
  return target;
}

int reptile_conf_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional int32 start_interval = 2;
    if (has_start_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_interval());
    }

    // optional int32 get_interval = 3;
    if (has_get_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_interval());
    }

    // optional bytes reptile_desc = 4;
    if (has_reptile_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reptile_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_conf_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_conf_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_conf_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_conf_info::MergeFrom(const reptile_conf_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_start_interval()) {
      set_start_interval(from.start_interval());
    }
    if (from.has_get_interval()) {
      set_get_interval(from.get_interval());
    }
    if (from.has_reptile_desc()) {
      set_reptile_desc(from.reptile_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_conf_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_conf_info::CopyFrom(const reptile_conf_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_conf_info::IsInitialized() const {

  return true;
}

void reptile_conf_info::Swap(reptile_conf_info* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(start_interval_, other->start_interval_);
    std::swap(get_interval_, other->get_interval_);
    std::swap(reptile_desc_, other->reptile_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_conf_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_conf_info_descriptor_;
  metadata.reflection = reptile_conf_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_conf_query_ask::kPageNumFieldNumber;
const int reptile_conf_query_ask::kCurPageFieldNumber;
const int reptile_conf_query_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

reptile_conf_query_ask::reptile_conf_query_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_conf_query_ask)
}

void reptile_conf_query_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

reptile_conf_query_ask::reptile_conf_query_ask(const reptile_conf_query_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_conf_query_ask)
}

void reptile_conf_query_ask::SharedCtor() {
  _cached_size_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_conf_query_ask::~reptile_conf_query_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_conf_query_ask)
  SharedDtor();
}

void reptile_conf_query_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void reptile_conf_query_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_conf_query_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_conf_query_ask_descriptor_;
}

const reptile_conf_query_ask& reptile_conf_query_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_conf_query_ask* reptile_conf_query_ask::default_instance_ = NULL;

reptile_conf_query_ask* reptile_conf_query_ask::New() const {
  return new reptile_conf_query_ask;
}

void reptile_conf_query_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_conf_query_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(page_num_, cur_page_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_conf_query_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_conf_query_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 2;
      case 2: {
        if (tag == 16) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_conf_query_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_conf_query_ask)
  return false;
#undef DO_
}

void reptile_conf_query_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_conf_query_ask)
  // optional int32 page_num = 1;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page_num(), output);
  }

  // optional int32 cur_page = 2;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_conf_query_ask)
}

::google::protobuf::uint8* reptile_conf_query_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_conf_query_ask)
  // optional int32 page_num = 1;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page_num(), target);
  }

  // optional int32 cur_page = 2;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_conf_query_ask)
  return target;
}

int reptile_conf_query_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page_num = 1;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 2;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_conf_query_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_conf_query_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_conf_query_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_conf_query_ask::MergeFrom(const reptile_conf_query_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_conf_query_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_conf_query_ask::CopyFrom(const reptile_conf_query_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_conf_query_ask::IsInitialized() const {

  return true;
}

void reptile_conf_query_ask::Swap(reptile_conf_query_ask* other) {
  if (other != this) {
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_conf_query_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_conf_query_ask_descriptor_;
  metadata.reflection = reptile_conf_query_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_conf_query_ans::kListFieldNumber;
const int reptile_conf_query_ans::kTotalNumberFieldNumber;
const int reptile_conf_query_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_conf_query_ans::reptile_conf_query_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_conf_query_ans)
}

void reptile_conf_query_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_conf_query_ans::reptile_conf_query_ans(const reptile_conf_query_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_conf_query_ans)
}

void reptile_conf_query_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_conf_query_ans::~reptile_conf_query_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_conf_query_ans)
  SharedDtor();
}

void reptile_conf_query_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_conf_query_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_conf_query_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_conf_query_ans_descriptor_;
}

const reptile_conf_query_ans& reptile_conf_query_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_conf_query_ans* reptile_conf_query_ans::default_instance_ = NULL;

reptile_conf_query_ans* reptile_conf_query_ans::New() const {
  return new reptile_conf_query_ans;
}

void reptile_conf_query_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_conf_query_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_conf_query_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.reptile_conf_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_conf_query_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_conf_query_ans)
  return false;
#undef DO_
}

void reptile_conf_query_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_conf_query_ans)
  // repeated .QDP_IMP.reptile_conf_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_conf_query_ans)
}

::google::protobuf::uint8* reptile_conf_query_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_conf_query_ans)
  // repeated .QDP_IMP.reptile_conf_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_conf_query_ans)
  return target;
}

int reptile_conf_query_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.reptile_conf_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_conf_query_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_conf_query_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_conf_query_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_conf_query_ans::MergeFrom(const reptile_conf_query_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_conf_query_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_conf_query_ans::CopyFrom(const reptile_conf_query_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_conf_query_ans::IsInitialized() const {

  return true;
}

void reptile_conf_query_ans::Swap(reptile_conf_query_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_conf_query_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_conf_query_ans_descriptor_;
  metadata.reflection = reptile_conf_query_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_conf_edit_ask::kReptileConfFieldNumber;
const int reptile_conf_edit_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

reptile_conf_edit_ask::reptile_conf_edit_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_conf_edit_ask)
}

void reptile_conf_edit_ask::InitAsDefaultInstance() {
  reptile_conf_ = const_cast< ::QDP_IMP::reptile_conf_info*>(&::QDP_IMP::reptile_conf_info::default_instance());
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

reptile_conf_edit_ask::reptile_conf_edit_ask(const reptile_conf_edit_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_conf_edit_ask)
}

void reptile_conf_edit_ask::SharedCtor() {
  _cached_size_ = 0;
  reptile_conf_ = NULL;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_conf_edit_ask::~reptile_conf_edit_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_conf_edit_ask)
  SharedDtor();
}

void reptile_conf_edit_ask::SharedDtor() {
  if (this != default_instance_) {
    delete reptile_conf_;
    delete ask_header_;
  }
}

void reptile_conf_edit_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_conf_edit_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_conf_edit_ask_descriptor_;
}

const reptile_conf_edit_ask& reptile_conf_edit_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_conf_edit_ask* reptile_conf_edit_ask::default_instance_ = NULL;

reptile_conf_edit_ask* reptile_conf_edit_ask::New() const {
  return new reptile_conf_edit_ask;
}

void reptile_conf_edit_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reptile_conf()) {
      if (reptile_conf_ != NULL) reptile_conf_->::QDP_IMP::reptile_conf_info::Clear();
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_conf_edit_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_conf_edit_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QDP_IMP.reptile_conf_info reptile_conf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reptile_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_conf_edit_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_conf_edit_ask)
  return false;
#undef DO_
}

void reptile_conf_edit_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_conf_edit_ask)
  // optional .QDP_IMP.reptile_conf_info reptile_conf = 1;
  if (has_reptile_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reptile_conf(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_conf_edit_ask)
}

::google::protobuf::uint8* reptile_conf_edit_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_conf_edit_ask)
  // optional .QDP_IMP.reptile_conf_info reptile_conf = 1;
  if (has_reptile_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reptile_conf(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_conf_edit_ask)
  return target;
}

int reptile_conf_edit_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QDP_IMP.reptile_conf_info reptile_conf = 1;
    if (has_reptile_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reptile_conf());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_conf_edit_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_conf_edit_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_conf_edit_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_conf_edit_ask::MergeFrom(const reptile_conf_edit_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_conf()) {
      mutable_reptile_conf()->::QDP_IMP::reptile_conf_info::MergeFrom(from.reptile_conf());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_conf_edit_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_conf_edit_ask::CopyFrom(const reptile_conf_edit_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_conf_edit_ask::IsInitialized() const {

  return true;
}

void reptile_conf_edit_ask::Swap(reptile_conf_edit_ask* other) {
  if (other != this) {
    std::swap(reptile_conf_, other->reptile_conf_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_conf_edit_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_conf_edit_ask_descriptor_;
  metadata.reflection = reptile_conf_edit_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_conf_edit_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_conf_edit_ans::reptile_conf_edit_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.reptile_conf_edit_ans)
}

void reptile_conf_edit_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_conf_edit_ans::reptile_conf_edit_ans(const reptile_conf_edit_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.reptile_conf_edit_ans)
}

void reptile_conf_edit_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_conf_edit_ans::~reptile_conf_edit_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.reptile_conf_edit_ans)
  SharedDtor();
}

void reptile_conf_edit_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_conf_edit_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_conf_edit_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_conf_edit_ans_descriptor_;
}

const reptile_conf_edit_ans& reptile_conf_edit_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

reptile_conf_edit_ans* reptile_conf_edit_ans::default_instance_ = NULL;

reptile_conf_edit_ans* reptile_conf_edit_ans::New() const {
  return new reptile_conf_edit_ans;
}

void reptile_conf_edit_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_conf_edit_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.reptile_conf_edit_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.reptile_conf_edit_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.reptile_conf_edit_ans)
  return false;
#undef DO_
}

void reptile_conf_edit_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.reptile_conf_edit_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.reptile_conf_edit_ans)
}

::google::protobuf::uint8* reptile_conf_edit_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.reptile_conf_edit_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.reptile_conf_edit_ans)
  return target;
}

int reptile_conf_edit_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_conf_edit_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_conf_edit_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_conf_edit_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_conf_edit_ans::MergeFrom(const reptile_conf_edit_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_conf_edit_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_conf_edit_ans::CopyFrom(const reptile_conf_edit_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_conf_edit_ans::IsInitialized() const {

  return true;
}

void reptile_conf_edit_ans::Swap(reptile_conf_edit_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_conf_edit_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_conf_edit_ans_descriptor_;
  metadata.reflection = reptile_conf_edit_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_statistics_ask::kStartDateFieldNumber;
const int blacklist_statistics_ask::kEndDateFieldNumber;
const int blacklist_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_statistics_ask::blacklist_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.blacklist_statistics_ask)
}

void blacklist_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_statistics_ask::blacklist_statistics_ask(const blacklist_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.blacklist_statistics_ask)
}

void blacklist_statistics_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_statistics_ask::~blacklist_statistics_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.blacklist_statistics_ask)
  SharedDtor();
}

void blacklist_statistics_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void blacklist_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_statistics_ask_descriptor_;
}

const blacklist_statistics_ask& blacklist_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

blacklist_statistics_ask* blacklist_statistics_ask::default_instance_ = NULL;

blacklist_statistics_ask* blacklist_statistics_ask::New() const {
  return new blacklist_statistics_ask;
}

void blacklist_statistics_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.blacklist_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.blacklist_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.blacklist_statistics_ask)
  return false;
#undef DO_
}

void blacklist_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.blacklist_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.blacklist_statistics_ask)
}

::google::protobuf::uint8* blacklist_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.blacklist_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.blacklist_statistics_ask)
  return target;
}

int blacklist_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_statistics_ask::MergeFrom(const blacklist_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_statistics_ask::CopyFrom(const blacklist_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_statistics_ask::IsInitialized() const {

  return true;
}

void blacklist_statistics_ask::Swap(blacklist_statistics_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_statistics_ask_descriptor_;
  metadata.reflection = blacklist_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklis_statistics_info::kWebsiteNameFieldNumber;
const int blacklis_statistics_info::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

blacklis_statistics_info::blacklis_statistics_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.blacklis_statistics_info)
}

void blacklis_statistics_info::InitAsDefaultInstance() {
}

blacklis_statistics_info::blacklis_statistics_info(const blacklis_statistics_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.blacklis_statistics_info)
}

void blacklis_statistics_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklis_statistics_info::~blacklis_statistics_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.blacklis_statistics_info)
  SharedDtor();
}

void blacklis_statistics_info::SharedDtor() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (this != default_instance_) {
  }
}

void blacklis_statistics_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklis_statistics_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklis_statistics_info_descriptor_;
}

const blacklis_statistics_info& blacklis_statistics_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

blacklis_statistics_info* blacklis_statistics_info::default_instance_ = NULL;

blacklis_statistics_info* blacklis_statistics_info::New() const {
  return new blacklis_statistics_info;
}

void blacklis_statistics_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_website_name()) {
      if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        website_name_->clear();
      }
    }
    total_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklis_statistics_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.blacklis_statistics_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes website_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_website_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.blacklis_statistics_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.blacklis_statistics_info)
  return false;
#undef DO_
}

void blacklis_statistics_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.blacklis_statistics_info)
  // optional bytes website_name = 1;
  if (has_website_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->website_name(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.blacklis_statistics_info)
}

::google::protobuf::uint8* blacklis_statistics_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.blacklis_statistics_info)
  // optional bytes website_name = 1;
  if (has_website_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->website_name(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.blacklis_statistics_info)
  return target;
}

int blacklis_statistics_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes website_name = 1;
    if (has_website_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->website_name());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklis_statistics_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklis_statistics_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklis_statistics_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklis_statistics_info::MergeFrom(const blacklis_statistics_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_website_name()) {
      set_website_name(from.website_name());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklis_statistics_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklis_statistics_info::CopyFrom(const blacklis_statistics_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklis_statistics_info::IsInitialized() const {

  return true;
}

void blacklis_statistics_info::Swap(blacklis_statistics_info* other) {
  if (other != this) {
    std::swap(website_name_, other->website_name_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklis_statistics_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklis_statistics_info_descriptor_;
  metadata.reflection = blacklis_statistics_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_statistics_ans::kListFieldNumber;
const int blacklist_statistics_ans::kTotalNumberFieldNumber;
const int blacklist_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_statistics_ans::blacklist_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.blacklist_statistics_ans)
}

void blacklist_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_statistics_ans::blacklist_statistics_ans(const blacklist_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.blacklist_statistics_ans)
}

void blacklist_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_statistics_ans::~blacklist_statistics_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.blacklist_statistics_ans)
  SharedDtor();
}

void blacklist_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void blacklist_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_statistics_ans_descriptor_;
}

const blacklist_statistics_ans& blacklist_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

blacklist_statistics_ans* blacklist_statistics_ans::default_instance_ = NULL;

blacklist_statistics_ans* blacklist_statistics_ans::New() const {
  return new blacklist_statistics_ans;
}

void blacklist_statistics_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.blacklist_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.blacklis_statistics_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.blacklist_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.blacklist_statistics_ans)
  return false;
#undef DO_
}

void blacklist_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.blacklist_statistics_ans)
  // repeated .QDP_IMP.blacklis_statistics_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.blacklist_statistics_ans)
}

::google::protobuf::uint8* blacklist_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.blacklist_statistics_ans)
  // repeated .QDP_IMP.blacklis_statistics_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.blacklist_statistics_ans)
  return target;
}

int blacklist_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.blacklis_statistics_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_statistics_ans::MergeFrom(const blacklist_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_statistics_ans::CopyFrom(const blacklist_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_statistics_ans::IsInitialized() const {

  return true;
}

void blacklist_statistics_ans::Swap(blacklist_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_statistics_ans_descriptor_;
  metadata.reflection = blacklist_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int data_sources_info::kWebsiteIdFieldNumber;
const int data_sources_info::kWebsiteNameFieldNumber;
#endif  // !_MSC_VER

data_sources_info::data_sources_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.data_sources_info)
}

void data_sources_info::InitAsDefaultInstance() {
}

data_sources_info::data_sources_info(const data_sources_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.data_sources_info)
}

void data_sources_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  website_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

data_sources_info::~data_sources_info() {
  // @@protoc_insertion_point(destructor:QDP_IMP.data_sources_info)
  SharedDtor();
}

void data_sources_info::SharedDtor() {
  if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_id_;
  }
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (this != default_instance_) {
  }
}

void data_sources_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data_sources_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_sources_info_descriptor_;
}

const data_sources_info& data_sources_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

data_sources_info* data_sources_info::default_instance_ = NULL;

data_sources_info* data_sources_info::New() const {
  return new data_sources_info;
}

void data_sources_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_website_id()) {
      if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        website_id_->clear();
      }
    }
    if (has_website_name()) {
      if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        website_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool data_sources_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.data_sources_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes website_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_website_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_website_name;
        break;
      }

      // optional bytes website_name = 2;
      case 2: {
        if (tag == 18) {
         parse_website_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_website_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.data_sources_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.data_sources_info)
  return false;
#undef DO_
}

void data_sources_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.data_sources_info)
  // optional bytes website_id = 1;
  if (has_website_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->website_id(), output);
  }

  // optional bytes website_name = 2;
  if (has_website_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->website_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.data_sources_info)
}

::google::protobuf::uint8* data_sources_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.data_sources_info)
  // optional bytes website_id = 1;
  if (has_website_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->website_id(), target);
  }

  // optional bytes website_name = 2;
  if (has_website_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->website_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.data_sources_info)
  return target;
}

int data_sources_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes website_id = 1;
    if (has_website_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->website_id());
    }

    // optional bytes website_name = 2;
    if (has_website_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->website_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data_sources_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const data_sources_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const data_sources_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void data_sources_info::MergeFrom(const data_sources_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_website_id()) {
      set_website_id(from.website_id());
    }
    if (from.has_website_name()) {
      set_website_name(from.website_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void data_sources_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_sources_info::CopyFrom(const data_sources_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_sources_info::IsInitialized() const {

  return true;
}

void data_sources_info::Swap(data_sources_info* other) {
  if (other != this) {
    std::swap(website_id_, other->website_id_);
    std::swap(website_name_, other->website_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata data_sources_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = data_sources_info_descriptor_;
  metadata.reflection = data_sources_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int data_sources_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

data_sources_ask::data_sources_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.data_sources_ask)
}

void data_sources_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

data_sources_ask::data_sources_ask(const data_sources_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.data_sources_ask)
}

void data_sources_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

data_sources_ask::~data_sources_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.data_sources_ask)
  SharedDtor();
}

void data_sources_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void data_sources_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data_sources_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_sources_ask_descriptor_;
}

const data_sources_ask& data_sources_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

data_sources_ask* data_sources_ask::default_instance_ = NULL;

data_sources_ask* data_sources_ask::New() const {
  return new data_sources_ask;
}

void data_sources_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool data_sources_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.data_sources_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.data_sources_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.data_sources_ask)
  return false;
#undef DO_
}

void data_sources_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.data_sources_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.data_sources_ask)
}

::google::protobuf::uint8* data_sources_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.data_sources_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.data_sources_ask)
  return target;
}

int data_sources_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data_sources_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const data_sources_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const data_sources_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void data_sources_ask::MergeFrom(const data_sources_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void data_sources_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_sources_ask::CopyFrom(const data_sources_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_sources_ask::IsInitialized() const {

  return true;
}

void data_sources_ask::Swap(data_sources_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata data_sources_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = data_sources_ask_descriptor_;
  metadata.reflection = data_sources_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int data_sources_ans::kListFieldNumber;
const int data_sources_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

data_sources_ans::data_sources_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.data_sources_ans)
}

void data_sources_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

data_sources_ans::data_sources_ans(const data_sources_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.data_sources_ans)
}

void data_sources_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

data_sources_ans::~data_sources_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.data_sources_ans)
  SharedDtor();
}

void data_sources_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void data_sources_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data_sources_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_sources_ans_descriptor_;
}

const data_sources_ans& data_sources_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

data_sources_ans* data_sources_ans::default_instance_ = NULL;

data_sources_ans* data_sources_ans::New() const {
  return new data_sources_ans;
}

void data_sources_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool data_sources_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.data_sources_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.data_sources_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.data_sources_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.data_sources_ans)
  return false;
#undef DO_
}

void data_sources_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.data_sources_ans)
  // repeated .QDP_IMP.data_sources_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.data_sources_ans)
}

::google::protobuf::uint8* data_sources_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.data_sources_ans)
  // repeated .QDP_IMP.data_sources_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.data_sources_ans)
  return target;
}

int data_sources_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.data_sources_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data_sources_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const data_sources_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const data_sources_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void data_sources_ans::MergeFrom(const data_sources_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void data_sources_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_sources_ans::CopyFrom(const data_sources_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_sources_ans::IsInitialized() const {

  return true;
}

void data_sources_ans::Swap(data_sources_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata data_sources_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = data_sources_ans_descriptor_;
  metadata.reflection = data_sources_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_ask::kStartDateFieldNumber;
const int blacklist_ask::kEndDateFieldNumber;
const int blacklist_ask::kWebsiteIdFieldNumber;
const int blacklist_ask::kPageNumFieldNumber;
const int blacklist_ask::kCurPageFieldNumber;
const int blacklist_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_ask::blacklist_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.blacklist_ask)
}

void blacklist_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_ask::blacklist_ask(const blacklist_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.blacklist_ask)
}

void blacklist_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_ask::~blacklist_ask() {
  // @@protoc_insertion_point(destructor:QDP_IMP.blacklist_ask)
  SharedDtor();
}

void blacklist_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void blacklist_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_ask_descriptor_;
}

const blacklist_ask& blacklist_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

blacklist_ask* blacklist_ask::default_instance_ = NULL;

blacklist_ask* blacklist_ask::New() const {
  return new blacklist_ask;
}

void blacklist_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<blacklist_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_website_id()) {
      if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        website_id_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.blacklist_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_website_id;
        break;
      }

      // optional bytes website_id = 3;
      case 3: {
        if (tag == 26) {
         parse_website_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_website_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.blacklist_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.blacklist_ask)
  return false;
#undef DO_
}

void blacklist_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.blacklist_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes website_id = 3;
  if (has_website_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->website_id(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.blacklist_ask)
}

::google::protobuf::uint8* blacklist_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.blacklist_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes website_id = 3;
  if (has_website_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->website_id(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.blacklist_ask)
  return target;
}

int blacklist_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes website_id = 3;
    if (has_website_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->website_id());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_ask::MergeFrom(const blacklist_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_website_id()) {
      set_website_id(from.website_id());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_ask::CopyFrom(const blacklist_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_ask::IsInitialized() const {

  return true;
}

void blacklist_ask::Swap(blacklist_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(website_id_, other->website_id_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_ask_descriptor_;
  metadata.reflection = blacklist_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_ans::kListFieldNumber;
const int blacklist_ans::kTotalNumberFieldNumber;
const int blacklist_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_ans::blacklist_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QDP_IMP.blacklist_ans)
}

void blacklist_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_ans::blacklist_ans(const blacklist_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QDP_IMP.blacklist_ans)
}

void blacklist_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_ans::~blacklist_ans() {
  // @@protoc_insertion_point(destructor:QDP_IMP.blacklist_ans)
  SharedDtor();
}

void blacklist_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void blacklist_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_ans_descriptor_;
}

const blacklist_ans& blacklist_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QDP_5fIMP_2eproto();
  return *default_instance_;
}

blacklist_ans* blacklist_ans::default_instance_ = NULL;

blacklist_ans* blacklist_ans::New() const {
  return new blacklist_ans;
}

void blacklist_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QDP_IMP.blacklist_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QDP_IMP.blacklist_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QDP_IMP.blacklist_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QDP_IMP.blacklist_ans)
  return false;
#undef DO_
}

void blacklist_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QDP_IMP.blacklist_ans)
  // repeated .QDP_IMP.blacklist_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QDP_IMP.blacklist_ans)
}

::google::protobuf::uint8* blacklist_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QDP_IMP.blacklist_ans)
  // repeated .QDP_IMP.blacklist_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QDP_IMP.blacklist_ans)
  return target;
}

int blacklist_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .QDP_IMP.blacklist_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_ans::MergeFrom(const blacklist_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_ans::CopyFrom(const blacklist_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_ans::IsInitialized() const {

  return true;
}

void blacklist_ans::Swap(blacklist_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_ans_descriptor_;
  metadata.reflection = blacklist_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QDP_IMP

// @@protoc_insertion_point(global_scope)
