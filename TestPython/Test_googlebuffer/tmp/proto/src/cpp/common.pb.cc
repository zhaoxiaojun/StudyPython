// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {

namespace {

const ::google::protobuf::Descriptor* errorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  errorinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* identity_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  identity_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* location_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  location_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* school_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  school_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* relation_contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  relation_contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* family_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  family_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* property_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  property_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* work_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  work_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* card_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_basic_identification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_identification_reflection_ = NULL;
const ::google::protobuf::Descriptor* common_ask_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  common_ask_header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* degree_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* platform_serial_number_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* sex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* err_code_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* result_code_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* user_id_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* property_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* marriage_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* relation_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tc_user_status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  errorinfo_descriptor_ = file->message_type(0);
  static const int errorinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorinfo, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorinfo, error_info_),
  };
  errorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      errorinfo_descriptor_,
      errorinfo::default_instance_,
      errorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(errorinfo));
  result_info_descriptor_ = file->message_type(1);
  static const int result_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_info, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_info, result_msg_),
  };
  result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      result_info_descriptor_,
      result_info::default_instance_,
      result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(result_info));
  identity_card_descriptor_ = file->message_type(2);
  static const int identity_card_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_card, id_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_card, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_card, card_address_),
  };
  identity_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      identity_card_descriptor_,
      identity_card::default_instance_,
      identity_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(identity_card));
  location_info_descriptor_ = file->message_type(3);
  static const int location_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, real_position_),
  };
  location_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      location_info_descriptor_,
      location_info::default_instance_,
      location_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(location_info));
  school_info_descriptor_ = file->message_type(4);
  static const int school_info_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, collegename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, eductiondegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, educationcategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, graduateyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, enrollmentyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, major_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, school_loc_privonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, school_loc_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, school_loc_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, school_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, school_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, educonclusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, eduform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, edurecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, eduschool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, edutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, specialty_),
  };
  school_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      school_info_descriptor_,
      school_info::default_instance_,
      school_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(school_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(school_info));
  relation_contact_descriptor_ = file->message_type(5);
  static const int relation_contact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_contact, relationship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_contact, contact_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_contact, mobilephone_),
  };
  relation_contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      relation_contact_descriptor_,
      relation_contact::default_instance_,
      relation_contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(relation_contact));
  family_info_descriptor_ = file->message_type(6);
  static const int family_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, marriage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, childred_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, contact_list_),
  };
  family_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      family_info_descriptor_,
      family_info::default_instance_,
      family_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(family_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(family_info));
  property_info_descriptor_ = file->message_type(7);
  static const int property_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, valuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, loan_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, debt_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, age_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, loc_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, loc_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, loc_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, measurement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, extend_info_),
  };
  property_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      property_info_descriptor_,
      property_info::default_instance_,
      property_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(property_info));
  work_info_descriptor_ = file->message_type(8);
  static const int work_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, company_loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, industry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, years_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, work_loc_),
  };
  work_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      work_info_descriptor_,
      work_info::default_instance_,
      work_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(work_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(work_info));
  card_info_descriptor_ = file->message_type(9);
  static const int card_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, bankcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, cardno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, maxlineofcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, maxreturnamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, verifytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, updatetime_),
  };
  card_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_info_descriptor_,
      card_info::default_instance_,
      card_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_info));
  user_info_descriptor_ = file->message_type(10);
  static const int user_info_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, bank_cart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, blackbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, is_prove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, schoolinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, login_from_others_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, login_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, sex_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, homtown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, living_loc_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, work_info__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, istuandai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, isjcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, isdcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, isverify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, educationapplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, educationapplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, cardinfo_),
  };
  user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_descriptor_,
      user_info::default_instance_,
      user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info));
  user_basic_identification_descriptor_ = file->message_type(11);
  static const int user_basic_identification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_identification, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_identification, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_identification, real_name_),
  };
  user_basic_identification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_identification_descriptor_,
      user_basic_identification::default_instance_,
      user_basic_identification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_identification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_identification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_identification));
  common_ask_header_descriptor_ = file->message_type(12);
  static const int common_ask_header_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_ask_header, response_topic_),
  };
  common_ask_header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      common_ask_header_descriptor_,
      common_ask_header::default_instance_,
      common_ask_header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_ask_header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_ask_header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(common_ask_header));
  degree_descriptor_ = file->enum_type(0);
  platform_serial_number_descriptor_ = file->enum_type(1);
  sex_descriptor_ = file->enum_type(2);
  err_code_descriptor_ = file->enum_type(3);
  result_code_type_descriptor_ = file->enum_type(4);
  user_id_type_descriptor_ = file->enum_type(5);
  property_type_descriptor_ = file->enum_type(6);
  marriage_status_descriptor_ = file->enum_type(7);
  relation_type_descriptor_ = file->enum_type(8);
  tc_user_status_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    errorinfo_descriptor_, &errorinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    result_info_descriptor_, &result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    identity_card_descriptor_, &identity_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    location_info_descriptor_, &location_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    school_info_descriptor_, &school_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    relation_contact_descriptor_, &relation_contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    family_info_descriptor_, &family_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    property_info_descriptor_, &property_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    work_info_descriptor_, &work_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_info_descriptor_, &card_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_descriptor_, &user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_identification_descriptor_, &user_basic_identification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    common_ask_header_descriptor_, &common_ask_header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete errorinfo::default_instance_;
  delete errorinfo_reflection_;
  delete result_info::default_instance_;
  delete result_info_reflection_;
  delete identity_card::default_instance_;
  delete identity_card_reflection_;
  delete location_info::default_instance_;
  delete location_info_reflection_;
  delete school_info::default_instance_;
  delete school_info_reflection_;
  delete relation_contact::default_instance_;
  delete relation_contact_reflection_;
  delete family_info::default_instance_;
  delete family_info_reflection_;
  delete property_info::default_instance_;
  delete property_info_reflection_;
  delete work_info::default_instance_;
  delete work_info_reflection_;
  delete card_info::default_instance_;
  delete card_info_reflection_;
  delete user_info::default_instance_;
  delete user_info_reflection_;
  delete user_basic_identification::default_instance_;
  delete user_basic_identification_reflection_;
  delete common_ask_header::default_instance_;
  delete common_ask_header_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\006common\"O\n\terrorinfo\022.\n\ne"
    "rror_code\030\001 \001(\0162\020.common.err_code:\010ASK_F"
    "AIL\022\022\n\nerror_info\030\002 \001(\014\"X\n\013result_info\0225"
    "\n\013result_code\030\001 \001(\0162\030.common.result_code"
    "_type:\006FAILED\022\022\n\nresult_msg\030\002 \001(\014\"]\n\ride"
    "ntity_card\022%\n\007id_type\030\001 \001(\0162\024.common.use"
    "r_id_type\022\017\n\007id_card\030\002 \001(\014\022\024\n\014card_addre"
    "ss\030\003 \001(\014\"\215\001\n\rlocation_info\022\020\n\010province\030\001"
    " \001(\014\022\014\n\004city\030\002 \001(\014\022\014\n\004area\030\003 \001(\014\022\021\n\tlong"
    "itude\030\004 \001(\014\022\020\n\010latitude\030\005 \001(\014\022\022\n\nevent_t"
    "ime\030\006 \001(\014\022\025\n\rreal_position\030\007 \001(\014\"\250\003\n\013sch"
    "ool_info\022\023\n\013collegeName\030\001 \001(\014\022&\n\016eductio"
    "nDegree\030\002 \001(\0162\016.common.degree\022\031\n\021educati"
    "onCategory\030\003 \001(\014\022\024\n\014graduateYear\030\004 \001(\014\022\026"
    "\n\016enrollmentYear\030\005 \001(\014\022\025\n\rmajor_subject\030"
    "\006 \001(\014\022\033\n\023school_loc_privonce\030\007 \001(\014\022\027\n\017sc"
    "hool_loc_city\030\010 \001(\014\022\027\n\017school_loc_area\030\t"
    " \001(\014\022\023\n\013school_name\030\n \001(\014\022\026\n\016school_addr"
    "ess\030\013 \001(\014\022\025\n\reduconclusion\030\014 \001(\014\022\017\n\007eduf"
    "orm\030\r \001(\014\022\021\n\tedurecord\030\016 \001(\014\022\021\n\teduschoo"
    "l\030\017 \001(\014\022\017\n\007edutype\030\020 \001(\014\022\016\n\006source\030\022 \001(\014"
    "\022\021\n\tspecialty\030\023 \001(\014\"j\n\020relation_contact\022"
    "+\n\014relationship\030\001 \001(\0162\025.common.relation_"
    "type\022\024\n\014contact_name\030\002 \001(\014\022\023\n\013mobilephon"
    "e\030\003 \001(\014\"\201\001\n\013family_info\022)\n\010marriage\030\001 \001("
    "\0162\027.common.marriage_status\022\027\n\017childred_s"
    "tatus\030\002 \001(\010\022.\n\014contact_list\030\003 \003(\0132\030.comm"
    "on.relation_contact\"\347\001\n\rproperty_info\022$\n"
    "\005ptype\030\001 \001(\0162\025.common.property_type\022\021\n\tv"
    "aluation\030\002 \001(\005\022\023\n\013loan_status\030\003 \001(\010\022\021\n\td"
    "ebt_info\030\004 \001(\005\022\021\n\tage_limit\030\005 \001(\005\022\024\n\014loc"
    "_province\030\006 \001(\014\022\020\n\010loc_city\030\007 \001(\014\022\020\n\010loc"
    "_area\030\010 \001(\014\022\023\n\013measurement\030\t \001(\005\022\023\n\013exte"
    "nd_info\030\n \001(\014\"\315\001\n\twork_info\022\024\n\014company_n"
    "ame\030\001 \001(\014\022\020\n\010position\030\002 \001(\014\022\022\n\ndepartmen"
    "t\030\003 \001(\014\022*\n\013company_loc\030\004 \001(\0132\025.common.lo"
    "cation_info\022\020\n\010industry\030\005 \001(\014\022\r\n\005years\030\006"
    " \001(\014\022\016\n\006income\030\007 \001(\014\022\'\n\010work_loc\030\010 \001(\0132\025"
    ".common.location_info\"\277\001\n\tcard_info\022\020\n\010b"
    "ankcode\030\001 \001(\014\022\016\n\006cardno\030\002 \001(\014\022\023\n\013account"
    "name\030\003 \001(\014\022\r\n\005email\030\004 \001(\014\022\027\n\017maxLineofcr"
    "edit\030\005 \001(\001\022\027\n\017maxreturnamount\030\006 \001(\001\022\022\n\nv"
    "erifytime\030\007 \001(\014\022\022\n\ncreatetime\030\010 \001(\014\022\022\n\nu"
    "pdatetime\030\t \001(\014\"\307\006\n\tuser_info\022\017\n\007user_id"
    "\030\001 \001(\014\022&\n\007id_card\030\002 \001(\0132\025.common.identit"
    "y_card\022\021\n\treal_name\030\003 \001(\014\022\025\n\ruser_nickna"
    "me\030\004 \001(\014\022\024\n\014mobile_phone\030\005 \001(\014\022\r\n\005email\030"
    "\006 \001(\014\022\017\n\007address\030\007 \001(\014\022\021\n\tbank_cart\030\010 \001("
    "\014\022\n\n\002ip\030\t \001(\014\022\013\n\003mac\030\n \001(\014\022\014\n\004imei\030\013 \001(\014"
    "\022\020\n\010blackBox\030\014 \001(\014\022\020\n\010is_prove\030\r \001(\010\022\016\n\006"
    "avatar\030\016 \001(\014\022\'\n\nschoolinfo\030\017 \001(\0132\023.commo"
    "n.school_info\022#\n\006family\030\020 \001(\0132\023.common.f"
    "amily_info\022\'\n\010property\030\021 \003(\0132\025.common.pr"
    "operty_info\022\031\n\021login_from_others\030\022 \001(\014\022\020"
    "\n\010login_id\030\023 \001(\014\022\024\n\014user_account\030\024 \001(\014\022+"
    "\n\013user_status\030\025 \001(\0162\026.common.tc_user_sta"
    "tus\022\035\n\010sex_type\030\026 \001(\0162\013.common.sex\022\017\n\007ho"
    "mtown\030\027 \001(\014\022\020\n\010birthday\030\030 \001(\014\022.\n\017living_"
    "loc_info\030\031 \001(\0132\025.common.location_info\022\013\n"
    "\003age\030\032 \001(\005\022%\n\nwork_info_\030\033 \001(\0132\021.common."
    "work_info\022\021\n\tistuandai\030\034 \001(\005\022\021\n\tisjcredi"
    "t\030\035 \001(\005\022\021\n\tisdcredit\030\036 \001(\005\022\020\n\010isverify\030\037"
    " \001(\005\022\032\n\022educationapplytype\030  \001(\005\022\032\n\022educ"
    "ationapplytime\030! \001(\014\022#\n\010cardinfo\030\" \003(\0132\021"
    ".common.card_info\"[\n\031user_basic_identifi"
    "cation\022\025\n\ridentity_card\030\001 \001(\014\022\024\n\014mobile_"
    "phone\030\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\"+\n\021common"
    "_ask_header\022\026\n\016response_topic\030\001 \001(\014*A\n\006d"
    "egree\022\007\n\003low\020\001\022\t\n\005major\020\002\022\013\n\007college\020\003\022\n"
    "\n\006master\020\004\022\n\n\006doctor\020\005*1\n\026platform_seria"
    "l_number\022\n\n\006niiwoo\020\n\022\013\n\007tuandai\020\013*\'\n\003sex"
    "\022\010\n\004male\020\001\022\n\n\006female\020\002\022\n\n\006unknow\020\003*)\n\010er"
    "r_code\022\014\n\010ASK_FAIL\020\000\022\017\n\013ASK_SUCCEED\020\001*S\n"
    "\020result_code_type\022\023\n\006FAILED\020\377\377\377\377\377\377\377\377\377\001\022\013"
    "\n\007SUCCESS\020\000\022\013\n\007TIMEOUT\020\001\022\020\n\014UNAUTHORIZED"
    "\020\002*\273\001\n\014user_id_type\022\014\n\010other_id\020\000\022\026\n\022ide"
    "ntity_card_type\020\001\022\027\n\023special_zone_permit"
    "\020\002\022\026\n\022return_home_permit\020\003\022\021\n\rofficers_c"
    "ard\020\004\022\027\n\023extra_identity_card\020\005\022\025\n\021reside"
    "nce_booklet\020\006\022\021\n\rsoldiers_card\020\007*K\n\rprop"
    "erty_type\022\022\n\016house_property\020\001\022\020\n\014car_pro"
    "perty\020\002\022\024\n\020deposit_property\020\003*\\\n\017marriag"
    "e_status\022\r\n\tunmarried\020\000\022\013\n\007married\020\001\022\014\n\010"
    "divorced\020\002\022\r\n\twidowhood\020\003\022\020\n\014other_statu"
    "s\020\004*\211\001\n\rrelation_type\022\014\n\010relative\020\001\022\010\n\004m"
    "ate\020\002\022\014\n\010children\020\003\022\n\n\006parent\020\004\022\027\n\023broth"
    "ers_or_sisters\020\005\022\r\n\tcolleague\020\n\022\n\n\006frien"
    "d\020\013\022\022\n\016other_relation\020c*\235\001\n\016tc_user_stat"
    "us\022\026\n\022non_authentication\020\000\022\032\n\026realname_c"
    "ertification\020\001\022\017\n\013money_dabao\020\002\022\021\n\rmoney"
    "_xiaobao\020\004\022\014\n\010borrower\020\010\022\013\n\007partner\020\020\022\013\n"
    "\007in_work\020 \022\013\n\007student\020@", 3663);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  errorinfo::default_instance_ = new errorinfo();
  result_info::default_instance_ = new result_info();
  identity_card::default_instance_ = new identity_card();
  location_info::default_instance_ = new location_info();
  school_info::default_instance_ = new school_info();
  relation_contact::default_instance_ = new relation_contact();
  family_info::default_instance_ = new family_info();
  property_info::default_instance_ = new property_info();
  work_info::default_instance_ = new work_info();
  card_info::default_instance_ = new card_info();
  user_info::default_instance_ = new user_info();
  user_basic_identification::default_instance_ = new user_basic_identification();
  common_ask_header::default_instance_ = new common_ask_header();
  errorinfo::default_instance_->InitAsDefaultInstance();
  result_info::default_instance_->InitAsDefaultInstance();
  identity_card::default_instance_->InitAsDefaultInstance();
  location_info::default_instance_->InitAsDefaultInstance();
  school_info::default_instance_->InitAsDefaultInstance();
  relation_contact::default_instance_->InitAsDefaultInstance();
  family_info::default_instance_->InitAsDefaultInstance();
  property_info::default_instance_->InitAsDefaultInstance();
  work_info::default_instance_->InitAsDefaultInstance();
  card_info::default_instance_->InitAsDefaultInstance();
  user_info::default_instance_->InitAsDefaultInstance();
  user_basic_identification::default_instance_->InitAsDefaultInstance();
  common_ask_header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* degree_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return degree_descriptor_;
}
bool degree_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* platform_serial_number_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_serial_number_descriptor_;
}
bool platform_serial_number_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* sex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sex_descriptor_;
}
bool sex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* err_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return err_code_descriptor_;
}
bool err_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* result_code_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return result_code_type_descriptor_;
}
bool result_code_type_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* user_id_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_id_type_descriptor_;
}
bool user_id_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* property_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return property_type_descriptor_;
}
bool property_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* marriage_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marriage_status_descriptor_;
}
bool marriage_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* relation_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return relation_type_descriptor_;
}
bool relation_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* tc_user_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tc_user_status_descriptor_;
}
bool tc_user_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int errorinfo::kErrorCodeFieldNumber;
const int errorinfo::kErrorInfoFieldNumber;
#endif  // !_MSC_VER

errorinfo::errorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.errorinfo)
}

void errorinfo::InitAsDefaultInstance() {
}

errorinfo::errorinfo(const errorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.errorinfo)
}

void errorinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

errorinfo::~errorinfo() {
  // @@protoc_insertion_point(destructor:common.errorinfo)
  SharedDtor();
}

void errorinfo::SharedDtor() {
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_info_;
  }
  if (this != default_instance_) {
  }
}

void errorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* errorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return errorinfo_descriptor_;
}

const errorinfo& errorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

errorinfo* errorinfo::default_instance_ = NULL;

errorinfo* errorinfo::New() const {
  return new errorinfo;
}

void errorinfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_code_ = 0;
    if (has_error_info()) {
      if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool errorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.errorinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.err_code error_code = 1 [default = ASK_FAIL];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::err_code_IsValid(value)) {
            set_error_code(static_cast< ::common::err_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_info;
        break;
      }

      // optional bytes error_info = 2;
      case 2: {
        if (tag == 18) {
         parse_error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.errorinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.errorinfo)
  return false;
#undef DO_
}

void errorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.errorinfo)
  // optional .common.err_code error_code = 1 [default = ASK_FAIL];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional bytes error_info = 2;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.errorinfo)
}

::google::protobuf::uint8* errorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.errorinfo)
  // optional .common.err_code error_code = 1 [default = ASK_FAIL];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional bytes error_info = 2;
  if (has_error_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.errorinfo)
  return target;
}

int errorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.err_code error_code = 1 [default = ASK_FAIL];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional bytes error_info = 2;
    if (has_error_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void errorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const errorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const errorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void errorinfo::MergeFrom(const errorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_info()) {
      set_error_info(from.error_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void errorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void errorinfo::CopyFrom(const errorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool errorinfo::IsInitialized() const {

  return true;
}

void errorinfo::Swap(errorinfo* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(error_info_, other->error_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata errorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = errorinfo_descriptor_;
  metadata.reflection = errorinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int result_info::kResultCodeFieldNumber;
const int result_info::kResultMsgFieldNumber;
#endif  // !_MSC_VER

result_info::result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.result_info)
}

void result_info::InitAsDefaultInstance() {
}

result_info::result_info(const result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.result_info)
}

void result_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = -1;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

result_info::~result_info() {
  // @@protoc_insertion_point(destructor:common.result_info)
  SharedDtor();
}

void result_info::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return result_info_descriptor_;
}

const result_info& result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

result_info* result_info::default_instance_ = NULL;

result_info* result_info::New() const {
  return new result_info;
}

void result_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_code_ = -1;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.result_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_code_type result_code = 1 [default = FAILED];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::result_code_type_IsValid(value)) {
            set_result_code(static_cast< ::common::result_code_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // optional bytes result_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.result_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.result_info)
  return false;
#undef DO_
}

void result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.result_info)
  // optional .common.result_code_type result_code = 1 [default = FAILED];
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.result_info)
}

::google::protobuf::uint8* result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.result_info)
  // optional .common.result_code_type result_code = 1 [default = FAILED];
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.result_info)
  return target;
}

int result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_code_type result_code = 1 [default = FAILED];
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // optional bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void result_info::MergeFrom(const result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void result_info::CopyFrom(const result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool result_info::IsInitialized() const {

  return true;
}

void result_info::Swap(result_info* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = result_info_descriptor_;
  metadata.reflection = result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int identity_card::kIdTypeFieldNumber;
const int identity_card::kIdCardFieldNumber;
const int identity_card::kCardAddressFieldNumber;
#endif  // !_MSC_VER

identity_card::identity_card()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.identity_card)
}

void identity_card::InitAsDefaultInstance() {
}

identity_card::identity_card(const identity_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.identity_card)
}

void identity_card::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_type_ = 0;
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

identity_card::~identity_card() {
  // @@protoc_insertion_point(destructor:common.identity_card)
  SharedDtor();
}

void identity_card::SharedDtor() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_address_;
  }
  if (this != default_instance_) {
  }
}

void identity_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* identity_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return identity_card_descriptor_;
}

const identity_card& identity_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

identity_card* identity_card::default_instance_ = NULL;

identity_card* identity_card::New() const {
  return new identity_card;
}

void identity_card::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_type_ = 0;
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_card_address()) {
      if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        card_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool identity_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.identity_card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.user_id_type id_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::user_id_type_IsValid(value)) {
            set_id_type(static_cast< ::common::user_id_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card_address;
        break;
      }

      // optional bytes card_address = 3;
      case 3: {
        if (tag == 26) {
         parse_card_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_card_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.identity_card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.identity_card)
  return false;
#undef DO_
}

void identity_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.identity_card)
  // optional .common.user_id_type id_type = 1;
  if (has_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id_type(), output);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id_card(), output);
  }

  // optional bytes card_address = 3;
  if (has_card_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->card_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.identity_card)
}

::google::protobuf::uint8* identity_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.identity_card)
  // optional .common.user_id_type id_type = 1;
  if (has_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id_type(), target);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id_card(), target);
  }

  // optional bytes card_address = 3;
  if (has_card_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->card_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.identity_card)
  return target;
}

int identity_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.user_id_type id_type = 1;
    if (has_id_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id_type());
    }

    // optional bytes id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes card_address = 3;
    if (has_card_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->card_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void identity_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const identity_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const identity_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void identity_card::MergeFrom(const identity_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_type()) {
      set_id_type(from.id_type());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_card_address()) {
      set_card_address(from.card_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void identity_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void identity_card::CopyFrom(const identity_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool identity_card::IsInitialized() const {

  return true;
}

void identity_card::Swap(identity_card* other) {
  if (other != this) {
    std::swap(id_type_, other->id_type_);
    std::swap(id_card_, other->id_card_);
    std::swap(card_address_, other->card_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata identity_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = identity_card_descriptor_;
  metadata.reflection = identity_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int location_info::kProvinceFieldNumber;
const int location_info::kCityFieldNumber;
const int location_info::kAreaFieldNumber;
const int location_info::kLongitudeFieldNumber;
const int location_info::kLatitudeFieldNumber;
const int location_info::kEventTimeFieldNumber;
const int location_info::kRealPositionFieldNumber;
#endif  // !_MSC_VER

location_info::location_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.location_info)
}

void location_info::InitAsDefaultInstance() {
}

location_info::location_info(const location_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.location_info)
}

void location_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

location_info::~location_info() {
  // @@protoc_insertion_point(destructor:common.location_info)
  SharedDtor();
}

void location_info::SharedDtor() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete area_;
  }
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_;
  }
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_;
  }
  if (event_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_time_;
  }
  if (real_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_position_;
  }
  if (this != default_instance_) {
  }
}

void location_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* location_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return location_info_descriptor_;
}

const location_info& location_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

location_info* location_info::default_instance_ = NULL;

location_info* location_info::New() const {
  return new location_info;
}

void location_info::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        area_->clear();
      }
    }
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        longitude_->clear();
      }
    }
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latitude_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_time_->clear();
      }
    }
    if (has_real_position()) {
      if (real_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_position_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool location_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.location_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional bytes city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_area;
        break;
      }

      // optional bytes area = 3;
      case 3: {
        if (tag == 26) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_longitude;
        break;
      }

      // optional bytes longitude = 4;
      case 4: {
        if (tag == 34) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_longitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_latitude;
        break;
      }

      // optional bytes latitude = 5;
      case 5: {
        if (tag == 42) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_event_time;
        break;
      }

      // optional bytes event_time = 6;
      case 6: {
        if (tag == 50) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_real_position;
        break;
      }

      // optional bytes real_position = 7;
      case 7: {
        if (tag == 58) {
         parse_real_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.location_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.location_info)
  return false;
#undef DO_
}

void location_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.location_info)
  // optional bytes province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->province(), output);
  }

  // optional bytes city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->city(), output);
  }

  // optional bytes area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->area(), output);
  }

  // optional bytes longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->longitude(), output);
  }

  // optional bytes latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->latitude(), output);
  }

  // optional bytes event_time = 6;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->event_time(), output);
  }

  // optional bytes real_position = 7;
  if (has_real_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->real_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.location_info)
}

::google::protobuf::uint8* location_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.location_info)
  // optional bytes province = 1;
  if (has_province()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->province(), target);
  }

  // optional bytes city = 2;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->city(), target);
  }

  // optional bytes area = 3;
  if (has_area()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->area(), target);
  }

  // optional bytes longitude = 4;
  if (has_longitude()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->longitude(), target);
  }

  // optional bytes latitude = 5;
  if (has_latitude()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->latitude(), target);
  }

  // optional bytes event_time = 6;
  if (has_event_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->event_time(), target);
  }

  // optional bytes real_position = 7;
  if (has_real_position()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->real_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.location_info)
  return target;
}

int location_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->province());
    }

    // optional bytes city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional bytes area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->area());
    }

    // optional bytes longitude = 4;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->longitude());
    }

    // optional bytes latitude = 5;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->latitude());
    }

    // optional bytes event_time = 6;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_time());
    }

    // optional bytes real_position = 7;
    if (has_real_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void location_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const location_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const location_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void location_info::MergeFrom(const location_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_real_position()) {
      set_real_position(from.real_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void location_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_info::CopyFrom(const location_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_info::IsInitialized() const {

  return true;
}

void location_info::Swap(location_info* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(area_, other->area_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(event_time_, other->event_time_);
    std::swap(real_position_, other->real_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata location_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = location_info_descriptor_;
  metadata.reflection = location_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int school_info::kCollegeNameFieldNumber;
const int school_info::kEductionDegreeFieldNumber;
const int school_info::kEducationCategoryFieldNumber;
const int school_info::kGraduateYearFieldNumber;
const int school_info::kEnrollmentYearFieldNumber;
const int school_info::kMajorSubjectFieldNumber;
const int school_info::kSchoolLocPrivonceFieldNumber;
const int school_info::kSchoolLocCityFieldNumber;
const int school_info::kSchoolLocAreaFieldNumber;
const int school_info::kSchoolNameFieldNumber;
const int school_info::kSchoolAddressFieldNumber;
const int school_info::kEduconclusionFieldNumber;
const int school_info::kEduformFieldNumber;
const int school_info::kEdurecordFieldNumber;
const int school_info::kEduschoolFieldNumber;
const int school_info::kEdutypeFieldNumber;
const int school_info::kSourceFieldNumber;
const int school_info::kSpecialtyFieldNumber;
#endif  // !_MSC_VER

school_info::school_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.school_info)
}

void school_info::InitAsDefaultInstance() {
}

school_info::school_info(const school_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.school_info)
}

void school_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  collegename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eductiondegree_ = 1;
  educationcategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graduateyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enrollmentyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  major_subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_loc_privonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_loc_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_loc_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  educonclusion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edurecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edutype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specialty_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

school_info::~school_info() {
  // @@protoc_insertion_point(destructor:common.school_info)
  SharedDtor();
}

void school_info::SharedDtor() {
  if (collegename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collegename_;
  }
  if (educationcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educationcategory_;
  }
  if (graduateyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduateyear_;
  }
  if (enrollmentyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enrollmentyear_;
  }
  if (major_subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete major_subject_;
  }
  if (school_loc_privonce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_loc_privonce_;
  }
  if (school_loc_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_loc_city_;
  }
  if (school_loc_area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_loc_area_;
  }
  if (school_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_name_;
  }
  if (school_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_address_;
  }
  if (educonclusion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educonclusion_;
  }
  if (eduform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eduform_;
  }
  if (edurecord_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete edurecord_;
  }
  if (eduschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eduschool_;
  }
  if (edutype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete edutype_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (specialty_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specialty_;
  }
  if (this != default_instance_) {
  }
}

void school_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* school_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return school_info_descriptor_;
}

const school_info& school_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

school_info* school_info::default_instance_ = NULL;

school_info* school_info::New() const {
  return new school_info;
}

void school_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_collegename()) {
      if (collegename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        collegename_->clear();
      }
    }
    eductiondegree_ = 1;
    if (has_educationcategory()) {
      if (educationcategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        educationcategory_->clear();
      }
    }
    if (has_graduateyear()) {
      if (graduateyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graduateyear_->clear();
      }
    }
    if (has_enrollmentyear()) {
      if (enrollmentyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enrollmentyear_->clear();
      }
    }
    if (has_major_subject()) {
      if (major_subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        major_subject_->clear();
      }
    }
    if (has_school_loc_privonce()) {
      if (school_loc_privonce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_loc_privonce_->clear();
      }
    }
    if (has_school_loc_city()) {
      if (school_loc_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_loc_city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_school_loc_area()) {
      if (school_loc_area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_loc_area_->clear();
      }
    }
    if (has_school_name()) {
      if (school_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_name_->clear();
      }
    }
    if (has_school_address()) {
      if (school_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_address_->clear();
      }
    }
    if (has_educonclusion()) {
      if (educonclusion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        educonclusion_->clear();
      }
    }
    if (has_eduform()) {
      if (eduform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eduform_->clear();
      }
    }
    if (has_edurecord()) {
      if (edurecord_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        edurecord_->clear();
      }
    }
    if (has_eduschool()) {
      if (eduschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eduschool_->clear();
      }
    }
    if (has_edutype()) {
      if (edutype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        edutype_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_specialty()) {
      if (specialty_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        specialty_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool school_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.school_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes collegeName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collegename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eductionDegree;
        break;
      }

      // optional .common.degree eductionDegree = 2;
      case 2: {
        if (tag == 16) {
         parse_eductionDegree:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::degree_IsValid(value)) {
            set_eductiondegree(static_cast< ::common::degree >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_educationCategory;
        break;
      }

      // optional bytes educationCategory = 3;
      case 3: {
        if (tag == 26) {
         parse_educationCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_educationcategory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_graduateYear;
        break;
      }

      // optional bytes graduateYear = 4;
      case 4: {
        if (tag == 34) {
         parse_graduateYear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graduateyear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_enrollmentYear;
        break;
      }

      // optional bytes enrollmentYear = 5;
      case 5: {
        if (tag == 42) {
         parse_enrollmentYear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enrollmentyear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_major_subject;
        break;
      }

      // optional bytes major_subject = 6;
      case 6: {
        if (tag == 50) {
         parse_major_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_major_subject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_school_loc_privonce;
        break;
      }

      // optional bytes school_loc_privonce = 7;
      case 7: {
        if (tag == 58) {
         parse_school_loc_privonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_loc_privonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_school_loc_city;
        break;
      }

      // optional bytes school_loc_city = 8;
      case 8: {
        if (tag == 66) {
         parse_school_loc_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_loc_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_school_loc_area;
        break;
      }

      // optional bytes school_loc_area = 9;
      case 9: {
        if (tag == 74) {
         parse_school_loc_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_loc_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_school_name;
        break;
      }

      // optional bytes school_name = 10;
      case 10: {
        if (tag == 82) {
         parse_school_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_school_address;
        break;
      }

      // optional bytes school_address = 11;
      case 11: {
        if (tag == 90) {
         parse_school_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_educonclusion;
        break;
      }

      // optional bytes educonclusion = 12;
      case 12: {
        if (tag == 98) {
         parse_educonclusion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_educonclusion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_eduform;
        break;
      }

      // optional bytes eduform = 13;
      case 13: {
        if (tag == 106) {
         parse_eduform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eduform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_edurecord;
        break;
      }

      // optional bytes edurecord = 14;
      case 14: {
        if (tag == 114) {
         parse_edurecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_edurecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_eduschool;
        break;
      }

      // optional bytes eduschool = 15;
      case 15: {
        if (tag == 122) {
         parse_eduschool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eduschool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_edutype;
        break;
      }

      // optional bytes edutype = 16;
      case 16: {
        if (tag == 130) {
         parse_edutype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_edutype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_source;
        break;
      }

      // optional bytes source = 18;
      case 18: {
        if (tag == 146) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_specialty;
        break;
      }

      // optional bytes specialty = 19;
      case 19: {
        if (tag == 154) {
         parse_specialty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_specialty()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.school_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.school_info)
  return false;
#undef DO_
}

void school_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.school_info)
  // optional bytes collegeName = 1;
  if (has_collegename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->collegename(), output);
  }

  // optional .common.degree eductionDegree = 2;
  if (has_eductiondegree()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eductiondegree(), output);
  }

  // optional bytes educationCategory = 3;
  if (has_educationcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->educationcategory(), output);
  }

  // optional bytes graduateYear = 4;
  if (has_graduateyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->graduateyear(), output);
  }

  // optional bytes enrollmentYear = 5;
  if (has_enrollmentyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->enrollmentyear(), output);
  }

  // optional bytes major_subject = 6;
  if (has_major_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->major_subject(), output);
  }

  // optional bytes school_loc_privonce = 7;
  if (has_school_loc_privonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->school_loc_privonce(), output);
  }

  // optional bytes school_loc_city = 8;
  if (has_school_loc_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->school_loc_city(), output);
  }

  // optional bytes school_loc_area = 9;
  if (has_school_loc_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->school_loc_area(), output);
  }

  // optional bytes school_name = 10;
  if (has_school_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->school_name(), output);
  }

  // optional bytes school_address = 11;
  if (has_school_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->school_address(), output);
  }

  // optional bytes educonclusion = 12;
  if (has_educonclusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->educonclusion(), output);
  }

  // optional bytes eduform = 13;
  if (has_eduform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->eduform(), output);
  }

  // optional bytes edurecord = 14;
  if (has_edurecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->edurecord(), output);
  }

  // optional bytes eduschool = 15;
  if (has_eduschool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->eduschool(), output);
  }

  // optional bytes edutype = 16;
  if (has_edutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->edutype(), output);
  }

  // optional bytes source = 18;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->source(), output);
  }

  // optional bytes specialty = 19;
  if (has_specialty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->specialty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.school_info)
}

::google::protobuf::uint8* school_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.school_info)
  // optional bytes collegeName = 1;
  if (has_collegename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->collegename(), target);
  }

  // optional .common.degree eductionDegree = 2;
  if (has_eductiondegree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eductiondegree(), target);
  }

  // optional bytes educationCategory = 3;
  if (has_educationcategory()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->educationcategory(), target);
  }

  // optional bytes graduateYear = 4;
  if (has_graduateyear()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->graduateyear(), target);
  }

  // optional bytes enrollmentYear = 5;
  if (has_enrollmentyear()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->enrollmentyear(), target);
  }

  // optional bytes major_subject = 6;
  if (has_major_subject()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->major_subject(), target);
  }

  // optional bytes school_loc_privonce = 7;
  if (has_school_loc_privonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->school_loc_privonce(), target);
  }

  // optional bytes school_loc_city = 8;
  if (has_school_loc_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->school_loc_city(), target);
  }

  // optional bytes school_loc_area = 9;
  if (has_school_loc_area()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->school_loc_area(), target);
  }

  // optional bytes school_name = 10;
  if (has_school_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->school_name(), target);
  }

  // optional bytes school_address = 11;
  if (has_school_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->school_address(), target);
  }

  // optional bytes educonclusion = 12;
  if (has_educonclusion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->educonclusion(), target);
  }

  // optional bytes eduform = 13;
  if (has_eduform()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->eduform(), target);
  }

  // optional bytes edurecord = 14;
  if (has_edurecord()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->edurecord(), target);
  }

  // optional bytes eduschool = 15;
  if (has_eduschool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->eduschool(), target);
  }

  // optional bytes edutype = 16;
  if (has_edutype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->edutype(), target);
  }

  // optional bytes source = 18;
  if (has_source()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->source(), target);
  }

  // optional bytes specialty = 19;
  if (has_specialty()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->specialty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.school_info)
  return target;
}

int school_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes collegeName = 1;
    if (has_collegename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->collegename());
    }

    // optional .common.degree eductionDegree = 2;
    if (has_eductiondegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eductiondegree());
    }

    // optional bytes educationCategory = 3;
    if (has_educationcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->educationcategory());
    }

    // optional bytes graduateYear = 4;
    if (has_graduateyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graduateyear());
    }

    // optional bytes enrollmentYear = 5;
    if (has_enrollmentyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enrollmentyear());
    }

    // optional bytes major_subject = 6;
    if (has_major_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->major_subject());
    }

    // optional bytes school_loc_privonce = 7;
    if (has_school_loc_privonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_loc_privonce());
    }

    // optional bytes school_loc_city = 8;
    if (has_school_loc_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_loc_city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes school_loc_area = 9;
    if (has_school_loc_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_loc_area());
    }

    // optional bytes school_name = 10;
    if (has_school_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_name());
    }

    // optional bytes school_address = 11;
    if (has_school_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_address());
    }

    // optional bytes educonclusion = 12;
    if (has_educonclusion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->educonclusion());
    }

    // optional bytes eduform = 13;
    if (has_eduform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eduform());
    }

    // optional bytes edurecord = 14;
    if (has_edurecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->edurecord());
    }

    // optional bytes eduschool = 15;
    if (has_eduschool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eduschool());
    }

    // optional bytes edutype = 16;
    if (has_edutype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->edutype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes source = 18;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source());
    }

    // optional bytes specialty = 19;
    if (has_specialty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->specialty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void school_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const school_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const school_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void school_info::MergeFrom(const school_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collegename()) {
      set_collegename(from.collegename());
    }
    if (from.has_eductiondegree()) {
      set_eductiondegree(from.eductiondegree());
    }
    if (from.has_educationcategory()) {
      set_educationcategory(from.educationcategory());
    }
    if (from.has_graduateyear()) {
      set_graduateyear(from.graduateyear());
    }
    if (from.has_enrollmentyear()) {
      set_enrollmentyear(from.enrollmentyear());
    }
    if (from.has_major_subject()) {
      set_major_subject(from.major_subject());
    }
    if (from.has_school_loc_privonce()) {
      set_school_loc_privonce(from.school_loc_privonce());
    }
    if (from.has_school_loc_city()) {
      set_school_loc_city(from.school_loc_city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_school_loc_area()) {
      set_school_loc_area(from.school_loc_area());
    }
    if (from.has_school_name()) {
      set_school_name(from.school_name());
    }
    if (from.has_school_address()) {
      set_school_address(from.school_address());
    }
    if (from.has_educonclusion()) {
      set_educonclusion(from.educonclusion());
    }
    if (from.has_eduform()) {
      set_eduform(from.eduform());
    }
    if (from.has_edurecord()) {
      set_edurecord(from.edurecord());
    }
    if (from.has_eduschool()) {
      set_eduschool(from.eduschool());
    }
    if (from.has_edutype()) {
      set_edutype(from.edutype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_specialty()) {
      set_specialty(from.specialty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void school_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void school_info::CopyFrom(const school_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool school_info::IsInitialized() const {

  return true;
}

void school_info::Swap(school_info* other) {
  if (other != this) {
    std::swap(collegename_, other->collegename_);
    std::swap(eductiondegree_, other->eductiondegree_);
    std::swap(educationcategory_, other->educationcategory_);
    std::swap(graduateyear_, other->graduateyear_);
    std::swap(enrollmentyear_, other->enrollmentyear_);
    std::swap(major_subject_, other->major_subject_);
    std::swap(school_loc_privonce_, other->school_loc_privonce_);
    std::swap(school_loc_city_, other->school_loc_city_);
    std::swap(school_loc_area_, other->school_loc_area_);
    std::swap(school_name_, other->school_name_);
    std::swap(school_address_, other->school_address_);
    std::swap(educonclusion_, other->educonclusion_);
    std::swap(eduform_, other->eduform_);
    std::swap(edurecord_, other->edurecord_);
    std::swap(eduschool_, other->eduschool_);
    std::swap(edutype_, other->edutype_);
    std::swap(source_, other->source_);
    std::swap(specialty_, other->specialty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata school_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = school_info_descriptor_;
  metadata.reflection = school_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int relation_contact::kRelationshipFieldNumber;
const int relation_contact::kContactNameFieldNumber;
const int relation_contact::kMobilephoneFieldNumber;
#endif  // !_MSC_VER

relation_contact::relation_contact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.relation_contact)
}

void relation_contact::InitAsDefaultInstance() {
}

relation_contact::relation_contact(const relation_contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.relation_contact)
}

void relation_contact::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relationship_ = 1;
  contact_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

relation_contact::~relation_contact() {
  // @@protoc_insertion_point(destructor:common.relation_contact)
  SharedDtor();
}

void relation_contact::SharedDtor() {
  if (contact_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contact_name_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (this != default_instance_) {
  }
}

void relation_contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* relation_contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return relation_contact_descriptor_;
}

const relation_contact& relation_contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

relation_contact* relation_contact::default_instance_ = NULL;

relation_contact* relation_contact::New() const {
  return new relation_contact;
}

void relation_contact::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    relationship_ = 1;
    if (has_contact_name()) {
      if (contact_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contact_name_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool relation_contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.relation_contact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.relation_type relationship = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::relation_type_IsValid(value)) {
            set_relationship(static_cast< ::common::relation_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_name;
        break;
      }

      // optional bytes contact_name = 2;
      case 2: {
        if (tag == 18) {
         parse_contact_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contact_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobilephone;
        break;
      }

      // optional bytes mobilephone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobilephone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.relation_contact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.relation_contact)
  return false;
#undef DO_
}

void relation_contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.relation_contact)
  // optional .common.relation_type relationship = 1;
  if (has_relationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relationship(), output);
  }

  // optional bytes contact_name = 2;
  if (has_contact_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contact_name(), output);
  }

  // optional bytes mobilephone = 3;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobilephone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.relation_contact)
}

::google::protobuf::uint8* relation_contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.relation_contact)
  // optional .common.relation_type relationship = 1;
  if (has_relationship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relationship(), target);
  }

  // optional bytes contact_name = 2;
  if (has_contact_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contact_name(), target);
  }

  // optional bytes mobilephone = 3;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobilephone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.relation_contact)
  return target;
}

int relation_contact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.relation_type relationship = 1;
    if (has_relationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relationship());
    }

    // optional bytes contact_name = 2;
    if (has_contact_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contact_name());
    }

    // optional bytes mobilephone = 3;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void relation_contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const relation_contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const relation_contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void relation_contact::MergeFrom(const relation_contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relationship()) {
      set_relationship(from.relationship());
    }
    if (from.has_contact_name()) {
      set_contact_name(from.contact_name());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void relation_contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void relation_contact::CopyFrom(const relation_contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool relation_contact::IsInitialized() const {

  return true;
}

void relation_contact::Swap(relation_contact* other) {
  if (other != this) {
    std::swap(relationship_, other->relationship_);
    std::swap(contact_name_, other->contact_name_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata relation_contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = relation_contact_descriptor_;
  metadata.reflection = relation_contact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int family_info::kMarriageFieldNumber;
const int family_info::kChildredStatusFieldNumber;
const int family_info::kContactListFieldNumber;
#endif  // !_MSC_VER

family_info::family_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.family_info)
}

void family_info::InitAsDefaultInstance() {
}

family_info::family_info(const family_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.family_info)
}

void family_info::SharedCtor() {
  _cached_size_ = 0;
  marriage_ = 0;
  childred_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

family_info::~family_info() {
  // @@protoc_insertion_point(destructor:common.family_info)
  SharedDtor();
}

void family_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void family_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* family_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return family_info_descriptor_;
}

const family_info& family_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

family_info* family_info::default_instance_ = NULL;

family_info* family_info::New() const {
  return new family_info;
}

void family_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<family_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(marriage_, childred_status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  contact_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool family_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.family_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.marriage_status marriage = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::marriage_status_IsValid(value)) {
            set_marriage(static_cast< ::common::marriage_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childred_status;
        break;
      }

      // optional bool childred_status = 2;
      case 2: {
        if (tag == 16) {
         parse_childred_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &childred_status_)));
          set_has_childred_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contact_list;
        break;
      }

      // repeated .common.relation_contact contact_list = 3;
      case 3: {
        if (tag == 26) {
         parse_contact_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contact_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.family_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.family_info)
  return false;
#undef DO_
}

void family_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.family_info)
  // optional .common.marriage_status marriage = 1;
  if (has_marriage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->marriage(), output);
  }

  // optional bool childred_status = 2;
  if (has_childred_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->childred_status(), output);
  }

  // repeated .common.relation_contact contact_list = 3;
  for (int i = 0; i < this->contact_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contact_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.family_info)
}

::google::protobuf::uint8* family_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.family_info)
  // optional .common.marriage_status marriage = 1;
  if (has_marriage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->marriage(), target);
  }

  // optional bool childred_status = 2;
  if (has_childred_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->childred_status(), target);
  }

  // repeated .common.relation_contact contact_list = 3;
  for (int i = 0; i < this->contact_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contact_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.family_info)
  return target;
}

int family_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.marriage_status marriage = 1;
    if (has_marriage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->marriage());
    }

    // optional bool childred_status = 2;
    if (has_childred_status()) {
      total_size += 1 + 1;
    }

  }
  // repeated .common.relation_contact contact_list = 3;
  total_size += 1 * this->contact_list_size();
  for (int i = 0; i < this->contact_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void family_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const family_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const family_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void family_info::MergeFrom(const family_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_list_.MergeFrom(from.contact_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marriage()) {
      set_marriage(from.marriage());
    }
    if (from.has_childred_status()) {
      set_childred_status(from.childred_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void family_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void family_info::CopyFrom(const family_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool family_info::IsInitialized() const {

  return true;
}

void family_info::Swap(family_info* other) {
  if (other != this) {
    std::swap(marriage_, other->marriage_);
    std::swap(childred_status_, other->childred_status_);
    contact_list_.Swap(&other->contact_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata family_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = family_info_descriptor_;
  metadata.reflection = family_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int property_info::kPtypeFieldNumber;
const int property_info::kValuationFieldNumber;
const int property_info::kLoanStatusFieldNumber;
const int property_info::kDebtInfoFieldNumber;
const int property_info::kAgeLimitFieldNumber;
const int property_info::kLocProvinceFieldNumber;
const int property_info::kLocCityFieldNumber;
const int property_info::kLocAreaFieldNumber;
const int property_info::kMeasurementFieldNumber;
const int property_info::kExtendInfoFieldNumber;
#endif  // !_MSC_VER

property_info::property_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.property_info)
}

void property_info::InitAsDefaultInstance() {
}

property_info::property_info(const property_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.property_info)
}

void property_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ptype_ = 1;
  valuation_ = 0;
  loan_status_ = false;
  debt_info_ = 0;
  age_limit_ = 0;
  loc_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loc_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loc_area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurement_ = 0;
  extend_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

property_info::~property_info() {
  // @@protoc_insertion_point(destructor:common.property_info)
  SharedDtor();
}

void property_info::SharedDtor() {
  if (loc_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_province_;
  }
  if (loc_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_city_;
  }
  if (loc_area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_area_;
  }
  if (extend_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_info_;
  }
  if (this != default_instance_) {
  }
}

void property_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* property_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return property_info_descriptor_;
}

const property_info& property_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

property_info* property_info::default_instance_ = NULL;

property_info* property_info::New() const {
  return new property_info;
}

void property_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<property_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(valuation_, debt_info_);
    ptype_ = 1;
    age_limit_ = 0;
    if (has_loc_province()) {
      if (loc_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loc_province_->clear();
      }
    }
    if (has_loc_city()) {
      if (loc_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loc_city_->clear();
      }
    }
    if (has_loc_area()) {
      if (loc_area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loc_area_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    measurement_ = 0;
    if (has_extend_info()) {
      if (extend_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extend_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool property_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.property_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.property_type ptype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::property_type_IsValid(value)) {
            set_ptype(static_cast< ::common::property_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_valuation;
        break;
      }

      // optional int32 valuation = 2;
      case 2: {
        if (tag == 16) {
         parse_valuation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuation_)));
          set_has_valuation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loan_status;
        break;
      }

      // optional bool loan_status = 3;
      case 3: {
        if (tag == 24) {
         parse_loan_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loan_status_)));
          set_has_loan_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_debt_info;
        break;
      }

      // optional int32 debt_info = 4;
      case 4: {
        if (tag == 32) {
         parse_debt_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debt_info_)));
          set_has_debt_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_age_limit;
        break;
      }

      // optional int32 age_limit = 5;
      case 5: {
        if (tag == 40) {
         parse_age_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_limit_)));
          set_has_age_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loc_province;
        break;
      }

      // optional bytes loc_province = 6;
      case 6: {
        if (tag == 50) {
         parse_loc_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loc_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loc_city;
        break;
      }

      // optional bytes loc_city = 7;
      case 7: {
        if (tag == 58) {
         parse_loc_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loc_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loc_area;
        break;
      }

      // optional bytes loc_area = 8;
      case 8: {
        if (tag == 66) {
         parse_loc_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loc_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_measurement;
        break;
      }

      // optional int32 measurement = 9;
      case 9: {
        if (tag == 72) {
         parse_measurement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measurement_)));
          set_has_measurement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extend_info;
        break;
      }

      // optional bytes extend_info = 10;
      case 10: {
        if (tag == 82) {
         parse_extend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extend_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.property_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.property_info)
  return false;
#undef DO_
}

void property_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.property_info)
  // optional .common.property_type ptype = 1;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ptype(), output);
  }

  // optional int32 valuation = 2;
  if (has_valuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->valuation(), output);
  }

  // optional bool loan_status = 3;
  if (has_loan_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->loan_status(), output);
  }

  // optional int32 debt_info = 4;
  if (has_debt_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->debt_info(), output);
  }

  // optional int32 age_limit = 5;
  if (has_age_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->age_limit(), output);
  }

  // optional bytes loc_province = 6;
  if (has_loc_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->loc_province(), output);
  }

  // optional bytes loc_city = 7;
  if (has_loc_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->loc_city(), output);
  }

  // optional bytes loc_area = 8;
  if (has_loc_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->loc_area(), output);
  }

  // optional int32 measurement = 9;
  if (has_measurement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->measurement(), output);
  }

  // optional bytes extend_info = 10;
  if (has_extend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->extend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.property_info)
}

::google::protobuf::uint8* property_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.property_info)
  // optional .common.property_type ptype = 1;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptype(), target);
  }

  // optional int32 valuation = 2;
  if (has_valuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->valuation(), target);
  }

  // optional bool loan_status = 3;
  if (has_loan_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->loan_status(), target);
  }

  // optional int32 debt_info = 4;
  if (has_debt_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->debt_info(), target);
  }

  // optional int32 age_limit = 5;
  if (has_age_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->age_limit(), target);
  }

  // optional bytes loc_province = 6;
  if (has_loc_province()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->loc_province(), target);
  }

  // optional bytes loc_city = 7;
  if (has_loc_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->loc_city(), target);
  }

  // optional bytes loc_area = 8;
  if (has_loc_area()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->loc_area(), target);
  }

  // optional int32 measurement = 9;
  if (has_measurement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->measurement(), target);
  }

  // optional bytes extend_info = 10;
  if (has_extend_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->extend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.property_info)
  return target;
}

int property_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.property_type ptype = 1;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptype());
    }

    // optional int32 valuation = 2;
    if (has_valuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuation());
    }

    // optional bool loan_status = 3;
    if (has_loan_status()) {
      total_size += 1 + 1;
    }

    // optional int32 debt_info = 4;
    if (has_debt_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debt_info());
    }

    // optional int32 age_limit = 5;
    if (has_age_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_limit());
    }

    // optional bytes loc_province = 6;
    if (has_loc_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loc_province());
    }

    // optional bytes loc_city = 7;
    if (has_loc_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loc_city());
    }

    // optional bytes loc_area = 8;
    if (has_loc_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loc_area());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 measurement = 9;
    if (has_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->measurement());
    }

    // optional bytes extend_info = 10;
    if (has_extend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void property_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const property_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const property_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void property_info::MergeFrom(const property_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_valuation()) {
      set_valuation(from.valuation());
    }
    if (from.has_loan_status()) {
      set_loan_status(from.loan_status());
    }
    if (from.has_debt_info()) {
      set_debt_info(from.debt_info());
    }
    if (from.has_age_limit()) {
      set_age_limit(from.age_limit());
    }
    if (from.has_loc_province()) {
      set_loc_province(from.loc_province());
    }
    if (from.has_loc_city()) {
      set_loc_city(from.loc_city());
    }
    if (from.has_loc_area()) {
      set_loc_area(from.loc_area());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_measurement()) {
      set_measurement(from.measurement());
    }
    if (from.has_extend_info()) {
      set_extend_info(from.extend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void property_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void property_info::CopyFrom(const property_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool property_info::IsInitialized() const {

  return true;
}

void property_info::Swap(property_info* other) {
  if (other != this) {
    std::swap(ptype_, other->ptype_);
    std::swap(valuation_, other->valuation_);
    std::swap(loan_status_, other->loan_status_);
    std::swap(debt_info_, other->debt_info_);
    std::swap(age_limit_, other->age_limit_);
    std::swap(loc_province_, other->loc_province_);
    std::swap(loc_city_, other->loc_city_);
    std::swap(loc_area_, other->loc_area_);
    std::swap(measurement_, other->measurement_);
    std::swap(extend_info_, other->extend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata property_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = property_info_descriptor_;
  metadata.reflection = property_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int work_info::kCompanyNameFieldNumber;
const int work_info::kPositionFieldNumber;
const int work_info::kDepartmentFieldNumber;
const int work_info::kCompanyLocFieldNumber;
const int work_info::kIndustryFieldNumber;
const int work_info::kYearsFieldNumber;
const int work_info::kIncomeFieldNumber;
const int work_info::kWorkLocFieldNumber;
#endif  // !_MSC_VER

work_info::work_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.work_info)
}

void work_info::InitAsDefaultInstance() {
  company_loc_ = const_cast< ::common::location_info*>(&::common::location_info::default_instance());
  work_loc_ = const_cast< ::common::location_info*>(&::common::location_info::default_instance());
}

work_info::work_info(const work_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.work_info)
}

void work_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_loc_ = NULL;
  industry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  years_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  income_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  work_loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

work_info::~work_info() {
  // @@protoc_insertion_point(destructor:common.work_info)
  SharedDtor();
}

void work_info::SharedDtor() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (industry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete industry_;
  }
  if (years_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete years_;
  }
  if (income_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete income_;
  }
  if (this != default_instance_) {
    delete company_loc_;
    delete work_loc_;
  }
}

void work_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* work_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return work_info_descriptor_;
}

const work_info& work_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

work_info* work_info::default_instance_ = NULL;

work_info* work_info::New() const {
  return new work_info;
}

void work_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        company_name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        department_->clear();
      }
    }
    if (has_company_loc()) {
      if (company_loc_ != NULL) company_loc_->::common::location_info::Clear();
    }
    if (has_industry()) {
      if (industry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        industry_->clear();
      }
    }
    if (has_years()) {
      if (years_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        years_->clear();
      }
    }
    if (has_income()) {
      if (income_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        income_->clear();
      }
    }
    if (has_work_loc()) {
      if (work_loc_ != NULL) work_loc_->::common::location_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool work_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.work_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes company_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_company_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional bytes position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_department;
        break;
      }

      // optional bytes department = 3;
      case 3: {
        if (tag == 26) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_company_loc;
        break;
      }

      // optional .common.location_info company_loc = 4;
      case 4: {
        if (tag == 34) {
         parse_company_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_company_loc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_industry;
        break;
      }

      // optional bytes industry = 5;
      case 5: {
        if (tag == 42) {
         parse_industry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_industry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_years;
        break;
      }

      // optional bytes years = 6;
      case 6: {
        if (tag == 50) {
         parse_years:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_years()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_income;
        break;
      }

      // optional bytes income = 7;
      case 7: {
        if (tag == 58) {
         parse_income:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_income()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_work_loc;
        break;
      }

      // optional .common.location_info work_loc = 8;
      case 8: {
        if (tag == 66) {
         parse_work_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work_loc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.work_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.work_info)
  return false;
#undef DO_
}

void work_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.work_info)
  // optional bytes company_name = 1;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->company_name(), output);
  }

  // optional bytes position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->position(), output);
  }

  // optional bytes department = 3;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->department(), output);
  }

  // optional .common.location_info company_loc = 4;
  if (has_company_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->company_loc(), output);
  }

  // optional bytes industry = 5;
  if (has_industry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->industry(), output);
  }

  // optional bytes years = 6;
  if (has_years()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->years(), output);
  }

  // optional bytes income = 7;
  if (has_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->income(), output);
  }

  // optional .common.location_info work_loc = 8;
  if (has_work_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->work_loc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.work_info)
}

::google::protobuf::uint8* work_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.work_info)
  // optional bytes company_name = 1;
  if (has_company_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->company_name(), target);
  }

  // optional bytes position = 2;
  if (has_position()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->position(), target);
  }

  // optional bytes department = 3;
  if (has_department()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->department(), target);
  }

  // optional .common.location_info company_loc = 4;
  if (has_company_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->company_loc(), target);
  }

  // optional bytes industry = 5;
  if (has_industry()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->industry(), target);
  }

  // optional bytes years = 6;
  if (has_years()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->years(), target);
  }

  // optional bytes income = 7;
  if (has_income()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->income(), target);
  }

  // optional .common.location_info work_loc = 8;
  if (has_work_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->work_loc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.work_info)
  return target;
}

int work_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes company_name = 1;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->company_name());
    }

    // optional bytes position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position());
    }

    // optional bytes department = 3;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->department());
    }

    // optional .common.location_info company_loc = 4;
    if (has_company_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->company_loc());
    }

    // optional bytes industry = 5;
    if (has_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->industry());
    }

    // optional bytes years = 6;
    if (has_years()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->years());
    }

    // optional bytes income = 7;
    if (has_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->income());
    }

    // optional .common.location_info work_loc = 8;
    if (has_work_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->work_loc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void work_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const work_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const work_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void work_info::MergeFrom(const work_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_company_loc()) {
      mutable_company_loc()->::common::location_info::MergeFrom(from.company_loc());
    }
    if (from.has_industry()) {
      set_industry(from.industry());
    }
    if (from.has_years()) {
      set_years(from.years());
    }
    if (from.has_income()) {
      set_income(from.income());
    }
    if (from.has_work_loc()) {
      mutable_work_loc()->::common::location_info::MergeFrom(from.work_loc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void work_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void work_info::CopyFrom(const work_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool work_info::IsInitialized() const {

  return true;
}

void work_info::Swap(work_info* other) {
  if (other != this) {
    std::swap(company_name_, other->company_name_);
    std::swap(position_, other->position_);
    std::swap(department_, other->department_);
    std::swap(company_loc_, other->company_loc_);
    std::swap(industry_, other->industry_);
    std::swap(years_, other->years_);
    std::swap(income_, other->income_);
    std::swap(work_loc_, other->work_loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata work_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = work_info_descriptor_;
  metadata.reflection = work_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int card_info::kBankcodeFieldNumber;
const int card_info::kCardnoFieldNumber;
const int card_info::kAccountnameFieldNumber;
const int card_info::kEmailFieldNumber;
const int card_info::kMaxLineofcreditFieldNumber;
const int card_info::kMaxreturnamountFieldNumber;
const int card_info::kVerifytimeFieldNumber;
const int card_info::kCreatetimeFieldNumber;
const int card_info::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

card_info::card_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.card_info)
}

void card_info::InitAsDefaultInstance() {
}

card_info::card_info(const card_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.card_info)
}

void card_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bankcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxlineofcredit_ = 0;
  maxreturnamount_ = 0;
  verifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_info::~card_info() {
  // @@protoc_insertion_point(destructor:common.card_info)
  SharedDtor();
}

void card_info::SharedDtor() {
  if (bankcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankcode_;
  }
  if (cardno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardno_;
  }
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (verifytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verifytime_;
  }
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void card_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_info_descriptor_;
}

const card_info& card_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

card_info* card_info::default_instance_ = NULL;

card_info* card_info::New() const {
  return new card_info;
}

void card_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<card_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(maxlineofcredit_, maxreturnamount_);
    if (has_bankcode()) {
      if (bankcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bankcode_->clear();
      }
    }
    if (has_cardno()) {
      if (cardno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cardno_->clear();
      }
    }
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountname_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_verifytime()) {
      if (verifytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verifytime_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
  }
  if (has_updatetime()) {
    if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      updatetime_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.card_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bankcode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bankcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cardno;
        break;
      }

      // optional bytes cardno = 2;
      case 2: {
        if (tag == 18) {
         parse_cardno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accountname;
        break;
      }

      // optional bytes accountname = 3;
      case 3: {
        if (tag == 26) {
         parse_accountname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accountname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional bytes email = 4;
      case 4: {
        if (tag == 34) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_maxLineofcredit;
        break;
      }

      // optional double maxLineofcredit = 5;
      case 5: {
        if (tag == 41) {
         parse_maxLineofcredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlineofcredit_)));
          set_has_maxlineofcredit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_maxreturnamount;
        break;
      }

      // optional double maxreturnamount = 6;
      case 6: {
        if (tag == 49) {
         parse_maxreturnamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxreturnamount_)));
          set_has_maxreturnamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_verifytime;
        break;
      }

      // optional bytes verifytime = 7;
      case 7: {
        if (tag == 58) {
         parse_verifytime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verifytime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_createtime;
        break;
      }

      // optional bytes createtime = 8;
      case 8: {
        if (tag == 66) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_createtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_updatetime;
        break;
      }

      // optional bytes updatetime = 9;
      case 9: {
        if (tag == 74) {
         parse_updatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.card_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.card_info)
  return false;
#undef DO_
}

void card_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.card_info)
  // optional bytes bankcode = 1;
  if (has_bankcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bankcode(), output);
  }

  // optional bytes cardno = 2;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cardno(), output);
  }

  // optional bytes accountname = 3;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->accountname(), output);
  }

  // optional bytes email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->email(), output);
  }

  // optional double maxLineofcredit = 5;
  if (has_maxlineofcredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxlineofcredit(), output);
  }

  // optional double maxreturnamount = 6;
  if (has_maxreturnamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maxreturnamount(), output);
  }

  // optional bytes verifytime = 7;
  if (has_verifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->verifytime(), output);
  }

  // optional bytes createtime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->createtime(), output);
  }

  // optional bytes updatetime = 9;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.card_info)
}

::google::protobuf::uint8* card_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.card_info)
  // optional bytes bankcode = 1;
  if (has_bankcode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bankcode(), target);
  }

  // optional bytes cardno = 2;
  if (has_cardno()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cardno(), target);
  }

  // optional bytes accountname = 3;
  if (has_accountname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->accountname(), target);
  }

  // optional bytes email = 4;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->email(), target);
  }

  // optional double maxLineofcredit = 5;
  if (has_maxlineofcredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxlineofcredit(), target);
  }

  // optional double maxreturnamount = 6;
  if (has_maxreturnamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maxreturnamount(), target);
  }

  // optional bytes verifytime = 7;
  if (has_verifytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->verifytime(), target);
  }

  // optional bytes createtime = 8;
  if (has_createtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->createtime(), target);
  }

  // optional bytes updatetime = 9;
  if (has_updatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.card_info)
  return target;
}

int card_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bankcode = 1;
    if (has_bankcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bankcode());
    }

    // optional bytes cardno = 2;
    if (has_cardno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cardno());
    }

    // optional bytes accountname = 3;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accountname());
    }

    // optional bytes email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

    // optional double maxLineofcredit = 5;
    if (has_maxlineofcredit()) {
      total_size += 1 + 8;
    }

    // optional double maxreturnamount = 6;
    if (has_maxreturnamount()) {
      total_size += 1 + 8;
    }

    // optional bytes verifytime = 7;
    if (has_verifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verifytime());
    }

    // optional bytes createtime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes updatetime = 9;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_info::MergeFrom(const card_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankcode()) {
      set_bankcode(from.bankcode());
    }
    if (from.has_cardno()) {
      set_cardno(from.cardno());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_maxlineofcredit()) {
      set_maxlineofcredit(from.maxlineofcredit());
    }
    if (from.has_maxreturnamount()) {
      set_maxreturnamount(from.maxreturnamount());
    }
    if (from.has_verifytime()) {
      set_verifytime(from.verifytime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_info::CopyFrom(const card_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_info::IsInitialized() const {

  return true;
}

void card_info::Swap(card_info* other) {
  if (other != this) {
    std::swap(bankcode_, other->bankcode_);
    std::swap(cardno_, other->cardno_);
    std::swap(accountname_, other->accountname_);
    std::swap(email_, other->email_);
    std::swap(maxlineofcredit_, other->maxlineofcredit_);
    std::swap(maxreturnamount_, other->maxreturnamount_);
    std::swap(verifytime_, other->verifytime_);
    std::swap(createtime_, other->createtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_info_descriptor_;
  metadata.reflection = card_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_info::kUserIdFieldNumber;
const int user_info::kIdCardFieldNumber;
const int user_info::kRealNameFieldNumber;
const int user_info::kUserNicknameFieldNumber;
const int user_info::kMobilePhoneFieldNumber;
const int user_info::kEmailFieldNumber;
const int user_info::kAddressFieldNumber;
const int user_info::kBankCartFieldNumber;
const int user_info::kIpFieldNumber;
const int user_info::kMacFieldNumber;
const int user_info::kImeiFieldNumber;
const int user_info::kBlackBoxFieldNumber;
const int user_info::kIsProveFieldNumber;
const int user_info::kAvatarFieldNumber;
const int user_info::kSchoolinfoFieldNumber;
const int user_info::kFamilyFieldNumber;
const int user_info::kPropertyFieldNumber;
const int user_info::kLoginFromOthersFieldNumber;
const int user_info::kLoginIdFieldNumber;
const int user_info::kUserAccountFieldNumber;
const int user_info::kUserStatusFieldNumber;
const int user_info::kSexTypeFieldNumber;
const int user_info::kHomtownFieldNumber;
const int user_info::kBirthdayFieldNumber;
const int user_info::kLivingLocInfoFieldNumber;
const int user_info::kAgeFieldNumber;
const int user_info::kWorkInfoFieldNumber;
const int user_info::kIstuandaiFieldNumber;
const int user_info::kIsjcreditFieldNumber;
const int user_info::kIsdcreditFieldNumber;
const int user_info::kIsverifyFieldNumber;
const int user_info::kEducationapplytypeFieldNumber;
const int user_info::kEducationapplytimeFieldNumber;
const int user_info::kCardinfoFieldNumber;
#endif  // !_MSC_VER

user_info::user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.user_info)
}

void user_info::InitAsDefaultInstance() {
  id_card_ = const_cast< ::common::identity_card*>(&::common::identity_card::default_instance());
  schoolinfo_ = const_cast< ::common::school_info*>(&::common::school_info::default_instance());
  family_ = const_cast< ::common::family_info*>(&::common::family_info::default_instance());
  living_loc_info_ = const_cast< ::common::location_info*>(&::common::location_info::default_instance());
  work_info__ = const_cast< ::common::work_info*>(&::common::work_info::default_instance());
}

user_info::user_info(const user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.user_info)
}

void user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = NULL;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_cart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blackbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_prove_ = false;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schoolinfo_ = NULL;
  family_ = NULL;
  login_from_others_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_status_ = 0;
  sex_type_ = 1;
  homtown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  living_loc_info_ = NULL;
  age_ = 0;
  work_info__ = NULL;
  istuandai_ = 0;
  isjcredit_ = 0;
  isdcredit_ = 0;
  isverify_ = 0;
  educationapplytype_ = 0;
  educationapplytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info::~user_info() {
  // @@protoc_insertion_point(destructor:common.user_info)
  SharedDtor();
}

void user_info::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (bank_cart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bank_cart_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (blackbox_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blackbox_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (login_from_others_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_from_others_;
  }
  if (login_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_id_;
  }
  if (user_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_account_;
  }
  if (homtown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete homtown_;
  }
  if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birthday_;
  }
  if (educationapplytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educationapplytime_;
  }
  if (this != default_instance_) {
    delete id_card_;
    delete schoolinfo_;
    delete family_;
    delete living_loc_info_;
    delete work_info__;
  }
}

void user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_descriptor_;
}

const user_info& user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

user_info* user_info::default_instance_ = NULL;

user_info* user_info::New() const {
  return new user_info;
}

void user_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != NULL) id_card_->::common::identity_card::Clear();
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_user_nickname()) {
      if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nickname_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_bank_cart()) {
      if (bank_cart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bank_cart_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_blackbox()) {
      if (blackbox_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blackbox_->clear();
      }
    }
    is_prove_ = false;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_schoolinfo()) {
      if (schoolinfo_ != NULL) schoolinfo_->::common::school_info::Clear();
    }
    if (has_family()) {
      if (family_ != NULL) family_->::common::family_info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16646144) {
    if (has_login_from_others()) {
      if (login_from_others_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_from_others_->clear();
      }
    }
    if (has_login_id()) {
      if (login_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_id_->clear();
      }
    }
    if (has_user_account()) {
      if (user_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_account_->clear();
      }
    }
    user_status_ = 0;
    sex_type_ = 1;
    if (has_homtown()) {
      if (homtown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        homtown_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        birthday_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(istuandai_, isverify_);
    if (has_living_loc_info()) {
      if (living_loc_info_ != NULL) living_loc_info_->::common::location_info::Clear();
    }
    age_ = 0;
    if (has_work_info_()) {
      if (work_info__ != NULL) work_info__->::common::work_info::Clear();
    }
    educationapplytype_ = 0;
  }
  if (has_educationapplytime()) {
    if (educationapplytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      educationapplytime_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  property_.Clear();
  cardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional .common.identity_card id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_nickname;
        break;
      }

      // optional bytes user_nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_user_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 5;
      case 5: {
        if (tag == 42) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional bytes email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_address;
        break;
      }

      // optional bytes address = 7;
      case 7: {
        if (tag == 58) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bank_cart;
        break;
      }

      // optional bytes bank_cart = 8;
      case 8: {
        if (tag == 66) {
         parse_bank_cart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bank_cart()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional bytes ip = 9;
      case 9: {
        if (tag == 74) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mac;
        break;
      }

      // optional bytes mac = 10;
      case 10: {
        if (tag == 82) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_imei;
        break;
      }

      // optional bytes imei = 11;
      case 11: {
        if (tag == 90) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imei()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_blackBox;
        break;
      }

      // optional bytes blackBox = 12;
      case 12: {
        if (tag == 98) {
         parse_blackBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blackbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_prove;
        break;
      }

      // optional bool is_prove = 13;
      case 13: {
        if (tag == 104) {
         parse_is_prove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_prove_)));
          set_has_is_prove();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 14;
      case 14: {
        if (tag == 114) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_schoolinfo;
        break;
      }

      // optional .common.school_info schoolinfo = 15;
      case 15: {
        if (tag == 122) {
         parse_schoolinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schoolinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_family;
        break;
      }

      // optional .common.family_info family = 16;
      case 16: {
        if (tag == 130) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_family()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_property;
        break;
      }

      // repeated .common.property_info property = 17;
      case 17: {
        if (tag == 138) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_property;
        if (input->ExpectTag(146)) goto parse_login_from_others;
        break;
      }

      // optional bytes login_from_others = 18;
      case 18: {
        if (tag == 146) {
         parse_login_from_others:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login_from_others()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_login_id;
        break;
      }

      // optional bytes login_id = 19;
      case 19: {
        if (tag == 154) {
         parse_login_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_user_account;
        break;
      }

      // optional bytes user_account = 20;
      case 20: {
        if (tag == 162) {
         parse_user_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_user_status;
        break;
      }

      // optional .common.tc_user_status user_status = 21;
      case 21: {
        if (tag == 168) {
         parse_user_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::tc_user_status_IsValid(value)) {
            set_user_status(static_cast< ::common::tc_user_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_sex_type;
        break;
      }

      // optional .common.sex sex_type = 22;
      case 22: {
        if (tag == 176) {
         parse_sex_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex_type(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_homtown;
        break;
      }

      // optional bytes homtown = 23;
      case 23: {
        if (tag == 186) {
         parse_homtown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_homtown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_birthday;
        break;
      }

      // optional bytes birthday = 24;
      case 24: {
        if (tag == 194) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_birthday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_living_loc_info;
        break;
      }

      // optional .common.location_info living_loc_info = 25;
      case 25: {
        if (tag == 202) {
         parse_living_loc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_living_loc_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_age;
        break;
      }

      // optional int32 age = 26;
      case 26: {
        if (tag == 208) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_work_info_;
        break;
      }

      // optional .common.work_info work_info_ = 27;
      case 27: {
        if (tag == 218) {
         parse_work_info_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work_info_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_istuandai;
        break;
      }

      // optional int32 istuandai = 28;
      case 28: {
        if (tag == 224) {
         parse_istuandai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istuandai_)));
          set_has_istuandai();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_isjcredit;
        break;
      }

      // optional int32 isjcredit = 29;
      case 29: {
        if (tag == 232) {
         parse_isjcredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isjcredit_)));
          set_has_isjcredit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_isdcredit;
        break;
      }

      // optional int32 isdcredit = 30;
      case 30: {
        if (tag == 240) {
         parse_isdcredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdcredit_)));
          set_has_isdcredit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_isverify;
        break;
      }

      // optional int32 isverify = 31;
      case 31: {
        if (tag == 248) {
         parse_isverify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isverify_)));
          set_has_isverify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_educationapplytype;
        break;
      }

      // optional int32 educationapplytype = 32;
      case 32: {
        if (tag == 256) {
         parse_educationapplytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &educationapplytype_)));
          set_has_educationapplytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_educationapplytime;
        break;
      }

      // optional bytes educationapplytime = 33;
      case 33: {
        if (tag == 266) {
         parse_educationapplytime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_educationapplytime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_cardinfo;
        break;
      }

      // repeated .common.card_info cardinfo = 34;
      case 34: {
        if (tag == 274) {
         parse_cardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_cardinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.user_info)
  return false;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.user_info)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional .common.identity_card id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id_card(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional bytes user_nickname = 4;
  if (has_user_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user_nickname(), output);
  }

  // optional bytes mobile_phone = 5;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->mobile_phone(), output);
  }

  // optional bytes email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->email(), output);
  }

  // optional bytes address = 7;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->address(), output);
  }

  // optional bytes bank_cart = 8;
  if (has_bank_cart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->bank_cart(), output);
  }

  // optional bytes ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->ip(), output);
  }

  // optional bytes mac = 10;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->mac(), output);
  }

  // optional bytes imei = 11;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->imei(), output);
  }

  // optional bytes blackBox = 12;
  if (has_blackbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->blackbox(), output);
  }

  // optional bool is_prove = 13;
  if (has_is_prove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_prove(), output);
  }

  // optional bytes avatar = 14;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->avatar(), output);
  }

  // optional .common.school_info schoolinfo = 15;
  if (has_schoolinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->schoolinfo(), output);
  }

  // optional .common.family_info family = 16;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->family(), output);
  }

  // repeated .common.property_info property = 17;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->property(i), output);
  }

  // optional bytes login_from_others = 18;
  if (has_login_from_others()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->login_from_others(), output);
  }

  // optional bytes login_id = 19;
  if (has_login_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->login_id(), output);
  }

  // optional bytes user_account = 20;
  if (has_user_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->user_account(), output);
  }

  // optional .common.tc_user_status user_status = 21;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->user_status(), output);
  }

  // optional .common.sex sex_type = 22;
  if (has_sex_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->sex_type(), output);
  }

  // optional bytes homtown = 23;
  if (has_homtown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->homtown(), output);
  }

  // optional bytes birthday = 24;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->birthday(), output);
  }

  // optional .common.location_info living_loc_info = 25;
  if (has_living_loc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->living_loc_info(), output);
  }

  // optional int32 age = 26;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->age(), output);
  }

  // optional .common.work_info work_info_ = 27;
  if (has_work_info_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->work_info_(), output);
  }

  // optional int32 istuandai = 28;
  if (has_istuandai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->istuandai(), output);
  }

  // optional int32 isjcredit = 29;
  if (has_isjcredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->isjcredit(), output);
  }

  // optional int32 isdcredit = 30;
  if (has_isdcredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isdcredit(), output);
  }

  // optional int32 isverify = 31;
  if (has_isverify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->isverify(), output);
  }

  // optional int32 educationapplytype = 32;
  if (has_educationapplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->educationapplytype(), output);
  }

  // optional bytes educationapplytime = 33;
  if (has_educationapplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      33, this->educationapplytime(), output);
  }

  // repeated .common.card_info cardinfo = 34;
  for (int i = 0; i < this->cardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->cardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.user_info)
}

::google::protobuf::uint8* user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.user_info)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional .common.identity_card id_card = 2;
  if (has_id_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id_card(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional bytes user_nickname = 4;
  if (has_user_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_nickname(), target);
  }

  // optional bytes mobile_phone = 5;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->mobile_phone(), target);
  }

  // optional bytes email = 6;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->email(), target);
  }

  // optional bytes address = 7;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->address(), target);
  }

  // optional bytes bank_cart = 8;
  if (has_bank_cart()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->bank_cart(), target);
  }

  // optional bytes ip = 9;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->ip(), target);
  }

  // optional bytes mac = 10;
  if (has_mac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->mac(), target);
  }

  // optional bytes imei = 11;
  if (has_imei()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->imei(), target);
  }

  // optional bytes blackBox = 12;
  if (has_blackbox()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->blackbox(), target);
  }

  // optional bool is_prove = 13;
  if (has_is_prove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_prove(), target);
  }

  // optional bytes avatar = 14;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->avatar(), target);
  }

  // optional .common.school_info schoolinfo = 15;
  if (has_schoolinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->schoolinfo(), target);
  }

  // optional .common.family_info family = 16;
  if (has_family()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->family(), target);
  }

  // repeated .common.property_info property = 17;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->property(i), target);
  }

  // optional bytes login_from_others = 18;
  if (has_login_from_others()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->login_from_others(), target);
  }

  // optional bytes login_id = 19;
  if (has_login_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->login_id(), target);
  }

  // optional bytes user_account = 20;
  if (has_user_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->user_account(), target);
  }

  // optional .common.tc_user_status user_status = 21;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->user_status(), target);
  }

  // optional .common.sex sex_type = 22;
  if (has_sex_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->sex_type(), target);
  }

  // optional bytes homtown = 23;
  if (has_homtown()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->homtown(), target);
  }

  // optional bytes birthday = 24;
  if (has_birthday()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->birthday(), target);
  }

  // optional .common.location_info living_loc_info = 25;
  if (has_living_loc_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->living_loc_info(), target);
  }

  // optional int32 age = 26;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->age(), target);
  }

  // optional .common.work_info work_info_ = 27;
  if (has_work_info_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->work_info_(), target);
  }

  // optional int32 istuandai = 28;
  if (has_istuandai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->istuandai(), target);
  }

  // optional int32 isjcredit = 29;
  if (has_isjcredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->isjcredit(), target);
  }

  // optional int32 isdcredit = 30;
  if (has_isdcredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isdcredit(), target);
  }

  // optional int32 isverify = 31;
  if (has_isverify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->isverify(), target);
  }

  // optional int32 educationapplytype = 32;
  if (has_educationapplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->educationapplytype(), target);
  }

  // optional bytes educationapplytime = 33;
  if (has_educationapplytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->educationapplytime(), target);
  }

  // repeated .common.card_info cardinfo = 34;
  for (int i = 0; i < this->cardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->cardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.user_info)
  return target;
}

int user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional .common.identity_card id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id_card());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes user_nickname = 4;
    if (has_user_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nickname());
    }

    // optional bytes mobile_phone = 5;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

    // optional bytes address = 7;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional bytes bank_cart = 8;
    if (has_bank_cart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bank_cart());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes mac = 10;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac());
    }

    // optional bytes imei = 11;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imei());
    }

    // optional bytes blackBox = 12;
    if (has_blackbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blackbox());
    }

    // optional bool is_prove = 13;
    if (has_is_prove()) {
      total_size += 1 + 1;
    }

    // optional bytes avatar = 14;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional .common.school_info schoolinfo = 15;
    if (has_schoolinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schoolinfo());
    }

    // optional .common.family_info family = 16;
    if (has_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->family());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bytes login_from_others = 18;
    if (has_login_from_others()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->login_from_others());
    }

    // optional bytes login_id = 19;
    if (has_login_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->login_id());
    }

    // optional bytes user_account = 20;
    if (has_user_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_account());
    }

    // optional .common.tc_user_status user_status = 21;
    if (has_user_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_status());
    }

    // optional .common.sex sex_type = 22;
    if (has_sex_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex_type());
    }

    // optional bytes homtown = 23;
    if (has_homtown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->homtown());
    }

    // optional bytes birthday = 24;
    if (has_birthday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->birthday());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .common.location_info living_loc_info = 25;
    if (has_living_loc_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->living_loc_info());
    }

    // optional int32 age = 26;
    if (has_age()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional .common.work_info work_info_ = 27;
    if (has_work_info_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->work_info_());
    }

    // optional int32 istuandai = 28;
    if (has_istuandai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istuandai());
    }

    // optional int32 isjcredit = 29;
    if (has_isjcredit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isjcredit());
    }

    // optional int32 isdcredit = 30;
    if (has_isdcredit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdcredit());
    }

    // optional int32 isverify = 31;
    if (has_isverify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isverify());
    }

    // optional int32 educationapplytype = 32;
    if (has_educationapplytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->educationapplytype());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bytes educationapplytime = 33;
    if (has_educationapplytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->educationapplytime());
    }

  }
  // repeated .common.property_info property = 17;
  total_size += 2 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }

  // repeated .common.card_info cardinfo = 34;
  total_size += 2 * this->cardinfo_size();
  for (int i = 0; i < this->cardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  cardinfo_.MergeFrom(from.cardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_id_card()) {
      mutable_id_card()->::common::identity_card::MergeFrom(from.id_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_user_nickname()) {
      set_user_nickname(from.user_nickname());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_bank_cart()) {
      set_bank_cart(from.bank_cart());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_blackbox()) {
      set_blackbox(from.blackbox());
    }
    if (from.has_is_prove()) {
      set_is_prove(from.is_prove());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_schoolinfo()) {
      mutable_schoolinfo()->::common::school_info::MergeFrom(from.schoolinfo());
    }
    if (from.has_family()) {
      mutable_family()->::common::family_info::MergeFrom(from.family());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_login_from_others()) {
      set_login_from_others(from.login_from_others());
    }
    if (from.has_login_id()) {
      set_login_id(from.login_id());
    }
    if (from.has_user_account()) {
      set_user_account(from.user_account());
    }
    if (from.has_user_status()) {
      set_user_status(from.user_status());
    }
    if (from.has_sex_type()) {
      set_sex_type(from.sex_type());
    }
    if (from.has_homtown()) {
      set_homtown(from.homtown());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_living_loc_info()) {
      mutable_living_loc_info()->::common::location_info::MergeFrom(from.living_loc_info());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_work_info_()) {
      mutable_work_info_()->::common::work_info::MergeFrom(from.work_info_());
    }
    if (from.has_istuandai()) {
      set_istuandai(from.istuandai());
    }
    if (from.has_isjcredit()) {
      set_isjcredit(from.isjcredit());
    }
    if (from.has_isdcredit()) {
      set_isdcredit(from.isdcredit());
    }
    if (from.has_isverify()) {
      set_isverify(from.isverify());
    }
    if (from.has_educationapplytype()) {
      set_educationapplytype(from.educationapplytype());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_educationapplytime()) {
      set_educationapplytime(from.educationapplytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info::IsInitialized() const {

  return true;
}

void user_info::Swap(user_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(id_card_, other->id_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(user_nickname_, other->user_nickname_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(email_, other->email_);
    std::swap(address_, other->address_);
    std::swap(bank_cart_, other->bank_cart_);
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(imei_, other->imei_);
    std::swap(blackbox_, other->blackbox_);
    std::swap(is_prove_, other->is_prove_);
    std::swap(avatar_, other->avatar_);
    std::swap(schoolinfo_, other->schoolinfo_);
    std::swap(family_, other->family_);
    property_.Swap(&other->property_);
    std::swap(login_from_others_, other->login_from_others_);
    std::swap(login_id_, other->login_id_);
    std::swap(user_account_, other->user_account_);
    std::swap(user_status_, other->user_status_);
    std::swap(sex_type_, other->sex_type_);
    std::swap(homtown_, other->homtown_);
    std::swap(birthday_, other->birthday_);
    std::swap(living_loc_info_, other->living_loc_info_);
    std::swap(age_, other->age_);
    std::swap(work_info__, other->work_info__);
    std::swap(istuandai_, other->istuandai_);
    std::swap(isjcredit_, other->isjcredit_);
    std::swap(isdcredit_, other->isdcredit_);
    std::swap(isverify_, other->isverify_);
    std::swap(educationapplytype_, other->educationapplytype_);
    std::swap(educationapplytime_, other->educationapplytime_);
    cardinfo_.Swap(&other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_descriptor_;
  metadata.reflection = user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_basic_identification::kIdentityCardFieldNumber;
const int user_basic_identification::kMobilePhoneFieldNumber;
const int user_basic_identification::kRealNameFieldNumber;
#endif  // !_MSC_VER

user_basic_identification::user_basic_identification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.user_basic_identification)
}

void user_basic_identification::InitAsDefaultInstance() {
}

user_basic_identification::user_basic_identification(const user_basic_identification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.user_basic_identification)
}

void user_basic_identification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_identification::~user_basic_identification() {
  // @@protoc_insertion_point(destructor:common.user_basic_identification)
  SharedDtor();
}

void user_basic_identification::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (this != default_instance_) {
  }
}

void user_basic_identification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_identification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_identification_descriptor_;
}

const user_basic_identification& user_basic_identification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

user_basic_identification* user_basic_identification::default_instance_ = NULL;

user_basic_identification* user_basic_identification::New() const {
  return new user_basic_identification;
}

void user_basic_identification::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_identification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.user_basic_identification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identity_card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.user_basic_identification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.user_basic_identification)
  return false;
#undef DO_
}

void user_basic_identification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.user_basic_identification)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identity_card(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.user_basic_identification)
}

::google::protobuf::uint8* user_basic_identification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.user_basic_identification)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identity_card(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.user_basic_identification)
  return target;
}

int user_basic_identification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identity_card = 1;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_identification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_identification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_identification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_identification::MergeFrom(const user_basic_identification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_identification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_identification::CopyFrom(const user_basic_identification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_identification::IsInitialized() const {

  return true;
}

void user_basic_identification::Swap(user_basic_identification* other) {
  if (other != this) {
    std::swap(identity_card_, other->identity_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(real_name_, other->real_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_identification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_identification_descriptor_;
  metadata.reflection = user_basic_identification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int common_ask_header::kResponseTopicFieldNumber;
#endif  // !_MSC_VER

common_ask_header::common_ask_header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.common_ask_header)
}

void common_ask_header::InitAsDefaultInstance() {
}

common_ask_header::common_ask_header(const common_ask_header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.common_ask_header)
}

void common_ask_header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

common_ask_header::~common_ask_header() {
  // @@protoc_insertion_point(destructor:common.common_ask_header)
  SharedDtor();
}

void common_ask_header::SharedDtor() {
  if (response_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_topic_;
  }
  if (this != default_instance_) {
  }
}

void common_ask_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* common_ask_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return common_ask_header_descriptor_;
}

const common_ask_header& common_ask_header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

common_ask_header* common_ask_header::default_instance_ = NULL;

common_ask_header* common_ask_header::New() const {
  return new common_ask_header;
}

void common_ask_header::Clear() {
  if (has_response_topic()) {
    if (response_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      response_topic_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool common_ask_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.common_ask_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes response_topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.common_ask_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.common_ask_header)
  return false;
#undef DO_
}

void common_ask_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.common_ask_header)
  // optional bytes response_topic = 1;
  if (has_response_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->response_topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.common_ask_header)
}

::google::protobuf::uint8* common_ask_header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.common_ask_header)
  // optional bytes response_topic = 1;
  if (has_response_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response_topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.common_ask_header)
  return target;
}

int common_ask_header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes response_topic = 1;
    if (has_response_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response_topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void common_ask_header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const common_ask_header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const common_ask_header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void common_ask_header::MergeFrom(const common_ask_header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_topic()) {
      set_response_topic(from.response_topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void common_ask_header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void common_ask_header::CopyFrom(const common_ask_header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool common_ask_header::IsInitialized() const {

  return true;
}

void common_ask_header::Swap(common_ask_header* other) {
  if (other != this) {
    std::swap(response_topic_, other->response_topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata common_ask_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = common_ask_header_descriptor_;
  metadata.reflection = common_ask_header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)
