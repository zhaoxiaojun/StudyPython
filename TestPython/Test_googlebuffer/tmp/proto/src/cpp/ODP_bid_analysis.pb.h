// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ODP_bid_analysis.proto

#ifndef PROTOBUF_ODP_5fbid_5fanalysis_2eproto__INCLUDED
#define PROTOBUF_ODP_5fbid_5fanalysis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace ODP_bid_analysis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

class statistics_info;
class bid_count_info;
class area_name;
class bid_area_info;
class bid_detail_info;
class statistics_info_ask;
class statistics_info_ans;
class detail_info_ask;
class detail_info_ans;
class different_rate_fullbid_time_ask;
class different_rate_fullbid_time_ans;
class different_rate_fullbid_details_ask;
class province_city_inquire_ask;
class province_city_inquire_ans;
class bid_area_distribution_ask;
class bid_area_distribution_ans;
class bid_area_distribution_detail_ask;

enum ask_type {
  page_bid_interest_rate = 1,
  page_repayment_type = 2,
  page_limit_time = 3,
  page_borrow_mount = 4,
  page_bid_speed = 5,
  page_bid_status = 6,
  page_bid_runoff = 7,
  page_bid_interest_rate_tick_no = 8,
  page_repayment_type_tick_no = 9,
  page_limit_time_tick_no = 10,
  page_borrow_mount_tick_no = 11,
  page_bid_speed_tick_no = 12,
  page_bid_status_tick_no = 13,
  page_bid_runoff_tick_no = 14
};
bool ask_type_IsValid(int value);
const ask_type ask_type_MIN = page_bid_interest_rate;
const ask_type ask_type_MAX = page_bid_runoff_tick_no;
const int ask_type_ARRAYSIZE = ask_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ask_type_descriptor();
inline const ::std::string& ask_type_Name(ask_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ask_type_descriptor(), value);
}
inline bool ask_type_Parse(
    const ::std::string& name, ask_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ask_type>(
    ask_type_descriptor(), name, value);
}
enum full_bid_ask_type {
  full_bid_statics = 1,
  full_bid_tick_no = 2
};
bool full_bid_ask_type_IsValid(int value);
const full_bid_ask_type full_bid_ask_type_MIN = full_bid_statics;
const full_bid_ask_type full_bid_ask_type_MAX = full_bid_tick_no;
const int full_bid_ask_type_ARRAYSIZE = full_bid_ask_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* full_bid_ask_type_descriptor();
inline const ::std::string& full_bid_ask_type_Name(full_bid_ask_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    full_bid_ask_type_descriptor(), value);
}
inline bool full_bid_ask_type_Parse(
    const ::std::string& name, full_bid_ask_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<full_bid_ask_type>(
    full_bid_ask_type_descriptor(), name, value);
}
// ===================================================================

class statistics_info : public ::google::protobuf::Message {
 public:
  statistics_info();
  virtual ~statistics_info();

  statistics_info(const statistics_info& from);

  inline statistics_info& operator=(const statistics_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistics_info& default_instance();

  void Swap(statistics_info* other);

  // implements Message ----------------------------------------------

  statistics_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistics_info& from);
  void MergeFrom(const statistics_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tick_no = 1;
  inline bool has_tick_no() const;
  inline void clear_tick_no();
  static const int kTickNoFieldNumber = 1;
  inline ::google::protobuf::int32 tick_no() const;
  inline void set_tick_no(::google::protobuf::int32 value);

  // optional bytes tick_name = 2;
  inline bool has_tick_name() const;
  inline void clear_tick_name();
  static const int kTickNameFieldNumber = 2;
  inline const ::std::string& tick_name() const;
  inline void set_tick_name(const ::std::string& value);
  inline void set_tick_name(const char* value);
  inline void set_tick_name(const void* value, size_t size);
  inline ::std::string* mutable_tick_name();
  inline ::std::string* release_tick_name();
  inline void set_allocated_tick_name(::std::string* tick_name);

  // optional int32 bid_count = 3;
  inline bool has_bid_count() const;
  inline void clear_bid_count();
  static const int kBidCountFieldNumber = 3;
  inline ::google::protobuf::int32 bid_count() const;
  inline void set_bid_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.statistics_info)
 private:
  inline void set_has_tick_no();
  inline void clear_has_tick_no();
  inline void set_has_tick_name();
  inline void clear_has_tick_name();
  inline void set_has_bid_count();
  inline void clear_has_bid_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tick_name_;
  ::google::protobuf::int32 tick_no_;
  ::google::protobuf::int32 bid_count_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static statistics_info* default_instance_;
};
// -------------------------------------------------------------------

class bid_count_info : public ::google::protobuf::Message {
 public:
  bid_count_info();
  virtual ~bid_count_info();

  bid_count_info(const bid_count_info& from);

  inline bid_count_info& operator=(const bid_count_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_count_info& default_instance();

  void Swap(bid_count_info* other);

  // implements Message ----------------------------------------------

  bid_count_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_count_info& from);
  void MergeFrom(const bid_count_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tick_no = 1;
  inline bool has_tick_no() const;
  inline void clear_tick_no();
  static const int kTickNoFieldNumber = 1;
  inline ::google::protobuf::int32 tick_no() const;
  inline void set_tick_no(::google::protobuf::int32 value);

  // optional bytes tick_name = 2;
  inline bool has_tick_name() const;
  inline void clear_tick_name();
  static const int kTickNameFieldNumber = 2;
  inline const ::std::string& tick_name() const;
  inline void set_tick_name(const ::std::string& value);
  inline void set_tick_name(const char* value);
  inline void set_tick_name(const void* value, size_t size);
  inline ::std::string* mutable_tick_name();
  inline ::std::string* release_tick_name();
  inline void set_allocated_tick_name(::std::string* tick_name);

  // repeated .ODP_bid_analysis.statistics_info info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ODP_bid_analysis::statistics_info& info(int index) const;
  inline ::ODP_bid_analysis::statistics_info* mutable_info(int index);
  inline ::ODP_bid_analysis::statistics_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.bid_count_info)
 private:
  inline void set_has_tick_no();
  inline void clear_has_tick_no();
  inline void set_has_tick_name();
  inline void clear_has_tick_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tick_name_;
  ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info > info_;
  ::google::protobuf::int32 tick_no_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static bid_count_info* default_instance_;
};
// -------------------------------------------------------------------

class area_name : public ::google::protobuf::Message {
 public:
  area_name();
  virtual ~area_name();

  area_name(const area_name& from);

  inline area_name& operator=(const area_name& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const area_name& default_instance();

  void Swap(area_name* other);

  // implements Message ----------------------------------------------

  area_name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const area_name& from);
  void MergeFrom(const area_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 area_id = 1;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  inline ::google::protobuf::int32 area_id() const;
  inline void set_area_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.area_name)
 private:
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 area_id_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static area_name* default_instance_;
};
// -------------------------------------------------------------------

class bid_area_info : public ::google::protobuf::Message {
 public:
  bid_area_info();
  virtual ~bid_area_info();

  bid_area_info(const bid_area_info& from);

  inline bid_area_info& operator=(const bid_area_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_area_info& default_instance();

  void Swap(bid_area_info* other);

  // implements Message ----------------------------------------------

  bid_area_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_area_info& from);
  void MergeFrom(const bid_area_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.area_name province = 1;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 1;
  inline const ::ODP_bid_analysis::area_name& province() const;
  inline ::ODP_bid_analysis::area_name* mutable_province();
  inline ::ODP_bid_analysis::area_name* release_province();
  inline void set_allocated_province(::ODP_bid_analysis::area_name* province);

  // optional .ODP_bid_analysis.area_name city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::ODP_bid_analysis::area_name& city() const;
  inline ::ODP_bid_analysis::area_name* mutable_city();
  inline ::ODP_bid_analysis::area_name* release_city();
  inline void set_allocated_city(::ODP_bid_analysis::area_name* city);

  // optional int32 bid_count = 3;
  inline bool has_bid_count() const;
  inline void clear_bid_count();
  static const int kBidCountFieldNumber = 3;
  inline ::google::protobuf::int32 bid_count() const;
  inline void set_bid_count(::google::protobuf::int32 value);

  // optional float bid_count_rate = 4;
  inline bool has_bid_count_rate() const;
  inline void clear_bid_count_rate();
  static const int kBidCountRateFieldNumber = 4;
  inline float bid_count_rate() const;
  inline void set_bid_count_rate(float value);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.bid_area_info)
 private:
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_bid_count();
  inline void clear_has_bid_count();
  inline void set_has_bid_count_rate();
  inline void clear_has_bid_count_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ODP_bid_analysis::area_name* province_;
  ::ODP_bid_analysis::area_name* city_;
  ::google::protobuf::int32 bid_count_;
  float bid_count_rate_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static bid_area_info* default_instance_;
};
// -------------------------------------------------------------------

class bid_detail_info : public ::google::protobuf::Message {
 public:
  bid_detail_info();
  virtual ~bid_detail_info();

  bid_detail_info(const bid_detail_info& from);

  inline bid_detail_info& operator=(const bid_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_detail_info& default_instance();

  void Swap(bid_detail_info* other);

  // implements Message ----------------------------------------------

  bid_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_detail_info& from);
  void MergeFrom(const bid_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional bytes NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes mobile_no = 3;
  inline bool has_mobile_no() const;
  inline void clear_mobile_no();
  static const int kMobileNoFieldNumber = 3;
  inline const ::std::string& mobile_no() const;
  inline void set_mobile_no(const ::std::string& value);
  inline void set_mobile_no(const char* value);
  inline void set_mobile_no(const void* value, size_t size);
  inline ::std::string* mutable_mobile_no();
  inline ::std::string* release_mobile_no();
  inline void set_allocated_mobile_no(::std::string* mobile_no);

  // optional bytes id_card_no = 4;
  inline bool has_id_card_no() const;
  inline void clear_id_card_no();
  static const int kIdCardNoFieldNumber = 4;
  inline const ::std::string& id_card_no() const;
  inline void set_id_card_no(const ::std::string& value);
  inline void set_id_card_no(const char* value);
  inline void set_id_card_no(const void* value, size_t size);
  inline ::std::string* mutable_id_card_no();
  inline ::std::string* release_id_card_no();
  inline void set_allocated_id_card_no(::std::string* id_card_no);

  // optional float amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline float amount() const;
  inline void set_amount(float value);

  // optional bytes datetime = 6;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 6;
  inline const ::std::string& datetime() const;
  inline void set_datetime(const ::std::string& value);
  inline void set_datetime(const char* value);
  inline void set_datetime(const void* value, size_t size);
  inline ::std::string* mutable_datetime();
  inline ::std::string* release_datetime();
  inline void set_allocated_datetime(::std::string* datetime);

  // optional bytes rate = 7;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 7;
  inline const ::std::string& rate() const;
  inline void set_rate(const ::std::string& value);
  inline void set_rate(const char* value);
  inline void set_rate(const void* value, size_t size);
  inline ::std::string* mutable_rate();
  inline ::std::string* release_rate();
  inline void set_allocated_rate(::std::string* rate);

  // optional bytes guarantee_rate = 8;
  inline bool has_guarantee_rate() const;
  inline void clear_guarantee_rate();
  static const int kGuaranteeRateFieldNumber = 8;
  inline const ::std::string& guarantee_rate() const;
  inline void set_guarantee_rate(const ::std::string& value);
  inline void set_guarantee_rate(const char* value);
  inline void set_guarantee_rate(const void* value, size_t size);
  inline ::std::string* mutable_guarantee_rate();
  inline ::std::string* release_guarantee_rate();
  inline void set_allocated_guarantee_rate(::std::string* guarantee_rate);

  // optional bytes repayment_type = 9;
  inline bool has_repayment_type() const;
  inline void clear_repayment_type();
  static const int kRepaymentTypeFieldNumber = 9;
  inline const ::std::string& repayment_type() const;
  inline void set_repayment_type(const ::std::string& value);
  inline void set_repayment_type(const char* value);
  inline void set_repayment_type(const void* value, size_t size);
  inline ::std::string* mutable_repayment_type();
  inline ::std::string* release_repayment_type();
  inline void set_allocated_repayment_type(::std::string* repayment_type);

  // optional bytes fullbiddate = 10;
  inline bool has_fullbiddate() const;
  inline void clear_fullbiddate();
  static const int kFullbiddateFieldNumber = 10;
  inline const ::std::string& fullbiddate() const;
  inline void set_fullbiddate(const ::std::string& value);
  inline void set_fullbiddate(const char* value);
  inline void set_fullbiddate(const void* value, size_t size);
  inline ::std::string* mutable_fullbiddate();
  inline ::std::string* release_fullbiddate();
  inline void set_allocated_fullbiddate(::std::string* fullbiddate);

  // optional int32 fullbidtime = 11;
  inline bool has_fullbidtime() const;
  inline void clear_fullbidtime();
  static const int kFullbidtimeFieldNumber = 11;
  inline ::google::protobuf::int32 fullbidtime() const;
  inline void set_fullbidtime(::google::protobuf::int32 value);

  // optional bytes borrowing_month = 12;
  inline bool has_borrowing_month() const;
  inline void clear_borrowing_month();
  static const int kBorrowingMonthFieldNumber = 12;
  inline const ::std::string& borrowing_month() const;
  inline void set_borrowing_month(const ::std::string& value);
  inline void set_borrowing_month(const char* value);
  inline void set_borrowing_month(const void* value, size_t size);
  inline ::std::string* mutable_borrowing_month();
  inline ::std::string* release_borrowing_month();
  inline void set_allocated_borrowing_month(::std::string* borrowing_month);

  // optional bytes state = 13;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 13;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const void* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // optional bytes bid_runoff_reason = 14;
  inline bool has_bid_runoff_reason() const;
  inline void clear_bid_runoff_reason();
  static const int kBidRunoffReasonFieldNumber = 14;
  inline const ::std::string& bid_runoff_reason() const;
  inline void set_bid_runoff_reason(const ::std::string& value);
  inline void set_bid_runoff_reason(const char* value);
  inline void set_bid_runoff_reason(const void* value, size_t size);
  inline ::std::string* mutable_bid_runoff_reason();
  inline ::std::string* release_bid_runoff_reason();
  inline void set_allocated_bid_runoff_reason(::std::string* bid_runoff_reason);

  // optional bytes province = 15;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 15;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const void* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // optional bytes city = 16;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 16;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.bid_detail_info)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_mobile_no();
  inline void clear_has_mobile_no();
  inline void set_has_id_card_no();
  inline void clear_has_id_card_no();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_guarantee_rate();
  inline void clear_has_guarantee_rate();
  inline void set_has_repayment_type();
  inline void clear_has_repayment_type();
  inline void set_has_fullbiddate();
  inline void clear_has_fullbiddate();
  inline void set_has_fullbidtime();
  inline void clear_has_fullbidtime();
  inline void set_has_borrowing_month();
  inline void clear_has_borrowing_month();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_bid_runoff_reason();
  inline void clear_has_bid_runoff_reason();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* nickname_;
  ::std::string* mobile_no_;
  ::std::string* id_card_no_;
  ::std::string* datetime_;
  ::std::string* rate_;
  ::std::string* guarantee_rate_;
  float amount_;
  ::google::protobuf::int32 fullbidtime_;
  ::std::string* repayment_type_;
  ::std::string* fullbiddate_;
  ::std::string* borrowing_month_;
  ::std::string* state_;
  ::std::string* bid_runoff_reason_;
  ::std::string* province_;
  ::std::string* city_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static bid_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class statistics_info_ask : public ::google::protobuf::Message {
 public:
  statistics_info_ask();
  virtual ~statistics_info_ask();

  statistics_info_ask(const statistics_info_ask& from);

  inline statistics_info_ask& operator=(const statistics_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistics_info_ask& default_instance();

  void Swap(statistics_info_ask* other);

  // implements Message ----------------------------------------------

  statistics_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistics_info_ask& from);
  void MergeFrom(const statistics_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.ask_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ODP_bid_analysis::ask_type type() const;
  inline void set_type(::ODP_bid_analysis::ask_type value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.statistics_info_ask)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  int type_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static statistics_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class statistics_info_ans : public ::google::protobuf::Message {
 public:
  statistics_info_ans();
  virtual ~statistics_info_ans();

  statistics_info_ans(const statistics_info_ans& from);

  inline statistics_info_ans& operator=(const statistics_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistics_info_ans& default_instance();

  void Swap(statistics_info_ans* other);

  // implements Message ----------------------------------------------

  statistics_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const statistics_info_ans& from);
  void MergeFrom(const statistics_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ODP_bid_analysis.statistics_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ODP_bid_analysis::statistics_info& info(int index) const;
  inline ::ODP_bid_analysis::statistics_info* mutable_info(int index);
  inline ::ODP_bid_analysis::statistics_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >*
      mutable_info();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.statistics_info_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info > info_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static statistics_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class detail_info_ask : public ::google::protobuf::Message {
 public:
  detail_info_ask();
  virtual ~detail_info_ask();

  detail_info_ask(const detail_info_ask& from);

  inline detail_info_ask& operator=(const detail_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detail_info_ask& default_instance();

  void Swap(detail_info_ask* other);

  // implements Message ----------------------------------------------

  detail_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detail_info_ask& from);
  void MergeFrom(const detail_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.ask_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ODP_bid_analysis::ask_type type() const;
  inline void set_type(::ODP_bid_analysis::ask_type value);

  // optional int32 tick_no = 2;
  inline bool has_tick_no() const;
  inline void clear_tick_no();
  static const int kTickNoFieldNumber = 2;
  inline ::google::protobuf::int32 tick_no() const;
  inline void set_tick_no(::google::protobuf::int32 value);

  // optional int32 num_of_record = 3;
  inline bool has_num_of_record() const;
  inline void clear_num_of_record();
  static const int kNumOfRecordFieldNumber = 3;
  inline ::google::protobuf::int32 num_of_record() const;
  inline void set_num_of_record(::google::protobuf::int32 value);

  // optional int32 curpage = 4;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurpageFieldNumber = 4;
  inline ::google::protobuf::int32 curpage() const;
  inline void set_curpage(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.detail_info_ask)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tick_no();
  inline void clear_has_tick_no();
  inline void set_has_num_of_record();
  inline void clear_has_num_of_record();
  inline void set_has_curpage();
  inline void clear_has_curpage();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 tick_no_;
  ::google::protobuf::int32 num_of_record_;
  ::google::protobuf::int32 curpage_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static detail_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class detail_info_ans : public ::google::protobuf::Message {
 public:
  detail_info_ans();
  virtual ~detail_info_ans();

  detail_info_ans(const detail_info_ans& from);

  inline detail_info_ans& operator=(const detail_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const detail_info_ans& default_instance();

  void Swap(detail_info_ans* other);

  // implements Message ----------------------------------------------

  detail_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const detail_info_ans& from);
  void MergeFrom(const detail_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total_number = 1;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 1;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // repeated .ODP_bid_analysis.bid_detail_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ODP_bid_analysis::bid_detail_info& info(int index) const;
  inline ::ODP_bid_analysis::bid_detail_info* mutable_info(int index);
  inline ::ODP_bid_analysis::bid_detail_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_detail_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_detail_info >*
      mutable_info();

  // optional .common.result_info result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.detail_info_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_detail_info > info_;
  ::common::result_info* result_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static detail_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class different_rate_fullbid_time_ask : public ::google::protobuf::Message {
 public:
  different_rate_fullbid_time_ask();
  virtual ~different_rate_fullbid_time_ask();

  different_rate_fullbid_time_ask(const different_rate_fullbid_time_ask& from);

  inline different_rate_fullbid_time_ask& operator=(const different_rate_fullbid_time_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const different_rate_fullbid_time_ask& default_instance();

  void Swap(different_rate_fullbid_time_ask* other);

  // implements Message ----------------------------------------------

  different_rate_fullbid_time_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const different_rate_fullbid_time_ask& from);
  void MergeFrom(const different_rate_fullbid_time_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.full_bid_ask_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ODP_bid_analysis::full_bid_ask_type type() const;
  inline void set_type(::ODP_bid_analysis::full_bid_ask_type value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.different_rate_fullbid_time_ask)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  int type_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static different_rate_fullbid_time_ask* default_instance_;
};
// -------------------------------------------------------------------

class different_rate_fullbid_time_ans : public ::google::protobuf::Message {
 public:
  different_rate_fullbid_time_ans();
  virtual ~different_rate_fullbid_time_ans();

  different_rate_fullbid_time_ans(const different_rate_fullbid_time_ans& from);

  inline different_rate_fullbid_time_ans& operator=(const different_rate_fullbid_time_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const different_rate_fullbid_time_ans& default_instance();

  void Swap(different_rate_fullbid_time_ans* other);

  // implements Message ----------------------------------------------

  different_rate_fullbid_time_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const different_rate_fullbid_time_ans& from);
  void MergeFrom(const different_rate_fullbid_time_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ODP_bid_analysis.bid_count_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ODP_bid_analysis::bid_count_info& info(int index) const;
  inline ::ODP_bid_analysis::bid_count_info* mutable_info(int index);
  inline ::ODP_bid_analysis::bid_count_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_count_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_count_info >*
      mutable_info();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.different_rate_fullbid_time_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_count_info > info_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static different_rate_fullbid_time_ans* default_instance_;
};
// -------------------------------------------------------------------

class different_rate_fullbid_details_ask : public ::google::protobuf::Message {
 public:
  different_rate_fullbid_details_ask();
  virtual ~different_rate_fullbid_details_ask();

  different_rate_fullbid_details_ask(const different_rate_fullbid_details_ask& from);

  inline different_rate_fullbid_details_ask& operator=(const different_rate_fullbid_details_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const different_rate_fullbid_details_ask& default_instance();

  void Swap(different_rate_fullbid_details_ask* other);

  // implements Message ----------------------------------------------

  different_rate_fullbid_details_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const different_rate_fullbid_details_ask& from);
  void MergeFrom(const different_rate_fullbid_details_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bid_time = 1;
  inline bool has_bid_time() const;
  inline void clear_bid_time();
  static const int kBidTimeFieldNumber = 1;
  inline ::google::protobuf::int32 bid_time() const;
  inline void set_bid_time(::google::protobuf::int32 value);

  // optional int32 bid_rate = 2;
  inline bool has_bid_rate() const;
  inline void clear_bid_rate();
  static const int kBidRateFieldNumber = 2;
  inline ::google::protobuf::int32 bid_rate() const;
  inline void set_bid_rate(::google::protobuf::int32 value);

  // optional int32 num_of_record = 3;
  inline bool has_num_of_record() const;
  inline void clear_num_of_record();
  static const int kNumOfRecordFieldNumber = 3;
  inline ::google::protobuf::int32 num_of_record() const;
  inline void set_num_of_record(::google::protobuf::int32 value);

  // optional int32 curpage = 4;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurpageFieldNumber = 4;
  inline ::google::protobuf::int32 curpage() const;
  inline void set_curpage(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.different_rate_fullbid_details_ask)
 private:
  inline void set_has_bid_time();
  inline void clear_has_bid_time();
  inline void set_has_bid_rate();
  inline void clear_has_bid_rate();
  inline void set_has_num_of_record();
  inline void clear_has_num_of_record();
  inline void set_has_curpage();
  inline void clear_has_curpage();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bid_time_;
  ::google::protobuf::int32 bid_rate_;
  ::google::protobuf::int32 num_of_record_;
  ::google::protobuf::int32 curpage_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static different_rate_fullbid_details_ask* default_instance_;
};
// -------------------------------------------------------------------

class province_city_inquire_ask : public ::google::protobuf::Message {
 public:
  province_city_inquire_ask();
  virtual ~province_city_inquire_ask();

  province_city_inquire_ask(const province_city_inquire_ask& from);

  inline province_city_inquire_ask& operator=(const province_city_inquire_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const province_city_inquire_ask& default_instance();

  void Swap(province_city_inquire_ask* other);

  // implements Message ----------------------------------------------

  province_city_inquire_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const province_city_inquire_ask& from);
  void MergeFrom(const province_city_inquire_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.area_name province = 1;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 1;
  inline const ::ODP_bid_analysis::area_name& province() const;
  inline ::ODP_bid_analysis::area_name* mutable_province();
  inline ::ODP_bid_analysis::area_name* release_province();
  inline void set_allocated_province(::ODP_bid_analysis::area_name* province);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.province_city_inquire_ask)
 private:
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ODP_bid_analysis::area_name* province_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static province_city_inquire_ask* default_instance_;
};
// -------------------------------------------------------------------

class province_city_inquire_ans : public ::google::protobuf::Message {
 public:
  province_city_inquire_ans();
  virtual ~province_city_inquire_ans();

  province_city_inquire_ans(const province_city_inquire_ans& from);

  inline province_city_inquire_ans& operator=(const province_city_inquire_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const province_city_inquire_ans& default_instance();

  void Swap(province_city_inquire_ans* other);

  // implements Message ----------------------------------------------

  province_city_inquire_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const province_city_inquire_ans& from);
  void MergeFrom(const province_city_inquire_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ODP_bid_analysis.area_name province_or_city = 1;
  inline int province_or_city_size() const;
  inline void clear_province_or_city();
  static const int kProvinceOrCityFieldNumber = 1;
  inline const ::ODP_bid_analysis::area_name& province_or_city(int index) const;
  inline ::ODP_bid_analysis::area_name* mutable_province_or_city(int index);
  inline ::ODP_bid_analysis::area_name* add_province_or_city();
  inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::area_name >&
      province_or_city() const;
  inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::area_name >*
      mutable_province_or_city();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.province_city_inquire_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::area_name > province_or_city_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static province_city_inquire_ans* default_instance_;
};
// -------------------------------------------------------------------

class bid_area_distribution_ask : public ::google::protobuf::Message {
 public:
  bid_area_distribution_ask();
  virtual ~bid_area_distribution_ask();

  bid_area_distribution_ask(const bid_area_distribution_ask& from);

  inline bid_area_distribution_ask& operator=(const bid_area_distribution_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_area_distribution_ask& default_instance();

  void Swap(bid_area_distribution_ask* other);

  // implements Message ----------------------------------------------

  bid_area_distribution_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_area_distribution_ask& from);
  void MergeFrom(const bid_area_distribution_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.area_name province = 1;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 1;
  inline const ::ODP_bid_analysis::area_name& province() const;
  inline ::ODP_bid_analysis::area_name* mutable_province();
  inline ::ODP_bid_analysis::area_name* release_province();
  inline void set_allocated_province(::ODP_bid_analysis::area_name* province);

  // optional .ODP_bid_analysis.area_name city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::ODP_bid_analysis::area_name& city() const;
  inline ::ODP_bid_analysis::area_name* mutable_city();
  inline ::ODP_bid_analysis::area_name* release_city();
  inline void set_allocated_city(::ODP_bid_analysis::area_name* city);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.bid_area_distribution_ask)
 private:
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ODP_bid_analysis::area_name* province_;
  ::ODP_bid_analysis::area_name* city_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static bid_area_distribution_ask* default_instance_;
};
// -------------------------------------------------------------------

class bid_area_distribution_ans : public ::google::protobuf::Message {
 public:
  bid_area_distribution_ans();
  virtual ~bid_area_distribution_ans();

  bid_area_distribution_ans(const bid_area_distribution_ans& from);

  inline bid_area_distribution_ans& operator=(const bid_area_distribution_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_area_distribution_ans& default_instance();

  void Swap(bid_area_distribution_ans* other);

  // implements Message ----------------------------------------------

  bid_area_distribution_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_area_distribution_ans& from);
  void MergeFrom(const bid_area_distribution_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ODP_bid_analysis.bid_area_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ODP_bid_analysis::bid_area_info& info(int index) const;
  inline ::ODP_bid_analysis::bid_area_info* mutable_info(int index);
  inline ::ODP_bid_analysis::bid_area_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_area_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_area_info >*
      mutable_info();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.bid_area_distribution_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_area_info > info_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static bid_area_distribution_ans* default_instance_;
};
// -------------------------------------------------------------------

class bid_area_distribution_detail_ask : public ::google::protobuf::Message {
 public:
  bid_area_distribution_detail_ask();
  virtual ~bid_area_distribution_detail_ask();

  bid_area_distribution_detail_ask(const bid_area_distribution_detail_ask& from);

  inline bid_area_distribution_detail_ask& operator=(const bid_area_distribution_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bid_area_distribution_detail_ask& default_instance();

  void Swap(bid_area_distribution_detail_ask* other);

  // implements Message ----------------------------------------------

  bid_area_distribution_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bid_area_distribution_detail_ask& from);
  void MergeFrom(const bid_area_distribution_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ODP_bid_analysis.area_name province = 1;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 1;
  inline const ::ODP_bid_analysis::area_name& province() const;
  inline ::ODP_bid_analysis::area_name* mutable_province();
  inline ::ODP_bid_analysis::area_name* release_province();
  inline void set_allocated_province(::ODP_bid_analysis::area_name* province);

  // optional .ODP_bid_analysis.area_name city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::ODP_bid_analysis::area_name& city() const;
  inline ::ODP_bid_analysis::area_name* mutable_city();
  inline ::ODP_bid_analysis::area_name* release_city();
  inline void set_allocated_city(::ODP_bid_analysis::area_name* city);

  // optional int32 num_of_record = 3;
  inline bool has_num_of_record() const;
  inline void clear_num_of_record();
  static const int kNumOfRecordFieldNumber = 3;
  inline ::google::protobuf::int32 num_of_record() const;
  inline void set_num_of_record(::google::protobuf::int32 value);

  // optional int32 curpage = 4;
  inline bool has_curpage() const;
  inline void clear_curpage();
  static const int kCurpageFieldNumber = 4;
  inline ::google::protobuf::int32 curpage() const;
  inline void set_curpage(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:ODP_bid_analysis.bid_area_distribution_detail_ask)
 private:
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_num_of_record();
  inline void clear_has_num_of_record();
  inline void set_has_curpage();
  inline void clear_has_curpage();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ODP_bid_analysis::area_name* province_;
  ::ODP_bid_analysis::area_name* city_;
  ::google::protobuf::int32 num_of_record_;
  ::google::protobuf::int32 curpage_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_AssignDesc_ODP_5fbid_5fanalysis_2eproto();
  friend void protobuf_ShutdownFile_ODP_5fbid_5fanalysis_2eproto();

  void InitAsDefaultInstance();
  static bid_area_distribution_detail_ask* default_instance_;
};
// ===================================================================


// ===================================================================

// statistics_info

// optional int32 tick_no = 1;
inline bool statistics_info::has_tick_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistics_info::set_has_tick_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistics_info::clear_has_tick_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistics_info::clear_tick_no() {
  tick_no_ = 0;
  clear_has_tick_no();
}
inline ::google::protobuf::int32 statistics_info::tick_no() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info.tick_no)
  return tick_no_;
}
inline void statistics_info::set_tick_no(::google::protobuf::int32 value) {
  set_has_tick_no();
  tick_no_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.statistics_info.tick_no)
}

// optional bytes tick_name = 2;
inline bool statistics_info::has_tick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void statistics_info::set_has_tick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void statistics_info::clear_has_tick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void statistics_info::clear_tick_name() {
  if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_->clear();
  }
  clear_has_tick_name();
}
inline const ::std::string& statistics_info::tick_name() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info.tick_name)
  return *tick_name_;
}
inline void statistics_info::set_tick_name(const ::std::string& value) {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  tick_name_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.statistics_info.tick_name)
}
inline void statistics_info::set_tick_name(const char* value) {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  tick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.statistics_info.tick_name)
}
inline void statistics_info::set_tick_name(const void* value, size_t size) {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  tick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.statistics_info.tick_name)
}
inline ::std::string* statistics_info::mutable_tick_name() {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.statistics_info.tick_name)
  return tick_name_;
}
inline ::std::string* statistics_info::release_tick_name() {
  clear_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tick_name_;
    tick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void statistics_info::set_allocated_tick_name(::std::string* tick_name) {
  if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tick_name_;
  }
  if (tick_name) {
    set_has_tick_name();
    tick_name_ = tick_name;
  } else {
    clear_has_tick_name();
    tick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.statistics_info.tick_name)
}

// optional int32 bid_count = 3;
inline bool statistics_info::has_bid_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void statistics_info::set_has_bid_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void statistics_info::clear_has_bid_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void statistics_info::clear_bid_count() {
  bid_count_ = 0;
  clear_has_bid_count();
}
inline ::google::protobuf::int32 statistics_info::bid_count() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info.bid_count)
  return bid_count_;
}
inline void statistics_info::set_bid_count(::google::protobuf::int32 value) {
  set_has_bid_count();
  bid_count_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.statistics_info.bid_count)
}

// -------------------------------------------------------------------

// bid_count_info

// optional int32 tick_no = 1;
inline bool bid_count_info::has_tick_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_count_info::set_has_tick_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_count_info::clear_has_tick_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_count_info::clear_tick_no() {
  tick_no_ = 0;
  clear_has_tick_no();
}
inline ::google::protobuf::int32 bid_count_info::tick_no() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_count_info.tick_no)
  return tick_no_;
}
inline void bid_count_info::set_tick_no(::google::protobuf::int32 value) {
  set_has_tick_no();
  tick_no_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_count_info.tick_no)
}

// optional bytes tick_name = 2;
inline bool bid_count_info::has_tick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_count_info::set_has_tick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_count_info::clear_has_tick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_count_info::clear_tick_name() {
  if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_->clear();
  }
  clear_has_tick_name();
}
inline const ::std::string& bid_count_info::tick_name() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_count_info.tick_name)
  return *tick_name_;
}
inline void bid_count_info::set_tick_name(const ::std::string& value) {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  tick_name_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_count_info.tick_name)
}
inline void bid_count_info::set_tick_name(const char* value) {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  tick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_count_info.tick_name)
}
inline void bid_count_info::set_tick_name(const void* value, size_t size) {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  tick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_count_info.tick_name)
}
inline ::std::string* bid_count_info::mutable_tick_name() {
  set_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_count_info.tick_name)
  return tick_name_;
}
inline ::std::string* bid_count_info::release_tick_name() {
  clear_has_tick_name();
  if (tick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tick_name_;
    tick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_count_info::set_allocated_tick_name(::std::string* tick_name) {
  if (tick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tick_name_;
  }
  if (tick_name) {
    set_has_tick_name();
    tick_name_ = tick_name;
  } else {
    clear_has_tick_name();
    tick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_count_info.tick_name)
}

// repeated .ODP_bid_analysis.statistics_info info = 3;
inline int bid_count_info::info_size() const {
  return info_.size();
}
inline void bid_count_info::clear_info() {
  info_.Clear();
}
inline const ::ODP_bid_analysis::statistics_info& bid_count_info::info(int index) const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_count_info.info)
  return info_.Get(index);
}
inline ::ODP_bid_analysis::statistics_info* bid_count_info::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_count_info.info)
  return info_.Mutable(index);
}
inline ::ODP_bid_analysis::statistics_info* bid_count_info::add_info() {
  // @@protoc_insertion_point(field_add:ODP_bid_analysis.bid_count_info.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >&
bid_count_info::info() const {
  // @@protoc_insertion_point(field_list:ODP_bid_analysis.bid_count_info.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >*
bid_count_info::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ODP_bid_analysis.bid_count_info.info)
  return &info_;
}

// -------------------------------------------------------------------

// area_name

// optional int32 area_id = 1;
inline bool area_name::has_area_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void area_name::set_has_area_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void area_name::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void area_name::clear_area_id() {
  area_id_ = 0;
  clear_has_area_id();
}
inline ::google::protobuf::int32 area_name::area_id() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.area_name.area_id)
  return area_id_;
}
inline void area_name::set_area_id(::google::protobuf::int32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.area_name.area_id)
}

// optional bytes name = 2;
inline bool area_name::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void area_name::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void area_name::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void area_name::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& area_name::name() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.area_name.name)
  return *name_;
}
inline void area_name::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.area_name.name)
}
inline void area_name::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.area_name.name)
}
inline void area_name::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.area_name.name)
}
inline ::std::string* area_name::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.area_name.name)
  return name_;
}
inline ::std::string* area_name::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void area_name::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.area_name.name)
}

// -------------------------------------------------------------------

// bid_area_info

// optional .ODP_bid_analysis.area_name province = 1;
inline bool bid_area_info::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_area_info::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_area_info::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_area_info::clear_province() {
  if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
  clear_has_province();
}
inline const ::ODP_bid_analysis::area_name& bid_area_info::province() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_info.province)
  return province_ != NULL ? *province_ : *default_instance_->province_;
}
inline ::ODP_bid_analysis::area_name* bid_area_info::mutable_province() {
  set_has_province();
  if (province_ == NULL) province_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_info.province)
  return province_;
}
inline ::ODP_bid_analysis::area_name* bid_area_info::release_province() {
  clear_has_province();
  ::ODP_bid_analysis::area_name* temp = province_;
  province_ = NULL;
  return temp;
}
inline void bid_area_info::set_allocated_province(::ODP_bid_analysis::area_name* province) {
  delete province_;
  province_ = province;
  if (province) {
    set_has_province();
  } else {
    clear_has_province();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_info.province)
}

// optional .ODP_bid_analysis.area_name city = 2;
inline bool bid_area_info::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_area_info::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_area_info::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_area_info::clear_city() {
  if (city_ != NULL) city_->::ODP_bid_analysis::area_name::Clear();
  clear_has_city();
}
inline const ::ODP_bid_analysis::area_name& bid_area_info::city() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_info.city)
  return city_ != NULL ? *city_ : *default_instance_->city_;
}
inline ::ODP_bid_analysis::area_name* bid_area_info::mutable_city() {
  set_has_city();
  if (city_ == NULL) city_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_info.city)
  return city_;
}
inline ::ODP_bid_analysis::area_name* bid_area_info::release_city() {
  clear_has_city();
  ::ODP_bid_analysis::area_name* temp = city_;
  city_ = NULL;
  return temp;
}
inline void bid_area_info::set_allocated_city(::ODP_bid_analysis::area_name* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_info.city)
}

// optional int32 bid_count = 3;
inline bool bid_area_info::has_bid_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bid_area_info::set_has_bid_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bid_area_info::clear_has_bid_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bid_area_info::clear_bid_count() {
  bid_count_ = 0;
  clear_has_bid_count();
}
inline ::google::protobuf::int32 bid_area_info::bid_count() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_info.bid_count)
  return bid_count_;
}
inline void bid_area_info::set_bid_count(::google::protobuf::int32 value) {
  set_has_bid_count();
  bid_count_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_area_info.bid_count)
}

// optional float bid_count_rate = 4;
inline bool bid_area_info::has_bid_count_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bid_area_info::set_has_bid_count_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bid_area_info::clear_has_bid_count_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bid_area_info::clear_bid_count_rate() {
  bid_count_rate_ = 0;
  clear_has_bid_count_rate();
}
inline float bid_area_info::bid_count_rate() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_info.bid_count_rate)
  return bid_count_rate_;
}
inline void bid_area_info::set_bid_count_rate(float value) {
  set_has_bid_count_rate();
  bid_count_rate_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_area_info.bid_count_rate)
}

// -------------------------------------------------------------------

// bid_detail_info

// optional bytes username = 1;
inline bool bid_detail_info::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_detail_info::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_detail_info::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_detail_info::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& bid_detail_info::username() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.username)
  return *username_;
}
inline void bid_detail_info::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.username)
}
inline void bid_detail_info::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.username)
}
inline void bid_detail_info::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.username)
}
inline ::std::string* bid_detail_info::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.username)
  return username_;
}
inline ::std::string* bid_detail_info::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.username)
}

// optional bytes NickName = 2;
inline bool bid_detail_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_detail_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_detail_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_detail_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& bid_detail_info::nickname() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.NickName)
  return *nickname_;
}
inline void bid_detail_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.NickName)
}
inline void bid_detail_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.NickName)
}
inline void bid_detail_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.NickName)
}
inline ::std::string* bid_detail_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.NickName)
  return nickname_;
}
inline ::std::string* bid_detail_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.NickName)
}

// optional bytes mobile_no = 3;
inline bool bid_detail_info::has_mobile_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bid_detail_info::set_has_mobile_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bid_detail_info::clear_has_mobile_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bid_detail_info::clear_mobile_no() {
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_no_->clear();
  }
  clear_has_mobile_no();
}
inline const ::std::string& bid_detail_info::mobile_no() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.mobile_no)
  return *mobile_no_;
}
inline void bid_detail_info::set_mobile_no(const ::std::string& value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.mobile_no)
}
inline void bid_detail_info::set_mobile_no(const char* value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.mobile_no)
}
inline void bid_detail_info::set_mobile_no(const void* value, size_t size) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.mobile_no)
}
inline ::std::string* bid_detail_info::mutable_mobile_no() {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.mobile_no)
  return mobile_no_;
}
inline ::std::string* bid_detail_info::release_mobile_no() {
  clear_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_no_;
    mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_mobile_no(::std::string* mobile_no) {
  if (mobile_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_no_;
  }
  if (mobile_no) {
    set_has_mobile_no();
    mobile_no_ = mobile_no;
  } else {
    clear_has_mobile_no();
    mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.mobile_no)
}

// optional bytes id_card_no = 4;
inline bool bid_detail_info::has_id_card_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bid_detail_info::set_has_id_card_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bid_detail_info::clear_has_id_card_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bid_detail_info::clear_id_card_no() {
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_->clear();
  }
  clear_has_id_card_no();
}
inline const ::std::string& bid_detail_info::id_card_no() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.id_card_no)
  return *id_card_no_;
}
inline void bid_detail_info::set_id_card_no(const ::std::string& value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.id_card_no)
}
inline void bid_detail_info::set_id_card_no(const char* value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.id_card_no)
}
inline void bid_detail_info::set_id_card_no(const void* value, size_t size) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.id_card_no)
}
inline ::std::string* bid_detail_info::mutable_id_card_no() {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.id_card_no)
  return id_card_no_;
}
inline ::std::string* bid_detail_info::release_id_card_no() {
  clear_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_no_;
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_id_card_no(::std::string* id_card_no) {
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_no_;
  }
  if (id_card_no) {
    set_has_id_card_no();
    id_card_no_ = id_card_no;
  } else {
    clear_has_id_card_no();
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.id_card_no)
}

// optional float amount = 5;
inline bool bid_detail_info::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bid_detail_info::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bid_detail_info::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bid_detail_info::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline float bid_detail_info::amount() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.amount)
  return amount_;
}
inline void bid_detail_info::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.amount)
}

// optional bytes datetime = 6;
inline bool bid_detail_info::has_datetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bid_detail_info::set_has_datetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bid_detail_info::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bid_detail_info::clear_datetime() {
  if (datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datetime_->clear();
  }
  clear_has_datetime();
}
inline const ::std::string& bid_detail_info::datetime() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.datetime)
  return *datetime_;
}
inline void bid_detail_info::set_datetime(const ::std::string& value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.datetime)
}
inline void bid_detail_info::set_datetime(const char* value) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.datetime)
}
inline void bid_detail_info::set_datetime(const void* value, size_t size) {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datetime_ = new ::std::string;
  }
  datetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.datetime)
}
inline ::std::string* bid_detail_info::mutable_datetime() {
  set_has_datetime();
  if (datetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.datetime)
  return datetime_;
}
inline ::std::string* bid_detail_info::release_datetime() {
  clear_has_datetime();
  if (datetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = datetime_;
    datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_datetime(::std::string* datetime) {
  if (datetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datetime_;
  }
  if (datetime) {
    set_has_datetime();
    datetime_ = datetime;
  } else {
    clear_has_datetime();
    datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.datetime)
}

// optional bytes rate = 7;
inline bool bid_detail_info::has_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void bid_detail_info::set_has_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void bid_detail_info::clear_has_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void bid_detail_info::clear_rate() {
  if (rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rate_->clear();
  }
  clear_has_rate();
}
inline const ::std::string& bid_detail_info::rate() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.rate)
  return *rate_;
}
inline void bid_detail_info::set_rate(const ::std::string& value) {
  set_has_rate();
  if (rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rate_ = new ::std::string;
  }
  rate_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.rate)
}
inline void bid_detail_info::set_rate(const char* value) {
  set_has_rate();
  if (rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rate_ = new ::std::string;
  }
  rate_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.rate)
}
inline void bid_detail_info::set_rate(const void* value, size_t size) {
  set_has_rate();
  if (rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rate_ = new ::std::string;
  }
  rate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.rate)
}
inline ::std::string* bid_detail_info::mutable_rate() {
  set_has_rate();
  if (rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.rate)
  return rate_;
}
inline ::std::string* bid_detail_info::release_rate() {
  clear_has_rate();
  if (rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rate_;
    rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_rate(::std::string* rate) {
  if (rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rate_;
  }
  if (rate) {
    set_has_rate();
    rate_ = rate;
  } else {
    clear_has_rate();
    rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.rate)
}

// optional bytes guarantee_rate = 8;
inline bool bid_detail_info::has_guarantee_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void bid_detail_info::set_has_guarantee_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void bid_detail_info::clear_has_guarantee_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void bid_detail_info::clear_guarantee_rate() {
  if (guarantee_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_rate_->clear();
  }
  clear_has_guarantee_rate();
}
inline const ::std::string& bid_detail_info::guarantee_rate() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.guarantee_rate)
  return *guarantee_rate_;
}
inline void bid_detail_info::set_guarantee_rate(const ::std::string& value) {
  set_has_guarantee_rate();
  if (guarantee_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_rate_ = new ::std::string;
  }
  guarantee_rate_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.guarantee_rate)
}
inline void bid_detail_info::set_guarantee_rate(const char* value) {
  set_has_guarantee_rate();
  if (guarantee_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_rate_ = new ::std::string;
  }
  guarantee_rate_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.guarantee_rate)
}
inline void bid_detail_info::set_guarantee_rate(const void* value, size_t size) {
  set_has_guarantee_rate();
  if (guarantee_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_rate_ = new ::std::string;
  }
  guarantee_rate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.guarantee_rate)
}
inline ::std::string* bid_detail_info::mutable_guarantee_rate() {
  set_has_guarantee_rate();
  if (guarantee_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guarantee_rate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.guarantee_rate)
  return guarantee_rate_;
}
inline ::std::string* bid_detail_info::release_guarantee_rate() {
  clear_has_guarantee_rate();
  if (guarantee_rate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guarantee_rate_;
    guarantee_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_guarantee_rate(::std::string* guarantee_rate) {
  if (guarantee_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guarantee_rate_;
  }
  if (guarantee_rate) {
    set_has_guarantee_rate();
    guarantee_rate_ = guarantee_rate;
  } else {
    clear_has_guarantee_rate();
    guarantee_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.guarantee_rate)
}

// optional bytes repayment_type = 9;
inline bool bid_detail_info::has_repayment_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void bid_detail_info::set_has_repayment_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void bid_detail_info::clear_has_repayment_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void bid_detail_info::clear_repayment_type() {
  if (repayment_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_type_->clear();
  }
  clear_has_repayment_type();
}
inline const ::std::string& bid_detail_info::repayment_type() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.repayment_type)
  return *repayment_type_;
}
inline void bid_detail_info::set_repayment_type(const ::std::string& value) {
  set_has_repayment_type();
  if (repayment_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_type_ = new ::std::string;
  }
  repayment_type_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.repayment_type)
}
inline void bid_detail_info::set_repayment_type(const char* value) {
  set_has_repayment_type();
  if (repayment_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_type_ = new ::std::string;
  }
  repayment_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.repayment_type)
}
inline void bid_detail_info::set_repayment_type(const void* value, size_t size) {
  set_has_repayment_type();
  if (repayment_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_type_ = new ::std::string;
  }
  repayment_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.repayment_type)
}
inline ::std::string* bid_detail_info::mutable_repayment_type() {
  set_has_repayment_type();
  if (repayment_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.repayment_type)
  return repayment_type_;
}
inline ::std::string* bid_detail_info::release_repayment_type() {
  clear_has_repayment_type();
  if (repayment_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repayment_type_;
    repayment_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_repayment_type(::std::string* repayment_type) {
  if (repayment_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_type_;
  }
  if (repayment_type) {
    set_has_repayment_type();
    repayment_type_ = repayment_type;
  } else {
    clear_has_repayment_type();
    repayment_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.repayment_type)
}

// optional bytes fullbiddate = 10;
inline bool bid_detail_info::has_fullbiddate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void bid_detail_info::set_has_fullbiddate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void bid_detail_info::clear_has_fullbiddate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void bid_detail_info::clear_fullbiddate() {
  if (fullbiddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullbiddate_->clear();
  }
  clear_has_fullbiddate();
}
inline const ::std::string& bid_detail_info::fullbiddate() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.fullbiddate)
  return *fullbiddate_;
}
inline void bid_detail_info::set_fullbiddate(const ::std::string& value) {
  set_has_fullbiddate();
  if (fullbiddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullbiddate_ = new ::std::string;
  }
  fullbiddate_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.fullbiddate)
}
inline void bid_detail_info::set_fullbiddate(const char* value) {
  set_has_fullbiddate();
  if (fullbiddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullbiddate_ = new ::std::string;
  }
  fullbiddate_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.fullbiddate)
}
inline void bid_detail_info::set_fullbiddate(const void* value, size_t size) {
  set_has_fullbiddate();
  if (fullbiddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullbiddate_ = new ::std::string;
  }
  fullbiddate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.fullbiddate)
}
inline ::std::string* bid_detail_info::mutable_fullbiddate() {
  set_has_fullbiddate();
  if (fullbiddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullbiddate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.fullbiddate)
  return fullbiddate_;
}
inline ::std::string* bid_detail_info::release_fullbiddate() {
  clear_has_fullbiddate();
  if (fullbiddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fullbiddate_;
    fullbiddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_fullbiddate(::std::string* fullbiddate) {
  if (fullbiddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fullbiddate_;
  }
  if (fullbiddate) {
    set_has_fullbiddate();
    fullbiddate_ = fullbiddate;
  } else {
    clear_has_fullbiddate();
    fullbiddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.fullbiddate)
}

// optional int32 fullbidtime = 11;
inline bool bid_detail_info::has_fullbidtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void bid_detail_info::set_has_fullbidtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void bid_detail_info::clear_has_fullbidtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void bid_detail_info::clear_fullbidtime() {
  fullbidtime_ = 0;
  clear_has_fullbidtime();
}
inline ::google::protobuf::int32 bid_detail_info::fullbidtime() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.fullbidtime)
  return fullbidtime_;
}
inline void bid_detail_info::set_fullbidtime(::google::protobuf::int32 value) {
  set_has_fullbidtime();
  fullbidtime_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.fullbidtime)
}

// optional bytes borrowing_month = 12;
inline bool bid_detail_info::has_borrowing_month() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void bid_detail_info::set_has_borrowing_month() {
  _has_bits_[0] |= 0x00000800u;
}
inline void bid_detail_info::clear_has_borrowing_month() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void bid_detail_info::clear_borrowing_month() {
  if (borrowing_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowing_month_->clear();
  }
  clear_has_borrowing_month();
}
inline const ::std::string& bid_detail_info::borrowing_month() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.borrowing_month)
  return *borrowing_month_;
}
inline void bid_detail_info::set_borrowing_month(const ::std::string& value) {
  set_has_borrowing_month();
  if (borrowing_month_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowing_month_ = new ::std::string;
  }
  borrowing_month_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.borrowing_month)
}
inline void bid_detail_info::set_borrowing_month(const char* value) {
  set_has_borrowing_month();
  if (borrowing_month_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowing_month_ = new ::std::string;
  }
  borrowing_month_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.borrowing_month)
}
inline void bid_detail_info::set_borrowing_month(const void* value, size_t size) {
  set_has_borrowing_month();
  if (borrowing_month_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowing_month_ = new ::std::string;
  }
  borrowing_month_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.borrowing_month)
}
inline ::std::string* bid_detail_info::mutable_borrowing_month() {
  set_has_borrowing_month();
  if (borrowing_month_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borrowing_month_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.borrowing_month)
  return borrowing_month_;
}
inline ::std::string* bid_detail_info::release_borrowing_month() {
  clear_has_borrowing_month();
  if (borrowing_month_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borrowing_month_;
    borrowing_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_borrowing_month(::std::string* borrowing_month) {
  if (borrowing_month_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowing_month_;
  }
  if (borrowing_month) {
    set_has_borrowing_month();
    borrowing_month_ = borrowing_month;
  } else {
    clear_has_borrowing_month();
    borrowing_month_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.borrowing_month)
}

// optional bytes state = 13;
inline bool bid_detail_info::has_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void bid_detail_info::set_has_state() {
  _has_bits_[0] |= 0x00001000u;
}
inline void bid_detail_info::clear_has_state() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void bid_detail_info::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& bid_detail_info::state() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.state)
  return *state_;
}
inline void bid_detail_info::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.state)
}
inline void bid_detail_info::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.state)
}
inline void bid_detail_info::set_state(const void* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.state)
}
inline ::std::string* bid_detail_info::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.state)
  return state_;
}
inline ::std::string* bid_detail_info::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.state)
}

// optional bytes bid_runoff_reason = 14;
inline bool bid_detail_info::has_bid_runoff_reason() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void bid_detail_info::set_has_bid_runoff_reason() {
  _has_bits_[0] |= 0x00002000u;
}
inline void bid_detail_info::clear_has_bid_runoff_reason() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void bid_detail_info::clear_bid_runoff_reason() {
  if (bid_runoff_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_runoff_reason_->clear();
  }
  clear_has_bid_runoff_reason();
}
inline const ::std::string& bid_detail_info::bid_runoff_reason() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.bid_runoff_reason)
  return *bid_runoff_reason_;
}
inline void bid_detail_info::set_bid_runoff_reason(const ::std::string& value) {
  set_has_bid_runoff_reason();
  if (bid_runoff_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_runoff_reason_ = new ::std::string;
  }
  bid_runoff_reason_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.bid_runoff_reason)
}
inline void bid_detail_info::set_bid_runoff_reason(const char* value) {
  set_has_bid_runoff_reason();
  if (bid_runoff_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_runoff_reason_ = new ::std::string;
  }
  bid_runoff_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.bid_runoff_reason)
}
inline void bid_detail_info::set_bid_runoff_reason(const void* value, size_t size) {
  set_has_bid_runoff_reason();
  if (bid_runoff_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_runoff_reason_ = new ::std::string;
  }
  bid_runoff_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.bid_runoff_reason)
}
inline ::std::string* bid_detail_info::mutable_bid_runoff_reason() {
  set_has_bid_runoff_reason();
  if (bid_runoff_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_runoff_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.bid_runoff_reason)
  return bid_runoff_reason_;
}
inline ::std::string* bid_detail_info::release_bid_runoff_reason() {
  clear_has_bid_runoff_reason();
  if (bid_runoff_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_runoff_reason_;
    bid_runoff_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_bid_runoff_reason(::std::string* bid_runoff_reason) {
  if (bid_runoff_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_runoff_reason_;
  }
  if (bid_runoff_reason) {
    set_has_bid_runoff_reason();
    bid_runoff_reason_ = bid_runoff_reason;
  } else {
    clear_has_bid_runoff_reason();
    bid_runoff_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.bid_runoff_reason)
}

// optional bytes province = 15;
inline bool bid_detail_info::has_province() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void bid_detail_info::set_has_province() {
  _has_bits_[0] |= 0x00004000u;
}
inline void bid_detail_info::clear_has_province() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void bid_detail_info::clear_province() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& bid_detail_info::province() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.province)
  return *province_;
}
inline void bid_detail_info::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.province)
}
inline void bid_detail_info::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.province)
}
inline void bid_detail_info::set_province(const void* value, size_t size) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.province)
}
inline ::std::string* bid_detail_info::mutable_province() {
  set_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.province)
  return province_;
}
inline ::std::string* bid_detail_info::release_province() {
  clear_has_province();
  if (province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_province(::std::string* province) {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.province)
}

// optional bytes city = 16;
inline bool bid_detail_info::has_city() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void bid_detail_info::set_has_city() {
  _has_bits_[0] |= 0x00008000u;
}
inline void bid_detail_info::clear_has_city() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void bid_detail_info::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& bid_detail_info::city() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_detail_info.city)
  return *city_;
}
inline void bid_detail_info::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_detail_info.city)
}
inline void bid_detail_info::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:ODP_bid_analysis.bid_detail_info.city)
}
inline void bid_detail_info::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ODP_bid_analysis.bid_detail_info.city)
}
inline ::std::string* bid_detail_info::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_detail_info.city)
  return city_;
}
inline ::std::string* bid_detail_info::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void bid_detail_info::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_detail_info.city)
}

// -------------------------------------------------------------------

// statistics_info_ask

// optional .ODP_bid_analysis.ask_type type = 1;
inline bool statistics_info_ask::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistics_info_ask::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistics_info_ask::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistics_info_ask::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ODP_bid_analysis::ask_type statistics_info_ask::type() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info_ask.type)
  return static_cast< ::ODP_bid_analysis::ask_type >(type_);
}
inline void statistics_info_ask::set_type(::ODP_bid_analysis::ask_type value) {
  assert(::ODP_bid_analysis::ask_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.statistics_info_ask.type)
}

// optional .common.common_ask_header ask_header = 2;
inline bool statistics_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void statistics_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void statistics_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void statistics_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& statistics_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* statistics_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.statistics_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* statistics_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void statistics_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.statistics_info_ask.ask_header)
}

// -------------------------------------------------------------------

// statistics_info_ans

// repeated .ODP_bid_analysis.statistics_info info = 1;
inline int statistics_info_ans::info_size() const {
  return info_.size();
}
inline void statistics_info_ans::clear_info() {
  info_.Clear();
}
inline const ::ODP_bid_analysis::statistics_info& statistics_info_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info_ans.info)
  return info_.Get(index);
}
inline ::ODP_bid_analysis::statistics_info* statistics_info_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.statistics_info_ans.info)
  return info_.Mutable(index);
}
inline ::ODP_bid_analysis::statistics_info* statistics_info_ans::add_info() {
  // @@protoc_insertion_point(field_add:ODP_bid_analysis.statistics_info_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >&
statistics_info_ans::info() const {
  // @@protoc_insertion_point(field_list:ODP_bid_analysis.statistics_info_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::statistics_info >*
statistics_info_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ODP_bid_analysis.statistics_info_ans.info)
  return &info_;
}

// optional .common.result_info result = 2;
inline bool statistics_info_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void statistics_info_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void statistics_info_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void statistics_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& statistics_info_ans::result() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.statistics_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* statistics_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.statistics_info_ans.result)
  return result_;
}
inline ::common::result_info* statistics_info_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void statistics_info_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.statistics_info_ans.result)
}

// -------------------------------------------------------------------

// detail_info_ask

// optional .ODP_bid_analysis.ask_type type = 1;
inline bool detail_info_ask::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detail_info_ask::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detail_info_ask::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detail_info_ask::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ODP_bid_analysis::ask_type detail_info_ask::type() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ask.type)
  return static_cast< ::ODP_bid_analysis::ask_type >(type_);
}
inline void detail_info_ask::set_type(::ODP_bid_analysis::ask_type value) {
  assert(::ODP_bid_analysis::ask_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.detail_info_ask.type)
}

// optional int32 tick_no = 2;
inline bool detail_info_ask::has_tick_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void detail_info_ask::set_has_tick_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void detail_info_ask::clear_has_tick_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void detail_info_ask::clear_tick_no() {
  tick_no_ = 0;
  clear_has_tick_no();
}
inline ::google::protobuf::int32 detail_info_ask::tick_no() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ask.tick_no)
  return tick_no_;
}
inline void detail_info_ask::set_tick_no(::google::protobuf::int32 value) {
  set_has_tick_no();
  tick_no_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.detail_info_ask.tick_no)
}

// optional int32 num_of_record = 3;
inline bool detail_info_ask::has_num_of_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detail_info_ask::set_has_num_of_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detail_info_ask::clear_has_num_of_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detail_info_ask::clear_num_of_record() {
  num_of_record_ = 0;
  clear_has_num_of_record();
}
inline ::google::protobuf::int32 detail_info_ask::num_of_record() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ask.num_of_record)
  return num_of_record_;
}
inline void detail_info_ask::set_num_of_record(::google::protobuf::int32 value) {
  set_has_num_of_record();
  num_of_record_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.detail_info_ask.num_of_record)
}

// optional int32 curpage = 4;
inline bool detail_info_ask::has_curpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void detail_info_ask::set_has_curpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void detail_info_ask::clear_has_curpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void detail_info_ask::clear_curpage() {
  curpage_ = 0;
  clear_has_curpage();
}
inline ::google::protobuf::int32 detail_info_ask::curpage() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ask.curpage)
  return curpage_;
}
inline void detail_info_ask::set_curpage(::google::protobuf::int32 value) {
  set_has_curpage();
  curpage_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.detail_info_ask.curpage)
}

// optional .common.common_ask_header ask_header = 5;
inline bool detail_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void detail_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void detail_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void detail_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& detail_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* detail_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.detail_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* detail_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void detail_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.detail_info_ask.ask_header)
}

// -------------------------------------------------------------------

// detail_info_ans

// optional int32 total_number = 1;
inline bool detail_info_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void detail_info_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void detail_info_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void detail_info_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 detail_info_ans::total_number() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ans.total_number)
  return total_number_;
}
inline void detail_info_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.detail_info_ans.total_number)
}

// repeated .ODP_bid_analysis.bid_detail_info info = 2;
inline int detail_info_ans::info_size() const {
  return info_.size();
}
inline void detail_info_ans::clear_info() {
  info_.Clear();
}
inline const ::ODP_bid_analysis::bid_detail_info& detail_info_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ans.info)
  return info_.Get(index);
}
inline ::ODP_bid_analysis::bid_detail_info* detail_info_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.detail_info_ans.info)
  return info_.Mutable(index);
}
inline ::ODP_bid_analysis::bid_detail_info* detail_info_ans::add_info() {
  // @@protoc_insertion_point(field_add:ODP_bid_analysis.detail_info_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_detail_info >&
detail_info_ans::info() const {
  // @@protoc_insertion_point(field_list:ODP_bid_analysis.detail_info_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_detail_info >*
detail_info_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ODP_bid_analysis.detail_info_ans.info)
  return &info_;
}

// optional .common.result_info result = 3;
inline bool detail_info_ans::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void detail_info_ans::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void detail_info_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void detail_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& detail_info_ans::result() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.detail_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* detail_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.detail_info_ans.result)
  return result_;
}
inline ::common::result_info* detail_info_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void detail_info_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.detail_info_ans.result)
}

// -------------------------------------------------------------------

// different_rate_fullbid_time_ask

// optional .ODP_bid_analysis.full_bid_ask_type type = 1;
inline bool different_rate_fullbid_time_ask::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void different_rate_fullbid_time_ask::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void different_rate_fullbid_time_ask::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void different_rate_fullbid_time_ask::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ODP_bid_analysis::full_bid_ask_type different_rate_fullbid_time_ask::type() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_time_ask.type)
  return static_cast< ::ODP_bid_analysis::full_bid_ask_type >(type_);
}
inline void different_rate_fullbid_time_ask::set_type(::ODP_bid_analysis::full_bid_ask_type value) {
  assert(::ODP_bid_analysis::full_bid_ask_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.different_rate_fullbid_time_ask.type)
}

// optional .common.common_ask_header ask_header = 2;
inline bool different_rate_fullbid_time_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void different_rate_fullbid_time_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void different_rate_fullbid_time_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void different_rate_fullbid_time_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& different_rate_fullbid_time_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_time_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* different_rate_fullbid_time_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.different_rate_fullbid_time_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* different_rate_fullbid_time_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void different_rate_fullbid_time_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.different_rate_fullbid_time_ask.ask_header)
}

// -------------------------------------------------------------------

// different_rate_fullbid_time_ans

// repeated .ODP_bid_analysis.bid_count_info info = 1;
inline int different_rate_fullbid_time_ans::info_size() const {
  return info_.size();
}
inline void different_rate_fullbid_time_ans::clear_info() {
  info_.Clear();
}
inline const ::ODP_bid_analysis::bid_count_info& different_rate_fullbid_time_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_time_ans.info)
  return info_.Get(index);
}
inline ::ODP_bid_analysis::bid_count_info* different_rate_fullbid_time_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.different_rate_fullbid_time_ans.info)
  return info_.Mutable(index);
}
inline ::ODP_bid_analysis::bid_count_info* different_rate_fullbid_time_ans::add_info() {
  // @@protoc_insertion_point(field_add:ODP_bid_analysis.different_rate_fullbid_time_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_count_info >&
different_rate_fullbid_time_ans::info() const {
  // @@protoc_insertion_point(field_list:ODP_bid_analysis.different_rate_fullbid_time_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_count_info >*
different_rate_fullbid_time_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ODP_bid_analysis.different_rate_fullbid_time_ans.info)
  return &info_;
}

// optional .common.result_info result = 2;
inline bool different_rate_fullbid_time_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void different_rate_fullbid_time_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void different_rate_fullbid_time_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void different_rate_fullbid_time_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& different_rate_fullbid_time_ans::result() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_time_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* different_rate_fullbid_time_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.different_rate_fullbid_time_ans.result)
  return result_;
}
inline ::common::result_info* different_rate_fullbid_time_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void different_rate_fullbid_time_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.different_rate_fullbid_time_ans.result)
}

// -------------------------------------------------------------------

// different_rate_fullbid_details_ask

// optional int32 bid_time = 1;
inline bool different_rate_fullbid_details_ask::has_bid_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void different_rate_fullbid_details_ask::set_has_bid_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void different_rate_fullbid_details_ask::clear_has_bid_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void different_rate_fullbid_details_ask::clear_bid_time() {
  bid_time_ = 0;
  clear_has_bid_time();
}
inline ::google::protobuf::int32 different_rate_fullbid_details_ask::bid_time() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_details_ask.bid_time)
  return bid_time_;
}
inline void different_rate_fullbid_details_ask::set_bid_time(::google::protobuf::int32 value) {
  set_has_bid_time();
  bid_time_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.different_rate_fullbid_details_ask.bid_time)
}

// optional int32 bid_rate = 2;
inline bool different_rate_fullbid_details_ask::has_bid_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void different_rate_fullbid_details_ask::set_has_bid_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void different_rate_fullbid_details_ask::clear_has_bid_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void different_rate_fullbid_details_ask::clear_bid_rate() {
  bid_rate_ = 0;
  clear_has_bid_rate();
}
inline ::google::protobuf::int32 different_rate_fullbid_details_ask::bid_rate() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_details_ask.bid_rate)
  return bid_rate_;
}
inline void different_rate_fullbid_details_ask::set_bid_rate(::google::protobuf::int32 value) {
  set_has_bid_rate();
  bid_rate_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.different_rate_fullbid_details_ask.bid_rate)
}

// optional int32 num_of_record = 3;
inline bool different_rate_fullbid_details_ask::has_num_of_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void different_rate_fullbid_details_ask::set_has_num_of_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void different_rate_fullbid_details_ask::clear_has_num_of_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void different_rate_fullbid_details_ask::clear_num_of_record() {
  num_of_record_ = 0;
  clear_has_num_of_record();
}
inline ::google::protobuf::int32 different_rate_fullbid_details_ask::num_of_record() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_details_ask.num_of_record)
  return num_of_record_;
}
inline void different_rate_fullbid_details_ask::set_num_of_record(::google::protobuf::int32 value) {
  set_has_num_of_record();
  num_of_record_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.different_rate_fullbid_details_ask.num_of_record)
}

// optional int32 curpage = 4;
inline bool different_rate_fullbid_details_ask::has_curpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void different_rate_fullbid_details_ask::set_has_curpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void different_rate_fullbid_details_ask::clear_has_curpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void different_rate_fullbid_details_ask::clear_curpage() {
  curpage_ = 0;
  clear_has_curpage();
}
inline ::google::protobuf::int32 different_rate_fullbid_details_ask::curpage() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_details_ask.curpage)
  return curpage_;
}
inline void different_rate_fullbid_details_ask::set_curpage(::google::protobuf::int32 value) {
  set_has_curpage();
  curpage_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.different_rate_fullbid_details_ask.curpage)
}

// optional .common.common_ask_header ask_header = 5;
inline bool different_rate_fullbid_details_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void different_rate_fullbid_details_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void different_rate_fullbid_details_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void different_rate_fullbid_details_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& different_rate_fullbid_details_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.different_rate_fullbid_details_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* different_rate_fullbid_details_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.different_rate_fullbid_details_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* different_rate_fullbid_details_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void different_rate_fullbid_details_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.different_rate_fullbid_details_ask.ask_header)
}

// -------------------------------------------------------------------

// province_city_inquire_ask

// optional .ODP_bid_analysis.area_name province = 1;
inline bool province_city_inquire_ask::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void province_city_inquire_ask::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void province_city_inquire_ask::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void province_city_inquire_ask::clear_province() {
  if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
  clear_has_province();
}
inline const ::ODP_bid_analysis::area_name& province_city_inquire_ask::province() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.province_city_inquire_ask.province)
  return province_ != NULL ? *province_ : *default_instance_->province_;
}
inline ::ODP_bid_analysis::area_name* province_city_inquire_ask::mutable_province() {
  set_has_province();
  if (province_ == NULL) province_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.province_city_inquire_ask.province)
  return province_;
}
inline ::ODP_bid_analysis::area_name* province_city_inquire_ask::release_province() {
  clear_has_province();
  ::ODP_bid_analysis::area_name* temp = province_;
  province_ = NULL;
  return temp;
}
inline void province_city_inquire_ask::set_allocated_province(::ODP_bid_analysis::area_name* province) {
  delete province_;
  province_ = province;
  if (province) {
    set_has_province();
  } else {
    clear_has_province();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.province_city_inquire_ask.province)
}

// optional .common.common_ask_header ask_header = 2;
inline bool province_city_inquire_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void province_city_inquire_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void province_city_inquire_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void province_city_inquire_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& province_city_inquire_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.province_city_inquire_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* province_city_inquire_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.province_city_inquire_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* province_city_inquire_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void province_city_inquire_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.province_city_inquire_ask.ask_header)
}

// -------------------------------------------------------------------

// province_city_inquire_ans

// repeated .ODP_bid_analysis.area_name province_or_city = 1;
inline int province_city_inquire_ans::province_or_city_size() const {
  return province_or_city_.size();
}
inline void province_city_inquire_ans::clear_province_or_city() {
  province_or_city_.Clear();
}
inline const ::ODP_bid_analysis::area_name& province_city_inquire_ans::province_or_city(int index) const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.province_city_inquire_ans.province_or_city)
  return province_or_city_.Get(index);
}
inline ::ODP_bid_analysis::area_name* province_city_inquire_ans::mutable_province_or_city(int index) {
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.province_city_inquire_ans.province_or_city)
  return province_or_city_.Mutable(index);
}
inline ::ODP_bid_analysis::area_name* province_city_inquire_ans::add_province_or_city() {
  // @@protoc_insertion_point(field_add:ODP_bid_analysis.province_city_inquire_ans.province_or_city)
  return province_or_city_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::area_name >&
province_city_inquire_ans::province_or_city() const {
  // @@protoc_insertion_point(field_list:ODP_bid_analysis.province_city_inquire_ans.province_or_city)
  return province_or_city_;
}
inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::area_name >*
province_city_inquire_ans::mutable_province_or_city() {
  // @@protoc_insertion_point(field_mutable_list:ODP_bid_analysis.province_city_inquire_ans.province_or_city)
  return &province_or_city_;
}

// optional .common.result_info result = 2;
inline bool province_city_inquire_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void province_city_inquire_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void province_city_inquire_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void province_city_inquire_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& province_city_inquire_ans::result() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.province_city_inquire_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* province_city_inquire_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.province_city_inquire_ans.result)
  return result_;
}
inline ::common::result_info* province_city_inquire_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void province_city_inquire_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.province_city_inquire_ans.result)
}

// -------------------------------------------------------------------

// bid_area_distribution_ask

// optional .ODP_bid_analysis.area_name province = 1;
inline bool bid_area_distribution_ask::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_area_distribution_ask::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_area_distribution_ask::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_area_distribution_ask::clear_province() {
  if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
  clear_has_province();
}
inline const ::ODP_bid_analysis::area_name& bid_area_distribution_ask::province() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_ask.province)
  return province_ != NULL ? *province_ : *default_instance_->province_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_ask::mutable_province() {
  set_has_province();
  if (province_ == NULL) province_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_ask.province)
  return province_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_ask::release_province() {
  clear_has_province();
  ::ODP_bid_analysis::area_name* temp = province_;
  province_ = NULL;
  return temp;
}
inline void bid_area_distribution_ask::set_allocated_province(::ODP_bid_analysis::area_name* province) {
  delete province_;
  province_ = province;
  if (province) {
    set_has_province();
  } else {
    clear_has_province();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_ask.province)
}

// optional .ODP_bid_analysis.area_name city = 2;
inline bool bid_area_distribution_ask::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_area_distribution_ask::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_area_distribution_ask::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_area_distribution_ask::clear_city() {
  if (city_ != NULL) city_->::ODP_bid_analysis::area_name::Clear();
  clear_has_city();
}
inline const ::ODP_bid_analysis::area_name& bid_area_distribution_ask::city() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_ask.city)
  return city_ != NULL ? *city_ : *default_instance_->city_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_ask::mutable_city() {
  set_has_city();
  if (city_ == NULL) city_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_ask.city)
  return city_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_ask::release_city() {
  clear_has_city();
  ::ODP_bid_analysis::area_name* temp = city_;
  city_ = NULL;
  return temp;
}
inline void bid_area_distribution_ask::set_allocated_city(::ODP_bid_analysis::area_name* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_ask.city)
}

// optional .common.common_ask_header ask_header = 3;
inline bool bid_area_distribution_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bid_area_distribution_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bid_area_distribution_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bid_area_distribution_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& bid_area_distribution_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* bid_area_distribution_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* bid_area_distribution_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void bid_area_distribution_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_ask.ask_header)
}

// -------------------------------------------------------------------

// bid_area_distribution_ans

// repeated .ODP_bid_analysis.bid_area_info info = 1;
inline int bid_area_distribution_ans::info_size() const {
  return info_.size();
}
inline void bid_area_distribution_ans::clear_info() {
  info_.Clear();
}
inline const ::ODP_bid_analysis::bid_area_info& bid_area_distribution_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_ans.info)
  return info_.Get(index);
}
inline ::ODP_bid_analysis::bid_area_info* bid_area_distribution_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_ans.info)
  return info_.Mutable(index);
}
inline ::ODP_bid_analysis::bid_area_info* bid_area_distribution_ans::add_info() {
  // @@protoc_insertion_point(field_add:ODP_bid_analysis.bid_area_distribution_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_area_info >&
bid_area_distribution_ans::info() const {
  // @@protoc_insertion_point(field_list:ODP_bid_analysis.bid_area_distribution_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ODP_bid_analysis::bid_area_info >*
bid_area_distribution_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ODP_bid_analysis.bid_area_distribution_ans.info)
  return &info_;
}

// optional .common.result_info result = 2;
inline bool bid_area_distribution_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_area_distribution_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_area_distribution_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_area_distribution_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& bid_area_distribution_ans::result() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* bid_area_distribution_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_ans.result)
  return result_;
}
inline ::common::result_info* bid_area_distribution_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void bid_area_distribution_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_ans.result)
}

// -------------------------------------------------------------------

// bid_area_distribution_detail_ask

// optional .ODP_bid_analysis.area_name province = 1;
inline bool bid_area_distribution_detail_ask::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bid_area_distribution_detail_ask::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bid_area_distribution_detail_ask::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bid_area_distribution_detail_ask::clear_province() {
  if (province_ != NULL) province_->::ODP_bid_analysis::area_name::Clear();
  clear_has_province();
}
inline const ::ODP_bid_analysis::area_name& bid_area_distribution_detail_ask::province() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_detail_ask.province)
  return province_ != NULL ? *province_ : *default_instance_->province_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_detail_ask::mutable_province() {
  set_has_province();
  if (province_ == NULL) province_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_detail_ask.province)
  return province_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_detail_ask::release_province() {
  clear_has_province();
  ::ODP_bid_analysis::area_name* temp = province_;
  province_ = NULL;
  return temp;
}
inline void bid_area_distribution_detail_ask::set_allocated_province(::ODP_bid_analysis::area_name* province) {
  delete province_;
  province_ = province;
  if (province) {
    set_has_province();
  } else {
    clear_has_province();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_detail_ask.province)
}

// optional .ODP_bid_analysis.area_name city = 2;
inline bool bid_area_distribution_detail_ask::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bid_area_distribution_detail_ask::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bid_area_distribution_detail_ask::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bid_area_distribution_detail_ask::clear_city() {
  if (city_ != NULL) city_->::ODP_bid_analysis::area_name::Clear();
  clear_has_city();
}
inline const ::ODP_bid_analysis::area_name& bid_area_distribution_detail_ask::city() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_detail_ask.city)
  return city_ != NULL ? *city_ : *default_instance_->city_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_detail_ask::mutable_city() {
  set_has_city();
  if (city_ == NULL) city_ = new ::ODP_bid_analysis::area_name;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_detail_ask.city)
  return city_;
}
inline ::ODP_bid_analysis::area_name* bid_area_distribution_detail_ask::release_city() {
  clear_has_city();
  ::ODP_bid_analysis::area_name* temp = city_;
  city_ = NULL;
  return temp;
}
inline void bid_area_distribution_detail_ask::set_allocated_city(::ODP_bid_analysis::area_name* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_detail_ask.city)
}

// optional int32 num_of_record = 3;
inline bool bid_area_distribution_detail_ask::has_num_of_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bid_area_distribution_detail_ask::set_has_num_of_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bid_area_distribution_detail_ask::clear_has_num_of_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bid_area_distribution_detail_ask::clear_num_of_record() {
  num_of_record_ = 0;
  clear_has_num_of_record();
}
inline ::google::protobuf::int32 bid_area_distribution_detail_ask::num_of_record() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_detail_ask.num_of_record)
  return num_of_record_;
}
inline void bid_area_distribution_detail_ask::set_num_of_record(::google::protobuf::int32 value) {
  set_has_num_of_record();
  num_of_record_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_area_distribution_detail_ask.num_of_record)
}

// optional int32 curpage = 4;
inline bool bid_area_distribution_detail_ask::has_curpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bid_area_distribution_detail_ask::set_has_curpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bid_area_distribution_detail_ask::clear_has_curpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bid_area_distribution_detail_ask::clear_curpage() {
  curpage_ = 0;
  clear_has_curpage();
}
inline ::google::protobuf::int32 bid_area_distribution_detail_ask::curpage() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_detail_ask.curpage)
  return curpage_;
}
inline void bid_area_distribution_detail_ask::set_curpage(::google::protobuf::int32 value) {
  set_has_curpage();
  curpage_ = value;
  // @@protoc_insertion_point(field_set:ODP_bid_analysis.bid_area_distribution_detail_ask.curpage)
}

// optional .common.common_ask_header ask_header = 5;
inline bool bid_area_distribution_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bid_area_distribution_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bid_area_distribution_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bid_area_distribution_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& bid_area_distribution_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:ODP_bid_analysis.bid_area_distribution_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* bid_area_distribution_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:ODP_bid_analysis.bid_area_distribution_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* bid_area_distribution_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void bid_area_distribution_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ODP_bid_analysis.bid_area_distribution_detail_ask.ask_header)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ODP_bid_analysis

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ODP_bid_analysis::ask_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ODP_bid_analysis::ask_type>() {
  return ::ODP_bid_analysis::ask_type_descriptor();
}
template <> struct is_proto_enum< ::ODP_bid_analysis::full_bid_ask_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ODP_bid_analysis::full_bid_ask_type>() {
  return ::ODP_bid_analysis::full_bid_ask_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ODP_5fbid_5fanalysis_2eproto__INCLUDED
