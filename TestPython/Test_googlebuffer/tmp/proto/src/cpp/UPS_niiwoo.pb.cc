// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UPS_niiwoo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UPS_niiwoo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace UPS_niiwoo {

namespace {

const ::google::protobuf::Descriptor* label_type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_save_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_save_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_save_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_save_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_remove_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_remove_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_remove_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_remove_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_tree_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_tree_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_type_tree_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_type_tree_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_save_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_save_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_save_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_save_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_remove_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_remove_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_remove_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_remove_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_labels_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_labels_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_labels_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_labels_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_users_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_users_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_users_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_users_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_avatar_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_avatar_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_avatar_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_avatar_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* income_source_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  income_source_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_house_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_house_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_car_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_car_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_basic_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_basic_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_basic_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_common_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_common_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_common_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_common_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_labels_by_type_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_labels_by_type_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_set_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_labels_by_type_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_labels_by_type_ans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UPS_5fniiwoo_2eproto() {
  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UPS_niiwoo.proto");
  GOOGLE_CHECK(file != NULL);
  label_type_descriptor_ = file->message_type(0);
  static const int label_type_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, type_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, type_note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, update_time_),
  };
  label_type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_descriptor_,
      label_type::default_instance_,
      label_type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type));
  label_descriptor_ = file->message_type(1);
  static const int label_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, label_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, label_note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, update_time_),
  };
  label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_descriptor_,
      label::default_instance_,
      label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label));
  label_type_list_ask_descriptor_ = file->message_type(2);
  static const int label_type_list_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, cur_page_),
  };
  label_type_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_list_ask_descriptor_,
      label_type_list_ask::default_instance_,
      label_type_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_list_ask));
  label_type_list_ans_descriptor_ = file->message_type(3);
  static const int label_type_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ans, error_),
  };
  label_type_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_list_ans_descriptor_,
      label_type_list_ans::default_instance_,
      label_type_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_list_ans));
  label_type_detail_ask_descriptor_ = file->message_type(4);
  static const int label_type_detail_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ask, type_id_),
  };
  label_type_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_detail_ask_descriptor_,
      label_type_detail_ask::default_instance_,
      label_type_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_detail_ask));
  label_type_detail_ans_descriptor_ = file->message_type(5);
  static const int label_type_detail_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ans, error_),
  };
  label_type_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_detail_ans_descriptor_,
      label_type_detail_ans::default_instance_,
      label_type_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_detail_ans));
  label_type_save_ask_descriptor_ = file->message_type(6);
  static const int label_type_save_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ask, info_),
  };
  label_type_save_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_save_ask_descriptor_,
      label_type_save_ask::default_instance_,
      label_type_save_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_save_ask));
  label_type_save_ans_descriptor_ = file->message_type(7);
  static const int label_type_save_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ans, error_),
  };
  label_type_save_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_save_ans_descriptor_,
      label_type_save_ans::default_instance_,
      label_type_save_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_save_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_save_ans));
  label_type_remove_ask_descriptor_ = file->message_type(8);
  static const int label_type_remove_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ask, type_id_),
  };
  label_type_remove_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_remove_ask_descriptor_,
      label_type_remove_ask::default_instance_,
      label_type_remove_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_remove_ask));
  label_type_remove_ans_descriptor_ = file->message_type(9);
  static const int label_type_remove_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ans, error_),
  };
  label_type_remove_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_remove_ans_descriptor_,
      label_type_remove_ans::default_instance_,
      label_type_remove_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_remove_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_remove_ans));
  label_type_tree_ask_descriptor_ = file->message_type(10);
  static const int label_type_tree_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ask, type_id_),
  };
  label_type_tree_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_tree_ask_descriptor_,
      label_type_tree_ask::default_instance_,
      label_type_tree_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_tree_ask));
  label_type_tree_ans_descriptor_ = file->message_type(11);
  static const int label_type_tree_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ans, error_),
  };
  label_type_tree_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_type_tree_ans_descriptor_,
      label_type_tree_ans::default_instance_,
      label_type_tree_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_type_tree_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_type_tree_ans));
  label_list_ask_descriptor_ = file->message_type(12);
  static const int label_list_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, label_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, cur_page_),
  };
  label_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_list_ask_descriptor_,
      label_list_ask::default_instance_,
      label_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_list_ask));
  label_list_ans_descriptor_ = file->message_type(13);
  static const int label_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ans, error_),
  };
  label_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_list_ans_descriptor_,
      label_list_ans::default_instance_,
      label_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_list_ans));
  label_detail_ask_descriptor_ = file->message_type(14);
  static const int label_detail_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ask, label_id_),
  };
  label_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_detail_ask_descriptor_,
      label_detail_ask::default_instance_,
      label_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_detail_ask));
  label_detail_ans_descriptor_ = file->message_type(15);
  static const int label_detail_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ans, error_),
  };
  label_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_detail_ans_descriptor_,
      label_detail_ans::default_instance_,
      label_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_detail_ans));
  label_save_ask_descriptor_ = file->message_type(16);
  static const int label_save_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ask, info_),
  };
  label_save_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_save_ask_descriptor_,
      label_save_ask::default_instance_,
      label_save_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_save_ask));
  label_save_ans_descriptor_ = file->message_type(17);
  static const int label_save_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ans, error_),
  };
  label_save_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_save_ans_descriptor_,
      label_save_ans::default_instance_,
      label_save_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_save_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_save_ans));
  label_remove_ask_descriptor_ = file->message_type(18);
  static const int label_remove_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ask, label_id_),
  };
  label_remove_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_remove_ask_descriptor_,
      label_remove_ask::default_instance_,
      label_remove_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_remove_ask));
  label_remove_ans_descriptor_ = file->message_type(19);
  static const int label_remove_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ans, error_),
  };
  label_remove_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_remove_ans_descriptor_,
      label_remove_ans::default_instance_,
      label_remove_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_remove_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_remove_ans));
  user_labels_ask_descriptor_ = file->message_type(20);
  static const int user_labels_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ask, mobile_phone_),
  };
  user_labels_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_labels_ask_descriptor_,
      user_labels_ask::default_instance_,
      user_labels_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_labels_ask));
  user_labels_ans_descriptor_ = file->message_type(21);
  static const int user_labels_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ans, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ans, result_),
  };
  user_labels_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_labels_ans_descriptor_,
      user_labels_ans::default_instance_,
      user_labels_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_labels_ans));
  label_users_ask_descriptor_ = file->message_type(22);
  static const int label_users_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, label_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, all_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, cur_page_),
  };
  label_users_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_users_ask_descriptor_,
      label_users_ask::default_instance_,
      label_users_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_users_ask));
  user_basic_info_descriptor_ = file->message_type(23);
  static const int user_basic_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, id_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, living_loc_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, id_card_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, living_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, living_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, living_address_),
  };
  user_basic_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_info_descriptor_,
      user_basic_info::default_instance_,
      user_basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_info));
  label_users_ans_descriptor_ = file->message_type(24);
  static const int label_users_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ans, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ans, result_),
  };
  label_users_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_users_ans_descriptor_,
      label_users_ans::default_instance_,
      label_users_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_users_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_users_ans));
  user_avatar_ask_descriptor_ = file->message_type(25);
  static const int user_avatar_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ask, num_),
  };
  user_avatar_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_avatar_ask_descriptor_,
      user_avatar_ask::default_instance_,
      user_avatar_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_avatar_ask));
  user_avatar_ans_descriptor_ = file->message_type(26);
  static const int user_avatar_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ans, avatars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ans, result_),
  };
  user_avatar_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_avatar_ans_descriptor_,
      user_avatar_ans::default_instance_,
      user_avatar_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_avatar_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_avatar_ans));
  income_source_descriptor_ = file->message_type(27);
  static const int income_source_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(income_source, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(income_source, monthavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(income_source, lastupdatetime_),
  };
  income_source_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      income_source_descriptor_,
      income_source::default_instance_,
      income_source_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(income_source, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(income_source, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(income_source));
  user_house_info_descriptor_ = file->message_type(28);
  static const int user_house_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, housetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, houseamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, housesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, mortgageamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, mortgageterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, houseloan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, houseprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, housecity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, housearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, houseaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, lastupdatetime_),
  };
  user_house_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_house_info_descriptor_,
      user_house_info::default_instance_,
      user_house_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_house_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_house_info));
  user_car_info_descriptor_ = file->message_type(29);
  static const int user_car_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, carplate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, carloans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, carbrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, carage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, caramount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, carloansamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, carloansterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, lastupdatetime_),
  };
  user_car_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_car_info_descriptor_,
      user_car_info::default_instance_,
      user_car_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_car_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_car_info));
  user_basic_info_ask_descriptor_ = file->message_type(30);
  static const int user_basic_info_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, mobile_phone_),
  };
  user_basic_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_info_ask_descriptor_,
      user_basic_info_ask::default_instance_,
      user_basic_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_info_ask));
  user_basic_info_ans_descriptor_ = file->message_type(31);
  static const int user_basic_info_ans_offsets_[57] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, usernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, userrealname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, latecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, advanceamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, latecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, advanceamountcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, useridcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, phoneplace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, addresstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, hometown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, maritalstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, cardaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, childrenstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, livingaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, eduschool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, attendingcollege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, attendinggrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, schooladdress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, studentprofessional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, attendingclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, educationapplytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, isverify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, educationapplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, graduateschool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, degreetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, entrancedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, graduatedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, educonclusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, eduform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, jobprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, deparment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, companyaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, jobcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, jobarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, industry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, years_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, knowworkyears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, workpics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, isenterprislegalperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, enterpregistrtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, enterpregistrcapital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, enterpregistrstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, incomesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, userhousepropertyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, usercarpropertyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, result_),
  };
  user_basic_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_basic_info_ans_descriptor_,
      user_basic_info_ans::default_instance_,
      user_basic_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_basic_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_basic_info_ans));
  user_common_ask_descriptor_ = file->message_type(32);
  static const int user_common_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ask, mobile_phone_),
  };
  user_common_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_common_ask_descriptor_,
      user_common_ask::default_instance_,
      user_common_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_common_ask));
  user_common_ans_descriptor_ = file->message_type(33);
  static const int user_common_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ans, result_json_),
  };
  user_common_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_common_ans_descriptor_,
      user_common_ans::default_instance_,
      user_common_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_common_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_common_ans));
  user_labels_by_type_ask_descriptor_ = file->message_type(34);
  static const int user_labels_by_type_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ask, label_type_ids_),
  };
  user_labels_by_type_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_labels_by_type_ask_descriptor_,
      user_labels_by_type_ask::default_instance_,
      user_labels_by_type_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_labels_by_type_ask));
  label_set_descriptor_ = file->message_type(35);
  static const int label_set_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_set, label_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_set, label_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_set, labels_),
  };
  label_set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_set_descriptor_,
      label_set::default_instance_,
      label_set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_set));
  user_labels_by_type_ans_descriptor_ = file->message_type(36);
  static const int user_labels_by_type_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ans, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ans, result_),
  };
  user_labels_by_type_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_labels_by_type_ans_descriptor_,
      user_labels_by_type_ans::default_instance_,
      user_labels_by_type_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_labels_by_type_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_labels_by_type_ans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UPS_5fniiwoo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_descriptor_, &label_type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_descriptor_, &label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_list_ask_descriptor_, &label_type_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_list_ans_descriptor_, &label_type_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_detail_ask_descriptor_, &label_type_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_detail_ans_descriptor_, &label_type_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_save_ask_descriptor_, &label_type_save_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_save_ans_descriptor_, &label_type_save_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_remove_ask_descriptor_, &label_type_remove_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_remove_ans_descriptor_, &label_type_remove_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_tree_ask_descriptor_, &label_type_tree_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_type_tree_ans_descriptor_, &label_type_tree_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_list_ask_descriptor_, &label_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_list_ans_descriptor_, &label_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_detail_ask_descriptor_, &label_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_detail_ans_descriptor_, &label_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_save_ask_descriptor_, &label_save_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_save_ans_descriptor_, &label_save_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_remove_ask_descriptor_, &label_remove_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_remove_ans_descriptor_, &label_remove_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_labels_ask_descriptor_, &user_labels_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_labels_ans_descriptor_, &user_labels_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_users_ask_descriptor_, &label_users_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_info_descriptor_, &user_basic_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_users_ans_descriptor_, &label_users_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_avatar_ask_descriptor_, &user_avatar_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_avatar_ans_descriptor_, &user_avatar_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    income_source_descriptor_, &income_source::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_house_info_descriptor_, &user_house_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_car_info_descriptor_, &user_car_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_info_ask_descriptor_, &user_basic_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_basic_info_ans_descriptor_, &user_basic_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_common_ask_descriptor_, &user_common_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_common_ans_descriptor_, &user_common_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_labels_by_type_ask_descriptor_, &user_labels_by_type_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_set_descriptor_, &label_set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_labels_by_type_ans_descriptor_, &user_labels_by_type_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto() {
  delete label_type::default_instance_;
  delete label_type_reflection_;
  delete label::default_instance_;
  delete label_reflection_;
  delete label_type_list_ask::default_instance_;
  delete label_type_list_ask_reflection_;
  delete label_type_list_ans::default_instance_;
  delete label_type_list_ans_reflection_;
  delete label_type_detail_ask::default_instance_;
  delete label_type_detail_ask_reflection_;
  delete label_type_detail_ans::default_instance_;
  delete label_type_detail_ans_reflection_;
  delete label_type_save_ask::default_instance_;
  delete label_type_save_ask_reflection_;
  delete label_type_save_ans::default_instance_;
  delete label_type_save_ans_reflection_;
  delete label_type_remove_ask::default_instance_;
  delete label_type_remove_ask_reflection_;
  delete label_type_remove_ans::default_instance_;
  delete label_type_remove_ans_reflection_;
  delete label_type_tree_ask::default_instance_;
  delete label_type_tree_ask_reflection_;
  delete label_type_tree_ans::default_instance_;
  delete label_type_tree_ans_reflection_;
  delete label_list_ask::default_instance_;
  delete label_list_ask_reflection_;
  delete label_list_ans::default_instance_;
  delete label_list_ans_reflection_;
  delete label_detail_ask::default_instance_;
  delete label_detail_ask_reflection_;
  delete label_detail_ans::default_instance_;
  delete label_detail_ans_reflection_;
  delete label_save_ask::default_instance_;
  delete label_save_ask_reflection_;
  delete label_save_ans::default_instance_;
  delete label_save_ans_reflection_;
  delete label_remove_ask::default_instance_;
  delete label_remove_ask_reflection_;
  delete label_remove_ans::default_instance_;
  delete label_remove_ans_reflection_;
  delete user_labels_ask::default_instance_;
  delete user_labels_ask_reflection_;
  delete user_labels_ans::default_instance_;
  delete user_labels_ans_reflection_;
  delete label_users_ask::default_instance_;
  delete label_users_ask_reflection_;
  delete user_basic_info::default_instance_;
  delete user_basic_info_reflection_;
  delete label_users_ans::default_instance_;
  delete label_users_ans_reflection_;
  delete user_avatar_ask::default_instance_;
  delete user_avatar_ask_reflection_;
  delete user_avatar_ans::default_instance_;
  delete user_avatar_ans_reflection_;
  delete income_source::default_instance_;
  delete income_source_reflection_;
  delete user_house_info::default_instance_;
  delete user_house_info_reflection_;
  delete user_car_info::default_instance_;
  delete user_car_info_reflection_;
  delete user_basic_info_ask::default_instance_;
  delete user_basic_info_ask_reflection_;
  delete user_basic_info_ans::default_instance_;
  delete user_basic_info_ans_reflection_;
  delete user_common_ask::default_instance_;
  delete user_common_ask_reflection_;
  delete user_common_ans::default_instance_;
  delete user_common_ans_reflection_;
  delete user_labels_by_type_ask::default_instance_;
  delete user_labels_by_type_ask_reflection_;
  delete label_set::default_instance_;
  delete label_set_reflection_;
  delete user_labels_by_type_ans::default_instance_;
  delete user_labels_by_type_ans_reflection_;
}

void protobuf_AddDesc_UPS_5fniiwoo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020UPS_niiwoo.proto\022\nUPS_niiwoo\032\014common.p"
    "roto\"\222\001\n\nlabel_type\022\017\n\007type_id\030\001 \001(\005\022\021\n\t"
    "type_name\030\002 \001(\014\022\021\n\tparent_id\030\003 \001(\005\022\023\n\013ty"
    "pe_prefix\030\004 \001(\005\022\021\n\ttype_note\030\005 \001(\014\022\020\n\010ad"
    "d_time\030\006 \001(\014\022\023\n\013update_time\030\007 \001(\014\"\214\001\n\005la"
    "bel\022\020\n\010label_id\030\001 \001(\005\022\017\n\007type_id\030\002 \001(\005\022\022"
    "\n\nlabel_name\030\003 \001(\014\022\021\n\tparent_id\030\004 \001(\005\022\022\n"
    "\nlabel_note\030\005 \001(\014\022\020\n\010add_time\030\006 \001(\014\022\023\n\013u"
    "pdate_time\030\007 \001(\014\"\214\001\n\023label_type_list_ask"
    "\022-\n\nask_header\030\001 \001(\0132\031.common.common_ask"
    "_header\022\017\n\007type_id\030\002 \001(\005\022\021\n\ttype_name\030\003 "
    "\001(\014\022\020\n\010page_num\030\004 \001(\005\022\020\n\010cur_page\030\005 \001(\005\""
    "s\n\023label_type_list_ans\022$\n\004list\030\001 \003(\0132\026.U"
    "PS_niiwoo.label_type\022\024\n\014total_number\030\002 \001"
    "(\005\022 \n\005error\030\003 \001(\0132\021.common.errorinfo\"W\n\025"
    "label_type_detail_ask\022-\n\nask_header\030\001 \001("
    "\0132\031.common.common_ask_header\022\017\n\007type_id\030"
    "\002 \001(\005\"_\n\025label_type_detail_ans\022$\n\004info\030\001"
    " \001(\0132\026.UPS_niiwoo.label_type\022 \n\005error\030\002 "
    "\001(\0132\021.common.errorinfo\"j\n\023label_type_sav"
    "e_ask\022-\n\nask_header\030\001 \001(\0132\031.common.commo"
    "n_ask_header\022$\n\004info\030\002 \001(\0132\026.UPS_niiwoo."
    "label_type\"7\n\023label_type_save_ans\022 \n\005err"
    "or\030\001 \001(\0132\021.common.errorinfo\"W\n\025label_typ"
    "e_remove_ask\022-\n\nask_header\030\001 \001(\0132\031.commo"
    "n.common_ask_header\022\017\n\007type_id\030\002 \001(\005\"9\n\025"
    "label_type_remove_ans\022 \n\005error\030\001 \001(\0132\021.c"
    "ommon.errorinfo\"U\n\023label_type_tree_ask\022-"
    "\n\nask_header\030\001 \001(\0132\031.common.common_ask_h"
    "eader\022\017\n\007type_id\030\002 \001(\005\"]\n\023label_type_tre"
    "e_ans\022$\n\004list\030\001 \003(\0132\026.UPS_niiwoo.label_t"
    "ype\022 \n\005error\030\002 \001(\0132\021.common.errorinfo\"\210\001"
    "\n\016label_list_ask\022-\n\nask_header\030\001 \001(\0132\031.c"
    "ommon.common_ask_header\022\017\n\007type_id\030\002 \001(\005"
    "\022\022\n\nlabel_name\030\003 \001(\014\022\020\n\010page_num\030\004 \001(\005\022\020"
    "\n\010cur_page\030\005 \001(\005\"i\n\016label_list_ans\022\037\n\004li"
    "st\030\001 \003(\0132\021.UPS_niiwoo.label\022\024\n\014total_num"
    "ber\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.common.errori"
    "nfo\"S\n\020label_detail_ask\022-\n\nask_header\030\001 "
    "\001(\0132\031.common.common_ask_header\022\020\n\010label_"
    "id\030\002 \001(\005\"U\n\020label_detail_ans\022\037\n\004info\030\001 \001"
    "(\0132\021.UPS_niiwoo.label\022 \n\005error\030\002 \001(\0132\021.c"
    "ommon.errorinfo\"`\n\016label_save_ask\022-\n\nask"
    "_header\030\001 \001(\0132\031.common.common_ask_header"
    "\022\037\n\004info\030\002 \001(\0132\021.UPS_niiwoo.label\"2\n\016lab"
    "el_save_ans\022 \n\005error\030\001 \001(\0132\021.common.erro"
    "rinfo\"S\n\020label_remove_ask\022-\n\nask_header\030"
    "\001 \001(\0132\031.common.common_ask_header\022\020\n\010labe"
    "l_id\030\002 \001(\005\"4\n\020label_remove_ans\022 \n\005error\030"
    "\001 \001(\0132\021.common.errorinfo\"g\n\017user_labels_"
    "ask\022-\n\nask_header\030\001 \001(\0132\031.common.common_"
    "ask_header\022\017\n\007id_card\030\002 \001(\014\022\024\n\014mobile_ph"
    "one\030\003 \001(\014\"F\n\017user_labels_ans\022\016\n\006labels\030\001"
    " \003(\014\022#\n\006result\030\002 \001(\0132\023.common.result_inf"
    "o\"\212\001\n\017label_users_ask\022-\n\nask_header\030\001 \001("
    "\0132\031.common.common_ask_header\022\021\n\tlabel_id"
    "s\030\002 \003(\005\022\021\n\006all_in\030\003 \001(\005:\0012\022\020\n\010page_num\030\004"
    " \001(\005\022\020\n\010cur_page\030\005 \001(\005\"\330\001\n\017user_basic_in"
    "fo\022\021\n\tuser_name\030\001 \001(\014\022\024\n\014mobile_phone\030\002 "
    "\001(\014\022\022\n\nid_card_no\030\003 \001(\014\022\020\n\010position\030\004 \001("
    "\014\022\027\n\017living_loc_info\030\005 \001(\014\022\027\n\017id_card_ad"
    "dress\030\006 \001(\014\022\027\n\017living_province\030\007 \001(\014\022\023\n\013"
    "living_city\030\010 \001(\014\022\026\n\016living_address\030\t \001("
    "\014\"x\n\017label_users_ans\022*\n\005users\030\001 \003(\0132\033.UP"
    "S_niiwoo.user_basic_info\022\024\n\014total_number"
    "\030\002 \001(\005\022#\n\006result\030\003 \001(\0132\023.common.result_i"
    "nfo\"M\n\017user_avatar_ask\022-\n\nask_header\030\001 \001"
    "(\0132\031.common.common_ask_header\022\013\n\003num\030\002 \001"
    "(\005\"G\n\017user_avatar_ans\022\017\n\007avatars\030\001 \003(\014\022#"
    "\n\006result\030\002 \001(\0132\023.common.result_info\"M\n\ri"
    "ncome_source\022\022\n\nsourceType\030\001 \001(\005\022\020\n\010mont"
    "hAvg\030\002 \001(\005\022\026\n\016LastUpdateTime\030\003 \001(\014\"\212\002\n\017u"
    "ser_house_info\022\021\n\tHouseType\030\001 \001(\005\022\020\n\010Mor"
    "tgage\030\002 \001(\005\022\023\n\013HouseAmount\030\003 \001(\001\022\021\n\tHous"
    "eSize\030\004 \001(\001\022\026\n\016MortgageAmount\030\005 \001(\001\022\024\n\014M"
    "ortgageterm\030\006 \001(\005\022\021\n\tHouseLoan\030\007 \001(\005\022\025\n\r"
    "HouseProvince\030\010 \001(\014\022\021\n\tHouseCity\030\t \001(\014\022\021"
    "\n\tHouseArea\030\n \001(\014\022\024\n\014HouseAddress\030\013 \001(\014\022"
    "\026\n\016LastUpdateTime\030\014 \001(\014\"\256\001\n\ruser_car_inf"
    "o\022\020\n\010CarPlate\030\001 \001(\014\022\020\n\010Carloans\030\002 \001(\005\022\020\n"
    "\010CarBrand\030\003 \001(\014\022\016\n\006CarAge\030\004 \001(\005\022\021\n\tCarAm"
    "ount\030\005 \001(\001\022\026\n\016CarloansAmount\030\006 \001(\001\022\024\n\014Ca"
    "rloansterm\030\007 \001(\005\022\026\n\016LastUpdateTime\030\t \001(\014"
    "\"k\n\023user_basic_info_ask\022-\n\nask_header\030\001 "
    "\001(\0132\031.common.common_ask_header\022\017\n\007id_car"
    "d\030\002 \001(\014\022\024\n\014mobile_phone\030\003 \001(\014\"\301\n\n\023user_b"
    "asic_info_ans\022\016\n\006UserId\030c \001(\014\022\024\n\014usernic"
    "kname\030\001 \001(\014\022\024\n\014UserRealName\030\002 \001(\014\022\016\n\006Ava"
    "tar\030< \001(\014\022\013\n\003age\030\003 \001(\005\022\013\n\003sex\030\004 \001(\005\022\022\n\nU"
    "serStatus\030B \001(\005\022\022\n\nlateCharge\030= \001(\001\022\025\n\ra"
    "dvanceAmount\030> \001(\001\022\017\n\007lateCnt\030\? \001(\005\022\030\n\020a"
    "dvanceAmountCnt\030@ \001(\005\022\023\n\013MobilePhone\030\010 \001"
    "(\014\022\022\n\nUserIDCard\030\t \001(\014\022\022\n\nphonePlace\030\n \001"
    "(\014\022\023\n\013AddressType\030\013 \001(\005\022\020\n\010Hometown\030\014 \001("
    "\014\022\020\n\010CardType\030\r \001(\005\022\025\n\rMaritalStatus\030\017 \001"
    "(\005\022\023\n\013CardAddress\030\020 \001(\014\022\026\n\016ChildrenStatu"
    "s\030\021 \001(\005\022\025\n\rLivingAddress\030\022 \001(\014\022\021\n\tEduSch"
    "ool\030\025 \001(\014\022\030\n\020AttendingCollege\030\026 \001(\014\022\026\n\016A"
    "ttendingGrade\030\027 \001(\014\022\025\n\rSchoolAddress\030\030 \001"
    "(\014\022\033\n\023StudentProfessional\030\031 \001(\014\022\026\n\016Atten"
    "dingClass\030\032 \001(\014\022\032\n\022EducationApplyType\030\033 "
    "\001(\005\022\020\n\010IsVerify\030\034 \001(\005\022\r\n\005Major\030\035 \001(\014\022\032\n\022"
    "EducationApplyTime\030\036 \001(\014\022\026\n\016GraduateScho"
    "ol\030\037 \001(\014\022\022\n\nDegreeType\030  \001(\005\022\024\n\014Entrance"
    "Date\030! \001(\014\022\024\n\014GraduateDate\030\" \001(\014\022\025\n\rEduC"
    "onclusion\030# \001(\014\022\017\n\007EduForm\030$ \001(\014\022\023\n\013Comp"
    "anyName\030% \001(\014\022\020\n\010Position\030& \001(\014\022\023\n\013JobPr"
    "ovince\030\' \001(\014\022\021\n\tDeparment\030( \001(\014\022\026\n\016Compa"
    "nyAddress\030) \001(\014\022\017\n\007JobCity\030* \001(\014\022\017\n\007JobA"
    "rea\030+ \001(\014\022\020\n\010Industry\030, \001(\005\022\r\n\005Years\030. \001"
    "(\005\022\025\n\rKnowWorkYears\030/ \001(\005\022\r\n\005Email\0300 \001(\014"
    "\022\020\n\010workPics\0301 \001(\014\022\036\n\026IsEnterprisLegalPe"
    "rson\0302 \001(\005\022\031\n\021EnterpRegistrTime\0303 \001(\014\022\034\n"
    "\024EnterpRegistrCapital\0304 \001(\014\022\032\n\022EnterpReg"
    "istrState\0305 \001(\014\022/\n\014IncomeSource\0307 \003(\0132\031."
    "UPS_niiwoo.income_source\022:\n\025UserHousePro"
    "pertyInfo\0308 \003(\0132\033.UPS_niiwoo.user_house_"
    "info\0226\n\023UserCarPropertyInfo\0309 \003(\0132\031.UPS_"
    "niiwoo.user_car_info\022#\n\006result\030d \001(\0132\023.c"
    "ommon.result_info\"g\n\017user_common_ask\022-\n\n"
    "ask_header\030\001 \001(\0132\031.common.common_ask_hea"
    "der\022\017\n\007id_card\030\002 \001(\014\022\024\n\014mobile_phone\030\003 \001"
    "(\014\"K\n\017user_common_ans\022#\n\006result\030\001 \001(\0132\023."
    "common.result_info\022\023\n\013result_json\030\002 \001(\014\""
    "\207\001\n\027user_labels_by_type_ask\022-\n\nask_heade"
    "r\030\001 \001(\0132\031.common.common_ask_header\022\017\n\007id"
    "_card\030\002 \001(\014\022\024\n\014mobile_phone\030\003 \001(\014\022\026\n\016lab"
    "el_type_ids\030\004 \003(\005\"F\n\tlabel_set\022\025\n\rlabel_"
    "type_id\030\001 \001(\005\022\022\n\nlabel_type\030\002 \001(\014\022\016\n\006lab"
    "els\030\003 \003(\014\"e\n\027user_labels_by_type_ans\022%\n\006"
    "labels\030\001 \003(\0132\025.UPS_niiwoo.label_set\022#\n\006r"
    "esult\030\002 \001(\0132\023.common.result_info", 5272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UPS_niiwoo.proto", &protobuf_RegisterTypes);
  label_type::default_instance_ = new label_type();
  label::default_instance_ = new label();
  label_type_list_ask::default_instance_ = new label_type_list_ask();
  label_type_list_ans::default_instance_ = new label_type_list_ans();
  label_type_detail_ask::default_instance_ = new label_type_detail_ask();
  label_type_detail_ans::default_instance_ = new label_type_detail_ans();
  label_type_save_ask::default_instance_ = new label_type_save_ask();
  label_type_save_ans::default_instance_ = new label_type_save_ans();
  label_type_remove_ask::default_instance_ = new label_type_remove_ask();
  label_type_remove_ans::default_instance_ = new label_type_remove_ans();
  label_type_tree_ask::default_instance_ = new label_type_tree_ask();
  label_type_tree_ans::default_instance_ = new label_type_tree_ans();
  label_list_ask::default_instance_ = new label_list_ask();
  label_list_ans::default_instance_ = new label_list_ans();
  label_detail_ask::default_instance_ = new label_detail_ask();
  label_detail_ans::default_instance_ = new label_detail_ans();
  label_save_ask::default_instance_ = new label_save_ask();
  label_save_ans::default_instance_ = new label_save_ans();
  label_remove_ask::default_instance_ = new label_remove_ask();
  label_remove_ans::default_instance_ = new label_remove_ans();
  user_labels_ask::default_instance_ = new user_labels_ask();
  user_labels_ans::default_instance_ = new user_labels_ans();
  label_users_ask::default_instance_ = new label_users_ask();
  user_basic_info::default_instance_ = new user_basic_info();
  label_users_ans::default_instance_ = new label_users_ans();
  user_avatar_ask::default_instance_ = new user_avatar_ask();
  user_avatar_ans::default_instance_ = new user_avatar_ans();
  income_source::default_instance_ = new income_source();
  user_house_info::default_instance_ = new user_house_info();
  user_car_info::default_instance_ = new user_car_info();
  user_basic_info_ask::default_instance_ = new user_basic_info_ask();
  user_basic_info_ans::default_instance_ = new user_basic_info_ans();
  user_common_ask::default_instance_ = new user_common_ask();
  user_common_ans::default_instance_ = new user_common_ans();
  user_labels_by_type_ask::default_instance_ = new user_labels_by_type_ask();
  label_set::default_instance_ = new label_set();
  user_labels_by_type_ans::default_instance_ = new user_labels_by_type_ans();
  label_type::default_instance_->InitAsDefaultInstance();
  label::default_instance_->InitAsDefaultInstance();
  label_type_list_ask::default_instance_->InitAsDefaultInstance();
  label_type_list_ans::default_instance_->InitAsDefaultInstance();
  label_type_detail_ask::default_instance_->InitAsDefaultInstance();
  label_type_detail_ans::default_instance_->InitAsDefaultInstance();
  label_type_save_ask::default_instance_->InitAsDefaultInstance();
  label_type_save_ans::default_instance_->InitAsDefaultInstance();
  label_type_remove_ask::default_instance_->InitAsDefaultInstance();
  label_type_remove_ans::default_instance_->InitAsDefaultInstance();
  label_type_tree_ask::default_instance_->InitAsDefaultInstance();
  label_type_tree_ans::default_instance_->InitAsDefaultInstance();
  label_list_ask::default_instance_->InitAsDefaultInstance();
  label_list_ans::default_instance_->InitAsDefaultInstance();
  label_detail_ask::default_instance_->InitAsDefaultInstance();
  label_detail_ans::default_instance_->InitAsDefaultInstance();
  label_save_ask::default_instance_->InitAsDefaultInstance();
  label_save_ans::default_instance_->InitAsDefaultInstance();
  label_remove_ask::default_instance_->InitAsDefaultInstance();
  label_remove_ans::default_instance_->InitAsDefaultInstance();
  user_labels_ask::default_instance_->InitAsDefaultInstance();
  user_labels_ans::default_instance_->InitAsDefaultInstance();
  label_users_ask::default_instance_->InitAsDefaultInstance();
  user_basic_info::default_instance_->InitAsDefaultInstance();
  label_users_ans::default_instance_->InitAsDefaultInstance();
  user_avatar_ask::default_instance_->InitAsDefaultInstance();
  user_avatar_ans::default_instance_->InitAsDefaultInstance();
  income_source::default_instance_->InitAsDefaultInstance();
  user_house_info::default_instance_->InitAsDefaultInstance();
  user_car_info::default_instance_->InitAsDefaultInstance();
  user_basic_info_ask::default_instance_->InitAsDefaultInstance();
  user_basic_info_ans::default_instance_->InitAsDefaultInstance();
  user_common_ask::default_instance_->InitAsDefaultInstance();
  user_common_ans::default_instance_->InitAsDefaultInstance();
  user_labels_by_type_ask::default_instance_->InitAsDefaultInstance();
  label_set::default_instance_->InitAsDefaultInstance();
  user_labels_by_type_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UPS_5fniiwoo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UPS_5fniiwoo_2eproto {
  StaticDescriptorInitializer_UPS_5fniiwoo_2eproto() {
    protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  }
} static_descriptor_initializer_UPS_5fniiwoo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int label_type::kTypeIdFieldNumber;
const int label_type::kTypeNameFieldNumber;
const int label_type::kParentIdFieldNumber;
const int label_type::kTypePrefixFieldNumber;
const int label_type::kTypeNoteFieldNumber;
const int label_type::kAddTimeFieldNumber;
const int label_type::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

label_type::label_type()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type)
}

void label_type::InitAsDefaultInstance() {
}

label_type::label_type(const label_type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type)
}

void label_type::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_id_ = 0;
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0;
  type_prefix_ = 0;
  type_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type::~label_type() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type)
  SharedDtor();
}

void label_type::SharedDtor() {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_name_;
  }
  if (type_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_note_;
  }
  if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete add_time_;
  }
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (this != default_instance_) {
  }
}

void label_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_descriptor_;
}

const label_type& label_type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type* label_type::default_instance_ = NULL;

label_type* label_type::New() const {
  return new label_type;
}

void label_type::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<label_type*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_id_, parent_id_);
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_name_->clear();
      }
    }
    type_prefix_ = 0;
    if (has_type_note()) {
      if (type_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_note_->clear();
      }
    }
    if (has_add_time()) {
      if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        add_time_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type_name;
        break;
      }

      // optional bytes type_name = 2;
      case 2: {
        if (tag == 18) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }

      // optional int32 parent_id = 3;
      case 3: {
        if (tag == 24) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type_prefix;
        break;
      }

      // optional int32 type_prefix = 4;
      case 4: {
        if (tag == 32) {
         parse_type_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_prefix_)));
          set_has_type_prefix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type_note;
        break;
      }

      // optional bytes type_note = 5;
      case 5: {
        if (tag == 42) {
         parse_type_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type_note()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_add_time;
        break;
      }

      // optional bytes add_time = 6;
      case 6: {
        if (tag == 50) {
         parse_add_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_add_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 7;
      case 7: {
        if (tag == 58) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type)
  return false;
#undef DO_
}

void label_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->type_name(), output);
  }

  // optional int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }

  // optional int32 type_prefix = 4;
  if (has_type_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type_prefix(), output);
  }

  // optional bytes type_note = 5;
  if (has_type_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->type_note(), output);
  }

  // optional bytes add_time = 6;
  if (has_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->add_time(), output);
  }

  // optional bytes update_time = 7;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type)
}

::google::protobuf::uint8* label_type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes type_name = 2;
  if (has_type_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->type_name(), target);
  }

  // optional int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }

  // optional int32 type_prefix = 4;
  if (has_type_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type_prefix(), target);
  }

  // optional bytes type_note = 5;
  if (has_type_note()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->type_note(), target);
  }

  // optional bytes add_time = 6;
  if (has_add_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->add_time(), target);
  }

  // optional bytes update_time = 7;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type)
  return target;
}

int label_type::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes type_name = 2;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type_name());
    }

    // optional int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional int32 type_prefix = 4;
    if (has_type_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_prefix());
    }

    // optional bytes type_note = 5;
    if (has_type_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type_note());
    }

    // optional bytes add_time = 6;
    if (has_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->add_time());
    }

    // optional bytes update_time = 7;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type::MergeFrom(const label_type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_type_prefix()) {
      set_type_prefix(from.type_prefix());
    }
    if (from.has_type_note()) {
      set_type_note(from.type_note());
    }
    if (from.has_add_time()) {
      set_add_time(from.add_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type::CopyFrom(const label_type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type::IsInitialized() const {

  return true;
}

void label_type::Swap(label_type* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(type_name_, other->type_name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(type_prefix_, other->type_prefix_);
    std::swap(type_note_, other->type_note_);
    std::swap(add_time_, other->add_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_descriptor_;
  metadata.reflection = label_type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label::kLabelIdFieldNumber;
const int label::kTypeIdFieldNumber;
const int label::kLabelNameFieldNumber;
const int label::kParentIdFieldNumber;
const int label::kLabelNoteFieldNumber;
const int label::kAddTimeFieldNumber;
const int label::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

label::label()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label)
}

void label::InitAsDefaultInstance() {
}

label::label(const label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label)
}

void label::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_id_ = 0;
  type_id_ = 0;
  label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0;
  label_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label::~label() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label)
  SharedDtor();
}

void label::SharedDtor() {
  if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_name_;
  }
  if (label_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_note_;
  }
  if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete add_time_;
  }
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (this != default_instance_) {
  }
}

void label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_descriptor_;
}

const label& label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label* label::default_instance_ = NULL;

label* label::New() const {
  return new label;
}

void label::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<label*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(label_id_, type_id_);
    if (has_label_name()) {
      if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_name_->clear();
      }
    }
    parent_id_ = 0;
    if (has_label_note()) {
      if (label_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_note_->clear();
      }
    }
    if (has_add_time()) {
      if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        add_time_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_label_name;
        break;
      }

      // optional bytes label_name = 3;
      case 3: {
        if (tag == 26) {
         parse_label_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parent_id;
        break;
      }

      // optional int32 parent_id = 4;
      case 4: {
        if (tag == 32) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_label_note;
        break;
      }

      // optional bytes label_note = 5;
      case 5: {
        if (tag == 42) {
         parse_label_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label_note()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_add_time;
        break;
      }

      // optional bytes add_time = 6;
      case 6: {
        if (tag == 50) {
         parse_add_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_add_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 7;
      case 7: {
        if (tag == 58) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label)
  return false;
#undef DO_
}

void label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label)
  // optional int32 label_id = 1;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label_id(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes label_name = 3;
  if (has_label_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->label_name(), output);
  }

  // optional int32 parent_id = 4;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parent_id(), output);
  }

  // optional bytes label_note = 5;
  if (has_label_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->label_note(), output);
  }

  // optional bytes add_time = 6;
  if (has_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->add_time(), output);
  }

  // optional bytes update_time = 7;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label)
}

::google::protobuf::uint8* label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label)
  // optional int32 label_id = 1;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label_id(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes label_name = 3;
  if (has_label_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->label_name(), target);
  }

  // optional int32 parent_id = 4;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parent_id(), target);
  }

  // optional bytes label_note = 5;
  if (has_label_note()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->label_note(), target);
  }

  // optional bytes add_time = 6;
  if (has_add_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->add_time(), target);
  }

  // optional bytes update_time = 7;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label)
  return target;
}

int label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 label_id = 1;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes label_name = 3;
    if (has_label_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->label_name());
    }

    // optional int32 parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional bytes label_note = 5;
    if (has_label_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->label_note());
    }

    // optional bytes add_time = 6;
    if (has_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->add_time());
    }

    // optional bytes update_time = 7;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label::MergeFrom(const label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_label_name()) {
      set_label_name(from.label_name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_label_note()) {
      set_label_note(from.label_note());
    }
    if (from.has_add_time()) {
      set_add_time(from.add_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label::CopyFrom(const label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label::IsInitialized() const {

  return true;
}

void label::Swap(label* other) {
  if (other != this) {
    std::swap(label_id_, other->label_id_);
    std::swap(type_id_, other->type_id_);
    std::swap(label_name_, other->label_name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(label_note_, other->label_note_);
    std::swap(add_time_, other->add_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_descriptor_;
  metadata.reflection = label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_list_ask::kAskHeaderFieldNumber;
const int label_type_list_ask::kTypeIdFieldNumber;
const int label_type_list_ask::kTypeNameFieldNumber;
const int label_type_list_ask::kPageNumFieldNumber;
const int label_type_list_ask::kCurPageFieldNumber;
#endif  // !_MSC_VER

label_type_list_ask::label_type_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_list_ask)
}

void label_type_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_type_list_ask::label_type_list_ask(const label_type_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_list_ask)
}

void label_type_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  type_id_ = 0;
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_list_ask::~label_type_list_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_list_ask)
  SharedDtor();
}

void label_type_list_ask::SharedDtor() {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_name_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_type_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_list_ask_descriptor_;
}

const label_type_list_ask& label_type_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_list_ask* label_type_list_ask::default_instance_ = NULL;

label_type_list_ask* label_type_list_ask::New() const {
  return new label_type_list_ask;
}

void label_type_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<label_type_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_id_, cur_page_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_name;
        break;
      }

      // optional bytes type_name = 3;
      case 3: {
        if (tag == 26) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_list_ask)
  return false;
#undef DO_
}

void label_type_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_list_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type_name(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_list_ask)
}

::google::protobuf::uint8* label_type_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_list_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes type_name = 3;
  if (has_type_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type_name(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_list_ask)
  return target;
}

int label_type_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes type_name = 3;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type_name());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_list_ask::MergeFrom(const label_type_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_list_ask::CopyFrom(const label_type_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_list_ask::IsInitialized() const {

  return true;
}

void label_type_list_ask::Swap(label_type_list_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(type_id_, other->type_id_);
    std::swap(type_name_, other->type_name_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_list_ask_descriptor_;
  metadata.reflection = label_type_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_list_ans::kListFieldNumber;
const int label_type_list_ans::kTotalNumberFieldNumber;
const int label_type_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_type_list_ans::label_type_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_list_ans)
}

void label_type_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_type_list_ans::label_type_list_ans(const label_type_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_list_ans)
}

void label_type_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_list_ans::~label_type_list_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_list_ans)
  SharedDtor();
}

void label_type_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_type_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_list_ans_descriptor_;
}

const label_type_list_ans& label_type_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_list_ans* label_type_list_ans::default_instance_ = NULL;

label_type_list_ans* label_type_list_ans::New() const {
  return new label_type_list_ans;
}

void label_type_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UPS_niiwoo.label_type list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_list_ans)
  return false;
#undef DO_
}

void label_type_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_list_ans)
  // repeated .UPS_niiwoo.label_type list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_list_ans)
}

::google::protobuf::uint8* label_type_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_list_ans)
  // repeated .UPS_niiwoo.label_type list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_list_ans)
  return target;
}

int label_type_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UPS_niiwoo.label_type list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_list_ans::MergeFrom(const label_type_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_list_ans::CopyFrom(const label_type_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_list_ans::IsInitialized() const {

  return true;
}

void label_type_list_ans::Swap(label_type_list_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_list_ans_descriptor_;
  metadata.reflection = label_type_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_detail_ask::kAskHeaderFieldNumber;
const int label_type_detail_ask::kTypeIdFieldNumber;
#endif  // !_MSC_VER

label_type_detail_ask::label_type_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_detail_ask)
}

void label_type_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_type_detail_ask::label_type_detail_ask(const label_type_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_detail_ask)
}

void label_type_detail_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_detail_ask::~label_type_detail_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_detail_ask)
  SharedDtor();
}

void label_type_detail_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_type_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_detail_ask_descriptor_;
}

const label_type_detail_ask& label_type_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_detail_ask* label_type_detail_ask::default_instance_ = NULL;

label_type_detail_ask* label_type_detail_ask::New() const {
  return new label_type_detail_ask;
}

void label_type_detail_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_detail_ask)
  return false;
#undef DO_
}

void label_type_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_detail_ask)
}

::google::protobuf::uint8* label_type_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_detail_ask)
  return target;
}

int label_type_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_detail_ask::MergeFrom(const label_type_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_detail_ask::CopyFrom(const label_type_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_detail_ask::IsInitialized() const {

  return true;
}

void label_type_detail_ask::Swap(label_type_detail_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_detail_ask_descriptor_;
  metadata.reflection = label_type_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_detail_ans::kInfoFieldNumber;
const int label_type_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_type_detail_ans::label_type_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_detail_ans)
}

void label_type_detail_ans::InitAsDefaultInstance() {
  info_ = const_cast< ::UPS_niiwoo::label_type*>(&::UPS_niiwoo::label_type::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_type_detail_ans::label_type_detail_ans(const label_type_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_detail_ans)
}

void label_type_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_detail_ans::~label_type_detail_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_detail_ans)
  SharedDtor();
}

void label_type_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete error_;
  }
}

void label_type_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_detail_ans_descriptor_;
}

const label_type_detail_ans& label_type_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_detail_ans* label_type_detail_ans::default_instance_ = NULL;

label_type_detail_ans* label_type_detail_ans::New() const {
  return new label_type_detail_ans;
}

void label_type_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::UPS_niiwoo::label_type::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UPS_niiwoo.label_type info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_detail_ans)
  return false;
#undef DO_
}

void label_type_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_detail_ans)
  // optional .UPS_niiwoo.label_type info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_detail_ans)
}

::google::protobuf::uint8* label_type_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_detail_ans)
  // optional .UPS_niiwoo.label_type info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_detail_ans)
  return target;
}

int label_type_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UPS_niiwoo.label_type info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_detail_ans::MergeFrom(const label_type_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::UPS_niiwoo::label_type::MergeFrom(from.info());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_detail_ans::CopyFrom(const label_type_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_detail_ans::IsInitialized() const {

  return true;
}

void label_type_detail_ans::Swap(label_type_detail_ans* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_detail_ans_descriptor_;
  metadata.reflection = label_type_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_save_ask::kAskHeaderFieldNumber;
const int label_type_save_ask::kInfoFieldNumber;
#endif  // !_MSC_VER

label_type_save_ask::label_type_save_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_save_ask)
}

void label_type_save_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
  info_ = const_cast< ::UPS_niiwoo::label_type*>(&::UPS_niiwoo::label_type::default_instance());
}

label_type_save_ask::label_type_save_ask(const label_type_save_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_save_ask)
}

void label_type_save_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_save_ask::~label_type_save_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_save_ask)
  SharedDtor();
}

void label_type_save_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
    delete info_;
  }
}

void label_type_save_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_save_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_save_ask_descriptor_;
}

const label_type_save_ask& label_type_save_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_save_ask* label_type_save_ask::default_instance_ = NULL;

label_type_save_ask* label_type_save_ask::New() const {
  return new label_type_save_ask;
}

void label_type_save_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::UPS_niiwoo::label_type::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_save_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_save_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .UPS_niiwoo.label_type info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_save_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_save_ask)
  return false;
#undef DO_
}

void label_type_save_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_save_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .UPS_niiwoo.label_type info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_save_ask)
}

::google::protobuf::uint8* label_type_save_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_save_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .UPS_niiwoo.label_type info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_save_ask)
  return target;
}

int label_type_save_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .UPS_niiwoo.label_type info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_save_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_save_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_save_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_save_ask::MergeFrom(const label_type_save_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_info()) {
      mutable_info()->::UPS_niiwoo::label_type::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_save_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_save_ask::CopyFrom(const label_type_save_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_save_ask::IsInitialized() const {

  return true;
}

void label_type_save_ask::Swap(label_type_save_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_save_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_save_ask_descriptor_;
  metadata.reflection = label_type_save_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_save_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_type_save_ans::label_type_save_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_save_ans)
}

void label_type_save_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_type_save_ans::label_type_save_ans(const label_type_save_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_save_ans)
}

void label_type_save_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_save_ans::~label_type_save_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_save_ans)
  SharedDtor();
}

void label_type_save_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_type_save_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_save_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_save_ans_descriptor_;
}

const label_type_save_ans& label_type_save_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_save_ans* label_type_save_ans::default_instance_ = NULL;

label_type_save_ans* label_type_save_ans::New() const {
  return new label_type_save_ans;
}

void label_type_save_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_save_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_save_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_save_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_save_ans)
  return false;
#undef DO_
}

void label_type_save_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_save_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_save_ans)
}

::google::protobuf::uint8* label_type_save_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_save_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_save_ans)
  return target;
}

int label_type_save_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_save_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_save_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_save_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_save_ans::MergeFrom(const label_type_save_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_save_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_save_ans::CopyFrom(const label_type_save_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_save_ans::IsInitialized() const {

  return true;
}

void label_type_save_ans::Swap(label_type_save_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_save_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_save_ans_descriptor_;
  metadata.reflection = label_type_save_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_remove_ask::kAskHeaderFieldNumber;
const int label_type_remove_ask::kTypeIdFieldNumber;
#endif  // !_MSC_VER

label_type_remove_ask::label_type_remove_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_remove_ask)
}

void label_type_remove_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_type_remove_ask::label_type_remove_ask(const label_type_remove_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_remove_ask)
}

void label_type_remove_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_remove_ask::~label_type_remove_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_remove_ask)
  SharedDtor();
}

void label_type_remove_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_type_remove_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_remove_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_remove_ask_descriptor_;
}

const label_type_remove_ask& label_type_remove_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_remove_ask* label_type_remove_ask::default_instance_ = NULL;

label_type_remove_ask* label_type_remove_ask::New() const {
  return new label_type_remove_ask;
}

void label_type_remove_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_remove_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_remove_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_remove_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_remove_ask)
  return false;
#undef DO_
}

void label_type_remove_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_remove_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_remove_ask)
}

::google::protobuf::uint8* label_type_remove_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_remove_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_remove_ask)
  return target;
}

int label_type_remove_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_remove_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_remove_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_remove_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_remove_ask::MergeFrom(const label_type_remove_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_remove_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_remove_ask::CopyFrom(const label_type_remove_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_remove_ask::IsInitialized() const {

  return true;
}

void label_type_remove_ask::Swap(label_type_remove_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_remove_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_remove_ask_descriptor_;
  metadata.reflection = label_type_remove_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_remove_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_type_remove_ans::label_type_remove_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_remove_ans)
}

void label_type_remove_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_type_remove_ans::label_type_remove_ans(const label_type_remove_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_remove_ans)
}

void label_type_remove_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_remove_ans::~label_type_remove_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_remove_ans)
  SharedDtor();
}

void label_type_remove_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_type_remove_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_remove_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_remove_ans_descriptor_;
}

const label_type_remove_ans& label_type_remove_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_remove_ans* label_type_remove_ans::default_instance_ = NULL;

label_type_remove_ans* label_type_remove_ans::New() const {
  return new label_type_remove_ans;
}

void label_type_remove_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_remove_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_remove_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_remove_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_remove_ans)
  return false;
#undef DO_
}

void label_type_remove_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_remove_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_remove_ans)
}

::google::protobuf::uint8* label_type_remove_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_remove_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_remove_ans)
  return target;
}

int label_type_remove_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_remove_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_remove_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_remove_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_remove_ans::MergeFrom(const label_type_remove_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_remove_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_remove_ans::CopyFrom(const label_type_remove_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_remove_ans::IsInitialized() const {

  return true;
}

void label_type_remove_ans::Swap(label_type_remove_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_remove_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_remove_ans_descriptor_;
  metadata.reflection = label_type_remove_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_tree_ask::kAskHeaderFieldNumber;
const int label_type_tree_ask::kTypeIdFieldNumber;
#endif  // !_MSC_VER

label_type_tree_ask::label_type_tree_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_tree_ask)
}

void label_type_tree_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_type_tree_ask::label_type_tree_ask(const label_type_tree_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_tree_ask)
}

void label_type_tree_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_tree_ask::~label_type_tree_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_tree_ask)
  SharedDtor();
}

void label_type_tree_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_type_tree_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_tree_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_tree_ask_descriptor_;
}

const label_type_tree_ask& label_type_tree_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_tree_ask* label_type_tree_ask::default_instance_ = NULL;

label_type_tree_ask* label_type_tree_ask::New() const {
  return new label_type_tree_ask;
}

void label_type_tree_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_tree_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_tree_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_tree_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_tree_ask)
  return false;
#undef DO_
}

void label_type_tree_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_tree_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_tree_ask)
}

::google::protobuf::uint8* label_type_tree_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_tree_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_tree_ask)
  return target;
}

int label_type_tree_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_tree_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_tree_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_tree_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_tree_ask::MergeFrom(const label_type_tree_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_tree_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_tree_ask::CopyFrom(const label_type_tree_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_tree_ask::IsInitialized() const {

  return true;
}

void label_type_tree_ask::Swap(label_type_tree_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_tree_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_tree_ask_descriptor_;
  metadata.reflection = label_type_tree_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_type_tree_ans::kListFieldNumber;
const int label_type_tree_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_type_tree_ans::label_type_tree_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_type_tree_ans)
}

void label_type_tree_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_type_tree_ans::label_type_tree_ans(const label_type_tree_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_type_tree_ans)
}

void label_type_tree_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_type_tree_ans::~label_type_tree_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_type_tree_ans)
  SharedDtor();
}

void label_type_tree_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_type_tree_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_type_tree_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_type_tree_ans_descriptor_;
}

const label_type_tree_ans& label_type_tree_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_type_tree_ans* label_type_tree_ans::default_instance_ = NULL;

label_type_tree_ans* label_type_tree_ans::New() const {
  return new label_type_tree_ans;
}

void label_type_tree_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_type_tree_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_type_tree_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UPS_niiwoo.label_type list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_type_tree_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_type_tree_ans)
  return false;
#undef DO_
}

void label_type_tree_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_type_tree_ans)
  // repeated .UPS_niiwoo.label_type list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_type_tree_ans)
}

::google::protobuf::uint8* label_type_tree_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_type_tree_ans)
  // repeated .UPS_niiwoo.label_type list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_type_tree_ans)
  return target;
}

int label_type_tree_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UPS_niiwoo.label_type list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_type_tree_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_type_tree_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_type_tree_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_type_tree_ans::MergeFrom(const label_type_tree_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_type_tree_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_type_tree_ans::CopyFrom(const label_type_tree_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_type_tree_ans::IsInitialized() const {

  return true;
}

void label_type_tree_ans::Swap(label_type_tree_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_type_tree_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_type_tree_ans_descriptor_;
  metadata.reflection = label_type_tree_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_list_ask::kAskHeaderFieldNumber;
const int label_list_ask::kTypeIdFieldNumber;
const int label_list_ask::kLabelNameFieldNumber;
const int label_list_ask::kPageNumFieldNumber;
const int label_list_ask::kCurPageFieldNumber;
#endif  // !_MSC_VER

label_list_ask::label_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_list_ask)
}

void label_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_list_ask::label_list_ask(const label_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_list_ask)
}

void label_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  type_id_ = 0;
  label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_list_ask::~label_list_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_list_ask)
  SharedDtor();
}

void label_list_ask::SharedDtor() {
  if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_name_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_list_ask_descriptor_;
}

const label_list_ask& label_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_list_ask* label_list_ask::default_instance_ = NULL;

label_list_ask* label_list_ask::New() const {
  return new label_list_ask;
}

void label_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<label_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_id_, cur_page_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_label_name()) {
      if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_label_name;
        break;
      }

      // optional bytes label_name = 3;
      case 3: {
        if (tag == 26) {
         parse_label_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_list_ask)
  return false;
#undef DO_
}

void label_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_list_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes label_name = 3;
  if (has_label_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->label_name(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_list_ask)
}

::google::protobuf::uint8* label_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_list_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes label_name = 3;
  if (has_label_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->label_name(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_list_ask)
  return target;
}

int label_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes label_name = 3;
    if (has_label_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->label_name());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_list_ask::MergeFrom(const label_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_label_name()) {
      set_label_name(from.label_name());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_list_ask::CopyFrom(const label_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_list_ask::IsInitialized() const {

  return true;
}

void label_list_ask::Swap(label_list_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(type_id_, other->type_id_);
    std::swap(label_name_, other->label_name_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_list_ask_descriptor_;
  metadata.reflection = label_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_list_ans::kListFieldNumber;
const int label_list_ans::kTotalNumberFieldNumber;
const int label_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_list_ans::label_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_list_ans)
}

void label_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_list_ans::label_list_ans(const label_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_list_ans)
}

void label_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_list_ans::~label_list_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_list_ans)
  SharedDtor();
}

void label_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_list_ans_descriptor_;
}

const label_list_ans& label_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_list_ans* label_list_ans::default_instance_ = NULL;

label_list_ans* label_list_ans::New() const {
  return new label_list_ans;
}

void label_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UPS_niiwoo.label list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_list_ans)
  return false;
#undef DO_
}

void label_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_list_ans)
  // repeated .UPS_niiwoo.label list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_list_ans)
}

::google::protobuf::uint8* label_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_list_ans)
  // repeated .UPS_niiwoo.label list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_list_ans)
  return target;
}

int label_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UPS_niiwoo.label list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_list_ans::MergeFrom(const label_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_list_ans::CopyFrom(const label_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_list_ans::IsInitialized() const {

  return true;
}

void label_list_ans::Swap(label_list_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_list_ans_descriptor_;
  metadata.reflection = label_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_detail_ask::kAskHeaderFieldNumber;
const int label_detail_ask::kLabelIdFieldNumber;
#endif  // !_MSC_VER

label_detail_ask::label_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_detail_ask)
}

void label_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_detail_ask::label_detail_ask(const label_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_detail_ask)
}

void label_detail_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  label_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_detail_ask::~label_detail_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_detail_ask)
  SharedDtor();
}

void label_detail_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_detail_ask_descriptor_;
}

const label_detail_ask& label_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_detail_ask* label_detail_ask::default_instance_ = NULL;

label_detail_ask* label_detail_ask::New() const {
  return new label_detail_ask;
}

void label_detail_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    label_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label_id;
        break;
      }

      // optional int32 label_id = 2;
      case 2: {
        if (tag == 16) {
         parse_label_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_detail_ask)
  return false;
#undef DO_
}

void label_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 label_id = 2;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_detail_ask)
}

::google::protobuf::uint8* label_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 label_id = 2;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_detail_ask)
  return target;
}

int label_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 label_id = 2;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_detail_ask::MergeFrom(const label_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_detail_ask::CopyFrom(const label_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_detail_ask::IsInitialized() const {

  return true;
}

void label_detail_ask::Swap(label_detail_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(label_id_, other->label_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_detail_ask_descriptor_;
  metadata.reflection = label_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_detail_ans::kInfoFieldNumber;
const int label_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_detail_ans::label_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_detail_ans)
}

void label_detail_ans::InitAsDefaultInstance() {
  info_ = const_cast< ::UPS_niiwoo::label*>(&::UPS_niiwoo::label::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_detail_ans::label_detail_ans(const label_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_detail_ans)
}

void label_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_detail_ans::~label_detail_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_detail_ans)
  SharedDtor();
}

void label_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete error_;
  }
}

void label_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_detail_ans_descriptor_;
}

const label_detail_ans& label_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_detail_ans* label_detail_ans::default_instance_ = NULL;

label_detail_ans* label_detail_ans::New() const {
  return new label_detail_ans;
}

void label_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::UPS_niiwoo::label::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UPS_niiwoo.label info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_detail_ans)
  return false;
#undef DO_
}

void label_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_detail_ans)
  // optional .UPS_niiwoo.label info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_detail_ans)
}

::google::protobuf::uint8* label_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_detail_ans)
  // optional .UPS_niiwoo.label info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_detail_ans)
  return target;
}

int label_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UPS_niiwoo.label info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_detail_ans::MergeFrom(const label_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::UPS_niiwoo::label::MergeFrom(from.info());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_detail_ans::CopyFrom(const label_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_detail_ans::IsInitialized() const {

  return true;
}

void label_detail_ans::Swap(label_detail_ans* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_detail_ans_descriptor_;
  metadata.reflection = label_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_save_ask::kAskHeaderFieldNumber;
const int label_save_ask::kInfoFieldNumber;
#endif  // !_MSC_VER

label_save_ask::label_save_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_save_ask)
}

void label_save_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
  info_ = const_cast< ::UPS_niiwoo::label*>(&::UPS_niiwoo::label::default_instance());
}

label_save_ask::label_save_ask(const label_save_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_save_ask)
}

void label_save_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_save_ask::~label_save_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_save_ask)
  SharedDtor();
}

void label_save_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
    delete info_;
  }
}

void label_save_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_save_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_save_ask_descriptor_;
}

const label_save_ask& label_save_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_save_ask* label_save_ask::default_instance_ = NULL;

label_save_ask* label_save_ask::New() const {
  return new label_save_ask;
}

void label_save_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::UPS_niiwoo::label::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_save_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_save_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .UPS_niiwoo.label info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_save_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_save_ask)
  return false;
#undef DO_
}

void label_save_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_save_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .UPS_niiwoo.label info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_save_ask)
}

::google::protobuf::uint8* label_save_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_save_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .UPS_niiwoo.label info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_save_ask)
  return target;
}

int label_save_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .UPS_niiwoo.label info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_save_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_save_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_save_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_save_ask::MergeFrom(const label_save_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_info()) {
      mutable_info()->::UPS_niiwoo::label::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_save_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_save_ask::CopyFrom(const label_save_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_save_ask::IsInitialized() const {

  return true;
}

void label_save_ask::Swap(label_save_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_save_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_save_ask_descriptor_;
  metadata.reflection = label_save_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_save_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_save_ans::label_save_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_save_ans)
}

void label_save_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_save_ans::label_save_ans(const label_save_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_save_ans)
}

void label_save_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_save_ans::~label_save_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_save_ans)
  SharedDtor();
}

void label_save_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_save_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_save_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_save_ans_descriptor_;
}

const label_save_ans& label_save_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_save_ans* label_save_ans::default_instance_ = NULL;

label_save_ans* label_save_ans::New() const {
  return new label_save_ans;
}

void label_save_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_save_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_save_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_save_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_save_ans)
  return false;
#undef DO_
}

void label_save_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_save_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_save_ans)
}

::google::protobuf::uint8* label_save_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_save_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_save_ans)
  return target;
}

int label_save_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_save_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_save_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_save_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_save_ans::MergeFrom(const label_save_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_save_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_save_ans::CopyFrom(const label_save_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_save_ans::IsInitialized() const {

  return true;
}

void label_save_ans::Swap(label_save_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_save_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_save_ans_descriptor_;
  metadata.reflection = label_save_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_remove_ask::kAskHeaderFieldNumber;
const int label_remove_ask::kLabelIdFieldNumber;
#endif  // !_MSC_VER

label_remove_ask::label_remove_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_remove_ask)
}

void label_remove_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_remove_ask::label_remove_ask(const label_remove_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_remove_ask)
}

void label_remove_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  label_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_remove_ask::~label_remove_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_remove_ask)
  SharedDtor();
}

void label_remove_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_remove_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_remove_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_remove_ask_descriptor_;
}

const label_remove_ask& label_remove_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_remove_ask* label_remove_ask::default_instance_ = NULL;

label_remove_ask* label_remove_ask::New() const {
  return new label_remove_ask;
}

void label_remove_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    label_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_remove_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_remove_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label_id;
        break;
      }

      // optional int32 label_id = 2;
      case 2: {
        if (tag == 16) {
         parse_label_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_remove_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_remove_ask)
  return false;
#undef DO_
}

void label_remove_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_remove_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 label_id = 2;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_remove_ask)
}

::google::protobuf::uint8* label_remove_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_remove_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 label_id = 2;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_remove_ask)
  return target;
}

int label_remove_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 label_id = 2;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_remove_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_remove_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_remove_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_remove_ask::MergeFrom(const label_remove_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_remove_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_remove_ask::CopyFrom(const label_remove_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_remove_ask::IsInitialized() const {

  return true;
}

void label_remove_ask::Swap(label_remove_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(label_id_, other->label_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_remove_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_remove_ask_descriptor_;
  metadata.reflection = label_remove_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_remove_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

label_remove_ans::label_remove_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_remove_ans)
}

void label_remove_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

label_remove_ans::label_remove_ans(const label_remove_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_remove_ans)
}

void label_remove_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_remove_ans::~label_remove_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_remove_ans)
  SharedDtor();
}

void label_remove_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void label_remove_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_remove_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_remove_ans_descriptor_;
}

const label_remove_ans& label_remove_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_remove_ans* label_remove_ans::default_instance_ = NULL;

label_remove_ans* label_remove_ans::New() const {
  return new label_remove_ans;
}

void label_remove_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_remove_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_remove_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_remove_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_remove_ans)
  return false;
#undef DO_
}

void label_remove_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_remove_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_remove_ans)
}

::google::protobuf::uint8* label_remove_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_remove_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_remove_ans)
  return target;
}

int label_remove_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_remove_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_remove_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_remove_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_remove_ans::MergeFrom(const label_remove_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_remove_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_remove_ans::CopyFrom(const label_remove_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_remove_ans::IsInitialized() const {

  return true;
}

void label_remove_ans::Swap(label_remove_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_remove_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_remove_ans_descriptor_;
  metadata.reflection = label_remove_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_labels_ask::kAskHeaderFieldNumber;
const int user_labels_ask::kIdCardFieldNumber;
const int user_labels_ask::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

user_labels_ask::user_labels_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_labels_ask)
}

void user_labels_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_labels_ask::user_labels_ask(const user_labels_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_labels_ask)
}

void user_labels_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_labels_ask::~user_labels_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_labels_ask)
  SharedDtor();
}

void user_labels_ask::SharedDtor() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_labels_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_labels_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_labels_ask_descriptor_;
}

const user_labels_ask& user_labels_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_labels_ask* user_labels_ask::default_instance_ = NULL;

user_labels_ask* user_labels_ask::New() const {
  return new user_labels_ask;
}

void user_labels_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_labels_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_labels_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_labels_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_labels_ask)
  return false;
#undef DO_
}

void user_labels_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_labels_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id_card(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_labels_ask)
}

::google::protobuf::uint8* user_labels_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_labels_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id_card(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_labels_ask)
  return target;
}

int user_labels_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_labels_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_labels_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_labels_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_labels_ask::MergeFrom(const user_labels_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_labels_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_labels_ask::CopyFrom(const user_labels_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_labels_ask::IsInitialized() const {

  return true;
}

void user_labels_ask::Swap(user_labels_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(id_card_, other->id_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_labels_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_labels_ask_descriptor_;
  metadata.reflection = user_labels_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_labels_ans::kLabelsFieldNumber;
const int user_labels_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_labels_ans::user_labels_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_labels_ans)
}

void user_labels_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_labels_ans::user_labels_ans(const user_labels_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_labels_ans)
}

void user_labels_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_labels_ans::~user_labels_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_labels_ans)
  SharedDtor();
}

void user_labels_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void user_labels_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_labels_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_labels_ans_descriptor_;
}

const user_labels_ans& user_labels_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_labels_ans* user_labels_ans::default_instance_ = NULL;

user_labels_ans* user_labels_ans::New() const {
  return new user_labels_ans;
}

void user_labels_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_labels_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_labels_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes labels = 1;
      case 1: {
        if (tag == 10) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_labels_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_labels_ans)
  return false;
#undef DO_
}

void user_labels_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_labels_ans)
  // repeated bytes labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->labels(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_labels_ans)
}

::google::protobuf::uint8* user_labels_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_labels_ans)
  // repeated bytes labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->labels(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_labels_ans)
  return target;
}

int user_labels_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated bytes labels = 1;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_labels_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_labels_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_labels_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_labels_ans::MergeFrom(const user_labels_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_labels_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_labels_ans::CopyFrom(const user_labels_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_labels_ans::IsInitialized() const {

  return true;
}

void user_labels_ans::Swap(user_labels_ans* other) {
  if (other != this) {
    labels_.Swap(&other->labels_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_labels_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_labels_ans_descriptor_;
  metadata.reflection = user_labels_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_users_ask::kAskHeaderFieldNumber;
const int label_users_ask::kLabelIdsFieldNumber;
const int label_users_ask::kAllInFieldNumber;
const int label_users_ask::kPageNumFieldNumber;
const int label_users_ask::kCurPageFieldNumber;
#endif  // !_MSC_VER

label_users_ask::label_users_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_users_ask)
}

void label_users_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

label_users_ask::label_users_ask(const label_users_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_users_ask)
}

void label_users_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  all_in_ = 2;
  page_num_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_users_ask::~label_users_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_users_ask)
  SharedDtor();
}

void label_users_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void label_users_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_users_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_users_ask_descriptor_;
}

const label_users_ask& label_users_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_users_ask* label_users_ask::default_instance_ = NULL;

label_users_ask* label_users_ask::New() const {
  return new label_users_ask;
}

void label_users_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<label_users_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(page_num_, cur_page_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    all_in_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  label_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_users_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_users_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label_ids;
        break;
      }

      // repeated int32 label_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_label_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_label_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_label_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label_ids;
        if (input->ExpectTag(24)) goto parse_all_in;
        break;
      }

      // optional int32 all_in = 3 [default = 2];
      case 3: {
        if (tag == 24) {
         parse_all_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_in_)));
          set_has_all_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_users_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_users_ask)
  return false;
#undef DO_
}

void label_users_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_users_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // repeated int32 label_ids = 2;
  for (int i = 0; i < this->label_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->label_ids(i), output);
  }

  // optional int32 all_in = 3 [default = 2];
  if (has_all_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->all_in(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_users_ask)
}

::google::protobuf::uint8* label_users_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_users_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // repeated int32 label_ids = 2;
  for (int i = 0; i < this->label_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->label_ids(i), target);
  }

  // optional int32 all_in = 3 [default = 2];
  if (has_all_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->all_in(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_users_ask)
  return target;
}

int label_users_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 all_in = 3 [default = 2];
    if (has_all_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_in());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  // repeated int32 label_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->label_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->label_ids(i));
    }
    total_size += 1 * this->label_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_users_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_users_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_users_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_users_ask::MergeFrom(const label_users_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_ids_.MergeFrom(from.label_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_all_in()) {
      set_all_in(from.all_in());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_users_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_users_ask::CopyFrom(const label_users_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_users_ask::IsInitialized() const {

  return true;
}

void label_users_ask::Swap(label_users_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    label_ids_.Swap(&other->label_ids_);
    std::swap(all_in_, other->all_in_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_users_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_users_ask_descriptor_;
  metadata.reflection = label_users_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_basic_info::kUserNameFieldNumber;
const int user_basic_info::kMobilePhoneFieldNumber;
const int user_basic_info::kIdCardNoFieldNumber;
const int user_basic_info::kPositionFieldNumber;
const int user_basic_info::kLivingLocInfoFieldNumber;
const int user_basic_info::kIdCardAddressFieldNumber;
const int user_basic_info::kLivingProvinceFieldNumber;
const int user_basic_info::kLivingCityFieldNumber;
const int user_basic_info::kLivingAddressFieldNumber;
#endif  // !_MSC_VER

user_basic_info::user_basic_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_basic_info)
}

void user_basic_info::InitAsDefaultInstance() {
}

user_basic_info::user_basic_info(const user_basic_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_basic_info)
}

void user_basic_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  living_loc_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  living_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  living_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  living_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_info::~user_basic_info() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_basic_info)
  SharedDtor();
}

void user_basic_info::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_no_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (living_loc_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_loc_info_;
  }
  if (id_card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_address_;
  }
  if (living_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_province_;
  }
  if (living_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_city_;
  }
  if (living_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_address_;
  }
  if (this != default_instance_) {
  }
}

void user_basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_info_descriptor_;
}

const user_basic_info& user_basic_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_basic_info* user_basic_info::default_instance_ = NULL;

user_basic_info* user_basic_info::New() const {
  return new user_basic_info;
}

void user_basic_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_card_no()) {
      if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_no_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_living_loc_info()) {
      if (living_loc_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        living_loc_info_->clear();
      }
    }
    if (has_id_card_address()) {
      if (id_card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_address_->clear();
      }
    }
    if (has_living_province()) {
      if (living_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        living_province_->clear();
      }
    }
    if (has_living_city()) {
      if (living_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        living_city_->clear();
      }
    }
  }
  if (has_living_address()) {
    if (living_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      living_address_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_basic_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card_no;
        break;
      }

      // optional bytes id_card_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional bytes position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_living_loc_info;
        break;
      }

      // optional bytes living_loc_info = 5;
      case 5: {
        if (tag == 42) {
         parse_living_loc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_living_loc_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_id_card_address;
        break;
      }

      // optional bytes id_card_address = 6;
      case 6: {
        if (tag == 50) {
         parse_id_card_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_living_province;
        break;
      }

      // optional bytes living_province = 7;
      case 7: {
        if (tag == 58) {
         parse_living_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_living_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_living_city;
        break;
      }

      // optional bytes living_city = 8;
      case 8: {
        if (tag == 66) {
         parse_living_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_living_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_living_address;
        break;
      }

      // optional bytes living_address = 9;
      case 9: {
        if (tag == 74) {
         parse_living_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_living_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_basic_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_basic_info)
  return false;
#undef DO_
}

void user_basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_basic_info)
  // optional bytes user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_card_no = 3;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card_no(), output);
  }

  // optional bytes position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->position(), output);
  }

  // optional bytes living_loc_info = 5;
  if (has_living_loc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->living_loc_info(), output);
  }

  // optional bytes id_card_address = 6;
  if (has_id_card_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->id_card_address(), output);
  }

  // optional bytes living_province = 7;
  if (has_living_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->living_province(), output);
  }

  // optional bytes living_city = 8;
  if (has_living_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->living_city(), output);
  }

  // optional bytes living_address = 9;
  if (has_living_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->living_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_basic_info)
}

::google::protobuf::uint8* user_basic_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_basic_info)
  // optional bytes user_name = 1;
  if (has_user_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_card_no = 3;
  if (has_id_card_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card_no(), target);
  }

  // optional bytes position = 4;
  if (has_position()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->position(), target);
  }

  // optional bytes living_loc_info = 5;
  if (has_living_loc_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->living_loc_info(), target);
  }

  // optional bytes id_card_address = 6;
  if (has_id_card_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->id_card_address(), target);
  }

  // optional bytes living_province = 7;
  if (has_living_province()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->living_province(), target);
  }

  // optional bytes living_city = 8;
  if (has_living_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->living_city(), target);
  }

  // optional bytes living_address = 9;
  if (has_living_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->living_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_basic_info)
  return target;
}

int user_basic_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_card_no = 3;
    if (has_id_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card_no());
    }

    // optional bytes position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position());
    }

    // optional bytes living_loc_info = 5;
    if (has_living_loc_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->living_loc_info());
    }

    // optional bytes id_card_address = 6;
    if (has_id_card_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card_address());
    }

    // optional bytes living_province = 7;
    if (has_living_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->living_province());
    }

    // optional bytes living_city = 8;
    if (has_living_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->living_city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes living_address = 9;
    if (has_living_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->living_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_info::MergeFrom(const user_basic_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_card_no()) {
      set_id_card_no(from.id_card_no());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_living_loc_info()) {
      set_living_loc_info(from.living_loc_info());
    }
    if (from.has_id_card_address()) {
      set_id_card_address(from.id_card_address());
    }
    if (from.has_living_province()) {
      set_living_province(from.living_province());
    }
    if (from.has_living_city()) {
      set_living_city(from.living_city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_living_address()) {
      set_living_address(from.living_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_info::CopyFrom(const user_basic_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_info::IsInitialized() const {

  return true;
}

void user_basic_info::Swap(user_basic_info* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_card_no_, other->id_card_no_);
    std::swap(position_, other->position_);
    std::swap(living_loc_info_, other->living_loc_info_);
    std::swap(id_card_address_, other->id_card_address_);
    std::swap(living_province_, other->living_province_);
    std::swap(living_city_, other->living_city_);
    std::swap(living_address_, other->living_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_info_descriptor_;
  metadata.reflection = user_basic_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_users_ans::kUsersFieldNumber;
const int label_users_ans::kTotalNumberFieldNumber;
const int label_users_ans::kResultFieldNumber;
#endif  // !_MSC_VER

label_users_ans::label_users_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_users_ans)
}

void label_users_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

label_users_ans::label_users_ans(const label_users_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_users_ans)
}

void label_users_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_users_ans::~label_users_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_users_ans)
  SharedDtor();
}

void label_users_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void label_users_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_users_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_users_ans_descriptor_;
}

const label_users_ans& label_users_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_users_ans* label_users_ans::default_instance_ = NULL;

label_users_ans* label_users_ans::New() const {
  return new label_users_ans;
}

void label_users_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_users_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_users_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UPS_niiwoo.user_basic_info users = 1;
      case 1: {
        if (tag == 10) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_users_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_users_ans)
  return false;
#undef DO_
}

void label_users_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_users_ans)
  // repeated .UPS_niiwoo.user_basic_info users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_users_ans)
}

::google::protobuf::uint8* label_users_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_users_ans)
  // repeated .UPS_niiwoo.user_basic_info users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_users_ans)
  return target;
}

int label_users_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UPS_niiwoo.user_basic_info users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_users_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_users_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_users_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_users_ans::MergeFrom(const label_users_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_users_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_users_ans::CopyFrom(const label_users_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_users_ans::IsInitialized() const {

  return true;
}

void label_users_ans::Swap(label_users_ans* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(total_number_, other->total_number_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_users_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_users_ans_descriptor_;
  metadata.reflection = label_users_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_avatar_ask::kAskHeaderFieldNumber;
const int user_avatar_ask::kNumFieldNumber;
#endif  // !_MSC_VER

user_avatar_ask::user_avatar_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_avatar_ask)
}

void user_avatar_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_avatar_ask::user_avatar_ask(const user_avatar_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_avatar_ask)
}

void user_avatar_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_avatar_ask::~user_avatar_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_avatar_ask)
  SharedDtor();
}

void user_avatar_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_avatar_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_avatar_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_avatar_ask_descriptor_;
}

const user_avatar_ask& user_avatar_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_avatar_ask* user_avatar_ask::default_instance_ = NULL;

user_avatar_ask* user_avatar_ask::New() const {
  return new user_avatar_ask;
}

void user_avatar_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_avatar_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_avatar_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_avatar_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_avatar_ask)
  return false;
#undef DO_
}

void user_avatar_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_avatar_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_avatar_ask)
}

::google::protobuf::uint8* user_avatar_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_avatar_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_avatar_ask)
  return target;
}

int user_avatar_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_avatar_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_avatar_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_avatar_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_avatar_ask::MergeFrom(const user_avatar_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_avatar_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_avatar_ask::CopyFrom(const user_avatar_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_avatar_ask::IsInitialized() const {

  return true;
}

void user_avatar_ask::Swap(user_avatar_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_avatar_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_avatar_ask_descriptor_;
  metadata.reflection = user_avatar_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_avatar_ans::kAvatarsFieldNumber;
const int user_avatar_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_avatar_ans::user_avatar_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_avatar_ans)
}

void user_avatar_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_avatar_ans::user_avatar_ans(const user_avatar_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_avatar_ans)
}

void user_avatar_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_avatar_ans::~user_avatar_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_avatar_ans)
  SharedDtor();
}

void user_avatar_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void user_avatar_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_avatar_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_avatar_ans_descriptor_;
}

const user_avatar_ans& user_avatar_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_avatar_ans* user_avatar_ans::default_instance_ = NULL;

user_avatar_ans* user_avatar_ans::New() const {
  return new user_avatar_ans;
}

void user_avatar_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  avatars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_avatar_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_avatar_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes avatars = 1;
      case 1: {
        if (tag == 10) {
         parse_avatars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_avatars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_avatars;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_avatar_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_avatar_ans)
  return false;
#undef DO_
}

void user_avatar_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_avatar_ans)
  // repeated bytes avatars = 1;
  for (int i = 0; i < this->avatars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->avatars(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_avatar_ans)
}

::google::protobuf::uint8* user_avatar_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_avatar_ans)
  // repeated bytes avatars = 1;
  for (int i = 0; i < this->avatars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->avatars(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_avatar_ans)
  return target;
}

int user_avatar_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated bytes avatars = 1;
  total_size += 1 * this->avatars_size();
  for (int i = 0; i < this->avatars_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->avatars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_avatar_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_avatar_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_avatar_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_avatar_ans::MergeFrom(const user_avatar_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  avatars_.MergeFrom(from.avatars_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_avatar_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_avatar_ans::CopyFrom(const user_avatar_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_avatar_ans::IsInitialized() const {

  return true;
}

void user_avatar_ans::Swap(user_avatar_ans* other) {
  if (other != this) {
    avatars_.Swap(&other->avatars_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_avatar_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_avatar_ans_descriptor_;
  metadata.reflection = user_avatar_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int income_source::kSourceTypeFieldNumber;
const int income_source::kMonthAvgFieldNumber;
const int income_source::kLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

income_source::income_source()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.income_source)
}

void income_source::InitAsDefaultInstance() {
}

income_source::income_source(const income_source& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.income_source)
}

void income_source::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourcetype_ = 0;
  monthavg_ = 0;
  lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

income_source::~income_source() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.income_source)
  SharedDtor();
}

void income_source::SharedDtor() {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void income_source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* income_source::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return income_source_descriptor_;
}

const income_source& income_source::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

income_source* income_source::default_instance_ = NULL;

income_source* income_source::New() const {
  return new income_source;
}

void income_source::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<income_source*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sourcetype_, monthavg_);
    if (has_lastupdatetime()) {
      if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastupdatetime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool income_source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.income_source)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sourceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monthAvg;
        break;
      }

      // optional int32 monthAvg = 2;
      case 2: {
        if (tag == 16) {
         parse_monthAvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthavg_)));
          set_has_monthavg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LastUpdateTime;
        break;
      }

      // optional bytes LastUpdateTime = 3;
      case 3: {
        if (tag == 26) {
         parse_LastUpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.income_source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.income_source)
  return false;
#undef DO_
}

void income_source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.income_source)
  // optional int32 sourceType = 1;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sourcetype(), output);
  }

  // optional int32 monthAvg = 2;
  if (has_monthavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monthavg(), output);
  }

  // optional bytes LastUpdateTime = 3;
  if (has_lastupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->lastupdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.income_source)
}

::google::protobuf::uint8* income_source::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.income_source)
  // optional int32 sourceType = 1;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sourcetype(), target);
  }

  // optional int32 monthAvg = 2;
  if (has_monthavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monthavg(), target);
  }

  // optional bytes LastUpdateTime = 3;
  if (has_lastupdatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->lastupdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.income_source)
  return target;
}

int income_source::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sourceType = 1;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetype());
    }

    // optional int32 monthAvg = 2;
    if (has_monthavg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthavg());
    }

    // optional bytes LastUpdateTime = 3;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void income_source::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const income_source* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const income_source*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void income_source::MergeFrom(const income_source& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_monthavg()) {
      set_monthavg(from.monthavg());
    }
    if (from.has_lastupdatetime()) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void income_source::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void income_source::CopyFrom(const income_source& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool income_source::IsInitialized() const {

  return true;
}

void income_source::Swap(income_source* other) {
  if (other != this) {
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(monthavg_, other->monthavg_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata income_source::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = income_source_descriptor_;
  metadata.reflection = income_source_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_house_info::kHouseTypeFieldNumber;
const int user_house_info::kMortgageFieldNumber;
const int user_house_info::kHouseAmountFieldNumber;
const int user_house_info::kHouseSizeFieldNumber;
const int user_house_info::kMortgageAmountFieldNumber;
const int user_house_info::kMortgagetermFieldNumber;
const int user_house_info::kHouseLoanFieldNumber;
const int user_house_info::kHouseProvinceFieldNumber;
const int user_house_info::kHouseCityFieldNumber;
const int user_house_info::kHouseAreaFieldNumber;
const int user_house_info::kHouseAddressFieldNumber;
const int user_house_info::kLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

user_house_info::user_house_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_house_info)
}

void user_house_info::InitAsDefaultInstance() {
}

user_house_info::user_house_info(const user_house_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_house_info)
}

void user_house_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  housetype_ = 0;
  mortgage_ = 0;
  houseamount_ = 0;
  housesize_ = 0;
  mortgageamount_ = 0;
  mortgageterm_ = 0;
  houseloan_ = 0;
  houseprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  housecity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  housearea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  houseaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_house_info::~user_house_info() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_house_info)
  SharedDtor();
}

void user_house_info::SharedDtor() {
  if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseprovince_;
  }
  if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housecity_;
  }
  if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housearea_;
  }
  if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseaddress_;
  }
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void user_house_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_house_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_house_info_descriptor_;
}

const user_house_info& user_house_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_house_info* user_house_info::default_instance_ = NULL;

user_house_info* user_house_info::New() const {
  return new user_house_info;
}

void user_house_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_house_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(housetype_, houseloan_);
    if (has_houseprovince()) {
      if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        houseprovince_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_housecity()) {
      if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        housecity_->clear();
      }
    }
    if (has_housearea()) {
      if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        housearea_->clear();
      }
    }
    if (has_houseaddress()) {
      if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        houseaddress_->clear();
      }
    }
    if (has_lastupdatetime()) {
      if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastupdatetime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_house_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_house_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HouseType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &housetype_)));
          set_has_housetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Mortgage;
        break;
      }

      // optional int32 Mortgage = 2;
      case 2: {
        if (tag == 16) {
         parse_Mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mortgage_)));
          set_has_mortgage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_HouseAmount;
        break;
      }

      // optional double HouseAmount = 3;
      case 3: {
        if (tag == 25) {
         parse_HouseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &houseamount_)));
          set_has_houseamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_HouseSize;
        break;
      }

      // optional double HouseSize = 4;
      case 4: {
        if (tag == 33) {
         parse_HouseSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &housesize_)));
          set_has_housesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_MortgageAmount;
        break;
      }

      // optional double MortgageAmount = 5;
      case 5: {
        if (tag == 41) {
         parse_MortgageAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgageamount_)));
          set_has_mortgageamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Mortgageterm;
        break;
      }

      // optional int32 Mortgageterm = 6;
      case 6: {
        if (tag == 48) {
         parse_Mortgageterm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mortgageterm_)));
          set_has_mortgageterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HouseLoan;
        break;
      }

      // optional int32 HouseLoan = 7;
      case 7: {
        if (tag == 56) {
         parse_HouseLoan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &houseloan_)));
          set_has_houseloan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_HouseProvince;
        break;
      }

      // optional bytes HouseProvince = 8;
      case 8: {
        if (tag == 66) {
         parse_HouseProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_houseprovince()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_HouseCity;
        break;
      }

      // optional bytes HouseCity = 9;
      case 9: {
        if (tag == 74) {
         parse_HouseCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_housecity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_HouseArea;
        break;
      }

      // optional bytes HouseArea = 10;
      case 10: {
        if (tag == 82) {
         parse_HouseArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_housearea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_HouseAddress;
        break;
      }

      // optional bytes HouseAddress = 11;
      case 11: {
        if (tag == 90) {
         parse_HouseAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_houseaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_LastUpdateTime;
        break;
      }

      // optional bytes LastUpdateTime = 12;
      case 12: {
        if (tag == 98) {
         parse_LastUpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_house_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_house_info)
  return false;
#undef DO_
}

void user_house_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_house_info)
  // optional int32 HouseType = 1;
  if (has_housetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->housetype(), output);
  }

  // optional int32 Mortgage = 2;
  if (has_mortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mortgage(), output);
  }

  // optional double HouseAmount = 3;
  if (has_houseamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->houseamount(), output);
  }

  // optional double HouseSize = 4;
  if (has_housesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->housesize(), output);
  }

  // optional double MortgageAmount = 5;
  if (has_mortgageamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->mortgageamount(), output);
  }

  // optional int32 Mortgageterm = 6;
  if (has_mortgageterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mortgageterm(), output);
  }

  // optional int32 HouseLoan = 7;
  if (has_houseloan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->houseloan(), output);
  }

  // optional bytes HouseProvince = 8;
  if (has_houseprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->houseprovince(), output);
  }

  // optional bytes HouseCity = 9;
  if (has_housecity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->housecity(), output);
  }

  // optional bytes HouseArea = 10;
  if (has_housearea()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->housearea(), output);
  }

  // optional bytes HouseAddress = 11;
  if (has_houseaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->houseaddress(), output);
  }

  // optional bytes LastUpdateTime = 12;
  if (has_lastupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->lastupdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_house_info)
}

::google::protobuf::uint8* user_house_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_house_info)
  // optional int32 HouseType = 1;
  if (has_housetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->housetype(), target);
  }

  // optional int32 Mortgage = 2;
  if (has_mortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mortgage(), target);
  }

  // optional double HouseAmount = 3;
  if (has_houseamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->houseamount(), target);
  }

  // optional double HouseSize = 4;
  if (has_housesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->housesize(), target);
  }

  // optional double MortgageAmount = 5;
  if (has_mortgageamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->mortgageamount(), target);
  }

  // optional int32 Mortgageterm = 6;
  if (has_mortgageterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mortgageterm(), target);
  }

  // optional int32 HouseLoan = 7;
  if (has_houseloan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->houseloan(), target);
  }

  // optional bytes HouseProvince = 8;
  if (has_houseprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->houseprovince(), target);
  }

  // optional bytes HouseCity = 9;
  if (has_housecity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->housecity(), target);
  }

  // optional bytes HouseArea = 10;
  if (has_housearea()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->housearea(), target);
  }

  // optional bytes HouseAddress = 11;
  if (has_houseaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->houseaddress(), target);
  }

  // optional bytes LastUpdateTime = 12;
  if (has_lastupdatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->lastupdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_house_info)
  return target;
}

int user_house_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HouseType = 1;
    if (has_housetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->housetype());
    }

    // optional int32 Mortgage = 2;
    if (has_mortgage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mortgage());
    }

    // optional double HouseAmount = 3;
    if (has_houseamount()) {
      total_size += 1 + 8;
    }

    // optional double HouseSize = 4;
    if (has_housesize()) {
      total_size += 1 + 8;
    }

    // optional double MortgageAmount = 5;
    if (has_mortgageamount()) {
      total_size += 1 + 8;
    }

    // optional int32 Mortgageterm = 6;
    if (has_mortgageterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mortgageterm());
    }

    // optional int32 HouseLoan = 7;
    if (has_houseloan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->houseloan());
    }

    // optional bytes HouseProvince = 8;
    if (has_houseprovince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->houseprovince());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes HouseCity = 9;
    if (has_housecity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->housecity());
    }

    // optional bytes HouseArea = 10;
    if (has_housearea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->housearea());
    }

    // optional bytes HouseAddress = 11;
    if (has_houseaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->houseaddress());
    }

    // optional bytes LastUpdateTime = 12;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_house_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_house_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_house_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_house_info::MergeFrom(const user_house_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_housetype()) {
      set_housetype(from.housetype());
    }
    if (from.has_mortgage()) {
      set_mortgage(from.mortgage());
    }
    if (from.has_houseamount()) {
      set_houseamount(from.houseamount());
    }
    if (from.has_housesize()) {
      set_housesize(from.housesize());
    }
    if (from.has_mortgageamount()) {
      set_mortgageamount(from.mortgageamount());
    }
    if (from.has_mortgageterm()) {
      set_mortgageterm(from.mortgageterm());
    }
    if (from.has_houseloan()) {
      set_houseloan(from.houseloan());
    }
    if (from.has_houseprovince()) {
      set_houseprovince(from.houseprovince());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_housecity()) {
      set_housecity(from.housecity());
    }
    if (from.has_housearea()) {
      set_housearea(from.housearea());
    }
    if (from.has_houseaddress()) {
      set_houseaddress(from.houseaddress());
    }
    if (from.has_lastupdatetime()) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_house_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_house_info::CopyFrom(const user_house_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_house_info::IsInitialized() const {

  return true;
}

void user_house_info::Swap(user_house_info* other) {
  if (other != this) {
    std::swap(housetype_, other->housetype_);
    std::swap(mortgage_, other->mortgage_);
    std::swap(houseamount_, other->houseamount_);
    std::swap(housesize_, other->housesize_);
    std::swap(mortgageamount_, other->mortgageamount_);
    std::swap(mortgageterm_, other->mortgageterm_);
    std::swap(houseloan_, other->houseloan_);
    std::swap(houseprovince_, other->houseprovince_);
    std::swap(housecity_, other->housecity_);
    std::swap(housearea_, other->housearea_);
    std::swap(houseaddress_, other->houseaddress_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_house_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_house_info_descriptor_;
  metadata.reflection = user_house_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_car_info::kCarPlateFieldNumber;
const int user_car_info::kCarloansFieldNumber;
const int user_car_info::kCarBrandFieldNumber;
const int user_car_info::kCarAgeFieldNumber;
const int user_car_info::kCarAmountFieldNumber;
const int user_car_info::kCarloansAmountFieldNumber;
const int user_car_info::kCarloanstermFieldNumber;
const int user_car_info::kLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

user_car_info::user_car_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_car_info)
}

void user_car_info::InitAsDefaultInstance() {
}

user_car_info::user_car_info(const user_car_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_car_info)
}

void user_car_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  carplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carloans_ = 0;
  carbrand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carage_ = 0;
  caramount_ = 0;
  carloansamount_ = 0;
  carloansterm_ = 0;
  lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_car_info::~user_car_info() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_car_info)
  SharedDtor();
}

void user_car_info::SharedDtor() {
  if (carplate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carplate_;
  }
  if (carbrand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carbrand_;
  }
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void user_car_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_car_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_car_info_descriptor_;
}

const user_car_info& user_car_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_car_info* user_car_info::default_instance_ = NULL;

user_car_info* user_car_info::New() const {
  return new user_car_info;
}

void user_car_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_car_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(carloans_, carloansamount_);
    if (has_carplate()) {
      if (carplate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carplate_->clear();
      }
    }
    if (has_carbrand()) {
      if (carbrand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carbrand_->clear();
      }
    }
    carloansterm_ = 0;
    if (has_lastupdatetime()) {
      if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastupdatetime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_car_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_car_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes CarPlate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_carplate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Carloans;
        break;
      }

      // optional int32 Carloans = 2;
      case 2: {
        if (tag == 16) {
         parse_Carloans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carloans_)));
          set_has_carloans();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CarBrand;
        break;
      }

      // optional bytes CarBrand = 3;
      case 3: {
        if (tag == 26) {
         parse_CarBrand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_carbrand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CarAge;
        break;
      }

      // optional int32 CarAge = 4;
      case 4: {
        if (tag == 32) {
         parse_CarAge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carage_)));
          set_has_carage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_CarAmount;
        break;
      }

      // optional double CarAmount = 5;
      case 5: {
        if (tag == 41) {
         parse_CarAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &caramount_)));
          set_has_caramount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_CarloansAmount;
        break;
      }

      // optional double CarloansAmount = 6;
      case 6: {
        if (tag == 49) {
         parse_CarloansAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carloansamount_)));
          set_has_carloansamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Carloansterm;
        break;
      }

      // optional int32 Carloansterm = 7;
      case 7: {
        if (tag == 56) {
         parse_Carloansterm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carloansterm_)));
          set_has_carloansterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_LastUpdateTime;
        break;
      }

      // optional bytes LastUpdateTime = 9;
      case 9: {
        if (tag == 74) {
         parse_LastUpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_car_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_car_info)
  return false;
#undef DO_
}

void user_car_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_car_info)
  // optional bytes CarPlate = 1;
  if (has_carplate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->carplate(), output);
  }

  // optional int32 Carloans = 2;
  if (has_carloans()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->carloans(), output);
  }

  // optional bytes CarBrand = 3;
  if (has_carbrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->carbrand(), output);
  }

  // optional int32 CarAge = 4;
  if (has_carage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->carage(), output);
  }

  // optional double CarAmount = 5;
  if (has_caramount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->caramount(), output);
  }

  // optional double CarloansAmount = 6;
  if (has_carloansamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->carloansamount(), output);
  }

  // optional int32 Carloansterm = 7;
  if (has_carloansterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->carloansterm(), output);
  }

  // optional bytes LastUpdateTime = 9;
  if (has_lastupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->lastupdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_car_info)
}

::google::protobuf::uint8* user_car_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_car_info)
  // optional bytes CarPlate = 1;
  if (has_carplate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->carplate(), target);
  }

  // optional int32 Carloans = 2;
  if (has_carloans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->carloans(), target);
  }

  // optional bytes CarBrand = 3;
  if (has_carbrand()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->carbrand(), target);
  }

  // optional int32 CarAge = 4;
  if (has_carage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->carage(), target);
  }

  // optional double CarAmount = 5;
  if (has_caramount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->caramount(), target);
  }

  // optional double CarloansAmount = 6;
  if (has_carloansamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->carloansamount(), target);
  }

  // optional int32 Carloansterm = 7;
  if (has_carloansterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->carloansterm(), target);
  }

  // optional bytes LastUpdateTime = 9;
  if (has_lastupdatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->lastupdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_car_info)
  return target;
}

int user_car_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes CarPlate = 1;
    if (has_carplate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->carplate());
    }

    // optional int32 Carloans = 2;
    if (has_carloans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carloans());
    }

    // optional bytes CarBrand = 3;
    if (has_carbrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->carbrand());
    }

    // optional int32 CarAge = 4;
    if (has_carage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carage());
    }

    // optional double CarAmount = 5;
    if (has_caramount()) {
      total_size += 1 + 8;
    }

    // optional double CarloansAmount = 6;
    if (has_carloansamount()) {
      total_size += 1 + 8;
    }

    // optional int32 Carloansterm = 7;
    if (has_carloansterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carloansterm());
    }

    // optional bytes LastUpdateTime = 9;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_car_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_car_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_car_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_car_info::MergeFrom(const user_car_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carplate()) {
      set_carplate(from.carplate());
    }
    if (from.has_carloans()) {
      set_carloans(from.carloans());
    }
    if (from.has_carbrand()) {
      set_carbrand(from.carbrand());
    }
    if (from.has_carage()) {
      set_carage(from.carage());
    }
    if (from.has_caramount()) {
      set_caramount(from.caramount());
    }
    if (from.has_carloansamount()) {
      set_carloansamount(from.carloansamount());
    }
    if (from.has_carloansterm()) {
      set_carloansterm(from.carloansterm());
    }
    if (from.has_lastupdatetime()) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_car_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_car_info::CopyFrom(const user_car_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_car_info::IsInitialized() const {

  return true;
}

void user_car_info::Swap(user_car_info* other) {
  if (other != this) {
    std::swap(carplate_, other->carplate_);
    std::swap(carloans_, other->carloans_);
    std::swap(carbrand_, other->carbrand_);
    std::swap(carage_, other->carage_);
    std::swap(caramount_, other->caramount_);
    std::swap(carloansamount_, other->carloansamount_);
    std::swap(carloansterm_, other->carloansterm_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_car_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_car_info_descriptor_;
  metadata.reflection = user_car_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_basic_info_ask::kAskHeaderFieldNumber;
const int user_basic_info_ask::kIdCardFieldNumber;
const int user_basic_info_ask::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

user_basic_info_ask::user_basic_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_basic_info_ask)
}

void user_basic_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_basic_info_ask::user_basic_info_ask(const user_basic_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_basic_info_ask)
}

void user_basic_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_info_ask::~user_basic_info_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_basic_info_ask)
  SharedDtor();
}

void user_basic_info_ask::SharedDtor() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_basic_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_info_ask_descriptor_;
}

const user_basic_info_ask& user_basic_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_basic_info_ask* user_basic_info_ask::default_instance_ = NULL;

user_basic_info_ask* user_basic_info_ask::New() const {
  return new user_basic_info_ask;
}

void user_basic_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_basic_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_basic_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_basic_info_ask)
  return false;
#undef DO_
}

void user_basic_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_basic_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id_card(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_basic_info_ask)
}

::google::protobuf::uint8* user_basic_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_basic_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id_card(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_basic_info_ask)
  return target;
}

int user_basic_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_info_ask::MergeFrom(const user_basic_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_info_ask::CopyFrom(const user_basic_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_info_ask::IsInitialized() const {

  return true;
}

void user_basic_info_ask::Swap(user_basic_info_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(id_card_, other->id_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_info_ask_descriptor_;
  metadata.reflection = user_basic_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_basic_info_ans::kUserIdFieldNumber;
const int user_basic_info_ans::kUsernicknameFieldNumber;
const int user_basic_info_ans::kUserRealNameFieldNumber;
const int user_basic_info_ans::kAvatarFieldNumber;
const int user_basic_info_ans::kAgeFieldNumber;
const int user_basic_info_ans::kSexFieldNumber;
const int user_basic_info_ans::kUserStatusFieldNumber;
const int user_basic_info_ans::kLateChargeFieldNumber;
const int user_basic_info_ans::kAdvanceAmountFieldNumber;
const int user_basic_info_ans::kLateCntFieldNumber;
const int user_basic_info_ans::kAdvanceAmountCntFieldNumber;
const int user_basic_info_ans::kMobilePhoneFieldNumber;
const int user_basic_info_ans::kUserIDCardFieldNumber;
const int user_basic_info_ans::kPhonePlaceFieldNumber;
const int user_basic_info_ans::kAddressTypeFieldNumber;
const int user_basic_info_ans::kHometownFieldNumber;
const int user_basic_info_ans::kCardTypeFieldNumber;
const int user_basic_info_ans::kMaritalStatusFieldNumber;
const int user_basic_info_ans::kCardAddressFieldNumber;
const int user_basic_info_ans::kChildrenStatusFieldNumber;
const int user_basic_info_ans::kLivingAddressFieldNumber;
const int user_basic_info_ans::kEduSchoolFieldNumber;
const int user_basic_info_ans::kAttendingCollegeFieldNumber;
const int user_basic_info_ans::kAttendingGradeFieldNumber;
const int user_basic_info_ans::kSchoolAddressFieldNumber;
const int user_basic_info_ans::kStudentProfessionalFieldNumber;
const int user_basic_info_ans::kAttendingClassFieldNumber;
const int user_basic_info_ans::kEducationApplyTypeFieldNumber;
const int user_basic_info_ans::kIsVerifyFieldNumber;
const int user_basic_info_ans::kMajorFieldNumber;
const int user_basic_info_ans::kEducationApplyTimeFieldNumber;
const int user_basic_info_ans::kGraduateSchoolFieldNumber;
const int user_basic_info_ans::kDegreeTypeFieldNumber;
const int user_basic_info_ans::kEntranceDateFieldNumber;
const int user_basic_info_ans::kGraduateDateFieldNumber;
const int user_basic_info_ans::kEduConclusionFieldNumber;
const int user_basic_info_ans::kEduFormFieldNumber;
const int user_basic_info_ans::kCompanyNameFieldNumber;
const int user_basic_info_ans::kPositionFieldNumber;
const int user_basic_info_ans::kJobProvinceFieldNumber;
const int user_basic_info_ans::kDeparmentFieldNumber;
const int user_basic_info_ans::kCompanyAddressFieldNumber;
const int user_basic_info_ans::kJobCityFieldNumber;
const int user_basic_info_ans::kJobAreaFieldNumber;
const int user_basic_info_ans::kIndustryFieldNumber;
const int user_basic_info_ans::kYearsFieldNumber;
const int user_basic_info_ans::kKnowWorkYearsFieldNumber;
const int user_basic_info_ans::kEmailFieldNumber;
const int user_basic_info_ans::kWorkPicsFieldNumber;
const int user_basic_info_ans::kIsEnterprisLegalPersonFieldNumber;
const int user_basic_info_ans::kEnterpRegistrTimeFieldNumber;
const int user_basic_info_ans::kEnterpRegistrCapitalFieldNumber;
const int user_basic_info_ans::kEnterpRegistrStateFieldNumber;
const int user_basic_info_ans::kIncomeSourceFieldNumber;
const int user_basic_info_ans::kUserHousePropertyInfoFieldNumber;
const int user_basic_info_ans::kUserCarPropertyInfoFieldNumber;
const int user_basic_info_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_basic_info_ans::user_basic_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_basic_info_ans)
}

void user_basic_info_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_basic_info_ans::user_basic_info_ans(const user_basic_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_basic_info_ans)
}

void user_basic_info_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userrealname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  sex_ = 0;
  userstatus_ = 0;
  latecharge_ = 0;
  advanceamount_ = 0;
  latecnt_ = 0;
  advanceamountcnt_ = 0;
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useridcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phoneplace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addresstype_ = 0;
  hometown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardtype_ = 0;
  maritalstatus_ = 0;
  cardaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  childrenstatus_ = 0;
  livingaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attendingcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attendinggrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schooladdress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  studentprofessional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attendingclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  educationapplytype_ = 0;
  isverify_ = 0;
  major_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  educationapplytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graduateschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degreetype_ = 0;
  entrancedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graduatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  educonclusion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deparment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industry_ = 0;
  years_ = 0;
  knowworkyears_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workpics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isenterprislegalperson_ = 0;
  enterpregistrtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enterpregistrcapital_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enterpregistrstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_basic_info_ans::~user_basic_info_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_basic_info_ans)
  SharedDtor();
}

void user_basic_info_ans::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (usernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usernickname_;
  }
  if (userrealname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userrealname_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (useridcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete useridcard_;
  }
  if (phoneplace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phoneplace_;
  }
  if (hometown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hometown_;
  }
  if (cardaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardaddress_;
  }
  if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingaddress_;
  }
  if (eduschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eduschool_;
  }
  if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingcollege_;
  }
  if (attendinggrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendinggrade_;
  }
  if (schooladdress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schooladdress_;
  }
  if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete studentprofessional_;
  }
  if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingclass_;
  }
  if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete major_;
  }
  if (educationapplytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educationapplytime_;
  }
  if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduateschool_;
  }
  if (entrancedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entrancedate_;
  }
  if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduatedate_;
  }
  if (educonclusion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educonclusion_;
  }
  if (eduform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eduform_;
  }
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (jobprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobprovince_;
  }
  if (deparment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deparment_;
  }
  if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyaddress_;
  }
  if (jobcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobcity_;
  }
  if (jobarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobarea_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (workpics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workpics_;
  }
  if (enterpregistrtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enterpregistrtime_;
  }
  if (enterpregistrcapital_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enterpregistrcapital_;
  }
  if (enterpregistrstate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enterpregistrstate_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void user_basic_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_basic_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_basic_info_ans_descriptor_;
}

const user_basic_info_ans& user_basic_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_basic_info_ans* user_basic_info_ans::default_instance_ = NULL;

user_basic_info_ans* user_basic_info_ans::New() const {
  return new user_basic_info_ans;
}

void user_basic_info_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_basic_info_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(age_, userstatus_);
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    if (has_usernickname()) {
      if (usernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usernickname_->clear();
      }
    }
    if (has_userrealname()) {
      if (userrealname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userrealname_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(latecnt_, advanceamount_);
    ZR_(advanceamountcnt_, addresstype_);
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_useridcard()) {
      if (useridcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        useridcard_->clear();
      }
    }
    if (has_phoneplace()) {
      if (phoneplace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phoneplace_->clear();
      }
    }
    if (has_hometown()) {
      if (hometown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hometown_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(cardtype_, maritalstatus_);
    if (has_cardaddress()) {
      if (cardaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cardaddress_->clear();
      }
    }
    childrenstatus_ = 0;
    if (has_livingaddress()) {
      if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livingaddress_->clear();
      }
    }
    if (has_eduschool()) {
      if (eduschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eduschool_->clear();
      }
    }
    if (has_attendingcollege()) {
      if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attendingcollege_->clear();
      }
    }
    if (has_attendinggrade()) {
      if (attendinggrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attendinggrade_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_schooladdress()) {
      if (schooladdress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schooladdress_->clear();
      }
    }
    if (has_studentprofessional()) {
      if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        studentprofessional_->clear();
      }
    }
    if (has_attendingclass()) {
      if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attendingclass_->clear();
      }
    }
    educationapplytype_ = 0;
    isverify_ = 0;
    if (has_major()) {
      if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        major_->clear();
      }
    }
    if (has_educationapplytime()) {
      if (educationapplytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        educationapplytime_->clear();
      }
    }
    if (has_graduateschool()) {
      if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graduateschool_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    degreetype_ = 0;
    if (has_entrancedate()) {
      if (entrancedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entrancedate_->clear();
      }
    }
    if (has_graduatedate()) {
      if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graduatedate_->clear();
      }
    }
    if (has_educonclusion()) {
      if (educonclusion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        educonclusion_->clear();
      }
    }
    if (has_eduform()) {
      if (eduform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eduform_->clear();
      }
    }
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyname_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_jobprovince()) {
      if (jobprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobprovince_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(industry_, years_);
    if (has_deparment()) {
      if (deparment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deparment_->clear();
      }
    }
    if (has_companyaddress()) {
      if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyaddress_->clear();
      }
    }
    if (has_jobcity()) {
      if (jobcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobcity_->clear();
      }
    }
    if (has_jobarea()) {
      if (jobarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobarea_->clear();
      }
    }
    knowworkyears_ = 0;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 2031616) {
    if (has_workpics()) {
      if (workpics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        workpics_->clear();
      }
    }
    isenterprislegalperson_ = 0;
    if (has_enterpregistrtime()) {
      if (enterpregistrtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enterpregistrtime_->clear();
      }
    }
    if (has_enterpregistrcapital()) {
      if (enterpregistrcapital_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enterpregistrcapital_->clear();
      }
    }
    if (has_enterpregistrstate()) {
      if (enterpregistrstate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enterpregistrstate_->clear();
      }
    }
  }
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  incomesource_.Clear();
  userhousepropertyinfo_.Clear();
  usercarpropertyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_basic_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_basic_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes usernickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usernickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserRealName;
        break;
      }

      // optional bytes UserRealName = 2;
      case 2: {
        if (tag == 18) {
         parse_UserRealName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userrealname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }

      // optional int32 age = 3;
      case 3: {
        if (tag == 24) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_MobilePhone;
        break;
      }

      // optional bytes MobilePhone = 8;
      case 8: {
        if (tag == 66) {
         parse_MobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_UserIDCard;
        break;
      }

      // optional bytes UserIDCard = 9;
      case 9: {
        if (tag == 74) {
         parse_UserIDCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_useridcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_phonePlace;
        break;
      }

      // optional bytes phonePlace = 10;
      case 10: {
        if (tag == 82) {
         parse_phonePlace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phoneplace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_AddressType;
        break;
      }

      // optional int32 AddressType = 11;
      case 11: {
        if (tag == 88) {
         parse_AddressType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addresstype_)));
          set_has_addresstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Hometown;
        break;
      }

      // optional bytes Hometown = 12;
      case 12: {
        if (tag == 98) {
         parse_Hometown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hometown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_CardType;
        break;
      }

      // optional int32 CardType = 13;
      case 13: {
        if (tag == 104) {
         parse_CardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_MaritalStatus;
        break;
      }

      // optional int32 MaritalStatus = 15;
      case 15: {
        if (tag == 120) {
         parse_MaritalStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maritalstatus_)));
          set_has_maritalstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_CardAddress;
        break;
      }

      // optional bytes CardAddress = 16;
      case 16: {
        if (tag == 130) {
         parse_CardAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ChildrenStatus;
        break;
      }

      // optional int32 ChildrenStatus = 17;
      case 17: {
        if (tag == 136) {
         parse_ChildrenStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childrenstatus_)));
          set_has_childrenstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_LivingAddress;
        break;
      }

      // optional bytes LivingAddress = 18;
      case 18: {
        if (tag == 146) {
         parse_LivingAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_livingaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_EduSchool;
        break;
      }

      // optional bytes EduSchool = 21;
      case 21: {
        if (tag == 170) {
         parse_EduSchool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eduschool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_AttendingCollege;
        break;
      }

      // optional bytes AttendingCollege = 22;
      case 22: {
        if (tag == 178) {
         parse_AttendingCollege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attendingcollege()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_AttendingGrade;
        break;
      }

      // optional bytes AttendingGrade = 23;
      case 23: {
        if (tag == 186) {
         parse_AttendingGrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attendinggrade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_SchoolAddress;
        break;
      }

      // optional bytes SchoolAddress = 24;
      case 24: {
        if (tag == 194) {
         parse_SchoolAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schooladdress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_StudentProfessional;
        break;
      }

      // optional bytes StudentProfessional = 25;
      case 25: {
        if (tag == 202) {
         parse_StudentProfessional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_studentprofessional()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_AttendingClass;
        break;
      }

      // optional bytes AttendingClass = 26;
      case 26: {
        if (tag == 210) {
         parse_AttendingClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attendingclass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_EducationApplyType;
        break;
      }

      // optional int32 EducationApplyType = 27;
      case 27: {
        if (tag == 216) {
         parse_EducationApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &educationapplytype_)));
          set_has_educationapplytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_IsVerify;
        break;
      }

      // optional int32 IsVerify = 28;
      case 28: {
        if (tag == 224) {
         parse_IsVerify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isverify_)));
          set_has_isverify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_Major;
        break;
      }

      // optional bytes Major = 29;
      case 29: {
        if (tag == 234) {
         parse_Major:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_major()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_EducationApplyTime;
        break;
      }

      // optional bytes EducationApplyTime = 30;
      case 30: {
        if (tag == 242) {
         parse_EducationApplyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_educationapplytime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_GraduateSchool;
        break;
      }

      // optional bytes GraduateSchool = 31;
      case 31: {
        if (tag == 250) {
         parse_GraduateSchool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graduateschool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_DegreeType;
        break;
      }

      // optional int32 DegreeType = 32;
      case 32: {
        if (tag == 256) {
         parse_DegreeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degreetype_)));
          set_has_degreetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_EntranceDate;
        break;
      }

      // optional bytes EntranceDate = 33;
      case 33: {
        if (tag == 266) {
         parse_EntranceDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entrancedate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_GraduateDate;
        break;
      }

      // optional bytes GraduateDate = 34;
      case 34: {
        if (tag == 274) {
         parse_GraduateDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graduatedate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_EduConclusion;
        break;
      }

      // optional bytes EduConclusion = 35;
      case 35: {
        if (tag == 282) {
         parse_EduConclusion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_educonclusion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_EduForm;
        break;
      }

      // optional bytes EduForm = 36;
      case 36: {
        if (tag == 290) {
         parse_EduForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eduform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_CompanyName;
        break;
      }

      // optional bytes CompanyName = 37;
      case 37: {
        if (tag == 298) {
         parse_CompanyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_Position;
        break;
      }

      // optional bytes Position = 38;
      case 38: {
        if (tag == 306) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_JobProvince;
        break;
      }

      // optional bytes JobProvince = 39;
      case 39: {
        if (tag == 314) {
         parse_JobProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jobprovince()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_Deparment;
        break;
      }

      // optional bytes Deparment = 40;
      case 40: {
        if (tag == 322) {
         parse_Deparment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deparment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_CompanyAddress;
        break;
      }

      // optional bytes CompanyAddress = 41;
      case 41: {
        if (tag == 330) {
         parse_CompanyAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_JobCity;
        break;
      }

      // optional bytes JobCity = 42;
      case 42: {
        if (tag == 338) {
         parse_JobCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jobcity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_JobArea;
        break;
      }

      // optional bytes JobArea = 43;
      case 43: {
        if (tag == 346) {
         parse_JobArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jobarea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_Industry;
        break;
      }

      // optional int32 Industry = 44;
      case 44: {
        if (tag == 352) {
         parse_Industry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &industry_)));
          set_has_industry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_Years;
        break;
      }

      // optional int32 Years = 46;
      case 46: {
        if (tag == 368) {
         parse_Years:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &years_)));
          set_has_years();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_KnowWorkYears;
        break;
      }

      // optional int32 KnowWorkYears = 47;
      case 47: {
        if (tag == 376) {
         parse_KnowWorkYears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knowworkyears_)));
          set_has_knowworkyears();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_Email;
        break;
      }

      // optional bytes Email = 48;
      case 48: {
        if (tag == 386) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_workPics;
        break;
      }

      // optional bytes workPics = 49;
      case 49: {
        if (tag == 394) {
         parse_workPics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_workpics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_IsEnterprisLegalPerson;
        break;
      }

      // optional int32 IsEnterprisLegalPerson = 50;
      case 50: {
        if (tag == 400) {
         parse_IsEnterprisLegalPerson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isenterprislegalperson_)));
          set_has_isenterprislegalperson();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_EnterpRegistrTime;
        break;
      }

      // optional bytes EnterpRegistrTime = 51;
      case 51: {
        if (tag == 410) {
         parse_EnterpRegistrTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enterpregistrtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_EnterpRegistrCapital;
        break;
      }

      // optional bytes EnterpRegistrCapital = 52;
      case 52: {
        if (tag == 418) {
         parse_EnterpRegistrCapital:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enterpregistrcapital()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_EnterpRegistrState;
        break;
      }

      // optional bytes EnterpRegistrState = 53;
      case 53: {
        if (tag == 426) {
         parse_EnterpRegistrState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enterpregistrstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_IncomeSource;
        break;
      }

      // repeated .UPS_niiwoo.income_source IncomeSource = 55;
      case 55: {
        if (tag == 442) {
         parse_IncomeSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incomesource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_IncomeSource;
        if (input->ExpectTag(450)) goto parse_UserHousePropertyInfo;
        break;
      }

      // repeated .UPS_niiwoo.user_house_info UserHousePropertyInfo = 56;
      case 56: {
        if (tag == 450) {
         parse_UserHousePropertyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userhousepropertyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_UserHousePropertyInfo;
        if (input->ExpectTag(458)) goto parse_UserCarPropertyInfo;
        break;
      }

      // repeated .UPS_niiwoo.user_car_info UserCarPropertyInfo = 57;
      case 57: {
        if (tag == 458) {
         parse_UserCarPropertyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercarpropertyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_UserCarPropertyInfo;
        if (input->ExpectTag(482)) goto parse_Avatar;
        break;
      }

      // optional bytes Avatar = 60;
      case 60: {
        if (tag == 482) {
         parse_Avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(489)) goto parse_lateCharge;
        break;
      }

      // optional double lateCharge = 61;
      case 61: {
        if (tag == 489) {
         parse_lateCharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latecharge_)));
          set_has_latecharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(497)) goto parse_advanceAmount;
        break;
      }

      // optional double advanceAmount = 62;
      case 62: {
        if (tag == 497) {
         parse_advanceAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &advanceamount_)));
          set_has_advanceamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_lateCnt;
        break;
      }

      // optional int32 lateCnt = 63;
      case 63: {
        if (tag == 504) {
         parse_lateCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latecnt_)));
          set_has_latecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_advanceAmountCnt;
        break;
      }

      // optional int32 advanceAmountCnt = 64;
      case 64: {
        if (tag == 512) {
         parse_advanceAmountCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advanceamountcnt_)));
          set_has_advanceamountcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_UserStatus;
        break;
      }

      // optional int32 UserStatus = 66;
      case 66: {
        if (tag == 528) {
         parse_UserStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_UserId;
        break;
      }

      // optional bytes UserId = 99;
      case 99: {
        if (tag == 794) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 100;
      case 100: {
        if (tag == 802) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_basic_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_basic_info_ans)
  return false;
#undef DO_
}

void user_basic_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_basic_info_ans)
  // optional bytes usernickname = 1;
  if (has_usernickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->usernickname(), output);
  }

  // optional bytes UserRealName = 2;
  if (has_userrealname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->userrealname(), output);
  }

  // optional int32 age = 3;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional bytes MobilePhone = 8;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->mobilephone(), output);
  }

  // optional bytes UserIDCard = 9;
  if (has_useridcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->useridcard(), output);
  }

  // optional bytes phonePlace = 10;
  if (has_phoneplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->phoneplace(), output);
  }

  // optional int32 AddressType = 11;
  if (has_addresstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->addresstype(), output);
  }

  // optional bytes Hometown = 12;
  if (has_hometown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->hometown(), output);
  }

  // optional int32 CardType = 13;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cardtype(), output);
  }

  // optional int32 MaritalStatus = 15;
  if (has_maritalstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->maritalstatus(), output);
  }

  // optional bytes CardAddress = 16;
  if (has_cardaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->cardaddress(), output);
  }

  // optional int32 ChildrenStatus = 17;
  if (has_childrenstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->childrenstatus(), output);
  }

  // optional bytes LivingAddress = 18;
  if (has_livingaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->livingaddress(), output);
  }

  // optional bytes EduSchool = 21;
  if (has_eduschool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->eduschool(), output);
  }

  // optional bytes AttendingCollege = 22;
  if (has_attendingcollege()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->attendingcollege(), output);
  }

  // optional bytes AttendingGrade = 23;
  if (has_attendinggrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->attendinggrade(), output);
  }

  // optional bytes SchoolAddress = 24;
  if (has_schooladdress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->schooladdress(), output);
  }

  // optional bytes StudentProfessional = 25;
  if (has_studentprofessional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->studentprofessional(), output);
  }

  // optional bytes AttendingClass = 26;
  if (has_attendingclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->attendingclass(), output);
  }

  // optional int32 EducationApplyType = 27;
  if (has_educationapplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->educationapplytype(), output);
  }

  // optional int32 IsVerify = 28;
  if (has_isverify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->isverify(), output);
  }

  // optional bytes Major = 29;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      29, this->major(), output);
  }

  // optional bytes EducationApplyTime = 30;
  if (has_educationapplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->educationapplytime(), output);
  }

  // optional bytes GraduateSchool = 31;
  if (has_graduateschool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      31, this->graduateschool(), output);
  }

  // optional int32 DegreeType = 32;
  if (has_degreetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->degreetype(), output);
  }

  // optional bytes EntranceDate = 33;
  if (has_entrancedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      33, this->entrancedate(), output);
  }

  // optional bytes GraduateDate = 34;
  if (has_graduatedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      34, this->graduatedate(), output);
  }

  // optional bytes EduConclusion = 35;
  if (has_educonclusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      35, this->educonclusion(), output);
  }

  // optional bytes EduForm = 36;
  if (has_eduform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      36, this->eduform(), output);
  }

  // optional bytes CompanyName = 37;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      37, this->companyname(), output);
  }

  // optional bytes Position = 38;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      38, this->position(), output);
  }

  // optional bytes JobProvince = 39;
  if (has_jobprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      39, this->jobprovince(), output);
  }

  // optional bytes Deparment = 40;
  if (has_deparment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->deparment(), output);
  }

  // optional bytes CompanyAddress = 41;
  if (has_companyaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      41, this->companyaddress(), output);
  }

  // optional bytes JobCity = 42;
  if (has_jobcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      42, this->jobcity(), output);
  }

  // optional bytes JobArea = 43;
  if (has_jobarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      43, this->jobarea(), output);
  }

  // optional int32 Industry = 44;
  if (has_industry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->industry(), output);
  }

  // optional int32 Years = 46;
  if (has_years()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->years(), output);
  }

  // optional int32 KnowWorkYears = 47;
  if (has_knowworkyears()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->knowworkyears(), output);
  }

  // optional bytes Email = 48;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      48, this->email(), output);
  }

  // optional bytes workPics = 49;
  if (has_workpics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      49, this->workpics(), output);
  }

  // optional int32 IsEnterprisLegalPerson = 50;
  if (has_isenterprislegalperson()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->isenterprislegalperson(), output);
  }

  // optional bytes EnterpRegistrTime = 51;
  if (has_enterpregistrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      51, this->enterpregistrtime(), output);
  }

  // optional bytes EnterpRegistrCapital = 52;
  if (has_enterpregistrcapital()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      52, this->enterpregistrcapital(), output);
  }

  // optional bytes EnterpRegistrState = 53;
  if (has_enterpregistrstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      53, this->enterpregistrstate(), output);
  }

  // repeated .UPS_niiwoo.income_source IncomeSource = 55;
  for (int i = 0; i < this->incomesource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->incomesource(i), output);
  }

  // repeated .UPS_niiwoo.user_house_info UserHousePropertyInfo = 56;
  for (int i = 0; i < this->userhousepropertyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->userhousepropertyinfo(i), output);
  }

  // repeated .UPS_niiwoo.user_car_info UserCarPropertyInfo = 57;
  for (int i = 0; i < this->usercarpropertyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->usercarpropertyinfo(i), output);
  }

  // optional bytes Avatar = 60;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      60, this->avatar(), output);
  }

  // optional double lateCharge = 61;
  if (has_latecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->latecharge(), output);
  }

  // optional double advanceAmount = 62;
  if (has_advanceamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(62, this->advanceamount(), output);
  }

  // optional int32 lateCnt = 63;
  if (has_latecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->latecnt(), output);
  }

  // optional int32 advanceAmountCnt = 64;
  if (has_advanceamountcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->advanceamountcnt(), output);
  }

  // optional int32 UserStatus = 66;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->userstatus(), output);
  }

  // optional bytes UserId = 99;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      99, this->userid(), output);
  }

  // optional .common.result_info result = 100;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_basic_info_ans)
}

::google::protobuf::uint8* user_basic_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_basic_info_ans)
  // optional bytes usernickname = 1;
  if (has_usernickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->usernickname(), target);
  }

  // optional bytes UserRealName = 2;
  if (has_userrealname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userrealname(), target);
  }

  // optional int32 age = 3;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional bytes MobilePhone = 8;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->mobilephone(), target);
  }

  // optional bytes UserIDCard = 9;
  if (has_useridcard()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->useridcard(), target);
  }

  // optional bytes phonePlace = 10;
  if (has_phoneplace()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->phoneplace(), target);
  }

  // optional int32 AddressType = 11;
  if (has_addresstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->addresstype(), target);
  }

  // optional bytes Hometown = 12;
  if (has_hometown()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->hometown(), target);
  }

  // optional int32 CardType = 13;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cardtype(), target);
  }

  // optional int32 MaritalStatus = 15;
  if (has_maritalstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->maritalstatus(), target);
  }

  // optional bytes CardAddress = 16;
  if (has_cardaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->cardaddress(), target);
  }

  // optional int32 ChildrenStatus = 17;
  if (has_childrenstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->childrenstatus(), target);
  }

  // optional bytes LivingAddress = 18;
  if (has_livingaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->livingaddress(), target);
  }

  // optional bytes EduSchool = 21;
  if (has_eduschool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->eduschool(), target);
  }

  // optional bytes AttendingCollege = 22;
  if (has_attendingcollege()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->attendingcollege(), target);
  }

  // optional bytes AttendingGrade = 23;
  if (has_attendinggrade()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->attendinggrade(), target);
  }

  // optional bytes SchoolAddress = 24;
  if (has_schooladdress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->schooladdress(), target);
  }

  // optional bytes StudentProfessional = 25;
  if (has_studentprofessional()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->studentprofessional(), target);
  }

  // optional bytes AttendingClass = 26;
  if (has_attendingclass()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->attendingclass(), target);
  }

  // optional int32 EducationApplyType = 27;
  if (has_educationapplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->educationapplytype(), target);
  }

  // optional int32 IsVerify = 28;
  if (has_isverify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->isverify(), target);
  }

  // optional bytes Major = 29;
  if (has_major()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->major(), target);
  }

  // optional bytes EducationApplyTime = 30;
  if (has_educationapplytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->educationapplytime(), target);
  }

  // optional bytes GraduateSchool = 31;
  if (has_graduateschool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->graduateschool(), target);
  }

  // optional int32 DegreeType = 32;
  if (has_degreetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->degreetype(), target);
  }

  // optional bytes EntranceDate = 33;
  if (has_entrancedate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->entrancedate(), target);
  }

  // optional bytes GraduateDate = 34;
  if (has_graduatedate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        34, this->graduatedate(), target);
  }

  // optional bytes EduConclusion = 35;
  if (has_educonclusion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        35, this->educonclusion(), target);
  }

  // optional bytes EduForm = 36;
  if (has_eduform()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        36, this->eduform(), target);
  }

  // optional bytes CompanyName = 37;
  if (has_companyname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->companyname(), target);
  }

  // optional bytes Position = 38;
  if (has_position()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        38, this->position(), target);
  }

  // optional bytes JobProvince = 39;
  if (has_jobprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        39, this->jobprovince(), target);
  }

  // optional bytes Deparment = 40;
  if (has_deparment()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->deparment(), target);
  }

  // optional bytes CompanyAddress = 41;
  if (has_companyaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        41, this->companyaddress(), target);
  }

  // optional bytes JobCity = 42;
  if (has_jobcity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->jobcity(), target);
  }

  // optional bytes JobArea = 43;
  if (has_jobarea()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        43, this->jobarea(), target);
  }

  // optional int32 Industry = 44;
  if (has_industry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->industry(), target);
  }

  // optional int32 Years = 46;
  if (has_years()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->years(), target);
  }

  // optional int32 KnowWorkYears = 47;
  if (has_knowworkyears()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->knowworkyears(), target);
  }

  // optional bytes Email = 48;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        48, this->email(), target);
  }

  // optional bytes workPics = 49;
  if (has_workpics()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        49, this->workpics(), target);
  }

  // optional int32 IsEnterprisLegalPerson = 50;
  if (has_isenterprislegalperson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->isenterprislegalperson(), target);
  }

  // optional bytes EnterpRegistrTime = 51;
  if (has_enterpregistrtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        51, this->enterpregistrtime(), target);
  }

  // optional bytes EnterpRegistrCapital = 52;
  if (has_enterpregistrcapital()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        52, this->enterpregistrcapital(), target);
  }

  // optional bytes EnterpRegistrState = 53;
  if (has_enterpregistrstate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        53, this->enterpregistrstate(), target);
  }

  // repeated .UPS_niiwoo.income_source IncomeSource = 55;
  for (int i = 0; i < this->incomesource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->incomesource(i), target);
  }

  // repeated .UPS_niiwoo.user_house_info UserHousePropertyInfo = 56;
  for (int i = 0; i < this->userhousepropertyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->userhousepropertyinfo(i), target);
  }

  // repeated .UPS_niiwoo.user_car_info UserCarPropertyInfo = 57;
  for (int i = 0; i < this->usercarpropertyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->usercarpropertyinfo(i), target);
  }

  // optional bytes Avatar = 60;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->avatar(), target);
  }

  // optional double lateCharge = 61;
  if (has_latecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->latecharge(), target);
  }

  // optional double advanceAmount = 62;
  if (has_advanceamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(62, this->advanceamount(), target);
  }

  // optional int32 lateCnt = 63;
  if (has_latecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->latecnt(), target);
  }

  // optional int32 advanceAmountCnt = 64;
  if (has_advanceamountcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->advanceamountcnt(), target);
  }

  // optional int32 UserStatus = 66;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->userstatus(), target);
  }

  // optional bytes UserId = 99;
  if (has_userid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        99, this->userid(), target);
  }

  // optional .common.result_info result = 100;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_basic_info_ans)
  return target;
}

int user_basic_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes UserId = 99;
    if (has_userid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }

    // optional bytes usernickname = 1;
    if (has_usernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->usernickname());
    }

    // optional bytes UserRealName = 2;
    if (has_userrealname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userrealname());
    }

    // optional bytes Avatar = 60;
    if (has_avatar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional int32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 UserStatus = 66;
    if (has_userstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

    // optional double lateCharge = 61;
    if (has_latecharge()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double advanceAmount = 62;
    if (has_advanceamount()) {
      total_size += 2 + 8;
    }

    // optional int32 lateCnt = 63;
    if (has_latecnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latecnt());
    }

    // optional int32 advanceAmountCnt = 64;
    if (has_advanceamountcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advanceamountcnt());
    }

    // optional bytes MobilePhone = 8;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes UserIDCard = 9;
    if (has_useridcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->useridcard());
    }

    // optional bytes phonePlace = 10;
    if (has_phoneplace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phoneplace());
    }

    // optional int32 AddressType = 11;
    if (has_addresstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addresstype());
    }

    // optional bytes Hometown = 12;
    if (has_hometown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hometown());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 CardType = 13;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 MaritalStatus = 15;
    if (has_maritalstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maritalstatus());
    }

    // optional bytes CardAddress = 16;
    if (has_cardaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cardaddress());
    }

    // optional int32 ChildrenStatus = 17;
    if (has_childrenstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childrenstatus());
    }

    // optional bytes LivingAddress = 18;
    if (has_livingaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->livingaddress());
    }

    // optional bytes EduSchool = 21;
    if (has_eduschool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eduschool());
    }

    // optional bytes AttendingCollege = 22;
    if (has_attendingcollege()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attendingcollege());
    }

    // optional bytes AttendingGrade = 23;
    if (has_attendinggrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attendinggrade());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes SchoolAddress = 24;
    if (has_schooladdress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schooladdress());
    }

    // optional bytes StudentProfessional = 25;
    if (has_studentprofessional()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->studentprofessional());
    }

    // optional bytes AttendingClass = 26;
    if (has_attendingclass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attendingclass());
    }

    // optional int32 EducationApplyType = 27;
    if (has_educationapplytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->educationapplytype());
    }

    // optional int32 IsVerify = 28;
    if (has_isverify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isverify());
    }

    // optional bytes Major = 29;
    if (has_major()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->major());
    }

    // optional bytes EducationApplyTime = 30;
    if (has_educationapplytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->educationapplytime());
    }

    // optional bytes GraduateSchool = 31;
    if (has_graduateschool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graduateschool());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 DegreeType = 32;
    if (has_degreetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degreetype());
    }

    // optional bytes EntranceDate = 33;
    if (has_entrancedate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entrancedate());
    }

    // optional bytes GraduateDate = 34;
    if (has_graduatedate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graduatedate());
    }

    // optional bytes EduConclusion = 35;
    if (has_educonclusion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->educonclusion());
    }

    // optional bytes EduForm = 36;
    if (has_eduform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eduform());
    }

    // optional bytes CompanyName = 37;
    if (has_companyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyname());
    }

    // optional bytes Position = 38;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position());
    }

    // optional bytes JobProvince = 39;
    if (has_jobprovince()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jobprovince());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bytes Deparment = 40;
    if (has_deparment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deparment());
    }

    // optional bytes CompanyAddress = 41;
    if (has_companyaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyaddress());
    }

    // optional bytes JobCity = 42;
    if (has_jobcity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jobcity());
    }

    // optional bytes JobArea = 43;
    if (has_jobarea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jobarea());
    }

    // optional int32 Industry = 44;
    if (has_industry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->industry());
    }

    // optional int32 Years = 46;
    if (has_years()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->years());
    }

    // optional int32 KnowWorkYears = 47;
    if (has_knowworkyears()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knowworkyears());
    }

    // optional bytes Email = 48;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bytes workPics = 49;
    if (has_workpics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->workpics());
    }

    // optional int32 IsEnterprisLegalPerson = 50;
    if (has_isenterprislegalperson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isenterprislegalperson());
    }

    // optional bytes EnterpRegistrTime = 51;
    if (has_enterpregistrtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enterpregistrtime());
    }

    // optional bytes EnterpRegistrCapital = 52;
    if (has_enterpregistrcapital()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enterpregistrcapital());
    }

    // optional bytes EnterpRegistrState = 53;
    if (has_enterpregistrstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enterpregistrstate());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .common.result_info result = 100;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UPS_niiwoo.income_source IncomeSource = 55;
  total_size += 2 * this->incomesource_size();
  for (int i = 0; i < this->incomesource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->incomesource(i));
  }

  // repeated .UPS_niiwoo.user_house_info UserHousePropertyInfo = 56;
  total_size += 2 * this->userhousepropertyinfo_size();
  for (int i = 0; i < this->userhousepropertyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userhousepropertyinfo(i));
  }

  // repeated .UPS_niiwoo.user_car_info UserCarPropertyInfo = 57;
  total_size += 2 * this->usercarpropertyinfo_size();
  for (int i = 0; i < this->usercarpropertyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercarpropertyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_basic_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_basic_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_basic_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_basic_info_ans::MergeFrom(const user_basic_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  incomesource_.MergeFrom(from.incomesource_);
  userhousepropertyinfo_.MergeFrom(from.userhousepropertyinfo_);
  usercarpropertyinfo_.MergeFrom(from.usercarpropertyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_usernickname()) {
      set_usernickname(from.usernickname());
    }
    if (from.has_userrealname()) {
      set_userrealname(from.userrealname());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_latecharge()) {
      set_latecharge(from.latecharge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_advanceamount()) {
      set_advanceamount(from.advanceamount());
    }
    if (from.has_latecnt()) {
      set_latecnt(from.latecnt());
    }
    if (from.has_advanceamountcnt()) {
      set_advanceamountcnt(from.advanceamountcnt());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_useridcard()) {
      set_useridcard(from.useridcard());
    }
    if (from.has_phoneplace()) {
      set_phoneplace(from.phoneplace());
    }
    if (from.has_addresstype()) {
      set_addresstype(from.addresstype());
    }
    if (from.has_hometown()) {
      set_hometown(from.hometown());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_maritalstatus()) {
      set_maritalstatus(from.maritalstatus());
    }
    if (from.has_cardaddress()) {
      set_cardaddress(from.cardaddress());
    }
    if (from.has_childrenstatus()) {
      set_childrenstatus(from.childrenstatus());
    }
    if (from.has_livingaddress()) {
      set_livingaddress(from.livingaddress());
    }
    if (from.has_eduschool()) {
      set_eduschool(from.eduschool());
    }
    if (from.has_attendingcollege()) {
      set_attendingcollege(from.attendingcollege());
    }
    if (from.has_attendinggrade()) {
      set_attendinggrade(from.attendinggrade());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_schooladdress()) {
      set_schooladdress(from.schooladdress());
    }
    if (from.has_studentprofessional()) {
      set_studentprofessional(from.studentprofessional());
    }
    if (from.has_attendingclass()) {
      set_attendingclass(from.attendingclass());
    }
    if (from.has_educationapplytype()) {
      set_educationapplytype(from.educationapplytype());
    }
    if (from.has_isverify()) {
      set_isverify(from.isverify());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_educationapplytime()) {
      set_educationapplytime(from.educationapplytime());
    }
    if (from.has_graduateschool()) {
      set_graduateschool(from.graduateschool());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_degreetype()) {
      set_degreetype(from.degreetype());
    }
    if (from.has_entrancedate()) {
      set_entrancedate(from.entrancedate());
    }
    if (from.has_graduatedate()) {
      set_graduatedate(from.graduatedate());
    }
    if (from.has_educonclusion()) {
      set_educonclusion(from.educonclusion());
    }
    if (from.has_eduform()) {
      set_eduform(from.eduform());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_jobprovince()) {
      set_jobprovince(from.jobprovince());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_deparment()) {
      set_deparment(from.deparment());
    }
    if (from.has_companyaddress()) {
      set_companyaddress(from.companyaddress());
    }
    if (from.has_jobcity()) {
      set_jobcity(from.jobcity());
    }
    if (from.has_jobarea()) {
      set_jobarea(from.jobarea());
    }
    if (from.has_industry()) {
      set_industry(from.industry());
    }
    if (from.has_years()) {
      set_years(from.years());
    }
    if (from.has_knowworkyears()) {
      set_knowworkyears(from.knowworkyears());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_workpics()) {
      set_workpics(from.workpics());
    }
    if (from.has_isenterprislegalperson()) {
      set_isenterprislegalperson(from.isenterprislegalperson());
    }
    if (from.has_enterpregistrtime()) {
      set_enterpregistrtime(from.enterpregistrtime());
    }
    if (from.has_enterpregistrcapital()) {
      set_enterpregistrcapital(from.enterpregistrcapital());
    }
    if (from.has_enterpregistrstate()) {
      set_enterpregistrstate(from.enterpregistrstate());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_basic_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_basic_info_ans::CopyFrom(const user_basic_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_basic_info_ans::IsInitialized() const {

  return true;
}

void user_basic_info_ans::Swap(user_basic_info_ans* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(usernickname_, other->usernickname_);
    std::swap(userrealname_, other->userrealname_);
    std::swap(avatar_, other->avatar_);
    std::swap(age_, other->age_);
    std::swap(sex_, other->sex_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(latecharge_, other->latecharge_);
    std::swap(advanceamount_, other->advanceamount_);
    std::swap(latecnt_, other->latecnt_);
    std::swap(advanceamountcnt_, other->advanceamountcnt_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(useridcard_, other->useridcard_);
    std::swap(phoneplace_, other->phoneplace_);
    std::swap(addresstype_, other->addresstype_);
    std::swap(hometown_, other->hometown_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(maritalstatus_, other->maritalstatus_);
    std::swap(cardaddress_, other->cardaddress_);
    std::swap(childrenstatus_, other->childrenstatus_);
    std::swap(livingaddress_, other->livingaddress_);
    std::swap(eduschool_, other->eduschool_);
    std::swap(attendingcollege_, other->attendingcollege_);
    std::swap(attendinggrade_, other->attendinggrade_);
    std::swap(schooladdress_, other->schooladdress_);
    std::swap(studentprofessional_, other->studentprofessional_);
    std::swap(attendingclass_, other->attendingclass_);
    std::swap(educationapplytype_, other->educationapplytype_);
    std::swap(isverify_, other->isverify_);
    std::swap(major_, other->major_);
    std::swap(educationapplytime_, other->educationapplytime_);
    std::swap(graduateschool_, other->graduateschool_);
    std::swap(degreetype_, other->degreetype_);
    std::swap(entrancedate_, other->entrancedate_);
    std::swap(graduatedate_, other->graduatedate_);
    std::swap(educonclusion_, other->educonclusion_);
    std::swap(eduform_, other->eduform_);
    std::swap(companyname_, other->companyname_);
    std::swap(position_, other->position_);
    std::swap(jobprovince_, other->jobprovince_);
    std::swap(deparment_, other->deparment_);
    std::swap(companyaddress_, other->companyaddress_);
    std::swap(jobcity_, other->jobcity_);
    std::swap(jobarea_, other->jobarea_);
    std::swap(industry_, other->industry_);
    std::swap(years_, other->years_);
    std::swap(knowworkyears_, other->knowworkyears_);
    std::swap(email_, other->email_);
    std::swap(workpics_, other->workpics_);
    std::swap(isenterprislegalperson_, other->isenterprislegalperson_);
    std::swap(enterpregistrtime_, other->enterpregistrtime_);
    std::swap(enterpregistrcapital_, other->enterpregistrcapital_);
    std::swap(enterpregistrstate_, other->enterpregistrstate_);
    incomesource_.Swap(&other->incomesource_);
    userhousepropertyinfo_.Swap(&other->userhousepropertyinfo_);
    usercarpropertyinfo_.Swap(&other->usercarpropertyinfo_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_basic_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_basic_info_ans_descriptor_;
  metadata.reflection = user_basic_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_common_ask::kAskHeaderFieldNumber;
const int user_common_ask::kIdCardFieldNumber;
const int user_common_ask::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

user_common_ask::user_common_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_common_ask)
}

void user_common_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_common_ask::user_common_ask(const user_common_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_common_ask)
}

void user_common_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_common_ask::~user_common_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_common_ask)
  SharedDtor();
}

void user_common_ask::SharedDtor() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_common_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_common_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_common_ask_descriptor_;
}

const user_common_ask& user_common_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_common_ask* user_common_ask::default_instance_ = NULL;

user_common_ask* user_common_ask::New() const {
  return new user_common_ask;
}

void user_common_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_common_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_common_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_common_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_common_ask)
  return false;
#undef DO_
}

void user_common_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_common_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id_card(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_common_ask)
}

::google::protobuf::uint8* user_common_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_common_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id_card(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_common_ask)
  return target;
}

int user_common_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_common_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_common_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_common_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_common_ask::MergeFrom(const user_common_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_common_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_common_ask::CopyFrom(const user_common_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_common_ask::IsInitialized() const {

  return true;
}

void user_common_ask::Swap(user_common_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(id_card_, other->id_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_common_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_common_ask_descriptor_;
  metadata.reflection = user_common_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_common_ans::kResultFieldNumber;
const int user_common_ans::kResultJsonFieldNumber;
#endif  // !_MSC_VER

user_common_ans::user_common_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_common_ans)
}

void user_common_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_common_ans::user_common_ans(const user_common_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_common_ans)
}

void user_common_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_common_ans::~user_common_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_common_ans)
  SharedDtor();
}

void user_common_ans::SharedDtor() {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void user_common_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_common_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_common_ans_descriptor_;
}

const user_common_ans& user_common_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_common_ans* user_common_ans::default_instance_ = NULL;

user_common_ans* user_common_ans::New() const {
  return new user_common_ans;
}

void user_common_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
    if (has_result_json()) {
      if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_json_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_common_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_common_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result_json;
        break;
      }

      // optional bytes result_json = 2;
      case 2: {
        if (tag == 18) {
         parse_result_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_common_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_common_ans)
  return false;
#undef DO_
}

void user_common_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_common_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional bytes result_json = 2;
  if (has_result_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->result_json(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_common_ans)
}

::google::protobuf::uint8* user_common_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_common_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional bytes result_json = 2;
  if (has_result_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_json(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_common_ans)
  return target;
}

int user_common_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional bytes result_json = 2;
    if (has_result_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_json());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_common_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_common_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_common_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_common_ans::MergeFrom(const user_common_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
    if (from.has_result_json()) {
      set_result_json(from.result_json());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_common_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_common_ans::CopyFrom(const user_common_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_common_ans::IsInitialized() const {

  return true;
}

void user_common_ans::Swap(user_common_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(result_json_, other->result_json_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_common_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_common_ans_descriptor_;
  metadata.reflection = user_common_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_labels_by_type_ask::kAskHeaderFieldNumber;
const int user_labels_by_type_ask::kIdCardFieldNumber;
const int user_labels_by_type_ask::kMobilePhoneFieldNumber;
const int user_labels_by_type_ask::kLabelTypeIdsFieldNumber;
#endif  // !_MSC_VER

user_labels_by_type_ask::user_labels_by_type_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_labels_by_type_ask)
}

void user_labels_by_type_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_labels_by_type_ask::user_labels_by_type_ask(const user_labels_by_type_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_labels_by_type_ask)
}

void user_labels_by_type_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_labels_by_type_ask::~user_labels_by_type_ask() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_labels_by_type_ask)
  SharedDtor();
}

void user_labels_by_type_ask::SharedDtor() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_labels_by_type_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_labels_by_type_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_labels_by_type_ask_descriptor_;
}

const user_labels_by_type_ask& user_labels_by_type_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_labels_by_type_ask* user_labels_by_type_ask::default_instance_ = NULL;

user_labels_by_type_ask* user_labels_by_type_ask::New() const {
  return new user_labels_by_type_ask;
}

void user_labels_by_type_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  label_type_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_labels_by_type_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_labels_by_type_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_label_type_ids;
        break;
      }

      // repeated int32 label_type_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_label_type_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_label_type_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_label_type_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_label_type_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_labels_by_type_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_labels_by_type_ask)
  return false;
#undef DO_
}

void user_labels_by_type_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_labels_by_type_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id_card(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // repeated int32 label_type_ids = 4;
  for (int i = 0; i < this->label_type_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->label_type_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_labels_by_type_ask)
}

::google::protobuf::uint8* user_labels_by_type_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_labels_by_type_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id_card(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // repeated int32 label_type_ids = 4;
  for (int i = 0; i < this->label_type_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->label_type_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_labels_by_type_ask)
  return target;
}

int user_labels_by_type_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  // repeated int32 label_type_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->label_type_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->label_type_ids(i));
    }
    total_size += 1 * this->label_type_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_labels_by_type_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_labels_by_type_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_labels_by_type_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_labels_by_type_ask::MergeFrom(const user_labels_by_type_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_type_ids_.MergeFrom(from.label_type_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_labels_by_type_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_labels_by_type_ask::CopyFrom(const user_labels_by_type_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_labels_by_type_ask::IsInitialized() const {

  return true;
}

void user_labels_by_type_ask::Swap(user_labels_by_type_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(id_card_, other->id_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    label_type_ids_.Swap(&other->label_type_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_labels_by_type_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_labels_by_type_ask_descriptor_;
  metadata.reflection = user_labels_by_type_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_set::kLabelTypeIdFieldNumber;
const int label_set::kLabelTypeFieldNumber;
const int label_set::kLabelsFieldNumber;
#endif  // !_MSC_VER

label_set::label_set()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.label_set)
}

void label_set::InitAsDefaultInstance() {
}

label_set::label_set(const label_set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.label_set)
}

void label_set::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_type_id_ = 0;
  label_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_set::~label_set() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.label_set)
  SharedDtor();
}

void label_set::SharedDtor() {
  if (label_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_type_;
  }
  if (this != default_instance_) {
  }
}

void label_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_set_descriptor_;
}

const label_set& label_set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

label_set* label_set::default_instance_ = NULL;

label_set* label_set::New() const {
  return new label_set;
}

void label_set::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    label_type_id_ = 0;
    if (has_label_type()) {
      if (label_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_type_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.label_set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label_type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_type_id_)));
          set_has_label_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label_type;
        break;
      }

      // optional bytes label_type = 2;
      case 2: {
        if (tag == 18) {
         parse_label_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // repeated bytes labels = 3;
      case 3: {
        if (tag == 26) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.label_set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.label_set)
  return false;
#undef DO_
}

void label_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.label_set)
  // optional int32 label_type_id = 1;
  if (has_label_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label_type_id(), output);
  }

  // optional bytes label_type = 2;
  if (has_label_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->label_type(), output);
  }

  // repeated bytes labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.label_set)
}

::google::protobuf::uint8* label_set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.label_set)
  // optional int32 label_type_id = 1;
  if (has_label_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label_type_id(), target);
  }

  // optional bytes label_type = 2;
  if (has_label_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->label_type(), target);
  }

  // repeated bytes labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.label_set)
  return target;
}

int label_set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 label_type_id = 1;
    if (has_label_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_type_id());
    }

    // optional bytes label_type = 2;
    if (has_label_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->label_type());
    }

  }
  // repeated bytes labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_set::MergeFrom(const label_set& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_type_id()) {
      set_label_type_id(from.label_type_id());
    }
    if (from.has_label_type()) {
      set_label_type(from.label_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_set::CopyFrom(const label_set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_set::IsInitialized() const {

  return true;
}

void label_set::Swap(label_set* other) {
  if (other != this) {
    std::swap(label_type_id_, other->label_type_id_);
    std::swap(label_type_, other->label_type_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_set_descriptor_;
  metadata.reflection = label_set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_labels_by_type_ans::kLabelsFieldNumber;
const int user_labels_by_type_ans::kResultFieldNumber;
#endif  // !_MSC_VER

user_labels_by_type_ans::user_labels_by_type_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UPS_niiwoo.user_labels_by_type_ans)
}

void user_labels_by_type_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

user_labels_by_type_ans::user_labels_by_type_ans(const user_labels_by_type_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UPS_niiwoo.user_labels_by_type_ans)
}

void user_labels_by_type_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_labels_by_type_ans::~user_labels_by_type_ans() {
  // @@protoc_insertion_point(destructor:UPS_niiwoo.user_labels_by_type_ans)
  SharedDtor();
}

void user_labels_by_type_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void user_labels_by_type_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_labels_by_type_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_labels_by_type_ans_descriptor_;
}

const user_labels_by_type_ans& user_labels_by_type_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_labels_by_type_ans* user_labels_by_type_ans::default_instance_ = NULL;

user_labels_by_type_ans* user_labels_by_type_ans::New() const {
  return new user_labels_by_type_ans;
}

void user_labels_by_type_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_labels_by_type_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UPS_niiwoo.user_labels_by_type_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UPS_niiwoo.label_set labels = 1;
      case 1: {
        if (tag == 10) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UPS_niiwoo.user_labels_by_type_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UPS_niiwoo.user_labels_by_type_ans)
  return false;
#undef DO_
}

void user_labels_by_type_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UPS_niiwoo.user_labels_by_type_ans)
  // repeated .UPS_niiwoo.label_set labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->labels(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UPS_niiwoo.user_labels_by_type_ans)
}

::google::protobuf::uint8* user_labels_by_type_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UPS_niiwoo.user_labels_by_type_ans)
  // repeated .UPS_niiwoo.label_set labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->labels(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UPS_niiwoo.user_labels_by_type_ans)
  return target;
}

int user_labels_by_type_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UPS_niiwoo.label_set labels = 1;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_labels_by_type_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_labels_by_type_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_labels_by_type_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_labels_by_type_ans::MergeFrom(const user_labels_by_type_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_labels_by_type_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_labels_by_type_ans::CopyFrom(const user_labels_by_type_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_labels_by_type_ans::IsInitialized() const {

  return true;
}

void user_labels_by_type_ans::Swap(user_labels_by_type_ans* other) {
  if (other != this) {
    labels_.Swap(&other->labels_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_labels_by_type_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_labels_by_type_ans_descriptor_;
  metadata.reflection = user_labels_by_type_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UPS_niiwoo

// @@protoc_insertion_point(global_scope)
