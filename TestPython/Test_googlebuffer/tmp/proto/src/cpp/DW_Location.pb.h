// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DW_Location.proto

#ifndef PROTOBUF_DW_5fLocation_2eproto__INCLUDED
#define PROTOBUF_DW_5fLocation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "UBAS_niiwoo.pb.h"
// @@protoc_insertion_point(includes)

namespace DW_Location {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DW_5fLocation_2eproto();
void protobuf_AssignDesc_DW_5fLocation_2eproto();
void protobuf_ShutdownFile_DW_5fLocation_2eproto();

class user_identification_list;
class user_overdue_info;
class LandedAccount;
class yuliu_common_user_info;
class yuliu_platform_user_info;
class platform_register_user_info;
class TerminalContactList;
class sex_proportion;
class degree_proportion;
class email_proportion;
class MobilePhoneListExt_ask;
class MobilePhoneListExt_ans;
class adressbook_chonghe_rate_info;
class adressbook_chonghe_rate_ask;
class adressbook_chonghe_rate_ans;
class DW_userinfo_ask;
class DW_userinfo_ans;
class DW_location_track_ans;
class DW_location_info_ans;
class DW_load_days_info_ans;
class static_report_result;
class user_profiles_ask;
class user_profiles_ans;
class user_basic_info_ask;
class user_basic_info_ans;
class wei_dan_bao_base_info;
class wei_dan_bao_base_info_ask;
class wei_dan_bao_base_info_ans;
class wei_dan_bao_success_info;
class wei_dan_bao_all_success_info_ask;
class wei_dan_bao_all_success_info_ans;
class guarantee_amount_use_score_info;
class avg_diligence_guarantee_score_info;
class avg_diligence_guarantee_score_ask;
class avg_diligence_guarantee_score_ans;
class guarantee_amount_use_score_ask;
class guarantee_amount_use_score_ans;
class rate_score_info;
class rate_score_ask;
class rate_score_ans;
class covers_time_score_info;
class covers_time_score_ask;
class covers_time_score_ans;
class follow_guarantee_invest_rank_info;
class follow_guarantee_invest_rank_ask;
class follow_guarantee_invest_rank_ans;
class borrower_evaluate_score_info;
class borrower_evaluate_score_ask;
class borrower_evaluate_score_ans;
class diligence_pass_score_info;
class diligence_pass_score_ask;
class diligence_pass_score_ans;
class blacklist_contacts_coincide_ask;
class blacklist_contacts_coincide_ans;
class batch_userinfo_ask;
class chatlog_userinfo;
class batch_userinfo_ans;

enum DW_ask_type {
  batch_user_info = 1,
  user_location_track = 2,
  user_basic_info_ = 3,
  user_load_days = 4
};
bool DW_ask_type_IsValid(int value);
const DW_ask_type DW_ask_type_MIN = batch_user_info;
const DW_ask_type DW_ask_type_MAX = user_load_days;
const int DW_ask_type_ARRAYSIZE = DW_ask_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DW_ask_type_descriptor();
inline const ::std::string& DW_ask_type_Name(DW_ask_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DW_ask_type_descriptor(), value);
}
inline bool DW_ask_type_Parse(
    const ::std::string& name, DW_ask_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DW_ask_type>(
    DW_ask_type_descriptor(), name, value);
}
enum platform_type {
  niiwoo_type = 1,
  tuandai_type = 2,
  both_type = 3,
  neither_type = 4
};
bool platform_type_IsValid(int value);
const platform_type platform_type_MIN = niiwoo_type;
const platform_type platform_type_MAX = neither_type;
const int platform_type_ARRAYSIZE = platform_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* platform_type_descriptor();
inline const ::std::string& platform_type_Name(platform_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    platform_type_descriptor(), value);
}
inline bool platform_type_Parse(
    const ::std::string& name, platform_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<platform_type>(
    platform_type_descriptor(), name, value);
}
enum overdue_type {
  borrow_overdue_type = 1,
  dianfu_overdue_type = 2,
  both_overdue = 3,
  not_overdue = 4
};
bool overdue_type_IsValid(int value);
const overdue_type overdue_type_MIN = borrow_overdue_type;
const overdue_type overdue_type_MAX = not_overdue;
const int overdue_type_ARRAYSIZE = overdue_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* overdue_type_descriptor();
inline const ::std::string& overdue_type_Name(overdue_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    overdue_type_descriptor(), value);
}
inline bool overdue_type_Parse(
    const ::std::string& name, overdue_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<overdue_type>(
    overdue_type_descriptor(), name, value);
}
enum static_report_type {
  user_total_num = 0,
  phone_bind_user_num = 1,
  realname_auth_user_num = 2,
  loan_user_num = 3,
  money_dabao_num = 4,
  money_xiaobao_num = 5,
  sesame_num_type = 6,
  degree_num = 7,
  email_num = 8
};
bool static_report_type_IsValid(int value);
const static_report_type static_report_type_MIN = user_total_num;
const static_report_type static_report_type_MAX = email_num;
const int static_report_type_ARRAYSIZE = static_report_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* static_report_type_descriptor();
inline const ::std::string& static_report_type_Name(static_report_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    static_report_type_descriptor(), value);
}
inline bool static_report_type_Parse(
    const ::std::string& name, static_report_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<static_report_type>(
    static_report_type_descriptor(), name, value);
}
enum avg_suc_type {
  month_suc_diligence_type = 1,
  month_suc_guarantee_type = 2
};
bool avg_suc_type_IsValid(int value);
const avg_suc_type avg_suc_type_MIN = month_suc_diligence_type;
const avg_suc_type avg_suc_type_MAX = month_suc_guarantee_type;
const int avg_suc_type_ARRAYSIZE = avg_suc_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* avg_suc_type_descriptor();
inline const ::std::string& avg_suc_type_Name(avg_suc_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    avg_suc_type_descriptor(), value);
}
inline bool avg_suc_type_Parse(
    const ::std::string& name, avg_suc_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<avg_suc_type>(
    avg_suc_type_descriptor(), name, value);
}
enum rate_score_type {
  cur_overdue_type = 1,
  cur_baddebt_type = 2,
  accumulate_overdue_type = 3,
  accumulate_baddebt_type = 4
};
bool rate_score_type_IsValid(int value);
const rate_score_type rate_score_type_MIN = cur_overdue_type;
const rate_score_type rate_score_type_MAX = accumulate_baddebt_type;
const int rate_score_type_ARRAYSIZE = rate_score_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* rate_score_type_descriptor();
inline const ::std::string& rate_score_type_Name(rate_score_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    rate_score_type_descriptor(), value);
}
inline bool rate_score_type_Parse(
    const ::std::string& name, rate_score_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rate_score_type>(
    rate_score_type_descriptor(), name, value);
}
enum covers_time_score_type {
  not_expired_bid = 1,
  expired_not_overdue = 2,
  borroweroverduebutnotdianfu = 3,
  never_not_dianfu = 4
};
bool covers_time_score_type_IsValid(int value);
const covers_time_score_type covers_time_score_type_MIN = not_expired_bid;
const covers_time_score_type covers_time_score_type_MAX = never_not_dianfu;
const int covers_time_score_type_ARRAYSIZE = covers_time_score_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* covers_time_score_type_descriptor();
inline const ::std::string& covers_time_score_type_Name(covers_time_score_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    covers_time_score_type_descriptor(), value);
}
inline bool covers_time_score_type_Parse(
    const ::std::string& name, covers_time_score_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<covers_time_score_type>(
    covers_time_score_type_descriptor(), name, value);
}
// ===================================================================

class user_identification_list : public ::google::protobuf::Message {
 public:
  user_identification_list();
  virtual ~user_identification_list();

  user_identification_list(const user_identification_list& from);

  inline user_identification_list& operator=(const user_identification_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_identification_list& default_instance();

  void Swap(user_identification_list* other);

  // implements Message ----------------------------------------------

  user_identification_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_identification_list& from);
  void MergeFrom(const user_identification_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.user_basic_identification user_info_list = 1;
  inline int user_info_list_size() const;
  inline void clear_user_info_list();
  static const int kUserInfoListFieldNumber = 1;
  inline const ::common::user_basic_identification& user_info_list(int index) const;
  inline ::common::user_basic_identification* mutable_user_info_list(int index);
  inline ::common::user_basic_identification* add_user_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::common::user_basic_identification >&
      user_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::user_basic_identification >*
      mutable_user_info_list();

  // @@protoc_insertion_point(class_scope:DW_Location.user_identification_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::user_basic_identification > user_info_list_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static user_identification_list* default_instance_;
};
// -------------------------------------------------------------------

class user_overdue_info : public ::google::protobuf::Message {
 public:
  user_overdue_info();
  virtual ~user_overdue_info();

  user_overdue_info(const user_overdue_info& from);

  inline user_overdue_info& operator=(const user_overdue_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_overdue_info& default_instance();

  void Swap(user_overdue_info* other);

  // implements Message ----------------------------------------------

  user_overdue_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_overdue_info& from);
  void MergeFrom(const user_overdue_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.user_basic_identification user_info = 1;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::common::user_basic_identification& user_info() const;
  inline ::common::user_basic_identification* mutable_user_info();
  inline ::common::user_basic_identification* release_user_info();
  inline void set_allocated_user_info(::common::user_basic_identification* user_info);

  // optional bool is_loan_overdue = 2;
  inline bool has_is_loan_overdue() const;
  inline void clear_is_loan_overdue();
  static const int kIsLoanOverdueFieldNumber = 2;
  inline bool is_loan_overdue() const;
  inline void set_is_loan_overdue(bool value);

  // optional bool is_assure_overdue = 3;
  inline bool has_is_assure_overdue() const;
  inline void clear_is_assure_overdue();
  static const int kIsAssureOverdueFieldNumber = 3;
  inline bool is_assure_overdue() const;
  inline void set_is_assure_overdue(bool value);

  // @@protoc_insertion_point(class_scope:DW_Location.user_overdue_info)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_is_loan_overdue();
  inline void clear_has_is_loan_overdue();
  inline void set_has_is_assure_overdue();
  inline void clear_has_is_assure_overdue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::user_basic_identification* user_info_;
  bool is_loan_overdue_;
  bool is_assure_overdue_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static user_overdue_info* default_instance_;
};
// -------------------------------------------------------------------

class LandedAccount : public ::google::protobuf::Message {
 public:
  LandedAccount();
  virtual ~LandedAccount();

  LandedAccount(const LandedAccount& from);

  inline LandedAccount& operator=(const LandedAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LandedAccount& default_instance();

  void Swap(LandedAccount* other);

  // implements Message ----------------------------------------------

  LandedAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LandedAccount& from);
  void MergeFrom(const LandedAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes mobilephone = 1;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilephoneFieldNumber = 1;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes identity_card = 2;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 2;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes last_login_time = 4;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 4;
  inline const ::std::string& last_login_time() const;
  inline void set_last_login_time(const ::std::string& value);
  inline void set_last_login_time(const char* value);
  inline void set_last_login_time(const void* value, size_t size);
  inline ::std::string* mutable_last_login_time();
  inline ::std::string* release_last_login_time();
  inline void set_allocated_last_login_time(::std::string* last_login_time);

  // @@protoc_insertion_point(class_scope:DW_Location.LandedAccount)
 private:
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mobilephone_;
  ::std::string* identity_card_;
  ::std::string* real_name_;
  ::std::string* last_login_time_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static LandedAccount* default_instance_;
};
// -------------------------------------------------------------------

class yuliu_common_user_info : public ::google::protobuf::Message {
 public:
  yuliu_common_user_info();
  virtual ~yuliu_common_user_info();

  yuliu_common_user_info(const yuliu_common_user_info& from);

  inline yuliu_common_user_info& operator=(const yuliu_common_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yuliu_common_user_info& default_instance();

  void Swap(yuliu_common_user_info* other);

  // implements Message ----------------------------------------------

  yuliu_common_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yuliu_common_user_info& from);
  void MergeFrom(const yuliu_common_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes phone_num = 2;
  inline bool has_phone_num() const;
  inline void clear_phone_num();
  static const int kPhoneNumFieldNumber = 2;
  inline const ::std::string& phone_num() const;
  inline void set_phone_num(const ::std::string& value);
  inline void set_phone_num(const char* value);
  inline void set_phone_num(const void* value, size_t size);
  inline ::std::string* mutable_phone_num();
  inline ::std::string* release_phone_num();
  inline void set_allocated_phone_num(::std::string* phone_num);

  // optional bytes relation = 3;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 3;
  inline const ::std::string& relation() const;
  inline void set_relation(const ::std::string& value);
  inline void set_relation(const char* value);
  inline void set_relation(const void* value, size_t size);
  inline ::std::string* mutable_relation();
  inline ::std::string* release_relation();
  inline void set_allocated_relation(::std::string* relation);

  // @@protoc_insertion_point(class_scope:DW_Location.yuliu_common_user_info)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone_num();
  inline void clear_has_phone_num();
  inline void set_has_relation();
  inline void clear_has_relation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* phone_num_;
  ::std::string* relation_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static yuliu_common_user_info* default_instance_;
};
// -------------------------------------------------------------------

class yuliu_platform_user_info : public ::google::protobuf::Message {
 public:
  yuliu_platform_user_info();
  virtual ~yuliu_platform_user_info();

  yuliu_platform_user_info(const yuliu_platform_user_info& from);

  inline yuliu_platform_user_info& operator=(const yuliu_platform_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yuliu_platform_user_info& default_instance();

  void Swap(yuliu_platform_user_info* other);

  // implements Message ----------------------------------------------

  yuliu_platform_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yuliu_platform_user_info& from);
  void MergeFrom(const yuliu_platform_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes avatar = 1;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 1;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes user_nickname = 2;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 2;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const void* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional bytes real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional .common.sex sex_type = 4;
  inline bool has_sex_type() const;
  inline void clear_sex_type();
  static const int kSexTypeFieldNumber = 4;
  inline ::common::sex sex_type() const;
  inline void set_sex_type(::common::sex value);

  // optional .DW_Location.overdue_type type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::DW_Location::overdue_type type() const;
  inline void set_type(::DW_Location::overdue_type value);

  // optional float chonghe_rate = 6;
  inline bool has_chonghe_rate() const;
  inline void clear_chonghe_rate();
  static const int kChongheRateFieldNumber = 6;
  inline float chonghe_rate() const;
  inline void set_chonghe_rate(float value);

  // optional bool is_in_adressbook = 7;
  inline bool has_is_in_adressbook() const;
  inline void clear_is_in_adressbook();
  static const int kIsInAdressbookFieldNumber = 7;
  inline bool is_in_adressbook() const;
  inline void set_is_in_adressbook(bool value);

  // optional bytes adressbook_remark_name = 8;
  inline bool has_adressbook_remark_name() const;
  inline void clear_adressbook_remark_name();
  static const int kAdressbookRemarkNameFieldNumber = 8;
  inline const ::std::string& adressbook_remark_name() const;
  inline void set_adressbook_remark_name(const ::std::string& value);
  inline void set_adressbook_remark_name(const char* value);
  inline void set_adressbook_remark_name(const void* value, size_t size);
  inline ::std::string* mutable_adressbook_remark_name();
  inline ::std::string* release_adressbook_remark_name();
  inline void set_allocated_adressbook_remark_name(::std::string* adressbook_remark_name);

  // optional .DW_Location.yuliu_common_user_info comm_info = 9;
  inline bool has_comm_info() const;
  inline void clear_comm_info();
  static const int kCommInfoFieldNumber = 9;
  inline const ::DW_Location::yuliu_common_user_info& comm_info() const;
  inline ::DW_Location::yuliu_common_user_info* mutable_comm_info();
  inline ::DW_Location::yuliu_common_user_info* release_comm_info();
  inline void set_allocated_comm_info(::DW_Location::yuliu_common_user_info* comm_info);

  // @@protoc_insertion_point(class_scope:DW_Location.yuliu_platform_user_info)
 private:
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_sex_type();
  inline void clear_has_sex_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_chonghe_rate();
  inline void clear_has_chonghe_rate();
  inline void set_has_is_in_adressbook();
  inline void clear_has_is_in_adressbook();
  inline void set_has_adressbook_remark_name();
  inline void clear_has_adressbook_remark_name();
  inline void set_has_comm_info();
  inline void clear_has_comm_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* avatar_;
  ::std::string* user_nickname_;
  ::std::string* real_name_;
  int sex_type_;
  int type_;
  float chonghe_rate_;
  bool is_in_adressbook_;
  ::std::string* adressbook_remark_name_;
  ::DW_Location::yuliu_common_user_info* comm_info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static yuliu_platform_user_info* default_instance_;
};
// -------------------------------------------------------------------

class platform_register_user_info : public ::google::protobuf::Message {
 public:
  platform_register_user_info();
  virtual ~platform_register_user_info();

  platform_register_user_info(const platform_register_user_info& from);

  inline platform_register_user_info& operator=(const platform_register_user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const platform_register_user_info& default_instance();

  void Swap(platform_register_user_info* other);

  // implements Message ----------------------------------------------

  platform_register_user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const platform_register_user_info& from);
  void MergeFrom(const platform_register_user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes adressbook_name = 1;
  inline bool has_adressbook_name() const;
  inline void clear_adressbook_name();
  static const int kAdressbookNameFieldNumber = 1;
  inline const ::std::string& adressbook_name() const;
  inline void set_adressbook_name(const ::std::string& value);
  inline void set_adressbook_name(const char* value);
  inline void set_adressbook_name(const void* value, size_t size);
  inline ::std::string* mutable_adressbook_name();
  inline ::std::string* release_adressbook_name();
  inline void set_allocated_adressbook_name(::std::string* adressbook_name);

  // optional bytes phone_num = 2;
  inline bool has_phone_num() const;
  inline void clear_phone_num();
  static const int kPhoneNumFieldNumber = 2;
  inline const ::std::string& phone_num() const;
  inline void set_phone_num(const ::std::string& value);
  inline void set_phone_num(const char* value);
  inline void set_phone_num(const void* value, size_t size);
  inline ::std::string* mutable_phone_num();
  inline ::std::string* release_phone_num();
  inline void set_allocated_phone_num(::std::string* phone_num);

  // optional .DW_Location.platform_type platfom_type_enum = 3;
  inline bool has_platfom_type_enum() const;
  inline void clear_platfom_type_enum();
  static const int kPlatfomTypeEnumFieldNumber = 3;
  inline ::DW_Location::platform_type platfom_type_enum() const;
  inline void set_platfom_type_enum(::DW_Location::platform_type value);

  // optional .DW_Location.overdue_type overdue_type_enum = 4;
  inline bool has_overdue_type_enum() const;
  inline void clear_overdue_type_enum();
  static const int kOverdueTypeEnumFieldNumber = 4;
  inline ::DW_Location::overdue_type overdue_type_enum() const;
  inline void set_overdue_type_enum(::DW_Location::overdue_type value);

  // @@protoc_insertion_point(class_scope:DW_Location.platform_register_user_info)
 private:
  inline void set_has_adressbook_name();
  inline void clear_has_adressbook_name();
  inline void set_has_phone_num();
  inline void clear_has_phone_num();
  inline void set_has_platfom_type_enum();
  inline void clear_has_platfom_type_enum();
  inline void set_has_overdue_type_enum();
  inline void clear_has_overdue_type_enum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* adressbook_name_;
  ::std::string* phone_num_;
  int platfom_type_enum_;
  int overdue_type_enum_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static platform_register_user_info* default_instance_;
};
// -------------------------------------------------------------------

class TerminalContactList : public ::google::protobuf::Message {
 public:
  TerminalContactList();
  virtual ~TerminalContactList();

  TerminalContactList(const TerminalContactList& from);

  inline TerminalContactList& operator=(const TerminalContactList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TerminalContactList& default_instance();

  void Swap(TerminalContactList* other);

  // implements Message ----------------------------------------------

  TerminalContactList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TerminalContactList& from);
  void MergeFrom(const TerminalContactList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes imei = 1;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 1;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const void* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional bytes mobile_brand = 2;
  inline bool has_mobile_brand() const;
  inline void clear_mobile_brand();
  static const int kMobileBrandFieldNumber = 2;
  inline const ::std::string& mobile_brand() const;
  inline void set_mobile_brand(const ::std::string& value);
  inline void set_mobile_brand(const char* value);
  inline void set_mobile_brand(const void* value, size_t size);
  inline ::std::string* mutable_mobile_brand();
  inline ::std::string* release_mobile_brand();
  inline void set_allocated_mobile_brand(::std::string* mobile_brand);

  // optional int32 iscommon = 3;
  inline bool has_iscommon() const;
  inline void clear_iscommon();
  static const int kIscommonFieldNumber = 3;
  inline ::google::protobuf::int32 iscommon() const;
  inline void set_iscommon(::google::protobuf::int32 value);

  // repeated .UBAS_niiwoo.user_contact_t constacts = 4;
  inline int constacts_size() const;
  inline void clear_constacts();
  static const int kConstactsFieldNumber = 4;
  inline const ::UBAS_niiwoo::user_contact_t& constacts(int index) const;
  inline ::UBAS_niiwoo::user_contact_t* mutable_constacts(int index);
  inline ::UBAS_niiwoo::user_contact_t* add_constacts();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >&
      constacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >*
      mutable_constacts();

  // repeated .DW_Location.LandedAccount landed_account = 5;
  inline int landed_account_size() const;
  inline void clear_landed_account();
  static const int kLandedAccountFieldNumber = 5;
  inline const ::DW_Location::LandedAccount& landed_account(int index) const;
  inline ::DW_Location::LandedAccount* mutable_landed_account(int index);
  inline ::DW_Location::LandedAccount* add_landed_account();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::LandedAccount >&
      landed_account() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::LandedAccount >*
      mutable_landed_account();

  // repeated .DW_Location.platform_register_user_info platform_register_user = 6;
  inline int platform_register_user_size() const;
  inline void clear_platform_register_user();
  static const int kPlatformRegisterUserFieldNumber = 6;
  inline const ::DW_Location::platform_register_user_info& platform_register_user(int index) const;
  inline ::DW_Location::platform_register_user_info* mutable_platform_register_user(int index);
  inline ::DW_Location::platform_register_user_info* add_platform_register_user();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >&
      platform_register_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >*
      mutable_platform_register_user();

  // @@protoc_insertion_point(class_scope:DW_Location.TerminalContactList)
 private:
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_mobile_brand();
  inline void clear_has_mobile_brand();
  inline void set_has_iscommon();
  inline void clear_has_iscommon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* imei_;
  ::std::string* mobile_brand_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t > constacts_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::LandedAccount > landed_account_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info > platform_register_user_;
  ::google::protobuf::int32 iscommon_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static TerminalContactList* default_instance_;
};
// -------------------------------------------------------------------

class sex_proportion : public ::google::protobuf::Message {
 public:
  sex_proportion();
  virtual ~sex_proportion();

  sex_proportion(const sex_proportion& from);

  inline sex_proportion& operator=(const sex_proportion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sex_proportion& default_instance();

  void Swap(sex_proportion* other);

  // implements Message ----------------------------------------------

  sex_proportion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sex_proportion& from);
  void MergeFrom(const sex_proportion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 male_num = 1;
  inline bool has_male_num() const;
  inline void clear_male_num();
  static const int kMaleNumFieldNumber = 1;
  inline ::google::protobuf::int32 male_num() const;
  inline void set_male_num(::google::protobuf::int32 value);

  // optional int32 girl_num = 2;
  inline bool has_girl_num() const;
  inline void clear_girl_num();
  static const int kGirlNumFieldNumber = 2;
  inline ::google::protobuf::int32 girl_num() const;
  inline void set_girl_num(::google::protobuf::int32 value);

  // optional int32 nuknow_num = 3;
  inline bool has_nuknow_num() const;
  inline void clear_nuknow_num();
  static const int kNuknowNumFieldNumber = 3;
  inline ::google::protobuf::int32 nuknow_num() const;
  inline void set_nuknow_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.sex_proportion)
 private:
  inline void set_has_male_num();
  inline void clear_has_male_num();
  inline void set_has_girl_num();
  inline void clear_has_girl_num();
  inline void set_has_nuknow_num();
  inline void clear_has_nuknow_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 male_num_;
  ::google::protobuf::int32 girl_num_;
  ::google::protobuf::int32 nuknow_num_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static sex_proportion* default_instance_;
};
// -------------------------------------------------------------------

class degree_proportion : public ::google::protobuf::Message {
 public:
  degree_proportion();
  virtual ~degree_proportion();

  degree_proportion(const degree_proportion& from);

  inline degree_proportion& operator=(const degree_proportion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const degree_proportion& default_instance();

  void Swap(degree_proportion* other);

  // implements Message ----------------------------------------------

  degree_proportion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const degree_proportion& from);
  void MergeFrom(const degree_proportion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 technical_num = 1;
  inline bool has_technical_num() const;
  inline void clear_technical_num();
  static const int kTechnicalNumFieldNumber = 1;
  inline ::google::protobuf::int32 technical_num() const;
  inline void set_technical_num(::google::protobuf::int32 value);

  // optional int32 college_num = 2;
  inline bool has_college_num() const;
  inline void clear_college_num();
  static const int kCollegeNumFieldNumber = 2;
  inline ::google::protobuf::int32 college_num() const;
  inline void set_college_num(::google::protobuf::int32 value);

  // optional int32 university_num = 3;
  inline bool has_university_num() const;
  inline void clear_university_num();
  static const int kUniversityNumFieldNumber = 3;
  inline ::google::protobuf::int32 university_num() const;
  inline void set_university_num(::google::protobuf::int32 value);

  // optional int32 graduate_num = 4;
  inline bool has_graduate_num() const;
  inline void clear_graduate_num();
  static const int kGraduateNumFieldNumber = 4;
  inline ::google::protobuf::int32 graduate_num() const;
  inline void set_graduate_num(::google::protobuf::int32 value);

  // optional int32 doctor_num = 5;
  inline bool has_doctor_num() const;
  inline void clear_doctor_num();
  static const int kDoctorNumFieldNumber = 5;
  inline ::google::protobuf::int32 doctor_num() const;
  inline void set_doctor_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.degree_proportion)
 private:
  inline void set_has_technical_num();
  inline void clear_has_technical_num();
  inline void set_has_college_num();
  inline void clear_has_college_num();
  inline void set_has_university_num();
  inline void clear_has_university_num();
  inline void set_has_graduate_num();
  inline void clear_has_graduate_num();
  inline void set_has_doctor_num();
  inline void clear_has_doctor_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 technical_num_;
  ::google::protobuf::int32 college_num_;
  ::google::protobuf::int32 university_num_;
  ::google::protobuf::int32 graduate_num_;
  ::google::protobuf::int32 doctor_num_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static degree_proportion* default_instance_;
};
// -------------------------------------------------------------------

class email_proportion : public ::google::protobuf::Message {
 public:
  email_proportion();
  virtual ~email_proportion();

  email_proportion(const email_proportion& from);

  inline email_proportion& operator=(const email_proportion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const email_proportion& default_instance();

  void Swap(email_proportion* other);

  // implements Message ----------------------------------------------

  email_proportion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const email_proportion& from);
  void MergeFrom(const email_proportion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const void* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional int32 email_num = 2;
  inline bool has_email_num() const;
  inline void clear_email_num();
  static const int kEmailNumFieldNumber = 2;
  inline ::google::protobuf::int32 email_num() const;
  inline void set_email_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.email_proportion)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_email_num();
  inline void clear_has_email_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* email_;
  ::google::protobuf::int32 email_num_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static email_proportion* default_instance_;
};
// -------------------------------------------------------------------

class MobilePhoneListExt_ask : public ::google::protobuf::Message {
 public:
  MobilePhoneListExt_ask();
  virtual ~MobilePhoneListExt_ask();

  MobilePhoneListExt_ask(const MobilePhoneListExt_ask& from);

  inline MobilePhoneListExt_ask& operator=(const MobilePhoneListExt_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobilePhoneListExt_ask& default_instance();

  void Swap(MobilePhoneListExt_ask* other);

  // implements Message ----------------------------------------------

  MobilePhoneListExt_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobilePhoneListExt_ask& from);
  void MergeFrom(const MobilePhoneListExt_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes identity_card = 2;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 2;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // @@protoc_insertion_point(class_scope:DW_Location.MobilePhoneListExt_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* identity_card_;
  ::std::string* mobile_phone_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static MobilePhoneListExt_ask* default_instance_;
};
// -------------------------------------------------------------------

class MobilePhoneListExt_ans : public ::google::protobuf::Message {
 public:
  MobilePhoneListExt_ans();
  virtual ~MobilePhoneListExt_ans();

  MobilePhoneListExt_ans(const MobilePhoneListExt_ans& from);

  inline MobilePhoneListExt_ans& operator=(const MobilePhoneListExt_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobilePhoneListExt_ans& default_instance();

  void Swap(MobilePhoneListExt_ans* other);

  // implements Message ----------------------------------------------

  MobilePhoneListExt_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobilePhoneListExt_ans& from);
  void MergeFrom(const MobilePhoneListExt_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::errorinfo& result() const;
  inline ::common::errorinfo* mutable_result();
  inline ::common::errorinfo* release_result();
  inline void set_allocated_result(::common::errorinfo* result);

  // optional .common.user_info user_info_ = 2;
  inline bool has_user_info_() const;
  inline void clear_user_info_();
  static const int kUserInfoFieldNumber = 2;
  inline const ::common::user_info& user_info_() const;
  inline ::common::user_info* mutable_user_info_();
  inline ::common::user_info* release_user_info_();
  inline void set_allocated_user_info_(::common::user_info* user_info_);

  // repeated .DW_Location.TerminalContactList terminal_contacts = 3;
  inline int terminal_contacts_size() const;
  inline void clear_terminal_contacts();
  static const int kTerminalContactsFieldNumber = 3;
  inline const ::DW_Location::TerminalContactList& terminal_contacts(int index) const;
  inline ::DW_Location::TerminalContactList* mutable_terminal_contacts(int index);
  inline ::DW_Location::TerminalContactList* add_terminal_contacts();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::TerminalContactList >&
      terminal_contacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::TerminalContactList >*
      mutable_terminal_contacts();

  // optional .DW_Location.overdue_type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::DW_Location::overdue_type type() const;
  inline void set_type(::DW_Location::overdue_type value);

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 5;
  inline int yuliu_common_user_size() const;
  inline void clear_yuliu_common_user();
  static const int kYuliuCommonUserFieldNumber = 5;
  inline const ::DW_Location::yuliu_common_user_info& yuliu_common_user(int index) const;
  inline ::DW_Location::yuliu_common_user_info* mutable_yuliu_common_user(int index);
  inline ::DW_Location::yuliu_common_user_info* add_yuliu_common_user();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >&
      yuliu_common_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >*
      mutable_yuliu_common_user();

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 6;
  inline int yuliu_platform_user_size() const;
  inline void clear_yuliu_platform_user();
  static const int kYuliuPlatformUserFieldNumber = 6;
  inline const ::DW_Location::yuliu_platform_user_info& yuliu_platform_user(int index) const;
  inline ::DW_Location::yuliu_platform_user_info* mutable_yuliu_platform_user(int index);
  inline ::DW_Location::yuliu_platform_user_info* add_yuliu_platform_user();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >&
      yuliu_platform_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >*
      mutable_yuliu_platform_user();

  // @@protoc_insertion_point(class_scope:DW_Location.MobilePhoneListExt_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_info_();
  inline void clear_has_user_info_();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* result_;
  ::common::user_info* user_info__;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::TerminalContactList > terminal_contacts_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info > yuliu_common_user_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info > yuliu_platform_user_;
  int type_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static MobilePhoneListExt_ans* default_instance_;
};
// -------------------------------------------------------------------

class adressbook_chonghe_rate_info : public ::google::protobuf::Message {
 public:
  adressbook_chonghe_rate_info();
  virtual ~adressbook_chonghe_rate_info();

  adressbook_chonghe_rate_info(const adressbook_chonghe_rate_info& from);

  inline adressbook_chonghe_rate_info& operator=(const adressbook_chonghe_rate_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adressbook_chonghe_rate_info& default_instance();

  void Swap(adressbook_chonghe_rate_info* other);

  // implements Message ----------------------------------------------

  adressbook_chonghe_rate_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adressbook_chonghe_rate_info& from);
  void MergeFrom(const adressbook_chonghe_rate_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes original_device_no = 1;
  inline bool has_original_device_no() const;
  inline void clear_original_device_no();
  static const int kOriginalDeviceNoFieldNumber = 1;
  inline const ::std::string& original_device_no() const;
  inline void set_original_device_no(const ::std::string& value);
  inline void set_original_device_no(const char* value);
  inline void set_original_device_no(const void* value, size_t size);
  inline ::std::string* mutable_original_device_no();
  inline ::std::string* release_original_device_no();
  inline void set_allocated_original_device_no(::std::string* original_device_no);

  // optional bytes other_device_no = 2;
  inline bool has_other_device_no() const;
  inline void clear_other_device_no();
  static const int kOtherDeviceNoFieldNumber = 2;
  inline const ::std::string& other_device_no() const;
  inline void set_other_device_no(const ::std::string& value);
  inline void set_other_device_no(const char* value);
  inline void set_other_device_no(const void* value, size_t size);
  inline ::std::string* mutable_other_device_no();
  inline ::std::string* release_other_device_no();
  inline void set_allocated_other_device_no(::std::string* other_device_no);

  // optional float chonghe_rate = 3;
  inline bool has_chonghe_rate() const;
  inline void clear_chonghe_rate();
  static const int kChongheRateFieldNumber = 3;
  inline float chonghe_rate() const;
  inline void set_chonghe_rate(float value);

  // @@protoc_insertion_point(class_scope:DW_Location.adressbook_chonghe_rate_info)
 private:
  inline void set_has_original_device_no();
  inline void clear_has_original_device_no();
  inline void set_has_other_device_no();
  inline void clear_has_other_device_no();
  inline void set_has_chonghe_rate();
  inline void clear_has_chonghe_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* original_device_no_;
  ::std::string* other_device_no_;
  float chonghe_rate_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static adressbook_chonghe_rate_info* default_instance_;
};
// -------------------------------------------------------------------

class adressbook_chonghe_rate_ask : public ::google::protobuf::Message {
 public:
  adressbook_chonghe_rate_ask();
  virtual ~adressbook_chonghe_rate_ask();

  adressbook_chonghe_rate_ask(const adressbook_chonghe_rate_ask& from);

  inline adressbook_chonghe_rate_ask& operator=(const adressbook_chonghe_rate_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adressbook_chonghe_rate_ask& default_instance();

  void Swap(adressbook_chonghe_rate_ask* other);

  // implements Message ----------------------------------------------

  adressbook_chonghe_rate_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adressbook_chonghe_rate_ask& from);
  void MergeFrom(const adressbook_chonghe_rate_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes original_mobile_phone = 2;
  inline bool has_original_mobile_phone() const;
  inline void clear_original_mobile_phone();
  static const int kOriginalMobilePhoneFieldNumber = 2;
  inline const ::std::string& original_mobile_phone() const;
  inline void set_original_mobile_phone(const ::std::string& value);
  inline void set_original_mobile_phone(const char* value);
  inline void set_original_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_original_mobile_phone();
  inline ::std::string* release_original_mobile_phone();
  inline void set_allocated_original_mobile_phone(::std::string* original_mobile_phone);

  // optional bytes other_mobile_phone = 3;
  inline bool has_other_mobile_phone() const;
  inline void clear_other_mobile_phone();
  static const int kOtherMobilePhoneFieldNumber = 3;
  inline const ::std::string& other_mobile_phone() const;
  inline void set_other_mobile_phone(const ::std::string& value);
  inline void set_other_mobile_phone(const char* value);
  inline void set_other_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_other_mobile_phone();
  inline ::std::string* release_other_mobile_phone();
  inline void set_allocated_other_mobile_phone(::std::string* other_mobile_phone);

  // @@protoc_insertion_point(class_scope:DW_Location.adressbook_chonghe_rate_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_original_mobile_phone();
  inline void clear_has_original_mobile_phone();
  inline void set_has_other_mobile_phone();
  inline void clear_has_other_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* original_mobile_phone_;
  ::std::string* other_mobile_phone_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static adressbook_chonghe_rate_ask* default_instance_;
};
// -------------------------------------------------------------------

class adressbook_chonghe_rate_ans : public ::google::protobuf::Message {
 public:
  adressbook_chonghe_rate_ans();
  virtual ~adressbook_chonghe_rate_ans();

  adressbook_chonghe_rate_ans(const adressbook_chonghe_rate_ans& from);

  inline adressbook_chonghe_rate_ans& operator=(const adressbook_chonghe_rate_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adressbook_chonghe_rate_ans& default_instance();

  void Swap(adressbook_chonghe_rate_ans* other);

  // implements Message ----------------------------------------------

  adressbook_chonghe_rate_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adressbook_chonghe_rate_ans& from);
  void MergeFrom(const adressbook_chonghe_rate_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::errorinfo& result() const;
  inline ::common::errorinfo* mutable_result();
  inline ::common::errorinfo* release_result();
  inline void set_allocated_result(::common::errorinfo* result);

  // repeated .DW_Location.adressbook_chonghe_rate_info adressbook_chonghe_rate = 2;
  inline int adressbook_chonghe_rate_size() const;
  inline void clear_adressbook_chonghe_rate();
  static const int kAdressbookChongheRateFieldNumber = 2;
  inline const ::DW_Location::adressbook_chonghe_rate_info& adressbook_chonghe_rate(int index) const;
  inline ::DW_Location::adressbook_chonghe_rate_info* mutable_adressbook_chonghe_rate(int index);
  inline ::DW_Location::adressbook_chonghe_rate_info* add_adressbook_chonghe_rate();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::adressbook_chonghe_rate_info >&
      adressbook_chonghe_rate() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::adressbook_chonghe_rate_info >*
      mutable_adressbook_chonghe_rate();

  // @@protoc_insertion_point(class_scope:DW_Location.adressbook_chonghe_rate_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::adressbook_chonghe_rate_info > adressbook_chonghe_rate_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static adressbook_chonghe_rate_ans* default_instance_;
};
// -------------------------------------------------------------------

class DW_userinfo_ask : public ::google::protobuf::Message {
 public:
  DW_userinfo_ask();
  virtual ~DW_userinfo_ask();

  DW_userinfo_ask(const DW_userinfo_ask& from);

  inline DW_userinfo_ask& operator=(const DW_userinfo_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DW_userinfo_ask& default_instance();

  void Swap(DW_userinfo_ask* other);

  // implements Message ----------------------------------------------

  DW_userinfo_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DW_userinfo_ask& from);
  void MergeFrom(const DW_userinfo_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .DW_Location.DW_ask_type ask_type = 2;
  inline bool has_ask_type() const;
  inline void clear_ask_type();
  static const int kAskTypeFieldNumber = 2;
  inline ::DW_Location::DW_ask_type ask_type() const;
  inline void set_ask_type(::DW_Location::DW_ask_type value);

  // optional bytes start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional bytes end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional .DW_Location.user_identification_list user_info_list = 5;
  inline bool has_user_info_list() const;
  inline void clear_user_info_list();
  static const int kUserInfoListFieldNumber = 5;
  inline const ::DW_Location::user_identification_list& user_info_list() const;
  inline ::DW_Location::user_identification_list* mutable_user_info_list();
  inline ::DW_Location::user_identification_list* release_user_info_list();
  inline void set_allocated_user_info_list(::DW_Location::user_identification_list* user_info_list);

  // optional .common.user_basic_identification user_info = 6;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 6;
  inline const ::common::user_basic_identification& user_info() const;
  inline ::common::user_basic_identification* mutable_user_info();
  inline ::common::user_basic_identification* release_user_info();
  inline void set_allocated_user_info(::common::user_basic_identification* user_info);

  // optional bytes user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:DW_Location.DW_userinfo_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_ask_type();
  inline void clear_has_ask_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_user_info_list();
  inline void clear_has_user_info_list();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  ::DW_Location::user_identification_list* user_info_list_;
  ::common::user_basic_identification* user_info_;
  ::std::string* user_id_;
  int ask_type_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static DW_userinfo_ask* default_instance_;
};
// -------------------------------------------------------------------

class DW_userinfo_ans : public ::google::protobuf::Message {
 public:
  DW_userinfo_ans();
  virtual ~DW_userinfo_ans();

  DW_userinfo_ans(const DW_userinfo_ans& from);

  inline DW_userinfo_ans& operator=(const DW_userinfo_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DW_userinfo_ans& default_instance();

  void Swap(DW_userinfo_ans* other);

  // implements Message ----------------------------------------------

  DW_userinfo_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DW_userinfo_ans& from);
  void MergeFrom(const DW_userinfo_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DW_Location.user_overdue_info user_overdue_infos = 1;
  inline int user_overdue_infos_size() const;
  inline void clear_user_overdue_infos();
  static const int kUserOverdueInfosFieldNumber = 1;
  inline const ::DW_Location::user_overdue_info& user_overdue_infos(int index) const;
  inline ::DW_Location::user_overdue_info* mutable_user_overdue_infos(int index);
  inline ::DW_Location::user_overdue_info* add_user_overdue_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::user_overdue_info >&
      user_overdue_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::user_overdue_info >*
      mutable_user_overdue_infos();

  // optional .common.errorinfo result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::errorinfo& result() const;
  inline ::common::errorinfo* mutable_result();
  inline ::common::errorinfo* release_result();
  inline void set_allocated_result(::common::errorinfo* result);

  // @@protoc_insertion_point(class_scope:DW_Location.DW_userinfo_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::user_overdue_info > user_overdue_infos_;
  ::common::errorinfo* result_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static DW_userinfo_ans* default_instance_;
};
// -------------------------------------------------------------------

class DW_location_track_ans : public ::google::protobuf::Message {
 public:
  DW_location_track_ans();
  virtual ~DW_location_track_ans();

  DW_location_track_ans(const DW_location_track_ans& from);

  inline DW_location_track_ans& operator=(const DW_location_track_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DW_location_track_ans& default_instance();

  void Swap(DW_location_track_ans* other);

  // implements Message ----------------------------------------------

  DW_location_track_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DW_location_track_ans& from);
  void MergeFrom(const DW_location_track_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.location_info loc_info = 1;
  inline int loc_info_size() const;
  inline void clear_loc_info();
  static const int kLocInfoFieldNumber = 1;
  inline const ::common::location_info& loc_info(int index) const;
  inline ::common::location_info* mutable_loc_info(int index);
  inline ::common::location_info* add_loc_info();
  inline const ::google::protobuf::RepeatedPtrField< ::common::location_info >&
      loc_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::location_info >*
      mutable_loc_info();

  // optional .common.errorinfo result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::errorinfo& result() const;
  inline ::common::errorinfo* mutable_result();
  inline ::common::errorinfo* release_result();
  inline void set_allocated_result(::common::errorinfo* result);

  // @@protoc_insertion_point(class_scope:DW_Location.DW_location_track_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::location_info > loc_info_;
  ::common::errorinfo* result_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static DW_location_track_ans* default_instance_;
};
// -------------------------------------------------------------------

class DW_location_info_ans : public ::google::protobuf::Message {
 public:
  DW_location_info_ans();
  virtual ~DW_location_info_ans();

  DW_location_info_ans(const DW_location_info_ans& from);

  inline DW_location_info_ans& operator=(const DW_location_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DW_location_info_ans& default_instance();

  void Swap(DW_location_info_ans* other);

  // implements Message ----------------------------------------------

  DW_location_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DW_location_info_ans& from);
  void MergeFrom(const DW_location_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.user_info user_basic_info = 1;
  inline bool has_user_basic_info() const;
  inline void clear_user_basic_info();
  static const int kUserBasicInfoFieldNumber = 1;
  inline const ::common::user_info& user_basic_info() const;
  inline ::common::user_info* mutable_user_basic_info();
  inline ::common::user_info* release_user_basic_info();
  inline void set_allocated_user_basic_info(::common::user_info* user_basic_info);

  // optional .common.errorinfo result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::errorinfo& result() const;
  inline ::common::errorinfo* mutable_result();
  inline ::common::errorinfo* release_result();
  inline void set_allocated_result(::common::errorinfo* result);

  // @@protoc_insertion_point(class_scope:DW_Location.DW_location_info_ans)
 private:
  inline void set_has_user_basic_info();
  inline void clear_has_user_basic_info();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::user_info* user_basic_info_;
  ::common::errorinfo* result_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static DW_location_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class DW_load_days_info_ans : public ::google::protobuf::Message {
 public:
  DW_load_days_info_ans();
  virtual ~DW_load_days_info_ans();

  DW_load_days_info_ans(const DW_load_days_info_ans& from);

  inline DW_load_days_info_ans& operator=(const DW_load_days_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DW_load_days_info_ans& default_instance();

  void Swap(DW_load_days_info_ans* other);

  // implements Message ----------------------------------------------

  DW_load_days_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DW_load_days_info_ans& from);
  void MergeFrom(const DW_load_days_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 loadDays = 1;
  inline bool has_loaddays() const;
  inline void clear_loaddays();
  static const int kLoadDaysFieldNumber = 1;
  inline ::google::protobuf::int32 loaddays() const;
  inline void set_loaddays(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:DW_Location.DW_load_days_info_ans)
 private:
  inline void set_has_loaddays();
  inline void clear_has_loaddays();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 loaddays_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static DW_load_days_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class static_report_result : public ::google::protobuf::Message {
 public:
  static_report_result();
  virtual ~static_report_result();

  static_report_result(const static_report_result& from);

  inline static_report_result& operator=(const static_report_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const static_report_result& default_instance();

  void Swap(static_report_result* other);

  // implements Message ----------------------------------------------

  static_report_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const static_report_result& from);
  void MergeFrom(const static_report_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DW_Location.static_report_type static_type = 1;
  inline bool has_static_type() const;
  inline void clear_static_type();
  static const int kStaticTypeFieldNumber = 1;
  inline ::DW_Location::static_report_type static_type() const;
  inline void set_static_type(::DW_Location::static_report_type value);

  // optional int32 static_number = 2;
  inline bool has_static_number() const;
  inline void clear_static_number();
  static const int kStaticNumberFieldNumber = 2;
  inline ::google::protobuf::int32 static_number() const;
  inline void set_static_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.static_report_result)
 private:
  inline void set_has_static_type();
  inline void clear_has_static_type();
  inline void set_has_static_number();
  inline void clear_has_static_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int static_type_;
  ::google::protobuf::int32 static_number_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static static_report_result* default_instance_;
};
// -------------------------------------------------------------------

class user_profiles_ask : public ::google::protobuf::Message {
 public:
  user_profiles_ask();
  virtual ~user_profiles_ask();

  user_profiles_ask(const user_profiles_ask& from);

  inline user_profiles_ask& operator=(const user_profiles_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_profiles_ask& default_instance();

  void Swap(user_profiles_ask* other);

  // implements Message ----------------------------------------------

  user_profiles_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_profiles_ask& from);
  void MergeFrom(const user_profiles_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:DW_Location.user_profiles_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static user_profiles_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_profiles_ans : public ::google::protobuf::Message {
 public:
  user_profiles_ans();
  virtual ~user_profiles_ans();

  user_profiles_ans(const user_profiles_ans& from);

  inline user_profiles_ans& operator=(const user_profiles_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_profiles_ans& default_instance();

  void Swap(user_profiles_ans* other);

  // implements Message ----------------------------------------------

  user_profiles_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_profiles_ans& from);
  void MergeFrom(const user_profiles_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DW_Location.static_report_result static_result = 1;
  inline int static_result_size() const;
  inline void clear_static_result();
  static const int kStaticResultFieldNumber = 1;
  inline const ::DW_Location::static_report_result& static_result(int index) const;
  inline ::DW_Location::static_report_result* mutable_static_result(int index);
  inline ::DW_Location::static_report_result* add_static_result();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::static_report_result >&
      static_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::static_report_result >*
      mutable_static_result();

  // optional .DW_Location.sex_proportion sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline const ::DW_Location::sex_proportion& sex() const;
  inline ::DW_Location::sex_proportion* mutable_sex();
  inline ::DW_Location::sex_proportion* release_sex();
  inline void set_allocated_sex(::DW_Location::sex_proportion* sex);

  // optional .DW_Location.degree_proportion degree = 3;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 3;
  inline const ::DW_Location::degree_proportion& degree() const;
  inline ::DW_Location::degree_proportion* mutable_degree();
  inline ::DW_Location::degree_proportion* release_degree();
  inline void set_allocated_degree(::DW_Location::degree_proportion* degree);

  // repeated .DW_Location.email_proportion emaillist = 4;
  inline int emaillist_size() const;
  inline void clear_emaillist();
  static const int kEmaillistFieldNumber = 4;
  inline const ::DW_Location::email_proportion& emaillist(int index) const;
  inline ::DW_Location::email_proportion* mutable_emaillist(int index);
  inline ::DW_Location::email_proportion* add_emaillist();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::email_proportion >&
      emaillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::email_proportion >*
      mutable_emaillist();

  // optional .common.errorinfo error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:DW_Location.user_profiles_ans)
 private:
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::static_report_result > static_result_;
  ::DW_Location::sex_proportion* sex_;
  ::DW_Location::degree_proportion* degree_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::email_proportion > emaillist_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static user_profiles_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_basic_info_ask : public ::google::protobuf::Message {
 public:
  user_basic_info_ask();
  virtual ~user_basic_info_ask();

  user_basic_info_ask(const user_basic_info_ask& from);

  inline user_basic_info_ask& operator=(const user_basic_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_basic_info_ask& default_instance();

  void Swap(user_basic_info_ask* other);

  // implements Message ----------------------------------------------

  user_basic_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_basic_info_ask& from);
  void MergeFrom(const user_basic_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json_request = 1;
  inline bool has_json_request() const;
  inline void clear_json_request();
  static const int kJsonRequestFieldNumber = 1;
  inline const ::std::string& json_request() const;
  inline void set_json_request(const ::std::string& value);
  inline void set_json_request(const char* value);
  inline void set_json_request(const void* value, size_t size);
  inline ::std::string* mutable_json_request();
  inline ::std::string* release_json_request();
  inline void set_allocated_json_request(::std::string* json_request);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:DW_Location.user_basic_info_ask)
 private:
  inline void set_has_json_request();
  inline void clear_has_json_request();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_request_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static user_basic_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_basic_info_ans : public ::google::protobuf::Message {
 public:
  user_basic_info_ans();
  virtual ~user_basic_info_ans();

  user_basic_info_ans(const user_basic_info_ans& from);

  inline user_basic_info_ans& operator=(const user_basic_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_basic_info_ans& default_instance();

  void Swap(user_basic_info_ans* other);

  // implements Message ----------------------------------------------

  user_basic_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_basic_info_ans& from);
  void MergeFrom(const user_basic_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json_response = 1;
  inline bool has_json_response() const;
  inline void clear_json_response();
  static const int kJsonResponseFieldNumber = 1;
  inline const ::std::string& json_response() const;
  inline void set_json_response(const ::std::string& value);
  inline void set_json_response(const char* value);
  inline void set_json_response(const void* value, size_t size);
  inline ::std::string* mutable_json_response();
  inline ::std::string* release_json_response();
  inline void set_allocated_json_response(::std::string* json_response);

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:DW_Location.user_basic_info_ans)
 private:
  inline void set_has_json_response();
  inline void clear_has_json_response();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* json_response_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static user_basic_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class wei_dan_bao_base_info : public ::google::protobuf::Message {
 public:
  wei_dan_bao_base_info();
  virtual ~wei_dan_bao_base_info();

  wei_dan_bao_base_info(const wei_dan_bao_base_info& from);

  inline wei_dan_bao_base_info& operator=(const wei_dan_bao_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wei_dan_bao_base_info& default_instance();

  void Swap(wei_dan_bao_base_info* other);

  // implements Message ----------------------------------------------

  wei_dan_bao_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wei_dan_bao_base_info& from);
  void MergeFrom(const wei_dan_bao_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string wei_dan_bao_id = 1;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 1;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const char* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // required string corporation_name = 2;
  inline bool has_corporation_name() const;
  inline void clear_corporation_name();
  static const int kCorporationNameFieldNumber = 2;
  inline const ::std::string& corporation_name() const;
  inline void set_corporation_name(const ::std::string& value);
  inline void set_corporation_name(const char* value);
  inline void set_corporation_name(const char* value, size_t size);
  inline ::std::string* mutable_corporation_name();
  inline ::std::string* release_corporation_name();
  inline void set_allocated_corporation_name(::std::string* corporation_name);

  // required string create_user_id = 3;
  inline bool has_create_user_id() const;
  inline void clear_create_user_id();
  static const int kCreateUserIdFieldNumber = 3;
  inline const ::std::string& create_user_id() const;
  inline void set_create_user_id(const ::std::string& value);
  inline void set_create_user_id(const char* value);
  inline void set_create_user_id(const char* value, size_t size);
  inline ::std::string* mutable_create_user_id();
  inline ::std::string* release_create_user_id();
  inline void set_allocated_create_user_id(::std::string* create_user_id);

  // required string audit_pass_time = 4;
  inline bool has_audit_pass_time() const;
  inline void clear_audit_pass_time();
  static const int kAuditPassTimeFieldNumber = 4;
  inline const ::std::string& audit_pass_time() const;
  inline void set_audit_pass_time(const ::std::string& value);
  inline void set_audit_pass_time(const char* value);
  inline void set_audit_pass_time(const char* value, size_t size);
  inline ::std::string* mutable_audit_pass_time();
  inline ::std::string* release_audit_pass_time();
  inline void set_allocated_audit_pass_time(::std::string* audit_pass_time);

  // required double guarantee_stacking_line = 5;
  inline bool has_guarantee_stacking_line() const;
  inline void clear_guarantee_stacking_line();
  static const int kGuaranteeStackingLineFieldNumber = 5;
  inline double guarantee_stacking_line() const;
  inline void set_guarantee_stacking_line(double value);

  // required double guarantee_used = 6;
  inline bool has_guarantee_used() const;
  inline void clear_guarantee_used();
  static const int kGuaranteeUsedFieldNumber = 6;
  inline double guarantee_used() const;
  inline void set_guarantee_used(double value);

  // @@protoc_insertion_point(class_scope:DW_Location.wei_dan_bao_base_info)
 private:
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_corporation_name();
  inline void clear_has_corporation_name();
  inline void set_has_create_user_id();
  inline void clear_has_create_user_id();
  inline void set_has_audit_pass_time();
  inline void clear_has_audit_pass_time();
  inline void set_has_guarantee_stacking_line();
  inline void clear_has_guarantee_stacking_line();
  inline void set_has_guarantee_used();
  inline void clear_has_guarantee_used();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* wei_dan_bao_id_;
  ::std::string* corporation_name_;
  ::std::string* create_user_id_;
  ::std::string* audit_pass_time_;
  double guarantee_stacking_line_;
  double guarantee_used_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static wei_dan_bao_base_info* default_instance_;
};
// -------------------------------------------------------------------

class wei_dan_bao_base_info_ask : public ::google::protobuf::Message {
 public:
  wei_dan_bao_base_info_ask();
  virtual ~wei_dan_bao_base_info_ask();

  wei_dan_bao_base_info_ask(const wei_dan_bao_base_info_ask& from);

  inline wei_dan_bao_base_info_ask& operator=(const wei_dan_bao_base_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wei_dan_bao_base_info_ask& default_instance();

  void Swap(wei_dan_bao_base_info_ask* other);

  // implements Message ----------------------------------------------

  wei_dan_bao_base_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wei_dan_bao_base_info_ask& from);
  void MergeFrom(const wei_dan_bao_base_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:DW_Location.wei_dan_bao_base_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static wei_dan_bao_base_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class wei_dan_bao_base_info_ans : public ::google::protobuf::Message {
 public:
  wei_dan_bao_base_info_ans();
  virtual ~wei_dan_bao_base_info_ans();

  wei_dan_bao_base_info_ans(const wei_dan_bao_base_info_ans& from);

  inline wei_dan_bao_base_info_ans& operator=(const wei_dan_bao_base_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wei_dan_bao_base_info_ans& default_instance();

  void Swap(wei_dan_bao_base_info_ans* other);

  // implements Message ----------------------------------------------

  wei_dan_bao_base_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wei_dan_bao_base_info_ans& from);
  void MergeFrom(const wei_dan_bao_base_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.wei_dan_bao_base_info all_info = 2;
  inline int all_info_size() const;
  inline void clear_all_info();
  static const int kAllInfoFieldNumber = 2;
  inline const ::DW_Location::wei_dan_bao_base_info& all_info(int index) const;
  inline ::DW_Location::wei_dan_bao_base_info* mutable_all_info(int index);
  inline ::DW_Location::wei_dan_bao_base_info* add_all_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_base_info >&
      all_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_base_info >*
      mutable_all_info();

  // @@protoc_insertion_point(class_scope:DW_Location.wei_dan_bao_base_info_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_base_info > all_info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static wei_dan_bao_base_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class wei_dan_bao_success_info : public ::google::protobuf::Message {
 public:
  wei_dan_bao_success_info();
  virtual ~wei_dan_bao_success_info();

  wei_dan_bao_success_info(const wei_dan_bao_success_info& from);

  inline wei_dan_bao_success_info& operator=(const wei_dan_bao_success_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wei_dan_bao_success_info& default_instance();

  void Swap(wei_dan_bao_success_info* other);

  // implements Message ----------------------------------------------

  wei_dan_bao_success_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wei_dan_bao_success_info& from);
  void MergeFrom(const wei_dan_bao_success_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 success_count = 1;
  inline bool has_success_count() const;
  inline void clear_success_count();
  static const int kSuccessCountFieldNumber = 1;
  inline ::google::protobuf::int32 success_count() const;
  inline void set_success_count(::google::protobuf::int32 value);

  // optional string wei_dan_bao_id = 2;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const char* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional string wei_dan_bao_city_name = 3;
  inline bool has_wei_dan_bao_city_name() const;
  inline void clear_wei_dan_bao_city_name();
  static const int kWeiDanBaoCityNameFieldNumber = 3;
  inline const ::std::string& wei_dan_bao_city_name() const;
  inline void set_wei_dan_bao_city_name(const ::std::string& value);
  inline void set_wei_dan_bao_city_name(const char* value);
  inline void set_wei_dan_bao_city_name(const char* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_city_name();
  inline ::std::string* release_wei_dan_bao_city_name();
  inline void set_allocated_wei_dan_bao_city_name(::std::string* wei_dan_bao_city_name);

  // @@protoc_insertion_point(class_scope:DW_Location.wei_dan_bao_success_info)
 private:
  inline void set_has_success_count();
  inline void clear_has_success_count();
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_wei_dan_bao_city_name();
  inline void clear_has_wei_dan_bao_city_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* wei_dan_bao_id_;
  ::std::string* wei_dan_bao_city_name_;
  ::google::protobuf::int32 success_count_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static wei_dan_bao_success_info* default_instance_;
};
// -------------------------------------------------------------------

class wei_dan_bao_all_success_info_ask : public ::google::protobuf::Message {
 public:
  wei_dan_bao_all_success_info_ask();
  virtual ~wei_dan_bao_all_success_info_ask();

  wei_dan_bao_all_success_info_ask(const wei_dan_bao_all_success_info_ask& from);

  inline wei_dan_bao_all_success_info_ask& operator=(const wei_dan_bao_all_success_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wei_dan_bao_all_success_info_ask& default_instance();

  void Swap(wei_dan_bao_all_success_info_ask* other);

  // implements Message ----------------------------------------------

  wei_dan_bao_all_success_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wei_dan_bao_all_success_info_ask& from);
  void MergeFrom(const wei_dan_bao_all_success_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .DW_Location.avg_suc_type request_type = 2;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  inline ::DW_Location::avg_suc_type request_type() const;
  inline void set_request_type(::DW_Location::avg_suc_type value);

  // repeated string all_wei_dan_bao_id = 3;
  inline int all_wei_dan_bao_id_size() const;
  inline void clear_all_wei_dan_bao_id();
  static const int kAllWeiDanBaoIdFieldNumber = 3;
  inline const ::std::string& all_wei_dan_bao_id(int index) const;
  inline ::std::string* mutable_all_wei_dan_bao_id(int index);
  inline void set_all_wei_dan_bao_id(int index, const ::std::string& value);
  inline void set_all_wei_dan_bao_id(int index, const char* value);
  inline void set_all_wei_dan_bao_id(int index, const char* value, size_t size);
  inline ::std::string* add_all_wei_dan_bao_id();
  inline void add_all_wei_dan_bao_id(const ::std::string& value);
  inline void add_all_wei_dan_bao_id(const char* value);
  inline void add_all_wei_dan_bao_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& all_wei_dan_bao_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_all_wei_dan_bao_id();

  // optional int32 days_before = 4;
  inline bool has_days_before() const;
  inline void clear_days_before();
  static const int kDaysBeforeFieldNumber = 4;
  inline ::google::protobuf::int32 days_before() const;
  inline void set_days_before(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.wei_dan_bao_all_success_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_request_type();
  inline void clear_has_request_type();
  inline void set_has_days_before();
  inline void clear_has_days_before();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> all_wei_dan_bao_id_;
  int request_type_;
  ::google::protobuf::int32 days_before_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static wei_dan_bao_all_success_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class wei_dan_bao_all_success_info_ans : public ::google::protobuf::Message {
 public:
  wei_dan_bao_all_success_info_ans();
  virtual ~wei_dan_bao_all_success_info_ans();

  wei_dan_bao_all_success_info_ans(const wei_dan_bao_all_success_info_ans& from);

  inline wei_dan_bao_all_success_info_ans& operator=(const wei_dan_bao_all_success_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wei_dan_bao_all_success_info_ans& default_instance();

  void Swap(wei_dan_bao_all_success_info_ans* other);

  // implements Message ----------------------------------------------

  wei_dan_bao_all_success_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wei_dan_bao_all_success_info_ans& from);
  void MergeFrom(const wei_dan_bao_all_success_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.wei_dan_bao_success_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::wei_dan_bao_success_info& info(int index) const;
  inline ::DW_Location::wei_dan_bao_success_info* mutable_info(int index);
  inline ::DW_Location::wei_dan_bao_success_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_success_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_success_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.wei_dan_bao_all_success_info_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_success_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static wei_dan_bao_all_success_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class guarantee_amount_use_score_info : public ::google::protobuf::Message {
 public:
  guarantee_amount_use_score_info();
  virtual ~guarantee_amount_use_score_info();

  guarantee_amount_use_score_info(const guarantee_amount_use_score_info& from);

  inline guarantee_amount_use_score_info& operator=(const guarantee_amount_use_score_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const guarantee_amount_use_score_info& default_instance();

  void Swap(guarantee_amount_use_score_info* other);

  // implements Message ----------------------------------------------

  guarantee_amount_use_score_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const guarantee_amount_use_score_info& from);
  void MergeFrom(const guarantee_amount_use_score_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes wei_dan_bao_id = 1;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 1;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional bytes cur_already_use_guarantee_amount = 2;
  inline bool has_cur_already_use_guarantee_amount() const;
  inline void clear_cur_already_use_guarantee_amount();
  static const int kCurAlreadyUseGuaranteeAmountFieldNumber = 2;
  inline const ::std::string& cur_already_use_guarantee_amount() const;
  inline void set_cur_already_use_guarantee_amount(const ::std::string& value);
  inline void set_cur_already_use_guarantee_amount(const char* value);
  inline void set_cur_already_use_guarantee_amount(const void* value, size_t size);
  inline ::std::string* mutable_cur_already_use_guarantee_amount();
  inline ::std::string* release_cur_already_use_guarantee_amount();
  inline void set_allocated_cur_already_use_guarantee_amount(::std::string* cur_already_use_guarantee_amount);

  // optional bytes cur_guarantee_amount = 3;
  inline bool has_cur_guarantee_amount() const;
  inline void clear_cur_guarantee_amount();
  static const int kCurGuaranteeAmountFieldNumber = 3;
  inline const ::std::string& cur_guarantee_amount() const;
  inline void set_cur_guarantee_amount(const ::std::string& value);
  inline void set_cur_guarantee_amount(const char* value);
  inline void set_cur_guarantee_amount(const void* value, size_t size);
  inline ::std::string* mutable_cur_guarantee_amount();
  inline ::std::string* release_cur_guarantee_amount();
  inline void set_allocated_cur_guarantee_amount(::std::string* cur_guarantee_amount);

  // @@protoc_insertion_point(class_scope:DW_Location.guarantee_amount_use_score_info)
 private:
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_cur_already_use_guarantee_amount();
  inline void clear_has_cur_already_use_guarantee_amount();
  inline void set_has_cur_guarantee_amount();
  inline void clear_has_cur_guarantee_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* wei_dan_bao_id_;
  ::std::string* cur_already_use_guarantee_amount_;
  ::std::string* cur_guarantee_amount_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static guarantee_amount_use_score_info* default_instance_;
};
// -------------------------------------------------------------------

class avg_diligence_guarantee_score_info : public ::google::protobuf::Message {
 public:
  avg_diligence_guarantee_score_info();
  virtual ~avg_diligence_guarantee_score_info();

  avg_diligence_guarantee_score_info(const avg_diligence_guarantee_score_info& from);

  inline avg_diligence_guarantee_score_info& operator=(const avg_diligence_guarantee_score_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const avg_diligence_guarantee_score_info& default_instance();

  void Swap(avg_diligence_guarantee_score_info* other);

  // implements Message ----------------------------------------------

  avg_diligence_guarantee_score_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const avg_diligence_guarantee_score_info& from);
  void MergeFrom(const avg_diligence_guarantee_score_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dan_bao_amount = 1;
  inline bool has_dan_bao_amount() const;
  inline void clear_dan_bao_amount();
  static const int kDanBaoAmountFieldNumber = 1;
  inline float dan_bao_amount() const;
  inline void set_dan_bao_amount(float value);

  // optional float bid_loan_amount = 2;
  inline bool has_bid_loan_amount() const;
  inline void clear_bid_loan_amount();
  static const int kBidLoanAmountFieldNumber = 2;
  inline float bid_loan_amount() const;
  inline void set_bid_loan_amount(float value);

  // @@protoc_insertion_point(class_scope:DW_Location.avg_diligence_guarantee_score_info)
 private:
  inline void set_has_dan_bao_amount();
  inline void clear_has_dan_bao_amount();
  inline void set_has_bid_loan_amount();
  inline void clear_has_bid_loan_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dan_bao_amount_;
  float bid_loan_amount_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static avg_diligence_guarantee_score_info* default_instance_;
};
// -------------------------------------------------------------------

class avg_diligence_guarantee_score_ask : public ::google::protobuf::Message {
 public:
  avg_diligence_guarantee_score_ask();
  virtual ~avg_diligence_guarantee_score_ask();

  avg_diligence_guarantee_score_ask(const avg_diligence_guarantee_score_ask& from);

  inline avg_diligence_guarantee_score_ask& operator=(const avg_diligence_guarantee_score_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const avg_diligence_guarantee_score_ask& default_instance();

  void Swap(avg_diligence_guarantee_score_ask* other);

  // implements Message ----------------------------------------------

  avg_diligence_guarantee_score_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const avg_diligence_guarantee_score_ask& from);
  void MergeFrom(const avg_diligence_guarantee_score_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes wei_dan_bao_id = 2;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional int32 days_before = 3;
  inline bool has_days_before() const;
  inline void clear_days_before();
  static const int kDaysBeforeFieldNumber = 3;
  inline ::google::protobuf::int32 days_before() const;
  inline void set_days_before(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.avg_diligence_guarantee_score_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_days_before();
  inline void clear_has_days_before();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* wei_dan_bao_id_;
  ::google::protobuf::int32 days_before_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static avg_diligence_guarantee_score_ask* default_instance_;
};
// -------------------------------------------------------------------

class avg_diligence_guarantee_score_ans : public ::google::protobuf::Message {
 public:
  avg_diligence_guarantee_score_ans();
  virtual ~avg_diligence_guarantee_score_ans();

  avg_diligence_guarantee_score_ans(const avg_diligence_guarantee_score_ans& from);

  inline avg_diligence_guarantee_score_ans& operator=(const avg_diligence_guarantee_score_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const avg_diligence_guarantee_score_ans& default_instance();

  void Swap(avg_diligence_guarantee_score_ans* other);

  // implements Message ----------------------------------------------

  avg_diligence_guarantee_score_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const avg_diligence_guarantee_score_ans& from);
  void MergeFrom(const avg_diligence_guarantee_score_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // optional bytes wei_dan_bao_id = 2;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // repeated .DW_Location.avg_diligence_guarantee_score_info info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::DW_Location::avg_diligence_guarantee_score_info& info(int index) const;
  inline ::DW_Location::avg_diligence_guarantee_score_info* mutable_info(int index);
  inline ::DW_Location::avg_diligence_guarantee_score_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::avg_diligence_guarantee_score_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::avg_diligence_guarantee_score_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.avg_diligence_guarantee_score_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::std::string* wei_dan_bao_id_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::avg_diligence_guarantee_score_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static avg_diligence_guarantee_score_ans* default_instance_;
};
// -------------------------------------------------------------------

class guarantee_amount_use_score_ask : public ::google::protobuf::Message {
 public:
  guarantee_amount_use_score_ask();
  virtual ~guarantee_amount_use_score_ask();

  guarantee_amount_use_score_ask(const guarantee_amount_use_score_ask& from);

  inline guarantee_amount_use_score_ask& operator=(const guarantee_amount_use_score_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const guarantee_amount_use_score_ask& default_instance();

  void Swap(guarantee_amount_use_score_ask* other);

  // implements Message ----------------------------------------------

  guarantee_amount_use_score_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const guarantee_amount_use_score_ask& from);
  void MergeFrom(const guarantee_amount_use_score_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated bytes wei_dan_bao_id = 2;
  inline int wei_dan_bao_id_size() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id(int index) const;
  inline ::std::string* mutable_wei_dan_bao_id(int index);
  inline void set_wei_dan_bao_id(int index, const ::std::string& value);
  inline void set_wei_dan_bao_id(int index, const char* value);
  inline void set_wei_dan_bao_id(int index, const void* value, size_t size);
  inline ::std::string* add_wei_dan_bao_id();
  inline void add_wei_dan_bao_id(const ::std::string& value);
  inline void add_wei_dan_bao_id(const char* value);
  inline void add_wei_dan_bao_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wei_dan_bao_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wei_dan_bao_id();

  // optional int32 days_before = 3;
  inline bool has_days_before() const;
  inline void clear_days_before();
  static const int kDaysBeforeFieldNumber = 3;
  inline ::google::protobuf::int32 days_before() const;
  inline void set_days_before(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.guarantee_amount_use_score_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_days_before();
  inline void clear_has_days_before();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wei_dan_bao_id_;
  ::google::protobuf::int32 days_before_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static guarantee_amount_use_score_ask* default_instance_;
};
// -------------------------------------------------------------------

class guarantee_amount_use_score_ans : public ::google::protobuf::Message {
 public:
  guarantee_amount_use_score_ans();
  virtual ~guarantee_amount_use_score_ans();

  guarantee_amount_use_score_ans(const guarantee_amount_use_score_ans& from);

  inline guarantee_amount_use_score_ans& operator=(const guarantee_amount_use_score_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const guarantee_amount_use_score_ans& default_instance();

  void Swap(guarantee_amount_use_score_ans* other);

  // implements Message ----------------------------------------------

  guarantee_amount_use_score_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const guarantee_amount_use_score_ans& from);
  void MergeFrom(const guarantee_amount_use_score_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.guarantee_amount_use_score_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::guarantee_amount_use_score_info& info(int index) const;
  inline ::DW_Location::guarantee_amount_use_score_info* mutable_info(int index);
  inline ::DW_Location::guarantee_amount_use_score_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::guarantee_amount_use_score_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::guarantee_amount_use_score_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.guarantee_amount_use_score_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::guarantee_amount_use_score_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static guarantee_amount_use_score_ans* default_instance_;
};
// -------------------------------------------------------------------

class rate_score_info : public ::google::protobuf::Message {
 public:
  rate_score_info();
  virtual ~rate_score_info();

  rate_score_info(const rate_score_info& from);

  inline rate_score_info& operator=(const rate_score_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rate_score_info& default_instance();

  void Swap(rate_score_info* other);

  // implements Message ----------------------------------------------

  rate_score_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rate_score_info& from);
  void MergeFrom(const rate_score_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 kind_counts = 1;
  inline bool has_kind_counts() const;
  inline void clear_kind_counts();
  static const int kKindCountsFieldNumber = 1;
  inline ::google::protobuf::int32 kind_counts() const;
  inline void set_kind_counts(::google::protobuf::int32 value);

  // optional int32 already_expires_count = 2;
  inline bool has_already_expires_count() const;
  inline void clear_already_expires_count();
  static const int kAlreadyExpiresCountFieldNumber = 2;
  inline ::google::protobuf::int32 already_expires_count() const;
  inline void set_already_expires_count(::google::protobuf::int32 value);

  // optional float kind_amount = 3;
  inline bool has_kind_amount() const;
  inline void clear_kind_amount();
  static const int kKindAmountFieldNumber = 3;
  inline float kind_amount() const;
  inline void set_kind_amount(float value);

  // optional float already_expires_amount = 4;
  inline bool has_already_expires_amount() const;
  inline void clear_already_expires_amount();
  static const int kAlreadyExpiresAmountFieldNumber = 4;
  inline float already_expires_amount() const;
  inline void set_already_expires_amount(float value);

  // optional bytes wei_dan_bao_id = 5;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 5;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional int32 max_expires_day = 6;
  inline bool has_max_expires_day() const;
  inline void clear_max_expires_day();
  static const int kMaxExpiresDayFieldNumber = 6;
  inline ::google::protobuf::int32 max_expires_day() const;
  inline void set_max_expires_day(::google::protobuf::int32 value);

  // optional .DW_Location.rate_score_type ans_type = 7;
  inline bool has_ans_type() const;
  inline void clear_ans_type();
  static const int kAnsTypeFieldNumber = 7;
  inline ::DW_Location::rate_score_type ans_type() const;
  inline void set_ans_type(::DW_Location::rate_score_type value);

  // @@protoc_insertion_point(class_scope:DW_Location.rate_score_info)
 private:
  inline void set_has_kind_counts();
  inline void clear_has_kind_counts();
  inline void set_has_already_expires_count();
  inline void clear_has_already_expires_count();
  inline void set_has_kind_amount();
  inline void clear_has_kind_amount();
  inline void set_has_already_expires_amount();
  inline void clear_has_already_expires_amount();
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_max_expires_day();
  inline void clear_has_max_expires_day();
  inline void set_has_ans_type();
  inline void clear_has_ans_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 kind_counts_;
  ::google::protobuf::int32 already_expires_count_;
  float kind_amount_;
  float already_expires_amount_;
  ::std::string* wei_dan_bao_id_;
  ::google::protobuf::int32 max_expires_day_;
  int ans_type_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static rate_score_info* default_instance_;
};
// -------------------------------------------------------------------

class rate_score_ask : public ::google::protobuf::Message {
 public:
  rate_score_ask();
  virtual ~rate_score_ask();

  rate_score_ask(const rate_score_ask& from);

  inline rate_score_ask& operator=(const rate_score_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rate_score_ask& default_instance();

  void Swap(rate_score_ask* other);

  // implements Message ----------------------------------------------

  rate_score_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rate_score_ask& from);
  void MergeFrom(const rate_score_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .DW_Location.rate_score_type request_type = 2;
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  inline ::DW_Location::rate_score_type request_type() const;
  inline void set_request_type(::DW_Location::rate_score_type value);

  // repeated bytes wei_dan_bao_id = 3;
  inline int wei_dan_bao_id_size() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 3;
  inline const ::std::string& wei_dan_bao_id(int index) const;
  inline ::std::string* mutable_wei_dan_bao_id(int index);
  inline void set_wei_dan_bao_id(int index, const ::std::string& value);
  inline void set_wei_dan_bao_id(int index, const char* value);
  inline void set_wei_dan_bao_id(int index, const void* value, size_t size);
  inline ::std::string* add_wei_dan_bao_id();
  inline void add_wei_dan_bao_id(const ::std::string& value);
  inline void add_wei_dan_bao_id(const char* value);
  inline void add_wei_dan_bao_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wei_dan_bao_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wei_dan_bao_id();

  // optional int32 days_before = 4;
  inline bool has_days_before() const;
  inline void clear_days_before();
  static const int kDaysBeforeFieldNumber = 4;
  inline ::google::protobuf::int32 days_before() const;
  inline void set_days_before(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.rate_score_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_request_type();
  inline void clear_has_request_type();
  inline void set_has_days_before();
  inline void clear_has_days_before();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wei_dan_bao_id_;
  int request_type_;
  ::google::protobuf::int32 days_before_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static rate_score_ask* default_instance_;
};
// -------------------------------------------------------------------

class rate_score_ans : public ::google::protobuf::Message {
 public:
  rate_score_ans();
  virtual ~rate_score_ans();

  rate_score_ans(const rate_score_ans& from);

  inline rate_score_ans& operator=(const rate_score_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rate_score_ans& default_instance();

  void Swap(rate_score_ans* other);

  // implements Message ----------------------------------------------

  rate_score_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rate_score_ans& from);
  void MergeFrom(const rate_score_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.rate_score_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::rate_score_info& info(int index) const;
  inline ::DW_Location::rate_score_info* mutable_info(int index);
  inline ::DW_Location::rate_score_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::rate_score_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::rate_score_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.rate_score_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::rate_score_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static rate_score_ans* default_instance_;
};
// -------------------------------------------------------------------

class covers_time_score_info : public ::google::protobuf::Message {
 public:
  covers_time_score_info();
  virtual ~covers_time_score_info();

  covers_time_score_info(const covers_time_score_info& from);

  inline covers_time_score_info& operator=(const covers_time_score_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const covers_time_score_info& default_instance();

  void Swap(covers_time_score_info* other);

  // implements Message ----------------------------------------------

  covers_time_score_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const covers_time_score_info& from);
  void MergeFrom(const covers_time_score_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 which_day = 1;
  inline bool has_which_day() const;
  inline void clear_which_day();
  static const int kWhichDayFieldNumber = 1;
  inline ::google::protobuf::int32 which_day() const;
  inline void set_which_day(::google::protobuf::int32 value);

  // optional int32 covers_period = 2;
  inline bool has_covers_period() const;
  inline void clear_covers_period();
  static const int kCoversPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 covers_period() const;
  inline void set_covers_period(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.covers_time_score_info)
 private:
  inline void set_has_which_day();
  inline void clear_has_which_day();
  inline void set_has_covers_period();
  inline void clear_has_covers_period();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 which_day_;
  ::google::protobuf::int32 covers_period_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static covers_time_score_info* default_instance_;
};
// -------------------------------------------------------------------

class covers_time_score_ask : public ::google::protobuf::Message {
 public:
  covers_time_score_ask();
  virtual ~covers_time_score_ask();

  covers_time_score_ask(const covers_time_score_ask& from);

  inline covers_time_score_ask& operator=(const covers_time_score_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const covers_time_score_ask& default_instance();

  void Swap(covers_time_score_ask* other);

  // implements Message ----------------------------------------------

  covers_time_score_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const covers_time_score_ask& from);
  void MergeFrom(const covers_time_score_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes wei_dan_bao_id = 2;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // @@protoc_insertion_point(class_scope:DW_Location.covers_time_score_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* wei_dan_bao_id_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static covers_time_score_ask* default_instance_;
};
// -------------------------------------------------------------------

class covers_time_score_ans : public ::google::protobuf::Message {
 public:
  covers_time_score_ans();
  virtual ~covers_time_score_ans();

  covers_time_score_ans(const covers_time_score_ans& from);

  inline covers_time_score_ans& operator=(const covers_time_score_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const covers_time_score_ans& default_instance();

  void Swap(covers_time_score_ans* other);

  // implements Message ----------------------------------------------

  covers_time_score_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const covers_time_score_ans& from);
  void MergeFrom(const covers_time_score_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.covers_time_score_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::covers_time_score_info& info(int index) const;
  inline ::DW_Location::covers_time_score_info* mutable_info(int index);
  inline ::DW_Location::covers_time_score_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::covers_time_score_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::covers_time_score_info >*
      mutable_info();

  // optional .DW_Location.covers_time_score_type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::DW_Location::covers_time_score_type type() const;
  inline void set_type(::DW_Location::covers_time_score_type value);

  // optional bytes wei_dan_bao_id = 4;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 4;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // @@protoc_insertion_point(class_scope:DW_Location.covers_time_score_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::covers_time_score_info > info_;
  ::std::string* wei_dan_bao_id_;
  int type_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static covers_time_score_ans* default_instance_;
};
// -------------------------------------------------------------------

class follow_guarantee_invest_rank_info : public ::google::protobuf::Message {
 public:
  follow_guarantee_invest_rank_info();
  virtual ~follow_guarantee_invest_rank_info();

  follow_guarantee_invest_rank_info(const follow_guarantee_invest_rank_info& from);

  inline follow_guarantee_invest_rank_info& operator=(const follow_guarantee_invest_rank_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const follow_guarantee_invest_rank_info& default_instance();

  void Swap(follow_guarantee_invest_rank_info* other);

  // implements Message ----------------------------------------------

  follow_guarantee_invest_rank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const follow_guarantee_invest_rank_info& from);
  void MergeFrom(const follow_guarantee_invest_rank_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes wei_dan_bao_id = 1;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 1;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional int32 follow_dan_bao_count = 2;
  inline bool has_follow_dan_bao_count() const;
  inline void clear_follow_dan_bao_count();
  static const int kFollowDanBaoCountFieldNumber = 2;
  inline ::google::protobuf::int32 follow_dan_bao_count() const;
  inline void set_follow_dan_bao_count(::google::protobuf::int32 value);

  // optional int32 follow_tou_zi_count = 3;
  inline bool has_follow_tou_zi_count() const;
  inline void clear_follow_tou_zi_count();
  static const int kFollowTouZiCountFieldNumber = 3;
  inline ::google::protobuf::int32 follow_tou_zi_count() const;
  inline void set_follow_tou_zi_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.follow_guarantee_invest_rank_info)
 private:
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_follow_dan_bao_count();
  inline void clear_has_follow_dan_bao_count();
  inline void set_has_follow_tou_zi_count();
  inline void clear_has_follow_tou_zi_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* wei_dan_bao_id_;
  ::google::protobuf::int32 follow_dan_bao_count_;
  ::google::protobuf::int32 follow_tou_zi_count_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static follow_guarantee_invest_rank_info* default_instance_;
};
// -------------------------------------------------------------------

class follow_guarantee_invest_rank_ask : public ::google::protobuf::Message {
 public:
  follow_guarantee_invest_rank_ask();
  virtual ~follow_guarantee_invest_rank_ask();

  follow_guarantee_invest_rank_ask(const follow_guarantee_invest_rank_ask& from);

  inline follow_guarantee_invest_rank_ask& operator=(const follow_guarantee_invest_rank_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const follow_guarantee_invest_rank_ask& default_instance();

  void Swap(follow_guarantee_invest_rank_ask* other);

  // implements Message ----------------------------------------------

  follow_guarantee_invest_rank_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const follow_guarantee_invest_rank_ask& from);
  void MergeFrom(const follow_guarantee_invest_rank_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated bytes wei_dan_bao_id = 2;
  inline int wei_dan_bao_id_size() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id(int index) const;
  inline ::std::string* mutable_wei_dan_bao_id(int index);
  inline void set_wei_dan_bao_id(int index, const ::std::string& value);
  inline void set_wei_dan_bao_id(int index, const char* value);
  inline void set_wei_dan_bao_id(int index, const void* value, size_t size);
  inline ::std::string* add_wei_dan_bao_id();
  inline void add_wei_dan_bao_id(const ::std::string& value);
  inline void add_wei_dan_bao_id(const char* value);
  inline void add_wei_dan_bao_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wei_dan_bao_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wei_dan_bao_id();

  // @@protoc_insertion_point(class_scope:DW_Location.follow_guarantee_invest_rank_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wei_dan_bao_id_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static follow_guarantee_invest_rank_ask* default_instance_;
};
// -------------------------------------------------------------------

class follow_guarantee_invest_rank_ans : public ::google::protobuf::Message {
 public:
  follow_guarantee_invest_rank_ans();
  virtual ~follow_guarantee_invest_rank_ans();

  follow_guarantee_invest_rank_ans(const follow_guarantee_invest_rank_ans& from);

  inline follow_guarantee_invest_rank_ans& operator=(const follow_guarantee_invest_rank_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const follow_guarantee_invest_rank_ans& default_instance();

  void Swap(follow_guarantee_invest_rank_ans* other);

  // implements Message ----------------------------------------------

  follow_guarantee_invest_rank_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const follow_guarantee_invest_rank_ans& from);
  void MergeFrom(const follow_guarantee_invest_rank_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.follow_guarantee_invest_rank_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::follow_guarantee_invest_rank_info& info(int index) const;
  inline ::DW_Location::follow_guarantee_invest_rank_info* mutable_info(int index);
  inline ::DW_Location::follow_guarantee_invest_rank_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::follow_guarantee_invest_rank_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::follow_guarantee_invest_rank_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.follow_guarantee_invest_rank_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::follow_guarantee_invest_rank_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static follow_guarantee_invest_rank_ans* default_instance_;
};
// -------------------------------------------------------------------

class borrower_evaluate_score_info : public ::google::protobuf::Message {
 public:
  borrower_evaluate_score_info();
  virtual ~borrower_evaluate_score_info();

  borrower_evaluate_score_info(const borrower_evaluate_score_info& from);

  inline borrower_evaluate_score_info& operator=(const borrower_evaluate_score_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const borrower_evaluate_score_info& default_instance();

  void Swap(borrower_evaluate_score_info* other);

  // implements Message ----------------------------------------------

  borrower_evaluate_score_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const borrower_evaluate_score_info& from);
  void MergeFrom(const borrower_evaluate_score_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes wei_dan_bao_id = 1;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 1;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional float borrower_score = 2;
  inline bool has_borrower_score() const;
  inline void clear_borrower_score();
  static const int kBorrowerScoreFieldNumber = 2;
  inline float borrower_score() const;
  inline void set_borrower_score(float value);

  // optional int32 evaluate_total_num = 3;
  inline bool has_evaluate_total_num() const;
  inline void clear_evaluate_total_num();
  static const int kEvaluateTotalNumFieldNumber = 3;
  inline ::google::protobuf::int32 evaluate_total_num() const;
  inline void set_evaluate_total_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.borrower_evaluate_score_info)
 private:
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_borrower_score();
  inline void clear_has_borrower_score();
  inline void set_has_evaluate_total_num();
  inline void clear_has_evaluate_total_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* wei_dan_bao_id_;
  float borrower_score_;
  ::google::protobuf::int32 evaluate_total_num_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static borrower_evaluate_score_info* default_instance_;
};
// -------------------------------------------------------------------

class borrower_evaluate_score_ask : public ::google::protobuf::Message {
 public:
  borrower_evaluate_score_ask();
  virtual ~borrower_evaluate_score_ask();

  borrower_evaluate_score_ask(const borrower_evaluate_score_ask& from);

  inline borrower_evaluate_score_ask& operator=(const borrower_evaluate_score_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const borrower_evaluate_score_ask& default_instance();

  void Swap(borrower_evaluate_score_ask* other);

  // implements Message ----------------------------------------------

  borrower_evaluate_score_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const borrower_evaluate_score_ask& from);
  void MergeFrom(const borrower_evaluate_score_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated bytes wei_dan_bao_id = 2;
  inline int wei_dan_bao_id_size() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id(int index) const;
  inline ::std::string* mutable_wei_dan_bao_id(int index);
  inline void set_wei_dan_bao_id(int index, const ::std::string& value);
  inline void set_wei_dan_bao_id(int index, const char* value);
  inline void set_wei_dan_bao_id(int index, const void* value, size_t size);
  inline ::std::string* add_wei_dan_bao_id();
  inline void add_wei_dan_bao_id(const ::std::string& value);
  inline void add_wei_dan_bao_id(const char* value);
  inline void add_wei_dan_bao_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wei_dan_bao_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wei_dan_bao_id();

  // @@protoc_insertion_point(class_scope:DW_Location.borrower_evaluate_score_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wei_dan_bao_id_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static borrower_evaluate_score_ask* default_instance_;
};
// -------------------------------------------------------------------

class borrower_evaluate_score_ans : public ::google::protobuf::Message {
 public:
  borrower_evaluate_score_ans();
  virtual ~borrower_evaluate_score_ans();

  borrower_evaluate_score_ans(const borrower_evaluate_score_ans& from);

  inline borrower_evaluate_score_ans& operator=(const borrower_evaluate_score_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const borrower_evaluate_score_ans& default_instance();

  void Swap(borrower_evaluate_score_ans* other);

  // implements Message ----------------------------------------------

  borrower_evaluate_score_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const borrower_evaluate_score_ans& from);
  void MergeFrom(const borrower_evaluate_score_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.borrower_evaluate_score_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::borrower_evaluate_score_info& info(int index) const;
  inline ::DW_Location::borrower_evaluate_score_info* mutable_info(int index);
  inline ::DW_Location::borrower_evaluate_score_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::borrower_evaluate_score_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::borrower_evaluate_score_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.borrower_evaluate_score_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::borrower_evaluate_score_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static borrower_evaluate_score_ans* default_instance_;
};
// -------------------------------------------------------------------

class diligence_pass_score_info : public ::google::protobuf::Message {
 public:
  diligence_pass_score_info();
  virtual ~diligence_pass_score_info();

  diligence_pass_score_info(const diligence_pass_score_info& from);

  inline diligence_pass_score_info& operator=(const diligence_pass_score_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const diligence_pass_score_info& default_instance();

  void Swap(diligence_pass_score_info* other);

  // implements Message ----------------------------------------------

  diligence_pass_score_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const diligence_pass_score_info& from);
  void MergeFrom(const diligence_pass_score_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes wei_dan_bao_id = 1;
  inline bool has_wei_dan_bao_id() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 1;
  inline const ::std::string& wei_dan_bao_id() const;
  inline void set_wei_dan_bao_id(const ::std::string& value);
  inline void set_wei_dan_bao_id(const char* value);
  inline void set_wei_dan_bao_id(const void* value, size_t size);
  inline ::std::string* mutable_wei_dan_bao_id();
  inline ::std::string* release_wei_dan_bao_id();
  inline void set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id);

  // optional int32 passed_diligence_numbers = 2;
  inline bool has_passed_diligence_numbers() const;
  inline void clear_passed_diligence_numbers();
  static const int kPassedDiligenceNumbersFieldNumber = 2;
  inline ::google::protobuf::int32 passed_diligence_numbers() const;
  inline void set_passed_diligence_numbers(::google::protobuf::int32 value);

  // optional int32 commit_diligence_total_num = 3;
  inline bool has_commit_diligence_total_num() const;
  inline void clear_commit_diligence_total_num();
  static const int kCommitDiligenceTotalNumFieldNumber = 3;
  inline ::google::protobuf::int32 commit_diligence_total_num() const;
  inline void set_commit_diligence_total_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DW_Location.diligence_pass_score_info)
 private:
  inline void set_has_wei_dan_bao_id();
  inline void clear_has_wei_dan_bao_id();
  inline void set_has_passed_diligence_numbers();
  inline void clear_has_passed_diligence_numbers();
  inline void set_has_commit_diligence_total_num();
  inline void clear_has_commit_diligence_total_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* wei_dan_bao_id_;
  ::google::protobuf::int32 passed_diligence_numbers_;
  ::google::protobuf::int32 commit_diligence_total_num_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static diligence_pass_score_info* default_instance_;
};
// -------------------------------------------------------------------

class diligence_pass_score_ask : public ::google::protobuf::Message {
 public:
  diligence_pass_score_ask();
  virtual ~diligence_pass_score_ask();

  diligence_pass_score_ask(const diligence_pass_score_ask& from);

  inline diligence_pass_score_ask& operator=(const diligence_pass_score_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const diligence_pass_score_ask& default_instance();

  void Swap(diligence_pass_score_ask* other);

  // implements Message ----------------------------------------------

  diligence_pass_score_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const diligence_pass_score_ask& from);
  void MergeFrom(const diligence_pass_score_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated bytes wei_dan_bao_id = 2;
  inline int wei_dan_bao_id_size() const;
  inline void clear_wei_dan_bao_id();
  static const int kWeiDanBaoIdFieldNumber = 2;
  inline const ::std::string& wei_dan_bao_id(int index) const;
  inline ::std::string* mutable_wei_dan_bao_id(int index);
  inline void set_wei_dan_bao_id(int index, const ::std::string& value);
  inline void set_wei_dan_bao_id(int index, const char* value);
  inline void set_wei_dan_bao_id(int index, const void* value, size_t size);
  inline ::std::string* add_wei_dan_bao_id();
  inline void add_wei_dan_bao_id(const ::std::string& value);
  inline void add_wei_dan_bao_id(const char* value);
  inline void add_wei_dan_bao_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& wei_dan_bao_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wei_dan_bao_id();

  // @@protoc_insertion_point(class_scope:DW_Location.diligence_pass_score_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wei_dan_bao_id_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static diligence_pass_score_ask* default_instance_;
};
// -------------------------------------------------------------------

class diligence_pass_score_ans : public ::google::protobuf::Message {
 public:
  diligence_pass_score_ans();
  virtual ~diligence_pass_score_ans();

  diligence_pass_score_ans(const diligence_pass_score_ans& from);

  inline diligence_pass_score_ans& operator=(const diligence_pass_score_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const diligence_pass_score_ans& default_instance();

  void Swap(diligence_pass_score_ans* other);

  // implements Message ----------------------------------------------

  diligence_pass_score_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const diligence_pass_score_ans& from);
  void MergeFrom(const diligence_pass_score_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // repeated .DW_Location.diligence_pass_score_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DW_Location::diligence_pass_score_info& info(int index) const;
  inline ::DW_Location::diligence_pass_score_info* mutable_info(int index);
  inline ::DW_Location::diligence_pass_score_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::diligence_pass_score_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::diligence_pass_score_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:DW_Location.diligence_pass_score_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::diligence_pass_score_info > info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static diligence_pass_score_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_contacts_coincide_ask : public ::google::protobuf::Message {
 public:
  blacklist_contacts_coincide_ask();
  virtual ~blacklist_contacts_coincide_ask();

  blacklist_contacts_coincide_ask(const blacklist_contacts_coincide_ask& from);

  inline blacklist_contacts_coincide_ask& operator=(const blacklist_contacts_coincide_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_contacts_coincide_ask& default_instance();

  void Swap(blacklist_contacts_coincide_ask* other);

  // implements Message ----------------------------------------------

  blacklist_contacts_coincide_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_contacts_coincide_ask& from);
  void MergeFrom(const blacklist_contacts_coincide_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 blacklist_type = 2;
  inline bool has_blacklist_type() const;
  inline void clear_blacklist_type();
  static const int kBlacklistTypeFieldNumber = 2;
  inline ::google::protobuf::int32 blacklist_type() const;
  inline void set_blacklist_type(::google::protobuf::int32 value);

  // optional float coincide_value = 3;
  inline bool has_coincide_value() const;
  inline void clear_coincide_value();
  static const int kCoincideValueFieldNumber = 3;
  inline float coincide_value() const;
  inline void set_coincide_value(float value);

  // optional .common.user_basic_identification user_info = 4;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  inline const ::common::user_basic_identification& user_info() const;
  inline ::common::user_basic_identification* mutable_user_info();
  inline ::common::user_basic_identification* release_user_info();
  inline void set_allocated_user_info(::common::user_basic_identification* user_info);

  // @@protoc_insertion_point(class_scope:DW_Location.blacklist_contacts_coincide_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_blacklist_type();
  inline void clear_has_blacklist_type();
  inline void set_has_coincide_value();
  inline void clear_has_coincide_value();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 blacklist_type_;
  float coincide_value_;
  ::common::user_basic_identification* user_info_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static blacklist_contacts_coincide_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_contacts_coincide_ans : public ::google::protobuf::Message {
 public:
  blacklist_contacts_coincide_ans();
  virtual ~blacklist_contacts_coincide_ans();

  blacklist_contacts_coincide_ans(const blacklist_contacts_coincide_ans& from);

  inline blacklist_contacts_coincide_ans& operator=(const blacklist_contacts_coincide_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_contacts_coincide_ans& default_instance();

  void Swap(blacklist_contacts_coincide_ans* other);

  // implements Message ----------------------------------------------

  blacklist_contacts_coincide_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_contacts_coincide_ans& from);
  void MergeFrom(const blacklist_contacts_coincide_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_black_friend = 1;
  inline bool has_is_black_friend() const;
  inline void clear_is_black_friend();
  static const int kIsBlackFriendFieldNumber = 1;
  inline bool is_black_friend() const;
  inline void set_is_black_friend(bool value);

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:DW_Location.blacklist_contacts_coincide_ans)
 private:
  inline void set_has_is_black_friend();
  inline void clear_has_is_black_friend();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  bool is_black_friend_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static blacklist_contacts_coincide_ans* default_instance_;
};
// -------------------------------------------------------------------

class batch_userinfo_ask : public ::google::protobuf::Message {
 public:
  batch_userinfo_ask();
  virtual ~batch_userinfo_ask();

  batch_userinfo_ask(const batch_userinfo_ask& from);

  inline batch_userinfo_ask& operator=(const batch_userinfo_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const batch_userinfo_ask& default_instance();

  void Swap(batch_userinfo_ask* other);

  // implements Message ----------------------------------------------

  batch_userinfo_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const batch_userinfo_ask& from);
  void MergeFrom(const batch_userinfo_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated bytes user_id = 2;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& user_id(int index) const;
  inline ::std::string* mutable_user_id(int index);
  inline void set_user_id(int index, const ::std::string& value);
  inline void set_user_id(int index, const char* value);
  inline void set_user_id(int index, const void* value, size_t size);
  inline ::std::string* add_user_id();
  inline void add_user_id(const ::std::string& value);
  inline void add_user_id(const char* value);
  inline void add_user_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_id();

  // @@protoc_insertion_point(class_scope:DW_Location.batch_userinfo_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_id_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static batch_userinfo_ask* default_instance_;
};
// -------------------------------------------------------------------

class chatlog_userinfo : public ::google::protobuf::Message {
 public:
  chatlog_userinfo();
  virtual ~chatlog_userinfo();

  chatlog_userinfo(const chatlog_userinfo& from);

  inline chatlog_userinfo& operator=(const chatlog_userinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chatlog_userinfo& default_instance();

  void Swap(chatlog_userinfo* other);

  // implements Message ----------------------------------------------

  chatlog_userinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chatlog_userinfo& from);
  void MergeFrom(const chatlog_userinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes real_name = 1;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 1;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes identity_card = 3;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 3;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional bytes avatar = 5;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional bytes user_id = 6;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:DW_Location.chatlog_userinfo)
 private:
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* identity_card_;
  ::std::string* nickname_;
  ::std::string* avatar_;
  ::std::string* user_id_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static chatlog_userinfo* default_instance_;
};
// -------------------------------------------------------------------

class batch_userinfo_ans : public ::google::protobuf::Message {
 public:
  batch_userinfo_ans();
  virtual ~batch_userinfo_ans();

  batch_userinfo_ans(const batch_userinfo_ans& from);

  inline batch_userinfo_ans& operator=(const batch_userinfo_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const batch_userinfo_ans& default_instance();

  void Swap(batch_userinfo_ans* other);

  // implements Message ----------------------------------------------

  batch_userinfo_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const batch_userinfo_ans& from);
  void MergeFrom(const batch_userinfo_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DW_Location.chatlog_userinfo info_list = 1;
  inline int info_list_size() const;
  inline void clear_info_list();
  static const int kInfoListFieldNumber = 1;
  inline const ::DW_Location::chatlog_userinfo& info_list(int index) const;
  inline ::DW_Location::chatlog_userinfo* mutable_info_list(int index);
  inline ::DW_Location::chatlog_userinfo* add_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::chatlog_userinfo >&
      info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::DW_Location::chatlog_userinfo >*
      mutable_info_list();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:DW_Location.batch_userinfo_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DW_Location::chatlog_userinfo > info_list_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_DW_5fLocation_2eproto();
  friend void protobuf_AssignDesc_DW_5fLocation_2eproto();
  friend void protobuf_ShutdownFile_DW_5fLocation_2eproto();

  void InitAsDefaultInstance();
  static batch_userinfo_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// user_identification_list

// repeated .common.user_basic_identification user_info_list = 1;
inline int user_identification_list::user_info_list_size() const {
  return user_info_list_.size();
}
inline void user_identification_list::clear_user_info_list() {
  user_info_list_.Clear();
}
inline const ::common::user_basic_identification& user_identification_list::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.user_identification_list.user_info_list)
  return user_info_list_.Get(index);
}
inline ::common::user_basic_identification* user_identification_list::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.user_identification_list.user_info_list)
  return user_info_list_.Mutable(index);
}
inline ::common::user_basic_identification* user_identification_list::add_user_info_list() {
  // @@protoc_insertion_point(field_add:DW_Location.user_identification_list.user_info_list)
  return user_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::user_basic_identification >&
user_identification_list::user_info_list() const {
  // @@protoc_insertion_point(field_list:DW_Location.user_identification_list.user_info_list)
  return user_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::user_basic_identification >*
user_identification_list::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.user_identification_list.user_info_list)
  return &user_info_list_;
}

// -------------------------------------------------------------------

// user_overdue_info

// optional .common.user_basic_identification user_info = 1;
inline bool user_overdue_info::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_overdue_info::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_overdue_info::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_overdue_info::clear_user_info() {
  if (user_info_ != NULL) user_info_->::common::user_basic_identification::Clear();
  clear_has_user_info();
}
inline const ::common::user_basic_identification& user_overdue_info::user_info() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_overdue_info.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::common::user_basic_identification* user_overdue_info::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::common::user_basic_identification;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_overdue_info.user_info)
  return user_info_;
}
inline ::common::user_basic_identification* user_overdue_info::release_user_info() {
  clear_has_user_info();
  ::common::user_basic_identification* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void user_overdue_info::set_allocated_user_info(::common::user_basic_identification* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_overdue_info.user_info)
}

// optional bool is_loan_overdue = 2;
inline bool user_overdue_info::has_is_loan_overdue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_overdue_info::set_has_is_loan_overdue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_overdue_info::clear_has_is_loan_overdue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_overdue_info::clear_is_loan_overdue() {
  is_loan_overdue_ = false;
  clear_has_is_loan_overdue();
}
inline bool user_overdue_info::is_loan_overdue() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_overdue_info.is_loan_overdue)
  return is_loan_overdue_;
}
inline void user_overdue_info::set_is_loan_overdue(bool value) {
  set_has_is_loan_overdue();
  is_loan_overdue_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.user_overdue_info.is_loan_overdue)
}

// optional bool is_assure_overdue = 3;
inline bool user_overdue_info::has_is_assure_overdue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_overdue_info::set_has_is_assure_overdue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_overdue_info::clear_has_is_assure_overdue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_overdue_info::clear_is_assure_overdue() {
  is_assure_overdue_ = false;
  clear_has_is_assure_overdue();
}
inline bool user_overdue_info::is_assure_overdue() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_overdue_info.is_assure_overdue)
  return is_assure_overdue_;
}
inline void user_overdue_info::set_is_assure_overdue(bool value) {
  set_has_is_assure_overdue();
  is_assure_overdue_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.user_overdue_info.is_assure_overdue)
}

// -------------------------------------------------------------------

// LandedAccount

// optional bytes mobilephone = 1;
inline bool LandedAccount::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LandedAccount::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LandedAccount::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LandedAccount::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& LandedAccount::mobilephone() const {
  // @@protoc_insertion_point(field_get:DW_Location.LandedAccount.mobilephone)
  return *mobilephone_;
}
inline void LandedAccount::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.LandedAccount.mobilephone)
}
inline void LandedAccount::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.LandedAccount.mobilephone)
}
inline void LandedAccount::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.LandedAccount.mobilephone)
}
inline ::std::string* LandedAccount::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.LandedAccount.mobilephone)
  return mobilephone_;
}
inline ::std::string* LandedAccount::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LandedAccount::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.LandedAccount.mobilephone)
}

// optional bytes identity_card = 2;
inline bool LandedAccount::has_identity_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LandedAccount::set_has_identity_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LandedAccount::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LandedAccount::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& LandedAccount::identity_card() const {
  // @@protoc_insertion_point(field_get:DW_Location.LandedAccount.identity_card)
  return *identity_card_;
}
inline void LandedAccount::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.LandedAccount.identity_card)
}
inline void LandedAccount::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.LandedAccount.identity_card)
}
inline void LandedAccount::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.LandedAccount.identity_card)
}
inline ::std::string* LandedAccount::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.LandedAccount.identity_card)
  return identity_card_;
}
inline ::std::string* LandedAccount::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LandedAccount::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.LandedAccount.identity_card)
}

// optional bytes real_name = 3;
inline bool LandedAccount::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LandedAccount::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LandedAccount::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LandedAccount::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& LandedAccount::real_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.LandedAccount.real_name)
  return *real_name_;
}
inline void LandedAccount::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.LandedAccount.real_name)
}
inline void LandedAccount::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.LandedAccount.real_name)
}
inline void LandedAccount::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.LandedAccount.real_name)
}
inline ::std::string* LandedAccount::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.LandedAccount.real_name)
  return real_name_;
}
inline ::std::string* LandedAccount::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LandedAccount::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.LandedAccount.real_name)
}

// optional bytes last_login_time = 4;
inline bool LandedAccount::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LandedAccount::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LandedAccount::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LandedAccount::clear_last_login_time() {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_->clear();
  }
  clear_has_last_login_time();
}
inline const ::std::string& LandedAccount::last_login_time() const {
  // @@protoc_insertion_point(field_get:DW_Location.LandedAccount.last_login_time)
  return *last_login_time_;
}
inline void LandedAccount::set_last_login_time(const ::std::string& value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.LandedAccount.last_login_time)
}
inline void LandedAccount::set_last_login_time(const char* value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.LandedAccount.last_login_time)
}
inline void LandedAccount::set_last_login_time(const void* value, size_t size) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.LandedAccount.last_login_time)
}
inline ::std::string* LandedAccount::mutable_last_login_time() {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_login_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.LandedAccount.last_login_time)
  return last_login_time_;
}
inline ::std::string* LandedAccount::release_last_login_time() {
  clear_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_login_time_;
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LandedAccount::set_allocated_last_login_time(::std::string* last_login_time) {
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (last_login_time) {
    set_has_last_login_time();
    last_login_time_ = last_login_time;
  } else {
    clear_has_last_login_time();
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.LandedAccount.last_login_time)
}

// -------------------------------------------------------------------

// yuliu_common_user_info

// optional bytes name = 1;
inline bool yuliu_common_user_info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yuliu_common_user_info::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yuliu_common_user_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yuliu_common_user_info::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& yuliu_common_user_info::name() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_common_user_info.name)
  return *name_;
}
inline void yuliu_common_user_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_common_user_info.name)
}
inline void yuliu_common_user_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_common_user_info.name)
}
inline void yuliu_common_user_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_common_user_info.name)
}
inline ::std::string* yuliu_common_user_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_common_user_info.name)
  return name_;
}
inline ::std::string* yuliu_common_user_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_common_user_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_common_user_info.name)
}

// optional bytes phone_num = 2;
inline bool yuliu_common_user_info::has_phone_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yuliu_common_user_info::set_has_phone_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yuliu_common_user_info::clear_has_phone_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yuliu_common_user_info::clear_phone_num() {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_->clear();
  }
  clear_has_phone_num();
}
inline const ::std::string& yuliu_common_user_info::phone_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_common_user_info.phone_num)
  return *phone_num_;
}
inline void yuliu_common_user_info::set_phone_num(const ::std::string& value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_common_user_info.phone_num)
}
inline void yuliu_common_user_info::set_phone_num(const char* value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_common_user_info.phone_num)
}
inline void yuliu_common_user_info::set_phone_num(const void* value, size_t size) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_common_user_info.phone_num)
}
inline ::std::string* yuliu_common_user_info::mutable_phone_num() {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_common_user_info.phone_num)
  return phone_num_;
}
inline ::std::string* yuliu_common_user_info::release_phone_num() {
  clear_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_num_;
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_common_user_info::set_allocated_phone_num(::std::string* phone_num) {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (phone_num) {
    set_has_phone_num();
    phone_num_ = phone_num;
  } else {
    clear_has_phone_num();
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_common_user_info.phone_num)
}

// optional bytes relation = 3;
inline bool yuliu_common_user_info::has_relation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yuliu_common_user_info::set_has_relation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yuliu_common_user_info::clear_has_relation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yuliu_common_user_info::clear_relation() {
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_->clear();
  }
  clear_has_relation();
}
inline const ::std::string& yuliu_common_user_info::relation() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_common_user_info.relation)
  return *relation_;
}
inline void yuliu_common_user_info::set_relation(const ::std::string& value) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_common_user_info.relation)
}
inline void yuliu_common_user_info::set_relation(const char* value) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_common_user_info.relation)
}
inline void yuliu_common_user_info::set_relation(const void* value, size_t size) {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  relation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_common_user_info.relation)
}
inline ::std::string* yuliu_common_user_info::mutable_relation() {
  set_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_common_user_info.relation)
  return relation_;
}
inline ::std::string* yuliu_common_user_info::release_relation() {
  clear_has_relation();
  if (relation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relation_;
    relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_common_user_info::set_allocated_relation(::std::string* relation) {
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relation_;
  }
  if (relation) {
    set_has_relation();
    relation_ = relation;
  } else {
    clear_has_relation();
    relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_common_user_info.relation)
}

// -------------------------------------------------------------------

// yuliu_platform_user_info

// optional bytes avatar = 1;
inline bool yuliu_platform_user_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yuliu_platform_user_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yuliu_platform_user_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yuliu_platform_user_info::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& yuliu_platform_user_info::avatar() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.avatar)
  return *avatar_;
}
inline void yuliu_platform_user_info::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.avatar)
}
inline void yuliu_platform_user_info::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_platform_user_info.avatar)
}
inline void yuliu_platform_user_info::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_platform_user_info.avatar)
}
inline ::std::string* yuliu_platform_user_info::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_platform_user_info.avatar)
  return avatar_;
}
inline ::std::string* yuliu_platform_user_info::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_platform_user_info.avatar)
}

// optional bytes user_nickname = 2;
inline bool yuliu_platform_user_info::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yuliu_platform_user_info::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yuliu_platform_user_info::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yuliu_platform_user_info::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& yuliu_platform_user_info::user_nickname() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.user_nickname)
  return *user_nickname_;
}
inline void yuliu_platform_user_info::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.user_nickname)
}
inline void yuliu_platform_user_info::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_platform_user_info.user_nickname)
}
inline void yuliu_platform_user_info::set_user_nickname(const void* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_platform_user_info.user_nickname)
}
inline ::std::string* yuliu_platform_user_info::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_platform_user_info.user_nickname)
  return user_nickname_;
}
inline ::std::string* yuliu_platform_user_info::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_platform_user_info.user_nickname)
}

// optional bytes real_name = 3;
inline bool yuliu_platform_user_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yuliu_platform_user_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yuliu_platform_user_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yuliu_platform_user_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& yuliu_platform_user_info::real_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.real_name)
  return *real_name_;
}
inline void yuliu_platform_user_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.real_name)
}
inline void yuliu_platform_user_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_platform_user_info.real_name)
}
inline void yuliu_platform_user_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_platform_user_info.real_name)
}
inline ::std::string* yuliu_platform_user_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_platform_user_info.real_name)
  return real_name_;
}
inline ::std::string* yuliu_platform_user_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_platform_user_info.real_name)
}

// optional .common.sex sex_type = 4;
inline bool yuliu_platform_user_info::has_sex_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yuliu_platform_user_info::set_has_sex_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yuliu_platform_user_info::clear_has_sex_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yuliu_platform_user_info::clear_sex_type() {
  sex_type_ = 1;
  clear_has_sex_type();
}
inline ::common::sex yuliu_platform_user_info::sex_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.sex_type)
  return static_cast< ::common::sex >(sex_type_);
}
inline void yuliu_platform_user_info::set_sex_type(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex_type();
  sex_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.sex_type)
}

// optional .DW_Location.overdue_type type = 5;
inline bool yuliu_platform_user_info::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yuliu_platform_user_info::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yuliu_platform_user_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yuliu_platform_user_info::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DW_Location::overdue_type yuliu_platform_user_info::type() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.type)
  return static_cast< ::DW_Location::overdue_type >(type_);
}
inline void yuliu_platform_user_info::set_type(::DW_Location::overdue_type value) {
  assert(::DW_Location::overdue_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.type)
}

// optional float chonghe_rate = 6;
inline bool yuliu_platform_user_info::has_chonghe_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yuliu_platform_user_info::set_has_chonghe_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yuliu_platform_user_info::clear_has_chonghe_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yuliu_platform_user_info::clear_chonghe_rate() {
  chonghe_rate_ = 0;
  clear_has_chonghe_rate();
}
inline float yuliu_platform_user_info::chonghe_rate() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.chonghe_rate)
  return chonghe_rate_;
}
inline void yuliu_platform_user_info::set_chonghe_rate(float value) {
  set_has_chonghe_rate();
  chonghe_rate_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.chonghe_rate)
}

// optional bool is_in_adressbook = 7;
inline bool yuliu_platform_user_info::has_is_in_adressbook() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yuliu_platform_user_info::set_has_is_in_adressbook() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yuliu_platform_user_info::clear_has_is_in_adressbook() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yuliu_platform_user_info::clear_is_in_adressbook() {
  is_in_adressbook_ = false;
  clear_has_is_in_adressbook();
}
inline bool yuliu_platform_user_info::is_in_adressbook() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.is_in_adressbook)
  return is_in_adressbook_;
}
inline void yuliu_platform_user_info::set_is_in_adressbook(bool value) {
  set_has_is_in_adressbook();
  is_in_adressbook_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.is_in_adressbook)
}

// optional bytes adressbook_remark_name = 8;
inline bool yuliu_platform_user_info::has_adressbook_remark_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yuliu_platform_user_info::set_has_adressbook_remark_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yuliu_platform_user_info::clear_has_adressbook_remark_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yuliu_platform_user_info::clear_adressbook_remark_name() {
  if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_->clear();
  }
  clear_has_adressbook_remark_name();
}
inline const ::std::string& yuliu_platform_user_info::adressbook_remark_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.adressbook_remark_name)
  return *adressbook_remark_name_;
}
inline void yuliu_platform_user_info::set_adressbook_remark_name(const ::std::string& value) {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  adressbook_remark_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.yuliu_platform_user_info.adressbook_remark_name)
}
inline void yuliu_platform_user_info::set_adressbook_remark_name(const char* value) {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  adressbook_remark_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.yuliu_platform_user_info.adressbook_remark_name)
}
inline void yuliu_platform_user_info::set_adressbook_remark_name(const void* value, size_t size) {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  adressbook_remark_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.yuliu_platform_user_info.adressbook_remark_name)
}
inline ::std::string* yuliu_platform_user_info::mutable_adressbook_remark_name() {
  set_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_remark_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_platform_user_info.adressbook_remark_name)
  return adressbook_remark_name_;
}
inline ::std::string* yuliu_platform_user_info::release_adressbook_remark_name() {
  clear_has_adressbook_remark_name();
  if (adressbook_remark_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adressbook_remark_name_;
    adressbook_remark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void yuliu_platform_user_info::set_allocated_adressbook_remark_name(::std::string* adressbook_remark_name) {
  if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_remark_name_;
  }
  if (adressbook_remark_name) {
    set_has_adressbook_remark_name();
    adressbook_remark_name_ = adressbook_remark_name;
  } else {
    clear_has_adressbook_remark_name();
    adressbook_remark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_platform_user_info.adressbook_remark_name)
}

// optional .DW_Location.yuliu_common_user_info comm_info = 9;
inline bool yuliu_platform_user_info::has_comm_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void yuliu_platform_user_info::set_has_comm_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void yuliu_platform_user_info::clear_has_comm_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void yuliu_platform_user_info::clear_comm_info() {
  if (comm_info_ != NULL) comm_info_->::DW_Location::yuliu_common_user_info::Clear();
  clear_has_comm_info();
}
inline const ::DW_Location::yuliu_common_user_info& yuliu_platform_user_info::comm_info() const {
  // @@protoc_insertion_point(field_get:DW_Location.yuliu_platform_user_info.comm_info)
  return comm_info_ != NULL ? *comm_info_ : *default_instance_->comm_info_;
}
inline ::DW_Location::yuliu_common_user_info* yuliu_platform_user_info::mutable_comm_info() {
  set_has_comm_info();
  if (comm_info_ == NULL) comm_info_ = new ::DW_Location::yuliu_common_user_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.yuliu_platform_user_info.comm_info)
  return comm_info_;
}
inline ::DW_Location::yuliu_common_user_info* yuliu_platform_user_info::release_comm_info() {
  clear_has_comm_info();
  ::DW_Location::yuliu_common_user_info* temp = comm_info_;
  comm_info_ = NULL;
  return temp;
}
inline void yuliu_platform_user_info::set_allocated_comm_info(::DW_Location::yuliu_common_user_info* comm_info) {
  delete comm_info_;
  comm_info_ = comm_info;
  if (comm_info) {
    set_has_comm_info();
  } else {
    clear_has_comm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.yuliu_platform_user_info.comm_info)
}

// -------------------------------------------------------------------

// platform_register_user_info

// optional bytes adressbook_name = 1;
inline bool platform_register_user_info::has_adressbook_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void platform_register_user_info::set_has_adressbook_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void platform_register_user_info::clear_has_adressbook_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void platform_register_user_info::clear_adressbook_name() {
  if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_->clear();
  }
  clear_has_adressbook_name();
}
inline const ::std::string& platform_register_user_info::adressbook_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.platform_register_user_info.adressbook_name)
  return *adressbook_name_;
}
inline void platform_register_user_info::set_adressbook_name(const ::std::string& value) {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  adressbook_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.platform_register_user_info.adressbook_name)
}
inline void platform_register_user_info::set_adressbook_name(const char* value) {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  adressbook_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.platform_register_user_info.adressbook_name)
}
inline void platform_register_user_info::set_adressbook_name(const void* value, size_t size) {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  adressbook_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.platform_register_user_info.adressbook_name)
}
inline ::std::string* platform_register_user_info::mutable_adressbook_name() {
  set_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adressbook_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.platform_register_user_info.adressbook_name)
  return adressbook_name_;
}
inline ::std::string* platform_register_user_info::release_adressbook_name() {
  clear_has_adressbook_name();
  if (adressbook_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adressbook_name_;
    adressbook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_register_user_info::set_allocated_adressbook_name(::std::string* adressbook_name) {
  if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_name_;
  }
  if (adressbook_name) {
    set_has_adressbook_name();
    adressbook_name_ = adressbook_name;
  } else {
    clear_has_adressbook_name();
    adressbook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.platform_register_user_info.adressbook_name)
}

// optional bytes phone_num = 2;
inline bool platform_register_user_info::has_phone_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void platform_register_user_info::set_has_phone_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void platform_register_user_info::clear_has_phone_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void platform_register_user_info::clear_phone_num() {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_->clear();
  }
  clear_has_phone_num();
}
inline const ::std::string& platform_register_user_info::phone_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.platform_register_user_info.phone_num)
  return *phone_num_;
}
inline void platform_register_user_info::set_phone_num(const ::std::string& value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.platform_register_user_info.phone_num)
}
inline void platform_register_user_info::set_phone_num(const char* value) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.platform_register_user_info.phone_num)
}
inline void platform_register_user_info::set_phone_num(const void* value, size_t size) {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  phone_num_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.platform_register_user_info.phone_num)
}
inline ::std::string* platform_register_user_info::mutable_phone_num() {
  set_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_num_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.platform_register_user_info.phone_num)
  return phone_num_;
}
inline ::std::string* platform_register_user_info::release_phone_num() {
  clear_has_phone_num();
  if (phone_num_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_num_;
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void platform_register_user_info::set_allocated_phone_num(::std::string* phone_num) {
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (phone_num) {
    set_has_phone_num();
    phone_num_ = phone_num;
  } else {
    clear_has_phone_num();
    phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.platform_register_user_info.phone_num)
}

// optional .DW_Location.platform_type platfom_type_enum = 3;
inline bool platform_register_user_info::has_platfom_type_enum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void platform_register_user_info::set_has_platfom_type_enum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void platform_register_user_info::clear_has_platfom_type_enum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void platform_register_user_info::clear_platfom_type_enum() {
  platfom_type_enum_ = 1;
  clear_has_platfom_type_enum();
}
inline ::DW_Location::platform_type platform_register_user_info::platfom_type_enum() const {
  // @@protoc_insertion_point(field_get:DW_Location.platform_register_user_info.platfom_type_enum)
  return static_cast< ::DW_Location::platform_type >(platfom_type_enum_);
}
inline void platform_register_user_info::set_platfom_type_enum(::DW_Location::platform_type value) {
  assert(::DW_Location::platform_type_IsValid(value));
  set_has_platfom_type_enum();
  platfom_type_enum_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.platform_register_user_info.platfom_type_enum)
}

// optional .DW_Location.overdue_type overdue_type_enum = 4;
inline bool platform_register_user_info::has_overdue_type_enum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void platform_register_user_info::set_has_overdue_type_enum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void platform_register_user_info::clear_has_overdue_type_enum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void platform_register_user_info::clear_overdue_type_enum() {
  overdue_type_enum_ = 1;
  clear_has_overdue_type_enum();
}
inline ::DW_Location::overdue_type platform_register_user_info::overdue_type_enum() const {
  // @@protoc_insertion_point(field_get:DW_Location.platform_register_user_info.overdue_type_enum)
  return static_cast< ::DW_Location::overdue_type >(overdue_type_enum_);
}
inline void platform_register_user_info::set_overdue_type_enum(::DW_Location::overdue_type value) {
  assert(::DW_Location::overdue_type_IsValid(value));
  set_has_overdue_type_enum();
  overdue_type_enum_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.platform_register_user_info.overdue_type_enum)
}

// -------------------------------------------------------------------

// TerminalContactList

// optional bytes imei = 1;
inline bool TerminalContactList::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TerminalContactList::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TerminalContactList::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TerminalContactList::clear_imei() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& TerminalContactList::imei() const {
  // @@protoc_insertion_point(field_get:DW_Location.TerminalContactList.imei)
  return *imei_;
}
inline void TerminalContactList::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.TerminalContactList.imei)
}
inline void TerminalContactList::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.TerminalContactList.imei)
}
inline void TerminalContactList::set_imei(const void* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.TerminalContactList.imei)
}
inline ::std::string* TerminalContactList::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.TerminalContactList.imei)
  return imei_;
}
inline ::std::string* TerminalContactList::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TerminalContactList::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.TerminalContactList.imei)
}

// optional bytes mobile_brand = 2;
inline bool TerminalContactList::has_mobile_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TerminalContactList::set_has_mobile_brand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TerminalContactList::clear_has_mobile_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TerminalContactList::clear_mobile_brand() {
  if (mobile_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_brand_->clear();
  }
  clear_has_mobile_brand();
}
inline const ::std::string& TerminalContactList::mobile_brand() const {
  // @@protoc_insertion_point(field_get:DW_Location.TerminalContactList.mobile_brand)
  return *mobile_brand_;
}
inline void TerminalContactList::set_mobile_brand(const ::std::string& value) {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_brand_ = new ::std::string;
  }
  mobile_brand_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.TerminalContactList.mobile_brand)
}
inline void TerminalContactList::set_mobile_brand(const char* value) {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_brand_ = new ::std::string;
  }
  mobile_brand_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.TerminalContactList.mobile_brand)
}
inline void TerminalContactList::set_mobile_brand(const void* value, size_t size) {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_brand_ = new ::std::string;
  }
  mobile_brand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.TerminalContactList.mobile_brand)
}
inline ::std::string* TerminalContactList::mutable_mobile_brand() {
  set_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_brand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.TerminalContactList.mobile_brand)
  return mobile_brand_;
}
inline ::std::string* TerminalContactList::release_mobile_brand() {
  clear_has_mobile_brand();
  if (mobile_brand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_brand_;
    mobile_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TerminalContactList::set_allocated_mobile_brand(::std::string* mobile_brand) {
  if (mobile_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_brand_;
  }
  if (mobile_brand) {
    set_has_mobile_brand();
    mobile_brand_ = mobile_brand;
  } else {
    clear_has_mobile_brand();
    mobile_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.TerminalContactList.mobile_brand)
}

// optional int32 iscommon = 3;
inline bool TerminalContactList::has_iscommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TerminalContactList::set_has_iscommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TerminalContactList::clear_has_iscommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TerminalContactList::clear_iscommon() {
  iscommon_ = 0;
  clear_has_iscommon();
}
inline ::google::protobuf::int32 TerminalContactList::iscommon() const {
  // @@protoc_insertion_point(field_get:DW_Location.TerminalContactList.iscommon)
  return iscommon_;
}
inline void TerminalContactList::set_iscommon(::google::protobuf::int32 value) {
  set_has_iscommon();
  iscommon_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.TerminalContactList.iscommon)
}

// repeated .UBAS_niiwoo.user_contact_t constacts = 4;
inline int TerminalContactList::constacts_size() const {
  return constacts_.size();
}
inline void TerminalContactList::clear_constacts() {
  constacts_.Clear();
}
inline const ::UBAS_niiwoo::user_contact_t& TerminalContactList::constacts(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.TerminalContactList.constacts)
  return constacts_.Get(index);
}
inline ::UBAS_niiwoo::user_contact_t* TerminalContactList::mutable_constacts(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.TerminalContactList.constacts)
  return constacts_.Mutable(index);
}
inline ::UBAS_niiwoo::user_contact_t* TerminalContactList::add_constacts() {
  // @@protoc_insertion_point(field_add:DW_Location.TerminalContactList.constacts)
  return constacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >&
TerminalContactList::constacts() const {
  // @@protoc_insertion_point(field_list:DW_Location.TerminalContactList.constacts)
  return constacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >*
TerminalContactList::mutable_constacts() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.TerminalContactList.constacts)
  return &constacts_;
}

// repeated .DW_Location.LandedAccount landed_account = 5;
inline int TerminalContactList::landed_account_size() const {
  return landed_account_.size();
}
inline void TerminalContactList::clear_landed_account() {
  landed_account_.Clear();
}
inline const ::DW_Location::LandedAccount& TerminalContactList::landed_account(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.TerminalContactList.landed_account)
  return landed_account_.Get(index);
}
inline ::DW_Location::LandedAccount* TerminalContactList::mutable_landed_account(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.TerminalContactList.landed_account)
  return landed_account_.Mutable(index);
}
inline ::DW_Location::LandedAccount* TerminalContactList::add_landed_account() {
  // @@protoc_insertion_point(field_add:DW_Location.TerminalContactList.landed_account)
  return landed_account_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::LandedAccount >&
TerminalContactList::landed_account() const {
  // @@protoc_insertion_point(field_list:DW_Location.TerminalContactList.landed_account)
  return landed_account_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::LandedAccount >*
TerminalContactList::mutable_landed_account() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.TerminalContactList.landed_account)
  return &landed_account_;
}

// repeated .DW_Location.platform_register_user_info platform_register_user = 6;
inline int TerminalContactList::platform_register_user_size() const {
  return platform_register_user_.size();
}
inline void TerminalContactList::clear_platform_register_user() {
  platform_register_user_.Clear();
}
inline const ::DW_Location::platform_register_user_info& TerminalContactList::platform_register_user(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.TerminalContactList.platform_register_user)
  return platform_register_user_.Get(index);
}
inline ::DW_Location::platform_register_user_info* TerminalContactList::mutable_platform_register_user(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.TerminalContactList.platform_register_user)
  return platform_register_user_.Mutable(index);
}
inline ::DW_Location::platform_register_user_info* TerminalContactList::add_platform_register_user() {
  // @@protoc_insertion_point(field_add:DW_Location.TerminalContactList.platform_register_user)
  return platform_register_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >&
TerminalContactList::platform_register_user() const {
  // @@protoc_insertion_point(field_list:DW_Location.TerminalContactList.platform_register_user)
  return platform_register_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::platform_register_user_info >*
TerminalContactList::mutable_platform_register_user() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.TerminalContactList.platform_register_user)
  return &platform_register_user_;
}

// -------------------------------------------------------------------

// sex_proportion

// optional int32 male_num = 1;
inline bool sex_proportion::has_male_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sex_proportion::set_has_male_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sex_proportion::clear_has_male_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sex_proportion::clear_male_num() {
  male_num_ = 0;
  clear_has_male_num();
}
inline ::google::protobuf::int32 sex_proportion::male_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.sex_proportion.male_num)
  return male_num_;
}
inline void sex_proportion::set_male_num(::google::protobuf::int32 value) {
  set_has_male_num();
  male_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.sex_proportion.male_num)
}

// optional int32 girl_num = 2;
inline bool sex_proportion::has_girl_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sex_proportion::set_has_girl_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sex_proportion::clear_has_girl_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sex_proportion::clear_girl_num() {
  girl_num_ = 0;
  clear_has_girl_num();
}
inline ::google::protobuf::int32 sex_proportion::girl_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.sex_proportion.girl_num)
  return girl_num_;
}
inline void sex_proportion::set_girl_num(::google::protobuf::int32 value) {
  set_has_girl_num();
  girl_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.sex_proportion.girl_num)
}

// optional int32 nuknow_num = 3;
inline bool sex_proportion::has_nuknow_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sex_proportion::set_has_nuknow_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sex_proportion::clear_has_nuknow_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sex_proportion::clear_nuknow_num() {
  nuknow_num_ = 0;
  clear_has_nuknow_num();
}
inline ::google::protobuf::int32 sex_proportion::nuknow_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.sex_proportion.nuknow_num)
  return nuknow_num_;
}
inline void sex_proportion::set_nuknow_num(::google::protobuf::int32 value) {
  set_has_nuknow_num();
  nuknow_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.sex_proportion.nuknow_num)
}

// -------------------------------------------------------------------

// degree_proportion

// optional int32 technical_num = 1;
inline bool degree_proportion::has_technical_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void degree_proportion::set_has_technical_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void degree_proportion::clear_has_technical_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void degree_proportion::clear_technical_num() {
  technical_num_ = 0;
  clear_has_technical_num();
}
inline ::google::protobuf::int32 degree_proportion::technical_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.degree_proportion.technical_num)
  return technical_num_;
}
inline void degree_proportion::set_technical_num(::google::protobuf::int32 value) {
  set_has_technical_num();
  technical_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.degree_proportion.technical_num)
}

// optional int32 college_num = 2;
inline bool degree_proportion::has_college_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void degree_proportion::set_has_college_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void degree_proportion::clear_has_college_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void degree_proportion::clear_college_num() {
  college_num_ = 0;
  clear_has_college_num();
}
inline ::google::protobuf::int32 degree_proportion::college_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.degree_proportion.college_num)
  return college_num_;
}
inline void degree_proportion::set_college_num(::google::protobuf::int32 value) {
  set_has_college_num();
  college_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.degree_proportion.college_num)
}

// optional int32 university_num = 3;
inline bool degree_proportion::has_university_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void degree_proportion::set_has_university_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void degree_proportion::clear_has_university_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void degree_proportion::clear_university_num() {
  university_num_ = 0;
  clear_has_university_num();
}
inline ::google::protobuf::int32 degree_proportion::university_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.degree_proportion.university_num)
  return university_num_;
}
inline void degree_proportion::set_university_num(::google::protobuf::int32 value) {
  set_has_university_num();
  university_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.degree_proportion.university_num)
}

// optional int32 graduate_num = 4;
inline bool degree_proportion::has_graduate_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void degree_proportion::set_has_graduate_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void degree_proportion::clear_has_graduate_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void degree_proportion::clear_graduate_num() {
  graduate_num_ = 0;
  clear_has_graduate_num();
}
inline ::google::protobuf::int32 degree_proportion::graduate_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.degree_proportion.graduate_num)
  return graduate_num_;
}
inline void degree_proportion::set_graduate_num(::google::protobuf::int32 value) {
  set_has_graduate_num();
  graduate_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.degree_proportion.graduate_num)
}

// optional int32 doctor_num = 5;
inline bool degree_proportion::has_doctor_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void degree_proportion::set_has_doctor_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void degree_proportion::clear_has_doctor_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void degree_proportion::clear_doctor_num() {
  doctor_num_ = 0;
  clear_has_doctor_num();
}
inline ::google::protobuf::int32 degree_proportion::doctor_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.degree_proportion.doctor_num)
  return doctor_num_;
}
inline void degree_proportion::set_doctor_num(::google::protobuf::int32 value) {
  set_has_doctor_num();
  doctor_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.degree_proportion.doctor_num)
}

// -------------------------------------------------------------------

// email_proportion

// optional bytes email = 1;
inline bool email_proportion::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void email_proportion::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void email_proportion::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void email_proportion::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& email_proportion::email() const {
  // @@protoc_insertion_point(field_get:DW_Location.email_proportion.email)
  return *email_;
}
inline void email_proportion::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.email_proportion.email)
}
inline void email_proportion::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.email_proportion.email)
}
inline void email_proportion::set_email(const void* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.email_proportion.email)
}
inline ::std::string* email_proportion::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.email_proportion.email)
  return email_;
}
inline ::std::string* email_proportion::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void email_proportion::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.email_proportion.email)
}

// optional int32 email_num = 2;
inline bool email_proportion::has_email_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void email_proportion::set_has_email_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void email_proportion::clear_has_email_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void email_proportion::clear_email_num() {
  email_num_ = 0;
  clear_has_email_num();
}
inline ::google::protobuf::int32 email_proportion::email_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.email_proportion.email_num)
  return email_num_;
}
inline void email_proportion::set_email_num(::google::protobuf::int32 value) {
  set_has_email_num();
  email_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.email_proportion.email_num)
}

// -------------------------------------------------------------------

// MobilePhoneListExt_ask

// optional .common.common_ask_header ask_header = 1;
inline bool MobilePhoneListExt_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobilePhoneListExt_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobilePhoneListExt_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobilePhoneListExt_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& MobilePhoneListExt_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* MobilePhoneListExt_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* MobilePhoneListExt_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void MobilePhoneListExt_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.MobilePhoneListExt_ask.ask_header)
}

// optional bytes identity_card = 2;
inline bool MobilePhoneListExt_ask::has_identity_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobilePhoneListExt_ask::set_has_identity_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobilePhoneListExt_ask::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobilePhoneListExt_ask::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& MobilePhoneListExt_ask::identity_card() const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ask.identity_card)
  return *identity_card_;
}
inline void MobilePhoneListExt_ask::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.MobilePhoneListExt_ask.identity_card)
}
inline void MobilePhoneListExt_ask::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.MobilePhoneListExt_ask.identity_card)
}
inline void MobilePhoneListExt_ask::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.MobilePhoneListExt_ask.identity_card)
}
inline ::std::string* MobilePhoneListExt_ask::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ask.identity_card)
  return identity_card_;
}
inline ::std::string* MobilePhoneListExt_ask::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobilePhoneListExt_ask::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.MobilePhoneListExt_ask.identity_card)
}

// optional bytes mobile_phone = 3;
inline bool MobilePhoneListExt_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobilePhoneListExt_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobilePhoneListExt_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobilePhoneListExt_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& MobilePhoneListExt_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ask.mobile_phone)
  return *mobile_phone_;
}
inline void MobilePhoneListExt_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.MobilePhoneListExt_ask.mobile_phone)
}
inline void MobilePhoneListExt_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.MobilePhoneListExt_ask.mobile_phone)
}
inline void MobilePhoneListExt_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.MobilePhoneListExt_ask.mobile_phone)
}
inline ::std::string* MobilePhoneListExt_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* MobilePhoneListExt_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobilePhoneListExt_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.MobilePhoneListExt_ask.mobile_phone)
}

// -------------------------------------------------------------------

// MobilePhoneListExt_ans

// optional .common.errorinfo result = 1;
inline bool MobilePhoneListExt_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobilePhoneListExt_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobilePhoneListExt_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobilePhoneListExt_ans::clear_result() {
  if (result_ != NULL) result_->::common::errorinfo::Clear();
  clear_has_result();
}
inline const ::common::errorinfo& MobilePhoneListExt_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::errorinfo* MobilePhoneListExt_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ans.result)
  return result_;
}
inline ::common::errorinfo* MobilePhoneListExt_ans::release_result() {
  clear_has_result();
  ::common::errorinfo* temp = result_;
  result_ = NULL;
  return temp;
}
inline void MobilePhoneListExt_ans::set_allocated_result(::common::errorinfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.MobilePhoneListExt_ans.result)
}

// optional .common.user_info user_info_ = 2;
inline bool MobilePhoneListExt_ans::has_user_info_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobilePhoneListExt_ans::set_has_user_info_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobilePhoneListExt_ans::clear_has_user_info_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobilePhoneListExt_ans::clear_user_info_() {
  if (user_info__ != NULL) user_info__->::common::user_info::Clear();
  clear_has_user_info_();
}
inline const ::common::user_info& MobilePhoneListExt_ans::user_info_() const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ans.user_info_)
  return user_info__ != NULL ? *user_info__ : *default_instance_->user_info__;
}
inline ::common::user_info* MobilePhoneListExt_ans::mutable_user_info_() {
  set_has_user_info_();
  if (user_info__ == NULL) user_info__ = new ::common::user_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ans.user_info_)
  return user_info__;
}
inline ::common::user_info* MobilePhoneListExt_ans::release_user_info_() {
  clear_has_user_info_();
  ::common::user_info* temp = user_info__;
  user_info__ = NULL;
  return temp;
}
inline void MobilePhoneListExt_ans::set_allocated_user_info_(::common::user_info* user_info_) {
  delete user_info__;
  user_info__ = user_info_;
  if (user_info_) {
    set_has_user_info_();
  } else {
    clear_has_user_info_();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.MobilePhoneListExt_ans.user_info_)
}

// repeated .DW_Location.TerminalContactList terminal_contacts = 3;
inline int MobilePhoneListExt_ans::terminal_contacts_size() const {
  return terminal_contacts_.size();
}
inline void MobilePhoneListExt_ans::clear_terminal_contacts() {
  terminal_contacts_.Clear();
}
inline const ::DW_Location::TerminalContactList& MobilePhoneListExt_ans::terminal_contacts(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ans.terminal_contacts)
  return terminal_contacts_.Get(index);
}
inline ::DW_Location::TerminalContactList* MobilePhoneListExt_ans::mutable_terminal_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ans.terminal_contacts)
  return terminal_contacts_.Mutable(index);
}
inline ::DW_Location::TerminalContactList* MobilePhoneListExt_ans::add_terminal_contacts() {
  // @@protoc_insertion_point(field_add:DW_Location.MobilePhoneListExt_ans.terminal_contacts)
  return terminal_contacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::TerminalContactList >&
MobilePhoneListExt_ans::terminal_contacts() const {
  // @@protoc_insertion_point(field_list:DW_Location.MobilePhoneListExt_ans.terminal_contacts)
  return terminal_contacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::TerminalContactList >*
MobilePhoneListExt_ans::mutable_terminal_contacts() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.MobilePhoneListExt_ans.terminal_contacts)
  return &terminal_contacts_;
}

// optional .DW_Location.overdue_type type = 4;
inline bool MobilePhoneListExt_ans::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobilePhoneListExt_ans::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobilePhoneListExt_ans::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobilePhoneListExt_ans::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DW_Location::overdue_type MobilePhoneListExt_ans::type() const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ans.type)
  return static_cast< ::DW_Location::overdue_type >(type_);
}
inline void MobilePhoneListExt_ans::set_type(::DW_Location::overdue_type value) {
  assert(::DW_Location::overdue_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.MobilePhoneListExt_ans.type)
}

// repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 5;
inline int MobilePhoneListExt_ans::yuliu_common_user_size() const {
  return yuliu_common_user_.size();
}
inline void MobilePhoneListExt_ans::clear_yuliu_common_user() {
  yuliu_common_user_.Clear();
}
inline const ::DW_Location::yuliu_common_user_info& MobilePhoneListExt_ans::yuliu_common_user(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ans.yuliu_common_user)
  return yuliu_common_user_.Get(index);
}
inline ::DW_Location::yuliu_common_user_info* MobilePhoneListExt_ans::mutable_yuliu_common_user(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ans.yuliu_common_user)
  return yuliu_common_user_.Mutable(index);
}
inline ::DW_Location::yuliu_common_user_info* MobilePhoneListExt_ans::add_yuliu_common_user() {
  // @@protoc_insertion_point(field_add:DW_Location.MobilePhoneListExt_ans.yuliu_common_user)
  return yuliu_common_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >&
MobilePhoneListExt_ans::yuliu_common_user() const {
  // @@protoc_insertion_point(field_list:DW_Location.MobilePhoneListExt_ans.yuliu_common_user)
  return yuliu_common_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_common_user_info >*
MobilePhoneListExt_ans::mutable_yuliu_common_user() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.MobilePhoneListExt_ans.yuliu_common_user)
  return &yuliu_common_user_;
}

// repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 6;
inline int MobilePhoneListExt_ans::yuliu_platform_user_size() const {
  return yuliu_platform_user_.size();
}
inline void MobilePhoneListExt_ans::clear_yuliu_platform_user() {
  yuliu_platform_user_.Clear();
}
inline const ::DW_Location::yuliu_platform_user_info& MobilePhoneListExt_ans::yuliu_platform_user(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.MobilePhoneListExt_ans.yuliu_platform_user)
  return yuliu_platform_user_.Get(index);
}
inline ::DW_Location::yuliu_platform_user_info* MobilePhoneListExt_ans::mutable_yuliu_platform_user(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.MobilePhoneListExt_ans.yuliu_platform_user)
  return yuliu_platform_user_.Mutable(index);
}
inline ::DW_Location::yuliu_platform_user_info* MobilePhoneListExt_ans::add_yuliu_platform_user() {
  // @@protoc_insertion_point(field_add:DW_Location.MobilePhoneListExt_ans.yuliu_platform_user)
  return yuliu_platform_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >&
MobilePhoneListExt_ans::yuliu_platform_user() const {
  // @@protoc_insertion_point(field_list:DW_Location.MobilePhoneListExt_ans.yuliu_platform_user)
  return yuliu_platform_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::yuliu_platform_user_info >*
MobilePhoneListExt_ans::mutable_yuliu_platform_user() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.MobilePhoneListExt_ans.yuliu_platform_user)
  return &yuliu_platform_user_;
}

// -------------------------------------------------------------------

// adressbook_chonghe_rate_info

// optional bytes original_device_no = 1;
inline bool adressbook_chonghe_rate_info::has_original_device_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adressbook_chonghe_rate_info::set_has_original_device_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adressbook_chonghe_rate_info::clear_has_original_device_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adressbook_chonghe_rate_info::clear_original_device_no() {
  if (original_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_device_no_->clear();
  }
  clear_has_original_device_no();
}
inline const ::std::string& adressbook_chonghe_rate_info::original_device_no() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_info.original_device_no)
  return *original_device_no_;
}
inline void adressbook_chonghe_rate_info::set_original_device_no(const ::std::string& value) {
  set_has_original_device_no();
  if (original_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_device_no_ = new ::std::string;
  }
  original_device_no_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.adressbook_chonghe_rate_info.original_device_no)
}
inline void adressbook_chonghe_rate_info::set_original_device_no(const char* value) {
  set_has_original_device_no();
  if (original_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_device_no_ = new ::std::string;
  }
  original_device_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.adressbook_chonghe_rate_info.original_device_no)
}
inline void adressbook_chonghe_rate_info::set_original_device_no(const void* value, size_t size) {
  set_has_original_device_no();
  if (original_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_device_no_ = new ::std::string;
  }
  original_device_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.adressbook_chonghe_rate_info.original_device_no)
}
inline ::std::string* adressbook_chonghe_rate_info::mutable_original_device_no() {
  set_has_original_device_no();
  if (original_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_device_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_info.original_device_no)
  return original_device_no_;
}
inline ::std::string* adressbook_chonghe_rate_info::release_original_device_no() {
  clear_has_original_device_no();
  if (original_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = original_device_no_;
    original_device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void adressbook_chonghe_rate_info::set_allocated_original_device_no(::std::string* original_device_no) {
  if (original_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_device_no_;
  }
  if (original_device_no) {
    set_has_original_device_no();
    original_device_no_ = original_device_no;
  } else {
    clear_has_original_device_no();
    original_device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.adressbook_chonghe_rate_info.original_device_no)
}

// optional bytes other_device_no = 2;
inline bool adressbook_chonghe_rate_info::has_other_device_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adressbook_chonghe_rate_info::set_has_other_device_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adressbook_chonghe_rate_info::clear_has_other_device_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adressbook_chonghe_rate_info::clear_other_device_no() {
  if (other_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_device_no_->clear();
  }
  clear_has_other_device_no();
}
inline const ::std::string& adressbook_chonghe_rate_info::other_device_no() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_info.other_device_no)
  return *other_device_no_;
}
inline void adressbook_chonghe_rate_info::set_other_device_no(const ::std::string& value) {
  set_has_other_device_no();
  if (other_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_device_no_ = new ::std::string;
  }
  other_device_no_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.adressbook_chonghe_rate_info.other_device_no)
}
inline void adressbook_chonghe_rate_info::set_other_device_no(const char* value) {
  set_has_other_device_no();
  if (other_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_device_no_ = new ::std::string;
  }
  other_device_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.adressbook_chonghe_rate_info.other_device_no)
}
inline void adressbook_chonghe_rate_info::set_other_device_no(const void* value, size_t size) {
  set_has_other_device_no();
  if (other_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_device_no_ = new ::std::string;
  }
  other_device_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.adressbook_chonghe_rate_info.other_device_no)
}
inline ::std::string* adressbook_chonghe_rate_info::mutable_other_device_no() {
  set_has_other_device_no();
  if (other_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_device_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_info.other_device_no)
  return other_device_no_;
}
inline ::std::string* adressbook_chonghe_rate_info::release_other_device_no() {
  clear_has_other_device_no();
  if (other_device_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = other_device_no_;
    other_device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void adressbook_chonghe_rate_info::set_allocated_other_device_no(::std::string* other_device_no) {
  if (other_device_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete other_device_no_;
  }
  if (other_device_no) {
    set_has_other_device_no();
    other_device_no_ = other_device_no;
  } else {
    clear_has_other_device_no();
    other_device_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.adressbook_chonghe_rate_info.other_device_no)
}

// optional float chonghe_rate = 3;
inline bool adressbook_chonghe_rate_info::has_chonghe_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void adressbook_chonghe_rate_info::set_has_chonghe_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void adressbook_chonghe_rate_info::clear_has_chonghe_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void adressbook_chonghe_rate_info::clear_chonghe_rate() {
  chonghe_rate_ = 0;
  clear_has_chonghe_rate();
}
inline float adressbook_chonghe_rate_info::chonghe_rate() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_info.chonghe_rate)
  return chonghe_rate_;
}
inline void adressbook_chonghe_rate_info::set_chonghe_rate(float value) {
  set_has_chonghe_rate();
  chonghe_rate_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.adressbook_chonghe_rate_info.chonghe_rate)
}

// -------------------------------------------------------------------

// adressbook_chonghe_rate_ask

// optional .common.common_ask_header ask_header = 1;
inline bool adressbook_chonghe_rate_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adressbook_chonghe_rate_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adressbook_chonghe_rate_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adressbook_chonghe_rate_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& adressbook_chonghe_rate_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* adressbook_chonghe_rate_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* adressbook_chonghe_rate_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void adressbook_chonghe_rate_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.adressbook_chonghe_rate_ask.ask_header)
}

// optional bytes original_mobile_phone = 2;
inline bool adressbook_chonghe_rate_ask::has_original_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adressbook_chonghe_rate_ask::set_has_original_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adressbook_chonghe_rate_ask::clear_has_original_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adressbook_chonghe_rate_ask::clear_original_mobile_phone() {
  if (original_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_mobile_phone_->clear();
  }
  clear_has_original_mobile_phone();
}
inline const ::std::string& adressbook_chonghe_rate_ask::original_mobile_phone() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_ask.original_mobile_phone)
  return *original_mobile_phone_;
}
inline void adressbook_chonghe_rate_ask::set_original_mobile_phone(const ::std::string& value) {
  set_has_original_mobile_phone();
  if (original_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_mobile_phone_ = new ::std::string;
  }
  original_mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.adressbook_chonghe_rate_ask.original_mobile_phone)
}
inline void adressbook_chonghe_rate_ask::set_original_mobile_phone(const char* value) {
  set_has_original_mobile_phone();
  if (original_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_mobile_phone_ = new ::std::string;
  }
  original_mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.adressbook_chonghe_rate_ask.original_mobile_phone)
}
inline void adressbook_chonghe_rate_ask::set_original_mobile_phone(const void* value, size_t size) {
  set_has_original_mobile_phone();
  if (original_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_mobile_phone_ = new ::std::string;
  }
  original_mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.adressbook_chonghe_rate_ask.original_mobile_phone)
}
inline ::std::string* adressbook_chonghe_rate_ask::mutable_original_mobile_phone() {
  set_has_original_mobile_phone();
  if (original_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    original_mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_ask.original_mobile_phone)
  return original_mobile_phone_;
}
inline ::std::string* adressbook_chonghe_rate_ask::release_original_mobile_phone() {
  clear_has_original_mobile_phone();
  if (original_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = original_mobile_phone_;
    original_mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void adressbook_chonghe_rate_ask::set_allocated_original_mobile_phone(::std::string* original_mobile_phone) {
  if (original_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_mobile_phone_;
  }
  if (original_mobile_phone) {
    set_has_original_mobile_phone();
    original_mobile_phone_ = original_mobile_phone;
  } else {
    clear_has_original_mobile_phone();
    original_mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.adressbook_chonghe_rate_ask.original_mobile_phone)
}

// optional bytes other_mobile_phone = 3;
inline bool adressbook_chonghe_rate_ask::has_other_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void adressbook_chonghe_rate_ask::set_has_other_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void adressbook_chonghe_rate_ask::clear_has_other_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void adressbook_chonghe_rate_ask::clear_other_mobile_phone() {
  if (other_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_mobile_phone_->clear();
  }
  clear_has_other_mobile_phone();
}
inline const ::std::string& adressbook_chonghe_rate_ask::other_mobile_phone() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_ask.other_mobile_phone)
  return *other_mobile_phone_;
}
inline void adressbook_chonghe_rate_ask::set_other_mobile_phone(const ::std::string& value) {
  set_has_other_mobile_phone();
  if (other_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_mobile_phone_ = new ::std::string;
  }
  other_mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.adressbook_chonghe_rate_ask.other_mobile_phone)
}
inline void adressbook_chonghe_rate_ask::set_other_mobile_phone(const char* value) {
  set_has_other_mobile_phone();
  if (other_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_mobile_phone_ = new ::std::string;
  }
  other_mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.adressbook_chonghe_rate_ask.other_mobile_phone)
}
inline void adressbook_chonghe_rate_ask::set_other_mobile_phone(const void* value, size_t size) {
  set_has_other_mobile_phone();
  if (other_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_mobile_phone_ = new ::std::string;
  }
  other_mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.adressbook_chonghe_rate_ask.other_mobile_phone)
}
inline ::std::string* adressbook_chonghe_rate_ask::mutable_other_mobile_phone() {
  set_has_other_mobile_phone();
  if (other_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_ask.other_mobile_phone)
  return other_mobile_phone_;
}
inline ::std::string* adressbook_chonghe_rate_ask::release_other_mobile_phone() {
  clear_has_other_mobile_phone();
  if (other_mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = other_mobile_phone_;
    other_mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void adressbook_chonghe_rate_ask::set_allocated_other_mobile_phone(::std::string* other_mobile_phone) {
  if (other_mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete other_mobile_phone_;
  }
  if (other_mobile_phone) {
    set_has_other_mobile_phone();
    other_mobile_phone_ = other_mobile_phone;
  } else {
    clear_has_other_mobile_phone();
    other_mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.adressbook_chonghe_rate_ask.other_mobile_phone)
}

// -------------------------------------------------------------------

// adressbook_chonghe_rate_ans

// optional .common.errorinfo result = 1;
inline bool adressbook_chonghe_rate_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adressbook_chonghe_rate_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adressbook_chonghe_rate_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adressbook_chonghe_rate_ans::clear_result() {
  if (result_ != NULL) result_->::common::errorinfo::Clear();
  clear_has_result();
}
inline const ::common::errorinfo& adressbook_chonghe_rate_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::errorinfo* adressbook_chonghe_rate_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_ans.result)
  return result_;
}
inline ::common::errorinfo* adressbook_chonghe_rate_ans::release_result() {
  clear_has_result();
  ::common::errorinfo* temp = result_;
  result_ = NULL;
  return temp;
}
inline void adressbook_chonghe_rate_ans::set_allocated_result(::common::errorinfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.adressbook_chonghe_rate_ans.result)
}

// repeated .DW_Location.adressbook_chonghe_rate_info adressbook_chonghe_rate = 2;
inline int adressbook_chonghe_rate_ans::adressbook_chonghe_rate_size() const {
  return adressbook_chonghe_rate_.size();
}
inline void adressbook_chonghe_rate_ans::clear_adressbook_chonghe_rate() {
  adressbook_chonghe_rate_.Clear();
}
inline const ::DW_Location::adressbook_chonghe_rate_info& adressbook_chonghe_rate_ans::adressbook_chonghe_rate(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.adressbook_chonghe_rate_ans.adressbook_chonghe_rate)
  return adressbook_chonghe_rate_.Get(index);
}
inline ::DW_Location::adressbook_chonghe_rate_info* adressbook_chonghe_rate_ans::mutable_adressbook_chonghe_rate(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.adressbook_chonghe_rate_ans.adressbook_chonghe_rate)
  return adressbook_chonghe_rate_.Mutable(index);
}
inline ::DW_Location::adressbook_chonghe_rate_info* adressbook_chonghe_rate_ans::add_adressbook_chonghe_rate() {
  // @@protoc_insertion_point(field_add:DW_Location.adressbook_chonghe_rate_ans.adressbook_chonghe_rate)
  return adressbook_chonghe_rate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::adressbook_chonghe_rate_info >&
adressbook_chonghe_rate_ans::adressbook_chonghe_rate() const {
  // @@protoc_insertion_point(field_list:DW_Location.adressbook_chonghe_rate_ans.adressbook_chonghe_rate)
  return adressbook_chonghe_rate_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::adressbook_chonghe_rate_info >*
adressbook_chonghe_rate_ans::mutable_adressbook_chonghe_rate() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.adressbook_chonghe_rate_ans.adressbook_chonghe_rate)
  return &adressbook_chonghe_rate_;
}

// -------------------------------------------------------------------

// DW_userinfo_ask

// optional .common.common_ask_header ask_header = 1;
inline bool DW_userinfo_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DW_userinfo_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DW_userinfo_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DW_userinfo_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& DW_userinfo_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* DW_userinfo_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* DW_userinfo_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void DW_userinfo_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ask.ask_header)
}

// optional .DW_Location.DW_ask_type ask_type = 2;
inline bool DW_userinfo_ask::has_ask_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DW_userinfo_ask::set_has_ask_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DW_userinfo_ask::clear_has_ask_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DW_userinfo_ask::clear_ask_type() {
  ask_type_ = 1;
  clear_has_ask_type();
}
inline ::DW_Location::DW_ask_type DW_userinfo_ask::ask_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.ask_type)
  return static_cast< ::DW_Location::DW_ask_type >(ask_type_);
}
inline void DW_userinfo_ask::set_ask_type(::DW_Location::DW_ask_type value) {
  assert(::DW_Location::DW_ask_type_IsValid(value));
  set_has_ask_type();
  ask_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.DW_userinfo_ask.ask_type)
}

// optional bytes start_time = 3;
inline bool DW_userinfo_ask::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DW_userinfo_ask::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DW_userinfo_ask::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DW_userinfo_ask::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& DW_userinfo_ask::start_time() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.start_time)
  return *start_time_;
}
inline void DW_userinfo_ask::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.DW_userinfo_ask.start_time)
}
inline void DW_userinfo_ask::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.DW_userinfo_ask.start_time)
}
inline void DW_userinfo_ask::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.DW_userinfo_ask.start_time)
}
inline ::std::string* DW_userinfo_ask::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ask.start_time)
  return start_time_;
}
inline ::std::string* DW_userinfo_ask::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DW_userinfo_ask::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ask.start_time)
}

// optional bytes end_time = 4;
inline bool DW_userinfo_ask::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DW_userinfo_ask::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DW_userinfo_ask::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DW_userinfo_ask::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& DW_userinfo_ask::end_time() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.end_time)
  return *end_time_;
}
inline void DW_userinfo_ask::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.DW_userinfo_ask.end_time)
}
inline void DW_userinfo_ask::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.DW_userinfo_ask.end_time)
}
inline void DW_userinfo_ask::set_end_time(const void* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.DW_userinfo_ask.end_time)
}
inline ::std::string* DW_userinfo_ask::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ask.end_time)
  return end_time_;
}
inline ::std::string* DW_userinfo_ask::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DW_userinfo_ask::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ask.end_time)
}

// optional .DW_Location.user_identification_list user_info_list = 5;
inline bool DW_userinfo_ask::has_user_info_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DW_userinfo_ask::set_has_user_info_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DW_userinfo_ask::clear_has_user_info_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DW_userinfo_ask::clear_user_info_list() {
  if (user_info_list_ != NULL) user_info_list_->::DW_Location::user_identification_list::Clear();
  clear_has_user_info_list();
}
inline const ::DW_Location::user_identification_list& DW_userinfo_ask::user_info_list() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.user_info_list)
  return user_info_list_ != NULL ? *user_info_list_ : *default_instance_->user_info_list_;
}
inline ::DW_Location::user_identification_list* DW_userinfo_ask::mutable_user_info_list() {
  set_has_user_info_list();
  if (user_info_list_ == NULL) user_info_list_ = new ::DW_Location::user_identification_list;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ask.user_info_list)
  return user_info_list_;
}
inline ::DW_Location::user_identification_list* DW_userinfo_ask::release_user_info_list() {
  clear_has_user_info_list();
  ::DW_Location::user_identification_list* temp = user_info_list_;
  user_info_list_ = NULL;
  return temp;
}
inline void DW_userinfo_ask::set_allocated_user_info_list(::DW_Location::user_identification_list* user_info_list) {
  delete user_info_list_;
  user_info_list_ = user_info_list;
  if (user_info_list) {
    set_has_user_info_list();
  } else {
    clear_has_user_info_list();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ask.user_info_list)
}

// optional .common.user_basic_identification user_info = 6;
inline bool DW_userinfo_ask::has_user_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DW_userinfo_ask::set_has_user_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DW_userinfo_ask::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DW_userinfo_ask::clear_user_info() {
  if (user_info_ != NULL) user_info_->::common::user_basic_identification::Clear();
  clear_has_user_info();
}
inline const ::common::user_basic_identification& DW_userinfo_ask::user_info() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::common::user_basic_identification* DW_userinfo_ask::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::common::user_basic_identification;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ask.user_info)
  return user_info_;
}
inline ::common::user_basic_identification* DW_userinfo_ask::release_user_info() {
  clear_has_user_info();
  ::common::user_basic_identification* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void DW_userinfo_ask::set_allocated_user_info(::common::user_basic_identification* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ask.user_info)
}

// optional bytes user_id = 7;
inline bool DW_userinfo_ask::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DW_userinfo_ask::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DW_userinfo_ask::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DW_userinfo_ask::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& DW_userinfo_ask::user_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ask.user_id)
  return *user_id_;
}
inline void DW_userinfo_ask::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.DW_userinfo_ask.user_id)
}
inline void DW_userinfo_ask::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.DW_userinfo_ask.user_id)
}
inline void DW_userinfo_ask::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.DW_userinfo_ask.user_id)
}
inline ::std::string* DW_userinfo_ask::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ask.user_id)
  return user_id_;
}
inline ::std::string* DW_userinfo_ask::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DW_userinfo_ask::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ask.user_id)
}

// -------------------------------------------------------------------

// DW_userinfo_ans

// repeated .DW_Location.user_overdue_info user_overdue_infos = 1;
inline int DW_userinfo_ans::user_overdue_infos_size() const {
  return user_overdue_infos_.size();
}
inline void DW_userinfo_ans::clear_user_overdue_infos() {
  user_overdue_infos_.Clear();
}
inline const ::DW_Location::user_overdue_info& DW_userinfo_ans::user_overdue_infos(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ans.user_overdue_infos)
  return user_overdue_infos_.Get(index);
}
inline ::DW_Location::user_overdue_info* DW_userinfo_ans::mutable_user_overdue_infos(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ans.user_overdue_infos)
  return user_overdue_infos_.Mutable(index);
}
inline ::DW_Location::user_overdue_info* DW_userinfo_ans::add_user_overdue_infos() {
  // @@protoc_insertion_point(field_add:DW_Location.DW_userinfo_ans.user_overdue_infos)
  return user_overdue_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::user_overdue_info >&
DW_userinfo_ans::user_overdue_infos() const {
  // @@protoc_insertion_point(field_list:DW_Location.DW_userinfo_ans.user_overdue_infos)
  return user_overdue_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::user_overdue_info >*
DW_userinfo_ans::mutable_user_overdue_infos() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.DW_userinfo_ans.user_overdue_infos)
  return &user_overdue_infos_;
}

// optional .common.errorinfo result = 2;
inline bool DW_userinfo_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DW_userinfo_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DW_userinfo_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DW_userinfo_ans::clear_result() {
  if (result_ != NULL) result_->::common::errorinfo::Clear();
  clear_has_result();
}
inline const ::common::errorinfo& DW_userinfo_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_userinfo_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::errorinfo* DW_userinfo_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_userinfo_ans.result)
  return result_;
}
inline ::common::errorinfo* DW_userinfo_ans::release_result() {
  clear_has_result();
  ::common::errorinfo* temp = result_;
  result_ = NULL;
  return temp;
}
inline void DW_userinfo_ans::set_allocated_result(::common::errorinfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_userinfo_ans.result)
}

// -------------------------------------------------------------------

// DW_location_track_ans

// repeated .common.location_info loc_info = 1;
inline int DW_location_track_ans::loc_info_size() const {
  return loc_info_.size();
}
inline void DW_location_track_ans::clear_loc_info() {
  loc_info_.Clear();
}
inline const ::common::location_info& DW_location_track_ans::loc_info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_location_track_ans.loc_info)
  return loc_info_.Get(index);
}
inline ::common::location_info* DW_location_track_ans::mutable_loc_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_location_track_ans.loc_info)
  return loc_info_.Mutable(index);
}
inline ::common::location_info* DW_location_track_ans::add_loc_info() {
  // @@protoc_insertion_point(field_add:DW_Location.DW_location_track_ans.loc_info)
  return loc_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::location_info >&
DW_location_track_ans::loc_info() const {
  // @@protoc_insertion_point(field_list:DW_Location.DW_location_track_ans.loc_info)
  return loc_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::location_info >*
DW_location_track_ans::mutable_loc_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.DW_location_track_ans.loc_info)
  return &loc_info_;
}

// optional .common.errorinfo result = 2;
inline bool DW_location_track_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DW_location_track_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DW_location_track_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DW_location_track_ans::clear_result() {
  if (result_ != NULL) result_->::common::errorinfo::Clear();
  clear_has_result();
}
inline const ::common::errorinfo& DW_location_track_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_location_track_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::errorinfo* DW_location_track_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_location_track_ans.result)
  return result_;
}
inline ::common::errorinfo* DW_location_track_ans::release_result() {
  clear_has_result();
  ::common::errorinfo* temp = result_;
  result_ = NULL;
  return temp;
}
inline void DW_location_track_ans::set_allocated_result(::common::errorinfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_location_track_ans.result)
}

// -------------------------------------------------------------------

// DW_location_info_ans

// optional .common.user_info user_basic_info = 1;
inline bool DW_location_info_ans::has_user_basic_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DW_location_info_ans::set_has_user_basic_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DW_location_info_ans::clear_has_user_basic_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DW_location_info_ans::clear_user_basic_info() {
  if (user_basic_info_ != NULL) user_basic_info_->::common::user_info::Clear();
  clear_has_user_basic_info();
}
inline const ::common::user_info& DW_location_info_ans::user_basic_info() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_location_info_ans.user_basic_info)
  return user_basic_info_ != NULL ? *user_basic_info_ : *default_instance_->user_basic_info_;
}
inline ::common::user_info* DW_location_info_ans::mutable_user_basic_info() {
  set_has_user_basic_info();
  if (user_basic_info_ == NULL) user_basic_info_ = new ::common::user_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_location_info_ans.user_basic_info)
  return user_basic_info_;
}
inline ::common::user_info* DW_location_info_ans::release_user_basic_info() {
  clear_has_user_basic_info();
  ::common::user_info* temp = user_basic_info_;
  user_basic_info_ = NULL;
  return temp;
}
inline void DW_location_info_ans::set_allocated_user_basic_info(::common::user_info* user_basic_info) {
  delete user_basic_info_;
  user_basic_info_ = user_basic_info;
  if (user_basic_info) {
    set_has_user_basic_info();
  } else {
    clear_has_user_basic_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_location_info_ans.user_basic_info)
}

// optional .common.errorinfo result = 2;
inline bool DW_location_info_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DW_location_info_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DW_location_info_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DW_location_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::errorinfo::Clear();
  clear_has_result();
}
inline const ::common::errorinfo& DW_location_info_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_location_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::errorinfo* DW_location_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_location_info_ans.result)
  return result_;
}
inline ::common::errorinfo* DW_location_info_ans::release_result() {
  clear_has_result();
  ::common::errorinfo* temp = result_;
  result_ = NULL;
  return temp;
}
inline void DW_location_info_ans::set_allocated_result(::common::errorinfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_location_info_ans.result)
}

// -------------------------------------------------------------------

// DW_load_days_info_ans

// optional int32 loadDays = 1;
inline bool DW_load_days_info_ans::has_loaddays() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DW_load_days_info_ans::set_has_loaddays() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DW_load_days_info_ans::clear_has_loaddays() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DW_load_days_info_ans::clear_loaddays() {
  loaddays_ = 0;
  clear_has_loaddays();
}
inline ::google::protobuf::int32 DW_load_days_info_ans::loaddays() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_load_days_info_ans.loadDays)
  return loaddays_;
}
inline void DW_load_days_info_ans::set_loaddays(::google::protobuf::int32 value) {
  set_has_loaddays();
  loaddays_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.DW_load_days_info_ans.loadDays)
}

// optional .common.errorinfo error = 2;
inline bool DW_load_days_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DW_load_days_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DW_load_days_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DW_load_days_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& DW_load_days_info_ans::error() const {
  // @@protoc_insertion_point(field_get:DW_Location.DW_load_days_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* DW_load_days_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.DW_load_days_info_ans.error)
  return error_;
}
inline ::common::errorinfo* DW_load_days_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void DW_load_days_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.DW_load_days_info_ans.error)
}

// -------------------------------------------------------------------

// static_report_result

// optional .DW_Location.static_report_type static_type = 1;
inline bool static_report_result::has_static_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void static_report_result::set_has_static_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void static_report_result::clear_has_static_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void static_report_result::clear_static_type() {
  static_type_ = 0;
  clear_has_static_type();
}
inline ::DW_Location::static_report_type static_report_result::static_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.static_report_result.static_type)
  return static_cast< ::DW_Location::static_report_type >(static_type_);
}
inline void static_report_result::set_static_type(::DW_Location::static_report_type value) {
  assert(::DW_Location::static_report_type_IsValid(value));
  set_has_static_type();
  static_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.static_report_result.static_type)
}

// optional int32 static_number = 2;
inline bool static_report_result::has_static_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void static_report_result::set_has_static_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void static_report_result::clear_has_static_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void static_report_result::clear_static_number() {
  static_number_ = 0;
  clear_has_static_number();
}
inline ::google::protobuf::int32 static_report_result::static_number() const {
  // @@protoc_insertion_point(field_get:DW_Location.static_report_result.static_number)
  return static_number_;
}
inline void static_report_result::set_static_number(::google::protobuf::int32 value) {
  set_has_static_number();
  static_number_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.static_report_result.static_number)
}

// -------------------------------------------------------------------

// user_profiles_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_profiles_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_profiles_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_profiles_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_profiles_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_profiles_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_profiles_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_profiles_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_profiles_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_profiles_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_profiles_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_profiles_ask.ask_header)
}

// -------------------------------------------------------------------

// user_profiles_ans

// repeated .DW_Location.static_report_result static_result = 1;
inline int user_profiles_ans::static_result_size() const {
  return static_result_.size();
}
inline void user_profiles_ans::clear_static_result() {
  static_result_.Clear();
}
inline const ::DW_Location::static_report_result& user_profiles_ans::static_result(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.user_profiles_ans.static_result)
  return static_result_.Get(index);
}
inline ::DW_Location::static_report_result* user_profiles_ans::mutable_static_result(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.user_profiles_ans.static_result)
  return static_result_.Mutable(index);
}
inline ::DW_Location::static_report_result* user_profiles_ans::add_static_result() {
  // @@protoc_insertion_point(field_add:DW_Location.user_profiles_ans.static_result)
  return static_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::static_report_result >&
user_profiles_ans::static_result() const {
  // @@protoc_insertion_point(field_list:DW_Location.user_profiles_ans.static_result)
  return static_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::static_report_result >*
user_profiles_ans::mutable_static_result() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.user_profiles_ans.static_result)
  return &static_result_;
}

// optional .DW_Location.sex_proportion sex = 2;
inline bool user_profiles_ans::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_profiles_ans::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_profiles_ans::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_profiles_ans::clear_sex() {
  if (sex_ != NULL) sex_->::DW_Location::sex_proportion::Clear();
  clear_has_sex();
}
inline const ::DW_Location::sex_proportion& user_profiles_ans::sex() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_profiles_ans.sex)
  return sex_ != NULL ? *sex_ : *default_instance_->sex_;
}
inline ::DW_Location::sex_proportion* user_profiles_ans::mutable_sex() {
  set_has_sex();
  if (sex_ == NULL) sex_ = new ::DW_Location::sex_proportion;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_profiles_ans.sex)
  return sex_;
}
inline ::DW_Location::sex_proportion* user_profiles_ans::release_sex() {
  clear_has_sex();
  ::DW_Location::sex_proportion* temp = sex_;
  sex_ = NULL;
  return temp;
}
inline void user_profiles_ans::set_allocated_sex(::DW_Location::sex_proportion* sex) {
  delete sex_;
  sex_ = sex;
  if (sex) {
    set_has_sex();
  } else {
    clear_has_sex();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_profiles_ans.sex)
}

// optional .DW_Location.degree_proportion degree = 3;
inline bool user_profiles_ans::has_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_profiles_ans::set_has_degree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_profiles_ans::clear_has_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_profiles_ans::clear_degree() {
  if (degree_ != NULL) degree_->::DW_Location::degree_proportion::Clear();
  clear_has_degree();
}
inline const ::DW_Location::degree_proportion& user_profiles_ans::degree() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_profiles_ans.degree)
  return degree_ != NULL ? *degree_ : *default_instance_->degree_;
}
inline ::DW_Location::degree_proportion* user_profiles_ans::mutable_degree() {
  set_has_degree();
  if (degree_ == NULL) degree_ = new ::DW_Location::degree_proportion;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_profiles_ans.degree)
  return degree_;
}
inline ::DW_Location::degree_proportion* user_profiles_ans::release_degree() {
  clear_has_degree();
  ::DW_Location::degree_proportion* temp = degree_;
  degree_ = NULL;
  return temp;
}
inline void user_profiles_ans::set_allocated_degree(::DW_Location::degree_proportion* degree) {
  delete degree_;
  degree_ = degree;
  if (degree) {
    set_has_degree();
  } else {
    clear_has_degree();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_profiles_ans.degree)
}

// repeated .DW_Location.email_proportion emaillist = 4;
inline int user_profiles_ans::emaillist_size() const {
  return emaillist_.size();
}
inline void user_profiles_ans::clear_emaillist() {
  emaillist_.Clear();
}
inline const ::DW_Location::email_proportion& user_profiles_ans::emaillist(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.user_profiles_ans.emaillist)
  return emaillist_.Get(index);
}
inline ::DW_Location::email_proportion* user_profiles_ans::mutable_emaillist(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.user_profiles_ans.emaillist)
  return emaillist_.Mutable(index);
}
inline ::DW_Location::email_proportion* user_profiles_ans::add_emaillist() {
  // @@protoc_insertion_point(field_add:DW_Location.user_profiles_ans.emaillist)
  return emaillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::email_proportion >&
user_profiles_ans::emaillist() const {
  // @@protoc_insertion_point(field_list:DW_Location.user_profiles_ans.emaillist)
  return emaillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::email_proportion >*
user_profiles_ans::mutable_emaillist() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.user_profiles_ans.emaillist)
  return &emaillist_;
}

// optional .common.errorinfo error = 5;
inline bool user_profiles_ans::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_profiles_ans::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_profiles_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_profiles_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_profiles_ans::error() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_profiles_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_profiles_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_profiles_ans.error)
  return error_;
}
inline ::common::errorinfo* user_profiles_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_profiles_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_profiles_ans.error)
}

// -------------------------------------------------------------------

// user_basic_info_ask

// optional bytes json_request = 1;
inline bool user_basic_info_ask::has_json_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_basic_info_ask::set_has_json_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_basic_info_ask::clear_has_json_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_basic_info_ask::clear_json_request() {
  if (json_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_request_->clear();
  }
  clear_has_json_request();
}
inline const ::std::string& user_basic_info_ask::json_request() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_basic_info_ask.json_request)
  return *json_request_;
}
inline void user_basic_info_ask::set_json_request(const ::std::string& value) {
  set_has_json_request();
  if (json_request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_request_ = new ::std::string;
  }
  json_request_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.user_basic_info_ask.json_request)
}
inline void user_basic_info_ask::set_json_request(const char* value) {
  set_has_json_request();
  if (json_request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_request_ = new ::std::string;
  }
  json_request_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.user_basic_info_ask.json_request)
}
inline void user_basic_info_ask::set_json_request(const void* value, size_t size) {
  set_has_json_request();
  if (json_request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_request_ = new ::std::string;
  }
  json_request_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.user_basic_info_ask.json_request)
}
inline ::std::string* user_basic_info_ask::mutable_json_request() {
  set_has_json_request();
  if (json_request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_request_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.user_basic_info_ask.json_request)
  return json_request_;
}
inline ::std::string* user_basic_info_ask::release_json_request() {
  clear_has_json_request();
  if (json_request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_request_;
    json_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ask::set_allocated_json_request(::std::string* json_request) {
  if (json_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_request_;
  }
  if (json_request) {
    set_has_json_request();
    json_request_ = json_request;
  } else {
    clear_has_json_request();
    json_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_basic_info_ask.json_request)
}

// optional .common.common_ask_header ask_header = 2;
inline bool user_basic_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_basic_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_basic_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_basic_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_basic_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_basic_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_basic_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_basic_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_basic_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_basic_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_basic_info_ask.ask_header)
}

// -------------------------------------------------------------------

// user_basic_info_ans

// optional bytes json_response = 1;
inline bool user_basic_info_ans::has_json_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_basic_info_ans::set_has_json_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_basic_info_ans::clear_has_json_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_basic_info_ans::clear_json_response() {
  if (json_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_response_->clear();
  }
  clear_has_json_response();
}
inline const ::std::string& user_basic_info_ans::json_response() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_basic_info_ans.json_response)
  return *json_response_;
}
inline void user_basic_info_ans::set_json_response(const ::std::string& value) {
  set_has_json_response();
  if (json_response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_response_ = new ::std::string;
  }
  json_response_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.user_basic_info_ans.json_response)
}
inline void user_basic_info_ans::set_json_response(const char* value) {
  set_has_json_response();
  if (json_response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_response_ = new ::std::string;
  }
  json_response_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.user_basic_info_ans.json_response)
}
inline void user_basic_info_ans::set_json_response(const void* value, size_t size) {
  set_has_json_response();
  if (json_response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_response_ = new ::std::string;
  }
  json_response_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.user_basic_info_ans.json_response)
}
inline ::std::string* user_basic_info_ans::mutable_json_response() {
  set_has_json_response();
  if (json_response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_response_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.user_basic_info_ans.json_response)
  return json_response_;
}
inline ::std::string* user_basic_info_ans::release_json_response() {
  clear_has_json_response();
  if (json_response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_response_;
    json_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_json_response(::std::string* json_response) {
  if (json_response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_response_;
  }
  if (json_response) {
    set_has_json_response();
    json_response_ = json_response;
  } else {
    clear_has_json_response();
    json_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_basic_info_ans.json_response)
}

// optional .common.result_info result = 2;
inline bool user_basic_info_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_basic_info_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_basic_info_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_basic_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& user_basic_info_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.user_basic_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* user_basic_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.user_basic_info_ans.result)
  return result_;
}
inline ::common::result_info* user_basic_info_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void user_basic_info_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.user_basic_info_ans.result)
}

// -------------------------------------------------------------------

// wei_dan_bao_base_info

// required string wei_dan_bao_id = 1;
inline bool wei_dan_bao_base_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wei_dan_bao_base_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wei_dan_bao_base_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wei_dan_bao_base_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& wei_dan_bao_base_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void wei_dan_bao_base_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_base_info.wei_dan_bao_id)
}
inline void wei_dan_bao_base_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_base_info.wei_dan_bao_id)
}
inline void wei_dan_bao_base_info::set_wei_dan_bao_id(const char* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_base_info.wei_dan_bao_id)
}
inline ::std::string* wei_dan_bao_base_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* wei_dan_bao_base_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wei_dan_bao_base_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_base_info.wei_dan_bao_id)
}

// required string corporation_name = 2;
inline bool wei_dan_bao_base_info::has_corporation_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wei_dan_bao_base_info::set_has_corporation_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wei_dan_bao_base_info::clear_has_corporation_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wei_dan_bao_base_info::clear_corporation_name() {
  if (corporation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    corporation_name_->clear();
  }
  clear_has_corporation_name();
}
inline const ::std::string& wei_dan_bao_base_info::corporation_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info.corporation_name)
  return *corporation_name_;
}
inline void wei_dan_bao_base_info::set_corporation_name(const ::std::string& value) {
  set_has_corporation_name();
  if (corporation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    corporation_name_ = new ::std::string;
  }
  corporation_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_base_info.corporation_name)
}
inline void wei_dan_bao_base_info::set_corporation_name(const char* value) {
  set_has_corporation_name();
  if (corporation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    corporation_name_ = new ::std::string;
  }
  corporation_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_base_info.corporation_name)
}
inline void wei_dan_bao_base_info::set_corporation_name(const char* value, size_t size) {
  set_has_corporation_name();
  if (corporation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    corporation_name_ = new ::std::string;
  }
  corporation_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_base_info.corporation_name)
}
inline ::std::string* wei_dan_bao_base_info::mutable_corporation_name() {
  set_has_corporation_name();
  if (corporation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    corporation_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info.corporation_name)
  return corporation_name_;
}
inline ::std::string* wei_dan_bao_base_info::release_corporation_name() {
  clear_has_corporation_name();
  if (corporation_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = corporation_name_;
    corporation_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wei_dan_bao_base_info::set_allocated_corporation_name(::std::string* corporation_name) {
  if (corporation_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete corporation_name_;
  }
  if (corporation_name) {
    set_has_corporation_name();
    corporation_name_ = corporation_name;
  } else {
    clear_has_corporation_name();
    corporation_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_base_info.corporation_name)
}

// required string create_user_id = 3;
inline bool wei_dan_bao_base_info::has_create_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wei_dan_bao_base_info::set_has_create_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wei_dan_bao_base_info::clear_has_create_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wei_dan_bao_base_info::clear_create_user_id() {
  if (create_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_user_id_->clear();
  }
  clear_has_create_user_id();
}
inline const ::std::string& wei_dan_bao_base_info::create_user_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info.create_user_id)
  return *create_user_id_;
}
inline void wei_dan_bao_base_info::set_create_user_id(const ::std::string& value) {
  set_has_create_user_id();
  if (create_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_user_id_ = new ::std::string;
  }
  create_user_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_base_info.create_user_id)
}
inline void wei_dan_bao_base_info::set_create_user_id(const char* value) {
  set_has_create_user_id();
  if (create_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_user_id_ = new ::std::string;
  }
  create_user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_base_info.create_user_id)
}
inline void wei_dan_bao_base_info::set_create_user_id(const char* value, size_t size) {
  set_has_create_user_id();
  if (create_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_user_id_ = new ::std::string;
  }
  create_user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_base_info.create_user_id)
}
inline ::std::string* wei_dan_bao_base_info::mutable_create_user_id() {
  set_has_create_user_id();
  if (create_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info.create_user_id)
  return create_user_id_;
}
inline ::std::string* wei_dan_bao_base_info::release_create_user_id() {
  clear_has_create_user_id();
  if (create_user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = create_user_id_;
    create_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wei_dan_bao_base_info::set_allocated_create_user_id(::std::string* create_user_id) {
  if (create_user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_user_id_;
  }
  if (create_user_id) {
    set_has_create_user_id();
    create_user_id_ = create_user_id;
  } else {
    clear_has_create_user_id();
    create_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_base_info.create_user_id)
}

// required string audit_pass_time = 4;
inline bool wei_dan_bao_base_info::has_audit_pass_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wei_dan_bao_base_info::set_has_audit_pass_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wei_dan_bao_base_info::clear_has_audit_pass_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wei_dan_bao_base_info::clear_audit_pass_time() {
  if (audit_pass_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audit_pass_time_->clear();
  }
  clear_has_audit_pass_time();
}
inline const ::std::string& wei_dan_bao_base_info::audit_pass_time() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info.audit_pass_time)
  return *audit_pass_time_;
}
inline void wei_dan_bao_base_info::set_audit_pass_time(const ::std::string& value) {
  set_has_audit_pass_time();
  if (audit_pass_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audit_pass_time_ = new ::std::string;
  }
  audit_pass_time_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_base_info.audit_pass_time)
}
inline void wei_dan_bao_base_info::set_audit_pass_time(const char* value) {
  set_has_audit_pass_time();
  if (audit_pass_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audit_pass_time_ = new ::std::string;
  }
  audit_pass_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_base_info.audit_pass_time)
}
inline void wei_dan_bao_base_info::set_audit_pass_time(const char* value, size_t size) {
  set_has_audit_pass_time();
  if (audit_pass_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audit_pass_time_ = new ::std::string;
  }
  audit_pass_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_base_info.audit_pass_time)
}
inline ::std::string* wei_dan_bao_base_info::mutable_audit_pass_time() {
  set_has_audit_pass_time();
  if (audit_pass_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audit_pass_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info.audit_pass_time)
  return audit_pass_time_;
}
inline ::std::string* wei_dan_bao_base_info::release_audit_pass_time() {
  clear_has_audit_pass_time();
  if (audit_pass_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = audit_pass_time_;
    audit_pass_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wei_dan_bao_base_info::set_allocated_audit_pass_time(::std::string* audit_pass_time) {
  if (audit_pass_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audit_pass_time_;
  }
  if (audit_pass_time) {
    set_has_audit_pass_time();
    audit_pass_time_ = audit_pass_time;
  } else {
    clear_has_audit_pass_time();
    audit_pass_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_base_info.audit_pass_time)
}

// required double guarantee_stacking_line = 5;
inline bool wei_dan_bao_base_info::has_guarantee_stacking_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wei_dan_bao_base_info::set_has_guarantee_stacking_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wei_dan_bao_base_info::clear_has_guarantee_stacking_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wei_dan_bao_base_info::clear_guarantee_stacking_line() {
  guarantee_stacking_line_ = 0;
  clear_has_guarantee_stacking_line();
}
inline double wei_dan_bao_base_info::guarantee_stacking_line() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info.guarantee_stacking_line)
  return guarantee_stacking_line_;
}
inline void wei_dan_bao_base_info::set_guarantee_stacking_line(double value) {
  set_has_guarantee_stacking_line();
  guarantee_stacking_line_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_base_info.guarantee_stacking_line)
}

// required double guarantee_used = 6;
inline bool wei_dan_bao_base_info::has_guarantee_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wei_dan_bao_base_info::set_has_guarantee_used() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wei_dan_bao_base_info::clear_has_guarantee_used() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wei_dan_bao_base_info::clear_guarantee_used() {
  guarantee_used_ = 0;
  clear_has_guarantee_used();
}
inline double wei_dan_bao_base_info::guarantee_used() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info.guarantee_used)
  return guarantee_used_;
}
inline void wei_dan_bao_base_info::set_guarantee_used(double value) {
  set_has_guarantee_used();
  guarantee_used_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_base_info.guarantee_used)
}

// -------------------------------------------------------------------

// wei_dan_bao_base_info_ask

// optional .common.common_ask_header ask_header = 1;
inline bool wei_dan_bao_base_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wei_dan_bao_base_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wei_dan_bao_base_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wei_dan_bao_base_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& wei_dan_bao_base_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* wei_dan_bao_base_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* wei_dan_bao_base_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void wei_dan_bao_base_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_base_info_ask.ask_header)
}

// -------------------------------------------------------------------

// wei_dan_bao_base_info_ans

// required .common.result_info result = 1;
inline bool wei_dan_bao_base_info_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wei_dan_bao_base_info_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wei_dan_bao_base_info_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wei_dan_bao_base_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& wei_dan_bao_base_info_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* wei_dan_bao_base_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info_ans.result)
  return result_;
}
inline ::common::result_info* wei_dan_bao_base_info_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void wei_dan_bao_base_info_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_base_info_ans.result)
}

// repeated .DW_Location.wei_dan_bao_base_info all_info = 2;
inline int wei_dan_bao_base_info_ans::all_info_size() const {
  return all_info_.size();
}
inline void wei_dan_bao_base_info_ans::clear_all_info() {
  all_info_.Clear();
}
inline const ::DW_Location::wei_dan_bao_base_info& wei_dan_bao_base_info_ans::all_info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_base_info_ans.all_info)
  return all_info_.Get(index);
}
inline ::DW_Location::wei_dan_bao_base_info* wei_dan_bao_base_info_ans::mutable_all_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_base_info_ans.all_info)
  return all_info_.Mutable(index);
}
inline ::DW_Location::wei_dan_bao_base_info* wei_dan_bao_base_info_ans::add_all_info() {
  // @@protoc_insertion_point(field_add:DW_Location.wei_dan_bao_base_info_ans.all_info)
  return all_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_base_info >&
wei_dan_bao_base_info_ans::all_info() const {
  // @@protoc_insertion_point(field_list:DW_Location.wei_dan_bao_base_info_ans.all_info)
  return all_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_base_info >*
wei_dan_bao_base_info_ans::mutable_all_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.wei_dan_bao_base_info_ans.all_info)
  return &all_info_;
}

// -------------------------------------------------------------------

// wei_dan_bao_success_info

// optional int32 success_count = 1;
inline bool wei_dan_bao_success_info::has_success_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wei_dan_bao_success_info::set_has_success_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wei_dan_bao_success_info::clear_has_success_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wei_dan_bao_success_info::clear_success_count() {
  success_count_ = 0;
  clear_has_success_count();
}
inline ::google::protobuf::int32 wei_dan_bao_success_info::success_count() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_success_info.success_count)
  return success_count_;
}
inline void wei_dan_bao_success_info::set_success_count(::google::protobuf::int32 value) {
  set_has_success_count();
  success_count_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_success_info.success_count)
}

// optional string wei_dan_bao_id = 2;
inline bool wei_dan_bao_success_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wei_dan_bao_success_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wei_dan_bao_success_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wei_dan_bao_success_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& wei_dan_bao_success_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_success_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void wei_dan_bao_success_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_success_info.wei_dan_bao_id)
}
inline void wei_dan_bao_success_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_success_info.wei_dan_bao_id)
}
inline void wei_dan_bao_success_info::set_wei_dan_bao_id(const char* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_success_info.wei_dan_bao_id)
}
inline ::std::string* wei_dan_bao_success_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_success_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* wei_dan_bao_success_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wei_dan_bao_success_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_success_info.wei_dan_bao_id)
}

// optional string wei_dan_bao_city_name = 3;
inline bool wei_dan_bao_success_info::has_wei_dan_bao_city_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wei_dan_bao_success_info::set_has_wei_dan_bao_city_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wei_dan_bao_success_info::clear_has_wei_dan_bao_city_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wei_dan_bao_success_info::clear_wei_dan_bao_city_name() {
  if (wei_dan_bao_city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_city_name_->clear();
  }
  clear_has_wei_dan_bao_city_name();
}
inline const ::std::string& wei_dan_bao_success_info::wei_dan_bao_city_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_success_info.wei_dan_bao_city_name)
  return *wei_dan_bao_city_name_;
}
inline void wei_dan_bao_success_info::set_wei_dan_bao_city_name(const ::std::string& value) {
  set_has_wei_dan_bao_city_name();
  if (wei_dan_bao_city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_city_name_ = new ::std::string;
  }
  wei_dan_bao_city_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_success_info.wei_dan_bao_city_name)
}
inline void wei_dan_bao_success_info::set_wei_dan_bao_city_name(const char* value) {
  set_has_wei_dan_bao_city_name();
  if (wei_dan_bao_city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_city_name_ = new ::std::string;
  }
  wei_dan_bao_city_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_success_info.wei_dan_bao_city_name)
}
inline void wei_dan_bao_success_info::set_wei_dan_bao_city_name(const char* value, size_t size) {
  set_has_wei_dan_bao_city_name();
  if (wei_dan_bao_city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_city_name_ = new ::std::string;
  }
  wei_dan_bao_city_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_success_info.wei_dan_bao_city_name)
}
inline ::std::string* wei_dan_bao_success_info::mutable_wei_dan_bao_city_name() {
  set_has_wei_dan_bao_city_name();
  if (wei_dan_bao_city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_city_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_success_info.wei_dan_bao_city_name)
  return wei_dan_bao_city_name_;
}
inline ::std::string* wei_dan_bao_success_info::release_wei_dan_bao_city_name() {
  clear_has_wei_dan_bao_city_name();
  if (wei_dan_bao_city_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_city_name_;
    wei_dan_bao_city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void wei_dan_bao_success_info::set_allocated_wei_dan_bao_city_name(::std::string* wei_dan_bao_city_name) {
  if (wei_dan_bao_city_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_city_name_;
  }
  if (wei_dan_bao_city_name) {
    set_has_wei_dan_bao_city_name();
    wei_dan_bao_city_name_ = wei_dan_bao_city_name;
  } else {
    clear_has_wei_dan_bao_city_name();
    wei_dan_bao_city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_success_info.wei_dan_bao_city_name)
}

// -------------------------------------------------------------------

// wei_dan_bao_all_success_info_ask

// optional .common.common_ask_header ask_header = 1;
inline bool wei_dan_bao_all_success_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wei_dan_bao_all_success_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wei_dan_bao_all_success_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wei_dan_bao_all_success_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& wei_dan_bao_all_success_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_all_success_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* wei_dan_bao_all_success_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_all_success_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* wei_dan_bao_all_success_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void wei_dan_bao_all_success_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_all_success_info_ask.ask_header)
}

// optional .DW_Location.avg_suc_type request_type = 2;
inline bool wei_dan_bao_all_success_info_ask::has_request_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wei_dan_bao_all_success_info_ask::set_has_request_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wei_dan_bao_all_success_info_ask::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wei_dan_bao_all_success_info_ask::clear_request_type() {
  request_type_ = 1;
  clear_has_request_type();
}
inline ::DW_Location::avg_suc_type wei_dan_bao_all_success_info_ask::request_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_all_success_info_ask.request_type)
  return static_cast< ::DW_Location::avg_suc_type >(request_type_);
}
inline void wei_dan_bao_all_success_info_ask::set_request_type(::DW_Location::avg_suc_type value) {
  assert(::DW_Location::avg_suc_type_IsValid(value));
  set_has_request_type();
  request_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_all_success_info_ask.request_type)
}

// repeated string all_wei_dan_bao_id = 3;
inline int wei_dan_bao_all_success_info_ask::all_wei_dan_bao_id_size() const {
  return all_wei_dan_bao_id_.size();
}
inline void wei_dan_bao_all_success_info_ask::clear_all_wei_dan_bao_id() {
  all_wei_dan_bao_id_.Clear();
}
inline const ::std::string& wei_dan_bao_all_success_info_ask::all_wei_dan_bao_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
  return all_wei_dan_bao_id_.Get(index);
}
inline ::std::string* wei_dan_bao_all_success_info_ask::mutable_all_wei_dan_bao_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
  return all_wei_dan_bao_id_.Mutable(index);
}
inline void wei_dan_bao_all_success_info_ask::set_all_wei_dan_bao_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
  all_wei_dan_bao_id_.Mutable(index)->assign(value);
}
inline void wei_dan_bao_all_success_info_ask::set_all_wei_dan_bao_id(int index, const char* value) {
  all_wei_dan_bao_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
}
inline void wei_dan_bao_all_success_info_ask::set_all_wei_dan_bao_id(int index, const char* value, size_t size) {
  all_wei_dan_bao_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
}
inline ::std::string* wei_dan_bao_all_success_info_ask::add_all_wei_dan_bao_id() {
  return all_wei_dan_bao_id_.Add();
}
inline void wei_dan_bao_all_success_info_ask::add_all_wei_dan_bao_id(const ::std::string& value) {
  all_wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
}
inline void wei_dan_bao_all_success_info_ask::add_all_wei_dan_bao_id(const char* value) {
  all_wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
}
inline void wei_dan_bao_all_success_info_ask::add_all_wei_dan_bao_id(const char* value, size_t size) {
  all_wei_dan_bao_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wei_dan_bao_all_success_info_ask::all_wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
  return all_wei_dan_bao_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wei_dan_bao_all_success_info_ask::mutable_all_wei_dan_bao_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.wei_dan_bao_all_success_info_ask.all_wei_dan_bao_id)
  return &all_wei_dan_bao_id_;
}

// optional int32 days_before = 4;
inline bool wei_dan_bao_all_success_info_ask::has_days_before() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wei_dan_bao_all_success_info_ask::set_has_days_before() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wei_dan_bao_all_success_info_ask::clear_has_days_before() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wei_dan_bao_all_success_info_ask::clear_days_before() {
  days_before_ = 0;
  clear_has_days_before();
}
inline ::google::protobuf::int32 wei_dan_bao_all_success_info_ask::days_before() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_all_success_info_ask.days_before)
  return days_before_;
}
inline void wei_dan_bao_all_success_info_ask::set_days_before(::google::protobuf::int32 value) {
  set_has_days_before();
  days_before_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.wei_dan_bao_all_success_info_ask.days_before)
}

// -------------------------------------------------------------------

// wei_dan_bao_all_success_info_ans

// optional .common.result_info result = 1;
inline bool wei_dan_bao_all_success_info_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wei_dan_bao_all_success_info_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wei_dan_bao_all_success_info_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wei_dan_bao_all_success_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& wei_dan_bao_all_success_info_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_all_success_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* wei_dan_bao_all_success_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_all_success_info_ans.result)
  return result_;
}
inline ::common::result_info* wei_dan_bao_all_success_info_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void wei_dan_bao_all_success_info_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.wei_dan_bao_all_success_info_ans.result)
}

// repeated .DW_Location.wei_dan_bao_success_info info = 2;
inline int wei_dan_bao_all_success_info_ans::info_size() const {
  return info_.size();
}
inline void wei_dan_bao_all_success_info_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::wei_dan_bao_success_info& wei_dan_bao_all_success_info_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.wei_dan_bao_all_success_info_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::wei_dan_bao_success_info* wei_dan_bao_all_success_info_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.wei_dan_bao_all_success_info_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::wei_dan_bao_success_info* wei_dan_bao_all_success_info_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.wei_dan_bao_all_success_info_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_success_info >&
wei_dan_bao_all_success_info_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.wei_dan_bao_all_success_info_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::wei_dan_bao_success_info >*
wei_dan_bao_all_success_info_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.wei_dan_bao_all_success_info_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// guarantee_amount_use_score_info

// optional bytes wei_dan_bao_id = 1;
inline bool guarantee_amount_use_score_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void guarantee_amount_use_score_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void guarantee_amount_use_score_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void guarantee_amount_use_score_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& guarantee_amount_use_score_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void guarantee_amount_use_score_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.guarantee_amount_use_score_info.wei_dan_bao_id)
}
inline void guarantee_amount_use_score_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.guarantee_amount_use_score_info.wei_dan_bao_id)
}
inline void guarantee_amount_use_score_info::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.guarantee_amount_use_score_info.wei_dan_bao_id)
}
inline ::std::string* guarantee_amount_use_score_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* guarantee_amount_use_score_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void guarantee_amount_use_score_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.guarantee_amount_use_score_info.wei_dan_bao_id)
}

// optional bytes cur_already_use_guarantee_amount = 2;
inline bool guarantee_amount_use_score_info::has_cur_already_use_guarantee_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void guarantee_amount_use_score_info::set_has_cur_already_use_guarantee_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void guarantee_amount_use_score_info::clear_has_cur_already_use_guarantee_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void guarantee_amount_use_score_info::clear_cur_already_use_guarantee_amount() {
  if (cur_already_use_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_already_use_guarantee_amount_->clear();
  }
  clear_has_cur_already_use_guarantee_amount();
}
inline const ::std::string& guarantee_amount_use_score_info::cur_already_use_guarantee_amount() const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_info.cur_already_use_guarantee_amount)
  return *cur_already_use_guarantee_amount_;
}
inline void guarantee_amount_use_score_info::set_cur_already_use_guarantee_amount(const ::std::string& value) {
  set_has_cur_already_use_guarantee_amount();
  if (cur_already_use_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_already_use_guarantee_amount_ = new ::std::string;
  }
  cur_already_use_guarantee_amount_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.guarantee_amount_use_score_info.cur_already_use_guarantee_amount)
}
inline void guarantee_amount_use_score_info::set_cur_already_use_guarantee_amount(const char* value) {
  set_has_cur_already_use_guarantee_amount();
  if (cur_already_use_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_already_use_guarantee_amount_ = new ::std::string;
  }
  cur_already_use_guarantee_amount_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.guarantee_amount_use_score_info.cur_already_use_guarantee_amount)
}
inline void guarantee_amount_use_score_info::set_cur_already_use_guarantee_amount(const void* value, size_t size) {
  set_has_cur_already_use_guarantee_amount();
  if (cur_already_use_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_already_use_guarantee_amount_ = new ::std::string;
  }
  cur_already_use_guarantee_amount_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.guarantee_amount_use_score_info.cur_already_use_guarantee_amount)
}
inline ::std::string* guarantee_amount_use_score_info::mutable_cur_already_use_guarantee_amount() {
  set_has_cur_already_use_guarantee_amount();
  if (cur_already_use_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_already_use_guarantee_amount_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_info.cur_already_use_guarantee_amount)
  return cur_already_use_guarantee_amount_;
}
inline ::std::string* guarantee_amount_use_score_info::release_cur_already_use_guarantee_amount() {
  clear_has_cur_already_use_guarantee_amount();
  if (cur_already_use_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cur_already_use_guarantee_amount_;
    cur_already_use_guarantee_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void guarantee_amount_use_score_info::set_allocated_cur_already_use_guarantee_amount(::std::string* cur_already_use_guarantee_amount) {
  if (cur_already_use_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_already_use_guarantee_amount_;
  }
  if (cur_already_use_guarantee_amount) {
    set_has_cur_already_use_guarantee_amount();
    cur_already_use_guarantee_amount_ = cur_already_use_guarantee_amount;
  } else {
    clear_has_cur_already_use_guarantee_amount();
    cur_already_use_guarantee_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.guarantee_amount_use_score_info.cur_already_use_guarantee_amount)
}

// optional bytes cur_guarantee_amount = 3;
inline bool guarantee_amount_use_score_info::has_cur_guarantee_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void guarantee_amount_use_score_info::set_has_cur_guarantee_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void guarantee_amount_use_score_info::clear_has_cur_guarantee_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void guarantee_amount_use_score_info::clear_cur_guarantee_amount() {
  if (cur_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_guarantee_amount_->clear();
  }
  clear_has_cur_guarantee_amount();
}
inline const ::std::string& guarantee_amount_use_score_info::cur_guarantee_amount() const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_info.cur_guarantee_amount)
  return *cur_guarantee_amount_;
}
inline void guarantee_amount_use_score_info::set_cur_guarantee_amount(const ::std::string& value) {
  set_has_cur_guarantee_amount();
  if (cur_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_guarantee_amount_ = new ::std::string;
  }
  cur_guarantee_amount_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.guarantee_amount_use_score_info.cur_guarantee_amount)
}
inline void guarantee_amount_use_score_info::set_cur_guarantee_amount(const char* value) {
  set_has_cur_guarantee_amount();
  if (cur_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_guarantee_amount_ = new ::std::string;
  }
  cur_guarantee_amount_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.guarantee_amount_use_score_info.cur_guarantee_amount)
}
inline void guarantee_amount_use_score_info::set_cur_guarantee_amount(const void* value, size_t size) {
  set_has_cur_guarantee_amount();
  if (cur_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_guarantee_amount_ = new ::std::string;
  }
  cur_guarantee_amount_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.guarantee_amount_use_score_info.cur_guarantee_amount)
}
inline ::std::string* guarantee_amount_use_score_info::mutable_cur_guarantee_amount() {
  set_has_cur_guarantee_amount();
  if (cur_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cur_guarantee_amount_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_info.cur_guarantee_amount)
  return cur_guarantee_amount_;
}
inline ::std::string* guarantee_amount_use_score_info::release_cur_guarantee_amount() {
  clear_has_cur_guarantee_amount();
  if (cur_guarantee_amount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cur_guarantee_amount_;
    cur_guarantee_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void guarantee_amount_use_score_info::set_allocated_cur_guarantee_amount(::std::string* cur_guarantee_amount) {
  if (cur_guarantee_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cur_guarantee_amount_;
  }
  if (cur_guarantee_amount) {
    set_has_cur_guarantee_amount();
    cur_guarantee_amount_ = cur_guarantee_amount;
  } else {
    clear_has_cur_guarantee_amount();
    cur_guarantee_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.guarantee_amount_use_score_info.cur_guarantee_amount)
}

// -------------------------------------------------------------------

// avg_diligence_guarantee_score_info

// optional float dan_bao_amount = 1;
inline bool avg_diligence_guarantee_score_info::has_dan_bao_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void avg_diligence_guarantee_score_info::set_has_dan_bao_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void avg_diligence_guarantee_score_info::clear_has_dan_bao_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void avg_diligence_guarantee_score_info::clear_dan_bao_amount() {
  dan_bao_amount_ = 0;
  clear_has_dan_bao_amount();
}
inline float avg_diligence_guarantee_score_info::dan_bao_amount() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_info.dan_bao_amount)
  return dan_bao_amount_;
}
inline void avg_diligence_guarantee_score_info::set_dan_bao_amount(float value) {
  set_has_dan_bao_amount();
  dan_bao_amount_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.avg_diligence_guarantee_score_info.dan_bao_amount)
}

// optional float bid_loan_amount = 2;
inline bool avg_diligence_guarantee_score_info::has_bid_loan_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void avg_diligence_guarantee_score_info::set_has_bid_loan_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void avg_diligence_guarantee_score_info::clear_has_bid_loan_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void avg_diligence_guarantee_score_info::clear_bid_loan_amount() {
  bid_loan_amount_ = 0;
  clear_has_bid_loan_amount();
}
inline float avg_diligence_guarantee_score_info::bid_loan_amount() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_info.bid_loan_amount)
  return bid_loan_amount_;
}
inline void avg_diligence_guarantee_score_info::set_bid_loan_amount(float value) {
  set_has_bid_loan_amount();
  bid_loan_amount_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.avg_diligence_guarantee_score_info.bid_loan_amount)
}

// -------------------------------------------------------------------

// avg_diligence_guarantee_score_ask

// optional .common.common_ask_header ask_header = 1;
inline bool avg_diligence_guarantee_score_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void avg_diligence_guarantee_score_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void avg_diligence_guarantee_score_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void avg_diligence_guarantee_score_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& avg_diligence_guarantee_score_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* avg_diligence_guarantee_score_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.avg_diligence_guarantee_score_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* avg_diligence_guarantee_score_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void avg_diligence_guarantee_score_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.avg_diligence_guarantee_score_ask.ask_header)
}

// optional bytes wei_dan_bao_id = 2;
inline bool avg_diligence_guarantee_score_ask::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void avg_diligence_guarantee_score_ask::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void avg_diligence_guarantee_score_ask::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void avg_diligence_guarantee_score_ask::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& avg_diligence_guarantee_score_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_ask.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void avg_diligence_guarantee_score_ask::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.avg_diligence_guarantee_score_ask.wei_dan_bao_id)
}
inline void avg_diligence_guarantee_score_ask::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.avg_diligence_guarantee_score_ask.wei_dan_bao_id)
}
inline void avg_diligence_guarantee_score_ask::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.avg_diligence_guarantee_score_ask.wei_dan_bao_id)
}
inline ::std::string* avg_diligence_guarantee_score_ask::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.avg_diligence_guarantee_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* avg_diligence_guarantee_score_ask::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void avg_diligence_guarantee_score_ask::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.avg_diligence_guarantee_score_ask.wei_dan_bao_id)
}

// optional int32 days_before = 3;
inline bool avg_diligence_guarantee_score_ask::has_days_before() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void avg_diligence_guarantee_score_ask::set_has_days_before() {
  _has_bits_[0] |= 0x00000004u;
}
inline void avg_diligence_guarantee_score_ask::clear_has_days_before() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void avg_diligence_guarantee_score_ask::clear_days_before() {
  days_before_ = 0;
  clear_has_days_before();
}
inline ::google::protobuf::int32 avg_diligence_guarantee_score_ask::days_before() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_ask.days_before)
  return days_before_;
}
inline void avg_diligence_guarantee_score_ask::set_days_before(::google::protobuf::int32 value) {
  set_has_days_before();
  days_before_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.avg_diligence_guarantee_score_ask.days_before)
}

// -------------------------------------------------------------------

// avg_diligence_guarantee_score_ans

// optional .common.result_info result = 1;
inline bool avg_diligence_guarantee_score_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void avg_diligence_guarantee_score_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void avg_diligence_guarantee_score_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void avg_diligence_guarantee_score_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& avg_diligence_guarantee_score_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* avg_diligence_guarantee_score_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.avg_diligence_guarantee_score_ans.result)
  return result_;
}
inline ::common::result_info* avg_diligence_guarantee_score_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void avg_diligence_guarantee_score_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.avg_diligence_guarantee_score_ans.result)
}

// optional bytes wei_dan_bao_id = 2;
inline bool avg_diligence_guarantee_score_ans::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void avg_diligence_guarantee_score_ans::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void avg_diligence_guarantee_score_ans::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void avg_diligence_guarantee_score_ans::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& avg_diligence_guarantee_score_ans::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_ans.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void avg_diligence_guarantee_score_ans::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.avg_diligence_guarantee_score_ans.wei_dan_bao_id)
}
inline void avg_diligence_guarantee_score_ans::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.avg_diligence_guarantee_score_ans.wei_dan_bao_id)
}
inline void avg_diligence_guarantee_score_ans::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.avg_diligence_guarantee_score_ans.wei_dan_bao_id)
}
inline ::std::string* avg_diligence_guarantee_score_ans::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.avg_diligence_guarantee_score_ans.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* avg_diligence_guarantee_score_ans::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void avg_diligence_guarantee_score_ans::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.avg_diligence_guarantee_score_ans.wei_dan_bao_id)
}

// repeated .DW_Location.avg_diligence_guarantee_score_info info = 3;
inline int avg_diligence_guarantee_score_ans::info_size() const {
  return info_.size();
}
inline void avg_diligence_guarantee_score_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::avg_diligence_guarantee_score_info& avg_diligence_guarantee_score_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.avg_diligence_guarantee_score_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::avg_diligence_guarantee_score_info* avg_diligence_guarantee_score_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.avg_diligence_guarantee_score_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::avg_diligence_guarantee_score_info* avg_diligence_guarantee_score_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.avg_diligence_guarantee_score_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::avg_diligence_guarantee_score_info >&
avg_diligence_guarantee_score_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.avg_diligence_guarantee_score_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::avg_diligence_guarantee_score_info >*
avg_diligence_guarantee_score_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.avg_diligence_guarantee_score_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// guarantee_amount_use_score_ask

// optional .common.common_ask_header ask_header = 1;
inline bool guarantee_amount_use_score_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void guarantee_amount_use_score_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void guarantee_amount_use_score_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void guarantee_amount_use_score_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& guarantee_amount_use_score_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* guarantee_amount_use_score_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* guarantee_amount_use_score_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void guarantee_amount_use_score_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.guarantee_amount_use_score_ask.ask_header)
}

// repeated bytes wei_dan_bao_id = 2;
inline int guarantee_amount_use_score_ask::wei_dan_bao_id_size() const {
  return wei_dan_bao_id_.size();
}
inline void guarantee_amount_use_score_ask::clear_wei_dan_bao_id() {
  wei_dan_bao_id_.Clear();
}
inline const ::std::string& guarantee_amount_use_score_ask::wei_dan_bao_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Get(index);
}
inline ::std::string* guarantee_amount_use_score_ask::mutable_wei_dan_bao_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Mutable(index);
}
inline void guarantee_amount_use_score_ask::set_wei_dan_bao_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
  wei_dan_bao_id_.Mutable(index)->assign(value);
}
inline void guarantee_amount_use_score_ask::set_wei_dan_bao_id(int index, const char* value) {
  wei_dan_bao_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
}
inline void guarantee_amount_use_score_ask::set_wei_dan_bao_id(int index, const void* value, size_t size) {
  wei_dan_bao_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
}
inline ::std::string* guarantee_amount_use_score_ask::add_wei_dan_bao_id() {
  return wei_dan_bao_id_.Add();
}
inline void guarantee_amount_use_score_ask::add_wei_dan_bao_id(const ::std::string& value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
}
inline void guarantee_amount_use_score_ask::add_wei_dan_bao_id(const char* value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
}
inline void guarantee_amount_use_score_ask::add_wei_dan_bao_id(const void* value, size_t size) {
  wei_dan_bao_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
guarantee_amount_use_score_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
guarantee_amount_use_score_ask::mutable_wei_dan_bao_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.guarantee_amount_use_score_ask.wei_dan_bao_id)
  return &wei_dan_bao_id_;
}

// optional int32 days_before = 3;
inline bool guarantee_amount_use_score_ask::has_days_before() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void guarantee_amount_use_score_ask::set_has_days_before() {
  _has_bits_[0] |= 0x00000004u;
}
inline void guarantee_amount_use_score_ask::clear_has_days_before() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void guarantee_amount_use_score_ask::clear_days_before() {
  days_before_ = 0;
  clear_has_days_before();
}
inline ::google::protobuf::int32 guarantee_amount_use_score_ask::days_before() const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_ask.days_before)
  return days_before_;
}
inline void guarantee_amount_use_score_ask::set_days_before(::google::protobuf::int32 value) {
  set_has_days_before();
  days_before_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.guarantee_amount_use_score_ask.days_before)
}

// -------------------------------------------------------------------

// guarantee_amount_use_score_ans

// optional .common.result_info result = 1;
inline bool guarantee_amount_use_score_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void guarantee_amount_use_score_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void guarantee_amount_use_score_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void guarantee_amount_use_score_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& guarantee_amount_use_score_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* guarantee_amount_use_score_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_ans.result)
  return result_;
}
inline ::common::result_info* guarantee_amount_use_score_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void guarantee_amount_use_score_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.guarantee_amount_use_score_ans.result)
}

// repeated .DW_Location.guarantee_amount_use_score_info info = 2;
inline int guarantee_amount_use_score_ans::info_size() const {
  return info_.size();
}
inline void guarantee_amount_use_score_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::guarantee_amount_use_score_info& guarantee_amount_use_score_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.guarantee_amount_use_score_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::guarantee_amount_use_score_info* guarantee_amount_use_score_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.guarantee_amount_use_score_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::guarantee_amount_use_score_info* guarantee_amount_use_score_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.guarantee_amount_use_score_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::guarantee_amount_use_score_info >&
guarantee_amount_use_score_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.guarantee_amount_use_score_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::guarantee_amount_use_score_info >*
guarantee_amount_use_score_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.guarantee_amount_use_score_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// rate_score_info

// optional int32 kind_counts = 1;
inline bool rate_score_info::has_kind_counts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rate_score_info::set_has_kind_counts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rate_score_info::clear_has_kind_counts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rate_score_info::clear_kind_counts() {
  kind_counts_ = 0;
  clear_has_kind_counts();
}
inline ::google::protobuf::int32 rate_score_info::kind_counts() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.kind_counts)
  return kind_counts_;
}
inline void rate_score_info::set_kind_counts(::google::protobuf::int32 value) {
  set_has_kind_counts();
  kind_counts_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.kind_counts)
}

// optional int32 already_expires_count = 2;
inline bool rate_score_info::has_already_expires_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rate_score_info::set_has_already_expires_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rate_score_info::clear_has_already_expires_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rate_score_info::clear_already_expires_count() {
  already_expires_count_ = 0;
  clear_has_already_expires_count();
}
inline ::google::protobuf::int32 rate_score_info::already_expires_count() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.already_expires_count)
  return already_expires_count_;
}
inline void rate_score_info::set_already_expires_count(::google::protobuf::int32 value) {
  set_has_already_expires_count();
  already_expires_count_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.already_expires_count)
}

// optional float kind_amount = 3;
inline bool rate_score_info::has_kind_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rate_score_info::set_has_kind_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rate_score_info::clear_has_kind_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rate_score_info::clear_kind_amount() {
  kind_amount_ = 0;
  clear_has_kind_amount();
}
inline float rate_score_info::kind_amount() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.kind_amount)
  return kind_amount_;
}
inline void rate_score_info::set_kind_amount(float value) {
  set_has_kind_amount();
  kind_amount_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.kind_amount)
}

// optional float already_expires_amount = 4;
inline bool rate_score_info::has_already_expires_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rate_score_info::set_has_already_expires_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rate_score_info::clear_has_already_expires_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rate_score_info::clear_already_expires_amount() {
  already_expires_amount_ = 0;
  clear_has_already_expires_amount();
}
inline float rate_score_info::already_expires_amount() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.already_expires_amount)
  return already_expires_amount_;
}
inline void rate_score_info::set_already_expires_amount(float value) {
  set_has_already_expires_amount();
  already_expires_amount_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.already_expires_amount)
}

// optional bytes wei_dan_bao_id = 5;
inline bool rate_score_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rate_score_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rate_score_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rate_score_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& rate_score_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void rate_score_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.wei_dan_bao_id)
}
inline void rate_score_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.rate_score_info.wei_dan_bao_id)
}
inline void rate_score_info::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.rate_score_info.wei_dan_bao_id)
}
inline ::std::string* rate_score_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.rate_score_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* rate_score_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void rate_score_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.rate_score_info.wei_dan_bao_id)
}

// optional int32 max_expires_day = 6;
inline bool rate_score_info::has_max_expires_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rate_score_info::set_has_max_expires_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rate_score_info::clear_has_max_expires_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rate_score_info::clear_max_expires_day() {
  max_expires_day_ = 0;
  clear_has_max_expires_day();
}
inline ::google::protobuf::int32 rate_score_info::max_expires_day() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.max_expires_day)
  return max_expires_day_;
}
inline void rate_score_info::set_max_expires_day(::google::protobuf::int32 value) {
  set_has_max_expires_day();
  max_expires_day_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.max_expires_day)
}

// optional .DW_Location.rate_score_type ans_type = 7;
inline bool rate_score_info::has_ans_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rate_score_info::set_has_ans_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rate_score_info::clear_has_ans_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rate_score_info::clear_ans_type() {
  ans_type_ = 1;
  clear_has_ans_type();
}
inline ::DW_Location::rate_score_type rate_score_info::ans_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_info.ans_type)
  return static_cast< ::DW_Location::rate_score_type >(ans_type_);
}
inline void rate_score_info::set_ans_type(::DW_Location::rate_score_type value) {
  assert(::DW_Location::rate_score_type_IsValid(value));
  set_has_ans_type();
  ans_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_info.ans_type)
}

// -------------------------------------------------------------------

// rate_score_ask

// optional .common.common_ask_header ask_header = 1;
inline bool rate_score_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rate_score_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rate_score_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rate_score_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& rate_score_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* rate_score_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.rate_score_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* rate_score_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void rate_score_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.rate_score_ask.ask_header)
}

// optional .DW_Location.rate_score_type request_type = 2;
inline bool rate_score_ask::has_request_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rate_score_ask::set_has_request_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rate_score_ask::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rate_score_ask::clear_request_type() {
  request_type_ = 1;
  clear_has_request_type();
}
inline ::DW_Location::rate_score_type rate_score_ask::request_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_ask.request_type)
  return static_cast< ::DW_Location::rate_score_type >(request_type_);
}
inline void rate_score_ask::set_request_type(::DW_Location::rate_score_type value) {
  assert(::DW_Location::rate_score_type_IsValid(value));
  set_has_request_type();
  request_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_ask.request_type)
}

// repeated bytes wei_dan_bao_id = 3;
inline int rate_score_ask::wei_dan_bao_id_size() const {
  return wei_dan_bao_id_.size();
}
inline void rate_score_ask::clear_wei_dan_bao_id() {
  wei_dan_bao_id_.Clear();
}
inline const ::std::string& rate_score_ask::wei_dan_bao_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Get(index);
}
inline ::std::string* rate_score_ask::mutable_wei_dan_bao_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.rate_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Mutable(index);
}
inline void rate_score_ask::set_wei_dan_bao_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_ask.wei_dan_bao_id)
  wei_dan_bao_id_.Mutable(index)->assign(value);
}
inline void rate_score_ask::set_wei_dan_bao_id(int index, const char* value) {
  wei_dan_bao_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.rate_score_ask.wei_dan_bao_id)
}
inline void rate_score_ask::set_wei_dan_bao_id(int index, const void* value, size_t size) {
  wei_dan_bao_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.rate_score_ask.wei_dan_bao_id)
}
inline ::std::string* rate_score_ask::add_wei_dan_bao_id() {
  return wei_dan_bao_id_.Add();
}
inline void rate_score_ask::add_wei_dan_bao_id(const ::std::string& value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.rate_score_ask.wei_dan_bao_id)
}
inline void rate_score_ask::add_wei_dan_bao_id(const char* value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.rate_score_ask.wei_dan_bao_id)
}
inline void rate_score_ask::add_wei_dan_bao_id(const void* value, size_t size) {
  wei_dan_bao_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.rate_score_ask.wei_dan_bao_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rate_score_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.rate_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rate_score_ask::mutable_wei_dan_bao_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.rate_score_ask.wei_dan_bao_id)
  return &wei_dan_bao_id_;
}

// optional int32 days_before = 4;
inline bool rate_score_ask::has_days_before() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rate_score_ask::set_has_days_before() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rate_score_ask::clear_has_days_before() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rate_score_ask::clear_days_before() {
  days_before_ = 0;
  clear_has_days_before();
}
inline ::google::protobuf::int32 rate_score_ask::days_before() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_ask.days_before)
  return days_before_;
}
inline void rate_score_ask::set_days_before(::google::protobuf::int32 value) {
  set_has_days_before();
  days_before_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.rate_score_ask.days_before)
}

// -------------------------------------------------------------------

// rate_score_ans

// optional .common.result_info result = 1;
inline bool rate_score_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rate_score_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rate_score_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rate_score_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& rate_score_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* rate_score_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.rate_score_ans.result)
  return result_;
}
inline ::common::result_info* rate_score_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void rate_score_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.rate_score_ans.result)
}

// repeated .DW_Location.rate_score_info info = 2;
inline int rate_score_ans::info_size() const {
  return info_.size();
}
inline void rate_score_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::rate_score_info& rate_score_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.rate_score_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::rate_score_info* rate_score_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.rate_score_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::rate_score_info* rate_score_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.rate_score_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::rate_score_info >&
rate_score_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.rate_score_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::rate_score_info >*
rate_score_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.rate_score_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// covers_time_score_info

// optional int32 which_day = 1;
inline bool covers_time_score_info::has_which_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void covers_time_score_info::set_has_which_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void covers_time_score_info::clear_has_which_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void covers_time_score_info::clear_which_day() {
  which_day_ = 0;
  clear_has_which_day();
}
inline ::google::protobuf::int32 covers_time_score_info::which_day() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_info.which_day)
  return which_day_;
}
inline void covers_time_score_info::set_which_day(::google::protobuf::int32 value) {
  set_has_which_day();
  which_day_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.covers_time_score_info.which_day)
}

// optional int32 covers_period = 2;
inline bool covers_time_score_info::has_covers_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void covers_time_score_info::set_has_covers_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void covers_time_score_info::clear_has_covers_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void covers_time_score_info::clear_covers_period() {
  covers_period_ = 0;
  clear_has_covers_period();
}
inline ::google::protobuf::int32 covers_time_score_info::covers_period() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_info.covers_period)
  return covers_period_;
}
inline void covers_time_score_info::set_covers_period(::google::protobuf::int32 value) {
  set_has_covers_period();
  covers_period_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.covers_time_score_info.covers_period)
}

// -------------------------------------------------------------------

// covers_time_score_ask

// optional .common.common_ask_header ask_header = 1;
inline bool covers_time_score_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void covers_time_score_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void covers_time_score_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void covers_time_score_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& covers_time_score_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* covers_time_score_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.covers_time_score_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* covers_time_score_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void covers_time_score_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.covers_time_score_ask.ask_header)
}

// optional bytes wei_dan_bao_id = 2;
inline bool covers_time_score_ask::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void covers_time_score_ask::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void covers_time_score_ask::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void covers_time_score_ask::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& covers_time_score_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_ask.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void covers_time_score_ask::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.covers_time_score_ask.wei_dan_bao_id)
}
inline void covers_time_score_ask::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.covers_time_score_ask.wei_dan_bao_id)
}
inline void covers_time_score_ask::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.covers_time_score_ask.wei_dan_bao_id)
}
inline ::std::string* covers_time_score_ask::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.covers_time_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* covers_time_score_ask::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void covers_time_score_ask::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.covers_time_score_ask.wei_dan_bao_id)
}

// -------------------------------------------------------------------

// covers_time_score_ans

// optional .common.result_info result = 1;
inline bool covers_time_score_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void covers_time_score_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void covers_time_score_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void covers_time_score_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& covers_time_score_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* covers_time_score_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.covers_time_score_ans.result)
  return result_;
}
inline ::common::result_info* covers_time_score_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void covers_time_score_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.covers_time_score_ans.result)
}

// repeated .DW_Location.covers_time_score_info info = 2;
inline int covers_time_score_ans::info_size() const {
  return info_.size();
}
inline void covers_time_score_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::covers_time_score_info& covers_time_score_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::covers_time_score_info* covers_time_score_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.covers_time_score_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::covers_time_score_info* covers_time_score_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.covers_time_score_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::covers_time_score_info >&
covers_time_score_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.covers_time_score_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::covers_time_score_info >*
covers_time_score_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.covers_time_score_ans.info)
  return &info_;
}

// optional .DW_Location.covers_time_score_type type = 3;
inline bool covers_time_score_ans::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void covers_time_score_ans::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void covers_time_score_ans::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void covers_time_score_ans::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DW_Location::covers_time_score_type covers_time_score_ans::type() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_ans.type)
  return static_cast< ::DW_Location::covers_time_score_type >(type_);
}
inline void covers_time_score_ans::set_type(::DW_Location::covers_time_score_type value) {
  assert(::DW_Location::covers_time_score_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.covers_time_score_ans.type)
}

// optional bytes wei_dan_bao_id = 4;
inline bool covers_time_score_ans::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void covers_time_score_ans::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void covers_time_score_ans::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void covers_time_score_ans::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& covers_time_score_ans::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.covers_time_score_ans.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void covers_time_score_ans::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.covers_time_score_ans.wei_dan_bao_id)
}
inline void covers_time_score_ans::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.covers_time_score_ans.wei_dan_bao_id)
}
inline void covers_time_score_ans::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.covers_time_score_ans.wei_dan_bao_id)
}
inline ::std::string* covers_time_score_ans::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.covers_time_score_ans.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* covers_time_score_ans::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void covers_time_score_ans::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.covers_time_score_ans.wei_dan_bao_id)
}

// -------------------------------------------------------------------

// follow_guarantee_invest_rank_info

// optional bytes wei_dan_bao_id = 1;
inline bool follow_guarantee_invest_rank_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void follow_guarantee_invest_rank_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void follow_guarantee_invest_rank_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void follow_guarantee_invest_rank_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& follow_guarantee_invest_rank_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void follow_guarantee_invest_rank_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.follow_guarantee_invest_rank_info.wei_dan_bao_id)
}
inline void follow_guarantee_invest_rank_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.follow_guarantee_invest_rank_info.wei_dan_bao_id)
}
inline void follow_guarantee_invest_rank_info::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.follow_guarantee_invest_rank_info.wei_dan_bao_id)
}
inline ::std::string* follow_guarantee_invest_rank_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.follow_guarantee_invest_rank_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* follow_guarantee_invest_rank_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void follow_guarantee_invest_rank_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.follow_guarantee_invest_rank_info.wei_dan_bao_id)
}

// optional int32 follow_dan_bao_count = 2;
inline bool follow_guarantee_invest_rank_info::has_follow_dan_bao_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void follow_guarantee_invest_rank_info::set_has_follow_dan_bao_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void follow_guarantee_invest_rank_info::clear_has_follow_dan_bao_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void follow_guarantee_invest_rank_info::clear_follow_dan_bao_count() {
  follow_dan_bao_count_ = 0;
  clear_has_follow_dan_bao_count();
}
inline ::google::protobuf::int32 follow_guarantee_invest_rank_info::follow_dan_bao_count() const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_info.follow_dan_bao_count)
  return follow_dan_bao_count_;
}
inline void follow_guarantee_invest_rank_info::set_follow_dan_bao_count(::google::protobuf::int32 value) {
  set_has_follow_dan_bao_count();
  follow_dan_bao_count_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.follow_guarantee_invest_rank_info.follow_dan_bao_count)
}

// optional int32 follow_tou_zi_count = 3;
inline bool follow_guarantee_invest_rank_info::has_follow_tou_zi_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void follow_guarantee_invest_rank_info::set_has_follow_tou_zi_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void follow_guarantee_invest_rank_info::clear_has_follow_tou_zi_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void follow_guarantee_invest_rank_info::clear_follow_tou_zi_count() {
  follow_tou_zi_count_ = 0;
  clear_has_follow_tou_zi_count();
}
inline ::google::protobuf::int32 follow_guarantee_invest_rank_info::follow_tou_zi_count() const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_info.follow_tou_zi_count)
  return follow_tou_zi_count_;
}
inline void follow_guarantee_invest_rank_info::set_follow_tou_zi_count(::google::protobuf::int32 value) {
  set_has_follow_tou_zi_count();
  follow_tou_zi_count_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.follow_guarantee_invest_rank_info.follow_tou_zi_count)
}

// -------------------------------------------------------------------

// follow_guarantee_invest_rank_ask

// optional .common.common_ask_header ask_header = 1;
inline bool follow_guarantee_invest_rank_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void follow_guarantee_invest_rank_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void follow_guarantee_invest_rank_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void follow_guarantee_invest_rank_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& follow_guarantee_invest_rank_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* follow_guarantee_invest_rank_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.follow_guarantee_invest_rank_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* follow_guarantee_invest_rank_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void follow_guarantee_invest_rank_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.follow_guarantee_invest_rank_ask.ask_header)
}

// repeated bytes wei_dan_bao_id = 2;
inline int follow_guarantee_invest_rank_ask::wei_dan_bao_id_size() const {
  return wei_dan_bao_id_.size();
}
inline void follow_guarantee_invest_rank_ask::clear_wei_dan_bao_id() {
  wei_dan_bao_id_.Clear();
}
inline const ::std::string& follow_guarantee_invest_rank_ask::wei_dan_bao_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Get(index);
}
inline ::std::string* follow_guarantee_invest_rank_ask::mutable_wei_dan_bao_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Mutable(index);
}
inline void follow_guarantee_invest_rank_ask::set_wei_dan_bao_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
  wei_dan_bao_id_.Mutable(index)->assign(value);
}
inline void follow_guarantee_invest_rank_ask::set_wei_dan_bao_id(int index, const char* value) {
  wei_dan_bao_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
}
inline void follow_guarantee_invest_rank_ask::set_wei_dan_bao_id(int index, const void* value, size_t size) {
  wei_dan_bao_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
}
inline ::std::string* follow_guarantee_invest_rank_ask::add_wei_dan_bao_id() {
  return wei_dan_bao_id_.Add();
}
inline void follow_guarantee_invest_rank_ask::add_wei_dan_bao_id(const ::std::string& value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
}
inline void follow_guarantee_invest_rank_ask::add_wei_dan_bao_id(const char* value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
}
inline void follow_guarantee_invest_rank_ask::add_wei_dan_bao_id(const void* value, size_t size) {
  wei_dan_bao_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
follow_guarantee_invest_rank_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
follow_guarantee_invest_rank_ask::mutable_wei_dan_bao_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.follow_guarantee_invest_rank_ask.wei_dan_bao_id)
  return &wei_dan_bao_id_;
}

// -------------------------------------------------------------------

// follow_guarantee_invest_rank_ans

// optional .common.result_info result = 1;
inline bool follow_guarantee_invest_rank_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void follow_guarantee_invest_rank_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void follow_guarantee_invest_rank_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void follow_guarantee_invest_rank_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& follow_guarantee_invest_rank_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* follow_guarantee_invest_rank_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.follow_guarantee_invest_rank_ans.result)
  return result_;
}
inline ::common::result_info* follow_guarantee_invest_rank_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void follow_guarantee_invest_rank_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.follow_guarantee_invest_rank_ans.result)
}

// repeated .DW_Location.follow_guarantee_invest_rank_info info = 2;
inline int follow_guarantee_invest_rank_ans::info_size() const {
  return info_.size();
}
inline void follow_guarantee_invest_rank_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::follow_guarantee_invest_rank_info& follow_guarantee_invest_rank_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.follow_guarantee_invest_rank_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::follow_guarantee_invest_rank_info* follow_guarantee_invest_rank_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.follow_guarantee_invest_rank_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::follow_guarantee_invest_rank_info* follow_guarantee_invest_rank_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.follow_guarantee_invest_rank_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::follow_guarantee_invest_rank_info >&
follow_guarantee_invest_rank_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.follow_guarantee_invest_rank_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::follow_guarantee_invest_rank_info >*
follow_guarantee_invest_rank_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.follow_guarantee_invest_rank_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// borrower_evaluate_score_info

// optional bytes wei_dan_bao_id = 1;
inline bool borrower_evaluate_score_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void borrower_evaluate_score_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void borrower_evaluate_score_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void borrower_evaluate_score_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& borrower_evaluate_score_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void borrower_evaluate_score_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.borrower_evaluate_score_info.wei_dan_bao_id)
}
inline void borrower_evaluate_score_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.borrower_evaluate_score_info.wei_dan_bao_id)
}
inline void borrower_evaluate_score_info::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.borrower_evaluate_score_info.wei_dan_bao_id)
}
inline ::std::string* borrower_evaluate_score_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.borrower_evaluate_score_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* borrower_evaluate_score_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrower_evaluate_score_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.borrower_evaluate_score_info.wei_dan_bao_id)
}

// optional float borrower_score = 2;
inline bool borrower_evaluate_score_info::has_borrower_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void borrower_evaluate_score_info::set_has_borrower_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void borrower_evaluate_score_info::clear_has_borrower_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void borrower_evaluate_score_info::clear_borrower_score() {
  borrower_score_ = 0;
  clear_has_borrower_score();
}
inline float borrower_evaluate_score_info::borrower_score() const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_info.borrower_score)
  return borrower_score_;
}
inline void borrower_evaluate_score_info::set_borrower_score(float value) {
  set_has_borrower_score();
  borrower_score_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.borrower_evaluate_score_info.borrower_score)
}

// optional int32 evaluate_total_num = 3;
inline bool borrower_evaluate_score_info::has_evaluate_total_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void borrower_evaluate_score_info::set_has_evaluate_total_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void borrower_evaluate_score_info::clear_has_evaluate_total_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void borrower_evaluate_score_info::clear_evaluate_total_num() {
  evaluate_total_num_ = 0;
  clear_has_evaluate_total_num();
}
inline ::google::protobuf::int32 borrower_evaluate_score_info::evaluate_total_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_info.evaluate_total_num)
  return evaluate_total_num_;
}
inline void borrower_evaluate_score_info::set_evaluate_total_num(::google::protobuf::int32 value) {
  set_has_evaluate_total_num();
  evaluate_total_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.borrower_evaluate_score_info.evaluate_total_num)
}

// -------------------------------------------------------------------

// borrower_evaluate_score_ask

// optional .common.common_ask_header ask_header = 1;
inline bool borrower_evaluate_score_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void borrower_evaluate_score_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void borrower_evaluate_score_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void borrower_evaluate_score_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& borrower_evaluate_score_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* borrower_evaluate_score_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.borrower_evaluate_score_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* borrower_evaluate_score_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void borrower_evaluate_score_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.borrower_evaluate_score_ask.ask_header)
}

// repeated bytes wei_dan_bao_id = 2;
inline int borrower_evaluate_score_ask::wei_dan_bao_id_size() const {
  return wei_dan_bao_id_.size();
}
inline void borrower_evaluate_score_ask::clear_wei_dan_bao_id() {
  wei_dan_bao_id_.Clear();
}
inline const ::std::string& borrower_evaluate_score_ask::wei_dan_bao_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Get(index);
}
inline ::std::string* borrower_evaluate_score_ask::mutable_wei_dan_bao_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Mutable(index);
}
inline void borrower_evaluate_score_ask::set_wei_dan_bao_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
  wei_dan_bao_id_.Mutable(index)->assign(value);
}
inline void borrower_evaluate_score_ask::set_wei_dan_bao_id(int index, const char* value) {
  wei_dan_bao_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
}
inline void borrower_evaluate_score_ask::set_wei_dan_bao_id(int index, const void* value, size_t size) {
  wei_dan_bao_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
}
inline ::std::string* borrower_evaluate_score_ask::add_wei_dan_bao_id() {
  return wei_dan_bao_id_.Add();
}
inline void borrower_evaluate_score_ask::add_wei_dan_bao_id(const ::std::string& value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
}
inline void borrower_evaluate_score_ask::add_wei_dan_bao_id(const char* value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
}
inline void borrower_evaluate_score_ask::add_wei_dan_bao_id(const void* value, size_t size) {
  wei_dan_bao_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
borrower_evaluate_score_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
borrower_evaluate_score_ask::mutable_wei_dan_bao_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.borrower_evaluate_score_ask.wei_dan_bao_id)
  return &wei_dan_bao_id_;
}

// -------------------------------------------------------------------

// borrower_evaluate_score_ans

// optional .common.result_info result = 1;
inline bool borrower_evaluate_score_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void borrower_evaluate_score_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void borrower_evaluate_score_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void borrower_evaluate_score_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& borrower_evaluate_score_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* borrower_evaluate_score_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.borrower_evaluate_score_ans.result)
  return result_;
}
inline ::common::result_info* borrower_evaluate_score_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void borrower_evaluate_score_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.borrower_evaluate_score_ans.result)
}

// repeated .DW_Location.borrower_evaluate_score_info info = 2;
inline int borrower_evaluate_score_ans::info_size() const {
  return info_.size();
}
inline void borrower_evaluate_score_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::borrower_evaluate_score_info& borrower_evaluate_score_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.borrower_evaluate_score_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::borrower_evaluate_score_info* borrower_evaluate_score_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.borrower_evaluate_score_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::borrower_evaluate_score_info* borrower_evaluate_score_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.borrower_evaluate_score_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::borrower_evaluate_score_info >&
borrower_evaluate_score_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.borrower_evaluate_score_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::borrower_evaluate_score_info >*
borrower_evaluate_score_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.borrower_evaluate_score_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// diligence_pass_score_info

// optional bytes wei_dan_bao_id = 1;
inline bool diligence_pass_score_info::has_wei_dan_bao_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void diligence_pass_score_info::set_has_wei_dan_bao_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void diligence_pass_score_info::clear_has_wei_dan_bao_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void diligence_pass_score_info::clear_wei_dan_bao_id() {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_->clear();
  }
  clear_has_wei_dan_bao_id();
}
inline const ::std::string& diligence_pass_score_info::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_info.wei_dan_bao_id)
  return *wei_dan_bao_id_;
}
inline void diligence_pass_score_info::set_wei_dan_bao_id(const ::std::string& value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.diligence_pass_score_info.wei_dan_bao_id)
}
inline void diligence_pass_score_info::set_wei_dan_bao_id(const char* value) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.diligence_pass_score_info.wei_dan_bao_id)
}
inline void diligence_pass_score_info::set_wei_dan_bao_id(const void* value, size_t size) {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  wei_dan_bao_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.diligence_pass_score_info.wei_dan_bao_id)
}
inline ::std::string* diligence_pass_score_info::mutable_wei_dan_bao_id() {
  set_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wei_dan_bao_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.diligence_pass_score_info.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::std::string* diligence_pass_score_info::release_wei_dan_bao_id() {
  clear_has_wei_dan_bao_id();
  if (wei_dan_bao_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wei_dan_bao_id_;
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void diligence_pass_score_info::set_allocated_wei_dan_bao_id(::std::string* wei_dan_bao_id) {
  if (wei_dan_bao_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wei_dan_bao_id_;
  }
  if (wei_dan_bao_id) {
    set_has_wei_dan_bao_id();
    wei_dan_bao_id_ = wei_dan_bao_id;
  } else {
    clear_has_wei_dan_bao_id();
    wei_dan_bao_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.diligence_pass_score_info.wei_dan_bao_id)
}

// optional int32 passed_diligence_numbers = 2;
inline bool diligence_pass_score_info::has_passed_diligence_numbers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void diligence_pass_score_info::set_has_passed_diligence_numbers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void diligence_pass_score_info::clear_has_passed_diligence_numbers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void diligence_pass_score_info::clear_passed_diligence_numbers() {
  passed_diligence_numbers_ = 0;
  clear_has_passed_diligence_numbers();
}
inline ::google::protobuf::int32 diligence_pass_score_info::passed_diligence_numbers() const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_info.passed_diligence_numbers)
  return passed_diligence_numbers_;
}
inline void diligence_pass_score_info::set_passed_diligence_numbers(::google::protobuf::int32 value) {
  set_has_passed_diligence_numbers();
  passed_diligence_numbers_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.diligence_pass_score_info.passed_diligence_numbers)
}

// optional int32 commit_diligence_total_num = 3;
inline bool diligence_pass_score_info::has_commit_diligence_total_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void diligence_pass_score_info::set_has_commit_diligence_total_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void diligence_pass_score_info::clear_has_commit_diligence_total_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void diligence_pass_score_info::clear_commit_diligence_total_num() {
  commit_diligence_total_num_ = 0;
  clear_has_commit_diligence_total_num();
}
inline ::google::protobuf::int32 diligence_pass_score_info::commit_diligence_total_num() const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_info.commit_diligence_total_num)
  return commit_diligence_total_num_;
}
inline void diligence_pass_score_info::set_commit_diligence_total_num(::google::protobuf::int32 value) {
  set_has_commit_diligence_total_num();
  commit_diligence_total_num_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.diligence_pass_score_info.commit_diligence_total_num)
}

// -------------------------------------------------------------------

// diligence_pass_score_ask

// optional .common.common_ask_header ask_header = 1;
inline bool diligence_pass_score_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void diligence_pass_score_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void diligence_pass_score_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void diligence_pass_score_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& diligence_pass_score_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* diligence_pass_score_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.diligence_pass_score_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* diligence_pass_score_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void diligence_pass_score_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.diligence_pass_score_ask.ask_header)
}

// repeated bytes wei_dan_bao_id = 2;
inline int diligence_pass_score_ask::wei_dan_bao_id_size() const {
  return wei_dan_bao_id_.size();
}
inline void diligence_pass_score_ask::clear_wei_dan_bao_id() {
  wei_dan_bao_id_.Clear();
}
inline const ::std::string& diligence_pass_score_ask::wei_dan_bao_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Get(index);
}
inline ::std::string* diligence_pass_score_ask::mutable_wei_dan_bao_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_.Mutable(index);
}
inline void diligence_pass_score_ask::set_wei_dan_bao_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
  wei_dan_bao_id_.Mutable(index)->assign(value);
}
inline void diligence_pass_score_ask::set_wei_dan_bao_id(int index, const char* value) {
  wei_dan_bao_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
}
inline void diligence_pass_score_ask::set_wei_dan_bao_id(int index, const void* value, size_t size) {
  wei_dan_bao_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
}
inline ::std::string* diligence_pass_score_ask::add_wei_dan_bao_id() {
  return wei_dan_bao_id_.Add();
}
inline void diligence_pass_score_ask::add_wei_dan_bao_id(const ::std::string& value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
}
inline void diligence_pass_score_ask::add_wei_dan_bao_id(const char* value) {
  wei_dan_bao_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
}
inline void diligence_pass_score_ask::add_wei_dan_bao_id(const void* value, size_t size) {
  wei_dan_bao_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
diligence_pass_score_ask::wei_dan_bao_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
  return wei_dan_bao_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
diligence_pass_score_ask::mutable_wei_dan_bao_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.diligence_pass_score_ask.wei_dan_bao_id)
  return &wei_dan_bao_id_;
}

// -------------------------------------------------------------------

// diligence_pass_score_ans

// optional .common.result_info result = 1;
inline bool diligence_pass_score_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void diligence_pass_score_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void diligence_pass_score_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void diligence_pass_score_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& diligence_pass_score_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* diligence_pass_score_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.diligence_pass_score_ans.result)
  return result_;
}
inline ::common::result_info* diligence_pass_score_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void diligence_pass_score_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.diligence_pass_score_ans.result)
}

// repeated .DW_Location.diligence_pass_score_info info = 2;
inline int diligence_pass_score_ans::info_size() const {
  return info_.size();
}
inline void diligence_pass_score_ans::clear_info() {
  info_.Clear();
}
inline const ::DW_Location::diligence_pass_score_info& diligence_pass_score_ans::info(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.diligence_pass_score_ans.info)
  return info_.Get(index);
}
inline ::DW_Location::diligence_pass_score_info* diligence_pass_score_ans::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.diligence_pass_score_ans.info)
  return info_.Mutable(index);
}
inline ::DW_Location::diligence_pass_score_info* diligence_pass_score_ans::add_info() {
  // @@protoc_insertion_point(field_add:DW_Location.diligence_pass_score_ans.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::diligence_pass_score_info >&
diligence_pass_score_ans::info() const {
  // @@protoc_insertion_point(field_list:DW_Location.diligence_pass_score_ans.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::diligence_pass_score_info >*
diligence_pass_score_ans::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.diligence_pass_score_ans.info)
  return &info_;
}

// -------------------------------------------------------------------

// blacklist_contacts_coincide_ask

// optional .common.common_ask_header ask_header = 1;
inline bool blacklist_contacts_coincide_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_contacts_coincide_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_contacts_coincide_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_contacts_coincide_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_contacts_coincide_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.blacklist_contacts_coincide_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_contacts_coincide_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.blacklist_contacts_coincide_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_contacts_coincide_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_contacts_coincide_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.blacklist_contacts_coincide_ask.ask_header)
}

// optional int32 blacklist_type = 2;
inline bool blacklist_contacts_coincide_ask::has_blacklist_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_contacts_coincide_ask::set_has_blacklist_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_contacts_coincide_ask::clear_has_blacklist_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_contacts_coincide_ask::clear_blacklist_type() {
  blacklist_type_ = 0;
  clear_has_blacklist_type();
}
inline ::google::protobuf::int32 blacklist_contacts_coincide_ask::blacklist_type() const {
  // @@protoc_insertion_point(field_get:DW_Location.blacklist_contacts_coincide_ask.blacklist_type)
  return blacklist_type_;
}
inline void blacklist_contacts_coincide_ask::set_blacklist_type(::google::protobuf::int32 value) {
  set_has_blacklist_type();
  blacklist_type_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.blacklist_contacts_coincide_ask.blacklist_type)
}

// optional float coincide_value = 3;
inline bool blacklist_contacts_coincide_ask::has_coincide_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_contacts_coincide_ask::set_has_coincide_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_contacts_coincide_ask::clear_has_coincide_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_contacts_coincide_ask::clear_coincide_value() {
  coincide_value_ = 0;
  clear_has_coincide_value();
}
inline float blacklist_contacts_coincide_ask::coincide_value() const {
  // @@protoc_insertion_point(field_get:DW_Location.blacklist_contacts_coincide_ask.coincide_value)
  return coincide_value_;
}
inline void blacklist_contacts_coincide_ask::set_coincide_value(float value) {
  set_has_coincide_value();
  coincide_value_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.blacklist_contacts_coincide_ask.coincide_value)
}

// optional .common.user_basic_identification user_info = 4;
inline bool blacklist_contacts_coincide_ask::has_user_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blacklist_contacts_coincide_ask::set_has_user_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blacklist_contacts_coincide_ask::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blacklist_contacts_coincide_ask::clear_user_info() {
  if (user_info_ != NULL) user_info_->::common::user_basic_identification::Clear();
  clear_has_user_info();
}
inline const ::common::user_basic_identification& blacklist_contacts_coincide_ask::user_info() const {
  // @@protoc_insertion_point(field_get:DW_Location.blacklist_contacts_coincide_ask.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::common::user_basic_identification* blacklist_contacts_coincide_ask::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::common::user_basic_identification;
  // @@protoc_insertion_point(field_mutable:DW_Location.blacklist_contacts_coincide_ask.user_info)
  return user_info_;
}
inline ::common::user_basic_identification* blacklist_contacts_coincide_ask::release_user_info() {
  clear_has_user_info();
  ::common::user_basic_identification* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void blacklist_contacts_coincide_ask::set_allocated_user_info(::common::user_basic_identification* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.blacklist_contacts_coincide_ask.user_info)
}

// -------------------------------------------------------------------

// blacklist_contacts_coincide_ans

// optional bool is_black_friend = 1;
inline bool blacklist_contacts_coincide_ans::has_is_black_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_contacts_coincide_ans::set_has_is_black_friend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_contacts_coincide_ans::clear_has_is_black_friend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_contacts_coincide_ans::clear_is_black_friend() {
  is_black_friend_ = false;
  clear_has_is_black_friend();
}
inline bool blacklist_contacts_coincide_ans::is_black_friend() const {
  // @@protoc_insertion_point(field_get:DW_Location.blacklist_contacts_coincide_ans.is_black_friend)
  return is_black_friend_;
}
inline void blacklist_contacts_coincide_ans::set_is_black_friend(bool value) {
  set_has_is_black_friend();
  is_black_friend_ = value;
  // @@protoc_insertion_point(field_set:DW_Location.blacklist_contacts_coincide_ans.is_black_friend)
}

// optional .common.result_info result = 2;
inline bool blacklist_contacts_coincide_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_contacts_coincide_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_contacts_coincide_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_contacts_coincide_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& blacklist_contacts_coincide_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.blacklist_contacts_coincide_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* blacklist_contacts_coincide_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.blacklist_contacts_coincide_ans.result)
  return result_;
}
inline ::common::result_info* blacklist_contacts_coincide_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void blacklist_contacts_coincide_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.blacklist_contacts_coincide_ans.result)
}

// -------------------------------------------------------------------

// batch_userinfo_ask

// optional .common.common_ask_header ask_header = 1;
inline bool batch_userinfo_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void batch_userinfo_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void batch_userinfo_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void batch_userinfo_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& batch_userinfo_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:DW_Location.batch_userinfo_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* batch_userinfo_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:DW_Location.batch_userinfo_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* batch_userinfo_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void batch_userinfo_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.batch_userinfo_ask.ask_header)
}

// repeated bytes user_id = 2;
inline int batch_userinfo_ask::user_id_size() const {
  return user_id_.size();
}
inline void batch_userinfo_ask::clear_user_id() {
  user_id_.Clear();
}
inline const ::std::string& batch_userinfo_ask::user_id(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.batch_userinfo_ask.user_id)
  return user_id_.Get(index);
}
inline ::std::string* batch_userinfo_ask::mutable_user_id(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.batch_userinfo_ask.user_id)
  return user_id_.Mutable(index);
}
inline void batch_userinfo_ask::set_user_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DW_Location.batch_userinfo_ask.user_id)
  user_id_.Mutable(index)->assign(value);
}
inline void batch_userinfo_ask::set_user_id(int index, const char* value) {
  user_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.batch_userinfo_ask.user_id)
}
inline void batch_userinfo_ask::set_user_id(int index, const void* value, size_t size) {
  user_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.batch_userinfo_ask.user_id)
}
inline ::std::string* batch_userinfo_ask::add_user_id() {
  return user_id_.Add();
}
inline void batch_userinfo_ask::add_user_id(const ::std::string& value) {
  user_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DW_Location.batch_userinfo_ask.user_id)
}
inline void batch_userinfo_ask::add_user_id(const char* value) {
  user_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DW_Location.batch_userinfo_ask.user_id)
}
inline void batch_userinfo_ask::add_user_id(const void* value, size_t size) {
  user_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DW_Location.batch_userinfo_ask.user_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
batch_userinfo_ask::user_id() const {
  // @@protoc_insertion_point(field_list:DW_Location.batch_userinfo_ask.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
batch_userinfo_ask::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.batch_userinfo_ask.user_id)
  return &user_id_;
}

// -------------------------------------------------------------------

// chatlog_userinfo

// optional bytes real_name = 1;
inline bool chatlog_userinfo::has_real_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatlog_userinfo::set_has_real_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chatlog_userinfo::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chatlog_userinfo::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& chatlog_userinfo::real_name() const {
  // @@protoc_insertion_point(field_get:DW_Location.chatlog_userinfo.real_name)
  return *real_name_;
}
inline void chatlog_userinfo::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.chatlog_userinfo.real_name)
}
inline void chatlog_userinfo::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.chatlog_userinfo.real_name)
}
inline void chatlog_userinfo::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.chatlog_userinfo.real_name)
}
inline ::std::string* chatlog_userinfo::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.chatlog_userinfo.real_name)
  return real_name_;
}
inline ::std::string* chatlog_userinfo::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatlog_userinfo::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.chatlog_userinfo.real_name)
}

// optional bytes mobile_phone = 2;
inline bool chatlog_userinfo::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatlog_userinfo::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chatlog_userinfo::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chatlog_userinfo::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& chatlog_userinfo::mobile_phone() const {
  // @@protoc_insertion_point(field_get:DW_Location.chatlog_userinfo.mobile_phone)
  return *mobile_phone_;
}
inline void chatlog_userinfo::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.chatlog_userinfo.mobile_phone)
}
inline void chatlog_userinfo::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.chatlog_userinfo.mobile_phone)
}
inline void chatlog_userinfo::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.chatlog_userinfo.mobile_phone)
}
inline ::std::string* chatlog_userinfo::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.chatlog_userinfo.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* chatlog_userinfo::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatlog_userinfo::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.chatlog_userinfo.mobile_phone)
}

// optional bytes identity_card = 3;
inline bool chatlog_userinfo::has_identity_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chatlog_userinfo::set_has_identity_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chatlog_userinfo::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chatlog_userinfo::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& chatlog_userinfo::identity_card() const {
  // @@protoc_insertion_point(field_get:DW_Location.chatlog_userinfo.identity_card)
  return *identity_card_;
}
inline void chatlog_userinfo::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.chatlog_userinfo.identity_card)
}
inline void chatlog_userinfo::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.chatlog_userinfo.identity_card)
}
inline void chatlog_userinfo::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.chatlog_userinfo.identity_card)
}
inline ::std::string* chatlog_userinfo::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.chatlog_userinfo.identity_card)
  return identity_card_;
}
inline ::std::string* chatlog_userinfo::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatlog_userinfo::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.chatlog_userinfo.identity_card)
}

// optional bytes nickname = 4;
inline bool chatlog_userinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chatlog_userinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chatlog_userinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chatlog_userinfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& chatlog_userinfo::nickname() const {
  // @@protoc_insertion_point(field_get:DW_Location.chatlog_userinfo.nickname)
  return *nickname_;
}
inline void chatlog_userinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.chatlog_userinfo.nickname)
}
inline void chatlog_userinfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.chatlog_userinfo.nickname)
}
inline void chatlog_userinfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.chatlog_userinfo.nickname)
}
inline ::std::string* chatlog_userinfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.chatlog_userinfo.nickname)
  return nickname_;
}
inline ::std::string* chatlog_userinfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatlog_userinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.chatlog_userinfo.nickname)
}

// optional bytes avatar = 5;
inline bool chatlog_userinfo::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chatlog_userinfo::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chatlog_userinfo::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chatlog_userinfo::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& chatlog_userinfo::avatar() const {
  // @@protoc_insertion_point(field_get:DW_Location.chatlog_userinfo.avatar)
  return *avatar_;
}
inline void chatlog_userinfo::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.chatlog_userinfo.avatar)
}
inline void chatlog_userinfo::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.chatlog_userinfo.avatar)
}
inline void chatlog_userinfo::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.chatlog_userinfo.avatar)
}
inline ::std::string* chatlog_userinfo::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.chatlog_userinfo.avatar)
  return avatar_;
}
inline ::std::string* chatlog_userinfo::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatlog_userinfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.chatlog_userinfo.avatar)
}

// optional bytes user_id = 6;
inline bool chatlog_userinfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chatlog_userinfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chatlog_userinfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chatlog_userinfo::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& chatlog_userinfo::user_id() const {
  // @@protoc_insertion_point(field_get:DW_Location.chatlog_userinfo.user_id)
  return *user_id_;
}
inline void chatlog_userinfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:DW_Location.chatlog_userinfo.user_id)
}
inline void chatlog_userinfo::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DW_Location.chatlog_userinfo.user_id)
}
inline void chatlog_userinfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DW_Location.chatlog_userinfo.user_id)
}
inline ::std::string* chatlog_userinfo::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DW_Location.chatlog_userinfo.user_id)
  return user_id_;
}
inline ::std::string* chatlog_userinfo::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatlog_userinfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.chatlog_userinfo.user_id)
}

// -------------------------------------------------------------------

// batch_userinfo_ans

// repeated .DW_Location.chatlog_userinfo info_list = 1;
inline int batch_userinfo_ans::info_list_size() const {
  return info_list_.size();
}
inline void batch_userinfo_ans::clear_info_list() {
  info_list_.Clear();
}
inline const ::DW_Location::chatlog_userinfo& batch_userinfo_ans::info_list(int index) const {
  // @@protoc_insertion_point(field_get:DW_Location.batch_userinfo_ans.info_list)
  return info_list_.Get(index);
}
inline ::DW_Location::chatlog_userinfo* batch_userinfo_ans::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:DW_Location.batch_userinfo_ans.info_list)
  return info_list_.Mutable(index);
}
inline ::DW_Location::chatlog_userinfo* batch_userinfo_ans::add_info_list() {
  // @@protoc_insertion_point(field_add:DW_Location.batch_userinfo_ans.info_list)
  return info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DW_Location::chatlog_userinfo >&
batch_userinfo_ans::info_list() const {
  // @@protoc_insertion_point(field_list:DW_Location.batch_userinfo_ans.info_list)
  return info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::DW_Location::chatlog_userinfo >*
batch_userinfo_ans::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:DW_Location.batch_userinfo_ans.info_list)
  return &info_list_;
}

// optional .common.result_info result = 2;
inline bool batch_userinfo_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void batch_userinfo_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void batch_userinfo_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void batch_userinfo_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& batch_userinfo_ans::result() const {
  // @@protoc_insertion_point(field_get:DW_Location.batch_userinfo_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* batch_userinfo_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:DW_Location.batch_userinfo_ans.result)
  return result_;
}
inline ::common::result_info* batch_userinfo_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void batch_userinfo_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DW_Location.batch_userinfo_ans.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DW_Location

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DW_Location::DW_ask_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::DW_ask_type>() {
  return ::DW_Location::DW_ask_type_descriptor();
}
template <> struct is_proto_enum< ::DW_Location::platform_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::platform_type>() {
  return ::DW_Location::platform_type_descriptor();
}
template <> struct is_proto_enum< ::DW_Location::overdue_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::overdue_type>() {
  return ::DW_Location::overdue_type_descriptor();
}
template <> struct is_proto_enum< ::DW_Location::static_report_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::static_report_type>() {
  return ::DW_Location::static_report_type_descriptor();
}
template <> struct is_proto_enum< ::DW_Location::avg_suc_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::avg_suc_type>() {
  return ::DW_Location::avg_suc_type_descriptor();
}
template <> struct is_proto_enum< ::DW_Location::rate_score_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::rate_score_type>() {
  return ::DW_Location::rate_score_type_descriptor();
}
template <> struct is_proto_enum< ::DW_Location::covers_time_score_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DW_Location::covers_time_score_type>() {
  return ::DW_Location::covers_time_score_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DW_5fLocation_2eproto__INCLUDED
