// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UBAS_niiwoo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UBAS_niiwoo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace UBAS_niiwoo {

namespace {

const ::google::protobuf::Descriptor* user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_student_UBAS_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_student_UBAS_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_tuandai_UBAS_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_tuandai_UBAS_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_no_tuandai_UBAS_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_no_tuandai_UBAS_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* address_information_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  address_information_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_address_phone_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_address_phone_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_overdue_status_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_overdue_status_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* loan_or_assure_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loan_or_assure_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* borrow_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  borrow_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* loan_assure_info_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loan_assure_info_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_borrow_info_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_borrow_info_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_borrow_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_borrow_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_borrow_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_borrow_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_address_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_address_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_contact_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_contact_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_coincide_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_coincide_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* niiwoo_UBAS_coincide_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niiwoo_UBAS_coincide_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* en_sex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* en_marry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* en_home_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* en_user_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* niiwoo_ask_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* en_apply_status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* en_address_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto() {
  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UBAS_niiwoo.proto");
  GOOGLE_CHECK(file != NULL);
  user_info_descriptor_ = file->message_type(0);
  static const int user_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, user_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, college_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, eduction_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, marry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, card_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, home_sheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, home_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, money_for_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, mobile_number_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, home_type_),
  };
  user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_descriptor_,
      user_info::default_instance_,
      user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info));
  niiwoo_UBAS_ask_descriptor_ = file->message_type(1);
  static const int niiwoo_UBAS_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, ask_header_),
  };
  niiwoo_UBAS_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_ask_descriptor_,
      niiwoo_UBAS_ask::default_instance_,
      niiwoo_UBAS_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_ask));
  niiwoo_student_UBAS_ans_descriptor_ = file->message_type(2);
  static const int niiwoo_student_UBAS_ans_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, user_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, college_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, eduction_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, school_end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, school_sheng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, school_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, card_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, mobile_number_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, error_),
  };
  niiwoo_student_UBAS_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_student_UBAS_ans_descriptor_,
      niiwoo_student_UBAS_ans::default_instance_,
      niiwoo_student_UBAS_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_student_UBAS_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_student_UBAS_ans));
  niiwoo_tuandai_UBAS_ans_descriptor_ = file->message_type(3);
  static const int niiwoo_tuandai_UBAS_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_tuandai_UBAS_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_tuandai_UBAS_ans, error_),
  };
  niiwoo_tuandai_UBAS_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_tuandai_UBAS_ans_descriptor_,
      niiwoo_tuandai_UBAS_ans::default_instance_,
      niiwoo_tuandai_UBAS_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_tuandai_UBAS_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_tuandai_UBAS_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_tuandai_UBAS_ans));
  niiwoo_no_tuandai_UBAS_ans_descriptor_ = file->message_type(4);
  static const int niiwoo_no_tuandai_UBAS_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_no_tuandai_UBAS_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_no_tuandai_UBAS_ans, error_),
  };
  niiwoo_no_tuandai_UBAS_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_no_tuandai_UBAS_ans_descriptor_,
      niiwoo_no_tuandai_UBAS_ans::default_instance_,
      niiwoo_no_tuandai_UBAS_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_no_tuandai_UBAS_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_no_tuandai_UBAS_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_no_tuandai_UBAS_ans));
  user_info_ask_descriptor_ = file->message_type(5);
  static const int user_info_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, query_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, mobile_phone_),
  };
  user_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_ask_descriptor_,
      user_info_ask::default_instance_,
      user_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info_ask));
  friend_data_descriptor_ = file->message_type(6);
  static const int friend_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_data, friend_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_data, is_prove_),
  };
  friend_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_data_descriptor_,
      friend_data::default_instance_,
      friend_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_data));
  user_info_ans_descriptor_ = file->message_type(7);
  static const int user_info_ans_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, user_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, college_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, eduction_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, is_prove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, friend_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, error_),
  };
  user_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_ans_descriptor_,
      user_info_ans::default_instance_,
      user_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info_ans));
  address_information_descriptor_ = file->message_type(8);
  static const int address_information_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_information, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_information, mobile_),
  };
  address_information_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      address_information_descriptor_,
      address_information::default_instance_,
      address_information_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_information, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_information, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(address_information));
  user_address_phone_list_ans_descriptor_ = file->message_type(9);
  static const int user_address_phone_list_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_phone_list_ans, address_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_phone_list_ans, error_),
  };
  user_address_phone_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_address_phone_list_ans_descriptor_,
      user_address_phone_list_ans::default_instance_,
      user_address_phone_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_phone_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_phone_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_address_phone_list_ans));
  user_overdue_status_ans_descriptor_ = file->message_type(10);
  static const int user_overdue_status_ans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_status_ans, is_loan_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_status_ans, is_assure_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_status_ans, income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_status_ans, error_),
  };
  user_overdue_status_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_overdue_status_ans_descriptor_,
      user_overdue_status_ans::default_instance_,
      user_overdue_status_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_status_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_overdue_status_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_overdue_status_ans));
  loan_or_assure_info_descriptor_ = file->message_type(11);
  static const int loan_or_assure_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_or_assure_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_or_assure_info, overdue_day_),
  };
  loan_or_assure_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loan_or_assure_info_descriptor_,
      loan_or_assure_info::default_instance_,
      loan_or_assure_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_or_assure_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_or_assure_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loan_or_assure_info));
  borrow_info_descriptor_ = file->message_type(12);
  static const int borrow_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_info, bid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_info, overdue_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_info, should_repay_periods_),
  };
  borrow_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      borrow_info_descriptor_,
      borrow_info::default_instance_,
      borrow_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(borrow_info));
  loan_assure_info_list_ans_descriptor_ = file->message_type(13);
  static const int loan_assure_info_list_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, loan_history_bad_debt_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, loan_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, assure_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, borrower_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, error_),
  };
  loan_assure_info_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loan_assure_info_list_ans_descriptor_,
      loan_assure_info_list_ans::default_instance_,
      loan_assure_info_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loan_assure_info_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loan_assure_info_list_ans));
  niiwoo_UBAS_borrow_info_item_descriptor_ = file->message_type(14);
  static const int niiwoo_UBAS_borrow_info_item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_info_item, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_info_item, bid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_info_item, apply_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_info_item, overdue_days_),
  };
  niiwoo_UBAS_borrow_info_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_borrow_info_item_descriptor_,
      niiwoo_UBAS_borrow_info_item::default_instance_,
      niiwoo_UBAS_borrow_info_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_info_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_info_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_borrow_info_item));
  niiwoo_UBAS_borrow_detail_ask_descriptor_ = file->message_type(15);
  static const int niiwoo_UBAS_borrow_detail_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ask, identity_card_),
  };
  niiwoo_UBAS_borrow_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_borrow_detail_ask_descriptor_,
      niiwoo_UBAS_borrow_detail_ask::default_instance_,
      niiwoo_UBAS_borrow_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_borrow_detail_ask));
  niiwoo_UBAS_borrow_detail_ans_descriptor_ = file->message_type(16);
  static const int niiwoo_UBAS_borrow_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ans, borror_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ans, max_overduemoney_),
  };
  niiwoo_UBAS_borrow_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_borrow_detail_ans_descriptor_,
      niiwoo_UBAS_borrow_detail_ans::default_instance_,
      niiwoo_UBAS_borrow_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_borrow_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_borrow_detail_ans));
  user_address_t_descriptor_ = file->message_type(17);
  static const int user_address_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_t, address_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_t, address_),
  };
  user_address_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_address_t_descriptor_,
      user_address_t::default_instance_,
      user_address_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_address_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_address_t));
  user_contact_t_descriptor_ = file->message_type(18);
  static const int user_contact_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_contact_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_contact_t, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_contact_t, is_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_contact_t, delete_time_),
  };
  user_contact_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_contact_t_descriptor_,
      user_contact_t::default_instance_,
      user_contact_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_contact_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_contact_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_contact_t));
  niiwoo_UBAS_info_ask_descriptor_ = file->message_type(19);
  static const int niiwoo_UBAS_info_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ask, identity_card_),
  };
  niiwoo_UBAS_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_info_ask_descriptor_,
      niiwoo_UBAS_info_ask::default_instance_,
      niiwoo_UBAS_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_info_ask));
  niiwoo_UBAS_info_ans_descriptor_ = file->message_type(20);
  static const int niiwoo_UBAS_info_ans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ans, addres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ans, relations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ans, constacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ans, error_),
  };
  niiwoo_UBAS_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_info_ans_descriptor_,
      niiwoo_UBAS_info_ans::default_instance_,
      niiwoo_UBAS_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_info_ans));
  niiwoo_UBAS_coincide_ask_descriptor_ = file->message_type(21);
  static const int niiwoo_UBAS_coincide_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ask, ask_funcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ask, user_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ask, user_2_),
  };
  niiwoo_UBAS_coincide_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_coincide_ask_descriptor_,
      niiwoo_UBAS_coincide_ask::default_instance_,
      niiwoo_UBAS_coincide_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_coincide_ask));
  niiwoo_UBAS_coincide_ans_descriptor_ = file->message_type(22);
  static const int niiwoo_UBAS_coincide_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ans, coincide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ans, result_),
  };
  niiwoo_UBAS_coincide_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niiwoo_UBAS_coincide_ans_descriptor_,
      niiwoo_UBAS_coincide_ans::default_instance_,
      niiwoo_UBAS_coincide_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niiwoo_UBAS_coincide_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niiwoo_UBAS_coincide_ans));
  en_sex_descriptor_ = file->enum_type(0);
  en_marry_descriptor_ = file->enum_type(1);
  en_home_descriptor_ = file->enum_type(2);
  en_user_descriptor_ = file->enum_type(3);
  niiwoo_ask_type_descriptor_ = file->enum_type(4);
  en_apply_status_descriptor_ = file->enum_type(5);
  en_address_type_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UBAS_5fniiwoo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_descriptor_, &user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_ask_descriptor_, &niiwoo_UBAS_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_student_UBAS_ans_descriptor_, &niiwoo_student_UBAS_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_tuandai_UBAS_ans_descriptor_, &niiwoo_tuandai_UBAS_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_no_tuandai_UBAS_ans_descriptor_, &niiwoo_no_tuandai_UBAS_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_ask_descriptor_, &user_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_data_descriptor_, &friend_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_ans_descriptor_, &user_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    address_information_descriptor_, &address_information::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_address_phone_list_ans_descriptor_, &user_address_phone_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_overdue_status_ans_descriptor_, &user_overdue_status_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loan_or_assure_info_descriptor_, &loan_or_assure_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    borrow_info_descriptor_, &borrow_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loan_assure_info_list_ans_descriptor_, &loan_assure_info_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_borrow_info_item_descriptor_, &niiwoo_UBAS_borrow_info_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_borrow_detail_ask_descriptor_, &niiwoo_UBAS_borrow_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_borrow_detail_ans_descriptor_, &niiwoo_UBAS_borrow_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_address_t_descriptor_, &user_address_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_contact_t_descriptor_, &user_contact_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_info_ask_descriptor_, &niiwoo_UBAS_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_info_ans_descriptor_, &niiwoo_UBAS_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_coincide_ask_descriptor_, &niiwoo_UBAS_coincide_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niiwoo_UBAS_coincide_ans_descriptor_, &niiwoo_UBAS_coincide_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto() {
  delete user_info::default_instance_;
  delete user_info_reflection_;
  delete niiwoo_UBAS_ask::default_instance_;
  delete niiwoo_UBAS_ask_reflection_;
  delete niiwoo_student_UBAS_ans::default_instance_;
  delete niiwoo_student_UBAS_ans_reflection_;
  delete niiwoo_tuandai_UBAS_ans::default_instance_;
  delete niiwoo_tuandai_UBAS_ans_reflection_;
  delete niiwoo_no_tuandai_UBAS_ans::default_instance_;
  delete niiwoo_no_tuandai_UBAS_ans_reflection_;
  delete user_info_ask::default_instance_;
  delete user_info_ask_reflection_;
  delete friend_data::default_instance_;
  delete friend_data_reflection_;
  delete user_info_ans::default_instance_;
  delete user_info_ans_reflection_;
  delete address_information::default_instance_;
  delete address_information_reflection_;
  delete user_address_phone_list_ans::default_instance_;
  delete user_address_phone_list_ans_reflection_;
  delete user_overdue_status_ans::default_instance_;
  delete user_overdue_status_ans_reflection_;
  delete loan_or_assure_info::default_instance_;
  delete loan_or_assure_info_reflection_;
  delete borrow_info::default_instance_;
  delete borrow_info_reflection_;
  delete loan_assure_info_list_ans::default_instance_;
  delete loan_assure_info_list_ans_reflection_;
  delete niiwoo_UBAS_borrow_info_item::default_instance_;
  delete niiwoo_UBAS_borrow_info_item_reflection_;
  delete niiwoo_UBAS_borrow_detail_ask::default_instance_;
  delete niiwoo_UBAS_borrow_detail_ask_reflection_;
  delete niiwoo_UBAS_borrow_detail_ans::default_instance_;
  delete niiwoo_UBAS_borrow_detail_ans_reflection_;
  delete user_address_t::default_instance_;
  delete user_address_t_reflection_;
  delete user_contact_t::default_instance_;
  delete user_contact_t_reflection_;
  delete niiwoo_UBAS_info_ask::default_instance_;
  delete niiwoo_UBAS_info_ask_reflection_;
  delete niiwoo_UBAS_info_ans::default_instance_;
  delete niiwoo_UBAS_info_ans_reflection_;
  delete niiwoo_UBAS_coincide_ask::default_instance_;
  delete niiwoo_UBAS_coincide_ask_reflection_;
  delete niiwoo_UBAS_coincide_ans::default_instance_;
  delete niiwoo_UBAS_coincide_ans_reflection_;
}

void protobuf_AddDesc_UBAS_5fniiwoo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021UBAS_niiwoo.proto\022\013UBAS_niiwoo\032\014common"
    ".proto\"\340\002\n\tuser_info\022\017\n\007user_id\030\001 \001(\014\022\025\n"
    "\ruser_nickname\030\002 \001(\014\022\024\n\014college_name\030\003 \001"
    "(\014\022\'\n\017eduction_degree\030\004 \001(\0162\016.common.deg"
    "ree\022 \n\003sex\030\005 \001(\0162\023.UBAS_niiwoo.en_sex\022\013\n"
    "\003age\030\006 \001(\005\022$\n\005marry\030\007 \001(\0162\025.UBAS_niiwoo."
    "en_marry\022\024\n\014card_address\030\010 \001(\014\022\022\n\nhome_s"
    "heng\030\t \001(\014\022\021\n\thome_city\030\n \001(\014\022\026\n\016money_f"
    "or_year\030\013 \001(\005\022\031\n\021mobile_number_sum\030\014 \001(\005"
    "\022\'\n\thome_type\030\r \001(\0162\024.UBAS_niiwoo.en_hom"
    "e\"\251\001\n\017niiwoo_UBAS_ask\022\'\n\tuser_type\030\001 \001(\016"
    "2\024.UBAS_niiwoo.en_user\022\025\n\ridentity_card\030"
    "\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\022\024\n\014mobile_phone"
    "\030\004 \001(\014\022-\n\nask_header\030\005 \001(\0132\031.common.comm"
    "on_ask_header\"\271\002\n\027niiwoo_student_UBAS_an"
    "s\022\017\n\007user_id\030\001 \001(\014\022\025\n\ruser_nickname\030\002 \001("
    "\014\022 \n\003sex\030\003 \001(\0162\023.UBAS_niiwoo.en_sex\022\024\n\014c"
    "ollege_name\030\004 \001(\014\022\'\n\017eduction_degree\030\005 \001"
    "(\0162\016.common.degree\022\027\n\017school_end_date\030\006 "
    "\001(\014\022\024\n\014school_sheng\030\007 \001(\014\022\023\n\013school_city"
    "\030\010 \001(\014\022\024\n\014card_address\030\t \001(\014\022\031\n\021mobile_n"
    "umber_sum\030\n \001(\005\022 \n\005error\030\013 \001(\0132\021.common."
    "errorinfo\"a\n\027niiwoo_tuandai_UBAS_ans\022$\n\004"
    "info\030\001 \001(\0132\026.UBAS_niiwoo.user_info\022 \n\005er"
    "ror\030\002 \001(\0132\021.common.errorinfo\"d\n\032niiwoo_n"
    "o_tuandai_UBAS_ans\022$\n\004info\030\001 \001(\0132\026.UBAS_"
    "niiwoo.user_info\022 \n\005error\030\002 \001(\0132\021.common"
    ".errorinfo\"\260\001\n\ruser_info_ask\022-\n\nask_head"
    "er\030\001 \001(\0132\031.common.common_ask_header\0220\n\nq"
    "uery_type\030\002 \001(\0162\034.UBAS_niiwoo.niiwoo_ask"
    "_type\022\025\n\ridentity_card\030\003 \001(\014\022\021\n\treal_nam"
    "e\030\004 \001(\014\022\024\n\014mobile_phone\030\005 \001(\014\"4\n\013friend_"
    "data\022\023\n\013friend_card\030\001 \001(\014\022\020\n\010is_prove\030\002 "
    "\001(\010\"\236\002\n\ruser_info_ans\022\025\n\ridentity_card\030\001"
    " \001(\014\022\021\n\treal_name\030\002 \001(\014\022\024\n\014mobile_phone\030"
    "\003 \001(\014\022\017\n\007user_id\030\004 \001(\014\022\025\n\ruser_nickname\030"
    "\005 \001(\014\022\024\n\014college_name\030\006 \001(\014\022\'\n\017eduction_"
    "degree\030\007 \001(\0162\016.common.degree\022\020\n\010is_prove"
    "\030\010 \001(\010\0222\n\020friend_data_list\030\t \003(\0132\030.UBAS_"
    "niiwoo.friend_data\022 \n\005error\030\n \001(\0132\021.comm"
    "on.errorinfo\"3\n\023address_information\022\014\n\004n"
    "ame\030\001 \001(\014\022\016\n\006mobile\030\002 \001(\014\"w\n\033user_addres"
    "s_phone_list_ans\0226\n\014address_list\030\001 \003(\0132 "
    ".UBAS_niiwoo.address_information\022 \n\005erro"
    "r\030\002 \001(\0132\021.common.errorinfo\"\177\n\027user_overd"
    "ue_status_ans\022\027\n\017is_loan_overdue\030\001 \001(\010\022\031"
    "\n\021is_assure_overdue\030\002 \001(\010\022\016\n\006income\030\003 \001("
    "\005\022 \n\005error\030\004 \001(\0132\021.common.errorinfo\"6\n\023l"
    "oan_or_assure_info\022\n\n\002id\030\001 \001(\014\022\023\n\013overdu"
    "e_day\030\002 \001(\005\"R\n\013borrow_info\022\016\n\006bid_id\030\001 \001"
    "(\014\022\025\n\roverdue_times\030\002 \001(\005\022\034\n\024should_repa"
    "y_periods\030\003 \001(\005\"\204\002\n\031loan_assure_info_lis"
    "t_ans\022#\n\033Loan_history_bad_debt_count\030\001 \001"
    "(\005\0223\n\tloan_list\030\002 \003(\0132 .UBAS_niiwoo.loan"
    "_or_assure_info\0225\n\013assure_list\030\003 \003(\0132 .U"
    "BAS_niiwoo.loan_or_assure_info\0224\n\022borrow"
    "er_info_list\030\004 \003(\0132\030.UBAS_niiwoo.borrow_"
    "info\022 \n\005error\030\005 \001(\0132\021.common.errorinfo\"\217"
    "\001\n\034niiwoo_UBAS_borrow_info_item\022\025\n\rident"
    "ity_card\030\001 \001(\014\022\016\n\006bid_id\030\002 \001(\014\0222\n\014apply_"
    "status\030\003 \001(\0162\034.UBAS_niiwoo.en_apply_stat"
    "us\022\024\n\014overdue_days\030\004 \001(\005\"e\n\035niiwoo_UBAS_"
    "borrow_detail_ask\022-\n\nask_header\030\001 \001(\0132\031."
    "common.common_ask_header\022\025\n\ridentity_car"
    "d\030\002 \001(\014\"\233\001\n\035niiwoo_UBAS_borrow_detail_an"
    "s\022>\n\013borror_info\030\001 \003(\0132).UBAS_niiwoo.nii"
    "woo_UBAS_borrow_info_item\022 \n\005error\030\002 \001(\013"
    "2\021.common.errorinfo\022\030\n\020max_overduemoney\030"
    "\003 \001(\005\"U\n\016user_address_t\0222\n\014address_type\030"
    "\001 \001(\0162\034.UBAS_niiwoo.en_address_type\022\017\n\007a"
    "ddress\030\002 \001(\014\"U\n\016user_contact_t\022\014\n\004name\030\001"
    " \001(\014\022\r\n\005phone\030\002 \001(\014\022\021\n\tis_delete\030\003 \001(\005\022\023"
    "\n\013delete_time\030\004 \001(\014\"\\\n\024niiwoo_UBAS_info_"
    "ask\022-\n\nask_header\030\001 \001(\0132\031.common.common_"
    "ask_header\022\025\n\ridentity_card\030\002 \001(\014\"\305\001\n\024ni"
    "iwoo_UBAS_info_ans\022+\n\006addres\030\001 \003(\0132\033.UBA"
    "S_niiwoo.user_address_t\022.\n\trelations\030\002 \003"
    "(\0132\033.UBAS_niiwoo.user_contact_t\022.\n\tconst"
    "acts\030\003 \003(\0132\033.UBAS_niiwoo.user_contact_t\022"
    " \n\005error\030\004 \001(\0132\021.common.errorinfo\"\304\001\n\030ni"
    "iwoo_UBAS_coincide_ask\022-\n\nask_header\030\001 \001"
    "(\0132\031.common.common_ask_header\022\023\n\013ask_fun"
    "code\030\002 \001(\005\0221\n\006user_1\030\003 \001(\0132!.common.user"
    "_basic_identification\0221\n\006user_2\030\004 \001(\0132!."
    "common.user_basic_identification\"Q\n\030niiw"
    "oo_UBAS_coincide_ans\022\020\n\010coincide\030\001 \001(\002\022#"
    "\n\006result\030\002 \001(\0132\023.common.result_info*>\n\006e"
    "n_sex\022\022\n\016en_sex_unknown\020\000\022\016\n\nen_sex_man\020"
    "\001\022\020\n\014en_sex_woman\020\002*S\n\010en_marry\022\017\n\013en_ma"
    "rry_no\020\000\022\017\n\013en_marry_ok\020\001\022\020\n\014en_marry_by"
    "e\020\002\022\023\n\017en_death_spouse\020\003*g\n\007en_home\022\021\n\re"
    "n_home_other\020\000\022\016\n\nen_home_my\020\001\022\020\n\014en_hom"
    "e_rent\020\002\022\023\n\017em_home_parents\020\003\022\022\n\016en_home"
    "_public\020\004*K\n\007en_user\022\023\n\017en_user_student\020"
    "\000\022\023\n\017en_user_tuandai\020\001\022\026\n\022en_user_no_tua"
    "ndai\020\002*\206\001\n\017niiwoo_ask_type\022\021\n\rfriend_cre"
    "dit\020\001\022\026\n\022address_phone_list\020\002\022\022\n\016overdue"
    "_status\020\003\022\031\n\025loan_assure_info_list\020\004\022\031\n\025"
    "person_position_track\020\005*\361\002\n\017en_apply_sta"
    "tus\022\017\n\013en_applying\020\000\022\035\n\031en_applying_inve"
    "stigation\020\001\022\024\n\020en_investigating\020\002\022\023\n\017en_"
    "guaranteeing\020\003\022\021\n\ren_toubiaoing\020\004\022\022\n\016en_"
    "bid_success\020\005\022\030\n\024en_repayment_success\020\006\022"
    "\031\n\025en_investigation_fail\020\037\022\031\n\025en_guarant"
    "ee_not_full\020 \022\017\n\013en_not_full\020!\022\032\n\026en_man"
    "nual_discard_bid\020\"\022\025\n\021en_yellow_warning\020"
    ")\022\022\n\016en_red_warning\020*\022\016\n\nen_overdue\020+\022\017\n"
    "\013en_bad_bill\020,\022\023\n\017en_bad_complete\020-*E\n\017e"
    "n_address_type\022\030\n\024en_address_type_work\020\001"
    "\022\030\n\024en_address_type_home\020\002", 4386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UBAS_niiwoo.proto", &protobuf_RegisterTypes);
  user_info::default_instance_ = new user_info();
  niiwoo_UBAS_ask::default_instance_ = new niiwoo_UBAS_ask();
  niiwoo_student_UBAS_ans::default_instance_ = new niiwoo_student_UBAS_ans();
  niiwoo_tuandai_UBAS_ans::default_instance_ = new niiwoo_tuandai_UBAS_ans();
  niiwoo_no_tuandai_UBAS_ans::default_instance_ = new niiwoo_no_tuandai_UBAS_ans();
  user_info_ask::default_instance_ = new user_info_ask();
  friend_data::default_instance_ = new friend_data();
  user_info_ans::default_instance_ = new user_info_ans();
  address_information::default_instance_ = new address_information();
  user_address_phone_list_ans::default_instance_ = new user_address_phone_list_ans();
  user_overdue_status_ans::default_instance_ = new user_overdue_status_ans();
  loan_or_assure_info::default_instance_ = new loan_or_assure_info();
  borrow_info::default_instance_ = new borrow_info();
  loan_assure_info_list_ans::default_instance_ = new loan_assure_info_list_ans();
  niiwoo_UBAS_borrow_info_item::default_instance_ = new niiwoo_UBAS_borrow_info_item();
  niiwoo_UBAS_borrow_detail_ask::default_instance_ = new niiwoo_UBAS_borrow_detail_ask();
  niiwoo_UBAS_borrow_detail_ans::default_instance_ = new niiwoo_UBAS_borrow_detail_ans();
  user_address_t::default_instance_ = new user_address_t();
  user_contact_t::default_instance_ = new user_contact_t();
  niiwoo_UBAS_info_ask::default_instance_ = new niiwoo_UBAS_info_ask();
  niiwoo_UBAS_info_ans::default_instance_ = new niiwoo_UBAS_info_ans();
  niiwoo_UBAS_coincide_ask::default_instance_ = new niiwoo_UBAS_coincide_ask();
  niiwoo_UBAS_coincide_ans::default_instance_ = new niiwoo_UBAS_coincide_ans();
  user_info::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_ask::default_instance_->InitAsDefaultInstance();
  niiwoo_student_UBAS_ans::default_instance_->InitAsDefaultInstance();
  niiwoo_tuandai_UBAS_ans::default_instance_->InitAsDefaultInstance();
  niiwoo_no_tuandai_UBAS_ans::default_instance_->InitAsDefaultInstance();
  user_info_ask::default_instance_->InitAsDefaultInstance();
  friend_data::default_instance_->InitAsDefaultInstance();
  user_info_ans::default_instance_->InitAsDefaultInstance();
  address_information::default_instance_->InitAsDefaultInstance();
  user_address_phone_list_ans::default_instance_->InitAsDefaultInstance();
  user_overdue_status_ans::default_instance_->InitAsDefaultInstance();
  loan_or_assure_info::default_instance_->InitAsDefaultInstance();
  borrow_info::default_instance_->InitAsDefaultInstance();
  loan_assure_info_list_ans::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_borrow_info_item::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_borrow_detail_ask::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_borrow_detail_ans::default_instance_->InitAsDefaultInstance();
  user_address_t::default_instance_->InitAsDefaultInstance();
  user_contact_t::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_info_ask::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_info_ans::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_coincide_ask::default_instance_->InitAsDefaultInstance();
  niiwoo_UBAS_coincide_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UBAS_5fniiwoo_2eproto {
  StaticDescriptorInitializer_UBAS_5fniiwoo_2eproto() {
    protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  }
} static_descriptor_initializer_UBAS_5fniiwoo_2eproto_;
const ::google::protobuf::EnumDescriptor* en_sex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return en_sex_descriptor_;
}
bool en_sex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* en_marry_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return en_marry_descriptor_;
}
bool en_marry_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* en_home_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return en_home_descriptor_;
}
bool en_home_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* en_user_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return en_user_descriptor_;
}
bool en_user_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* niiwoo_ask_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_ask_type_descriptor_;
}
bool niiwoo_ask_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* en_apply_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return en_apply_status_descriptor_;
}
bool en_apply_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 31:
    case 32:
    case 33:
    case 34:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* en_address_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return en_address_type_descriptor_;
}
bool en_address_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int user_info::kUserIdFieldNumber;
const int user_info::kUserNicknameFieldNumber;
const int user_info::kCollegeNameFieldNumber;
const int user_info::kEductionDegreeFieldNumber;
const int user_info::kSexFieldNumber;
const int user_info::kAgeFieldNumber;
const int user_info::kMarryFieldNumber;
const int user_info::kCardAddressFieldNumber;
const int user_info::kHomeShengFieldNumber;
const int user_info::kHomeCityFieldNumber;
const int user_info::kMoneyForYearFieldNumber;
const int user_info::kMobileNumberSumFieldNumber;
const int user_info::kHomeTypeFieldNumber;
#endif  // !_MSC_VER

user_info::user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_info)
}

void user_info::InitAsDefaultInstance() {
}

user_info::user_info(const user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_info)
}

void user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduction_degree_ = 1;
  sex_ = 0;
  age_ = 0;
  marry_ = 0;
  card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_sheng_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_for_year_ = 0;
  mobile_number_sum_ = 0;
  home_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info::~user_info() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_info)
  SharedDtor();
}

void user_info::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete college_name_;
  }
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_address_;
  }
  if (home_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete home_sheng_;
  }
  if (home_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete home_city_;
  }
  if (this != default_instance_) {
  }
}

void user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_descriptor_;
}

const user_info& user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_info* user_info::default_instance_ = NULL;

user_info* user_info::New() const {
  return new user_info;
}

void user_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sex_, marry_);
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_user_nickname()) {
      if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nickname_->clear();
      }
    }
    if (has_college_name()) {
      if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        college_name_->clear();
      }
    }
    eduction_degree_ = 1;
    if (has_card_address()) {
      if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        card_address_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(money_for_year_, home_type_);
    if (has_home_sheng()) {
      if (home_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        home_sheng_->clear();
      }
    }
    if (has_home_city()) {
      if (home_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        home_city_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_nickname;
        break;
      }

      // optional bytes user_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_user_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_college_name;
        break;
      }

      // optional bytes college_name = 3;
      case 3: {
        if (tag == 26) {
         parse_college_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_college_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eduction_degree;
        break;
      }

      // optional .common.degree eduction_degree = 4;
      case 4: {
        if (tag == 32) {
         parse_eduction_degree:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::degree_IsValid(value)) {
            set_eduction_degree(static_cast< ::common::degree >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .UBAS_niiwoo.en_sex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_sex_IsValid(value)) {
            set_sex(static_cast< ::UBAS_niiwoo::en_sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional int32 age = 6;
      case 6: {
        if (tag == 48) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_marry;
        break;
      }

      // optional .UBAS_niiwoo.en_marry marry = 7;
      case 7: {
        if (tag == 56) {
         parse_marry:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_marry_IsValid(value)) {
            set_marry(static_cast< ::UBAS_niiwoo::en_marry >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_card_address;
        break;
      }

      // optional bytes card_address = 8;
      case 8: {
        if (tag == 66) {
         parse_card_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_card_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_home_sheng;
        break;
      }

      // optional bytes home_sheng = 9;
      case 9: {
        if (tag == 74) {
         parse_home_sheng:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_home_sheng()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_home_city;
        break;
      }

      // optional bytes home_city = 10;
      case 10: {
        if (tag == 82) {
         parse_home_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_home_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_money_for_year;
        break;
      }

      // optional int32 money_for_year = 11;
      case 11: {
        if (tag == 88) {
         parse_money_for_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_for_year_)));
          set_has_money_for_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mobile_number_sum;
        break;
      }

      // optional int32 mobile_number_sum = 12;
      case 12: {
        if (tag == 96) {
         parse_mobile_number_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_number_sum_)));
          set_has_mobile_number_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_home_type;
        break;
      }

      // optional .UBAS_niiwoo.en_home home_type = 13;
      case 13: {
        if (tag == 104) {
         parse_home_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_home_IsValid(value)) {
            set_home_type(static_cast< ::UBAS_niiwoo::en_home >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_info)
  return false;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_info)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_nickname(), output);
  }

  // optional bytes college_name = 3;
  if (has_college_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->college_name(), output);
  }

  // optional .common.degree eduction_degree = 4;
  if (has_eduction_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eduction_degree(), output);
  }

  // optional .UBAS_niiwoo.en_sex sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  // optional int32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // optional .UBAS_niiwoo.en_marry marry = 7;
  if (has_marry()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->marry(), output);
  }

  // optional bytes card_address = 8;
  if (has_card_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->card_address(), output);
  }

  // optional bytes home_sheng = 9;
  if (has_home_sheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->home_sheng(), output);
  }

  // optional bytes home_city = 10;
  if (has_home_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->home_city(), output);
  }

  // optional int32 money_for_year = 11;
  if (has_money_for_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->money_for_year(), output);
  }

  // optional int32 mobile_number_sum = 12;
  if (has_mobile_number_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mobile_number_sum(), output);
  }

  // optional .UBAS_niiwoo.en_home home_type = 13;
  if (has_home_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->home_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_info)
}

::google::protobuf::uint8* user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_info)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_nickname(), target);
  }

  // optional bytes college_name = 3;
  if (has_college_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->college_name(), target);
  }

  // optional .common.degree eduction_degree = 4;
  if (has_eduction_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->eduction_degree(), target);
  }

  // optional .UBAS_niiwoo.en_sex sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  // optional int32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // optional .UBAS_niiwoo.en_marry marry = 7;
  if (has_marry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->marry(), target);
  }

  // optional bytes card_address = 8;
  if (has_card_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->card_address(), target);
  }

  // optional bytes home_sheng = 9;
  if (has_home_sheng()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->home_sheng(), target);
  }

  // optional bytes home_city = 10;
  if (has_home_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->home_city(), target);
  }

  // optional int32 money_for_year = 11;
  if (has_money_for_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->money_for_year(), target);
  }

  // optional int32 mobile_number_sum = 12;
  if (has_mobile_number_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mobile_number_sum(), target);
  }

  // optional .UBAS_niiwoo.en_home home_type = 13;
  if (has_home_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->home_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_info)
  return target;
}

int user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes user_nickname = 2;
    if (has_user_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nickname());
    }

    // optional bytes college_name = 3;
    if (has_college_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->college_name());
    }

    // optional .common.degree eduction_degree = 4;
    if (has_eduction_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eduction_degree());
    }

    // optional .UBAS_niiwoo.en_sex sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional .UBAS_niiwoo.en_marry marry = 7;
    if (has_marry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->marry());
    }

    // optional bytes card_address = 8;
    if (has_card_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->card_address());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes home_sheng = 9;
    if (has_home_sheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->home_sheng());
    }

    // optional bytes home_city = 10;
    if (has_home_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->home_city());
    }

    // optional int32 money_for_year = 11;
    if (has_money_for_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_for_year());
    }

    // optional int32 mobile_number_sum = 12;
    if (has_mobile_number_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobile_number_sum());
    }

    // optional .UBAS_niiwoo.en_home home_type = 13;
    if (has_home_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->home_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_nickname()) {
      set_user_nickname(from.user_nickname());
    }
    if (from.has_college_name()) {
      set_college_name(from.college_name());
    }
    if (from.has_eduction_degree()) {
      set_eduction_degree(from.eduction_degree());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_marry()) {
      set_marry(from.marry());
    }
    if (from.has_card_address()) {
      set_card_address(from.card_address());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_home_sheng()) {
      set_home_sheng(from.home_sheng());
    }
    if (from.has_home_city()) {
      set_home_city(from.home_city());
    }
    if (from.has_money_for_year()) {
      set_money_for_year(from.money_for_year());
    }
    if (from.has_mobile_number_sum()) {
      set_mobile_number_sum(from.mobile_number_sum());
    }
    if (from.has_home_type()) {
      set_home_type(from.home_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info::IsInitialized() const {

  return true;
}

void user_info::Swap(user_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_nickname_, other->user_nickname_);
    std::swap(college_name_, other->college_name_);
    std::swap(eduction_degree_, other->eduction_degree_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(marry_, other->marry_);
    std::swap(card_address_, other->card_address_);
    std::swap(home_sheng_, other->home_sheng_);
    std::swap(home_city_, other->home_city_);
    std::swap(money_for_year_, other->money_for_year_);
    std::swap(mobile_number_sum_, other->mobile_number_sum_);
    std::swap(home_type_, other->home_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_descriptor_;
  metadata.reflection = user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_ask::kUserTypeFieldNumber;
const int niiwoo_UBAS_ask::kIdentityCardFieldNumber;
const int niiwoo_UBAS_ask::kRealNameFieldNumber;
const int niiwoo_UBAS_ask::kMobilePhoneFieldNumber;
const int niiwoo_UBAS_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_ask::niiwoo_UBAS_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_ask)
}

void niiwoo_UBAS_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

niiwoo_UBAS_ask::niiwoo_UBAS_ask(const niiwoo_UBAS_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_ask)
}

void niiwoo_UBAS_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_type_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_ask::~niiwoo_UBAS_ask() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_ask)
  SharedDtor();
}

void niiwoo_UBAS_ask::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void niiwoo_UBAS_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_ask_descriptor_;
}

const niiwoo_UBAS_ask& niiwoo_UBAS_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_ask* niiwoo_UBAS_ask::default_instance_ = NULL;

niiwoo_UBAS_ask* niiwoo_UBAS_ask::New() const {
  return new niiwoo_UBAS_ask;
}

void niiwoo_UBAS_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    user_type_ = 0;
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UBAS_niiwoo.en_user user_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_user_IsValid(value)) {
            set_user_type(static_cast< ::UBAS_niiwoo::en_user >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_ask)
  return false;
#undef DO_
}

void niiwoo_UBAS_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_ask)
  // optional .UBAS_niiwoo.en_user user_type = 1;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->user_type(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mobile_phone(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_ask)
}

::google::protobuf::uint8* niiwoo_UBAS_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_ask)
  // optional .UBAS_niiwoo.en_user user_type = 1;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->user_type(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mobile_phone(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_ask)
  return target;
}

int niiwoo_UBAS_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UBAS_niiwoo.en_user user_type = 1;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 4;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_ask::MergeFrom(const niiwoo_UBAS_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_ask::CopyFrom(const niiwoo_UBAS_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_ask::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_ask::Swap(niiwoo_UBAS_ask* other) {
  if (other != this) {
    std::swap(user_type_, other->user_type_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_ask_descriptor_;
  metadata.reflection = niiwoo_UBAS_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_student_UBAS_ans::kUserIdFieldNumber;
const int niiwoo_student_UBAS_ans::kUserNicknameFieldNumber;
const int niiwoo_student_UBAS_ans::kSexFieldNumber;
const int niiwoo_student_UBAS_ans::kCollegeNameFieldNumber;
const int niiwoo_student_UBAS_ans::kEductionDegreeFieldNumber;
const int niiwoo_student_UBAS_ans::kSchoolEndDateFieldNumber;
const int niiwoo_student_UBAS_ans::kSchoolShengFieldNumber;
const int niiwoo_student_UBAS_ans::kSchoolCityFieldNumber;
const int niiwoo_student_UBAS_ans::kCardAddressFieldNumber;
const int niiwoo_student_UBAS_ans::kMobileNumberSumFieldNumber;
const int niiwoo_student_UBAS_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

niiwoo_student_UBAS_ans::niiwoo_student_UBAS_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_student_UBAS_ans)
}

void niiwoo_student_UBAS_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

niiwoo_student_UBAS_ans::niiwoo_student_UBAS_ans(const niiwoo_student_UBAS_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_student_UBAS_ans)
}

void niiwoo_student_UBAS_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduction_degree_ = 1;
  school_end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_sheng_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  school_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_number_sum_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_student_UBAS_ans::~niiwoo_student_UBAS_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  SharedDtor();
}

void niiwoo_student_UBAS_ans::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete college_name_;
  }
  if (school_end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_end_date_;
  }
  if (school_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_sheng_;
  }
  if (school_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_city_;
  }
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_address_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void niiwoo_student_UBAS_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_student_UBAS_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_student_UBAS_ans_descriptor_;
}

const niiwoo_student_UBAS_ans& niiwoo_student_UBAS_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_student_UBAS_ans* niiwoo_student_UBAS_ans::default_instance_ = NULL;

niiwoo_student_UBAS_ans* niiwoo_student_UBAS_ans::New() const {
  return new niiwoo_student_UBAS_ans;
}

void niiwoo_student_UBAS_ans::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_user_nickname()) {
      if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nickname_->clear();
      }
    }
    sex_ = 0;
    if (has_college_name()) {
      if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        college_name_->clear();
      }
    }
    eduction_degree_ = 1;
    if (has_school_end_date()) {
      if (school_end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_end_date_->clear();
      }
    }
    if (has_school_sheng()) {
      if (school_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_sheng_->clear();
      }
    }
    if (has_school_city()) {
      if (school_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        school_city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_card_address()) {
      if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        card_address_->clear();
      }
    }
    mobile_number_sum_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_student_UBAS_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_nickname;
        break;
      }

      // optional bytes user_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_user_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional .UBAS_niiwoo.en_sex sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_sex_IsValid(value)) {
            set_sex(static_cast< ::UBAS_niiwoo::en_sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_college_name;
        break;
      }

      // optional bytes college_name = 4;
      case 4: {
        if (tag == 34) {
         parse_college_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_college_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_eduction_degree;
        break;
      }

      // optional .common.degree eduction_degree = 5;
      case 5: {
        if (tag == 40) {
         parse_eduction_degree:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::degree_IsValid(value)) {
            set_eduction_degree(static_cast< ::common::degree >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_school_end_date;
        break;
      }

      // optional bytes school_end_date = 6;
      case 6: {
        if (tag == 50) {
         parse_school_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_school_sheng;
        break;
      }

      // optional bytes school_sheng = 7;
      case 7: {
        if (tag == 58) {
         parse_school_sheng:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_sheng()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_school_city;
        break;
      }

      // optional bytes school_city = 8;
      case 8: {
        if (tag == 66) {
         parse_school_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_school_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_card_address;
        break;
      }

      // optional bytes card_address = 9;
      case 9: {
        if (tag == 74) {
         parse_card_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_card_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mobile_number_sum;
        break;
      }

      // optional int32 mobile_number_sum = 10;
      case 10: {
        if (tag == 80) {
         parse_mobile_number_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_number_sum_)));
          set_has_mobile_number_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 11;
      case 11: {
        if (tag == 90) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  return false;
#undef DO_
}

void niiwoo_student_UBAS_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_nickname(), output);
  }

  // optional .UBAS_niiwoo.en_sex sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sex(), output);
  }

  // optional bytes college_name = 4;
  if (has_college_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->college_name(), output);
  }

  // optional .common.degree eduction_degree = 5;
  if (has_eduction_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->eduction_degree(), output);
  }

  // optional bytes school_end_date = 6;
  if (has_school_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->school_end_date(), output);
  }

  // optional bytes school_sheng = 7;
  if (has_school_sheng()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->school_sheng(), output);
  }

  // optional bytes school_city = 8;
  if (has_school_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->school_city(), output);
  }

  // optional bytes card_address = 9;
  if (has_card_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->card_address(), output);
  }

  // optional int32 mobile_number_sum = 10;
  if (has_mobile_number_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mobile_number_sum(), output);
  }

  // optional .common.errorinfo error = 11;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_student_UBAS_ans)
}

::google::protobuf::uint8* niiwoo_student_UBAS_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_nickname(), target);
  }

  // optional .UBAS_niiwoo.en_sex sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sex(), target);
  }

  // optional bytes college_name = 4;
  if (has_college_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->college_name(), target);
  }

  // optional .common.degree eduction_degree = 5;
  if (has_eduction_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->eduction_degree(), target);
  }

  // optional bytes school_end_date = 6;
  if (has_school_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->school_end_date(), target);
  }

  // optional bytes school_sheng = 7;
  if (has_school_sheng()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->school_sheng(), target);
  }

  // optional bytes school_city = 8;
  if (has_school_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->school_city(), target);
  }

  // optional bytes card_address = 9;
  if (has_card_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->card_address(), target);
  }

  // optional int32 mobile_number_sum = 10;
  if (has_mobile_number_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mobile_number_sum(), target);
  }

  // optional .common.errorinfo error = 11;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_student_UBAS_ans)
  return target;
}

int niiwoo_student_UBAS_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes user_nickname = 2;
    if (has_user_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nickname());
    }

    // optional .UBAS_niiwoo.en_sex sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional bytes college_name = 4;
    if (has_college_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->college_name());
    }

    // optional .common.degree eduction_degree = 5;
    if (has_eduction_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eduction_degree());
    }

    // optional bytes school_end_date = 6;
    if (has_school_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_end_date());
    }

    // optional bytes school_sheng = 7;
    if (has_school_sheng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_sheng());
    }

    // optional bytes school_city = 8;
    if (has_school_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->school_city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes card_address = 9;
    if (has_card_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->card_address());
    }

    // optional int32 mobile_number_sum = 10;
    if (has_mobile_number_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobile_number_sum());
    }

    // optional .common.errorinfo error = 11;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_student_UBAS_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_student_UBAS_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_student_UBAS_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_student_UBAS_ans::MergeFrom(const niiwoo_student_UBAS_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_nickname()) {
      set_user_nickname(from.user_nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_college_name()) {
      set_college_name(from.college_name());
    }
    if (from.has_eduction_degree()) {
      set_eduction_degree(from.eduction_degree());
    }
    if (from.has_school_end_date()) {
      set_school_end_date(from.school_end_date());
    }
    if (from.has_school_sheng()) {
      set_school_sheng(from.school_sheng());
    }
    if (from.has_school_city()) {
      set_school_city(from.school_city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_card_address()) {
      set_card_address(from.card_address());
    }
    if (from.has_mobile_number_sum()) {
      set_mobile_number_sum(from.mobile_number_sum());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_student_UBAS_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_student_UBAS_ans::CopyFrom(const niiwoo_student_UBAS_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_student_UBAS_ans::IsInitialized() const {

  return true;
}

void niiwoo_student_UBAS_ans::Swap(niiwoo_student_UBAS_ans* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_nickname_, other->user_nickname_);
    std::swap(sex_, other->sex_);
    std::swap(college_name_, other->college_name_);
    std::swap(eduction_degree_, other->eduction_degree_);
    std::swap(school_end_date_, other->school_end_date_);
    std::swap(school_sheng_, other->school_sheng_);
    std::swap(school_city_, other->school_city_);
    std::swap(card_address_, other->card_address_);
    std::swap(mobile_number_sum_, other->mobile_number_sum_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_student_UBAS_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_student_UBAS_ans_descriptor_;
  metadata.reflection = niiwoo_student_UBAS_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_tuandai_UBAS_ans::kInfoFieldNumber;
const int niiwoo_tuandai_UBAS_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

niiwoo_tuandai_UBAS_ans::niiwoo_tuandai_UBAS_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
}

void niiwoo_tuandai_UBAS_ans::InitAsDefaultInstance() {
  info_ = const_cast< ::UBAS_niiwoo::user_info*>(&::UBAS_niiwoo::user_info::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

niiwoo_tuandai_UBAS_ans::niiwoo_tuandai_UBAS_ans(const niiwoo_tuandai_UBAS_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
}

void niiwoo_tuandai_UBAS_ans::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_tuandai_UBAS_ans::~niiwoo_tuandai_UBAS_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  SharedDtor();
}

void niiwoo_tuandai_UBAS_ans::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete error_;
  }
}

void niiwoo_tuandai_UBAS_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_tuandai_UBAS_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_tuandai_UBAS_ans_descriptor_;
}

const niiwoo_tuandai_UBAS_ans& niiwoo_tuandai_UBAS_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_tuandai_UBAS_ans* niiwoo_tuandai_UBAS_ans::default_instance_ = NULL;

niiwoo_tuandai_UBAS_ans* niiwoo_tuandai_UBAS_ans::New() const {
  return new niiwoo_tuandai_UBAS_ans;
}

void niiwoo_tuandai_UBAS_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::UBAS_niiwoo::user_info::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_tuandai_UBAS_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UBAS_niiwoo.user_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  return false;
#undef DO_
}

void niiwoo_tuandai_UBAS_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  // optional .UBAS_niiwoo.user_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
}

::google::protobuf::uint8* niiwoo_tuandai_UBAS_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  // optional .UBAS_niiwoo.user_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
  return target;
}

int niiwoo_tuandai_UBAS_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UBAS_niiwoo.user_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_tuandai_UBAS_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_tuandai_UBAS_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_tuandai_UBAS_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_tuandai_UBAS_ans::MergeFrom(const niiwoo_tuandai_UBAS_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::UBAS_niiwoo::user_info::MergeFrom(from.info());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_tuandai_UBAS_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_tuandai_UBAS_ans::CopyFrom(const niiwoo_tuandai_UBAS_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_tuandai_UBAS_ans::IsInitialized() const {

  return true;
}

void niiwoo_tuandai_UBAS_ans::Swap(niiwoo_tuandai_UBAS_ans* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_tuandai_UBAS_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_tuandai_UBAS_ans_descriptor_;
  metadata.reflection = niiwoo_tuandai_UBAS_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_no_tuandai_UBAS_ans::kInfoFieldNumber;
const int niiwoo_no_tuandai_UBAS_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

niiwoo_no_tuandai_UBAS_ans::niiwoo_no_tuandai_UBAS_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
}

void niiwoo_no_tuandai_UBAS_ans::InitAsDefaultInstance() {
  info_ = const_cast< ::UBAS_niiwoo::user_info*>(&::UBAS_niiwoo::user_info::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

niiwoo_no_tuandai_UBAS_ans::niiwoo_no_tuandai_UBAS_ans(const niiwoo_no_tuandai_UBAS_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
}

void niiwoo_no_tuandai_UBAS_ans::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_no_tuandai_UBAS_ans::~niiwoo_no_tuandai_UBAS_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  SharedDtor();
}

void niiwoo_no_tuandai_UBAS_ans::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete error_;
  }
}

void niiwoo_no_tuandai_UBAS_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_no_tuandai_UBAS_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_no_tuandai_UBAS_ans_descriptor_;
}

const niiwoo_no_tuandai_UBAS_ans& niiwoo_no_tuandai_UBAS_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_no_tuandai_UBAS_ans* niiwoo_no_tuandai_UBAS_ans::default_instance_ = NULL;

niiwoo_no_tuandai_UBAS_ans* niiwoo_no_tuandai_UBAS_ans::New() const {
  return new niiwoo_no_tuandai_UBAS_ans;
}

void niiwoo_no_tuandai_UBAS_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::UBAS_niiwoo::user_info::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_no_tuandai_UBAS_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UBAS_niiwoo.user_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  return false;
#undef DO_
}

void niiwoo_no_tuandai_UBAS_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  // optional .UBAS_niiwoo.user_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
}

::google::protobuf::uint8* niiwoo_no_tuandai_UBAS_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  // optional .UBAS_niiwoo.user_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
  return target;
}

int niiwoo_no_tuandai_UBAS_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UBAS_niiwoo.user_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_no_tuandai_UBAS_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_no_tuandai_UBAS_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_no_tuandai_UBAS_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_no_tuandai_UBAS_ans::MergeFrom(const niiwoo_no_tuandai_UBAS_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::UBAS_niiwoo::user_info::MergeFrom(from.info());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_no_tuandai_UBAS_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_no_tuandai_UBAS_ans::CopyFrom(const niiwoo_no_tuandai_UBAS_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_no_tuandai_UBAS_ans::IsInitialized() const {

  return true;
}

void niiwoo_no_tuandai_UBAS_ans::Swap(niiwoo_no_tuandai_UBAS_ans* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_no_tuandai_UBAS_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_no_tuandai_UBAS_ans_descriptor_;
  metadata.reflection = niiwoo_no_tuandai_UBAS_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_info_ask::kAskHeaderFieldNumber;
const int user_info_ask::kQueryTypeFieldNumber;
const int user_info_ask::kIdentityCardFieldNumber;
const int user_info_ask::kRealNameFieldNumber;
const int user_info_ask::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

user_info_ask::user_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_info_ask)
}

void user_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_info_ask::user_info_ask(const user_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_info_ask)
}

void user_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  query_type_ = 1;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info_ask::~user_info_ask() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_info_ask)
  SharedDtor();
}

void user_info_ask::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_ask_descriptor_;
}

const user_info_ask& user_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_info_ask* user_info_ask::default_instance_ = NULL;

user_info_ask* user_info_ask::New() const {
  return new user_info_ask;
}

void user_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    query_type_ = 1;
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_query_type;
        break;
      }

      // optional .UBAS_niiwoo.niiwoo_ask_type query_type = 2;
      case 2: {
        if (tag == 16) {
         parse_query_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::niiwoo_ask_type_IsValid(value)) {
            set_query_type(static_cast< ::UBAS_niiwoo::niiwoo_ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 3;
      case 3: {
        if (tag == 26) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 4;
      case 4: {
        if (tag == 34) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 5;
      case 5: {
        if (tag == 42) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_info_ask)
  return false;
#undef DO_
}

void user_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .UBAS_niiwoo.niiwoo_ask_type query_type = 2;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->query_type(), output);
  }

  // optional bytes identity_card = 3;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->identity_card(), output);
  }

  // optional bytes real_name = 4;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->real_name(), output);
  }

  // optional bytes mobile_phone = 5;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->mobile_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_info_ask)
}

::google::protobuf::uint8* user_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .UBAS_niiwoo.niiwoo_ask_type query_type = 2;
  if (has_query_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->query_type(), target);
  }

  // optional bytes identity_card = 3;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->identity_card(), target);
  }

  // optional bytes real_name = 4;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->real_name(), target);
  }

  // optional bytes mobile_phone = 5;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->mobile_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_info_ask)
  return target;
}

int user_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .UBAS_niiwoo.niiwoo_ask_type query_type = 2;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
    }

    // optional bytes identity_card = 3;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes real_name = 4;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 5;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info_ask::MergeFrom(const user_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ask::CopyFrom(const user_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ask::IsInitialized() const {

  return true;
}

void user_info_ask::Swap(user_info_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(query_type_, other->query_type_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_ask_descriptor_;
  metadata.reflection = user_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_data::kFriendCardFieldNumber;
const int friend_data::kIsProveFieldNumber;
#endif  // !_MSC_VER

friend_data::friend_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.friend_data)
}

void friend_data::InitAsDefaultInstance() {
}

friend_data::friend_data(const friend_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.friend_data)
}

void friend_data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  friend_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_prove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_data::~friend_data() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.friend_data)
  SharedDtor();
}

void friend_data::SharedDtor() {
  if (friend_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_card_;
  }
  if (this != default_instance_) {
  }
}

void friend_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_data_descriptor_;
}

const friend_data& friend_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

friend_data* friend_data::default_instance_ = NULL;

friend_data* friend_data::New() const {
  return new friend_data;
}

void friend_data::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_friend_card()) {
      if (friend_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_card_->clear();
      }
    }
    is_prove_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.friend_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes friend_card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_prove;
        break;
      }

      // optional bool is_prove = 2;
      case 2: {
        if (tag == 16) {
         parse_is_prove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_prove_)));
          set_has_is_prove();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.friend_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.friend_data)
  return false;
#undef DO_
}

void friend_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.friend_data)
  // optional bytes friend_card = 1;
  if (has_friend_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->friend_card(), output);
  }

  // optional bool is_prove = 2;
  if (has_is_prove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_prove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.friend_data)
}

::google::protobuf::uint8* friend_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.friend_data)
  // optional bytes friend_card = 1;
  if (has_friend_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->friend_card(), target);
  }

  // optional bool is_prove = 2;
  if (has_is_prove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_prove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.friend_data)
  return target;
}

int friend_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes friend_card = 1;
    if (has_friend_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_card());
    }

    // optional bool is_prove = 2;
    if (has_is_prove()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_data::MergeFrom(const friend_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_card()) {
      set_friend_card(from.friend_card());
    }
    if (from.has_is_prove()) {
      set_is_prove(from.is_prove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_data::CopyFrom(const friend_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_data::IsInitialized() const {

  return true;
}

void friend_data::Swap(friend_data* other) {
  if (other != this) {
    std::swap(friend_card_, other->friend_card_);
    std::swap(is_prove_, other->is_prove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_data_descriptor_;
  metadata.reflection = friend_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_info_ans::kIdentityCardFieldNumber;
const int user_info_ans::kRealNameFieldNumber;
const int user_info_ans::kMobilePhoneFieldNumber;
const int user_info_ans::kUserIdFieldNumber;
const int user_info_ans::kUserNicknameFieldNumber;
const int user_info_ans::kCollegeNameFieldNumber;
const int user_info_ans::kEductionDegreeFieldNumber;
const int user_info_ans::kIsProveFieldNumber;
const int user_info_ans::kFriendDataListFieldNumber;
const int user_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_info_ans::user_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_info_ans)
}

void user_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_info_ans::user_info_ans(const user_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_info_ans)
}

void user_info_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eduction_degree_ = 1;
  is_prove_ = false;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info_ans::~user_info_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_info_ans)
  SharedDtor();
}

void user_info_ans::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete college_name_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void user_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_ans_descriptor_;
}

const user_info_ans& user_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_info_ans* user_info_ans::default_instance_ = NULL;

user_info_ans* user_info_ans::New() const {
  return new user_info_ans;
}

void user_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_user_nickname()) {
      if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nickname_->clear();
      }
    }
    if (has_college_name()) {
      if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        college_name_->clear();
      }
    }
    eduction_degree_ = 1;
    is_prove_ = false;
  }
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  friend_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identity_card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 2;
      case 2: {
        if (tag == 18) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_nickname;
        break;
      }

      // optional bytes user_nickname = 5;
      case 5: {
        if (tag == 42) {
         parse_user_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_college_name;
        break;
      }

      // optional bytes college_name = 6;
      case 6: {
        if (tag == 50) {
         parse_college_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_college_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_eduction_degree;
        break;
      }

      // optional .common.degree eduction_degree = 7;
      case 7: {
        if (tag == 56) {
         parse_eduction_degree:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::degree_IsValid(value)) {
            set_eduction_degree(static_cast< ::common::degree >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_prove;
        break;
      }

      // optional bool is_prove = 8;
      case 8: {
        if (tag == 64) {
         parse_is_prove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_prove_)));
          set_has_is_prove();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_friend_data_list;
        break;
      }

      // repeated .UBAS_niiwoo.friend_data friend_data_list = 9;
      case 9: {
        if (tag == 74) {
         parse_friend_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_data_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_friend_data_list;
        if (input->ExpectTag(82)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 10;
      case 10: {
        if (tag == 82) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_info_ans)
  return false;
#undef DO_
}

void user_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_info_ans)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identity_card(), output);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->real_name(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // optional bytes user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user_id(), output);
  }

  // optional bytes user_nickname = 5;
  if (has_user_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->user_nickname(), output);
  }

  // optional bytes college_name = 6;
  if (has_college_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->college_name(), output);
  }

  // optional .common.degree eduction_degree = 7;
  if (has_eduction_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->eduction_degree(), output);
  }

  // optional bool is_prove = 8;
  if (has_is_prove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_prove(), output);
  }

  // repeated .UBAS_niiwoo.friend_data friend_data_list = 9;
  for (int i = 0; i < this->friend_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->friend_data_list(i), output);
  }

  // optional .common.errorinfo error = 10;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_info_ans)
}

::google::protobuf::uint8* user_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_info_ans)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identity_card(), target);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->real_name(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // optional bytes user_id = 4;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_id(), target);
  }

  // optional bytes user_nickname = 5;
  if (has_user_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->user_nickname(), target);
  }

  // optional bytes college_name = 6;
  if (has_college_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->college_name(), target);
  }

  // optional .common.degree eduction_degree = 7;
  if (has_eduction_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->eduction_degree(), target);
  }

  // optional bool is_prove = 8;
  if (has_is_prove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_prove(), target);
  }

  // repeated .UBAS_niiwoo.friend_data friend_data_list = 9;
  for (int i = 0; i < this->friend_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->friend_data_list(i), target);
  }

  // optional .common.errorinfo error = 10;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_info_ans)
  return target;
}

int user_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identity_card = 1;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes real_name = 2;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes user_nickname = 5;
    if (has_user_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nickname());
    }

    // optional bytes college_name = 6;
    if (has_college_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->college_name());
    }

    // optional .common.degree eduction_degree = 7;
    if (has_eduction_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eduction_degree());
    }

    // optional bool is_prove = 8;
    if (has_is_prove()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .common.errorinfo error = 10;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_niiwoo.friend_data friend_data_list = 9;
  total_size += 1 * this->friend_data_list_size();
  for (int i = 0; i < this->friend_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info_ans::MergeFrom(const user_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_data_list_.MergeFrom(from.friend_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_nickname()) {
      set_user_nickname(from.user_nickname());
    }
    if (from.has_college_name()) {
      set_college_name(from.college_name());
    }
    if (from.has_eduction_degree()) {
      set_eduction_degree(from.eduction_degree());
    }
    if (from.has_is_prove()) {
      set_is_prove(from.is_prove());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ans::CopyFrom(const user_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ans::IsInitialized() const {

  return true;
}

void user_info_ans::Swap(user_info_ans* other) {
  if (other != this) {
    std::swap(identity_card_, other->identity_card_);
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_nickname_, other->user_nickname_);
    std::swap(college_name_, other->college_name_);
    std::swap(eduction_degree_, other->eduction_degree_);
    std::swap(is_prove_, other->is_prove_);
    friend_data_list_.Swap(&other->friend_data_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_ans_descriptor_;
  metadata.reflection = user_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int address_information::kNameFieldNumber;
const int address_information::kMobileFieldNumber;
#endif  // !_MSC_VER

address_information::address_information()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.address_information)
}

void address_information::InitAsDefaultInstance() {
}

address_information::address_information(const address_information& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.address_information)
}

void address_information::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

address_information::~address_information() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.address_information)
  SharedDtor();
}

void address_information::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (this != default_instance_) {
  }
}

void address_information::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* address_information::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return address_information_descriptor_;
}

const address_information& address_information::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

address_information* address_information::default_instance_ = NULL;

address_information* address_information::New() const {
  return new address_information;
}

void address_information::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool address_information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.address_information)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile;
        break;
      }

      // optional bytes mobile = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.address_information)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.address_information)
  return false;
#undef DO_
}

void address_information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.address_information)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes mobile = 2;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.address_information)
}

::google::protobuf::uint8* address_information::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.address_information)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes mobile = 2;
  if (has_mobile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.address_information)
  return target;
}

int address_information::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes mobile = 2;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void address_information::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const address_information* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const address_information*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void address_information::MergeFrom(const address_information& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void address_information::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void address_information::CopyFrom(const address_information& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool address_information::IsInitialized() const {

  return true;
}

void address_information::Swap(address_information* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mobile_, other->mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata address_information::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = address_information_descriptor_;
  metadata.reflection = address_information_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_address_phone_list_ans::kAddressListFieldNumber;
const int user_address_phone_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_address_phone_list_ans::user_address_phone_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_address_phone_list_ans)
}

void user_address_phone_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_address_phone_list_ans::user_address_phone_list_ans(const user_address_phone_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_address_phone_list_ans)
}

void user_address_phone_list_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_address_phone_list_ans::~user_address_phone_list_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_address_phone_list_ans)
  SharedDtor();
}

void user_address_phone_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_address_phone_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_address_phone_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_address_phone_list_ans_descriptor_;
}

const user_address_phone_list_ans& user_address_phone_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_address_phone_list_ans* user_address_phone_list_ans::default_instance_ = NULL;

user_address_phone_list_ans* user_address_phone_list_ans::New() const {
  return new user_address_phone_list_ans;
}

void user_address_phone_list_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  address_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_address_phone_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_address_phone_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_niiwoo.address_information address_list = 1;
      case 1: {
        if (tag == 10) {
         parse_address_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_address_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_address_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_address_phone_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_address_phone_list_ans)
  return false;
#undef DO_
}

void user_address_phone_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_address_phone_list_ans)
  // repeated .UBAS_niiwoo.address_information address_list = 1;
  for (int i = 0; i < this->address_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->address_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_address_phone_list_ans)
}

::google::protobuf::uint8* user_address_phone_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_address_phone_list_ans)
  // repeated .UBAS_niiwoo.address_information address_list = 1;
  for (int i = 0; i < this->address_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->address_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_address_phone_list_ans)
  return target;
}

int user_address_phone_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_niiwoo.address_information address_list = 1;
  total_size += 1 * this->address_list_size();
  for (int i = 0; i < this->address_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->address_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_address_phone_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_address_phone_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_address_phone_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_address_phone_list_ans::MergeFrom(const user_address_phone_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_list_.MergeFrom(from.address_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_address_phone_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_address_phone_list_ans::CopyFrom(const user_address_phone_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_address_phone_list_ans::IsInitialized() const {

  return true;
}

void user_address_phone_list_ans::Swap(user_address_phone_list_ans* other) {
  if (other != this) {
    address_list_.Swap(&other->address_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_address_phone_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_address_phone_list_ans_descriptor_;
  metadata.reflection = user_address_phone_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_overdue_status_ans::kIsLoanOverdueFieldNumber;
const int user_overdue_status_ans::kIsAssureOverdueFieldNumber;
const int user_overdue_status_ans::kIncomeFieldNumber;
const int user_overdue_status_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_overdue_status_ans::user_overdue_status_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_overdue_status_ans)
}

void user_overdue_status_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_overdue_status_ans::user_overdue_status_ans(const user_overdue_status_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_overdue_status_ans)
}

void user_overdue_status_ans::SharedCtor() {
  _cached_size_ = 0;
  is_loan_overdue_ = false;
  is_assure_overdue_ = false;
  income_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_overdue_status_ans::~user_overdue_status_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_overdue_status_ans)
  SharedDtor();
}

void user_overdue_status_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_overdue_status_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_overdue_status_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_overdue_status_ans_descriptor_;
}

const user_overdue_status_ans& user_overdue_status_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_overdue_status_ans* user_overdue_status_ans::default_instance_ = NULL;

user_overdue_status_ans* user_overdue_status_ans::New() const {
  return new user_overdue_status_ans;
}

void user_overdue_status_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_overdue_status_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(is_loan_overdue_, income_);
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_overdue_status_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_overdue_status_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_loan_overdue = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_loan_overdue_)));
          set_has_is_loan_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_assure_overdue;
        break;
      }

      // optional bool is_assure_overdue = 2;
      case 2: {
        if (tag == 16) {
         parse_is_assure_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assure_overdue_)));
          set_has_is_assure_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_income;
        break;
      }

      // optional int32 income = 3;
      case 3: {
        if (tag == 24) {
         parse_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &income_)));
          set_has_income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_overdue_status_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_overdue_status_ans)
  return false;
#undef DO_
}

void user_overdue_status_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_overdue_status_ans)
  // optional bool is_loan_overdue = 1;
  if (has_is_loan_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_loan_overdue(), output);
  }

  // optional bool is_assure_overdue = 2;
  if (has_is_assure_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_assure_overdue(), output);
  }

  // optional int32 income = 3;
  if (has_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->income(), output);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_overdue_status_ans)
}

::google::protobuf::uint8* user_overdue_status_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_overdue_status_ans)
  // optional bool is_loan_overdue = 1;
  if (has_is_loan_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_loan_overdue(), target);
  }

  // optional bool is_assure_overdue = 2;
  if (has_is_assure_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_assure_overdue(), target);
  }

  // optional int32 income = 3;
  if (has_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->income(), target);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_overdue_status_ans)
  return target;
}

int user_overdue_status_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_loan_overdue = 1;
    if (has_is_loan_overdue()) {
      total_size += 1 + 1;
    }

    // optional bool is_assure_overdue = 2;
    if (has_is_assure_overdue()) {
      total_size += 1 + 1;
    }

    // optional int32 income = 3;
    if (has_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->income());
    }

    // optional .common.errorinfo error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_overdue_status_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_overdue_status_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_overdue_status_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_overdue_status_ans::MergeFrom(const user_overdue_status_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_loan_overdue()) {
      set_is_loan_overdue(from.is_loan_overdue());
    }
    if (from.has_is_assure_overdue()) {
      set_is_assure_overdue(from.is_assure_overdue());
    }
    if (from.has_income()) {
      set_income(from.income());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_overdue_status_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_overdue_status_ans::CopyFrom(const user_overdue_status_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_overdue_status_ans::IsInitialized() const {

  return true;
}

void user_overdue_status_ans::Swap(user_overdue_status_ans* other) {
  if (other != this) {
    std::swap(is_loan_overdue_, other->is_loan_overdue_);
    std::swap(is_assure_overdue_, other->is_assure_overdue_);
    std::swap(income_, other->income_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_overdue_status_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_overdue_status_ans_descriptor_;
  metadata.reflection = user_overdue_status_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loan_or_assure_info::kIdFieldNumber;
const int loan_or_assure_info::kOverdueDayFieldNumber;
#endif  // !_MSC_VER

loan_or_assure_info::loan_or_assure_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.loan_or_assure_info)
}

void loan_or_assure_info::InitAsDefaultInstance() {
}

loan_or_assure_info::loan_or_assure_info(const loan_or_assure_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.loan_or_assure_info)
}

void loan_or_assure_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overdue_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loan_or_assure_info::~loan_or_assure_info() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.loan_or_assure_info)
  SharedDtor();
}

void loan_or_assure_info::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void loan_or_assure_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loan_or_assure_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loan_or_assure_info_descriptor_;
}

const loan_or_assure_info& loan_or_assure_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

loan_or_assure_info* loan_or_assure_info::default_instance_ = NULL;

loan_or_assure_info* loan_or_assure_info::New() const {
  return new loan_or_assure_info;
}

void loan_or_assure_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    overdue_day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loan_or_assure_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.loan_or_assure_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_overdue_day;
        break;
      }

      // optional int32 overdue_day = 2;
      case 2: {
        if (tag == 16) {
         parse_overdue_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_day_)));
          set_has_overdue_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.loan_or_assure_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.loan_or_assure_info)
  return false;
#undef DO_
}

void loan_or_assure_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.loan_or_assure_info)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 overdue_day = 2;
  if (has_overdue_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->overdue_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.loan_or_assure_info)
}

::google::protobuf::uint8* loan_or_assure_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.loan_or_assure_info)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional int32 overdue_day = 2;
  if (has_overdue_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->overdue_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.loan_or_assure_info)
  return target;
}

int loan_or_assure_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional int32 overdue_day = 2;
    if (has_overdue_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loan_or_assure_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loan_or_assure_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loan_or_assure_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loan_or_assure_info::MergeFrom(const loan_or_assure_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_overdue_day()) {
      set_overdue_day(from.overdue_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loan_or_assure_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loan_or_assure_info::CopyFrom(const loan_or_assure_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loan_or_assure_info::IsInitialized() const {

  return true;
}

void loan_or_assure_info::Swap(loan_or_assure_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(overdue_day_, other->overdue_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loan_or_assure_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loan_or_assure_info_descriptor_;
  metadata.reflection = loan_or_assure_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int borrow_info::kBidIdFieldNumber;
const int borrow_info::kOverdueTimesFieldNumber;
const int borrow_info::kShouldRepayPeriodsFieldNumber;
#endif  // !_MSC_VER

borrow_info::borrow_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.borrow_info)
}

void borrow_info::InitAsDefaultInstance() {
}

borrow_info::borrow_info(const borrow_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.borrow_info)
}

void borrow_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overdue_times_ = 0;
  should_repay_periods_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

borrow_info::~borrow_info() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.borrow_info)
  SharedDtor();
}

void borrow_info::SharedDtor() {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_id_;
  }
  if (this != default_instance_) {
  }
}

void borrow_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* borrow_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return borrow_info_descriptor_;
}

const borrow_info& borrow_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

borrow_info* borrow_info::default_instance_ = NULL;

borrow_info* borrow_info::New() const {
  return new borrow_info;
}

void borrow_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<borrow_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(overdue_times_, should_repay_periods_);
    if (has_bid_id()) {
      if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool borrow_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.borrow_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bid_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_overdue_times;
        break;
      }

      // optional int32 overdue_times = 2;
      case 2: {
        if (tag == 16) {
         parse_overdue_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_times_)));
          set_has_overdue_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_should_repay_periods;
        break;
      }

      // optional int32 should_repay_periods = 3;
      case 3: {
        if (tag == 24) {
         parse_should_repay_periods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &should_repay_periods_)));
          set_has_should_repay_periods();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.borrow_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.borrow_info)
  return false;
#undef DO_
}

void borrow_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.borrow_info)
  // optional bytes bid_id = 1;
  if (has_bid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bid_id(), output);
  }

  // optional int32 overdue_times = 2;
  if (has_overdue_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->overdue_times(), output);
  }

  // optional int32 should_repay_periods = 3;
  if (has_should_repay_periods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->should_repay_periods(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.borrow_info)
}

::google::protobuf::uint8* borrow_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.borrow_info)
  // optional bytes bid_id = 1;
  if (has_bid_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bid_id(), target);
  }

  // optional int32 overdue_times = 2;
  if (has_overdue_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->overdue_times(), target);
  }

  // optional int32 should_repay_periods = 3;
  if (has_should_repay_periods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->should_repay_periods(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.borrow_info)
  return target;
}

int borrow_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bid_id = 1;
    if (has_bid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_id());
    }

    // optional int32 overdue_times = 2;
    if (has_overdue_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_times());
    }

    // optional int32 should_repay_periods = 3;
    if (has_should_repay_periods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->should_repay_periods());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void borrow_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const borrow_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const borrow_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void borrow_info::MergeFrom(const borrow_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid_id()) {
      set_bid_id(from.bid_id());
    }
    if (from.has_overdue_times()) {
      set_overdue_times(from.overdue_times());
    }
    if (from.has_should_repay_periods()) {
      set_should_repay_periods(from.should_repay_periods());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void borrow_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void borrow_info::CopyFrom(const borrow_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool borrow_info::IsInitialized() const {

  return true;
}

void borrow_info::Swap(borrow_info* other) {
  if (other != this) {
    std::swap(bid_id_, other->bid_id_);
    std::swap(overdue_times_, other->overdue_times_);
    std::swap(should_repay_periods_, other->should_repay_periods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata borrow_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = borrow_info_descriptor_;
  metadata.reflection = borrow_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loan_assure_info_list_ans::kLoanHistoryBadDebtCountFieldNumber;
const int loan_assure_info_list_ans::kLoanListFieldNumber;
const int loan_assure_info_list_ans::kAssureListFieldNumber;
const int loan_assure_info_list_ans::kBorrowerInfoListFieldNumber;
const int loan_assure_info_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

loan_assure_info_list_ans::loan_assure_info_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.loan_assure_info_list_ans)
}

void loan_assure_info_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

loan_assure_info_list_ans::loan_assure_info_list_ans(const loan_assure_info_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.loan_assure_info_list_ans)
}

void loan_assure_info_list_ans::SharedCtor() {
  _cached_size_ = 0;
  loan_history_bad_debt_count_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loan_assure_info_list_ans::~loan_assure_info_list_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.loan_assure_info_list_ans)
  SharedDtor();
}

void loan_assure_info_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void loan_assure_info_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loan_assure_info_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loan_assure_info_list_ans_descriptor_;
}

const loan_assure_info_list_ans& loan_assure_info_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

loan_assure_info_list_ans* loan_assure_info_list_ans::default_instance_ = NULL;

loan_assure_info_list_ans* loan_assure_info_list_ans::New() const {
  return new loan_assure_info_list_ans;
}

void loan_assure_info_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 17) {
    loan_history_bad_debt_count_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  loan_list_.Clear();
  assure_list_.Clear();
  borrower_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loan_assure_info_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.loan_assure_info_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Loan_history_bad_debt_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loan_history_bad_debt_count_)));
          set_has_loan_history_bad_debt_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loan_list;
        break;
      }

      // repeated .UBAS_niiwoo.loan_or_assure_info loan_list = 2;
      case 2: {
        if (tag == 18) {
         parse_loan_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loan_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loan_list;
        if (input->ExpectTag(26)) goto parse_assure_list;
        break;
      }

      // repeated .UBAS_niiwoo.loan_or_assure_info assure_list = 3;
      case 3: {
        if (tag == 26) {
         parse_assure_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assure_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_assure_list;
        if (input->ExpectTag(34)) goto parse_borrower_info_list;
        break;
      }

      // repeated .UBAS_niiwoo.borrow_info borrower_info_list = 4;
      case 4: {
        if (tag == 34) {
         parse_borrower_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_borrower_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_borrower_info_list;
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.loan_assure_info_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.loan_assure_info_list_ans)
  return false;
#undef DO_
}

void loan_assure_info_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.loan_assure_info_list_ans)
  // optional int32 Loan_history_bad_debt_count = 1;
  if (has_loan_history_bad_debt_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loan_history_bad_debt_count(), output);
  }

  // repeated .UBAS_niiwoo.loan_or_assure_info loan_list = 2;
  for (int i = 0; i < this->loan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loan_list(i), output);
  }

  // repeated .UBAS_niiwoo.loan_or_assure_info assure_list = 3;
  for (int i = 0; i < this->assure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->assure_list(i), output);
  }

  // repeated .UBAS_niiwoo.borrow_info borrower_info_list = 4;
  for (int i = 0; i < this->borrower_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->borrower_info_list(i), output);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.loan_assure_info_list_ans)
}

::google::protobuf::uint8* loan_assure_info_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.loan_assure_info_list_ans)
  // optional int32 Loan_history_bad_debt_count = 1;
  if (has_loan_history_bad_debt_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loan_history_bad_debt_count(), target);
  }

  // repeated .UBAS_niiwoo.loan_or_assure_info loan_list = 2;
  for (int i = 0; i < this->loan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loan_list(i), target);
  }

  // repeated .UBAS_niiwoo.loan_or_assure_info assure_list = 3;
  for (int i = 0; i < this->assure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->assure_list(i), target);
  }

  // repeated .UBAS_niiwoo.borrow_info borrower_info_list = 4;
  for (int i = 0; i < this->borrower_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->borrower_info_list(i), target);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.loan_assure_info_list_ans)
  return target;
}

int loan_assure_info_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Loan_history_bad_debt_count = 1;
    if (has_loan_history_bad_debt_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loan_history_bad_debt_count());
    }

    // optional .common.errorinfo error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_niiwoo.loan_or_assure_info loan_list = 2;
  total_size += 1 * this->loan_list_size();
  for (int i = 0; i < this->loan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loan_list(i));
  }

  // repeated .UBAS_niiwoo.loan_or_assure_info assure_list = 3;
  total_size += 1 * this->assure_list_size();
  for (int i = 0; i < this->assure_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assure_list(i));
  }

  // repeated .UBAS_niiwoo.borrow_info borrower_info_list = 4;
  total_size += 1 * this->borrower_info_list_size();
  for (int i = 0; i < this->borrower_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->borrower_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loan_assure_info_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loan_assure_info_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loan_assure_info_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loan_assure_info_list_ans::MergeFrom(const loan_assure_info_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  loan_list_.MergeFrom(from.loan_list_);
  assure_list_.MergeFrom(from.assure_list_);
  borrower_info_list_.MergeFrom(from.borrower_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loan_history_bad_debt_count()) {
      set_loan_history_bad_debt_count(from.loan_history_bad_debt_count());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loan_assure_info_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loan_assure_info_list_ans::CopyFrom(const loan_assure_info_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loan_assure_info_list_ans::IsInitialized() const {

  return true;
}

void loan_assure_info_list_ans::Swap(loan_assure_info_list_ans* other) {
  if (other != this) {
    std::swap(loan_history_bad_debt_count_, other->loan_history_bad_debt_count_);
    loan_list_.Swap(&other->loan_list_);
    assure_list_.Swap(&other->assure_list_);
    borrower_info_list_.Swap(&other->borrower_info_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loan_assure_info_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loan_assure_info_list_ans_descriptor_;
  metadata.reflection = loan_assure_info_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_borrow_info_item::kIdentityCardFieldNumber;
const int niiwoo_UBAS_borrow_info_item::kBidIdFieldNumber;
const int niiwoo_UBAS_borrow_info_item::kApplyStatusFieldNumber;
const int niiwoo_UBAS_borrow_info_item::kOverdueDaysFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_borrow_info_item::niiwoo_UBAS_borrow_info_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
}

void niiwoo_UBAS_borrow_info_item::InitAsDefaultInstance() {
}

niiwoo_UBAS_borrow_info_item::niiwoo_UBAS_borrow_info_item(const niiwoo_UBAS_borrow_info_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
}

void niiwoo_UBAS_borrow_info_item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_status_ = 0;
  overdue_days_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_borrow_info_item::~niiwoo_UBAS_borrow_info_item() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  SharedDtor();
}

void niiwoo_UBAS_borrow_info_item::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_id_;
  }
  if (this != default_instance_) {
  }
}

void niiwoo_UBAS_borrow_info_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_borrow_info_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_borrow_info_item_descriptor_;
}

const niiwoo_UBAS_borrow_info_item& niiwoo_UBAS_borrow_info_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_borrow_info_item* niiwoo_UBAS_borrow_info_item::default_instance_ = NULL;

niiwoo_UBAS_borrow_info_item* niiwoo_UBAS_borrow_info_item::New() const {
  return new niiwoo_UBAS_borrow_info_item;
}

void niiwoo_UBAS_borrow_info_item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<niiwoo_UBAS_borrow_info_item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(apply_status_, overdue_days_);
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_bid_id()) {
      if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_borrow_info_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identity_card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid_id;
        break;
      }

      // optional bytes bid_id = 2;
      case 2: {
        if (tag == 18) {
         parse_bid_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_apply_status;
        break;
      }

      // optional .UBAS_niiwoo.en_apply_status apply_status = 3;
      case 3: {
        if (tag == 24) {
         parse_apply_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_apply_status_IsValid(value)) {
            set_apply_status(static_cast< ::UBAS_niiwoo::en_apply_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overdue_days;
        break;
      }

      // optional int32 overdue_days = 4;
      case 4: {
        if (tag == 32) {
         parse_overdue_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_days_)));
          set_has_overdue_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  return false;
#undef DO_
}

void niiwoo_UBAS_borrow_info_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identity_card(), output);
  }

  // optional bytes bid_id = 2;
  if (has_bid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bid_id(), output);
  }

  // optional .UBAS_niiwoo.en_apply_status apply_status = 3;
  if (has_apply_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->apply_status(), output);
  }

  // optional int32 overdue_days = 4;
  if (has_overdue_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overdue_days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
}

::google::protobuf::uint8* niiwoo_UBAS_borrow_info_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identity_card(), target);
  }

  // optional bytes bid_id = 2;
  if (has_bid_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bid_id(), target);
  }

  // optional .UBAS_niiwoo.en_apply_status apply_status = 3;
  if (has_apply_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->apply_status(), target);
  }

  // optional int32 overdue_days = 4;
  if (has_overdue_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->overdue_days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
  return target;
}

int niiwoo_UBAS_borrow_info_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identity_card = 1;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes bid_id = 2;
    if (has_bid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_id());
    }

    // optional .UBAS_niiwoo.en_apply_status apply_status = 3;
    if (has_apply_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apply_status());
    }

    // optional int32 overdue_days = 4;
    if (has_overdue_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_days());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_borrow_info_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_borrow_info_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_borrow_info_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_borrow_info_item::MergeFrom(const niiwoo_UBAS_borrow_info_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_bid_id()) {
      set_bid_id(from.bid_id());
    }
    if (from.has_apply_status()) {
      set_apply_status(from.apply_status());
    }
    if (from.has_overdue_days()) {
      set_overdue_days(from.overdue_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_borrow_info_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_borrow_info_item::CopyFrom(const niiwoo_UBAS_borrow_info_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_borrow_info_item::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_borrow_info_item::Swap(niiwoo_UBAS_borrow_info_item* other) {
  if (other != this) {
    std::swap(identity_card_, other->identity_card_);
    std::swap(bid_id_, other->bid_id_);
    std::swap(apply_status_, other->apply_status_);
    std::swap(overdue_days_, other->overdue_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_borrow_info_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_borrow_info_item_descriptor_;
  metadata.reflection = niiwoo_UBAS_borrow_info_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_borrow_detail_ask::kAskHeaderFieldNumber;
const int niiwoo_UBAS_borrow_detail_ask::kIdentityCardFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_borrow_detail_ask::niiwoo_UBAS_borrow_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
}

void niiwoo_UBAS_borrow_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

niiwoo_UBAS_borrow_detail_ask::niiwoo_UBAS_borrow_detail_ask(const niiwoo_UBAS_borrow_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
}

void niiwoo_UBAS_borrow_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_borrow_detail_ask::~niiwoo_UBAS_borrow_detail_ask() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  SharedDtor();
}

void niiwoo_UBAS_borrow_detail_ask::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void niiwoo_UBAS_borrow_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_borrow_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_borrow_detail_ask_descriptor_;
}

const niiwoo_UBAS_borrow_detail_ask& niiwoo_UBAS_borrow_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_borrow_detail_ask* niiwoo_UBAS_borrow_detail_ask::default_instance_ = NULL;

niiwoo_UBAS_borrow_detail_ask* niiwoo_UBAS_borrow_detail_ask::New() const {
  return new niiwoo_UBAS_borrow_detail_ask;
}

void niiwoo_UBAS_borrow_detail_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_borrow_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  return false;
#undef DO_
}

void niiwoo_UBAS_borrow_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
}

::google::protobuf::uint8* niiwoo_UBAS_borrow_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
  return target;
}

int niiwoo_UBAS_borrow_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_borrow_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_borrow_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_borrow_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_borrow_detail_ask::MergeFrom(const niiwoo_UBAS_borrow_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_borrow_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_borrow_detail_ask::CopyFrom(const niiwoo_UBAS_borrow_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_borrow_detail_ask::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_borrow_detail_ask::Swap(niiwoo_UBAS_borrow_detail_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_borrow_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_borrow_detail_ask_descriptor_;
  metadata.reflection = niiwoo_UBAS_borrow_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_borrow_detail_ans::kBorrorInfoFieldNumber;
const int niiwoo_UBAS_borrow_detail_ans::kErrorFieldNumber;
const int niiwoo_UBAS_borrow_detail_ans::kMaxOverduemoneyFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_borrow_detail_ans::niiwoo_UBAS_borrow_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
}

void niiwoo_UBAS_borrow_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

niiwoo_UBAS_borrow_detail_ans::niiwoo_UBAS_borrow_detail_ans(const niiwoo_UBAS_borrow_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
}

void niiwoo_UBAS_borrow_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  max_overduemoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_borrow_detail_ans::~niiwoo_UBAS_borrow_detail_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  SharedDtor();
}

void niiwoo_UBAS_borrow_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void niiwoo_UBAS_borrow_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_borrow_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_borrow_detail_ans_descriptor_;
}

const niiwoo_UBAS_borrow_detail_ans& niiwoo_UBAS_borrow_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_borrow_detail_ans* niiwoo_UBAS_borrow_detail_ans::default_instance_ = NULL;

niiwoo_UBAS_borrow_detail_ans* niiwoo_UBAS_borrow_detail_ans::New() const {
  return new niiwoo_UBAS_borrow_detail_ans;
}

void niiwoo_UBAS_borrow_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
    max_overduemoney_ = 0;
  }
  borror_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_borrow_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_niiwoo.niiwoo_UBAS_borrow_info_item borror_info = 1;
      case 1: {
        if (tag == 10) {
         parse_borror_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_borror_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_borror_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_overduemoney;
        break;
      }

      // optional int32 max_overduemoney = 3;
      case 3: {
        if (tag == 24) {
         parse_max_overduemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_overduemoney_)));
          set_has_max_overduemoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  return false;
#undef DO_
}

void niiwoo_UBAS_borrow_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  // repeated .UBAS_niiwoo.niiwoo_UBAS_borrow_info_item borror_info = 1;
  for (int i = 0; i < this->borror_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->borror_info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional int32 max_overduemoney = 3;
  if (has_max_overduemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_overduemoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
}

::google::protobuf::uint8* niiwoo_UBAS_borrow_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  // repeated .UBAS_niiwoo.niiwoo_UBAS_borrow_info_item borror_info = 1;
  for (int i = 0; i < this->borror_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->borror_info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional int32 max_overduemoney = 3;
  if (has_max_overduemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_overduemoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
  return target;
}

int niiwoo_UBAS_borrow_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional int32 max_overduemoney = 3;
    if (has_max_overduemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_overduemoney());
    }

  }
  // repeated .UBAS_niiwoo.niiwoo_UBAS_borrow_info_item borror_info = 1;
  total_size += 1 * this->borror_info_size();
  for (int i = 0; i < this->borror_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->borror_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_borrow_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_borrow_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_borrow_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_borrow_detail_ans::MergeFrom(const niiwoo_UBAS_borrow_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  borror_info_.MergeFrom(from.borror_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_max_overduemoney()) {
      set_max_overduemoney(from.max_overduemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_borrow_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_borrow_detail_ans::CopyFrom(const niiwoo_UBAS_borrow_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_borrow_detail_ans::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_borrow_detail_ans::Swap(niiwoo_UBAS_borrow_detail_ans* other) {
  if (other != this) {
    borror_info_.Swap(&other->borror_info_);
    std::swap(error_, other->error_);
    std::swap(max_overduemoney_, other->max_overduemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_borrow_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_borrow_detail_ans_descriptor_;
  metadata.reflection = niiwoo_UBAS_borrow_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_address_t::kAddressTypeFieldNumber;
const int user_address_t::kAddressFieldNumber;
#endif  // !_MSC_VER

user_address_t::user_address_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_address_t)
}

void user_address_t::InitAsDefaultInstance() {
}

user_address_t::user_address_t(const user_address_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_address_t)
}

void user_address_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_type_ = 1;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_address_t::~user_address_t() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_address_t)
  SharedDtor();
}

void user_address_t::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void user_address_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_address_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_address_t_descriptor_;
}

const user_address_t& user_address_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_address_t* user_address_t::default_instance_ = NULL;

user_address_t* user_address_t::New() const {
  return new user_address_t;
}

void user_address_t::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    address_type_ = 1;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_address_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_address_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UBAS_niiwoo.en_address_type address_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_niiwoo::en_address_type_IsValid(value)) {
            set_address_type(static_cast< ::UBAS_niiwoo::en_address_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional bytes address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_address_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_address_t)
  return false;
#undef DO_
}

void user_address_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_address_t)
  // optional .UBAS_niiwoo.en_address_type address_type = 1;
  if (has_address_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->address_type(), output);
  }

  // optional bytes address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_address_t)
}

::google::protobuf::uint8* user_address_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_address_t)
  // optional .UBAS_niiwoo.en_address_type address_type = 1;
  if (has_address_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->address_type(), target);
  }

  // optional bytes address = 2;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_address_t)
  return target;
}

int user_address_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UBAS_niiwoo.en_address_type address_type = 1;
    if (has_address_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_type());
    }

    // optional bytes address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_address_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_address_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_address_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_address_t::MergeFrom(const user_address_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address_type()) {
      set_address_type(from.address_type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_address_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_address_t::CopyFrom(const user_address_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_address_t::IsInitialized() const {

  return true;
}

void user_address_t::Swap(user_address_t* other) {
  if (other != this) {
    std::swap(address_type_, other->address_type_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_address_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_address_t_descriptor_;
  metadata.reflection = user_address_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_contact_t::kNameFieldNumber;
const int user_contact_t::kPhoneFieldNumber;
const int user_contact_t::kIsDeleteFieldNumber;
const int user_contact_t::kDeleteTimeFieldNumber;
#endif  // !_MSC_VER

user_contact_t::user_contact_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.user_contact_t)
}

void user_contact_t::InitAsDefaultInstance() {
}

user_contact_t::user_contact_t(const user_contact_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.user_contact_t)
}

void user_contact_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_delete_ = 0;
  delete_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_contact_t::~user_contact_t() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.user_contact_t)
  SharedDtor();
}

void user_contact_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (delete_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete delete_time_;
  }
  if (this != default_instance_) {
  }
}

void user_contact_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_contact_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_contact_t_descriptor_;
}

const user_contact_t& user_contact_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

user_contact_t* user_contact_t::default_instance_ = NULL;

user_contact_t* user_contact_t::New() const {
  return new user_contact_t;
}

void user_contact_t::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    is_delete_ = 0;
    if (has_delete_time()) {
      if (delete_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        delete_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_contact_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.user_contact_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional bytes phone = 2;
      case 2: {
        if (tag == 18) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_delete;
        break;
      }

      // optional int32 is_delete = 3;
      case 3: {
        if (tag == 24) {
         parse_is_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_delete_)));
          set_has_is_delete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delete_time;
        break;
      }

      // optional bytes delete_time = 4;
      case 4: {
        if (tag == 34) {
         parse_delete_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delete_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.user_contact_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.user_contact_t)
  return false;
#undef DO_
}

void user_contact_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.user_contact_t)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone(), output);
  }

  // optional int32 is_delete = 3;
  if (has_is_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_delete(), output);
  }

  // optional bytes delete_time = 4;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->delete_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.user_contact_t)
}

::google::protobuf::uint8* user_contact_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.user_contact_t)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes phone = 2;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone(), target);
  }

  // optional int32 is_delete = 3;
  if (has_is_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_delete(), target);
  }

  // optional bytes delete_time = 4;
  if (has_delete_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->delete_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.user_contact_t)
  return target;
}

int user_contact_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }

    // optional int32 is_delete = 3;
    if (has_is_delete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_delete());
    }

    // optional bytes delete_time = 4;
    if (has_delete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->delete_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_contact_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_contact_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_contact_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_contact_t::MergeFrom(const user_contact_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_is_delete()) {
      set_is_delete(from.is_delete());
    }
    if (from.has_delete_time()) {
      set_delete_time(from.delete_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_contact_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_contact_t::CopyFrom(const user_contact_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_contact_t::IsInitialized() const {

  return true;
}

void user_contact_t::Swap(user_contact_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(phone_, other->phone_);
    std::swap(is_delete_, other->is_delete_);
    std::swap(delete_time_, other->delete_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_contact_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_contact_t_descriptor_;
  metadata.reflection = user_contact_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_info_ask::kAskHeaderFieldNumber;
const int niiwoo_UBAS_info_ask::kIdentityCardFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_info_ask::niiwoo_UBAS_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_info_ask)
}

void niiwoo_UBAS_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

niiwoo_UBAS_info_ask::niiwoo_UBAS_info_ask(const niiwoo_UBAS_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_info_ask)
}

void niiwoo_UBAS_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_info_ask::~niiwoo_UBAS_info_ask() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  SharedDtor();
}

void niiwoo_UBAS_info_ask::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void niiwoo_UBAS_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_info_ask_descriptor_;
}

const niiwoo_UBAS_info_ask& niiwoo_UBAS_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_info_ask* niiwoo_UBAS_info_ask::default_instance_ = NULL;

niiwoo_UBAS_info_ask* niiwoo_UBAS_info_ask::New() const {
  return new niiwoo_UBAS_info_ask;
}

void niiwoo_UBAS_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 2;
      case 2: {
        if (tag == 18) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  return false;
#undef DO_
}

void niiwoo_UBAS_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->identity_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_info_ask)
}

::google::protobuf::uint8* niiwoo_UBAS_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes identity_card = 2;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->identity_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_info_ask)
  return target;
}

int niiwoo_UBAS_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes identity_card = 2;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_info_ask::MergeFrom(const niiwoo_UBAS_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_info_ask::CopyFrom(const niiwoo_UBAS_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_info_ask::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_info_ask::Swap(niiwoo_UBAS_info_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_info_ask_descriptor_;
  metadata.reflection = niiwoo_UBAS_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_info_ans::kAddresFieldNumber;
const int niiwoo_UBAS_info_ans::kRelationsFieldNumber;
const int niiwoo_UBAS_info_ans::kConstactsFieldNumber;
const int niiwoo_UBAS_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_info_ans::niiwoo_UBAS_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_info_ans)
}

void niiwoo_UBAS_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

niiwoo_UBAS_info_ans::niiwoo_UBAS_info_ans(const niiwoo_UBAS_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_info_ans)
}

void niiwoo_UBAS_info_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_info_ans::~niiwoo_UBAS_info_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  SharedDtor();
}

void niiwoo_UBAS_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void niiwoo_UBAS_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_info_ans_descriptor_;
}

const niiwoo_UBAS_info_ans& niiwoo_UBAS_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_info_ans* niiwoo_UBAS_info_ans::default_instance_ = NULL;

niiwoo_UBAS_info_ans* niiwoo_UBAS_info_ans::New() const {
  return new niiwoo_UBAS_info_ans;
}

void niiwoo_UBAS_info_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  addres_.Clear();
  relations_.Clear();
  constacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_niiwoo.user_address_t addres = 1;
      case 1: {
        if (tag == 10) {
         parse_addres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_addres;
        if (input->ExpectTag(18)) goto parse_relations;
        break;
      }

      // repeated .UBAS_niiwoo.user_contact_t relations = 2;
      case 2: {
        if (tag == 18) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_relations;
        if (input->ExpectTag(26)) goto parse_constacts;
        break;
      }

      // repeated .UBAS_niiwoo.user_contact_t constacts = 3;
      case 3: {
        if (tag == 26) {
         parse_constacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_constacts;
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  return false;
#undef DO_
}

void niiwoo_UBAS_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  // repeated .UBAS_niiwoo.user_address_t addres = 1;
  for (int i = 0; i < this->addres_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addres(i), output);
  }

  // repeated .UBAS_niiwoo.user_contact_t relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relations(i), output);
  }

  // repeated .UBAS_niiwoo.user_contact_t constacts = 3;
  for (int i = 0; i < this->constacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->constacts(i), output);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_info_ans)
}

::google::protobuf::uint8* niiwoo_UBAS_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  // repeated .UBAS_niiwoo.user_address_t addres = 1;
  for (int i = 0; i < this->addres_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addres(i), target);
  }

  // repeated .UBAS_niiwoo.user_contact_t relations = 2;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relations(i), target);
  }

  // repeated .UBAS_niiwoo.user_contact_t constacts = 3;
  for (int i = 0; i < this->constacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->constacts(i), target);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_info_ans)
  return target;
}

int niiwoo_UBAS_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .common.errorinfo error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_niiwoo.user_address_t addres = 1;
  total_size += 1 * this->addres_size();
  for (int i = 0; i < this->addres_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addres(i));
  }

  // repeated .UBAS_niiwoo.user_contact_t relations = 2;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  // repeated .UBAS_niiwoo.user_contact_t constacts = 3;
  total_size += 1 * this->constacts_size();
  for (int i = 0; i < this->constacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constacts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_info_ans::MergeFrom(const niiwoo_UBAS_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  addres_.MergeFrom(from.addres_);
  relations_.MergeFrom(from.relations_);
  constacts_.MergeFrom(from.constacts_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_info_ans::CopyFrom(const niiwoo_UBAS_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_info_ans::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_info_ans::Swap(niiwoo_UBAS_info_ans* other) {
  if (other != this) {
    addres_.Swap(&other->addres_);
    relations_.Swap(&other->relations_);
    constacts_.Swap(&other->constacts_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_info_ans_descriptor_;
  metadata.reflection = niiwoo_UBAS_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_coincide_ask::kAskHeaderFieldNumber;
const int niiwoo_UBAS_coincide_ask::kAskFuncodeFieldNumber;
const int niiwoo_UBAS_coincide_ask::kUser1FieldNumber;
const int niiwoo_UBAS_coincide_ask::kUser2FieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_coincide_ask::niiwoo_UBAS_coincide_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
}

void niiwoo_UBAS_coincide_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
  user_1_ = const_cast< ::common::user_basic_identification*>(&::common::user_basic_identification::default_instance());
  user_2_ = const_cast< ::common::user_basic_identification*>(&::common::user_basic_identification::default_instance());
}

niiwoo_UBAS_coincide_ask::niiwoo_UBAS_coincide_ask(const niiwoo_UBAS_coincide_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
}

void niiwoo_UBAS_coincide_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ask_funcode_ = 0;
  user_1_ = NULL;
  user_2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_coincide_ask::~niiwoo_UBAS_coincide_ask() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  SharedDtor();
}

void niiwoo_UBAS_coincide_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
    delete user_1_;
    delete user_2_;
  }
}

void niiwoo_UBAS_coincide_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_coincide_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_coincide_ask_descriptor_;
}

const niiwoo_UBAS_coincide_ask& niiwoo_UBAS_coincide_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_coincide_ask* niiwoo_UBAS_coincide_ask::default_instance_ = NULL;

niiwoo_UBAS_coincide_ask* niiwoo_UBAS_coincide_ask::New() const {
  return new niiwoo_UBAS_coincide_ask;
}

void niiwoo_UBAS_coincide_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    ask_funcode_ = 0;
    if (has_user_1()) {
      if (user_1_ != NULL) user_1_->::common::user_basic_identification::Clear();
    }
    if (has_user_2()) {
      if (user_2_ != NULL) user_2_->::common::user_basic_identification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_coincide_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ask_funcode;
        break;
      }

      // optional int32 ask_funcode = 2;
      case 2: {
        if (tag == 16) {
         parse_ask_funcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_funcode_)));
          set_has_ask_funcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_1;
        break;
      }

      // optional .common.user_basic_identification user_1 = 3;
      case 3: {
        if (tag == 26) {
         parse_user_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_2;
        break;
      }

      // optional .common.user_basic_identification user_2 = 4;
      case 4: {
        if (tag == 34) {
         parse_user_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  return false;
#undef DO_
}

void niiwoo_UBAS_coincide_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 ask_funcode = 2;
  if (has_ask_funcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ask_funcode(), output);
  }

  // optional .common.user_basic_identification user_1 = 3;
  if (has_user_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_1(), output);
  }

  // optional .common.user_basic_identification user_2 = 4;
  if (has_user_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
}

::google::protobuf::uint8* niiwoo_UBAS_coincide_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 ask_funcode = 2;
  if (has_ask_funcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ask_funcode(), target);
  }

  // optional .common.user_basic_identification user_1 = 3;
  if (has_user_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_1(), target);
  }

  // optional .common.user_basic_identification user_2 = 4;
  if (has_user_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
  return target;
}

int niiwoo_UBAS_coincide_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 ask_funcode = 2;
    if (has_ask_funcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_funcode());
    }

    // optional .common.user_basic_identification user_1 = 3;
    if (has_user_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_1());
    }

    // optional .common.user_basic_identification user_2 = 4;
    if (has_user_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_coincide_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_coincide_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_coincide_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_coincide_ask::MergeFrom(const niiwoo_UBAS_coincide_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_ask_funcode()) {
      set_ask_funcode(from.ask_funcode());
    }
    if (from.has_user_1()) {
      mutable_user_1()->::common::user_basic_identification::MergeFrom(from.user_1());
    }
    if (from.has_user_2()) {
      mutable_user_2()->::common::user_basic_identification::MergeFrom(from.user_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_coincide_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_coincide_ask::CopyFrom(const niiwoo_UBAS_coincide_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_coincide_ask::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_coincide_ask::Swap(niiwoo_UBAS_coincide_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(ask_funcode_, other->ask_funcode_);
    std::swap(user_1_, other->user_1_);
    std::swap(user_2_, other->user_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_coincide_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_coincide_ask_descriptor_;
  metadata.reflection = niiwoo_UBAS_coincide_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niiwoo_UBAS_coincide_ans::kCoincideFieldNumber;
const int niiwoo_UBAS_coincide_ans::kResultFieldNumber;
#endif  // !_MSC_VER

niiwoo_UBAS_coincide_ans::niiwoo_UBAS_coincide_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
}

void niiwoo_UBAS_coincide_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

niiwoo_UBAS_coincide_ans::niiwoo_UBAS_coincide_ans(const niiwoo_UBAS_coincide_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
}

void niiwoo_UBAS_coincide_ans::SharedCtor() {
  _cached_size_ = 0;
  coincide_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niiwoo_UBAS_coincide_ans::~niiwoo_UBAS_coincide_ans() {
  // @@protoc_insertion_point(destructor:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  SharedDtor();
}

void niiwoo_UBAS_coincide_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void niiwoo_UBAS_coincide_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niiwoo_UBAS_coincide_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niiwoo_UBAS_coincide_ans_descriptor_;
}

const niiwoo_UBAS_coincide_ans& niiwoo_UBAS_coincide_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  return *default_instance_;
}

niiwoo_UBAS_coincide_ans* niiwoo_UBAS_coincide_ans::default_instance_ = NULL;

niiwoo_UBAS_coincide_ans* niiwoo_UBAS_coincide_ans::New() const {
  return new niiwoo_UBAS_coincide_ans;
}

void niiwoo_UBAS_coincide_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    coincide_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niiwoo_UBAS_coincide_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float coincide = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coincide_)));
          set_has_coincide();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  return false;
#undef DO_
}

void niiwoo_UBAS_coincide_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  // optional float coincide = 1;
  if (has_coincide()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->coincide(), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
}

::google::protobuf::uint8* niiwoo_UBAS_coincide_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  // optional float coincide = 1;
  if (has_coincide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->coincide(), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
  return target;
}

int niiwoo_UBAS_coincide_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float coincide = 1;
    if (has_coincide()) {
      total_size += 1 + 4;
    }

    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niiwoo_UBAS_coincide_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niiwoo_UBAS_coincide_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niiwoo_UBAS_coincide_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niiwoo_UBAS_coincide_ans::MergeFrom(const niiwoo_UBAS_coincide_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coincide()) {
      set_coincide(from.coincide());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niiwoo_UBAS_coincide_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niiwoo_UBAS_coincide_ans::CopyFrom(const niiwoo_UBAS_coincide_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niiwoo_UBAS_coincide_ans::IsInitialized() const {

  return true;
}

void niiwoo_UBAS_coincide_ans::Swap(niiwoo_UBAS_coincide_ans* other) {
  if (other != this) {
    std::swap(coincide_, other->coincide_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niiwoo_UBAS_coincide_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niiwoo_UBAS_coincide_ans_descriptor_;
  metadata.reflection = niiwoo_UBAS_coincide_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UBAS_niiwoo

// @@protoc_insertion_point(global_scope)
