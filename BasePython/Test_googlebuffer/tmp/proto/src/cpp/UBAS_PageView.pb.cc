// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UBAS_PageView.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UBAS_PageView.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace UBAS_PageView {

namespace {

const ::google::protobuf::Descriptor* user_statistics_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_statistics_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* terminal_model_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  terminal_model_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* terminal_model_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  terminal_model_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* step_business_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  step_business_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* business_track_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  business_track_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* business_track_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  business_track_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_visited_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_visited_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_visited_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_visited_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_visited_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_visited_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_keeptime_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_keeptime_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_keeptime_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_keeptime_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_keeptime_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_keeptime_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_business_track_person_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_business_track_person_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_business_track_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_business_track_content_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_business_track_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_business_track_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_business_track_query_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_business_track_query_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_business_track_query_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_business_track_query_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_access_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_access_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_access_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_access_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_access_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_access_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_duration_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_duration_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_duration_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_duration_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_duration_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_duration_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* step_page_statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  step_page_statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_trace_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_trace_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_trace_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_trace_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* year_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  year_reflection_ = NULL;
const ::google::protobuf::Descriptor* month_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  month_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_commons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_commons_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_invoke_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_invoke_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_business_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_business_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_page_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_page_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_fund_running_water_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_fund_running_water_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_trace_material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_trace_material_reflection_ = NULL;
const ::google::protobuf::Descriptor* contact_person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  contact_person_reflection_ = NULL;
const ::google::protobuf::Descriptor* estate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  estate_reflection_ = NULL;
const ::google::protobuf::Descriptor* estate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  estate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_trace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_trace_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_access_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_access_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_access_details_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_access_details_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* page_access_details_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  page_access_details_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* terminal_model_ask_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* mobile_os_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UBAS_5fPageView_2eproto() {
  protobuf_AddDesc_UBAS_5fPageView_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UBAS_PageView.proto");
  GOOGLE_CHECK(file != NULL);
  user_statistics_data_descriptor_ = file->message_type(0);
  static const int user_statistics_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, statistics_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, users_new_increased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, users_new_increased_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, users_cumulant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, users_cumulant_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, active_users_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, active_users_num_rate_),
  };
  user_statistics_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_statistics_data_descriptor_,
      user_statistics_data::default_instance_,
      user_statistics_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_statistics_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_statistics_data));
  terminal_model_info_ask_descriptor_ = file->message_type(1);
  static const int terminal_model_info_ask_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, total_flag_),
  };
  terminal_model_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      terminal_model_info_ask_descriptor_,
      terminal_model_info_ask::default_instance_,
      terminal_model_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(terminal_model_info_ask));
  terminal_model_info_ans_descriptor_ = file->message_type(2);
  static const int terminal_model_info_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ans, statistics_data_),
  };
  terminal_model_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      terminal_model_info_ans_descriptor_,
      terminal_model_info_ans::default_instance_,
      terminal_model_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(terminal_model_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(terminal_model_info_ans));
  step_business_statistics_descriptor_ = file->message_type(3);
  static const int step_business_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_business_statistics, step_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_business_statistics, user_count_),
  };
  step_business_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      step_business_statistics_descriptor_,
      step_business_statistics::default_instance_,
      step_business_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_business_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_business_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(step_business_statistics));
  business_track_statistics_ask_descriptor_ = file->message_type(4);
  static const int business_track_statistics_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ask, ask_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ask, end_time_),
  };
  business_track_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      business_track_statistics_ask_descriptor_,
      business_track_statistics_ask::default_instance_,
      business_track_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(business_track_statistics_ask));
  business_track_statistics_ans_descriptor_ = file->message_type(5);
  static const int business_track_statistics_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ans, json_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ans, error_),
  };
  business_track_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      business_track_statistics_ans_descriptor_,
      business_track_statistics_ans::default_instance_,
      business_track_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(business_track_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(business_track_statistics_ans));
  page_visited_statistics_descriptor_ = file->message_type(6);
  static const int page_visited_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics, page_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics, visited_count_),
  };
  page_visited_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_visited_statistics_descriptor_,
      page_visited_statistics::default_instance_,
      page_visited_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_visited_statistics));
  page_visited_statistics_ask_descriptor_ = file->message_type(7);
  static const int page_visited_statistics_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ask, ask_header_),
  };
  page_visited_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_visited_statistics_ask_descriptor_,
      page_visited_statistics_ask::default_instance_,
      page_visited_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_visited_statistics_ask));
  page_visited_statistics_ans_descriptor_ = file->message_type(8);
  static const int page_visited_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ans, error_),
  };
  page_visited_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_visited_statistics_ans_descriptor_,
      page_visited_statistics_ans::default_instance_,
      page_visited_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_visited_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_visited_statistics_ans));
  page_keeptime_statistics_descriptor_ = file->message_type(9);
  static const int page_keeptime_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics, page_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics, keeptime_),
  };
  page_keeptime_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_keeptime_statistics_descriptor_,
      page_keeptime_statistics::default_instance_,
      page_keeptime_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_keeptime_statistics));
  page_keeptime_statistics_ask_descriptor_ = file->message_type(10);
  static const int page_keeptime_statistics_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ask, ask_header_),
  };
  page_keeptime_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_keeptime_statistics_ask_descriptor_,
      page_keeptime_statistics_ask::default_instance_,
      page_keeptime_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_keeptime_statistics_ask));
  page_keeptime_statistics_ans_descriptor_ = file->message_type(11);
  static const int page_keeptime_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ans, error_),
  };
  page_keeptime_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_keeptime_statistics_ans_descriptor_,
      page_keeptime_statistics_ans::default_instance_,
      page_keeptime_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_keeptime_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_keeptime_statistics_ans));
  user_business_track_person_info_descriptor_ = file->message_type(12);
  static const int user_business_track_person_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, idcard_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, overdue_status_),
  };
  user_business_track_person_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_business_track_person_info_descriptor_,
      user_business_track_person_info::default_instance_,
      user_business_track_person_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_person_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_business_track_person_info));
  user_business_track_content_descriptor_ = file->message_type(13);
  static const int user_business_track_content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_content, field_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_content, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_content, field_value_),
  };
  user_business_track_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_business_track_content_descriptor_,
      user_business_track_content::default_instance_,
      user_business_track_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_business_track_content));
  user_business_track_item_descriptor_ = file->message_type(14);
  static const int user_business_track_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_item, occur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_item, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_item, track_contents_),
  };
  user_business_track_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_business_track_item_descriptor_,
      user_business_track_item::default_instance_,
      user_business_track_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_business_track_item));
  user_business_track_query_ask_descriptor_ = file->message_type(15);
  static const int user_business_track_query_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ask, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ask, idcard_no_),
  };
  user_business_track_query_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_business_track_query_ask_descriptor_,
      user_business_track_query_ask::default_instance_,
      user_business_track_query_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_business_track_query_ask));
  user_business_track_query_ans_descriptor_ = file->message_type(16);
  static const int user_business_track_query_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ans, track_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ans, error_),
  };
  user_business_track_query_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_business_track_query_ans_descriptor_,
      user_business_track_query_ans::default_instance_,
      user_business_track_query_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_business_track_query_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_business_track_query_ans));
  page_access_statistics_descriptor_ = file->message_type(17);
  static const int page_access_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics, page_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics, access_count_),
  };
  page_access_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_access_statistics_descriptor_,
      page_access_statistics::default_instance_,
      page_access_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_access_statistics));
  page_access_statistics_ask_descriptor_ = file->message_type(18);
  static const int page_access_statistics_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ask, ask_header_),
  };
  page_access_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_access_statistics_ask_descriptor_,
      page_access_statistics_ask::default_instance_,
      page_access_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_access_statistics_ask));
  page_access_statistics_ans_descriptor_ = file->message_type(19);
  static const int page_access_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ans, result_),
  };
  page_access_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_access_statistics_ans_descriptor_,
      page_access_statistics_ans::default_instance_,
      page_access_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_access_statistics_ans));
  page_duration_statistics_descriptor_ = file->message_type(20);
  static const int page_duration_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics, page_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics, duration_),
  };
  page_duration_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_duration_statistics_descriptor_,
      page_duration_statistics::default_instance_,
      page_duration_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_duration_statistics));
  page_duration_statistics_ask_descriptor_ = file->message_type(21);
  static const int page_duration_statistics_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ask, ask_header_),
  };
  page_duration_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_duration_statistics_ask_descriptor_,
      page_duration_statistics_ask::default_instance_,
      page_duration_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_duration_statistics_ask));
  page_duration_statistics_ans_descriptor_ = file->message_type(22);
  static const int page_duration_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ans, result_),
  };
  page_duration_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_duration_statistics_ans_descriptor_,
      page_duration_statistics_ans::default_instance_,
      page_duration_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_duration_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_duration_statistics_ans));
  step_page_statistics_descriptor_ = file->message_type(23);
  static const int step_page_statistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_page_statistics, step_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_page_statistics, access_count_),
  };
  step_page_statistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      step_page_statistics_descriptor_,
      step_page_statistics::default_instance_,
      step_page_statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_page_statistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(step_page_statistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(step_page_statistics));
  page_trace_statistics_ask_descriptor_ = file->message_type(24);
  static const int page_trace_statistics_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, ask_header_),
  };
  page_trace_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_trace_statistics_ask_descriptor_,
      page_trace_statistics_ask::default_instance_,
      page_trace_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_trace_statistics_ask));
  page_trace_statistics_ans_descriptor_ = file->message_type(25);
  static const int page_trace_statistics_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ans, json_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ans, result_),
  };
  page_trace_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_trace_statistics_ans_descriptor_,
      page_trace_statistics_ans::default_instance_,
      page_trace_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_trace_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_trace_statistics_ans));
  opt_trace_ask_descriptor_ = file->message_type(26);
  static const int opt_trace_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, id_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, trace_type_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, ask_header_),
  };
  opt_trace_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_ask_descriptor_,
      opt_trace_ask::default_instance_,
      opt_trace_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_ask));
  opt_trace_ans_descriptor_ = file->message_type(27);
  static const int opt_trace_ans_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, idcard_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, overdue_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, year_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, result_),
  };
  opt_trace_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_ans_descriptor_,
      opt_trace_ans::default_instance_,
      opt_trace_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_ans));
  year_descriptor_ = file->message_type(28);
  static const int year_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(year, year_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(year, month_list_),
  };
  year_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      year_descriptor_,
      year::default_instance_,
      year_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(year, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(year, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(year));
  month_descriptor_ = file->message_type(29);
  static const int month_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month, month_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month, opt_list_),
  };
  month_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      month_descriptor_,
      month::default_instance_,
      month_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(month, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(month));
  opt_trace_descriptor_ = file->message_type(30);
  static const int opt_trace_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, opt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, invoke_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, business_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, page_trace_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, frw_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, material_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, vtrace_),
  };
  opt_trace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_descriptor_,
      opt_trace::default_instance_,
      opt_trace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace));
  opt_trace_commons_descriptor_ = file->message_type(31);
  static const int opt_trace_commons_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, internet_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, client_ip_location_),
  };
  opt_trace_commons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_commons_descriptor_,
      opt_trace_commons::default_instance_,
      opt_trace_commons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_commons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_commons));
  opt_trace_bid_descriptor_ = file->message_type(32);
  static const int opt_trace_bid_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_feerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, bid_deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, diligence_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, diligence_avatar_),
  };
  opt_trace_bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_bid_descriptor_,
      opt_trace_bid::default_instance_,
      opt_trace_bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_bid));
  opt_trace_invoke_descriptor_ = file->message_type(33);
  static const int opt_trace_invoke_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, invoke_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, verify_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, handle_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, invoke_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, handle_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, credit_limit_),
  };
  opt_trace_invoke_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_invoke_descriptor_,
      opt_trace_invoke::default_instance_,
      opt_trace_invoke_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_invoke, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_invoke));
  opt_trace_business_descriptor_ = file->message_type(34);
  static const int opt_trace_business_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, business_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, invest_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, invest_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, guarantee_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, guarantee_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, repay_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, repay_periods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, repay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, repay_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, should_repay_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, viefor_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, viefor_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, viefor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, viefor_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, viefor_idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, borrowman_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, borrowman_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, borrowman_idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, diligenced_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, diligenced_idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, diligenced_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, diligence_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, diligenced_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, gv_borrowman_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, gv_borrowman_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, gv_borrowman_idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, overdue_badbill_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, overdue_badbill_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, overdue_badbill_periods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_borrow_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_borrow_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_borrow_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_borrow_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_borrow_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_repay_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, qiaoqiao_invest_amount_),
  };
  opt_trace_business_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_business_descriptor_,
      opt_trace_business::default_instance_,
      opt_trace_business_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_business, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_business));
  opt_trace_page_descriptor_ = file->message_type(35);
  static const int opt_trace_page_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_page, page_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_page, page_keeptime_),
  };
  opt_trace_page_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_page_descriptor_,
      opt_trace_page::default_instance_,
      opt_trace_page_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_page, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_page, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_page));
  opt_trace_fund_running_water_descriptor_ = file->message_type(36);
  static const int opt_trace_fund_running_water_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, frw_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, frw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, frw_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, frw_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, frw_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, frw_updatetime_),
  };
  opt_trace_fund_running_water_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_fund_running_water_descriptor_,
      opt_trace_fund_running_water::default_instance_,
      opt_trace_fund_running_water_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_fund_running_water, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_fund_running_water));
  opt_trace_material_descriptor_ = file->message_type(37);
  static const int opt_trace_material_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, usertypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, maritalstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, havingchildren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, livingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, livingprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, livingcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, livingarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, livingaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, workcompany_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, yearincomescope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familyprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familycity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familyarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familyaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familycontactno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, familyrelation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, studentschool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, attendingcollege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, studentprofessional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, attendingclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, companyprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, companycity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, companyarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, companyaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, companyphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, workyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, contactperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, estate_list_),
  };
  opt_trace_material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_trace_material_descriptor_,
      opt_trace_material::default_instance_,
      opt_trace_material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_trace_material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_trace_material));
  contact_person_descriptor_ = file->message_type(38);
  static const int contact_person_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_person, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_person, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_person, relation_),
  };
  contact_person_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      contact_person_descriptor_,
      contact_person::default_instance_,
      contact_person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_person, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_person, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(contact_person));
  estate_descriptor_ = file->message_type(39);
  static const int estate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate, estatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate, infos_),
  };
  estate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      estate_descriptor_,
      estate::default_instance_,
      estate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(estate));
  estate_info_descriptor_ = file->message_type(40);
  static const int estate_info_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, purchaseyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, monthavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, housetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, houseprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, housecity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, housearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, houseaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, housespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, housevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, houseloan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, carno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, cartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, carvalue_),
  };
  estate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      estate_info_descriptor_,
      estate_info::default_instance_,
      estate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(estate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(estate_info));
  verify_trace_descriptor_ = file->message_type(41);
  static const int verify_trace_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, usertypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, degreetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, graduateschool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, graduatedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, major_),
  };
  verify_trace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_trace_descriptor_,
      verify_trace::default_instance_,
      verify_trace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_trace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_trace));
  page_access_detail_descriptor_ = file->message_type(42);
  static const int page_access_detail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_detail, page_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_detail, access_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_detail, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_detail, access_count_rate_),
  };
  page_access_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_access_detail_descriptor_,
      page_access_detail::default_instance_,
      page_access_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_access_detail));
  page_access_details_ask_descriptor_ = file->message_type(43);
  static const int page_access_details_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, numofpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, currpageno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, ask_header_),
  };
  page_access_details_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_access_details_ask_descriptor_,
      page_access_details_ask::default_instance_,
      page_access_details_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_access_details_ask));
  page_access_details_ans_descriptor_ = file->message_type(44);
  static const int page_access_details_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ans, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ans, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ans, result_),
  };
  page_access_details_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      page_access_details_ans_descriptor_,
      page_access_details_ans::default_instance_,
      page_access_details_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(page_access_details_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(page_access_details_ans));
  terminal_model_ask_type_descriptor_ = file->enum_type(0);
  mobile_os_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UBAS_5fPageView_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_statistics_data_descriptor_, &user_statistics_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    terminal_model_info_ask_descriptor_, &terminal_model_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    terminal_model_info_ans_descriptor_, &terminal_model_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    step_business_statistics_descriptor_, &step_business_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    business_track_statistics_ask_descriptor_, &business_track_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    business_track_statistics_ans_descriptor_, &business_track_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_visited_statistics_descriptor_, &page_visited_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_visited_statistics_ask_descriptor_, &page_visited_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_visited_statistics_ans_descriptor_, &page_visited_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_keeptime_statistics_descriptor_, &page_keeptime_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_keeptime_statistics_ask_descriptor_, &page_keeptime_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_keeptime_statistics_ans_descriptor_, &page_keeptime_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_business_track_person_info_descriptor_, &user_business_track_person_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_business_track_content_descriptor_, &user_business_track_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_business_track_item_descriptor_, &user_business_track_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_business_track_query_ask_descriptor_, &user_business_track_query_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_business_track_query_ans_descriptor_, &user_business_track_query_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_access_statistics_descriptor_, &page_access_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_access_statistics_ask_descriptor_, &page_access_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_access_statistics_ans_descriptor_, &page_access_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_duration_statistics_descriptor_, &page_duration_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_duration_statistics_ask_descriptor_, &page_duration_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_duration_statistics_ans_descriptor_, &page_duration_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    step_page_statistics_descriptor_, &step_page_statistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_trace_statistics_ask_descriptor_, &page_trace_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_trace_statistics_ans_descriptor_, &page_trace_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_ask_descriptor_, &opt_trace_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_ans_descriptor_, &opt_trace_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    year_descriptor_, &year::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    month_descriptor_, &month::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_descriptor_, &opt_trace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_commons_descriptor_, &opt_trace_commons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_bid_descriptor_, &opt_trace_bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_invoke_descriptor_, &opt_trace_invoke::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_business_descriptor_, &opt_trace_business::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_page_descriptor_, &opt_trace_page::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_fund_running_water_descriptor_, &opt_trace_fund_running_water::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_trace_material_descriptor_, &opt_trace_material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    contact_person_descriptor_, &contact_person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    estate_descriptor_, &estate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    estate_info_descriptor_, &estate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_trace_descriptor_, &verify_trace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_access_detail_descriptor_, &page_access_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_access_details_ask_descriptor_, &page_access_details_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    page_access_details_ans_descriptor_, &page_access_details_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UBAS_5fPageView_2eproto() {
  delete user_statistics_data::default_instance_;
  delete user_statistics_data_reflection_;
  delete terminal_model_info_ask::default_instance_;
  delete terminal_model_info_ask_reflection_;
  delete terminal_model_info_ans::default_instance_;
  delete terminal_model_info_ans_reflection_;
  delete step_business_statistics::default_instance_;
  delete step_business_statistics_reflection_;
  delete business_track_statistics_ask::default_instance_;
  delete business_track_statistics_ask_reflection_;
  delete business_track_statistics_ans::default_instance_;
  delete business_track_statistics_ans_reflection_;
  delete page_visited_statistics::default_instance_;
  delete page_visited_statistics_reflection_;
  delete page_visited_statistics_ask::default_instance_;
  delete page_visited_statistics_ask_reflection_;
  delete page_visited_statistics_ans::default_instance_;
  delete page_visited_statistics_ans_reflection_;
  delete page_keeptime_statistics::default_instance_;
  delete page_keeptime_statistics_reflection_;
  delete page_keeptime_statistics_ask::default_instance_;
  delete page_keeptime_statistics_ask_reflection_;
  delete page_keeptime_statistics_ans::default_instance_;
  delete page_keeptime_statistics_ans_reflection_;
  delete user_business_track_person_info::default_instance_;
  delete user_business_track_person_info_reflection_;
  delete user_business_track_content::default_instance_;
  delete user_business_track_content_reflection_;
  delete user_business_track_item::default_instance_;
  delete user_business_track_item_reflection_;
  delete user_business_track_query_ask::default_instance_;
  delete user_business_track_query_ask_reflection_;
  delete user_business_track_query_ans::default_instance_;
  delete user_business_track_query_ans_reflection_;
  delete page_access_statistics::default_instance_;
  delete page_access_statistics_reflection_;
  delete page_access_statistics_ask::default_instance_;
  delete page_access_statistics_ask_reflection_;
  delete page_access_statistics_ans::default_instance_;
  delete page_access_statistics_ans_reflection_;
  delete page_duration_statistics::default_instance_;
  delete page_duration_statistics_reflection_;
  delete page_duration_statistics_ask::default_instance_;
  delete page_duration_statistics_ask_reflection_;
  delete page_duration_statistics_ans::default_instance_;
  delete page_duration_statistics_ans_reflection_;
  delete step_page_statistics::default_instance_;
  delete step_page_statistics_reflection_;
  delete page_trace_statistics_ask::default_instance_;
  delete page_trace_statistics_ask_reflection_;
  delete page_trace_statistics_ans::default_instance_;
  delete page_trace_statistics_ans_reflection_;
  delete opt_trace_ask::default_instance_;
  delete opt_trace_ask_reflection_;
  delete opt_trace_ans::default_instance_;
  delete opt_trace_ans_reflection_;
  delete year::default_instance_;
  delete year_reflection_;
  delete month::default_instance_;
  delete month_reflection_;
  delete opt_trace::default_instance_;
  delete opt_trace_reflection_;
  delete opt_trace_commons::default_instance_;
  delete opt_trace_commons_reflection_;
  delete opt_trace_bid::default_instance_;
  delete opt_trace_bid_reflection_;
  delete opt_trace_invoke::default_instance_;
  delete opt_trace_invoke_reflection_;
  delete opt_trace_business::default_instance_;
  delete opt_trace_business_reflection_;
  delete opt_trace_page::default_instance_;
  delete opt_trace_page_reflection_;
  delete opt_trace_fund_running_water::default_instance_;
  delete opt_trace_fund_running_water_reflection_;
  delete opt_trace_material::default_instance_;
  delete opt_trace_material_reflection_;
  delete contact_person::default_instance_;
  delete contact_person_reflection_;
  delete estate::default_instance_;
  delete estate_reflection_;
  delete estate_info::default_instance_;
  delete estate_info_reflection_;
  delete verify_trace::default_instance_;
  delete verify_trace_reflection_;
  delete page_access_detail::default_instance_;
  delete page_access_detail_reflection_;
  delete page_access_details_ask::default_instance_;
  delete page_access_details_ask_reflection_;
  delete page_access_details_ans::default_instance_;
  delete page_access_details_ans_reflection_;
}

void protobuf_AddDesc_UBAS_5fPageView_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023UBAS_PageView.proto\022\rUBAS_PageView\032\014co"
    "mmon.proto\"\334\001\n\024user_statistics_data\022\027\n\017s"
    "tatistics_name\030\001 \001(\014\022\033\n\023users_new_increa"
    "sed\030\002 \001(\003\022 \n\030users_new_increased_rate\030\003 "
    "\001(\002\022\026\n\016users_cumulant\030\004 \001(\003\022\033\n\023users_cum"
    "ulant_rate\030\005 \001(\002\022\030\n\020active_users_num\030\006 \001"
    "(\003\022\035\n\025active_users_num_rate\030\007 \001(\002\"\214\002\n\027te"
    "rminal_model_info_ask\0224\n\004type\030\001 \001(\0162&.UB"
    "AS_PageView.terminal_model_ask_type\022.\n\007o"
    "s_type\030\002 \001(\0162\035.UBAS_PageView.mobile_os_t"
    "ype\022\022\n\nstart_time\030\003 \001(\014\022\020\n\010end_time\030\004 \001("
    "\014\022\020\n\010page_num\030\005 \001(\005\022\020\n\010cur_page\030\006 \001(\005\022-\n"
    "\nask_header\030\007 \001(\0132\031.common.common_ask_he"
    "ader\022\022\n\ntotal_flag\030\010 \001(\005\"\217\001\n\027terminal_mo"
    "del_info_ans\022 \n\005error\030\001 \001(\0132\021.common.err"
    "orinfo\022\024\n\014total_number\030\002 \001(\005\022<\n\017statisti"
    "cs_data\030\003 \003(\0132#.UBAS_PageView.user_stati"
    "stics_data\"C\n\030step_business_statistics\022\023"
    "\n\013step_number\030\001 \001(\005\022\022\n\nuser_count\030\002 \001(\005\""
    "\206\001\n\035business_track_statistics_ask\022-\n\nask"
    "_header\030\001 \001(\0132\031.common.common_ask_header"
    "\022\020\n\010ask_type\030\002 \001(\005\022\022\n\nstart_time\030\003 \001(\014\022\020"
    "\n\010end_time\030\004 \001(\014\"\213\001\n\035business_track_stat"
    "istics_ans\0225\n\004info\030\001 \003(\0132\'.UBAS_PageView"
    ".step_business_statistics\022\021\n\tjson_data\030\002"
    " \001(\014\022 \n\005error\030\003 \001(\0132\021.common.errorinfo\"C"
    "\n\027page_visited_statistics\022\021\n\tpage_name\030\001"
    " \001(\014\022\025\n\rvisited_count\030\002 \001(\005\"L\n\033page_visi"
    "ted_statistics_ask\022-\n\nask_header\030\001 \001(\0132\031"
    ".common.common_ask_header\"u\n\033page_visite"
    "d_statistics_ans\0224\n\004list\030\001 \003(\0132&.UBAS_Pa"
    "geView.page_visited_statistics\022 \n\005error\030"
    "\002 \001(\0132\021.common.errorinfo\"\?\n\030page_keeptim"
    "e_statistics\022\021\n\tpage_name\030\001 \001(\014\022\020\n\010keept"
    "ime\030\002 \001(\005\"M\n\034page_keeptime_statistics_as"
    "k\022-\n\nask_header\030\001 \001(\0132\031.common.common_as"
    "k_header\"w\n\034page_keeptime_statistics_ans"
    "\0225\n\004list\030\001 \003(\0132\'.UBAS_PageView.page_keep"
    "time_statistics\022 \n\005error\030\002 \001(\0132\021.common."
    "errorinfo\"\264\001\n\037user_business_track_person"
    "_info\022\016\n\006avatar\030\001 \001(\014\022\021\n\tnick_name\030\002 \001(\014"
    "\022\014\n\004name\030\003 \001(\014\022\016\n\006mobile\030\004 \001(\014\022\021\n\tidcard"
    "_no\030\005 \001(\014\022\030\n\003sex\030\006 \001(\0162\013.common.sex\022\013\n\003a"
    "ge\030\007 \001(\005\022\026\n\016overdue_status\030\010 \001(\010\"X\n\033user"
    "_business_track_content\022\020\n\010field_no\030\001 \001("
    "\005\022\022\n\nfield_name\030\002 \001(\014\022\023\n\013field_value\030\003 \001"
    "(\014\"\204\001\n\030user_business_track_item\022\022\n\noccur"
    "_time\030\001 \001(\014\022\020\n\010business\030\002 \001(\014\022B\n\016track_c"
    "ontents\030\003 \003(\0132*.UBAS_PageView.user_busin"
    "ess_track_content\"q\n\035user_business_track"
    "_query_ask\022-\n\nask_header\030\001 \001(\0132\031.common."
    "common_ask_header\022\016\n\006mobile\030\002 \001(\014\022\021\n\tidc"
    "ard_no\030\003 \001(\014\"\275\001\n\035user_business_track_que"
    "ry_ans\022<\n\004info\030\001 \001(\0132..UBAS_PageView.use"
    "r_business_track_person_info\022<\n\013track_it"
    "ems\030\002 \003(\0132\'.UBAS_PageView.user_business_"
    "track_item\022 \n\005error\030\003 \001(\0132\021.common.error"
    "info\"A\n\026page_access_statistics\022\021\n\tpage_n"
    "ame\030\001 \001(\014\022\024\n\014access_count\030\002 \001(\005\"q\n\032page_"
    "access_statistics_ask\022\022\n\nstart_date\030\001 \001("
    "\014\022\020\n\010end_date\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132"
    "\031.common.common_ask_header\"v\n\032page_acces"
    "s_statistics_ans\0223\n\004list\030\001 \003(\0132%.UBAS_Pa"
    "geView.page_access_statistics\022#\n\006result\030"
    "\002 \001(\0132\023.common.result_info\"\?\n\030page_durat"
    "ion_statistics\022\021\n\tpage_name\030\001 \001(\014\022\020\n\010dur"
    "ation\030\002 \001(\005\"s\n\034page_duration_statistics_"
    "ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001("
    "\014\022-\n\nask_header\030\003 \001(\0132\031.common.common_as"
    "k_header\"z\n\034page_duration_statistics_ans"
    "\0225\n\004list\030\001 \003(\0132\'.UBAS_PageView.page_dura"
    "tion_statistics\022#\n\006result\030\002 \001(\0132\023.common"
    ".result_info\"A\n\024step_page_statistics\022\023\n\013"
    "step_number\030\001 \001(\005\022\024\n\014access_count\030\002 \001(\005\""
    "\223\001\n\031page_trace_statistics_ask\022\022\n\nstart_d"
    "ate\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\021\n\tpage_type"
    "\030\003 \001(\014\022\016\n\006layers\030\004 \001(\005\022-\n\nask_header\030\005 \001"
    "(\0132\031.common.common_ask_header\"\206\001\n\031page_t"
    "race_statistics_ans\0221\n\004info\030\001 \003(\0132#.UBAS"
    "_PageView.step_page_statistics\022\021\n\tjson_d"
    "ata\030\002 \001(\014\022#\n\006result\030\003 \001(\0132\023.common.resul"
    "t_info\"\247\001\n\ropt_trace_ask\022\022\n\nstart_date\030\001"
    " \001(\014\022\020\n\010end_date\030\002 \001(\014\022\024\n\014mobile_phone\030\003"
    " \001(\014\022\022\n\nid_card_no\030\004 \001(\014\022\027\n\017trace_type_l"
    "ist\030\005 \003(\005\022-\n\nask_header\030\006 \001(\0132\031.common.c"
    "ommon_ask_header\"\362\001\n\ropt_trace_ans\022\020\n\010ni"
    "ckname\030\001 \001(\014\022\014\n\004name\030\002 \001(\014\022\013\n\003sex\030\003 \001(\005\022"
    "\013\n\003age\030\004 \001(\014\022\020\n\010identity\030\005 \001(\014\022\021\n\tidcard"
    "_no\030\006 \001(\014\022\r\n\005phone\030\007 \001(\014\022\016\n\006avatar\030\010 \001(\014"
    "\022\026\n\016overdue_status\030\t \001(\014\022&\n\tyear_list\030\n "
    "\003(\0132\023.UBAS_PageView.year\022#\n\006result\030\013 \001(\013"
    "2\023.common.result_info\"C\n\004year\022\021\n\tyear_na"
    "me\030\001 \001(\014\022(\n\nmonth_list\030\002 \003(\0132\024.UBAS_Page"
    "View.month\"G\n\005month\022\022\n\nmonth_name\030\001 \001(\014\022"
    "*\n\010opt_list\030\002 \003(\0132\030.UBAS_PageView.opt_tr"
    "ace\"\333\003\n\topt_trace\022\014\n\004type\030\001 \001(\005\022\020\n\010opt_t"
    "ime\030\002 \001(\014\0221\n\007commons\030\003 \001(\0132 .UBAS_PageVi"
    "ew.opt_trace_commons\022)\n\003bid\030\004 \001(\0132\034.UBAS"
    "_PageView.opt_trace_bid\0225\n\014invoke_trace\030"
    "\005 \001(\0132\037.UBAS_PageView.opt_trace_invoke\0229"
    "\n\016business_trace\030\006 \001(\0132!.UBAS_PageView.o"
    "pt_trace_business\0226\n\017page_trace_list\030\007 \003"
    "(\0132\035.UBAS_PageView.opt_trace_page\022>\n\tfrw"
    "_trace\030\010 \001(\0132+.UBAS_PageView.opt_trace_f"
    "und_running_water\0229\n\016material_trace\030\t \001("
    "\0132!.UBAS_PageView.opt_trace_material\022+\n\006"
    "vtrace\030\n \001(\0132\033.UBAS_PageView.verify_trac"
    "e\"\306\001\n\021opt_trace_commons\022\027\n\017client_locati"
    "on\030\001 \001(\014\022\023\n\013client_type\030\002 \001(\014\022\021\n\tclient_"
    "id\030\003 \001(\014\022\024\n\014client_brand\030\004 \001(\014\022\024\n\014client"
    "_model\030\005 \001(\014\022\025\n\rinternet_type\030\006 \001(\014\022\021\n\tc"
    "lient_ip\030\007 \001(\014\022\032\n\022client_ip_location\030\010 \001"
    "(\014\"\365\001\n\ropt_trace_bid\022\016\n\006bid_id\030\001 \001(\014\022\022\n\n"
    "bid_avatar\030\002 \001(\014\022\024\n\014bid_nickname\030\003 \001(\014\022\020"
    "\n\010bid_time\030\004 \001(\014\022\021\n\tbid_title\030\005 \001(\014\022\022\n\nb"
    "id_amount\030\006 \001(\002\022\020\n\010bid_rate\030\007 \001(\014\022\023\n\013bid"
    "_feerate\030\010 \001(\014\022\024\n\014bid_deadline\030\t \001(\014\022\032\n\022"
    "diligence_nickname\030\n \001(\014\022\030\n\020diligence_av"
    "atar\030\013 \001(\014\"\255\001\n\020opt_trace_invoke\022\023\n\013invok"
    "e_name\030\001 \001(\014\022\025\n\rverify_result\030\002 \001(\005\022\025\n\rh"
    "andle_result\030\003 \001(\005\022\021\n\terror_msg\030\004 \001(\014\022\026\n"
    "\016invoke_version\030\005 \001(\014\022\025\n\rhandle_status\030\006"
    " \001(\005\022\024\n\014credit_limit\030\007 \001(\002\"\326\007\n\022opt_trace"
    "_business\022\025\n\rbusiness_type\030\001 \001(\005\022\023\n\013inve"
    "st_time\030\002 \001(\014\022\025\n\rinvest_amount\030\003 \001(\002\022\026\n\016"
    "guarantee_time\030\004 \001(\014\022\030\n\020guarantee_amount"
    "\030\005 \001(\002\022\024\n\014repay_period\030\006 \001(\005\022\025\n\rrepay_pe"
    "riods\030\007 \001(\005\022\022\n\nrepay_time\030\010 \001(\014\022\024\n\014repay"
    "_amount\030\t \001(\002\022\033\n\023should_repay_amount\030\n \001"
    "(\002\022\025\n\rviefor_avatar\030\013 \001(\014\022\027\n\017viefor_nick"
    "name\030\014 \001(\014\022\023\n\013viefor_name\030\r \001(\014\022\024\n\014viefo"
    "r_phone\030\016 \001(\014\022\025\n\rviefor_idcard\030\017 \001(\014\022\026\n\016"
    "borrowman_name\030\020 \001(\014\022\027\n\017borrowman_phone\030"
    "\021 \001(\014\022\030\n\020borrowman_idcard\030\022 \001(\014\022\027\n\017dilig"
    "enced_name\030\023 \001(\014\022\031\n\021diligenced_idcard\030\024 "
    "\001(\014\022\030\n\020diligenced_phone\030\025 \001(\014\022\032\n\022diligen"
    "ce_location\030\026 \001(\014\022\033\n\023diligenced_location"
    "\030\027 \001(\014\022\031\n\021gv_borrowman_name\030\030 \001(\014\022\032\n\022gv_"
    "borrowman_phone\030\031 \001(\014\022\033\n\023gv_borrowman_id"
    "card\030\032 \001(\014\022\036\n\026overdue_badbill_amount\030\033 \001"
    "(\002\022\036\n\026overdue_badbill_period\030\034 \001(\005\022\037\n\027ov"
    "erdue_badbill_periods\030\035 \001(\005\022 \n\030qiaoqiao_"
    "borrow_nickname\030\036 \001(\014\022\036\n\026qiaoqiao_borrow"
    "_amount\030\037 \001(\002\022\035\n\025qiaoqiao_borrow_usage\030 "
    " \001(\014\022\034\n\024qiaoqiao_borrow_rate\030! \001(\002\022 \n\030qi"
    "aoqiao_borrow_location\030\" \001(\014\022\035\n\025qiaoqiao"
    "_repay_amount\030# \001(\002\022\036\n\026qiaoqiao_invest_a"
    "mount\030$ \001(\002\":\n\016opt_trace_page\022\021\n\tpage_na"
    "me\030\001 \001(\014\022\025\n\rpage_keeptime\030\002 \001(\005\"\225\001\n\034opt_"
    "trace_fund_running_water\022\021\n\tfrw_title\030\001 "
    "\001(\014\022\020\n\010frw_type\030\002 \001(\005\022\022\n\nfrw_amount\030\003 \001("
    "\002\022\022\n\nfrw_status\030\004 \001(\005\022\020\n\010frw_desc\030\005 \001(\014\022"
    "\026\n\016frw_updatetime\030\006 \001(\014\"\232\006\n\022opt_trace_ma"
    "terial\022\014\n\004type\030\001 \001(\005\022\022\n\nUserTypeId\030\002 \001(\005"
    "\022\025\n\rMaritalStatus\030\003 \001(\014\022\026\n\016HavingChildre"
    "n\030\004 \001(\014\022\022\n\nLivingType\030\005 \001(\014\022\026\n\016LivingPro"
    "vince\030\006 \001(\014\022\022\n\nLivingCity\030\007 \001(\014\022\022\n\nLivin"
    "gArea\030\010 \001(\014\022\025\n\rLivingAddress\030\t \001(\014\022\023\n\013Wo"
    "rkCompany\030\n \001(\014\022\027\n\017YearIncomeScope\030\013 \001(\014"
    "\022\026\n\016FamilyProvince\030\014 \001(\014\022\022\n\nFamilyCity\030\r"
    " \001(\014\022\022\n\nFamilyArea\030\016 \001(\014\022\025\n\rFamilyAddres"
    "s\030\017 \001(\014\022\022\n\nFamilyName\030\020 \001(\014\022\027\n\017FamilyCon"
    "tactNo\030\021 \001(\014\022\026\n\016FamilyRelation\030\022 \001(\014\022\025\n\r"
    "StudentSchool\030\023 \001(\014\022\030\n\020AttendingCollege\030"
    "\024 \001(\014\022\033\n\023StudentProfessional\030\025 \001(\014\022\026\n\016At"
    "tendingClass\030\026 \001(\014\022\r\n\005Email\030\027 \001(\014\022\027\n\017Com"
    "panyProvince\030\030 \001(\014\022\023\n\013CompanyCity\030\031 \001(\014\022"
    "\023\n\013CompanyArea\030\032 \001(\014\022\026\n\016CompanyAddress\030\033"
    " \001(\014\022\024\n\014CompanyPhone\030\034 \001(\014\022\022\n\nDepartment"
    "\030\035 \001(\014\022\020\n\010Position\030\036 \001(\014\022\020\n\010WorkYear\030\037 \001"
    "(\014\0224\n\rContactPerson\030  \003(\0132\035.UBAS_PageVie"
    "w.contact_person\022*\n\013estate_list\030! \001(\0132\025."
    "UBAS_PageView.estate\"\?\n\016contact_person\022\014"
    "\n\004Name\030\001 \001(\014\022\r\n\005Phone\030\002 \001(\014\022\020\n\010Relation\030"
    "\003 \001(\014\"G\n\006estate\022\022\n\nEstateType\030\001 \001(\005\022)\n\005i"
    "nfos\030\002 \003(\0132\032.UBAS_PageView.estate_info\"\253"
    "\002\n\013estate_info\022\024\n\014PurchaseYear\030\001 \001(\014\022\r\n\005"
    "Photo\030\002 \001(\014\022\022\n\nSourceType\030\003 \001(\005\022\020\n\010Month"
    "Avg\030\004 \001(\002\022\021\n\tHouseType\030\005 \001(\014\022\025\n\rHousePro"
    "vince\030\006 \001(\014\022\021\n\tHouseCity\030\007 \001(\014\022\021\n\tHouseA"
    "rea\030\010 \001(\014\022\024\n\014HouseAddress\030\t \001(\014\022\022\n\nHouse"
    "Space\030\n \001(\014\022\022\n\nHouseValue\030\013 \001(\005\022\021\n\tHouse"
    "Loan\030\014 \001(\005\022\r\n\005CarNo\030\r \001(\014\022\017\n\007CarType\030\016 \001"
    "(\014\022\020\n\010CarValue\030\017 \001(\005\"\206\001\n\014verify_trace\022\021\n"
    "\tApplyType\030\001 \001(\005\022\022\n\nUserTypeId\030\002 \001(\005\022\022\n\n"
    "DegreeType\030\003 \001(\005\022\026\n\016GraduateSchool\030\004 \001(\014"
    "\022\024\n\014GraduateDate\030\005 \001(\014\022\r\n\005Major\030\006 \001(\014\"j\n"
    "\022page_access_detail\022\021\n\tpage_name\030\001 \001(\014\022\024"
    "\n\014access_count\030\002 \001(\005\022\020\n\010duration\030\003 \001(\005\022\031"
    "\n\021access_count_rate\030\004 \001(\002\"\225\001\n\027page_acces"
    "s_details_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end"
    "_date\030\002 \001(\014\022\021\n\tnumOfPage\030\003 \001(\005\022\022\n\ncurrPa"
    "geNo\030\004 \001(\005\022-\n\nask_header\030\005 \001(\0132\031.common."
    "common_ask_header\"\207\001\n\027page_access_detail"
    "s_ans\022\023\n\013total_count\030\001 \001(\005\0222\n\007details\030\002 "
    "\003(\0132!.UBAS_PageView.page_access_detail\022#"
    "\n\006result\030\003 \001(\0132\023.common.result_info*\241\002\n\027"
    "terminal_model_ask_type\022\026\n\022model_distrib"
    "ution\020\001\022\024\n\020resolution_ratio\020\002\022\023\n\017os_dist"
    "ribution\020\003\022\030\n\024network_distribution\020\004\022\024\n\020"
    "service_provider\020\005\022\032\n\026valuation_distribu"
    "tion\020\006\022\017\n\013region_area\020\007\022\033\n\027occupation_di"
    "stribution\020\010\022\027\n\023income_distribution\020\t\022\031\n"
    "\025property_distribution\020\n\022\025\n\021debt_distrib"
    "ution\020\013*/\n\016mobile_os_type\022\007\n\003All\020\000\022\013\n\007An"
    "droid\020\001\022\007\n\003IOS\020\002", 8216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UBAS_PageView.proto", &protobuf_RegisterTypes);
  user_statistics_data::default_instance_ = new user_statistics_data();
  terminal_model_info_ask::default_instance_ = new terminal_model_info_ask();
  terminal_model_info_ans::default_instance_ = new terminal_model_info_ans();
  step_business_statistics::default_instance_ = new step_business_statistics();
  business_track_statistics_ask::default_instance_ = new business_track_statistics_ask();
  business_track_statistics_ans::default_instance_ = new business_track_statistics_ans();
  page_visited_statistics::default_instance_ = new page_visited_statistics();
  page_visited_statistics_ask::default_instance_ = new page_visited_statistics_ask();
  page_visited_statistics_ans::default_instance_ = new page_visited_statistics_ans();
  page_keeptime_statistics::default_instance_ = new page_keeptime_statistics();
  page_keeptime_statistics_ask::default_instance_ = new page_keeptime_statistics_ask();
  page_keeptime_statistics_ans::default_instance_ = new page_keeptime_statistics_ans();
  user_business_track_person_info::default_instance_ = new user_business_track_person_info();
  user_business_track_content::default_instance_ = new user_business_track_content();
  user_business_track_item::default_instance_ = new user_business_track_item();
  user_business_track_query_ask::default_instance_ = new user_business_track_query_ask();
  user_business_track_query_ans::default_instance_ = new user_business_track_query_ans();
  page_access_statistics::default_instance_ = new page_access_statistics();
  page_access_statistics_ask::default_instance_ = new page_access_statistics_ask();
  page_access_statistics_ans::default_instance_ = new page_access_statistics_ans();
  page_duration_statistics::default_instance_ = new page_duration_statistics();
  page_duration_statistics_ask::default_instance_ = new page_duration_statistics_ask();
  page_duration_statistics_ans::default_instance_ = new page_duration_statistics_ans();
  step_page_statistics::default_instance_ = new step_page_statistics();
  page_trace_statistics_ask::default_instance_ = new page_trace_statistics_ask();
  page_trace_statistics_ans::default_instance_ = new page_trace_statistics_ans();
  opt_trace_ask::default_instance_ = new opt_trace_ask();
  opt_trace_ans::default_instance_ = new opt_trace_ans();
  year::default_instance_ = new year();
  month::default_instance_ = new month();
  opt_trace::default_instance_ = new opt_trace();
  opt_trace_commons::default_instance_ = new opt_trace_commons();
  opt_trace_bid::default_instance_ = new opt_trace_bid();
  opt_trace_invoke::default_instance_ = new opt_trace_invoke();
  opt_trace_business::default_instance_ = new opt_trace_business();
  opt_trace_page::default_instance_ = new opt_trace_page();
  opt_trace_fund_running_water::default_instance_ = new opt_trace_fund_running_water();
  opt_trace_material::default_instance_ = new opt_trace_material();
  contact_person::default_instance_ = new contact_person();
  estate::default_instance_ = new estate();
  estate_info::default_instance_ = new estate_info();
  verify_trace::default_instance_ = new verify_trace();
  page_access_detail::default_instance_ = new page_access_detail();
  page_access_details_ask::default_instance_ = new page_access_details_ask();
  page_access_details_ans::default_instance_ = new page_access_details_ans();
  user_statistics_data::default_instance_->InitAsDefaultInstance();
  terminal_model_info_ask::default_instance_->InitAsDefaultInstance();
  terminal_model_info_ans::default_instance_->InitAsDefaultInstance();
  step_business_statistics::default_instance_->InitAsDefaultInstance();
  business_track_statistics_ask::default_instance_->InitAsDefaultInstance();
  business_track_statistics_ans::default_instance_->InitAsDefaultInstance();
  page_visited_statistics::default_instance_->InitAsDefaultInstance();
  page_visited_statistics_ask::default_instance_->InitAsDefaultInstance();
  page_visited_statistics_ans::default_instance_->InitAsDefaultInstance();
  page_keeptime_statistics::default_instance_->InitAsDefaultInstance();
  page_keeptime_statistics_ask::default_instance_->InitAsDefaultInstance();
  page_keeptime_statistics_ans::default_instance_->InitAsDefaultInstance();
  user_business_track_person_info::default_instance_->InitAsDefaultInstance();
  user_business_track_content::default_instance_->InitAsDefaultInstance();
  user_business_track_item::default_instance_->InitAsDefaultInstance();
  user_business_track_query_ask::default_instance_->InitAsDefaultInstance();
  user_business_track_query_ans::default_instance_->InitAsDefaultInstance();
  page_access_statistics::default_instance_->InitAsDefaultInstance();
  page_access_statistics_ask::default_instance_->InitAsDefaultInstance();
  page_access_statistics_ans::default_instance_->InitAsDefaultInstance();
  page_duration_statistics::default_instance_->InitAsDefaultInstance();
  page_duration_statistics_ask::default_instance_->InitAsDefaultInstance();
  page_duration_statistics_ans::default_instance_->InitAsDefaultInstance();
  step_page_statistics::default_instance_->InitAsDefaultInstance();
  page_trace_statistics_ask::default_instance_->InitAsDefaultInstance();
  page_trace_statistics_ans::default_instance_->InitAsDefaultInstance();
  opt_trace_ask::default_instance_->InitAsDefaultInstance();
  opt_trace_ans::default_instance_->InitAsDefaultInstance();
  year::default_instance_->InitAsDefaultInstance();
  month::default_instance_->InitAsDefaultInstance();
  opt_trace::default_instance_->InitAsDefaultInstance();
  opt_trace_commons::default_instance_->InitAsDefaultInstance();
  opt_trace_bid::default_instance_->InitAsDefaultInstance();
  opt_trace_invoke::default_instance_->InitAsDefaultInstance();
  opt_trace_business::default_instance_->InitAsDefaultInstance();
  opt_trace_page::default_instance_->InitAsDefaultInstance();
  opt_trace_fund_running_water::default_instance_->InitAsDefaultInstance();
  opt_trace_material::default_instance_->InitAsDefaultInstance();
  contact_person::default_instance_->InitAsDefaultInstance();
  estate::default_instance_->InitAsDefaultInstance();
  estate_info::default_instance_->InitAsDefaultInstance();
  verify_trace::default_instance_->InitAsDefaultInstance();
  page_access_detail::default_instance_->InitAsDefaultInstance();
  page_access_details_ask::default_instance_->InitAsDefaultInstance();
  page_access_details_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UBAS_5fPageView_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UBAS_5fPageView_2eproto {
  StaticDescriptorInitializer_UBAS_5fPageView_2eproto() {
    protobuf_AddDesc_UBAS_5fPageView_2eproto();
  }
} static_descriptor_initializer_UBAS_5fPageView_2eproto_;
const ::google::protobuf::EnumDescriptor* terminal_model_ask_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return terminal_model_ask_type_descriptor_;
}
bool terminal_model_ask_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* mobile_os_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mobile_os_type_descriptor_;
}
bool mobile_os_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int user_statistics_data::kStatisticsNameFieldNumber;
const int user_statistics_data::kUsersNewIncreasedFieldNumber;
const int user_statistics_data::kUsersNewIncreasedRateFieldNumber;
const int user_statistics_data::kUsersCumulantFieldNumber;
const int user_statistics_data::kUsersCumulantRateFieldNumber;
const int user_statistics_data::kActiveUsersNumFieldNumber;
const int user_statistics_data::kActiveUsersNumRateFieldNumber;
#endif  // !_MSC_VER

user_statistics_data::user_statistics_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.user_statistics_data)
}

void user_statistics_data::InitAsDefaultInstance() {
}

user_statistics_data::user_statistics_data(const user_statistics_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.user_statistics_data)
}

void user_statistics_data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statistics_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  users_new_increased_ = GOOGLE_LONGLONG(0);
  users_new_increased_rate_ = 0;
  users_cumulant_ = GOOGLE_LONGLONG(0);
  users_cumulant_rate_ = 0;
  active_users_num_ = GOOGLE_LONGLONG(0);
  active_users_num_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_statistics_data::~user_statistics_data() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.user_statistics_data)
  SharedDtor();
}

void user_statistics_data::SharedDtor() {
  if (statistics_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statistics_name_;
  }
  if (this != default_instance_) {
  }
}

void user_statistics_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_statistics_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_statistics_data_descriptor_;
}

const user_statistics_data& user_statistics_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

user_statistics_data* user_statistics_data::default_instance_ = NULL;

user_statistics_data* user_statistics_data::New() const {
  return new user_statistics_data;
}

void user_statistics_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_statistics_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(users_new_increased_, active_users_num_rate_);
    if (has_statistics_name()) {
      if (statistics_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statistics_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_statistics_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.user_statistics_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes statistics_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_statistics_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_users_new_increased;
        break;
      }

      // optional int64 users_new_increased = 2;
      case 2: {
        if (tag == 16) {
         parse_users_new_increased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &users_new_increased_)));
          set_has_users_new_increased();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_users_new_increased_rate;
        break;
      }

      // optional float users_new_increased_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_users_new_increased_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &users_new_increased_rate_)));
          set_has_users_new_increased_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_users_cumulant;
        break;
      }

      // optional int64 users_cumulant = 4;
      case 4: {
        if (tag == 32) {
         parse_users_cumulant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &users_cumulant_)));
          set_has_users_cumulant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_users_cumulant_rate;
        break;
      }

      // optional float users_cumulant_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_users_cumulant_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &users_cumulant_rate_)));
          set_has_users_cumulant_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_active_users_num;
        break;
      }

      // optional int64 active_users_num = 6;
      case 6: {
        if (tag == 48) {
         parse_active_users_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_users_num_)));
          set_has_active_users_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_active_users_num_rate;
        break;
      }

      // optional float active_users_num_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_active_users_num_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &active_users_num_rate_)));
          set_has_active_users_num_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.user_statistics_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.user_statistics_data)
  return false;
#undef DO_
}

void user_statistics_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.user_statistics_data)
  // optional bytes statistics_name = 1;
  if (has_statistics_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->statistics_name(), output);
  }

  // optional int64 users_new_increased = 2;
  if (has_users_new_increased()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->users_new_increased(), output);
  }

  // optional float users_new_increased_rate = 3;
  if (has_users_new_increased_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->users_new_increased_rate(), output);
  }

  // optional int64 users_cumulant = 4;
  if (has_users_cumulant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->users_cumulant(), output);
  }

  // optional float users_cumulant_rate = 5;
  if (has_users_cumulant_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->users_cumulant_rate(), output);
  }

  // optional int64 active_users_num = 6;
  if (has_active_users_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->active_users_num(), output);
  }

  // optional float active_users_num_rate = 7;
  if (has_active_users_num_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->active_users_num_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.user_statistics_data)
}

::google::protobuf::uint8* user_statistics_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.user_statistics_data)
  // optional bytes statistics_name = 1;
  if (has_statistics_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->statistics_name(), target);
  }

  // optional int64 users_new_increased = 2;
  if (has_users_new_increased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->users_new_increased(), target);
  }

  // optional float users_new_increased_rate = 3;
  if (has_users_new_increased_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->users_new_increased_rate(), target);
  }

  // optional int64 users_cumulant = 4;
  if (has_users_cumulant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->users_cumulant(), target);
  }

  // optional float users_cumulant_rate = 5;
  if (has_users_cumulant_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->users_cumulant_rate(), target);
  }

  // optional int64 active_users_num = 6;
  if (has_active_users_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->active_users_num(), target);
  }

  // optional float active_users_num_rate = 7;
  if (has_active_users_num_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->active_users_num_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.user_statistics_data)
  return target;
}

int user_statistics_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes statistics_name = 1;
    if (has_statistics_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->statistics_name());
    }

    // optional int64 users_new_increased = 2;
    if (has_users_new_increased()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->users_new_increased());
    }

    // optional float users_new_increased_rate = 3;
    if (has_users_new_increased_rate()) {
      total_size += 1 + 4;
    }

    // optional int64 users_cumulant = 4;
    if (has_users_cumulant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->users_cumulant());
    }

    // optional float users_cumulant_rate = 5;
    if (has_users_cumulant_rate()) {
      total_size += 1 + 4;
    }

    // optional int64 active_users_num = 6;
    if (has_active_users_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_users_num());
    }

    // optional float active_users_num_rate = 7;
    if (has_active_users_num_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_statistics_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_statistics_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_statistics_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_statistics_data::MergeFrom(const user_statistics_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statistics_name()) {
      set_statistics_name(from.statistics_name());
    }
    if (from.has_users_new_increased()) {
      set_users_new_increased(from.users_new_increased());
    }
    if (from.has_users_new_increased_rate()) {
      set_users_new_increased_rate(from.users_new_increased_rate());
    }
    if (from.has_users_cumulant()) {
      set_users_cumulant(from.users_cumulant());
    }
    if (from.has_users_cumulant_rate()) {
      set_users_cumulant_rate(from.users_cumulant_rate());
    }
    if (from.has_active_users_num()) {
      set_active_users_num(from.active_users_num());
    }
    if (from.has_active_users_num_rate()) {
      set_active_users_num_rate(from.active_users_num_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_statistics_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_statistics_data::CopyFrom(const user_statistics_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_statistics_data::IsInitialized() const {

  return true;
}

void user_statistics_data::Swap(user_statistics_data* other) {
  if (other != this) {
    std::swap(statistics_name_, other->statistics_name_);
    std::swap(users_new_increased_, other->users_new_increased_);
    std::swap(users_new_increased_rate_, other->users_new_increased_rate_);
    std::swap(users_cumulant_, other->users_cumulant_);
    std::swap(users_cumulant_rate_, other->users_cumulant_rate_);
    std::swap(active_users_num_, other->active_users_num_);
    std::swap(active_users_num_rate_, other->active_users_num_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_statistics_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_statistics_data_descriptor_;
  metadata.reflection = user_statistics_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int terminal_model_info_ask::kTypeFieldNumber;
const int terminal_model_info_ask::kOsTypeFieldNumber;
const int terminal_model_info_ask::kStartTimeFieldNumber;
const int terminal_model_info_ask::kEndTimeFieldNumber;
const int terminal_model_info_ask::kPageNumFieldNumber;
const int terminal_model_info_ask::kCurPageFieldNumber;
const int terminal_model_info_ask::kAskHeaderFieldNumber;
const int terminal_model_info_ask::kTotalFlagFieldNumber;
#endif  // !_MSC_VER

terminal_model_info_ask::terminal_model_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.terminal_model_info_ask)
}

void terminal_model_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

terminal_model_info_ask::terminal_model_info_ask(const terminal_model_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.terminal_model_info_ask)
}

void terminal_model_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  os_type_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  total_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

terminal_model_info_ask::~terminal_model_info_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.terminal_model_info_ask)
  SharedDtor();
}

void terminal_model_info_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void terminal_model_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* terminal_model_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return terminal_model_info_ask_descriptor_;
}

const terminal_model_info_ask& terminal_model_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

terminal_model_info_ask* terminal_model_info_ask::default_instance_ = NULL;

terminal_model_info_ask* terminal_model_info_ask::New() const {
  return new terminal_model_info_ask;
}

void terminal_model_info_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<terminal_model_info_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(page_num_, cur_page_);
    type_ = 1;
    os_type_ = 0;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    total_flag_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool terminal_model_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.terminal_model_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UBAS_PageView.terminal_model_ask_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_PageView::terminal_model_ask_type_IsValid(value)) {
            set_type(static_cast< ::UBAS_PageView::terminal_model_ask_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_os_type;
        break;
      }

      // optional .UBAS_PageView.mobile_os_type os_type = 2;
      case 2: {
        if (tag == 16) {
         parse_os_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UBAS_PageView::mobile_os_type_IsValid(value)) {
            set_os_type(static_cast< ::UBAS_PageView::mobile_os_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_time;
        break;
      }

      // optional bytes start_time = 3;
      case 3: {
        if (tag == 26) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 4;
      case 4: {
        if (tag == 34) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 5;
      case 5: {
        if (tag == 40) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_total_flag;
        break;
      }

      // optional int32 total_flag = 8;
      case 8: {
        if (tag == 64) {
         parse_total_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_flag_)));
          set_has_total_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.terminal_model_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.terminal_model_info_ask)
  return false;
#undef DO_
}

void terminal_model_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.terminal_model_info_ask)
  // optional .UBAS_PageView.terminal_model_ask_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .UBAS_PageView.mobile_os_type os_type = 2;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->os_type(), output);
  }

  // optional bytes start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_time(), output);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_time(), output);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_num(), output);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  // optional int32 total_flag = 8;
  if (has_total_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.terminal_model_info_ask)
}

::google::protobuf::uint8* terminal_model_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.terminal_model_info_ask)
  // optional .UBAS_PageView.terminal_model_ask_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .UBAS_PageView.mobile_os_type os_type = 2;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->os_type(), target);
  }

  // optional bytes start_time = 3;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_time(), target);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_time(), target);
  }

  // optional int32 page_num = 5;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_num(), target);
  }

  // optional int32 cur_page = 6;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  // optional int32 total_flag = 8;
  if (has_total_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.terminal_model_info_ask)
  return target;
}

int terminal_model_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UBAS_PageView.terminal_model_ask_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .UBAS_PageView.mobile_os_type os_type = 2;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_type());
    }

    // optional bytes start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional int32 page_num = 5;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 6;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 total_flag = 8;
    if (has_total_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void terminal_model_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const terminal_model_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const terminal_model_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void terminal_model_info_ask::MergeFrom(const terminal_model_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_total_flag()) {
      set_total_flag(from.total_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void terminal_model_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void terminal_model_info_ask::CopyFrom(const terminal_model_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool terminal_model_info_ask::IsInitialized() const {

  return true;
}

void terminal_model_info_ask::Swap(terminal_model_info_ask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(os_type_, other->os_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(total_flag_, other->total_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata terminal_model_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = terminal_model_info_ask_descriptor_;
  metadata.reflection = terminal_model_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int terminal_model_info_ans::kErrorFieldNumber;
const int terminal_model_info_ans::kTotalNumberFieldNumber;
const int terminal_model_info_ans::kStatisticsDataFieldNumber;
#endif  // !_MSC_VER

terminal_model_info_ans::terminal_model_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.terminal_model_info_ans)
}

void terminal_model_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

terminal_model_info_ans::terminal_model_info_ans(const terminal_model_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.terminal_model_info_ans)
}

void terminal_model_info_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

terminal_model_info_ans::~terminal_model_info_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.terminal_model_info_ans)
  SharedDtor();
}

void terminal_model_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void terminal_model_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* terminal_model_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return terminal_model_info_ans_descriptor_;
}

const terminal_model_info_ans& terminal_model_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

terminal_model_info_ans* terminal_model_info_ans::default_instance_ = NULL;

terminal_model_info_ans* terminal_model_info_ans::New() const {
  return new terminal_model_info_ans;
}

void terminal_model_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
    total_number_ = 0;
  }
  statistics_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool terminal_model_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.terminal_model_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_statistics_data;
        break;
      }

      // repeated .UBAS_PageView.user_statistics_data statistics_data = 3;
      case 3: {
        if (tag == 26) {
         parse_statistics_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statistics_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_statistics_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.terminal_model_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.terminal_model_info_ans)
  return false;
#undef DO_
}

void terminal_model_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.terminal_model_info_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // repeated .UBAS_PageView.user_statistics_data statistics_data = 3;
  for (int i = 0; i < this->statistics_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statistics_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.terminal_model_info_ans)
}

::google::protobuf::uint8* terminal_model_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.terminal_model_info_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // repeated .UBAS_PageView.user_statistics_data statistics_data = 3;
  for (int i = 0; i < this->statistics_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->statistics_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.terminal_model_info_ans)
  return target;
}

int terminal_model_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  // repeated .UBAS_PageView.user_statistics_data statistics_data = 3;
  total_size += 1 * this->statistics_data_size();
  for (int i = 0; i < this->statistics_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistics_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void terminal_model_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const terminal_model_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const terminal_model_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void terminal_model_info_ans::MergeFrom(const terminal_model_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  statistics_data_.MergeFrom(from.statistics_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void terminal_model_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void terminal_model_info_ans::CopyFrom(const terminal_model_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool terminal_model_info_ans::IsInitialized() const {

  return true;
}

void terminal_model_info_ans::Swap(terminal_model_info_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(total_number_, other->total_number_);
    statistics_data_.Swap(&other->statistics_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata terminal_model_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = terminal_model_info_ans_descriptor_;
  metadata.reflection = terminal_model_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int step_business_statistics::kStepNumberFieldNumber;
const int step_business_statistics::kUserCountFieldNumber;
#endif  // !_MSC_VER

step_business_statistics::step_business_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.step_business_statistics)
}

void step_business_statistics::InitAsDefaultInstance() {
}

step_business_statistics::step_business_statistics(const step_business_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.step_business_statistics)
}

void step_business_statistics::SharedCtor() {
  _cached_size_ = 0;
  step_number_ = 0;
  user_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

step_business_statistics::~step_business_statistics() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.step_business_statistics)
  SharedDtor();
}

void step_business_statistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void step_business_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* step_business_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return step_business_statistics_descriptor_;
}

const step_business_statistics& step_business_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

step_business_statistics* step_business_statistics::default_instance_ = NULL;

step_business_statistics* step_business_statistics::New() const {
  return new step_business_statistics;
}

void step_business_statistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<step_business_statistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(step_number_, user_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool step_business_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.step_business_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_number_)));
          set_has_step_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_count;
        break;
      }

      // optional int32 user_count = 2;
      case 2: {
        if (tag == 16) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.step_business_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.step_business_statistics)
  return false;
#undef DO_
}

void step_business_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.step_business_statistics)
  // optional int32 step_number = 1;
  if (has_step_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step_number(), output);
  }

  // optional int32 user_count = 2;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.step_business_statistics)
}

::google::protobuf::uint8* step_business_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.step_business_statistics)
  // optional int32 step_number = 1;
  if (has_step_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step_number(), target);
  }

  // optional int32 user_count = 2;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.step_business_statistics)
  return target;
}

int step_business_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 step_number = 1;
    if (has_step_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_number());
    }

    // optional int32 user_count = 2;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void step_business_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const step_business_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const step_business_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void step_business_statistics::MergeFrom(const step_business_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step_number()) {
      set_step_number(from.step_number());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void step_business_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void step_business_statistics::CopyFrom(const step_business_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool step_business_statistics::IsInitialized() const {

  return true;
}

void step_business_statistics::Swap(step_business_statistics* other) {
  if (other != this) {
    std::swap(step_number_, other->step_number_);
    std::swap(user_count_, other->user_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata step_business_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = step_business_statistics_descriptor_;
  metadata.reflection = step_business_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int business_track_statistics_ask::kAskHeaderFieldNumber;
const int business_track_statistics_ask::kAskTypeFieldNumber;
const int business_track_statistics_ask::kStartTimeFieldNumber;
const int business_track_statistics_ask::kEndTimeFieldNumber;
#endif  // !_MSC_VER

business_track_statistics_ask::business_track_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.business_track_statistics_ask)
}

void business_track_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

business_track_statistics_ask::business_track_statistics_ask(const business_track_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.business_track_statistics_ask)
}

void business_track_statistics_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  ask_type_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

business_track_statistics_ask::~business_track_statistics_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.business_track_statistics_ask)
  SharedDtor();
}

void business_track_statistics_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void business_track_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* business_track_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return business_track_statistics_ask_descriptor_;
}

const business_track_statistics_ask& business_track_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

business_track_statistics_ask* business_track_statistics_ask::default_instance_ = NULL;

business_track_statistics_ask* business_track_statistics_ask::New() const {
  return new business_track_statistics_ask;
}

void business_track_statistics_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    ask_type_ = 0;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool business_track_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.business_track_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ask_type;
        break;
      }

      // optional int32 ask_type = 2;
      case 2: {
        if (tag == 16) {
         parse_ask_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_type_)));
          set_has_ask_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_time;
        break;
      }

      // optional bytes start_time = 3;
      case 3: {
        if (tag == 26) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 4;
      case 4: {
        if (tag == 34) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.business_track_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.business_track_statistics_ask)
  return false;
#undef DO_
}

void business_track_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.business_track_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 ask_type = 2;
  if (has_ask_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ask_type(), output);
  }

  // optional bytes start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_time(), output);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.business_track_statistics_ask)
}

::google::protobuf::uint8* business_track_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.business_track_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 ask_type = 2;
  if (has_ask_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ask_type(), target);
  }

  // optional bytes start_time = 3;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_time(), target);
  }

  // optional bytes end_time = 4;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.business_track_statistics_ask)
  return target;
}

int business_track_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 ask_type = 2;
    if (has_ask_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_type());
    }

    // optional bytes start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void business_track_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const business_track_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const business_track_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void business_track_statistics_ask::MergeFrom(const business_track_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_ask_type()) {
      set_ask_type(from.ask_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void business_track_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void business_track_statistics_ask::CopyFrom(const business_track_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool business_track_statistics_ask::IsInitialized() const {

  return true;
}

void business_track_statistics_ask::Swap(business_track_statistics_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(ask_type_, other->ask_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata business_track_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = business_track_statistics_ask_descriptor_;
  metadata.reflection = business_track_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int business_track_statistics_ans::kInfoFieldNumber;
const int business_track_statistics_ans::kJsonDataFieldNumber;
const int business_track_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

business_track_statistics_ans::business_track_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.business_track_statistics_ans)
}

void business_track_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

business_track_statistics_ans::business_track_statistics_ans(const business_track_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.business_track_statistics_ans)
}

void business_track_statistics_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

business_track_statistics_ans::~business_track_statistics_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.business_track_statistics_ans)
  SharedDtor();
}

void business_track_statistics_ans::SharedDtor() {
  if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_data_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void business_track_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* business_track_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return business_track_statistics_ans_descriptor_;
}

const business_track_statistics_ans& business_track_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

business_track_statistics_ans* business_track_statistics_ans::default_instance_ = NULL;

business_track_statistics_ans* business_track_statistics_ans::New() const {
  return new business_track_statistics_ans;
}

void business_track_statistics_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_json_data()) {
      if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_data_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool business_track_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.business_track_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_PageView.step_business_statistics info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_json_data;
        break;
      }

      // optional bytes json_data = 2;
      case 2: {
        if (tag == 18) {
         parse_json_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.business_track_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.business_track_statistics_ans)
  return false;
#undef DO_
}

void business_track_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.business_track_statistics_ans)
  // repeated .UBAS_PageView.step_business_statistics info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional bytes json_data = 2;
  if (has_json_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->json_data(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.business_track_statistics_ans)
}

::google::protobuf::uint8* business_track_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.business_track_statistics_ans)
  // repeated .UBAS_PageView.step_business_statistics info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional bytes json_data = 2;
  if (has_json_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->json_data(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.business_track_statistics_ans)
  return target;
}

int business_track_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes json_data = 2;
    if (has_json_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_data());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_PageView.step_business_statistics info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void business_track_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const business_track_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const business_track_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void business_track_statistics_ans::MergeFrom(const business_track_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_json_data()) {
      set_json_data(from.json_data());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void business_track_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void business_track_statistics_ans::CopyFrom(const business_track_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool business_track_statistics_ans::IsInitialized() const {

  return true;
}

void business_track_statistics_ans::Swap(business_track_statistics_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(json_data_, other->json_data_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata business_track_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = business_track_statistics_ans_descriptor_;
  metadata.reflection = business_track_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_visited_statistics::kPageNameFieldNumber;
const int page_visited_statistics::kVisitedCountFieldNumber;
#endif  // !_MSC_VER

page_visited_statistics::page_visited_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_visited_statistics)
}

void page_visited_statistics::InitAsDefaultInstance() {
}

page_visited_statistics::page_visited_statistics(const page_visited_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_visited_statistics)
}

void page_visited_statistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visited_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_visited_statistics::~page_visited_statistics() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_visited_statistics)
  SharedDtor();
}

void page_visited_statistics::SharedDtor() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (this != default_instance_) {
  }
}

void page_visited_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_visited_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_visited_statistics_descriptor_;
}

const page_visited_statistics& page_visited_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_visited_statistics* page_visited_statistics::default_instance_ = NULL;

page_visited_statistics* page_visited_statistics::New() const {
  return new page_visited_statistics;
}

void page_visited_statistics::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_page_name()) {
      if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_name_->clear();
      }
    }
    visited_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_visited_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_visited_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes page_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_visited_count;
        break;
      }

      // optional int32 visited_count = 2;
      case 2: {
        if (tag == 16) {
         parse_visited_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visited_count_)));
          set_has_visited_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_visited_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_visited_statistics)
  return false;
#undef DO_
}

void page_visited_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_visited_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_name(), output);
  }

  // optional int32 visited_count = 2;
  if (has_visited_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->visited_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_visited_statistics)
}

::google::protobuf::uint8* page_visited_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_visited_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_name(), target);
  }

  // optional int32 visited_count = 2;
  if (has_visited_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->visited_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_visited_statistics)
  return target;
}

int page_visited_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes page_name = 1;
    if (has_page_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_name());
    }

    // optional int32 visited_count = 2;
    if (has_visited_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visited_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_visited_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_visited_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_visited_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_visited_statistics::MergeFrom(const page_visited_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_name()) {
      set_page_name(from.page_name());
    }
    if (from.has_visited_count()) {
      set_visited_count(from.visited_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_visited_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_visited_statistics::CopyFrom(const page_visited_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_visited_statistics::IsInitialized() const {

  return true;
}

void page_visited_statistics::Swap(page_visited_statistics* other) {
  if (other != this) {
    std::swap(page_name_, other->page_name_);
    std::swap(visited_count_, other->visited_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_visited_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_visited_statistics_descriptor_;
  metadata.reflection = page_visited_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_visited_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

page_visited_statistics_ask::page_visited_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_visited_statistics_ask)
}

void page_visited_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

page_visited_statistics_ask::page_visited_statistics_ask(const page_visited_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_visited_statistics_ask)
}

void page_visited_statistics_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_visited_statistics_ask::~page_visited_statistics_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_visited_statistics_ask)
  SharedDtor();
}

void page_visited_statistics_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void page_visited_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_visited_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_visited_statistics_ask_descriptor_;
}

const page_visited_statistics_ask& page_visited_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_visited_statistics_ask* page_visited_statistics_ask::default_instance_ = NULL;

page_visited_statistics_ask* page_visited_statistics_ask::New() const {
  return new page_visited_statistics_ask;
}

void page_visited_statistics_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_visited_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_visited_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_visited_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_visited_statistics_ask)
  return false;
#undef DO_
}

void page_visited_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_visited_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_visited_statistics_ask)
}

::google::protobuf::uint8* page_visited_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_visited_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_visited_statistics_ask)
  return target;
}

int page_visited_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_visited_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_visited_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_visited_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_visited_statistics_ask::MergeFrom(const page_visited_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_visited_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_visited_statistics_ask::CopyFrom(const page_visited_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_visited_statistics_ask::IsInitialized() const {

  return true;
}

void page_visited_statistics_ask::Swap(page_visited_statistics_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_visited_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_visited_statistics_ask_descriptor_;
  metadata.reflection = page_visited_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_visited_statistics_ans::kListFieldNumber;
const int page_visited_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

page_visited_statistics_ans::page_visited_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_visited_statistics_ans)
}

void page_visited_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

page_visited_statistics_ans::page_visited_statistics_ans(const page_visited_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_visited_statistics_ans)
}

void page_visited_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_visited_statistics_ans::~page_visited_statistics_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_visited_statistics_ans)
  SharedDtor();
}

void page_visited_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void page_visited_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_visited_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_visited_statistics_ans_descriptor_;
}

const page_visited_statistics_ans& page_visited_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_visited_statistics_ans* page_visited_statistics_ans::default_instance_ = NULL;

page_visited_statistics_ans* page_visited_statistics_ans::New() const {
  return new page_visited_statistics_ans;
}

void page_visited_statistics_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_visited_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_visited_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_PageView.page_visited_statistics list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_visited_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_visited_statistics_ans)
  return false;
#undef DO_
}

void page_visited_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_visited_statistics_ans)
  // repeated .UBAS_PageView.page_visited_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_visited_statistics_ans)
}

::google::protobuf::uint8* page_visited_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_visited_statistics_ans)
  // repeated .UBAS_PageView.page_visited_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_visited_statistics_ans)
  return target;
}

int page_visited_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_PageView.page_visited_statistics list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_visited_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_visited_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_visited_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_visited_statistics_ans::MergeFrom(const page_visited_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_visited_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_visited_statistics_ans::CopyFrom(const page_visited_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_visited_statistics_ans::IsInitialized() const {

  return true;
}

void page_visited_statistics_ans::Swap(page_visited_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_visited_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_visited_statistics_ans_descriptor_;
  metadata.reflection = page_visited_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_keeptime_statistics::kPageNameFieldNumber;
const int page_keeptime_statistics::kKeeptimeFieldNumber;
#endif  // !_MSC_VER

page_keeptime_statistics::page_keeptime_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_keeptime_statistics)
}

void page_keeptime_statistics::InitAsDefaultInstance() {
}

page_keeptime_statistics::page_keeptime_statistics(const page_keeptime_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_keeptime_statistics)
}

void page_keeptime_statistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keeptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_keeptime_statistics::~page_keeptime_statistics() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_keeptime_statistics)
  SharedDtor();
}

void page_keeptime_statistics::SharedDtor() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (this != default_instance_) {
  }
}

void page_keeptime_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_keeptime_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_keeptime_statistics_descriptor_;
}

const page_keeptime_statistics& page_keeptime_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_keeptime_statistics* page_keeptime_statistics::default_instance_ = NULL;

page_keeptime_statistics* page_keeptime_statistics::New() const {
  return new page_keeptime_statistics;
}

void page_keeptime_statistics::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_page_name()) {
      if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_name_->clear();
      }
    }
    keeptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_keeptime_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_keeptime_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes page_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keeptime;
        break;
      }

      // optional int32 keeptime = 2;
      case 2: {
        if (tag == 16) {
         parse_keeptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keeptime_)));
          set_has_keeptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_keeptime_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_keeptime_statistics)
  return false;
#undef DO_
}

void page_keeptime_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_keeptime_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_name(), output);
  }

  // optional int32 keeptime = 2;
  if (has_keeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->keeptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_keeptime_statistics)
}

::google::protobuf::uint8* page_keeptime_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_keeptime_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_name(), target);
  }

  // optional int32 keeptime = 2;
  if (has_keeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->keeptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_keeptime_statistics)
  return target;
}

int page_keeptime_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes page_name = 1;
    if (has_page_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_name());
    }

    // optional int32 keeptime = 2;
    if (has_keeptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keeptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_keeptime_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_keeptime_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_keeptime_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_keeptime_statistics::MergeFrom(const page_keeptime_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_name()) {
      set_page_name(from.page_name());
    }
    if (from.has_keeptime()) {
      set_keeptime(from.keeptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_keeptime_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_keeptime_statistics::CopyFrom(const page_keeptime_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_keeptime_statistics::IsInitialized() const {

  return true;
}

void page_keeptime_statistics::Swap(page_keeptime_statistics* other) {
  if (other != this) {
    std::swap(page_name_, other->page_name_);
    std::swap(keeptime_, other->keeptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_keeptime_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_keeptime_statistics_descriptor_;
  metadata.reflection = page_keeptime_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_keeptime_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

page_keeptime_statistics_ask::page_keeptime_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_keeptime_statistics_ask)
}

void page_keeptime_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

page_keeptime_statistics_ask::page_keeptime_statistics_ask(const page_keeptime_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_keeptime_statistics_ask)
}

void page_keeptime_statistics_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_keeptime_statistics_ask::~page_keeptime_statistics_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_keeptime_statistics_ask)
  SharedDtor();
}

void page_keeptime_statistics_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void page_keeptime_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_keeptime_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_keeptime_statistics_ask_descriptor_;
}

const page_keeptime_statistics_ask& page_keeptime_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_keeptime_statistics_ask* page_keeptime_statistics_ask::default_instance_ = NULL;

page_keeptime_statistics_ask* page_keeptime_statistics_ask::New() const {
  return new page_keeptime_statistics_ask;
}

void page_keeptime_statistics_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_keeptime_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_keeptime_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_keeptime_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_keeptime_statistics_ask)
  return false;
#undef DO_
}

void page_keeptime_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_keeptime_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_keeptime_statistics_ask)
}

::google::protobuf::uint8* page_keeptime_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_keeptime_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_keeptime_statistics_ask)
  return target;
}

int page_keeptime_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_keeptime_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_keeptime_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_keeptime_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_keeptime_statistics_ask::MergeFrom(const page_keeptime_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_keeptime_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_keeptime_statistics_ask::CopyFrom(const page_keeptime_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_keeptime_statistics_ask::IsInitialized() const {

  return true;
}

void page_keeptime_statistics_ask::Swap(page_keeptime_statistics_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_keeptime_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_keeptime_statistics_ask_descriptor_;
  metadata.reflection = page_keeptime_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_keeptime_statistics_ans::kListFieldNumber;
const int page_keeptime_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

page_keeptime_statistics_ans::page_keeptime_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_keeptime_statistics_ans)
}

void page_keeptime_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

page_keeptime_statistics_ans::page_keeptime_statistics_ans(const page_keeptime_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_keeptime_statistics_ans)
}

void page_keeptime_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_keeptime_statistics_ans::~page_keeptime_statistics_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_keeptime_statistics_ans)
  SharedDtor();
}

void page_keeptime_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void page_keeptime_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_keeptime_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_keeptime_statistics_ans_descriptor_;
}

const page_keeptime_statistics_ans& page_keeptime_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_keeptime_statistics_ans* page_keeptime_statistics_ans::default_instance_ = NULL;

page_keeptime_statistics_ans* page_keeptime_statistics_ans::New() const {
  return new page_keeptime_statistics_ans;
}

void page_keeptime_statistics_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_keeptime_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_keeptime_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_PageView.page_keeptime_statistics list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_keeptime_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_keeptime_statistics_ans)
  return false;
#undef DO_
}

void page_keeptime_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_keeptime_statistics_ans)
  // repeated .UBAS_PageView.page_keeptime_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_keeptime_statistics_ans)
}

::google::protobuf::uint8* page_keeptime_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_keeptime_statistics_ans)
  // repeated .UBAS_PageView.page_keeptime_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_keeptime_statistics_ans)
  return target;
}

int page_keeptime_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_PageView.page_keeptime_statistics list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_keeptime_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_keeptime_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_keeptime_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_keeptime_statistics_ans::MergeFrom(const page_keeptime_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_keeptime_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_keeptime_statistics_ans::CopyFrom(const page_keeptime_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_keeptime_statistics_ans::IsInitialized() const {

  return true;
}

void page_keeptime_statistics_ans::Swap(page_keeptime_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_keeptime_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_keeptime_statistics_ans_descriptor_;
  metadata.reflection = page_keeptime_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_business_track_person_info::kAvatarFieldNumber;
const int user_business_track_person_info::kNickNameFieldNumber;
const int user_business_track_person_info::kNameFieldNumber;
const int user_business_track_person_info::kMobileFieldNumber;
const int user_business_track_person_info::kIdcardNoFieldNumber;
const int user_business_track_person_info::kSexFieldNumber;
const int user_business_track_person_info::kAgeFieldNumber;
const int user_business_track_person_info::kOverdueStatusFieldNumber;
#endif  // !_MSC_VER

user_business_track_person_info::user_business_track_person_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.user_business_track_person_info)
}

void user_business_track_person_info::InitAsDefaultInstance() {
}

user_business_track_person_info::user_business_track_person_info(const user_business_track_person_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.user_business_track_person_info)
}

void user_business_track_person_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 1;
  age_ = 0;
  overdue_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_business_track_person_info::~user_business_track_person_info() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.user_business_track_person_info)
  SharedDtor();
}

void user_business_track_person_info::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_no_;
  }
  if (this != default_instance_) {
  }
}

void user_business_track_person_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_business_track_person_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_business_track_person_info_descriptor_;
}

const user_business_track_person_info& user_business_track_person_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

user_business_track_person_info* user_business_track_person_info::default_instance_ = NULL;

user_business_track_person_info* user_business_track_person_info::New() const {
  return new user_business_track_person_info;
}

void user_business_track_person_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_business_track_person_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(age_, overdue_status_);
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_idcard_no()) {
      if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idcard_no_->clear();
      }
    }
    sex_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_business_track_person_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.user_business_track_person_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes avatar = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional bytes nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile;
        break;
      }

      // optional bytes mobile = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_idcard_no;
        break;
      }

      // optional bytes idcard_no = 5;
      case 5: {
        if (tag == 42) {
         parse_idcard_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_idcard_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_age;
        break;
      }

      // optional int32 age = 7;
      case 7: {
        if (tag == 56) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_overdue_status;
        break;
      }

      // optional bool overdue_status = 8;
      case 8: {
        if (tag == 64) {
         parse_overdue_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overdue_status_)));
          set_has_overdue_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.user_business_track_person_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.user_business_track_person_info)
  return false;
#undef DO_
}

void user_business_track_person_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.user_business_track_person_info)
  // optional bytes avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->avatar(), output);
  }

  // optional bytes nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // optional bytes mobile = 4;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mobile(), output);
  }

  // optional bytes idcard_no = 5;
  if (has_idcard_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->idcard_no(), output);
  }

  // optional .common.sex sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sex(), output);
  }

  // optional int32 age = 7;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->age(), output);
  }

  // optional bool overdue_status = 8;
  if (has_overdue_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->overdue_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.user_business_track_person_info)
}

::google::protobuf::uint8* user_business_track_person_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.user_business_track_person_info)
  // optional bytes avatar = 1;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->avatar(), target);
  }

  // optional bytes nick_name = 2;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick_name(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional bytes mobile = 4;
  if (has_mobile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mobile(), target);
  }

  // optional bytes idcard_no = 5;
  if (has_idcard_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->idcard_no(), target);
  }

  // optional .common.sex sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sex(), target);
  }

  // optional int32 age = 7;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->age(), target);
  }

  // optional bool overdue_status = 8;
  if (has_overdue_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->overdue_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.user_business_track_person_info)
  return target;
}

int user_business_track_person_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes mobile = 4;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile());
    }

    // optional bytes idcard_no = 5;
    if (has_idcard_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->idcard_no());
    }

    // optional .common.sex sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 age = 7;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional bool overdue_status = 8;
    if (has_overdue_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_business_track_person_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_business_track_person_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_business_track_person_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_business_track_person_info::MergeFrom(const user_business_track_person_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_idcard_no()) {
      set_idcard_no(from.idcard_no());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_overdue_status()) {
      set_overdue_status(from.overdue_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_business_track_person_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_business_track_person_info::CopyFrom(const user_business_track_person_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_business_track_person_info::IsInitialized() const {

  return true;
}

void user_business_track_person_info::Swap(user_business_track_person_info* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(name_, other->name_);
    std::swap(mobile_, other->mobile_);
    std::swap(idcard_no_, other->idcard_no_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(overdue_status_, other->overdue_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_business_track_person_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_business_track_person_info_descriptor_;
  metadata.reflection = user_business_track_person_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_business_track_content::kFieldNoFieldNumber;
const int user_business_track_content::kFieldNameFieldNumber;
const int user_business_track_content::kFieldValueFieldNumber;
#endif  // !_MSC_VER

user_business_track_content::user_business_track_content()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.user_business_track_content)
}

void user_business_track_content::InitAsDefaultInstance() {
}

user_business_track_content::user_business_track_content(const user_business_track_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.user_business_track_content)
}

void user_business_track_content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_no_ = 0;
  field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_business_track_content::~user_business_track_content() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.user_business_track_content)
  SharedDtor();
}

void user_business_track_content::SharedDtor() {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_name_;
  }
  if (field_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_value_;
  }
  if (this != default_instance_) {
  }
}

void user_business_track_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_business_track_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_business_track_content_descriptor_;
}

const user_business_track_content& user_business_track_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

user_business_track_content* user_business_track_content::default_instance_ = NULL;

user_business_track_content* user_business_track_content::New() const {
  return new user_business_track_content;
}

void user_business_track_content::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    field_no_ = 0;
    if (has_field_name()) {
      if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_name_->clear();
      }
    }
    if (has_field_value()) {
      if (field_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_business_track_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.user_business_track_content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 field_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_no_)));
          set_has_field_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_field_name;
        break;
      }

      // optional bytes field_name = 2;
      case 2: {
        if (tag == 18) {
         parse_field_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_field_value;
        break;
      }

      // optional bytes field_value = 3;
      case 3: {
        if (tag == 26) {
         parse_field_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.user_business_track_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.user_business_track_content)
  return false;
#undef DO_
}

void user_business_track_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.user_business_track_content)
  // optional int32 field_no = 1;
  if (has_field_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->field_no(), output);
  }

  // optional bytes field_name = 2;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->field_name(), output);
  }

  // optional bytes field_value = 3;
  if (has_field_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->field_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.user_business_track_content)
}

::google::protobuf::uint8* user_business_track_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.user_business_track_content)
  // optional int32 field_no = 1;
  if (has_field_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->field_no(), target);
  }

  // optional bytes field_name = 2;
  if (has_field_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->field_name(), target);
  }

  // optional bytes field_value = 3;
  if (has_field_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->field_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.user_business_track_content)
  return target;
}

int user_business_track_content::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 field_no = 1;
    if (has_field_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_no());
    }

    // optional bytes field_name = 2;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_name());
    }

    // optional bytes field_value = 3;
    if (has_field_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_business_track_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_business_track_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_business_track_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_business_track_content::MergeFrom(const user_business_track_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_no()) {
      set_field_no(from.field_no());
    }
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_field_value()) {
      set_field_value(from.field_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_business_track_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_business_track_content::CopyFrom(const user_business_track_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_business_track_content::IsInitialized() const {

  return true;
}

void user_business_track_content::Swap(user_business_track_content* other) {
  if (other != this) {
    std::swap(field_no_, other->field_no_);
    std::swap(field_name_, other->field_name_);
    std::swap(field_value_, other->field_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_business_track_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_business_track_content_descriptor_;
  metadata.reflection = user_business_track_content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_business_track_item::kOccurTimeFieldNumber;
const int user_business_track_item::kBusinessFieldNumber;
const int user_business_track_item::kTrackContentsFieldNumber;
#endif  // !_MSC_VER

user_business_track_item::user_business_track_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.user_business_track_item)
}

void user_business_track_item::InitAsDefaultInstance() {
}

user_business_track_item::user_business_track_item(const user_business_track_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.user_business_track_item)
}

void user_business_track_item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  occur_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  business_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_business_track_item::~user_business_track_item() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.user_business_track_item)
  SharedDtor();
}

void user_business_track_item::SharedDtor() {
  if (occur_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete occur_time_;
  }
  if (business_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete business_;
  }
  if (this != default_instance_) {
  }
}

void user_business_track_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_business_track_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_business_track_item_descriptor_;
}

const user_business_track_item& user_business_track_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

user_business_track_item* user_business_track_item::default_instance_ = NULL;

user_business_track_item* user_business_track_item::New() const {
  return new user_business_track_item;
}

void user_business_track_item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_occur_time()) {
      if (occur_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        occur_time_->clear();
      }
    }
    if (has_business()) {
      if (business_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        business_->clear();
      }
    }
  }
  track_contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_business_track_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.user_business_track_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes occur_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_occur_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_business;
        break;
      }

      // optional bytes business = 2;
      case 2: {
        if (tag == 18) {
         parse_business:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_business()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_track_contents;
        break;
      }

      // repeated .UBAS_PageView.user_business_track_content track_contents = 3;
      case 3: {
        if (tag == 26) {
         parse_track_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_track_contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.user_business_track_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.user_business_track_item)
  return false;
#undef DO_
}

void user_business_track_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.user_business_track_item)
  // optional bytes occur_time = 1;
  if (has_occur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->occur_time(), output);
  }

  // optional bytes business = 2;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->business(), output);
  }

  // repeated .UBAS_PageView.user_business_track_content track_contents = 3;
  for (int i = 0; i < this->track_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->track_contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.user_business_track_item)
}

::google::protobuf::uint8* user_business_track_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.user_business_track_item)
  // optional bytes occur_time = 1;
  if (has_occur_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->occur_time(), target);
  }

  // optional bytes business = 2;
  if (has_business()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->business(), target);
  }

  // repeated .UBAS_PageView.user_business_track_content track_contents = 3;
  for (int i = 0; i < this->track_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->track_contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.user_business_track_item)
  return target;
}

int user_business_track_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes occur_time = 1;
    if (has_occur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->occur_time());
    }

    // optional bytes business = 2;
    if (has_business()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->business());
    }

  }
  // repeated .UBAS_PageView.user_business_track_content track_contents = 3;
  total_size += 1 * this->track_contents_size();
  for (int i = 0; i < this->track_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track_contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_business_track_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_business_track_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_business_track_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_business_track_item::MergeFrom(const user_business_track_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_contents_.MergeFrom(from.track_contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_occur_time()) {
      set_occur_time(from.occur_time());
    }
    if (from.has_business()) {
      set_business(from.business());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_business_track_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_business_track_item::CopyFrom(const user_business_track_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_business_track_item::IsInitialized() const {

  return true;
}

void user_business_track_item::Swap(user_business_track_item* other) {
  if (other != this) {
    std::swap(occur_time_, other->occur_time_);
    std::swap(business_, other->business_);
    track_contents_.Swap(&other->track_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_business_track_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_business_track_item_descriptor_;
  metadata.reflection = user_business_track_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_business_track_query_ask::kAskHeaderFieldNumber;
const int user_business_track_query_ask::kMobileFieldNumber;
const int user_business_track_query_ask::kIdcardNoFieldNumber;
#endif  // !_MSC_VER

user_business_track_query_ask::user_business_track_query_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.user_business_track_query_ask)
}

void user_business_track_query_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_business_track_query_ask::user_business_track_query_ask(const user_business_track_query_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.user_business_track_query_ask)
}

void user_business_track_query_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_business_track_query_ask::~user_business_track_query_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.user_business_track_query_ask)
  SharedDtor();
}

void user_business_track_query_ask::SharedDtor() {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_business_track_query_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_business_track_query_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_business_track_query_ask_descriptor_;
}

const user_business_track_query_ask& user_business_track_query_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

user_business_track_query_ask* user_business_track_query_ask::default_instance_ = NULL;

user_business_track_query_ask* user_business_track_query_ask::New() const {
  return new user_business_track_query_ask;
}

void user_business_track_query_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_idcard_no()) {
      if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idcard_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_business_track_query_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.user_business_track_query_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile;
        break;
      }

      // optional bytes mobile = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_idcard_no;
        break;
      }

      // optional bytes idcard_no = 3;
      case 3: {
        if (tag == 26) {
         parse_idcard_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_idcard_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.user_business_track_query_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.user_business_track_query_ask)
  return false;
#undef DO_
}

void user_business_track_query_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.user_business_track_query_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional bytes mobile = 2;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile(), output);
  }

  // optional bytes idcard_no = 3;
  if (has_idcard_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->idcard_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.user_business_track_query_ask)
}

::google::protobuf::uint8* user_business_track_query_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.user_business_track_query_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional bytes mobile = 2;
  if (has_mobile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile(), target);
  }

  // optional bytes idcard_no = 3;
  if (has_idcard_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->idcard_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.user_business_track_query_ask)
  return target;
}

int user_business_track_query_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes mobile = 2;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile());
    }

    // optional bytes idcard_no = 3;
    if (has_idcard_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->idcard_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_business_track_query_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_business_track_query_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_business_track_query_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_business_track_query_ask::MergeFrom(const user_business_track_query_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_idcard_no()) {
      set_idcard_no(from.idcard_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_business_track_query_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_business_track_query_ask::CopyFrom(const user_business_track_query_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_business_track_query_ask::IsInitialized() const {

  return true;
}

void user_business_track_query_ask::Swap(user_business_track_query_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(mobile_, other->mobile_);
    std::swap(idcard_no_, other->idcard_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_business_track_query_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_business_track_query_ask_descriptor_;
  metadata.reflection = user_business_track_query_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_business_track_query_ans::kInfoFieldNumber;
const int user_business_track_query_ans::kTrackItemsFieldNumber;
const int user_business_track_query_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_business_track_query_ans::user_business_track_query_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.user_business_track_query_ans)
}

void user_business_track_query_ans::InitAsDefaultInstance() {
  info_ = const_cast< ::UBAS_PageView::user_business_track_person_info*>(&::UBAS_PageView::user_business_track_person_info::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_business_track_query_ans::user_business_track_query_ans(const user_business_track_query_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.user_business_track_query_ans)
}

void user_business_track_query_ans::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_business_track_query_ans::~user_business_track_query_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.user_business_track_query_ans)
  SharedDtor();
}

void user_business_track_query_ans::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete error_;
  }
}

void user_business_track_query_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_business_track_query_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_business_track_query_ans_descriptor_;
}

const user_business_track_query_ans& user_business_track_query_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

user_business_track_query_ans* user_business_track_query_ans::default_instance_ = NULL;

user_business_track_query_ans* user_business_track_query_ans::New() const {
  return new user_business_track_query_ans;
}

void user_business_track_query_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_info()) {
      if (info_ != NULL) info_->::UBAS_PageView::user_business_track_person_info::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  track_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_business_track_query_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.user_business_track_query_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UBAS_PageView.user_business_track_person_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_track_items;
        break;
      }

      // repeated .UBAS_PageView.user_business_track_item track_items = 2;
      case 2: {
        if (tag == 18) {
         parse_track_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_track_items;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.user_business_track_query_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.user_business_track_query_ans)
  return false;
#undef DO_
}

void user_business_track_query_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.user_business_track_query_ans)
  // optional .UBAS_PageView.user_business_track_person_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .UBAS_PageView.user_business_track_item track_items = 2;
  for (int i = 0; i < this->track_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track_items(i), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.user_business_track_query_ans)
}

::google::protobuf::uint8* user_business_track_query_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.user_business_track_query_ans)
  // optional .UBAS_PageView.user_business_track_person_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .UBAS_PageView.user_business_track_item track_items = 2;
  for (int i = 0; i < this->track_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track_items(i), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.user_business_track_query_ans)
  return target;
}

int user_business_track_query_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UBAS_PageView.user_business_track_person_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .UBAS_PageView.user_business_track_item track_items = 2;
  total_size += 1 * this->track_items_size();
  for (int i = 0; i < this->track_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_business_track_query_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_business_track_query_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_business_track_query_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_business_track_query_ans::MergeFrom(const user_business_track_query_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_items_.MergeFrom(from.track_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::UBAS_PageView::user_business_track_person_info::MergeFrom(from.info());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_business_track_query_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_business_track_query_ans::CopyFrom(const user_business_track_query_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_business_track_query_ans::IsInitialized() const {

  return true;
}

void user_business_track_query_ans::Swap(user_business_track_query_ans* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    track_items_.Swap(&other->track_items_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_business_track_query_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_business_track_query_ans_descriptor_;
  metadata.reflection = user_business_track_query_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_access_statistics::kPageNameFieldNumber;
const int page_access_statistics::kAccessCountFieldNumber;
#endif  // !_MSC_VER

page_access_statistics::page_access_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_access_statistics)
}

void page_access_statistics::InitAsDefaultInstance() {
}

page_access_statistics::page_access_statistics(const page_access_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_access_statistics)
}

void page_access_statistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_access_statistics::~page_access_statistics() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_access_statistics)
  SharedDtor();
}

void page_access_statistics::SharedDtor() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (this != default_instance_) {
  }
}

void page_access_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_access_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_access_statistics_descriptor_;
}

const page_access_statistics& page_access_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_access_statistics* page_access_statistics::default_instance_ = NULL;

page_access_statistics* page_access_statistics::New() const {
  return new page_access_statistics;
}

void page_access_statistics::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_page_name()) {
      if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_name_->clear();
      }
    }
    access_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_access_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_access_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes page_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_count;
        break;
      }

      // optional int32 access_count = 2;
      case 2: {
        if (tag == 16) {
         parse_access_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_count_)));
          set_has_access_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_access_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_access_statistics)
  return false;
#undef DO_
}

void page_access_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_access_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_name(), output);
  }

  // optional int32 access_count = 2;
  if (has_access_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->access_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_access_statistics)
}

::google::protobuf::uint8* page_access_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_access_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_name(), target);
  }

  // optional int32 access_count = 2;
  if (has_access_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->access_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_access_statistics)
  return target;
}

int page_access_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes page_name = 1;
    if (has_page_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_name());
    }

    // optional int32 access_count = 2;
    if (has_access_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_access_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_access_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_access_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_access_statistics::MergeFrom(const page_access_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_name()) {
      set_page_name(from.page_name());
    }
    if (from.has_access_count()) {
      set_access_count(from.access_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_access_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_access_statistics::CopyFrom(const page_access_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_access_statistics::IsInitialized() const {

  return true;
}

void page_access_statistics::Swap(page_access_statistics* other) {
  if (other != this) {
    std::swap(page_name_, other->page_name_);
    std::swap(access_count_, other->access_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_access_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_access_statistics_descriptor_;
  metadata.reflection = page_access_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_access_statistics_ask::kStartDateFieldNumber;
const int page_access_statistics_ask::kEndDateFieldNumber;
const int page_access_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

page_access_statistics_ask::page_access_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_access_statistics_ask)
}

void page_access_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

page_access_statistics_ask::page_access_statistics_ask(const page_access_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_access_statistics_ask)
}

void page_access_statistics_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_access_statistics_ask::~page_access_statistics_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_access_statistics_ask)
  SharedDtor();
}

void page_access_statistics_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void page_access_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_access_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_access_statistics_ask_descriptor_;
}

const page_access_statistics_ask& page_access_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_access_statistics_ask* page_access_statistics_ask::default_instance_ = NULL;

page_access_statistics_ask* page_access_statistics_ask::New() const {
  return new page_access_statistics_ask;
}

void page_access_statistics_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_access_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_access_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_access_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_access_statistics_ask)
  return false;
#undef DO_
}

void page_access_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_access_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_access_statistics_ask)
}

::google::protobuf::uint8* page_access_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_access_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_access_statistics_ask)
  return target;
}

int page_access_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_access_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_access_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_access_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_access_statistics_ask::MergeFrom(const page_access_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_access_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_access_statistics_ask::CopyFrom(const page_access_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_access_statistics_ask::IsInitialized() const {

  return true;
}

void page_access_statistics_ask::Swap(page_access_statistics_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_access_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_access_statistics_ask_descriptor_;
  metadata.reflection = page_access_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_access_statistics_ans::kListFieldNumber;
const int page_access_statistics_ans::kResultFieldNumber;
#endif  // !_MSC_VER

page_access_statistics_ans::page_access_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_access_statistics_ans)
}

void page_access_statistics_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

page_access_statistics_ans::page_access_statistics_ans(const page_access_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_access_statistics_ans)
}

void page_access_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_access_statistics_ans::~page_access_statistics_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_access_statistics_ans)
  SharedDtor();
}

void page_access_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void page_access_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_access_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_access_statistics_ans_descriptor_;
}

const page_access_statistics_ans& page_access_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_access_statistics_ans* page_access_statistics_ans::default_instance_ = NULL;

page_access_statistics_ans* page_access_statistics_ans::New() const {
  return new page_access_statistics_ans;
}

void page_access_statistics_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_access_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_access_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_PageView.page_access_statistics list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_access_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_access_statistics_ans)
  return false;
#undef DO_
}

void page_access_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_access_statistics_ans)
  // repeated .UBAS_PageView.page_access_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_access_statistics_ans)
}

::google::protobuf::uint8* page_access_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_access_statistics_ans)
  // repeated .UBAS_PageView.page_access_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_access_statistics_ans)
  return target;
}

int page_access_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UBAS_PageView.page_access_statistics list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_access_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_access_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_access_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_access_statistics_ans::MergeFrom(const page_access_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_access_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_access_statistics_ans::CopyFrom(const page_access_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_access_statistics_ans::IsInitialized() const {

  return true;
}

void page_access_statistics_ans::Swap(page_access_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_access_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_access_statistics_ans_descriptor_;
  metadata.reflection = page_access_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_duration_statistics::kPageNameFieldNumber;
const int page_duration_statistics::kDurationFieldNumber;
#endif  // !_MSC_VER

page_duration_statistics::page_duration_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_duration_statistics)
}

void page_duration_statistics::InitAsDefaultInstance() {
}

page_duration_statistics::page_duration_statistics(const page_duration_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_duration_statistics)
}

void page_duration_statistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_duration_statistics::~page_duration_statistics() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_duration_statistics)
  SharedDtor();
}

void page_duration_statistics::SharedDtor() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (this != default_instance_) {
  }
}

void page_duration_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_duration_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_duration_statistics_descriptor_;
}

const page_duration_statistics& page_duration_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_duration_statistics* page_duration_statistics::default_instance_ = NULL;

page_duration_statistics* page_duration_statistics::New() const {
  return new page_duration_statistics;
}

void page_duration_statistics::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_page_name()) {
      if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_name_->clear();
      }
    }
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_duration_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_duration_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes page_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_duration_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_duration_statistics)
  return false;
#undef DO_
}

void page_duration_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_duration_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_name(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_duration_statistics)
}

::google::protobuf::uint8* page_duration_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_duration_statistics)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_name(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_duration_statistics)
  return target;
}

int page_duration_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes page_name = 1;
    if (has_page_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_name());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_duration_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_duration_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_duration_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_duration_statistics::MergeFrom(const page_duration_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_name()) {
      set_page_name(from.page_name());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_duration_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_duration_statistics::CopyFrom(const page_duration_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_duration_statistics::IsInitialized() const {

  return true;
}

void page_duration_statistics::Swap(page_duration_statistics* other) {
  if (other != this) {
    std::swap(page_name_, other->page_name_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_duration_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_duration_statistics_descriptor_;
  metadata.reflection = page_duration_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_duration_statistics_ask::kStartDateFieldNumber;
const int page_duration_statistics_ask::kEndDateFieldNumber;
const int page_duration_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

page_duration_statistics_ask::page_duration_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_duration_statistics_ask)
}

void page_duration_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

page_duration_statistics_ask::page_duration_statistics_ask(const page_duration_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_duration_statistics_ask)
}

void page_duration_statistics_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_duration_statistics_ask::~page_duration_statistics_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_duration_statistics_ask)
  SharedDtor();
}

void page_duration_statistics_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void page_duration_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_duration_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_duration_statistics_ask_descriptor_;
}

const page_duration_statistics_ask& page_duration_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_duration_statistics_ask* page_duration_statistics_ask::default_instance_ = NULL;

page_duration_statistics_ask* page_duration_statistics_ask::New() const {
  return new page_duration_statistics_ask;
}

void page_duration_statistics_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_duration_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_duration_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_duration_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_duration_statistics_ask)
  return false;
#undef DO_
}

void page_duration_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_duration_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_duration_statistics_ask)
}

::google::protobuf::uint8* page_duration_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_duration_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_duration_statistics_ask)
  return target;
}

int page_duration_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_duration_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_duration_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_duration_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_duration_statistics_ask::MergeFrom(const page_duration_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_duration_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_duration_statistics_ask::CopyFrom(const page_duration_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_duration_statistics_ask::IsInitialized() const {

  return true;
}

void page_duration_statistics_ask::Swap(page_duration_statistics_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_duration_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_duration_statistics_ask_descriptor_;
  metadata.reflection = page_duration_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_duration_statistics_ans::kListFieldNumber;
const int page_duration_statistics_ans::kResultFieldNumber;
#endif  // !_MSC_VER

page_duration_statistics_ans::page_duration_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_duration_statistics_ans)
}

void page_duration_statistics_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

page_duration_statistics_ans::page_duration_statistics_ans(const page_duration_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_duration_statistics_ans)
}

void page_duration_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_duration_statistics_ans::~page_duration_statistics_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_duration_statistics_ans)
  SharedDtor();
}

void page_duration_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void page_duration_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_duration_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_duration_statistics_ans_descriptor_;
}

const page_duration_statistics_ans& page_duration_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_duration_statistics_ans* page_duration_statistics_ans::default_instance_ = NULL;

page_duration_statistics_ans* page_duration_statistics_ans::New() const {
  return new page_duration_statistics_ans;
}

void page_duration_statistics_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_duration_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_duration_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_PageView.page_duration_statistics list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_duration_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_duration_statistics_ans)
  return false;
#undef DO_
}

void page_duration_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_duration_statistics_ans)
  // repeated .UBAS_PageView.page_duration_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_duration_statistics_ans)
}

::google::protobuf::uint8* page_duration_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_duration_statistics_ans)
  // repeated .UBAS_PageView.page_duration_statistics list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_duration_statistics_ans)
  return target;
}

int page_duration_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UBAS_PageView.page_duration_statistics list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_duration_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_duration_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_duration_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_duration_statistics_ans::MergeFrom(const page_duration_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_duration_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_duration_statistics_ans::CopyFrom(const page_duration_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_duration_statistics_ans::IsInitialized() const {

  return true;
}

void page_duration_statistics_ans::Swap(page_duration_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_duration_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_duration_statistics_ans_descriptor_;
  metadata.reflection = page_duration_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int step_page_statistics::kStepNumberFieldNumber;
const int step_page_statistics::kAccessCountFieldNumber;
#endif  // !_MSC_VER

step_page_statistics::step_page_statistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.step_page_statistics)
}

void step_page_statistics::InitAsDefaultInstance() {
}

step_page_statistics::step_page_statistics(const step_page_statistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.step_page_statistics)
}

void step_page_statistics::SharedCtor() {
  _cached_size_ = 0;
  step_number_ = 0;
  access_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

step_page_statistics::~step_page_statistics() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.step_page_statistics)
  SharedDtor();
}

void step_page_statistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void step_page_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* step_page_statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return step_page_statistics_descriptor_;
}

const step_page_statistics& step_page_statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

step_page_statistics* step_page_statistics::default_instance_ = NULL;

step_page_statistics* step_page_statistics::New() const {
  return new step_page_statistics;
}

void step_page_statistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<step_page_statistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(step_number_, access_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool step_page_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.step_page_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_number_)));
          set_has_step_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_count;
        break;
      }

      // optional int32 access_count = 2;
      case 2: {
        if (tag == 16) {
         parse_access_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_count_)));
          set_has_access_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.step_page_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.step_page_statistics)
  return false;
#undef DO_
}

void step_page_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.step_page_statistics)
  // optional int32 step_number = 1;
  if (has_step_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step_number(), output);
  }

  // optional int32 access_count = 2;
  if (has_access_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->access_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.step_page_statistics)
}

::google::protobuf::uint8* step_page_statistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.step_page_statistics)
  // optional int32 step_number = 1;
  if (has_step_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step_number(), target);
  }

  // optional int32 access_count = 2;
  if (has_access_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->access_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.step_page_statistics)
  return target;
}

int step_page_statistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 step_number = 1;
    if (has_step_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_number());
    }

    // optional int32 access_count = 2;
    if (has_access_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void step_page_statistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const step_page_statistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const step_page_statistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void step_page_statistics::MergeFrom(const step_page_statistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step_number()) {
      set_step_number(from.step_number());
    }
    if (from.has_access_count()) {
      set_access_count(from.access_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void step_page_statistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void step_page_statistics::CopyFrom(const step_page_statistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool step_page_statistics::IsInitialized() const {

  return true;
}

void step_page_statistics::Swap(step_page_statistics* other) {
  if (other != this) {
    std::swap(step_number_, other->step_number_);
    std::swap(access_count_, other->access_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata step_page_statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = step_page_statistics_descriptor_;
  metadata.reflection = step_page_statistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_trace_statistics_ask::kStartDateFieldNumber;
const int page_trace_statistics_ask::kEndDateFieldNumber;
const int page_trace_statistics_ask::kPageTypeFieldNumber;
const int page_trace_statistics_ask::kLayersFieldNumber;
const int page_trace_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

page_trace_statistics_ask::page_trace_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_trace_statistics_ask)
}

void page_trace_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

page_trace_statistics_ask::page_trace_statistics_ask(const page_trace_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_trace_statistics_ask)
}

void page_trace_statistics_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layers_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_trace_statistics_ask::~page_trace_statistics_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_trace_statistics_ask)
  SharedDtor();
}

void page_trace_statistics_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (page_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_type_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void page_trace_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_trace_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_trace_statistics_ask_descriptor_;
}

const page_trace_statistics_ask& page_trace_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_trace_statistics_ask* page_trace_statistics_ask::default_instance_ = NULL;

page_trace_statistics_ask* page_trace_statistics_ask::New() const {
  return new page_trace_statistics_ask;
}

void page_trace_statistics_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_type_->clear();
      }
    }
    layers_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_trace_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_trace_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_type;
        break;
      }

      // optional bytes page_type = 3;
      case 3: {
        if (tag == 26) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_layers;
        break;
      }

      // optional int32 layers = 4;
      case 4: {
        if (tag == 32) {
         parse_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layers_)));
          set_has_layers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_trace_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_trace_statistics_ask)
  return false;
#undef DO_
}

void page_trace_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_trace_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes page_type = 3;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->page_type(), output);
  }

  // optional int32 layers = 4;
  if (has_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layers(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_trace_statistics_ask)
}

::google::protobuf::uint8* page_trace_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_trace_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes page_type = 3;
  if (has_page_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->page_type(), target);
  }

  // optional int32 layers = 4;
  if (has_layers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layers(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_trace_statistics_ask)
  return target;
}

int page_trace_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes page_type = 3;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_type());
    }

    // optional int32 layers = 4;
    if (has_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layers());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_trace_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_trace_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_trace_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_trace_statistics_ask::MergeFrom(const page_trace_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_layers()) {
      set_layers(from.layers());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_trace_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_trace_statistics_ask::CopyFrom(const page_trace_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_trace_statistics_ask::IsInitialized() const {

  return true;
}

void page_trace_statistics_ask::Swap(page_trace_statistics_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(page_type_, other->page_type_);
    std::swap(layers_, other->layers_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_trace_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_trace_statistics_ask_descriptor_;
  metadata.reflection = page_trace_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_trace_statistics_ans::kInfoFieldNumber;
const int page_trace_statistics_ans::kJsonDataFieldNumber;
const int page_trace_statistics_ans::kResultFieldNumber;
#endif  // !_MSC_VER

page_trace_statistics_ans::page_trace_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_trace_statistics_ans)
}

void page_trace_statistics_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

page_trace_statistics_ans::page_trace_statistics_ans(const page_trace_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_trace_statistics_ans)
}

void page_trace_statistics_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_trace_statistics_ans::~page_trace_statistics_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_trace_statistics_ans)
  SharedDtor();
}

void page_trace_statistics_ans::SharedDtor() {
  if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_data_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void page_trace_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_trace_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_trace_statistics_ans_descriptor_;
}

const page_trace_statistics_ans& page_trace_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_trace_statistics_ans* page_trace_statistics_ans::default_instance_ = NULL;

page_trace_statistics_ans* page_trace_statistics_ans::New() const {
  return new page_trace_statistics_ans;
}

void page_trace_statistics_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_json_data()) {
      if (json_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_data_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_trace_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_trace_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UBAS_PageView.step_page_statistics info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_json_data;
        break;
      }

      // optional bytes json_data = 2;
      case 2: {
        if (tag == 18) {
         parse_json_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_trace_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_trace_statistics_ans)
  return false;
#undef DO_
}

void page_trace_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_trace_statistics_ans)
  // repeated .UBAS_PageView.step_page_statistics info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional bytes json_data = 2;
  if (has_json_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->json_data(), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_trace_statistics_ans)
}

::google::protobuf::uint8* page_trace_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_trace_statistics_ans)
  // repeated .UBAS_PageView.step_page_statistics info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional bytes json_data = 2;
  if (has_json_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->json_data(), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_trace_statistics_ans)
  return target;
}

int page_trace_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes json_data = 2;
    if (has_json_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_data());
    }

    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UBAS_PageView.step_page_statistics info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_trace_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_trace_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_trace_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_trace_statistics_ans::MergeFrom(const page_trace_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_json_data()) {
      set_json_data(from.json_data());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_trace_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_trace_statistics_ans::CopyFrom(const page_trace_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_trace_statistics_ans::IsInitialized() const {

  return true;
}

void page_trace_statistics_ans::Swap(page_trace_statistics_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(json_data_, other->json_data_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_trace_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_trace_statistics_ans_descriptor_;
  metadata.reflection = page_trace_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_ask::kStartDateFieldNumber;
const int opt_trace_ask::kEndDateFieldNumber;
const int opt_trace_ask::kMobilePhoneFieldNumber;
const int opt_trace_ask::kIdCardNoFieldNumber;
const int opt_trace_ask::kTraceTypeListFieldNumber;
const int opt_trace_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

opt_trace_ask::opt_trace_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_ask)
}

void opt_trace_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

opt_trace_ask::opt_trace_ask(const opt_trace_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_ask)
}

void opt_trace_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_ask::~opt_trace_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_ask)
  SharedDtor();
}

void opt_trace_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void opt_trace_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_ask_descriptor_;
}

const opt_trace_ask& opt_trace_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_ask* opt_trace_ask::default_instance_ = NULL;

opt_trace_ask* opt_trace_ask::New() const {
  return new opt_trace_ask;
}

void opt_trace_ask::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_card_no()) {
      if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_no_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  trace_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_card_no;
        break;
      }

      // optional bytes id_card_no = 4;
      case 4: {
        if (tag == 34) {
         parse_id_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trace_type_list;
        break;
      }

      // repeated int32 trace_type_list = 5;
      case 5: {
        if (tag == 40) {
         parse_trace_type_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_trace_type_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trace_type_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trace_type_list;
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_ask)
  return false;
#undef DO_
}

void opt_trace_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // optional bytes id_card_no = 4;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_card_no(), output);
  }

  // repeated int32 trace_type_list = 5;
  for (int i = 0; i < this->trace_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->trace_type_list(i), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_ask)
}

::google::protobuf::uint8* opt_trace_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // optional bytes id_card_no = 4;
  if (has_id_card_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_card_no(), target);
  }

  // repeated int32 trace_type_list = 5;
  for (int i = 0; i < this->trace_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->trace_type_list(i), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_ask)
  return target;
}

int opt_trace_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_card_no = 4;
    if (has_id_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card_no());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated int32 trace_type_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->trace_type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trace_type_list(i));
    }
    total_size += 1 * this->trace_type_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_ask::MergeFrom(const opt_trace_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  trace_type_list_.MergeFrom(from.trace_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_card_no()) {
      set_id_card_no(from.id_card_no());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_ask::CopyFrom(const opt_trace_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_ask::IsInitialized() const {

  return true;
}

void opt_trace_ask::Swap(opt_trace_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_card_no_, other->id_card_no_);
    trace_type_list_.Swap(&other->trace_type_list_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_ask_descriptor_;
  metadata.reflection = opt_trace_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_ans::kNicknameFieldNumber;
const int opt_trace_ans::kNameFieldNumber;
const int opt_trace_ans::kSexFieldNumber;
const int opt_trace_ans::kAgeFieldNumber;
const int opt_trace_ans::kIdentityFieldNumber;
const int opt_trace_ans::kIdcardNoFieldNumber;
const int opt_trace_ans::kPhoneFieldNumber;
const int opt_trace_ans::kAvatarFieldNumber;
const int opt_trace_ans::kOverdueStatusFieldNumber;
const int opt_trace_ans::kYearListFieldNumber;
const int opt_trace_ans::kResultFieldNumber;
#endif  // !_MSC_VER

opt_trace_ans::opt_trace_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_ans)
}

void opt_trace_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

opt_trace_ans::opt_trace_ans(const opt_trace_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_ans)
}

void opt_trace_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  age_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overdue_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_ans::~opt_trace_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_ans)
  SharedDtor();
}

void opt_trace_ans::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (age_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete age_;
  }
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_no_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (overdue_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete overdue_status_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void opt_trace_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_ans_descriptor_;
}

const opt_trace_ans& opt_trace_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_ans* opt_trace_ans::default_instance_ = NULL;

opt_trace_ans* opt_trace_ans::New() const {
  return new opt_trace_ans;
}

void opt_trace_ans::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_age()) {
      if (age_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        age_->clear();
      }
    }
    if (has_identity()) {
      if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_->clear();
      }
    }
    if (has_idcard_no()) {
      if (idcard_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idcard_no_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1280) {
    if (has_overdue_status()) {
      if (overdue_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        overdue_status_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  year_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_age;
        break;
      }

      // optional bytes age = 4;
      case 4: {
        if (tag == 34) {
         parse_age:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_age()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_identity;
        break;
      }

      // optional bytes identity = 5;
      case 5: {
        if (tag == 42) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_idcard_no;
        break;
      }

      // optional bytes idcard_no = 6;
      case 6: {
        if (tag == 50) {
         parse_idcard_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_idcard_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_phone;
        break;
      }

      // optional bytes phone = 7;
      case 7: {
        if (tag == 58) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_overdue_status;
        break;
      }

      // optional bytes overdue_status = 9;
      case 9: {
        if (tag == 74) {
         parse_overdue_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_overdue_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_year_list;
        break;
      }

      // repeated .UBAS_PageView.year year_list = 10;
      case 10: {
        if (tag == 82) {
         parse_year_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_year_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_year_list;
        if (input->ExpectTag(90)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 11;
      case 11: {
        if (tag == 90) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_ans)
  return false;
#undef DO_
}

void opt_trace_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_ans)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nickname(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional bytes age = 4;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->age(), output);
  }

  // optional bytes identity = 5;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->identity(), output);
  }

  // optional bytes idcard_no = 6;
  if (has_idcard_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->idcard_no(), output);
  }

  // optional bytes phone = 7;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->phone(), output);
  }

  // optional bytes avatar = 8;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->avatar(), output);
  }

  // optional bytes overdue_status = 9;
  if (has_overdue_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->overdue_status(), output);
  }

  // repeated .UBAS_PageView.year year_list = 10;
  for (int i = 0; i < this->year_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->year_list(i), output);
  }

  // optional .common.result_info result = 11;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_ans)
}

::google::protobuf::uint8* opt_trace_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_ans)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nickname(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional bytes age = 4;
  if (has_age()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->age(), target);
  }

  // optional bytes identity = 5;
  if (has_identity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->identity(), target);
  }

  // optional bytes idcard_no = 6;
  if (has_idcard_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->idcard_no(), target);
  }

  // optional bytes phone = 7;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->phone(), target);
  }

  // optional bytes avatar = 8;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->avatar(), target);
  }

  // optional bytes overdue_status = 9;
  if (has_overdue_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->overdue_status(), target);
  }

  // repeated .UBAS_PageView.year year_list = 10;
  for (int i = 0; i < this->year_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->year_list(i), target);
  }

  // optional .common.result_info result = 11;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_ans)
  return target;
}

int opt_trace_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional bytes age = 4;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->age());
    }

    // optional bytes identity = 5;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity());
    }

    // optional bytes idcard_no = 6;
    if (has_idcard_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->idcard_no());
    }

    // optional bytes phone = 7;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }

    // optional bytes avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes overdue_status = 9;
    if (has_overdue_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->overdue_status());
    }

    // optional .common.result_info result = 11;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UBAS_PageView.year year_list = 10;
  total_size += 1 * this->year_list_size();
  for (int i = 0; i < this->year_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->year_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_ans::MergeFrom(const opt_trace_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  year_list_.MergeFrom(from.year_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_idcard_no()) {
      set_idcard_no(from.idcard_no());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_overdue_status()) {
      set_overdue_status(from.overdue_status());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_ans::CopyFrom(const opt_trace_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_ans::IsInitialized() const {

  return true;
}

void opt_trace_ans::Swap(opt_trace_ans* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(identity_, other->identity_);
    std::swap(idcard_no_, other->idcard_no_);
    std::swap(phone_, other->phone_);
    std::swap(avatar_, other->avatar_);
    std::swap(overdue_status_, other->overdue_status_);
    year_list_.Swap(&other->year_list_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_ans_descriptor_;
  metadata.reflection = opt_trace_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int year::kYearNameFieldNumber;
const int year::kMonthListFieldNumber;
#endif  // !_MSC_VER

year::year()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.year)
}

void year::InitAsDefaultInstance() {
}

year::year(const year& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.year)
}

void year::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  year_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

year::~year() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.year)
  SharedDtor();
}

void year::SharedDtor() {
  if (year_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete year_name_;
  }
  if (this != default_instance_) {
  }
}

void year::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* year::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return year_descriptor_;
}

const year& year::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

year* year::default_instance_ = NULL;

year* year::New() const {
  return new year;
}

void year::Clear() {
  if (has_year_name()) {
    if (year_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      year_name_->clear();
    }
  }
  month_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool year::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.year)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes year_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_year_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_month_list;
        break;
      }

      // repeated .UBAS_PageView.month month_list = 2;
      case 2: {
        if (tag == 18) {
         parse_month_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_month_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_month_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.year)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.year)
  return false;
#undef DO_
}

void year::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.year)
  // optional bytes year_name = 1;
  if (has_year_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->year_name(), output);
  }

  // repeated .UBAS_PageView.month month_list = 2;
  for (int i = 0; i < this->month_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->month_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.year)
}

::google::protobuf::uint8* year::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.year)
  // optional bytes year_name = 1;
  if (has_year_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->year_name(), target);
  }

  // repeated .UBAS_PageView.month month_list = 2;
  for (int i = 0; i < this->month_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->month_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.year)
  return target;
}

int year::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes year_name = 1;
    if (has_year_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->year_name());
    }

  }
  // repeated .UBAS_PageView.month month_list = 2;
  total_size += 1 * this->month_list_size();
  for (int i = 0; i < this->month_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->month_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void year::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const year* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const year*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void year::MergeFrom(const year& from) {
  GOOGLE_CHECK_NE(&from, this);
  month_list_.MergeFrom(from.month_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year_name()) {
      set_year_name(from.year_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void year::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void year::CopyFrom(const year& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool year::IsInitialized() const {

  return true;
}

void year::Swap(year* other) {
  if (other != this) {
    std::swap(year_name_, other->year_name_);
    month_list_.Swap(&other->month_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata year::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = year_descriptor_;
  metadata.reflection = year_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int month::kMonthNameFieldNumber;
const int month::kOptListFieldNumber;
#endif  // !_MSC_VER

month::month()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.month)
}

void month::InitAsDefaultInstance() {
}

month::month(const month& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.month)
}

void month::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  month_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

month::~month() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.month)
  SharedDtor();
}

void month::SharedDtor() {
  if (month_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete month_name_;
  }
  if (this != default_instance_) {
  }
}

void month::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* month::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return month_descriptor_;
}

const month& month::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

month* month::default_instance_ = NULL;

month* month::New() const {
  return new month;
}

void month::Clear() {
  if (has_month_name()) {
    if (month_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      month_name_->clear();
    }
  }
  opt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool month::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.month)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes month_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_month_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opt_list;
        break;
      }

      // repeated .UBAS_PageView.opt_trace opt_list = 2;
      case 2: {
        if (tag == 18) {
         parse_opt_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opt_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opt_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.month)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.month)
  return false;
#undef DO_
}

void month::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.month)
  // optional bytes month_name = 1;
  if (has_month_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->month_name(), output);
  }

  // repeated .UBAS_PageView.opt_trace opt_list = 2;
  for (int i = 0; i < this->opt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.month)
}

::google::protobuf::uint8* month::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.month)
  // optional bytes month_name = 1;
  if (has_month_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->month_name(), target);
  }

  // repeated .UBAS_PageView.opt_trace opt_list = 2;
  for (int i = 0; i < this->opt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.month)
  return target;
}

int month::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes month_name = 1;
    if (has_month_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->month_name());
    }

  }
  // repeated .UBAS_PageView.opt_trace opt_list = 2;
  total_size += 1 * this->opt_list_size();
  for (int i = 0; i < this->opt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void month::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const month* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const month*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void month::MergeFrom(const month& from) {
  GOOGLE_CHECK_NE(&from, this);
  opt_list_.MergeFrom(from.opt_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_month_name()) {
      set_month_name(from.month_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void month::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void month::CopyFrom(const month& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool month::IsInitialized() const {

  return true;
}

void month::Swap(month* other) {
  if (other != this) {
    std::swap(month_name_, other->month_name_);
    opt_list_.Swap(&other->opt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata month::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = month_descriptor_;
  metadata.reflection = month_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace::kTypeFieldNumber;
const int opt_trace::kOptTimeFieldNumber;
const int opt_trace::kCommonsFieldNumber;
const int opt_trace::kBidFieldNumber;
const int opt_trace::kInvokeTraceFieldNumber;
const int opt_trace::kBusinessTraceFieldNumber;
const int opt_trace::kPageTraceListFieldNumber;
const int opt_trace::kFrwTraceFieldNumber;
const int opt_trace::kMaterialTraceFieldNumber;
const int opt_trace::kVtraceFieldNumber;
#endif  // !_MSC_VER

opt_trace::opt_trace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace)
}

void opt_trace::InitAsDefaultInstance() {
  commons_ = const_cast< ::UBAS_PageView::opt_trace_commons*>(&::UBAS_PageView::opt_trace_commons::default_instance());
  bid_ = const_cast< ::UBAS_PageView::opt_trace_bid*>(&::UBAS_PageView::opt_trace_bid::default_instance());
  invoke_trace_ = const_cast< ::UBAS_PageView::opt_trace_invoke*>(&::UBAS_PageView::opt_trace_invoke::default_instance());
  business_trace_ = const_cast< ::UBAS_PageView::opt_trace_business*>(&::UBAS_PageView::opt_trace_business::default_instance());
  frw_trace_ = const_cast< ::UBAS_PageView::opt_trace_fund_running_water*>(&::UBAS_PageView::opt_trace_fund_running_water::default_instance());
  material_trace_ = const_cast< ::UBAS_PageView::opt_trace_material*>(&::UBAS_PageView::opt_trace_material::default_instance());
  vtrace_ = const_cast< ::UBAS_PageView::verify_trace*>(&::UBAS_PageView::verify_trace::default_instance());
}

opt_trace::opt_trace(const opt_trace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace)
}

void opt_trace::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  opt_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commons_ = NULL;
  bid_ = NULL;
  invoke_trace_ = NULL;
  business_trace_ = NULL;
  frw_trace_ = NULL;
  material_trace_ = NULL;
  vtrace_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace::~opt_trace() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace)
  SharedDtor();
}

void opt_trace::SharedDtor() {
  if (opt_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_time_;
  }
  if (this != default_instance_) {
    delete commons_;
    delete bid_;
    delete invoke_trace_;
    delete business_trace_;
    delete frw_trace_;
    delete material_trace_;
    delete vtrace_;
  }
}

void opt_trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_descriptor_;
}

const opt_trace& opt_trace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace* opt_trace::default_instance_ = NULL;

opt_trace* opt_trace::New() const {
  return new opt_trace;
}

void opt_trace::Clear() {
  if (_has_bits_[0 / 32] & 191) {
    type_ = 0;
    if (has_opt_time()) {
      if (opt_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opt_time_->clear();
      }
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::UBAS_PageView::opt_trace_commons::Clear();
    }
    if (has_bid()) {
      if (bid_ != NULL) bid_->::UBAS_PageView::opt_trace_bid::Clear();
    }
    if (has_invoke_trace()) {
      if (invoke_trace_ != NULL) invoke_trace_->::UBAS_PageView::opt_trace_invoke::Clear();
    }
    if (has_business_trace()) {
      if (business_trace_ != NULL) business_trace_->::UBAS_PageView::opt_trace_business::Clear();
    }
    if (has_frw_trace()) {
      if (frw_trace_ != NULL) frw_trace_->::UBAS_PageView::opt_trace_fund_running_water::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_material_trace()) {
      if (material_trace_ != NULL) material_trace_->::UBAS_PageView::opt_trace_material::Clear();
    }
    if (has_vtrace()) {
      if (vtrace_ != NULL) vtrace_->::UBAS_PageView::verify_trace::Clear();
    }
  }
  page_trace_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opt_time;
        break;
      }

      // optional bytes opt_time = 2;
      case 2: {
        if (tag == 18) {
         parse_opt_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opt_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .UBAS_PageView.opt_trace_commons commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bid;
        break;
      }

      // optional .UBAS_PageView.opt_trace_bid bid = 4;
      case 4: {
        if (tag == 34) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_invoke_trace;
        break;
      }

      // optional .UBAS_PageView.opt_trace_invoke invoke_trace = 5;
      case 5: {
        if (tag == 42) {
         parse_invoke_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoke_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_business_trace;
        break;
      }

      // optional .UBAS_PageView.opt_trace_business business_trace = 6;
      case 6: {
        if (tag == 50) {
         parse_business_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_business_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_page_trace_list;
        break;
      }

      // repeated .UBAS_PageView.opt_trace_page page_trace_list = 7;
      case 7: {
        if (tag == 58) {
         parse_page_trace_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_trace_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_page_trace_list;
        if (input->ExpectTag(66)) goto parse_frw_trace;
        break;
      }

      // optional .UBAS_PageView.opt_trace_fund_running_water frw_trace = 8;
      case 8: {
        if (tag == 66) {
         parse_frw_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frw_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_material_trace;
        break;
      }

      // optional .UBAS_PageView.opt_trace_material material_trace = 9;
      case 9: {
        if (tag == 74) {
         parse_material_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vtrace;
        break;
      }

      // optional .UBAS_PageView.verify_trace vtrace = 10;
      case 10: {
        if (tag == 82) {
         parse_vtrace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vtrace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace)
  return false;
#undef DO_
}

void opt_trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bytes opt_time = 2;
  if (has_opt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->opt_time(), output);
  }

  // optional .UBAS_PageView.opt_trace_commons commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional .UBAS_PageView.opt_trace_bid bid = 4;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bid(), output);
  }

  // optional .UBAS_PageView.opt_trace_invoke invoke_trace = 5;
  if (has_invoke_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->invoke_trace(), output);
  }

  // optional .UBAS_PageView.opt_trace_business business_trace = 6;
  if (has_business_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->business_trace(), output);
  }

  // repeated .UBAS_PageView.opt_trace_page page_trace_list = 7;
  for (int i = 0; i < this->page_trace_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->page_trace_list(i), output);
  }

  // optional .UBAS_PageView.opt_trace_fund_running_water frw_trace = 8;
  if (has_frw_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->frw_trace(), output);
  }

  // optional .UBAS_PageView.opt_trace_material material_trace = 9;
  if (has_material_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->material_trace(), output);
  }

  // optional .UBAS_PageView.verify_trace vtrace = 10;
  if (has_vtrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vtrace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace)
}

::google::protobuf::uint8* opt_trace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bytes opt_time = 2;
  if (has_opt_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->opt_time(), target);
  }

  // optional .UBAS_PageView.opt_trace_commons commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional .UBAS_PageView.opt_trace_bid bid = 4;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bid(), target);
  }

  // optional .UBAS_PageView.opt_trace_invoke invoke_trace = 5;
  if (has_invoke_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->invoke_trace(), target);
  }

  // optional .UBAS_PageView.opt_trace_business business_trace = 6;
  if (has_business_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->business_trace(), target);
  }

  // repeated .UBAS_PageView.opt_trace_page page_trace_list = 7;
  for (int i = 0; i < this->page_trace_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->page_trace_list(i), target);
  }

  // optional .UBAS_PageView.opt_trace_fund_running_water frw_trace = 8;
  if (has_frw_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->frw_trace(), target);
  }

  // optional .UBAS_PageView.opt_trace_material material_trace = 9;
  if (has_material_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->material_trace(), target);
  }

  // optional .UBAS_PageView.verify_trace vtrace = 10;
  if (has_vtrace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vtrace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace)
  return target;
}

int opt_trace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes opt_time = 2;
    if (has_opt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opt_time());
    }

    // optional .UBAS_PageView.opt_trace_commons commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .UBAS_PageView.opt_trace_bid bid = 4;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid());
    }

    // optional .UBAS_PageView.opt_trace_invoke invoke_trace = 5;
    if (has_invoke_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoke_trace());
    }

    // optional .UBAS_PageView.opt_trace_business business_trace = 6;
    if (has_business_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->business_trace());
    }

    // optional .UBAS_PageView.opt_trace_fund_running_water frw_trace = 8;
    if (has_frw_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frw_trace());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .UBAS_PageView.opt_trace_material material_trace = 9;
    if (has_material_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->material_trace());
    }

    // optional .UBAS_PageView.verify_trace vtrace = 10;
    if (has_vtrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vtrace());
    }

  }
  // repeated .UBAS_PageView.opt_trace_page page_trace_list = 7;
  total_size += 1 * this->page_trace_list_size();
  for (int i = 0; i < this->page_trace_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->page_trace_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace::MergeFrom(const opt_trace& from) {
  GOOGLE_CHECK_NE(&from, this);
  page_trace_list_.MergeFrom(from.page_trace_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opt_time()) {
      set_opt_time(from.opt_time());
    }
    if (from.has_commons()) {
      mutable_commons()->::UBAS_PageView::opt_trace_commons::MergeFrom(from.commons());
    }
    if (from.has_bid()) {
      mutable_bid()->::UBAS_PageView::opt_trace_bid::MergeFrom(from.bid());
    }
    if (from.has_invoke_trace()) {
      mutable_invoke_trace()->::UBAS_PageView::opt_trace_invoke::MergeFrom(from.invoke_trace());
    }
    if (from.has_business_trace()) {
      mutable_business_trace()->::UBAS_PageView::opt_trace_business::MergeFrom(from.business_trace());
    }
    if (from.has_frw_trace()) {
      mutable_frw_trace()->::UBAS_PageView::opt_trace_fund_running_water::MergeFrom(from.frw_trace());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_material_trace()) {
      mutable_material_trace()->::UBAS_PageView::opt_trace_material::MergeFrom(from.material_trace());
    }
    if (from.has_vtrace()) {
      mutable_vtrace()->::UBAS_PageView::verify_trace::MergeFrom(from.vtrace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace::CopyFrom(const opt_trace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace::IsInitialized() const {

  return true;
}

void opt_trace::Swap(opt_trace* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(opt_time_, other->opt_time_);
    std::swap(commons_, other->commons_);
    std::swap(bid_, other->bid_);
    std::swap(invoke_trace_, other->invoke_trace_);
    std::swap(business_trace_, other->business_trace_);
    page_trace_list_.Swap(&other->page_trace_list_);
    std::swap(frw_trace_, other->frw_trace_);
    std::swap(material_trace_, other->material_trace_);
    std::swap(vtrace_, other->vtrace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_descriptor_;
  metadata.reflection = opt_trace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_commons::kClientLocationFieldNumber;
const int opt_trace_commons::kClientTypeFieldNumber;
const int opt_trace_commons::kClientIdFieldNumber;
const int opt_trace_commons::kClientBrandFieldNumber;
const int opt_trace_commons::kClientModelFieldNumber;
const int opt_trace_commons::kInternetTypeFieldNumber;
const int opt_trace_commons::kClientIpFieldNumber;
const int opt_trace_commons::kClientIpLocationFieldNumber;
#endif  // !_MSC_VER

opt_trace_commons::opt_trace_commons()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_commons)
}

void opt_trace_commons::InitAsDefaultInstance() {
}

opt_trace_commons::opt_trace_commons(const opt_trace_commons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_commons)
}

void opt_trace_commons::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internet_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_commons::~opt_trace_commons() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_commons)
  SharedDtor();
}

void opt_trace_commons::SharedDtor() {
  if (client_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_location_;
  }
  if (client_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_type_;
  }
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (client_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_brand_;
  }
  if (client_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_model_;
  }
  if (internet_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete internet_type_;
  }
  if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_;
  }
  if (client_ip_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_ip_location_;
  }
  if (this != default_instance_) {
  }
}

void opt_trace_commons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_commons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_commons_descriptor_;
}

const opt_trace_commons& opt_trace_commons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_commons* opt_trace_commons::default_instance_ = NULL;

opt_trace_commons* opt_trace_commons::New() const {
  return new opt_trace_commons;
}

void opt_trace_commons::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_client_location()) {
      if (client_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_location_->clear();
      }
    }
    if (has_client_type()) {
      if (client_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_type_->clear();
      }
    }
    if (has_client_id()) {
      if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_id_->clear();
      }
    }
    if (has_client_brand()) {
      if (client_brand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_brand_->clear();
      }
    }
    if (has_client_model()) {
      if (client_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_model_->clear();
      }
    }
    if (has_internet_type()) {
      if (internet_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        internet_type_->clear();
      }
    }
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ip_->clear();
      }
    }
    if (has_client_ip_location()) {
      if (client_ip_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_ip_location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_commons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_commons)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes client_location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_type;
        break;
      }

      // optional bytes client_type = 2;
      case 2: {
        if (tag == 18) {
         parse_client_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_id;
        break;
      }

      // optional bytes client_id = 3;
      case 3: {
        if (tag == 26) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_brand;
        break;
      }

      // optional bytes client_brand = 4;
      case 4: {
        if (tag == 34) {
         parse_client_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_model;
        break;
      }

      // optional bytes client_model = 5;
      case 5: {
        if (tag == 42) {
         parse_client_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_internet_type;
        break;
      }

      // optional bytes internet_type = 6;
      case 6: {
        if (tag == 50) {
         parse_internet_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_internet_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_client_ip;
        break;
      }

      // optional bytes client_ip = 7;
      case 7: {
        if (tag == 58) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_client_ip_location;
        break;
      }

      // optional bytes client_ip_location = 8;
      case 8: {
        if (tag == 66) {
         parse_client_ip_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_ip_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_commons)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_commons)
  return false;
#undef DO_
}

void opt_trace_commons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_commons)
  // optional bytes client_location = 1;
  if (has_client_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->client_location(), output);
  }

  // optional bytes client_type = 2;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_type(), output);
  }

  // optional bytes client_id = 3;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->client_id(), output);
  }

  // optional bytes client_brand = 4;
  if (has_client_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->client_brand(), output);
  }

  // optional bytes client_model = 5;
  if (has_client_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->client_model(), output);
  }

  // optional bytes internet_type = 6;
  if (has_internet_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->internet_type(), output);
  }

  // optional bytes client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->client_ip(), output);
  }

  // optional bytes client_ip_location = 8;
  if (has_client_ip_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->client_ip_location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_commons)
}

::google::protobuf::uint8* opt_trace_commons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_commons)
  // optional bytes client_location = 1;
  if (has_client_location()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_location(), target);
  }

  // optional bytes client_type = 2;
  if (has_client_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->client_type(), target);
  }

  // optional bytes client_id = 3;
  if (has_client_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->client_id(), target);
  }

  // optional bytes client_brand = 4;
  if (has_client_brand()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->client_brand(), target);
  }

  // optional bytes client_model = 5;
  if (has_client_model()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->client_model(), target);
  }

  // optional bytes internet_type = 6;
  if (has_internet_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->internet_type(), target);
  }

  // optional bytes client_ip = 7;
  if (has_client_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->client_ip(), target);
  }

  // optional bytes client_ip_location = 8;
  if (has_client_ip_location()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->client_ip_location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_commons)
  return target;
}

int opt_trace_commons::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes client_location = 1;
    if (has_client_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_location());
    }

    // optional bytes client_type = 2;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_type());
    }

    // optional bytes client_id = 3;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }

    // optional bytes client_brand = 4;
    if (has_client_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_brand());
    }

    // optional bytes client_model = 5;
    if (has_client_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_model());
    }

    // optional bytes internet_type = 6;
    if (has_internet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->internet_type());
    }

    // optional bytes client_ip = 7;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_ip());
    }

    // optional bytes client_ip_location = 8;
    if (has_client_ip_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_ip_location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_commons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_commons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_commons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_commons::MergeFrom(const opt_trace_commons& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_location()) {
      set_client_location(from.client_location());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_client_brand()) {
      set_client_brand(from.client_brand());
    }
    if (from.has_client_model()) {
      set_client_model(from.client_model());
    }
    if (from.has_internet_type()) {
      set_internet_type(from.internet_type());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_client_ip_location()) {
      set_client_ip_location(from.client_ip_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_commons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_commons::CopyFrom(const opt_trace_commons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_commons::IsInitialized() const {

  return true;
}

void opt_trace_commons::Swap(opt_trace_commons* other) {
  if (other != this) {
    std::swap(client_location_, other->client_location_);
    std::swap(client_type_, other->client_type_);
    std::swap(client_id_, other->client_id_);
    std::swap(client_brand_, other->client_brand_);
    std::swap(client_model_, other->client_model_);
    std::swap(internet_type_, other->internet_type_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(client_ip_location_, other->client_ip_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_commons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_commons_descriptor_;
  metadata.reflection = opt_trace_commons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_bid::kBidIdFieldNumber;
const int opt_trace_bid::kBidAvatarFieldNumber;
const int opt_trace_bid::kBidNicknameFieldNumber;
const int opt_trace_bid::kBidTimeFieldNumber;
const int opt_trace_bid::kBidTitleFieldNumber;
const int opt_trace_bid::kBidAmountFieldNumber;
const int opt_trace_bid::kBidRateFieldNumber;
const int opt_trace_bid::kBidFeerateFieldNumber;
const int opt_trace_bid::kBidDeadlineFieldNumber;
const int opt_trace_bid::kDiligenceNicknameFieldNumber;
const int opt_trace_bid::kDiligenceAvatarFieldNumber;
#endif  // !_MSC_VER

opt_trace_bid::opt_trace_bid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_bid)
}

void opt_trace_bid::InitAsDefaultInstance() {
}

opt_trace_bid::opt_trace_bid(const opt_trace_bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_bid)
}

void opt_trace_bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_amount_ = 0;
  bid_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_feerate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligence_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligence_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_bid::~opt_trace_bid() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_bid)
  SharedDtor();
}

void opt_trace_bid::SharedDtor() {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_id_;
  }
  if (bid_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_avatar_;
  }
  if (bid_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_nickname_;
  }
  if (bid_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_time_;
  }
  if (bid_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_title_;
  }
  if (bid_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_rate_;
  }
  if (bid_feerate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_feerate_;
  }
  if (bid_deadline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_deadline_;
  }
  if (diligence_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligence_nickname_;
  }
  if (diligence_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligence_avatar_;
  }
  if (this != default_instance_) {
  }
}

void opt_trace_bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_bid_descriptor_;
}

const opt_trace_bid& opt_trace_bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_bid* opt_trace_bid::default_instance_ = NULL;

opt_trace_bid* opt_trace_bid::New() const {
  return new opt_trace_bid;
}

void opt_trace_bid::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_bid_id()) {
      if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_id_->clear();
      }
    }
    if (has_bid_avatar()) {
      if (bid_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_avatar_->clear();
      }
    }
    if (has_bid_nickname()) {
      if (bid_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_nickname_->clear();
      }
    }
    if (has_bid_time()) {
      if (bid_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_time_->clear();
      }
    }
    if (has_bid_title()) {
      if (bid_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_title_->clear();
      }
    }
    bid_amount_ = 0;
    if (has_bid_rate()) {
      if (bid_rate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_rate_->clear();
      }
    }
    if (has_bid_feerate()) {
      if (bid_feerate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_feerate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_bid_deadline()) {
      if (bid_deadline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_deadline_->clear();
      }
    }
    if (has_diligence_nickname()) {
      if (diligence_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligence_nickname_->clear();
      }
    }
    if (has_diligence_avatar()) {
      if (diligence_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligence_avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bid_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid_avatar;
        break;
      }

      // optional bytes bid_avatar = 2;
      case 2: {
        if (tag == 18) {
         parse_bid_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bid_nickname;
        break;
      }

      // optional bytes bid_nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_bid_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bid_time;
        break;
      }

      // optional bytes bid_time = 4;
      case 4: {
        if (tag == 34) {
         parse_bid_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bid_title;
        break;
      }

      // optional bytes bid_title = 5;
      case 5: {
        if (tag == 42) {
         parse_bid_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_bid_amount;
        break;
      }

      // optional float bid_amount = 6;
      case 6: {
        if (tag == 53) {
         parse_bid_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bid_amount_)));
          set_has_bid_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bid_rate;
        break;
      }

      // optional bytes bid_rate = 7;
      case 7: {
        if (tag == 58) {
         parse_bid_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bid_feerate;
        break;
      }

      // optional bytes bid_feerate = 8;
      case 8: {
        if (tag == 66) {
         parse_bid_feerate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_feerate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bid_deadline;
        break;
      }

      // optional bytes bid_deadline = 9;
      case 9: {
        if (tag == 74) {
         parse_bid_deadline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_deadline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_diligence_nickname;
        break;
      }

      // optional bytes diligence_nickname = 10;
      case 10: {
        if (tag == 82) {
         parse_diligence_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligence_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_diligence_avatar;
        break;
      }

      // optional bytes diligence_avatar = 11;
      case 11: {
        if (tag == 90) {
         parse_diligence_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligence_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_bid)
  return false;
#undef DO_
}

void opt_trace_bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_bid)
  // optional bytes bid_id = 1;
  if (has_bid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bid_id(), output);
  }

  // optional bytes bid_avatar = 2;
  if (has_bid_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bid_avatar(), output);
  }

  // optional bytes bid_nickname = 3;
  if (has_bid_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bid_nickname(), output);
  }

  // optional bytes bid_time = 4;
  if (has_bid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bid_time(), output);
  }

  // optional bytes bid_title = 5;
  if (has_bid_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->bid_title(), output);
  }

  // optional float bid_amount = 6;
  if (has_bid_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bid_amount(), output);
  }

  // optional bytes bid_rate = 7;
  if (has_bid_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->bid_rate(), output);
  }

  // optional bytes bid_feerate = 8;
  if (has_bid_feerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->bid_feerate(), output);
  }

  // optional bytes bid_deadline = 9;
  if (has_bid_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->bid_deadline(), output);
  }

  // optional bytes diligence_nickname = 10;
  if (has_diligence_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->diligence_nickname(), output);
  }

  // optional bytes diligence_avatar = 11;
  if (has_diligence_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->diligence_avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_bid)
}

::google::protobuf::uint8* opt_trace_bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_bid)
  // optional bytes bid_id = 1;
  if (has_bid_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bid_id(), target);
  }

  // optional bytes bid_avatar = 2;
  if (has_bid_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bid_avatar(), target);
  }

  // optional bytes bid_nickname = 3;
  if (has_bid_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bid_nickname(), target);
  }

  // optional bytes bid_time = 4;
  if (has_bid_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bid_time(), target);
  }

  // optional bytes bid_title = 5;
  if (has_bid_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bid_title(), target);
  }

  // optional float bid_amount = 6;
  if (has_bid_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bid_amount(), target);
  }

  // optional bytes bid_rate = 7;
  if (has_bid_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->bid_rate(), target);
  }

  // optional bytes bid_feerate = 8;
  if (has_bid_feerate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->bid_feerate(), target);
  }

  // optional bytes bid_deadline = 9;
  if (has_bid_deadline()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->bid_deadline(), target);
  }

  // optional bytes diligence_nickname = 10;
  if (has_diligence_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->diligence_nickname(), target);
  }

  // optional bytes diligence_avatar = 11;
  if (has_diligence_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->diligence_avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_bid)
  return target;
}

int opt_trace_bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bid_id = 1;
    if (has_bid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_id());
    }

    // optional bytes bid_avatar = 2;
    if (has_bid_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_avatar());
    }

    // optional bytes bid_nickname = 3;
    if (has_bid_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_nickname());
    }

    // optional bytes bid_time = 4;
    if (has_bid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_time());
    }

    // optional bytes bid_title = 5;
    if (has_bid_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_title());
    }

    // optional float bid_amount = 6;
    if (has_bid_amount()) {
      total_size += 1 + 4;
    }

    // optional bytes bid_rate = 7;
    if (has_bid_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_rate());
    }

    // optional bytes bid_feerate = 8;
    if (has_bid_feerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_feerate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes bid_deadline = 9;
    if (has_bid_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_deadline());
    }

    // optional bytes diligence_nickname = 10;
    if (has_diligence_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligence_nickname());
    }

    // optional bytes diligence_avatar = 11;
    if (has_diligence_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligence_avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_bid::MergeFrom(const opt_trace_bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid_id()) {
      set_bid_id(from.bid_id());
    }
    if (from.has_bid_avatar()) {
      set_bid_avatar(from.bid_avatar());
    }
    if (from.has_bid_nickname()) {
      set_bid_nickname(from.bid_nickname());
    }
    if (from.has_bid_time()) {
      set_bid_time(from.bid_time());
    }
    if (from.has_bid_title()) {
      set_bid_title(from.bid_title());
    }
    if (from.has_bid_amount()) {
      set_bid_amount(from.bid_amount());
    }
    if (from.has_bid_rate()) {
      set_bid_rate(from.bid_rate());
    }
    if (from.has_bid_feerate()) {
      set_bid_feerate(from.bid_feerate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bid_deadline()) {
      set_bid_deadline(from.bid_deadline());
    }
    if (from.has_diligence_nickname()) {
      set_diligence_nickname(from.diligence_nickname());
    }
    if (from.has_diligence_avatar()) {
      set_diligence_avatar(from.diligence_avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_bid::CopyFrom(const opt_trace_bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_bid::IsInitialized() const {

  return true;
}

void opt_trace_bid::Swap(opt_trace_bid* other) {
  if (other != this) {
    std::swap(bid_id_, other->bid_id_);
    std::swap(bid_avatar_, other->bid_avatar_);
    std::swap(bid_nickname_, other->bid_nickname_);
    std::swap(bid_time_, other->bid_time_);
    std::swap(bid_title_, other->bid_title_);
    std::swap(bid_amount_, other->bid_amount_);
    std::swap(bid_rate_, other->bid_rate_);
    std::swap(bid_feerate_, other->bid_feerate_);
    std::swap(bid_deadline_, other->bid_deadline_);
    std::swap(diligence_nickname_, other->diligence_nickname_);
    std::swap(diligence_avatar_, other->diligence_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_bid_descriptor_;
  metadata.reflection = opt_trace_bid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_invoke::kInvokeNameFieldNumber;
const int opt_trace_invoke::kVerifyResultFieldNumber;
const int opt_trace_invoke::kHandleResultFieldNumber;
const int opt_trace_invoke::kErrorMsgFieldNumber;
const int opt_trace_invoke::kInvokeVersionFieldNumber;
const int opt_trace_invoke::kHandleStatusFieldNumber;
const int opt_trace_invoke::kCreditLimitFieldNumber;
#endif  // !_MSC_VER

opt_trace_invoke::opt_trace_invoke()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_invoke)
}

void opt_trace_invoke::InitAsDefaultInstance() {
}

opt_trace_invoke::opt_trace_invoke(const opt_trace_invoke& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_invoke)
}

void opt_trace_invoke::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoke_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_result_ = 0;
  handle_result_ = 0;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoke_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_status_ = 0;
  credit_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_invoke::~opt_trace_invoke() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_invoke)
  SharedDtor();
}

void opt_trace_invoke::SharedDtor() {
  if (invoke_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoke_name_;
  }
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  if (invoke_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoke_version_;
  }
  if (this != default_instance_) {
  }
}

void opt_trace_invoke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_invoke::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_invoke_descriptor_;
}

const opt_trace_invoke& opt_trace_invoke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_invoke* opt_trace_invoke::default_instance_ = NULL;

opt_trace_invoke* opt_trace_invoke::New() const {
  return new opt_trace_invoke;
}

void opt_trace_invoke::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<opt_trace_invoke*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(verify_result_, handle_result_);
    ZR_(handle_status_, credit_limit_);
    if (has_invoke_name()) {
      if (invoke_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoke_name_->clear();
      }
    }
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_msg_->clear();
      }
    }
    if (has_invoke_version()) {
      if (invoke_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoke_version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_invoke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_invoke)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes invoke_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invoke_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_verify_result;
        break;
      }

      // optional int32 verify_result = 2;
      case 2: {
        if (tag == 16) {
         parse_verify_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verify_result_)));
          set_has_verify_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_result;
        break;
      }

      // optional int32 handle_result = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_result_)));
          set_has_handle_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional bytes error_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_invoke_version;
        break;
      }

      // optional bytes invoke_version = 5;
      case 5: {
        if (tag == 42) {
         parse_invoke_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invoke_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_handle_status;
        break;
      }

      // optional int32 handle_status = 6;
      case 6: {
        if (tag == 48) {
         parse_handle_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_status_)));
          set_has_handle_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_credit_limit;
        break;
      }

      // optional float credit_limit = 7;
      case 7: {
        if (tag == 61) {
         parse_credit_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &credit_limit_)));
          set_has_credit_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_invoke)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_invoke)
  return false;
#undef DO_
}

void opt_trace_invoke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_invoke)
  // optional bytes invoke_name = 1;
  if (has_invoke_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->invoke_name(), output);
  }

  // optional int32 verify_result = 2;
  if (has_verify_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->verify_result(), output);
  }

  // optional int32 handle_result = 3;
  if (has_handle_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->handle_result(), output);
  }

  // optional bytes error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->error_msg(), output);
  }

  // optional bytes invoke_version = 5;
  if (has_invoke_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->invoke_version(), output);
  }

  // optional int32 handle_status = 6;
  if (has_handle_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->handle_status(), output);
  }

  // optional float credit_limit = 7;
  if (has_credit_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->credit_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_invoke)
}

::google::protobuf::uint8* opt_trace_invoke::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_invoke)
  // optional bytes invoke_name = 1;
  if (has_invoke_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->invoke_name(), target);
  }

  // optional int32 verify_result = 2;
  if (has_verify_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->verify_result(), target);
  }

  // optional int32 handle_result = 3;
  if (has_handle_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->handle_result(), target);
  }

  // optional bytes error_msg = 4;
  if (has_error_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->error_msg(), target);
  }

  // optional bytes invoke_version = 5;
  if (has_invoke_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->invoke_version(), target);
  }

  // optional int32 handle_status = 6;
  if (has_handle_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->handle_status(), target);
  }

  // optional float credit_limit = 7;
  if (has_credit_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->credit_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_invoke)
  return target;
}

int opt_trace_invoke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes invoke_name = 1;
    if (has_invoke_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invoke_name());
    }

    // optional int32 verify_result = 2;
    if (has_verify_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verify_result());
    }

    // optional int32 handle_result = 3;
    if (has_handle_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_result());
    }

    // optional bytes error_msg = 4;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_msg());
    }

    // optional bytes invoke_version = 5;
    if (has_invoke_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invoke_version());
    }

    // optional int32 handle_status = 6;
    if (has_handle_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_status());
    }

    // optional float credit_limit = 7;
    if (has_credit_limit()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_invoke::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_invoke* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_invoke*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_invoke::MergeFrom(const opt_trace_invoke& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke_name()) {
      set_invoke_name(from.invoke_name());
    }
    if (from.has_verify_result()) {
      set_verify_result(from.verify_result());
    }
    if (from.has_handle_result()) {
      set_handle_result(from.handle_result());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_invoke_version()) {
      set_invoke_version(from.invoke_version());
    }
    if (from.has_handle_status()) {
      set_handle_status(from.handle_status());
    }
    if (from.has_credit_limit()) {
      set_credit_limit(from.credit_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_invoke::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_invoke::CopyFrom(const opt_trace_invoke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_invoke::IsInitialized() const {

  return true;
}

void opt_trace_invoke::Swap(opt_trace_invoke* other) {
  if (other != this) {
    std::swap(invoke_name_, other->invoke_name_);
    std::swap(verify_result_, other->verify_result_);
    std::swap(handle_result_, other->handle_result_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(invoke_version_, other->invoke_version_);
    std::swap(handle_status_, other->handle_status_);
    std::swap(credit_limit_, other->credit_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_invoke::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_invoke_descriptor_;
  metadata.reflection = opt_trace_invoke_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_business::kBusinessTypeFieldNumber;
const int opt_trace_business::kInvestTimeFieldNumber;
const int opt_trace_business::kInvestAmountFieldNumber;
const int opt_trace_business::kGuaranteeTimeFieldNumber;
const int opt_trace_business::kGuaranteeAmountFieldNumber;
const int opt_trace_business::kRepayPeriodFieldNumber;
const int opt_trace_business::kRepayPeriodsFieldNumber;
const int opt_trace_business::kRepayTimeFieldNumber;
const int opt_trace_business::kRepayAmountFieldNumber;
const int opt_trace_business::kShouldRepayAmountFieldNumber;
const int opt_trace_business::kVieforAvatarFieldNumber;
const int opt_trace_business::kVieforNicknameFieldNumber;
const int opt_trace_business::kVieforNameFieldNumber;
const int opt_trace_business::kVieforPhoneFieldNumber;
const int opt_trace_business::kVieforIdcardFieldNumber;
const int opt_trace_business::kBorrowmanNameFieldNumber;
const int opt_trace_business::kBorrowmanPhoneFieldNumber;
const int opt_trace_business::kBorrowmanIdcardFieldNumber;
const int opt_trace_business::kDiligencedNameFieldNumber;
const int opt_trace_business::kDiligencedIdcardFieldNumber;
const int opt_trace_business::kDiligencedPhoneFieldNumber;
const int opt_trace_business::kDiligenceLocationFieldNumber;
const int opt_trace_business::kDiligencedLocationFieldNumber;
const int opt_trace_business::kGvBorrowmanNameFieldNumber;
const int opt_trace_business::kGvBorrowmanPhoneFieldNumber;
const int opt_trace_business::kGvBorrowmanIdcardFieldNumber;
const int opt_trace_business::kOverdueBadbillAmountFieldNumber;
const int opt_trace_business::kOverdueBadbillPeriodFieldNumber;
const int opt_trace_business::kOverdueBadbillPeriodsFieldNumber;
const int opt_trace_business::kQiaoqiaoBorrowNicknameFieldNumber;
const int opt_trace_business::kQiaoqiaoBorrowAmountFieldNumber;
const int opt_trace_business::kQiaoqiaoBorrowUsageFieldNumber;
const int opt_trace_business::kQiaoqiaoBorrowRateFieldNumber;
const int opt_trace_business::kQiaoqiaoBorrowLocationFieldNumber;
const int opt_trace_business::kQiaoqiaoRepayAmountFieldNumber;
const int opt_trace_business::kQiaoqiaoInvestAmountFieldNumber;
#endif  // !_MSC_VER

opt_trace_business::opt_trace_business()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_business)
}

void opt_trace_business::InitAsDefaultInstance() {
}

opt_trace_business::opt_trace_business(const opt_trace_business& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_business)
}

void opt_trace_business::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  business_type_ = 0;
  invest_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invest_amount_ = 0;
  guarantee_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guarantee_amount_ = 0;
  repay_period_ = 0;
  repay_periods_ = 0;
  repay_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repay_amount_ = 0;
  should_repay_amount_ = 0;
  viefor_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viefor_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viefor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viefor_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viefor_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrowman_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrowman_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrowman_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligenced_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligenced_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligenced_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligence_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diligenced_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gv_borrowman_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gv_borrowman_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gv_borrowman_idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overdue_badbill_amount_ = 0;
  overdue_badbill_period_ = 0;
  overdue_badbill_periods_ = 0;
  qiaoqiao_borrow_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qiaoqiao_borrow_amount_ = 0;
  qiaoqiao_borrow_usage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qiaoqiao_borrow_rate_ = 0;
  qiaoqiao_borrow_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qiaoqiao_repay_amount_ = 0;
  qiaoqiao_invest_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_business::~opt_trace_business() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_business)
  SharedDtor();
}

void opt_trace_business::SharedDtor() {
  if (invest_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invest_time_;
  }
  if (guarantee_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guarantee_time_;
  }
  if (repay_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repay_time_;
  }
  if (viefor_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_avatar_;
  }
  if (viefor_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_nickname_;
  }
  if (viefor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_name_;
  }
  if (viefor_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_phone_;
  }
  if (viefor_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viefor_idcard_;
  }
  if (borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowman_name_;
  }
  if (borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowman_phone_;
  }
  if (borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrowman_idcard_;
  }
  if (diligenced_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_name_;
  }
  if (diligenced_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_idcard_;
  }
  if (diligenced_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_phone_;
  }
  if (diligence_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligence_location_;
  }
  if (diligenced_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diligenced_location_;
  }
  if (gv_borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gv_borrowman_name_;
  }
  if (gv_borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gv_borrowman_phone_;
  }
  if (gv_borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gv_borrowman_idcard_;
  }
  if (qiaoqiao_borrow_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qiaoqiao_borrow_nickname_;
  }
  if (qiaoqiao_borrow_usage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qiaoqiao_borrow_usage_;
  }
  if (qiaoqiao_borrow_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qiaoqiao_borrow_location_;
  }
  if (this != default_instance_) {
  }
}

void opt_trace_business::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_business::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_business_descriptor_;
}

const opt_trace_business& opt_trace_business::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_business* opt_trace_business::default_instance_ = NULL;

opt_trace_business* opt_trace_business::New() const {
  return new opt_trace_business;
}

void opt_trace_business::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<opt_trace_business*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(business_type_, invest_amount_);
    ZR_(guarantee_amount_, repay_period_);
    if (has_invest_time()) {
      if (invest_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invest_time_->clear();
      }
    }
    if (has_guarantee_time()) {
      if (guarantee_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guarantee_time_->clear();
      }
    }
    repay_periods_ = 0;
    if (has_repay_time()) {
      if (repay_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repay_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    repay_amount_ = 0;
    should_repay_amount_ = 0;
    if (has_viefor_avatar()) {
      if (viefor_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viefor_avatar_->clear();
      }
    }
    if (has_viefor_nickname()) {
      if (viefor_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viefor_nickname_->clear();
      }
    }
    if (has_viefor_name()) {
      if (viefor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viefor_name_->clear();
      }
    }
    if (has_viefor_phone()) {
      if (viefor_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viefor_phone_->clear();
      }
    }
    if (has_viefor_idcard()) {
      if (viefor_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viefor_idcard_->clear();
      }
    }
    if (has_borrowman_name()) {
      if (borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrowman_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_borrowman_phone()) {
      if (borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrowman_phone_->clear();
      }
    }
    if (has_borrowman_idcard()) {
      if (borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrowman_idcard_->clear();
      }
    }
    if (has_diligenced_name()) {
      if (diligenced_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligenced_name_->clear();
      }
    }
    if (has_diligenced_idcard()) {
      if (diligenced_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligenced_idcard_->clear();
      }
    }
    if (has_diligenced_phone()) {
      if (diligenced_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligenced_phone_->clear();
      }
    }
    if (has_diligence_location()) {
      if (diligence_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligence_location_->clear();
      }
    }
    if (has_diligenced_location()) {
      if (diligenced_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diligenced_location_->clear();
      }
    }
    if (has_gv_borrowman_name()) {
      if (gv_borrowman_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gv_borrowman_name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(overdue_badbill_period_, overdue_badbill_periods_);
    if (has_gv_borrowman_phone()) {
      if (gv_borrowman_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gv_borrowman_phone_->clear();
      }
    }
    if (has_gv_borrowman_idcard()) {
      if (gv_borrowman_idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gv_borrowman_idcard_->clear();
      }
    }
    overdue_badbill_amount_ = 0;
    if (has_qiaoqiao_borrow_nickname()) {
      if (qiaoqiao_borrow_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qiaoqiao_borrow_nickname_->clear();
      }
    }
    qiaoqiao_borrow_amount_ = 0;
    if (has_qiaoqiao_borrow_usage()) {
      if (qiaoqiao_borrow_usage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qiaoqiao_borrow_usage_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 15) {
    ZR_(qiaoqiao_repay_amount_, qiaoqiao_invest_amount_);
    qiaoqiao_borrow_rate_ = 0;
    if (has_qiaoqiao_borrow_location()) {
      if (qiaoqiao_borrow_location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qiaoqiao_borrow_location_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_business::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_business)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 business_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_type_)));
          set_has_business_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invest_time;
        break;
      }

      // optional bytes invest_time = 2;
      case 2: {
        if (tag == 18) {
         parse_invest_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invest_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_invest_amount;
        break;
      }

      // optional float invest_amount = 3;
      case 3: {
        if (tag == 29) {
         parse_invest_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &invest_amount_)));
          set_has_invest_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guarantee_time;
        break;
      }

      // optional bytes guarantee_time = 4;
      case 4: {
        if (tag == 34) {
         parse_guarantee_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guarantee_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_guarantee_amount;
        break;
      }

      // optional float guarantee_amount = 5;
      case 5: {
        if (tag == 45) {
         parse_guarantee_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &guarantee_amount_)));
          set_has_guarantee_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_repay_period;
        break;
      }

      // optional int32 repay_period = 6;
      case 6: {
        if (tag == 48) {
         parse_repay_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repay_period_)));
          set_has_repay_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_repay_periods;
        break;
      }

      // optional int32 repay_periods = 7;
      case 7: {
        if (tag == 56) {
         parse_repay_periods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repay_periods_)));
          set_has_repay_periods();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_repay_time;
        break;
      }

      // optional bytes repay_time = 8;
      case 8: {
        if (tag == 66) {
         parse_repay_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repay_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_repay_amount;
        break;
      }

      // optional float repay_amount = 9;
      case 9: {
        if (tag == 77) {
         parse_repay_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &repay_amount_)));
          set_has_repay_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_should_repay_amount;
        break;
      }

      // optional float should_repay_amount = 10;
      case 10: {
        if (tag == 85) {
         parse_should_repay_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &should_repay_amount_)));
          set_has_should_repay_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_viefor_avatar;
        break;
      }

      // optional bytes viefor_avatar = 11;
      case 11: {
        if (tag == 90) {
         parse_viefor_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_viefor_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_viefor_nickname;
        break;
      }

      // optional bytes viefor_nickname = 12;
      case 12: {
        if (tag == 98) {
         parse_viefor_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_viefor_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_viefor_name;
        break;
      }

      // optional bytes viefor_name = 13;
      case 13: {
        if (tag == 106) {
         parse_viefor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_viefor_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_viefor_phone;
        break;
      }

      // optional bytes viefor_phone = 14;
      case 14: {
        if (tag == 114) {
         parse_viefor_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_viefor_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_viefor_idcard;
        break;
      }

      // optional bytes viefor_idcard = 15;
      case 15: {
        if (tag == 122) {
         parse_viefor_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_viefor_idcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_borrowman_name;
        break;
      }

      // optional bytes borrowman_name = 16;
      case 16: {
        if (tag == 130) {
         parse_borrowman_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrowman_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_borrowman_phone;
        break;
      }

      // optional bytes borrowman_phone = 17;
      case 17: {
        if (tag == 138) {
         parse_borrowman_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrowman_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_borrowman_idcard;
        break;
      }

      // optional bytes borrowman_idcard = 18;
      case 18: {
        if (tag == 146) {
         parse_borrowman_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrowman_idcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_diligenced_name;
        break;
      }

      // optional bytes diligenced_name = 19;
      case 19: {
        if (tag == 154) {
         parse_diligenced_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligenced_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_diligenced_idcard;
        break;
      }

      // optional bytes diligenced_idcard = 20;
      case 20: {
        if (tag == 162) {
         parse_diligenced_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligenced_idcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_diligenced_phone;
        break;
      }

      // optional bytes diligenced_phone = 21;
      case 21: {
        if (tag == 170) {
         parse_diligenced_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligenced_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_diligence_location;
        break;
      }

      // optional bytes diligence_location = 22;
      case 22: {
        if (tag == 178) {
         parse_diligence_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligence_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_diligenced_location;
        break;
      }

      // optional bytes diligenced_location = 23;
      case 23: {
        if (tag == 186) {
         parse_diligenced_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diligenced_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_gv_borrowman_name;
        break;
      }

      // optional bytes gv_borrowman_name = 24;
      case 24: {
        if (tag == 194) {
         parse_gv_borrowman_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gv_borrowman_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_gv_borrowman_phone;
        break;
      }

      // optional bytes gv_borrowman_phone = 25;
      case 25: {
        if (tag == 202) {
         parse_gv_borrowman_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gv_borrowman_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_gv_borrowman_idcard;
        break;
      }

      // optional bytes gv_borrowman_idcard = 26;
      case 26: {
        if (tag == 210) {
         parse_gv_borrowman_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gv_borrowman_idcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_overdue_badbill_amount;
        break;
      }

      // optional float overdue_badbill_amount = 27;
      case 27: {
        if (tag == 221) {
         parse_overdue_badbill_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overdue_badbill_amount_)));
          set_has_overdue_badbill_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_overdue_badbill_period;
        break;
      }

      // optional int32 overdue_badbill_period = 28;
      case 28: {
        if (tag == 224) {
         parse_overdue_badbill_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_badbill_period_)));
          set_has_overdue_badbill_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_overdue_badbill_periods;
        break;
      }

      // optional int32 overdue_badbill_periods = 29;
      case 29: {
        if (tag == 232) {
         parse_overdue_badbill_periods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_badbill_periods_)));
          set_has_overdue_badbill_periods();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_qiaoqiao_borrow_nickname;
        break;
      }

      // optional bytes qiaoqiao_borrow_nickname = 30;
      case 30: {
        if (tag == 242) {
         parse_qiaoqiao_borrow_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qiaoqiao_borrow_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_qiaoqiao_borrow_amount;
        break;
      }

      // optional float qiaoqiao_borrow_amount = 31;
      case 31: {
        if (tag == 253) {
         parse_qiaoqiao_borrow_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qiaoqiao_borrow_amount_)));
          set_has_qiaoqiao_borrow_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_qiaoqiao_borrow_usage;
        break;
      }

      // optional bytes qiaoqiao_borrow_usage = 32;
      case 32: {
        if (tag == 258) {
         parse_qiaoqiao_borrow_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qiaoqiao_borrow_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_qiaoqiao_borrow_rate;
        break;
      }

      // optional float qiaoqiao_borrow_rate = 33;
      case 33: {
        if (tag == 269) {
         parse_qiaoqiao_borrow_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qiaoqiao_borrow_rate_)));
          set_has_qiaoqiao_borrow_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_qiaoqiao_borrow_location;
        break;
      }

      // optional bytes qiaoqiao_borrow_location = 34;
      case 34: {
        if (tag == 274) {
         parse_qiaoqiao_borrow_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qiaoqiao_borrow_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_qiaoqiao_repay_amount;
        break;
      }

      // optional float qiaoqiao_repay_amount = 35;
      case 35: {
        if (tag == 285) {
         parse_qiaoqiao_repay_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qiaoqiao_repay_amount_)));
          set_has_qiaoqiao_repay_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_qiaoqiao_invest_amount;
        break;
      }

      // optional float qiaoqiao_invest_amount = 36;
      case 36: {
        if (tag == 293) {
         parse_qiaoqiao_invest_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qiaoqiao_invest_amount_)));
          set_has_qiaoqiao_invest_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_business)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_business)
  return false;
#undef DO_
}

void opt_trace_business::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_business)
  // optional int32 business_type = 1;
  if (has_business_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->business_type(), output);
  }

  // optional bytes invest_time = 2;
  if (has_invest_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->invest_time(), output);
  }

  // optional float invest_amount = 3;
  if (has_invest_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->invest_amount(), output);
  }

  // optional bytes guarantee_time = 4;
  if (has_guarantee_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->guarantee_time(), output);
  }

  // optional float guarantee_amount = 5;
  if (has_guarantee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->guarantee_amount(), output);
  }

  // optional int32 repay_period = 6;
  if (has_repay_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->repay_period(), output);
  }

  // optional int32 repay_periods = 7;
  if (has_repay_periods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->repay_periods(), output);
  }

  // optional bytes repay_time = 8;
  if (has_repay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->repay_time(), output);
  }

  // optional float repay_amount = 9;
  if (has_repay_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->repay_amount(), output);
  }

  // optional float should_repay_amount = 10;
  if (has_should_repay_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->should_repay_amount(), output);
  }

  // optional bytes viefor_avatar = 11;
  if (has_viefor_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->viefor_avatar(), output);
  }

  // optional bytes viefor_nickname = 12;
  if (has_viefor_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->viefor_nickname(), output);
  }

  // optional bytes viefor_name = 13;
  if (has_viefor_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->viefor_name(), output);
  }

  // optional bytes viefor_phone = 14;
  if (has_viefor_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->viefor_phone(), output);
  }

  // optional bytes viefor_idcard = 15;
  if (has_viefor_idcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->viefor_idcard(), output);
  }

  // optional bytes borrowman_name = 16;
  if (has_borrowman_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->borrowman_name(), output);
  }

  // optional bytes borrowman_phone = 17;
  if (has_borrowman_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->borrowman_phone(), output);
  }

  // optional bytes borrowman_idcard = 18;
  if (has_borrowman_idcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->borrowman_idcard(), output);
  }

  // optional bytes diligenced_name = 19;
  if (has_diligenced_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->diligenced_name(), output);
  }

  // optional bytes diligenced_idcard = 20;
  if (has_diligenced_idcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->diligenced_idcard(), output);
  }

  // optional bytes diligenced_phone = 21;
  if (has_diligenced_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->diligenced_phone(), output);
  }

  // optional bytes diligence_location = 22;
  if (has_diligence_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->diligence_location(), output);
  }

  // optional bytes diligenced_location = 23;
  if (has_diligenced_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->diligenced_location(), output);
  }

  // optional bytes gv_borrowman_name = 24;
  if (has_gv_borrowman_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->gv_borrowman_name(), output);
  }

  // optional bytes gv_borrowman_phone = 25;
  if (has_gv_borrowman_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->gv_borrowman_phone(), output);
  }

  // optional bytes gv_borrowman_idcard = 26;
  if (has_gv_borrowman_idcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->gv_borrowman_idcard(), output);
  }

  // optional float overdue_badbill_amount = 27;
  if (has_overdue_badbill_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->overdue_badbill_amount(), output);
  }

  // optional int32 overdue_badbill_period = 28;
  if (has_overdue_badbill_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->overdue_badbill_period(), output);
  }

  // optional int32 overdue_badbill_periods = 29;
  if (has_overdue_badbill_periods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->overdue_badbill_periods(), output);
  }

  // optional bytes qiaoqiao_borrow_nickname = 30;
  if (has_qiaoqiao_borrow_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->qiaoqiao_borrow_nickname(), output);
  }

  // optional float qiaoqiao_borrow_amount = 31;
  if (has_qiaoqiao_borrow_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->qiaoqiao_borrow_amount(), output);
  }

  // optional bytes qiaoqiao_borrow_usage = 32;
  if (has_qiaoqiao_borrow_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      32, this->qiaoqiao_borrow_usage(), output);
  }

  // optional float qiaoqiao_borrow_rate = 33;
  if (has_qiaoqiao_borrow_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->qiaoqiao_borrow_rate(), output);
  }

  // optional bytes qiaoqiao_borrow_location = 34;
  if (has_qiaoqiao_borrow_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      34, this->qiaoqiao_borrow_location(), output);
  }

  // optional float qiaoqiao_repay_amount = 35;
  if (has_qiaoqiao_repay_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->qiaoqiao_repay_amount(), output);
  }

  // optional float qiaoqiao_invest_amount = 36;
  if (has_qiaoqiao_invest_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->qiaoqiao_invest_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_business)
}

::google::protobuf::uint8* opt_trace_business::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_business)
  // optional int32 business_type = 1;
  if (has_business_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->business_type(), target);
  }

  // optional bytes invest_time = 2;
  if (has_invest_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->invest_time(), target);
  }

  // optional float invest_amount = 3;
  if (has_invest_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->invest_amount(), target);
  }

  // optional bytes guarantee_time = 4;
  if (has_guarantee_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->guarantee_time(), target);
  }

  // optional float guarantee_amount = 5;
  if (has_guarantee_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->guarantee_amount(), target);
  }

  // optional int32 repay_period = 6;
  if (has_repay_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->repay_period(), target);
  }

  // optional int32 repay_periods = 7;
  if (has_repay_periods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->repay_periods(), target);
  }

  // optional bytes repay_time = 8;
  if (has_repay_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->repay_time(), target);
  }

  // optional float repay_amount = 9;
  if (has_repay_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->repay_amount(), target);
  }

  // optional float should_repay_amount = 10;
  if (has_should_repay_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->should_repay_amount(), target);
  }

  // optional bytes viefor_avatar = 11;
  if (has_viefor_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->viefor_avatar(), target);
  }

  // optional bytes viefor_nickname = 12;
  if (has_viefor_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->viefor_nickname(), target);
  }

  // optional bytes viefor_name = 13;
  if (has_viefor_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->viefor_name(), target);
  }

  // optional bytes viefor_phone = 14;
  if (has_viefor_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->viefor_phone(), target);
  }

  // optional bytes viefor_idcard = 15;
  if (has_viefor_idcard()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->viefor_idcard(), target);
  }

  // optional bytes borrowman_name = 16;
  if (has_borrowman_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->borrowman_name(), target);
  }

  // optional bytes borrowman_phone = 17;
  if (has_borrowman_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->borrowman_phone(), target);
  }

  // optional bytes borrowman_idcard = 18;
  if (has_borrowman_idcard()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->borrowman_idcard(), target);
  }

  // optional bytes diligenced_name = 19;
  if (has_diligenced_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->diligenced_name(), target);
  }

  // optional bytes diligenced_idcard = 20;
  if (has_diligenced_idcard()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->diligenced_idcard(), target);
  }

  // optional bytes diligenced_phone = 21;
  if (has_diligenced_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->diligenced_phone(), target);
  }

  // optional bytes diligence_location = 22;
  if (has_diligence_location()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->diligence_location(), target);
  }

  // optional bytes diligenced_location = 23;
  if (has_diligenced_location()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->diligenced_location(), target);
  }

  // optional bytes gv_borrowman_name = 24;
  if (has_gv_borrowman_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->gv_borrowman_name(), target);
  }

  // optional bytes gv_borrowman_phone = 25;
  if (has_gv_borrowman_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->gv_borrowman_phone(), target);
  }

  // optional bytes gv_borrowman_idcard = 26;
  if (has_gv_borrowman_idcard()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->gv_borrowman_idcard(), target);
  }

  // optional float overdue_badbill_amount = 27;
  if (has_overdue_badbill_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->overdue_badbill_amount(), target);
  }

  // optional int32 overdue_badbill_period = 28;
  if (has_overdue_badbill_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->overdue_badbill_period(), target);
  }

  // optional int32 overdue_badbill_periods = 29;
  if (has_overdue_badbill_periods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->overdue_badbill_periods(), target);
  }

  // optional bytes qiaoqiao_borrow_nickname = 30;
  if (has_qiaoqiao_borrow_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->qiaoqiao_borrow_nickname(), target);
  }

  // optional float qiaoqiao_borrow_amount = 31;
  if (has_qiaoqiao_borrow_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->qiaoqiao_borrow_amount(), target);
  }

  // optional bytes qiaoqiao_borrow_usage = 32;
  if (has_qiaoqiao_borrow_usage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        32, this->qiaoqiao_borrow_usage(), target);
  }

  // optional float qiaoqiao_borrow_rate = 33;
  if (has_qiaoqiao_borrow_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->qiaoqiao_borrow_rate(), target);
  }

  // optional bytes qiaoqiao_borrow_location = 34;
  if (has_qiaoqiao_borrow_location()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        34, this->qiaoqiao_borrow_location(), target);
  }

  // optional float qiaoqiao_repay_amount = 35;
  if (has_qiaoqiao_repay_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->qiaoqiao_repay_amount(), target);
  }

  // optional float qiaoqiao_invest_amount = 36;
  if (has_qiaoqiao_invest_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->qiaoqiao_invest_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_business)
  return target;
}

int opt_trace_business::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 business_type = 1;
    if (has_business_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->business_type());
    }

    // optional bytes invest_time = 2;
    if (has_invest_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invest_time());
    }

    // optional float invest_amount = 3;
    if (has_invest_amount()) {
      total_size += 1 + 4;
    }

    // optional bytes guarantee_time = 4;
    if (has_guarantee_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guarantee_time());
    }

    // optional float guarantee_amount = 5;
    if (has_guarantee_amount()) {
      total_size += 1 + 4;
    }

    // optional int32 repay_period = 6;
    if (has_repay_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repay_period());
    }

    // optional int32 repay_periods = 7;
    if (has_repay_periods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repay_periods());
    }

    // optional bytes repay_time = 8;
    if (has_repay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->repay_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float repay_amount = 9;
    if (has_repay_amount()) {
      total_size += 1 + 4;
    }

    // optional float should_repay_amount = 10;
    if (has_should_repay_amount()) {
      total_size += 1 + 4;
    }

    // optional bytes viefor_avatar = 11;
    if (has_viefor_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->viefor_avatar());
    }

    // optional bytes viefor_nickname = 12;
    if (has_viefor_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->viefor_nickname());
    }

    // optional bytes viefor_name = 13;
    if (has_viefor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->viefor_name());
    }

    // optional bytes viefor_phone = 14;
    if (has_viefor_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->viefor_phone());
    }

    // optional bytes viefor_idcard = 15;
    if (has_viefor_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->viefor_idcard());
    }

    // optional bytes borrowman_name = 16;
    if (has_borrowman_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrowman_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes borrowman_phone = 17;
    if (has_borrowman_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrowman_phone());
    }

    // optional bytes borrowman_idcard = 18;
    if (has_borrowman_idcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrowman_idcard());
    }

    // optional bytes diligenced_name = 19;
    if (has_diligenced_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligenced_name());
    }

    // optional bytes diligenced_idcard = 20;
    if (has_diligenced_idcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligenced_idcard());
    }

    // optional bytes diligenced_phone = 21;
    if (has_diligenced_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligenced_phone());
    }

    // optional bytes diligence_location = 22;
    if (has_diligence_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligence_location());
    }

    // optional bytes diligenced_location = 23;
    if (has_diligenced_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diligenced_location());
    }

    // optional bytes gv_borrowman_name = 24;
    if (has_gv_borrowman_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gv_borrowman_name());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes gv_borrowman_phone = 25;
    if (has_gv_borrowman_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gv_borrowman_phone());
    }

    // optional bytes gv_borrowman_idcard = 26;
    if (has_gv_borrowman_idcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gv_borrowman_idcard());
    }

    // optional float overdue_badbill_amount = 27;
    if (has_overdue_badbill_amount()) {
      total_size += 2 + 4;
    }

    // optional int32 overdue_badbill_period = 28;
    if (has_overdue_badbill_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_badbill_period());
    }

    // optional int32 overdue_badbill_periods = 29;
    if (has_overdue_badbill_periods()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_badbill_periods());
    }

    // optional bytes qiaoqiao_borrow_nickname = 30;
    if (has_qiaoqiao_borrow_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qiaoqiao_borrow_nickname());
    }

    // optional float qiaoqiao_borrow_amount = 31;
    if (has_qiaoqiao_borrow_amount()) {
      total_size += 2 + 4;
    }

    // optional bytes qiaoqiao_borrow_usage = 32;
    if (has_qiaoqiao_borrow_usage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qiaoqiao_borrow_usage());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float qiaoqiao_borrow_rate = 33;
    if (has_qiaoqiao_borrow_rate()) {
      total_size += 2 + 4;
    }

    // optional bytes qiaoqiao_borrow_location = 34;
    if (has_qiaoqiao_borrow_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qiaoqiao_borrow_location());
    }

    // optional float qiaoqiao_repay_amount = 35;
    if (has_qiaoqiao_repay_amount()) {
      total_size += 2 + 4;
    }

    // optional float qiaoqiao_invest_amount = 36;
    if (has_qiaoqiao_invest_amount()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_business::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_business* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_business*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_business::MergeFrom(const opt_trace_business& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_business_type()) {
      set_business_type(from.business_type());
    }
    if (from.has_invest_time()) {
      set_invest_time(from.invest_time());
    }
    if (from.has_invest_amount()) {
      set_invest_amount(from.invest_amount());
    }
    if (from.has_guarantee_time()) {
      set_guarantee_time(from.guarantee_time());
    }
    if (from.has_guarantee_amount()) {
      set_guarantee_amount(from.guarantee_amount());
    }
    if (from.has_repay_period()) {
      set_repay_period(from.repay_period());
    }
    if (from.has_repay_periods()) {
      set_repay_periods(from.repay_periods());
    }
    if (from.has_repay_time()) {
      set_repay_time(from.repay_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_repay_amount()) {
      set_repay_amount(from.repay_amount());
    }
    if (from.has_should_repay_amount()) {
      set_should_repay_amount(from.should_repay_amount());
    }
    if (from.has_viefor_avatar()) {
      set_viefor_avatar(from.viefor_avatar());
    }
    if (from.has_viefor_nickname()) {
      set_viefor_nickname(from.viefor_nickname());
    }
    if (from.has_viefor_name()) {
      set_viefor_name(from.viefor_name());
    }
    if (from.has_viefor_phone()) {
      set_viefor_phone(from.viefor_phone());
    }
    if (from.has_viefor_idcard()) {
      set_viefor_idcard(from.viefor_idcard());
    }
    if (from.has_borrowman_name()) {
      set_borrowman_name(from.borrowman_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_borrowman_phone()) {
      set_borrowman_phone(from.borrowman_phone());
    }
    if (from.has_borrowman_idcard()) {
      set_borrowman_idcard(from.borrowman_idcard());
    }
    if (from.has_diligenced_name()) {
      set_diligenced_name(from.diligenced_name());
    }
    if (from.has_diligenced_idcard()) {
      set_diligenced_idcard(from.diligenced_idcard());
    }
    if (from.has_diligenced_phone()) {
      set_diligenced_phone(from.diligenced_phone());
    }
    if (from.has_diligence_location()) {
      set_diligence_location(from.diligence_location());
    }
    if (from.has_diligenced_location()) {
      set_diligenced_location(from.diligenced_location());
    }
    if (from.has_gv_borrowman_name()) {
      set_gv_borrowman_name(from.gv_borrowman_name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gv_borrowman_phone()) {
      set_gv_borrowman_phone(from.gv_borrowman_phone());
    }
    if (from.has_gv_borrowman_idcard()) {
      set_gv_borrowman_idcard(from.gv_borrowman_idcard());
    }
    if (from.has_overdue_badbill_amount()) {
      set_overdue_badbill_amount(from.overdue_badbill_amount());
    }
    if (from.has_overdue_badbill_period()) {
      set_overdue_badbill_period(from.overdue_badbill_period());
    }
    if (from.has_overdue_badbill_periods()) {
      set_overdue_badbill_periods(from.overdue_badbill_periods());
    }
    if (from.has_qiaoqiao_borrow_nickname()) {
      set_qiaoqiao_borrow_nickname(from.qiaoqiao_borrow_nickname());
    }
    if (from.has_qiaoqiao_borrow_amount()) {
      set_qiaoqiao_borrow_amount(from.qiaoqiao_borrow_amount());
    }
    if (from.has_qiaoqiao_borrow_usage()) {
      set_qiaoqiao_borrow_usage(from.qiaoqiao_borrow_usage());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_qiaoqiao_borrow_rate()) {
      set_qiaoqiao_borrow_rate(from.qiaoqiao_borrow_rate());
    }
    if (from.has_qiaoqiao_borrow_location()) {
      set_qiaoqiao_borrow_location(from.qiaoqiao_borrow_location());
    }
    if (from.has_qiaoqiao_repay_amount()) {
      set_qiaoqiao_repay_amount(from.qiaoqiao_repay_amount());
    }
    if (from.has_qiaoqiao_invest_amount()) {
      set_qiaoqiao_invest_amount(from.qiaoqiao_invest_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_business::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_business::CopyFrom(const opt_trace_business& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_business::IsInitialized() const {

  return true;
}

void opt_trace_business::Swap(opt_trace_business* other) {
  if (other != this) {
    std::swap(business_type_, other->business_type_);
    std::swap(invest_time_, other->invest_time_);
    std::swap(invest_amount_, other->invest_amount_);
    std::swap(guarantee_time_, other->guarantee_time_);
    std::swap(guarantee_amount_, other->guarantee_amount_);
    std::swap(repay_period_, other->repay_period_);
    std::swap(repay_periods_, other->repay_periods_);
    std::swap(repay_time_, other->repay_time_);
    std::swap(repay_amount_, other->repay_amount_);
    std::swap(should_repay_amount_, other->should_repay_amount_);
    std::swap(viefor_avatar_, other->viefor_avatar_);
    std::swap(viefor_nickname_, other->viefor_nickname_);
    std::swap(viefor_name_, other->viefor_name_);
    std::swap(viefor_phone_, other->viefor_phone_);
    std::swap(viefor_idcard_, other->viefor_idcard_);
    std::swap(borrowman_name_, other->borrowman_name_);
    std::swap(borrowman_phone_, other->borrowman_phone_);
    std::swap(borrowman_idcard_, other->borrowman_idcard_);
    std::swap(diligenced_name_, other->diligenced_name_);
    std::swap(diligenced_idcard_, other->diligenced_idcard_);
    std::swap(diligenced_phone_, other->diligenced_phone_);
    std::swap(diligence_location_, other->diligence_location_);
    std::swap(diligenced_location_, other->diligenced_location_);
    std::swap(gv_borrowman_name_, other->gv_borrowman_name_);
    std::swap(gv_borrowman_phone_, other->gv_borrowman_phone_);
    std::swap(gv_borrowman_idcard_, other->gv_borrowman_idcard_);
    std::swap(overdue_badbill_amount_, other->overdue_badbill_amount_);
    std::swap(overdue_badbill_period_, other->overdue_badbill_period_);
    std::swap(overdue_badbill_periods_, other->overdue_badbill_periods_);
    std::swap(qiaoqiao_borrow_nickname_, other->qiaoqiao_borrow_nickname_);
    std::swap(qiaoqiao_borrow_amount_, other->qiaoqiao_borrow_amount_);
    std::swap(qiaoqiao_borrow_usage_, other->qiaoqiao_borrow_usage_);
    std::swap(qiaoqiao_borrow_rate_, other->qiaoqiao_borrow_rate_);
    std::swap(qiaoqiao_borrow_location_, other->qiaoqiao_borrow_location_);
    std::swap(qiaoqiao_repay_amount_, other->qiaoqiao_repay_amount_);
    std::swap(qiaoqiao_invest_amount_, other->qiaoqiao_invest_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_business::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_business_descriptor_;
  metadata.reflection = opt_trace_business_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_page::kPageNameFieldNumber;
const int opt_trace_page::kPageKeeptimeFieldNumber;
#endif  // !_MSC_VER

opt_trace_page::opt_trace_page()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_page)
}

void opt_trace_page::InitAsDefaultInstance() {
}

opt_trace_page::opt_trace_page(const opt_trace_page& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_page)
}

void opt_trace_page::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_keeptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_page::~opt_trace_page() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_page)
  SharedDtor();
}

void opt_trace_page::SharedDtor() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (this != default_instance_) {
  }
}

void opt_trace_page::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_page::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_page_descriptor_;
}

const opt_trace_page& opt_trace_page::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_page* opt_trace_page::default_instance_ = NULL;

opt_trace_page* opt_trace_page::New() const {
  return new opt_trace_page;
}

void opt_trace_page::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_page_name()) {
      if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_name_->clear();
      }
    }
    page_keeptime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_page)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes page_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_keeptime;
        break;
      }

      // optional int32 page_keeptime = 2;
      case 2: {
        if (tag == 16) {
         parse_page_keeptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_keeptime_)));
          set_has_page_keeptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_page)
  return false;
#undef DO_
}

void opt_trace_page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_page)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_name(), output);
  }

  // optional int32 page_keeptime = 2;
  if (has_page_keeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_keeptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_page)
}

::google::protobuf::uint8* opt_trace_page::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_page)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_name(), target);
  }

  // optional int32 page_keeptime = 2;
  if (has_page_keeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_keeptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_page)
  return target;
}

int opt_trace_page::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes page_name = 1;
    if (has_page_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_name());
    }

    // optional int32 page_keeptime = 2;
    if (has_page_keeptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_keeptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_page::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_page* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_page*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_page::MergeFrom(const opt_trace_page& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_name()) {
      set_page_name(from.page_name());
    }
    if (from.has_page_keeptime()) {
      set_page_keeptime(from.page_keeptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_page::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_page::CopyFrom(const opt_trace_page& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_page::IsInitialized() const {

  return true;
}

void opt_trace_page::Swap(opt_trace_page* other) {
  if (other != this) {
    std::swap(page_name_, other->page_name_);
    std::swap(page_keeptime_, other->page_keeptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_page::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_page_descriptor_;
  metadata.reflection = opt_trace_page_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_fund_running_water::kFrwTitleFieldNumber;
const int opt_trace_fund_running_water::kFrwTypeFieldNumber;
const int opt_trace_fund_running_water::kFrwAmountFieldNumber;
const int opt_trace_fund_running_water::kFrwStatusFieldNumber;
const int opt_trace_fund_running_water::kFrwDescFieldNumber;
const int opt_trace_fund_running_water::kFrwUpdatetimeFieldNumber;
#endif  // !_MSC_VER

opt_trace_fund_running_water::opt_trace_fund_running_water()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_fund_running_water)
}

void opt_trace_fund_running_water::InitAsDefaultInstance() {
}

opt_trace_fund_running_water::opt_trace_fund_running_water(const opt_trace_fund_running_water& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_fund_running_water)
}

void opt_trace_fund_running_water::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frw_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frw_type_ = 0;
  frw_amount_ = 0;
  frw_status_ = 0;
  frw_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frw_updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_fund_running_water::~opt_trace_fund_running_water() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_fund_running_water)
  SharedDtor();
}

void opt_trace_fund_running_water::SharedDtor() {
  if (frw_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frw_title_;
  }
  if (frw_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frw_desc_;
  }
  if (frw_updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frw_updatetime_;
  }
  if (this != default_instance_) {
  }
}

void opt_trace_fund_running_water::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_fund_running_water::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_fund_running_water_descriptor_;
}

const opt_trace_fund_running_water& opt_trace_fund_running_water::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_fund_running_water* opt_trace_fund_running_water::default_instance_ = NULL;

opt_trace_fund_running_water* opt_trace_fund_running_water::New() const {
  return new opt_trace_fund_running_water;
}

void opt_trace_fund_running_water::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<opt_trace_fund_running_water*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(frw_type_, frw_amount_);
    if (has_frw_title()) {
      if (frw_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frw_title_->clear();
      }
    }
    frw_status_ = 0;
    if (has_frw_desc()) {
      if (frw_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frw_desc_->clear();
      }
    }
    if (has_frw_updatetime()) {
      if (frw_updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frw_updatetime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_fund_running_water::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_fund_running_water)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes frw_title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frw_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frw_type;
        break;
      }

      // optional int32 frw_type = 2;
      case 2: {
        if (tag == 16) {
         parse_frw_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frw_type_)));
          set_has_frw_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_frw_amount;
        break;
      }

      // optional float frw_amount = 3;
      case 3: {
        if (tag == 29) {
         parse_frw_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frw_amount_)));
          set_has_frw_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frw_status;
        break;
      }

      // optional int32 frw_status = 4;
      case 4: {
        if (tag == 32) {
         parse_frw_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frw_status_)));
          set_has_frw_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frw_desc;
        break;
      }

      // optional bytes frw_desc = 5;
      case 5: {
        if (tag == 42) {
         parse_frw_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frw_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frw_updatetime;
        break;
      }

      // optional bytes frw_updatetime = 6;
      case 6: {
        if (tag == 50) {
         parse_frw_updatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frw_updatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_fund_running_water)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_fund_running_water)
  return false;
#undef DO_
}

void opt_trace_fund_running_water::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_fund_running_water)
  // optional bytes frw_title = 1;
  if (has_frw_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->frw_title(), output);
  }

  // optional int32 frw_type = 2;
  if (has_frw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frw_type(), output);
  }

  // optional float frw_amount = 3;
  if (has_frw_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frw_amount(), output);
  }

  // optional int32 frw_status = 4;
  if (has_frw_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frw_status(), output);
  }

  // optional bytes frw_desc = 5;
  if (has_frw_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->frw_desc(), output);
  }

  // optional bytes frw_updatetime = 6;
  if (has_frw_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->frw_updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_fund_running_water)
}

::google::protobuf::uint8* opt_trace_fund_running_water::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_fund_running_water)
  // optional bytes frw_title = 1;
  if (has_frw_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->frw_title(), target);
  }

  // optional int32 frw_type = 2;
  if (has_frw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frw_type(), target);
  }

  // optional float frw_amount = 3;
  if (has_frw_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frw_amount(), target);
  }

  // optional int32 frw_status = 4;
  if (has_frw_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frw_status(), target);
  }

  // optional bytes frw_desc = 5;
  if (has_frw_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->frw_desc(), target);
  }

  // optional bytes frw_updatetime = 6;
  if (has_frw_updatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->frw_updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_fund_running_water)
  return target;
}

int opt_trace_fund_running_water::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes frw_title = 1;
    if (has_frw_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frw_title());
    }

    // optional int32 frw_type = 2;
    if (has_frw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frw_type());
    }

    // optional float frw_amount = 3;
    if (has_frw_amount()) {
      total_size += 1 + 4;
    }

    // optional int32 frw_status = 4;
    if (has_frw_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frw_status());
    }

    // optional bytes frw_desc = 5;
    if (has_frw_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frw_desc());
    }

    // optional bytes frw_updatetime = 6;
    if (has_frw_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frw_updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_fund_running_water::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_fund_running_water* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_fund_running_water*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_fund_running_water::MergeFrom(const opt_trace_fund_running_water& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frw_title()) {
      set_frw_title(from.frw_title());
    }
    if (from.has_frw_type()) {
      set_frw_type(from.frw_type());
    }
    if (from.has_frw_amount()) {
      set_frw_amount(from.frw_amount());
    }
    if (from.has_frw_status()) {
      set_frw_status(from.frw_status());
    }
    if (from.has_frw_desc()) {
      set_frw_desc(from.frw_desc());
    }
    if (from.has_frw_updatetime()) {
      set_frw_updatetime(from.frw_updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_fund_running_water::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_fund_running_water::CopyFrom(const opt_trace_fund_running_water& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_fund_running_water::IsInitialized() const {

  return true;
}

void opt_trace_fund_running_water::Swap(opt_trace_fund_running_water* other) {
  if (other != this) {
    std::swap(frw_title_, other->frw_title_);
    std::swap(frw_type_, other->frw_type_);
    std::swap(frw_amount_, other->frw_amount_);
    std::swap(frw_status_, other->frw_status_);
    std::swap(frw_desc_, other->frw_desc_);
    std::swap(frw_updatetime_, other->frw_updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_fund_running_water::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_fund_running_water_descriptor_;
  metadata.reflection = opt_trace_fund_running_water_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_trace_material::kTypeFieldNumber;
const int opt_trace_material::kUserTypeIdFieldNumber;
const int opt_trace_material::kMaritalStatusFieldNumber;
const int opt_trace_material::kHavingChildrenFieldNumber;
const int opt_trace_material::kLivingTypeFieldNumber;
const int opt_trace_material::kLivingProvinceFieldNumber;
const int opt_trace_material::kLivingCityFieldNumber;
const int opt_trace_material::kLivingAreaFieldNumber;
const int opt_trace_material::kLivingAddressFieldNumber;
const int opt_trace_material::kWorkCompanyFieldNumber;
const int opt_trace_material::kYearIncomeScopeFieldNumber;
const int opt_trace_material::kFamilyProvinceFieldNumber;
const int opt_trace_material::kFamilyCityFieldNumber;
const int opt_trace_material::kFamilyAreaFieldNumber;
const int opt_trace_material::kFamilyAddressFieldNumber;
const int opt_trace_material::kFamilyNameFieldNumber;
const int opt_trace_material::kFamilyContactNoFieldNumber;
const int opt_trace_material::kFamilyRelationFieldNumber;
const int opt_trace_material::kStudentSchoolFieldNumber;
const int opt_trace_material::kAttendingCollegeFieldNumber;
const int opt_trace_material::kStudentProfessionalFieldNumber;
const int opt_trace_material::kAttendingClassFieldNumber;
const int opt_trace_material::kEmailFieldNumber;
const int opt_trace_material::kCompanyProvinceFieldNumber;
const int opt_trace_material::kCompanyCityFieldNumber;
const int opt_trace_material::kCompanyAreaFieldNumber;
const int opt_trace_material::kCompanyAddressFieldNumber;
const int opt_trace_material::kCompanyPhoneFieldNumber;
const int opt_trace_material::kDepartmentFieldNumber;
const int opt_trace_material::kPositionFieldNumber;
const int opt_trace_material::kWorkYearFieldNumber;
const int opt_trace_material::kContactPersonFieldNumber;
const int opt_trace_material::kEstateListFieldNumber;
#endif  // !_MSC_VER

opt_trace_material::opt_trace_material()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.opt_trace_material)
}

void opt_trace_material::InitAsDefaultInstance() {
  estate_list_ = const_cast< ::UBAS_PageView::estate*>(&::UBAS_PageView::estate::default_instance());
}

opt_trace_material::opt_trace_material(const opt_trace_material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.opt_trace_material)
}

void opt_trace_material::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  usertypeid_ = 0;
  maritalstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  havingchildren_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livingprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livingcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livingarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livingaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workcompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yearincomescope_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familycity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familycontactno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  familyrelation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  studentschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attendingcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  studentprofessional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attendingclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companyprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companycity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companyarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  companyphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  estate_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_trace_material::~opt_trace_material() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.opt_trace_material)
  SharedDtor();
}

void opt_trace_material::SharedDtor() {
  if (maritalstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maritalstatus_;
  }
  if (havingchildren_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete havingchildren_;
  }
  if (livingtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingtype_;
  }
  if (livingprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingprovince_;
  }
  if (livingcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingcity_;
  }
  if (livingarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingarea_;
  }
  if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingaddress_;
  }
  if (workcompany_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workcompany_;
  }
  if (yearincomescope_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete yearincomescope_;
  }
  if (familyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyprovince_;
  }
  if (familycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familycity_;
  }
  if (familyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyarea_;
  }
  if (familyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyaddress_;
  }
  if (familyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyname_;
  }
  if (familycontactno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familycontactno_;
  }
  if (familyrelation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyrelation_;
  }
  if (studentschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete studentschool_;
  }
  if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingcollege_;
  }
  if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete studentprofessional_;
  }
  if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingclass_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (companyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyprovince_;
  }
  if (companycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companycity_;
  }
  if (companyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyarea_;
  }
  if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyaddress_;
  }
  if (companyphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyphone_;
  }
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (workyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workyear_;
  }
  if (this != default_instance_) {
    delete estate_list_;
  }
}

void opt_trace_material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_trace_material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_trace_material_descriptor_;
}

const opt_trace_material& opt_trace_material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

opt_trace_material* opt_trace_material::default_instance_ = NULL;

opt_trace_material* opt_trace_material::New() const {
  return new opt_trace_material;
}

void opt_trace_material::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<opt_trace_material*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, usertypeid_);
    if (has_maritalstatus()) {
      if (maritalstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        maritalstatus_->clear();
      }
    }
    if (has_havingchildren()) {
      if (havingchildren_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        havingchildren_->clear();
      }
    }
    if (has_livingtype()) {
      if (livingtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livingtype_->clear();
      }
    }
    if (has_livingprovince()) {
      if (livingprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livingprovince_->clear();
      }
    }
    if (has_livingcity()) {
      if (livingcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livingcity_->clear();
      }
    }
    if (has_livingarea()) {
      if (livingarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livingarea_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_livingaddress()) {
      if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        livingaddress_->clear();
      }
    }
    if (has_workcompany()) {
      if (workcompany_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        workcompany_->clear();
      }
    }
    if (has_yearincomescope()) {
      if (yearincomescope_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        yearincomescope_->clear();
      }
    }
    if (has_familyprovince()) {
      if (familyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familyprovince_->clear();
      }
    }
    if (has_familycity()) {
      if (familycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familycity_->clear();
      }
    }
    if (has_familyarea()) {
      if (familyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familyarea_->clear();
      }
    }
    if (has_familyaddress()) {
      if (familyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familyaddress_->clear();
      }
    }
    if (has_familyname()) {
      if (familyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familyname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_familycontactno()) {
      if (familycontactno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familycontactno_->clear();
      }
    }
    if (has_familyrelation()) {
      if (familyrelation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        familyrelation_->clear();
      }
    }
    if (has_studentschool()) {
      if (studentschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        studentschool_->clear();
      }
    }
    if (has_attendingcollege()) {
      if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attendingcollege_->clear();
      }
    }
    if (has_studentprofessional()) {
      if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        studentprofessional_->clear();
      }
    }
    if (has_attendingclass()) {
      if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attendingclass_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_companyprovince()) {
      if (companyprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyprovince_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    if (has_companycity()) {
      if (companycity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companycity_->clear();
      }
    }
    if (has_companyarea()) {
      if (companyarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyarea_->clear();
      }
    }
    if (has_companyaddress()) {
      if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyaddress_->clear();
      }
    }
    if (has_companyphone()) {
      if (companyphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        companyphone_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        department_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_workyear()) {
      if (workyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        workyear_->clear();
      }
    }
  }
  if (has_estate_list()) {
    if (estate_list_ != NULL) estate_list_->::UBAS_PageView::estate::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  contactperson_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_trace_material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.opt_trace_material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserTypeId;
        break;
      }

      // optional int32 UserTypeId = 2;
      case 2: {
        if (tag == 16) {
         parse_UserTypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertypeid_)));
          set_has_usertypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MaritalStatus;
        break;
      }

      // optional bytes MaritalStatus = 3;
      case 3: {
        if (tag == 26) {
         parse_MaritalStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_maritalstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HavingChildren;
        break;
      }

      // optional bytes HavingChildren = 4;
      case 4: {
        if (tag == 34) {
         parse_HavingChildren:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_havingchildren()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_LivingType;
        break;
      }

      // optional bytes LivingType = 5;
      case 5: {
        if (tag == 42) {
         parse_LivingType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_livingtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_LivingProvince;
        break;
      }

      // optional bytes LivingProvince = 6;
      case 6: {
        if (tag == 50) {
         parse_LivingProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_livingprovince()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_LivingCity;
        break;
      }

      // optional bytes LivingCity = 7;
      case 7: {
        if (tag == 58) {
         parse_LivingCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_livingcity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LivingArea;
        break;
      }

      // optional bytes LivingArea = 8;
      case 8: {
        if (tag == 66) {
         parse_LivingArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_livingarea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_LivingAddress;
        break;
      }

      // optional bytes LivingAddress = 9;
      case 9: {
        if (tag == 74) {
         parse_LivingAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_livingaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_WorkCompany;
        break;
      }

      // optional bytes WorkCompany = 10;
      case 10: {
        if (tag == 82) {
         parse_WorkCompany:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_workcompany()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_YearIncomeScope;
        break;
      }

      // optional bytes YearIncomeScope = 11;
      case 11: {
        if (tag == 90) {
         parse_YearIncomeScope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_yearincomescope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_FamilyProvince;
        break;
      }

      // optional bytes FamilyProvince = 12;
      case 12: {
        if (tag == 98) {
         parse_FamilyProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familyprovince()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_FamilyCity;
        break;
      }

      // optional bytes FamilyCity = 13;
      case 13: {
        if (tag == 106) {
         parse_FamilyCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familycity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_FamilyArea;
        break;
      }

      // optional bytes FamilyArea = 14;
      case 14: {
        if (tag == 114) {
         parse_FamilyArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familyarea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_FamilyAddress;
        break;
      }

      // optional bytes FamilyAddress = 15;
      case 15: {
        if (tag == 122) {
         parse_FamilyAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familyaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_FamilyName;
        break;
      }

      // optional bytes FamilyName = 16;
      case 16: {
        if (tag == 130) {
         parse_FamilyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familyname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_FamilyContactNo;
        break;
      }

      // optional bytes FamilyContactNo = 17;
      case 17: {
        if (tag == 138) {
         parse_FamilyContactNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familycontactno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_FamilyRelation;
        break;
      }

      // optional bytes FamilyRelation = 18;
      case 18: {
        if (tag == 146) {
         parse_FamilyRelation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_familyrelation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_StudentSchool;
        break;
      }

      // optional bytes StudentSchool = 19;
      case 19: {
        if (tag == 154) {
         parse_StudentSchool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_studentschool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_AttendingCollege;
        break;
      }

      // optional bytes AttendingCollege = 20;
      case 20: {
        if (tag == 162) {
         parse_AttendingCollege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attendingcollege()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_StudentProfessional;
        break;
      }

      // optional bytes StudentProfessional = 21;
      case 21: {
        if (tag == 170) {
         parse_StudentProfessional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_studentprofessional()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_AttendingClass;
        break;
      }

      // optional bytes AttendingClass = 22;
      case 22: {
        if (tag == 178) {
         parse_AttendingClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attendingclass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_Email;
        break;
      }

      // optional bytes Email = 23;
      case 23: {
        if (tag == 186) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_CompanyProvince;
        break;
      }

      // optional bytes CompanyProvince = 24;
      case 24: {
        if (tag == 194) {
         parse_CompanyProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyprovince()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_CompanyCity;
        break;
      }

      // optional bytes CompanyCity = 25;
      case 25: {
        if (tag == 202) {
         parse_CompanyCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companycity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_CompanyArea;
        break;
      }

      // optional bytes CompanyArea = 26;
      case 26: {
        if (tag == 210) {
         parse_CompanyArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyarea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_CompanyAddress;
        break;
      }

      // optional bytes CompanyAddress = 27;
      case 27: {
        if (tag == 218) {
         parse_CompanyAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_CompanyPhone;
        break;
      }

      // optional bytes CompanyPhone = 28;
      case 28: {
        if (tag == 226) {
         parse_CompanyPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_companyphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_Department;
        break;
      }

      // optional bytes Department = 29;
      case 29: {
        if (tag == 234) {
         parse_Department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_Position;
        break;
      }

      // optional bytes Position = 30;
      case 30: {
        if (tag == 242) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_WorkYear;
        break;
      }

      // optional bytes WorkYear = 31;
      case 31: {
        if (tag == 250) {
         parse_WorkYear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_workyear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_ContactPerson;
        break;
      }

      // repeated .UBAS_PageView.contact_person ContactPerson = 32;
      case 32: {
        if (tag == 258) {
         parse_ContactPerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactperson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_ContactPerson;
        if (input->ExpectTag(266)) goto parse_estate_list;
        break;
      }

      // optional .UBAS_PageView.estate estate_list = 33;
      case 33: {
        if (tag == 266) {
         parse_estate_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estate_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.opt_trace_material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.opt_trace_material)
  return false;
#undef DO_
}

void opt_trace_material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.opt_trace_material)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 UserTypeId = 2;
  if (has_usertypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usertypeid(), output);
  }

  // optional bytes MaritalStatus = 3;
  if (has_maritalstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->maritalstatus(), output);
  }

  // optional bytes HavingChildren = 4;
  if (has_havingchildren()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->havingchildren(), output);
  }

  // optional bytes LivingType = 5;
  if (has_livingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->livingtype(), output);
  }

  // optional bytes LivingProvince = 6;
  if (has_livingprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->livingprovince(), output);
  }

  // optional bytes LivingCity = 7;
  if (has_livingcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->livingcity(), output);
  }

  // optional bytes LivingArea = 8;
  if (has_livingarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->livingarea(), output);
  }

  // optional bytes LivingAddress = 9;
  if (has_livingaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->livingaddress(), output);
  }

  // optional bytes WorkCompany = 10;
  if (has_workcompany()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->workcompany(), output);
  }

  // optional bytes YearIncomeScope = 11;
  if (has_yearincomescope()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->yearincomescope(), output);
  }

  // optional bytes FamilyProvince = 12;
  if (has_familyprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->familyprovince(), output);
  }

  // optional bytes FamilyCity = 13;
  if (has_familycity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->familycity(), output);
  }

  // optional bytes FamilyArea = 14;
  if (has_familyarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->familyarea(), output);
  }

  // optional bytes FamilyAddress = 15;
  if (has_familyaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->familyaddress(), output);
  }

  // optional bytes FamilyName = 16;
  if (has_familyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->familyname(), output);
  }

  // optional bytes FamilyContactNo = 17;
  if (has_familycontactno()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->familycontactno(), output);
  }

  // optional bytes FamilyRelation = 18;
  if (has_familyrelation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->familyrelation(), output);
  }

  // optional bytes StudentSchool = 19;
  if (has_studentschool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->studentschool(), output);
  }

  // optional bytes AttendingCollege = 20;
  if (has_attendingcollege()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attendingcollege(), output);
  }

  // optional bytes StudentProfessional = 21;
  if (has_studentprofessional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->studentprofessional(), output);
  }

  // optional bytes AttendingClass = 22;
  if (has_attendingclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->attendingclass(), output);
  }

  // optional bytes Email = 23;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->email(), output);
  }

  // optional bytes CompanyProvince = 24;
  if (has_companyprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->companyprovince(), output);
  }

  // optional bytes CompanyCity = 25;
  if (has_companycity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->companycity(), output);
  }

  // optional bytes CompanyArea = 26;
  if (has_companyarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->companyarea(), output);
  }

  // optional bytes CompanyAddress = 27;
  if (has_companyaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->companyaddress(), output);
  }

  // optional bytes CompanyPhone = 28;
  if (has_companyphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->companyphone(), output);
  }

  // optional bytes Department = 29;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      29, this->department(), output);
  }

  // optional bytes Position = 30;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->position(), output);
  }

  // optional bytes WorkYear = 31;
  if (has_workyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      31, this->workyear(), output);
  }

  // repeated .UBAS_PageView.contact_person ContactPerson = 32;
  for (int i = 0; i < this->contactperson_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->contactperson(i), output);
  }

  // optional .UBAS_PageView.estate estate_list = 33;
  if (has_estate_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->estate_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.opt_trace_material)
}

::google::protobuf::uint8* opt_trace_material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.opt_trace_material)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 UserTypeId = 2;
  if (has_usertypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usertypeid(), target);
  }

  // optional bytes MaritalStatus = 3;
  if (has_maritalstatus()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->maritalstatus(), target);
  }

  // optional bytes HavingChildren = 4;
  if (has_havingchildren()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->havingchildren(), target);
  }

  // optional bytes LivingType = 5;
  if (has_livingtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->livingtype(), target);
  }

  // optional bytes LivingProvince = 6;
  if (has_livingprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->livingprovince(), target);
  }

  // optional bytes LivingCity = 7;
  if (has_livingcity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->livingcity(), target);
  }

  // optional bytes LivingArea = 8;
  if (has_livingarea()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->livingarea(), target);
  }

  // optional bytes LivingAddress = 9;
  if (has_livingaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->livingaddress(), target);
  }

  // optional bytes WorkCompany = 10;
  if (has_workcompany()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->workcompany(), target);
  }

  // optional bytes YearIncomeScope = 11;
  if (has_yearincomescope()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->yearincomescope(), target);
  }

  // optional bytes FamilyProvince = 12;
  if (has_familyprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->familyprovince(), target);
  }

  // optional bytes FamilyCity = 13;
  if (has_familycity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->familycity(), target);
  }

  // optional bytes FamilyArea = 14;
  if (has_familyarea()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->familyarea(), target);
  }

  // optional bytes FamilyAddress = 15;
  if (has_familyaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->familyaddress(), target);
  }

  // optional bytes FamilyName = 16;
  if (has_familyname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->familyname(), target);
  }

  // optional bytes FamilyContactNo = 17;
  if (has_familycontactno()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->familycontactno(), target);
  }

  // optional bytes FamilyRelation = 18;
  if (has_familyrelation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->familyrelation(), target);
  }

  // optional bytes StudentSchool = 19;
  if (has_studentschool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->studentschool(), target);
  }

  // optional bytes AttendingCollege = 20;
  if (has_attendingcollege()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attendingcollege(), target);
  }

  // optional bytes StudentProfessional = 21;
  if (has_studentprofessional()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->studentprofessional(), target);
  }

  // optional bytes AttendingClass = 22;
  if (has_attendingclass()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->attendingclass(), target);
  }

  // optional bytes Email = 23;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->email(), target);
  }

  // optional bytes CompanyProvince = 24;
  if (has_companyprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->companyprovince(), target);
  }

  // optional bytes CompanyCity = 25;
  if (has_companycity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->companycity(), target);
  }

  // optional bytes CompanyArea = 26;
  if (has_companyarea()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->companyarea(), target);
  }

  // optional bytes CompanyAddress = 27;
  if (has_companyaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->companyaddress(), target);
  }

  // optional bytes CompanyPhone = 28;
  if (has_companyphone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->companyphone(), target);
  }

  // optional bytes Department = 29;
  if (has_department()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->department(), target);
  }

  // optional bytes Position = 30;
  if (has_position()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->position(), target);
  }

  // optional bytes WorkYear = 31;
  if (has_workyear()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->workyear(), target);
  }

  // repeated .UBAS_PageView.contact_person ContactPerson = 32;
  for (int i = 0; i < this->contactperson_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->contactperson(i), target);
  }

  // optional .UBAS_PageView.estate estate_list = 33;
  if (has_estate_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->estate_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.opt_trace_material)
  return target;
}

int opt_trace_material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 UserTypeId = 2;
    if (has_usertypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertypeid());
    }

    // optional bytes MaritalStatus = 3;
    if (has_maritalstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->maritalstatus());
    }

    // optional bytes HavingChildren = 4;
    if (has_havingchildren()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->havingchildren());
    }

    // optional bytes LivingType = 5;
    if (has_livingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->livingtype());
    }

    // optional bytes LivingProvince = 6;
    if (has_livingprovince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->livingprovince());
    }

    // optional bytes LivingCity = 7;
    if (has_livingcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->livingcity());
    }

    // optional bytes LivingArea = 8;
    if (has_livingarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->livingarea());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes LivingAddress = 9;
    if (has_livingaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->livingaddress());
    }

    // optional bytes WorkCompany = 10;
    if (has_workcompany()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->workcompany());
    }

    // optional bytes YearIncomeScope = 11;
    if (has_yearincomescope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->yearincomescope());
    }

    // optional bytes FamilyProvince = 12;
    if (has_familyprovince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familyprovince());
    }

    // optional bytes FamilyCity = 13;
    if (has_familycity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familycity());
    }

    // optional bytes FamilyArea = 14;
    if (has_familyarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familyarea());
    }

    // optional bytes FamilyAddress = 15;
    if (has_familyaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familyaddress());
    }

    // optional bytes FamilyName = 16;
    if (has_familyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familyname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes FamilyContactNo = 17;
    if (has_familycontactno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familycontactno());
    }

    // optional bytes FamilyRelation = 18;
    if (has_familyrelation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->familyrelation());
    }

    // optional bytes StudentSchool = 19;
    if (has_studentschool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->studentschool());
    }

    // optional bytes AttendingCollege = 20;
    if (has_attendingcollege()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attendingcollege());
    }

    // optional bytes StudentProfessional = 21;
    if (has_studentprofessional()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->studentprofessional());
    }

    // optional bytes AttendingClass = 22;
    if (has_attendingclass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attendingclass());
    }

    // optional bytes Email = 23;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

    // optional bytes CompanyProvince = 24;
    if (has_companyprovince()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyprovince());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes CompanyCity = 25;
    if (has_companycity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companycity());
    }

    // optional bytes CompanyArea = 26;
    if (has_companyarea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyarea());
    }

    // optional bytes CompanyAddress = 27;
    if (has_companyaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyaddress());
    }

    // optional bytes CompanyPhone = 28;
    if (has_companyphone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->companyphone());
    }

    // optional bytes Department = 29;
    if (has_department()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->department());
    }

    // optional bytes Position = 30;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position());
    }

    // optional bytes WorkYear = 31;
    if (has_workyear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->workyear());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .UBAS_PageView.estate estate_list = 33;
    if (has_estate_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->estate_list());
    }

  }
  // repeated .UBAS_PageView.contact_person ContactPerson = 32;
  total_size += 2 * this->contactperson_size();
  for (int i = 0; i < this->contactperson_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactperson(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_trace_material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_trace_material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_trace_material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_trace_material::MergeFrom(const opt_trace_material& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactperson_.MergeFrom(from.contactperson_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_usertypeid()) {
      set_usertypeid(from.usertypeid());
    }
    if (from.has_maritalstatus()) {
      set_maritalstatus(from.maritalstatus());
    }
    if (from.has_havingchildren()) {
      set_havingchildren(from.havingchildren());
    }
    if (from.has_livingtype()) {
      set_livingtype(from.livingtype());
    }
    if (from.has_livingprovince()) {
      set_livingprovince(from.livingprovince());
    }
    if (from.has_livingcity()) {
      set_livingcity(from.livingcity());
    }
    if (from.has_livingarea()) {
      set_livingarea(from.livingarea());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_livingaddress()) {
      set_livingaddress(from.livingaddress());
    }
    if (from.has_workcompany()) {
      set_workcompany(from.workcompany());
    }
    if (from.has_yearincomescope()) {
      set_yearincomescope(from.yearincomescope());
    }
    if (from.has_familyprovince()) {
      set_familyprovince(from.familyprovince());
    }
    if (from.has_familycity()) {
      set_familycity(from.familycity());
    }
    if (from.has_familyarea()) {
      set_familyarea(from.familyarea());
    }
    if (from.has_familyaddress()) {
      set_familyaddress(from.familyaddress());
    }
    if (from.has_familyname()) {
      set_familyname(from.familyname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_familycontactno()) {
      set_familycontactno(from.familycontactno());
    }
    if (from.has_familyrelation()) {
      set_familyrelation(from.familyrelation());
    }
    if (from.has_studentschool()) {
      set_studentschool(from.studentschool());
    }
    if (from.has_attendingcollege()) {
      set_attendingcollege(from.attendingcollege());
    }
    if (from.has_studentprofessional()) {
      set_studentprofessional(from.studentprofessional());
    }
    if (from.has_attendingclass()) {
      set_attendingclass(from.attendingclass());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_companyprovince()) {
      set_companyprovince(from.companyprovince());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_companycity()) {
      set_companycity(from.companycity());
    }
    if (from.has_companyarea()) {
      set_companyarea(from.companyarea());
    }
    if (from.has_companyaddress()) {
      set_companyaddress(from.companyaddress());
    }
    if (from.has_companyphone()) {
      set_companyphone(from.companyphone());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_workyear()) {
      set_workyear(from.workyear());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_estate_list()) {
      mutable_estate_list()->::UBAS_PageView::estate::MergeFrom(from.estate_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_trace_material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_trace_material::CopyFrom(const opt_trace_material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_trace_material::IsInitialized() const {

  return true;
}

void opt_trace_material::Swap(opt_trace_material* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(usertypeid_, other->usertypeid_);
    std::swap(maritalstatus_, other->maritalstatus_);
    std::swap(havingchildren_, other->havingchildren_);
    std::swap(livingtype_, other->livingtype_);
    std::swap(livingprovince_, other->livingprovince_);
    std::swap(livingcity_, other->livingcity_);
    std::swap(livingarea_, other->livingarea_);
    std::swap(livingaddress_, other->livingaddress_);
    std::swap(workcompany_, other->workcompany_);
    std::swap(yearincomescope_, other->yearincomescope_);
    std::swap(familyprovince_, other->familyprovince_);
    std::swap(familycity_, other->familycity_);
    std::swap(familyarea_, other->familyarea_);
    std::swap(familyaddress_, other->familyaddress_);
    std::swap(familyname_, other->familyname_);
    std::swap(familycontactno_, other->familycontactno_);
    std::swap(familyrelation_, other->familyrelation_);
    std::swap(studentschool_, other->studentschool_);
    std::swap(attendingcollege_, other->attendingcollege_);
    std::swap(studentprofessional_, other->studentprofessional_);
    std::swap(attendingclass_, other->attendingclass_);
    std::swap(email_, other->email_);
    std::swap(companyprovince_, other->companyprovince_);
    std::swap(companycity_, other->companycity_);
    std::swap(companyarea_, other->companyarea_);
    std::swap(companyaddress_, other->companyaddress_);
    std::swap(companyphone_, other->companyphone_);
    std::swap(department_, other->department_);
    std::swap(position_, other->position_);
    std::swap(workyear_, other->workyear_);
    contactperson_.Swap(&other->contactperson_);
    std::swap(estate_list_, other->estate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_trace_material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_trace_material_descriptor_;
  metadata.reflection = opt_trace_material_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int contact_person::kNameFieldNumber;
const int contact_person::kPhoneFieldNumber;
const int contact_person::kRelationFieldNumber;
#endif  // !_MSC_VER

contact_person::contact_person()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.contact_person)
}

void contact_person::InitAsDefaultInstance() {
}

contact_person::contact_person(const contact_person& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.contact_person)
}

void contact_person::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

contact_person::~contact_person() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.contact_person)
  SharedDtor();
}

void contact_person::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relation_;
  }
  if (this != default_instance_) {
  }
}

void contact_person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return contact_person_descriptor_;
}

const contact_person& contact_person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

contact_person* contact_person::default_instance_ = NULL;

contact_person* contact_person::New() const {
  return new contact_person;
}

void contact_person::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_relation()) {
      if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool contact_person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.contact_person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Phone;
        break;
      }

      // optional bytes Phone = 2;
      case 2: {
        if (tag == 18) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Relation;
        break;
      }

      // optional bytes Relation = 3;
      case 3: {
        if (tag == 26) {
         parse_Relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.contact_person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.contact_person)
  return false;
#undef DO_
}

void contact_person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.contact_person)
  // optional bytes Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone(), output);
  }

  // optional bytes Relation = 3;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.contact_person)
}

::google::protobuf::uint8* contact_person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.contact_person)
  // optional bytes Name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes Phone = 2;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone(), target);
  }

  // optional bytes Relation = 3;
  if (has_relation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.contact_person)
  return target;
}

int contact_person::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes Phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }

    // optional bytes Relation = 3;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_person::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const contact_person* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const contact_person*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void contact_person::MergeFrom(const contact_person& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void contact_person::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_person::CopyFrom(const contact_person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_person::IsInitialized() const {

  return true;
}

void contact_person::Swap(contact_person* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(phone_, other->phone_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata contact_person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = contact_person_descriptor_;
  metadata.reflection = contact_person_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int estate::kEstateTypeFieldNumber;
const int estate::kInfosFieldNumber;
#endif  // !_MSC_VER

estate::estate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.estate)
}

void estate::InitAsDefaultInstance() {
}

estate::estate(const estate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.estate)
}

void estate::SharedCtor() {
  _cached_size_ = 0;
  estatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

estate::~estate() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.estate)
  SharedDtor();
}

void estate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void estate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* estate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return estate_descriptor_;
}

const estate& estate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

estate* estate::default_instance_ = NULL;

estate* estate::New() const {
  return new estate;
}

void estate::Clear() {
  estatetype_ = 0;
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool estate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.estate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EstateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estatetype_)));
          set_has_estatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .UBAS_PageView.estate_info infos = 2;
      case 2: {
        if (tag == 18) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.estate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.estate)
  return false;
#undef DO_
}

void estate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.estate)
  // optional int32 EstateType = 1;
  if (has_estatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->estatetype(), output);
  }

  // repeated .UBAS_PageView.estate_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.estate)
}

::google::protobuf::uint8* estate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.estate)
  // optional int32 EstateType = 1;
  if (has_estatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->estatetype(), target);
  }

  // repeated .UBAS_PageView.estate_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.estate)
  return target;
}

int estate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EstateType = 1;
    if (has_estatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estatetype());
    }

  }
  // repeated .UBAS_PageView.estate_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void estate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const estate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const estate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void estate::MergeFrom(const estate& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_estatetype()) {
      set_estatetype(from.estatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void estate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void estate::CopyFrom(const estate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estate::IsInitialized() const {

  return true;
}

void estate::Swap(estate* other) {
  if (other != this) {
    std::swap(estatetype_, other->estatetype_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata estate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = estate_descriptor_;
  metadata.reflection = estate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int estate_info::kPurchaseYearFieldNumber;
const int estate_info::kPhotoFieldNumber;
const int estate_info::kSourceTypeFieldNumber;
const int estate_info::kMonthAvgFieldNumber;
const int estate_info::kHouseTypeFieldNumber;
const int estate_info::kHouseProvinceFieldNumber;
const int estate_info::kHouseCityFieldNumber;
const int estate_info::kHouseAreaFieldNumber;
const int estate_info::kHouseAddressFieldNumber;
const int estate_info::kHouseSpaceFieldNumber;
const int estate_info::kHouseValueFieldNumber;
const int estate_info::kHouseLoanFieldNumber;
const int estate_info::kCarNoFieldNumber;
const int estate_info::kCarTypeFieldNumber;
const int estate_info::kCarValueFieldNumber;
#endif  // !_MSC_VER

estate_info::estate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.estate_info)
}

void estate_info::InitAsDefaultInstance() {
}

estate_info::estate_info(const estate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.estate_info)
}

void estate_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  purchaseyear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcetype_ = 0;
  monthavg_ = 0;
  housetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  houseprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  housecity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  housearea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  houseaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  housespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  housevalue_ = 0;
  houseloan_ = 0;
  carno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cartype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

estate_info::~estate_info() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.estate_info)
  SharedDtor();
}

void estate_info::SharedDtor() {
  if (purchaseyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete purchaseyear_;
  }
  if (photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete photo_;
  }
  if (housetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housetype_;
  }
  if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseprovince_;
  }
  if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housecity_;
  }
  if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housearea_;
  }
  if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseaddress_;
  }
  if (housespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housespace_;
  }
  if (carno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carno_;
  }
  if (cartype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cartype_;
  }
  if (this != default_instance_) {
  }
}

void estate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* estate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return estate_info_descriptor_;
}

const estate_info& estate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

estate_info* estate_info::default_instance_ = NULL;

estate_info* estate_info::New() const {
  return new estate_info;
}

void estate_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<estate_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sourcetype_, monthavg_);
    if (has_purchaseyear()) {
      if (purchaseyear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        purchaseyear_->clear();
      }
    }
    if (has_photo()) {
      if (photo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        photo_->clear();
      }
    }
    if (has_housetype()) {
      if (housetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        housetype_->clear();
      }
    }
    if (has_houseprovince()) {
      if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        houseprovince_->clear();
      }
    }
    if (has_housecity()) {
      if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        housecity_->clear();
      }
    }
    if (has_housearea()) {
      if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        housearea_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(housevalue_, houseloan_);
    if (has_houseaddress()) {
      if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        houseaddress_->clear();
      }
    }
    if (has_housespace()) {
      if (housespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        housespace_->clear();
      }
    }
    if (has_carno()) {
      if (carno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        carno_->clear();
      }
    }
    if (has_cartype()) {
      if (cartype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cartype_->clear();
      }
    }
    carvalue_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool estate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.estate_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes PurchaseYear = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_purchaseyear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Photo;
        break;
      }

      // optional bytes Photo = 2;
      case 2: {
        if (tag == 18) {
         parse_Photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SourceType;
        break;
      }

      // optional int32 SourceType = 3;
      case 3: {
        if (tag == 24) {
         parse_SourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_MonthAvg;
        break;
      }

      // optional float MonthAvg = 4;
      case 4: {
        if (tag == 37) {
         parse_MonthAvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &monthavg_)));
          set_has_monthavg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_HouseType;
        break;
      }

      // optional bytes HouseType = 5;
      case 5: {
        if (tag == 42) {
         parse_HouseType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_housetype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_HouseProvince;
        break;
      }

      // optional bytes HouseProvince = 6;
      case 6: {
        if (tag == 50) {
         parse_HouseProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_houseprovince()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_HouseCity;
        break;
      }

      // optional bytes HouseCity = 7;
      case 7: {
        if (tag == 58) {
         parse_HouseCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_housecity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_HouseArea;
        break;
      }

      // optional bytes HouseArea = 8;
      case 8: {
        if (tag == 66) {
         parse_HouseArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_housearea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_HouseAddress;
        break;
      }

      // optional bytes HouseAddress = 9;
      case 9: {
        if (tag == 74) {
         parse_HouseAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_houseaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_HouseSpace;
        break;
      }

      // optional bytes HouseSpace = 10;
      case 10: {
        if (tag == 82) {
         parse_HouseSpace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_housespace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_HouseValue;
        break;
      }

      // optional int32 HouseValue = 11;
      case 11: {
        if (tag == 88) {
         parse_HouseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &housevalue_)));
          set_has_housevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_HouseLoan;
        break;
      }

      // optional int32 HouseLoan = 12;
      case 12: {
        if (tag == 96) {
         parse_HouseLoan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &houseloan_)));
          set_has_houseloan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CarNo;
        break;
      }

      // optional bytes CarNo = 13;
      case 13: {
        if (tag == 106) {
         parse_CarNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_carno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CarType;
        break;
      }

      // optional bytes CarType = 14;
      case 14: {
        if (tag == 114) {
         parse_CarType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cartype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_CarValue;
        break;
      }

      // optional int32 CarValue = 15;
      case 15: {
        if (tag == 120) {
         parse_CarValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carvalue_)));
          set_has_carvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.estate_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.estate_info)
  return false;
#undef DO_
}

void estate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.estate_info)
  // optional bytes PurchaseYear = 1;
  if (has_purchaseyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->purchaseyear(), output);
  }

  // optional bytes Photo = 2;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->photo(), output);
  }

  // optional int32 SourceType = 3;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sourcetype(), output);
  }

  // optional float MonthAvg = 4;
  if (has_monthavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->monthavg(), output);
  }

  // optional bytes HouseType = 5;
  if (has_housetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->housetype(), output);
  }

  // optional bytes HouseProvince = 6;
  if (has_houseprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->houseprovince(), output);
  }

  // optional bytes HouseCity = 7;
  if (has_housecity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->housecity(), output);
  }

  // optional bytes HouseArea = 8;
  if (has_housearea()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->housearea(), output);
  }

  // optional bytes HouseAddress = 9;
  if (has_houseaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->houseaddress(), output);
  }

  // optional bytes HouseSpace = 10;
  if (has_housespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->housespace(), output);
  }

  // optional int32 HouseValue = 11;
  if (has_housevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->housevalue(), output);
  }

  // optional int32 HouseLoan = 12;
  if (has_houseloan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->houseloan(), output);
  }

  // optional bytes CarNo = 13;
  if (has_carno()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->carno(), output);
  }

  // optional bytes CarType = 14;
  if (has_cartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->cartype(), output);
  }

  // optional int32 CarValue = 15;
  if (has_carvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->carvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.estate_info)
}

::google::protobuf::uint8* estate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.estate_info)
  // optional bytes PurchaseYear = 1;
  if (has_purchaseyear()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->purchaseyear(), target);
  }

  // optional bytes Photo = 2;
  if (has_photo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->photo(), target);
  }

  // optional int32 SourceType = 3;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sourcetype(), target);
  }

  // optional float MonthAvg = 4;
  if (has_monthavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->monthavg(), target);
  }

  // optional bytes HouseType = 5;
  if (has_housetype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->housetype(), target);
  }

  // optional bytes HouseProvince = 6;
  if (has_houseprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->houseprovince(), target);
  }

  // optional bytes HouseCity = 7;
  if (has_housecity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->housecity(), target);
  }

  // optional bytes HouseArea = 8;
  if (has_housearea()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->housearea(), target);
  }

  // optional bytes HouseAddress = 9;
  if (has_houseaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->houseaddress(), target);
  }

  // optional bytes HouseSpace = 10;
  if (has_housespace()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->housespace(), target);
  }

  // optional int32 HouseValue = 11;
  if (has_housevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->housevalue(), target);
  }

  // optional int32 HouseLoan = 12;
  if (has_houseloan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->houseloan(), target);
  }

  // optional bytes CarNo = 13;
  if (has_carno()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->carno(), target);
  }

  // optional bytes CarType = 14;
  if (has_cartype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->cartype(), target);
  }

  // optional int32 CarValue = 15;
  if (has_carvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->carvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.estate_info)
  return target;
}

int estate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes PurchaseYear = 1;
    if (has_purchaseyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->purchaseyear());
    }

    // optional bytes Photo = 2;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->photo());
    }

    // optional int32 SourceType = 3;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetype());
    }

    // optional float MonthAvg = 4;
    if (has_monthavg()) {
      total_size += 1 + 4;
    }

    // optional bytes HouseType = 5;
    if (has_housetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->housetype());
    }

    // optional bytes HouseProvince = 6;
    if (has_houseprovince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->houseprovince());
    }

    // optional bytes HouseCity = 7;
    if (has_housecity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->housecity());
    }

    // optional bytes HouseArea = 8;
    if (has_housearea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->housearea());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes HouseAddress = 9;
    if (has_houseaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->houseaddress());
    }

    // optional bytes HouseSpace = 10;
    if (has_housespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->housespace());
    }

    // optional int32 HouseValue = 11;
    if (has_housevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->housevalue());
    }

    // optional int32 HouseLoan = 12;
    if (has_houseloan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->houseloan());
    }

    // optional bytes CarNo = 13;
    if (has_carno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->carno());
    }

    // optional bytes CarType = 14;
    if (has_cartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cartype());
    }

    // optional int32 CarValue = 15;
    if (has_carvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void estate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const estate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const estate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void estate_info::MergeFrom(const estate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purchaseyear()) {
      set_purchaseyear(from.purchaseyear());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_monthavg()) {
      set_monthavg(from.monthavg());
    }
    if (from.has_housetype()) {
      set_housetype(from.housetype());
    }
    if (from.has_houseprovince()) {
      set_houseprovince(from.houseprovince());
    }
    if (from.has_housecity()) {
      set_housecity(from.housecity());
    }
    if (from.has_housearea()) {
      set_housearea(from.housearea());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_houseaddress()) {
      set_houseaddress(from.houseaddress());
    }
    if (from.has_housespace()) {
      set_housespace(from.housespace());
    }
    if (from.has_housevalue()) {
      set_housevalue(from.housevalue());
    }
    if (from.has_houseloan()) {
      set_houseloan(from.houseloan());
    }
    if (from.has_carno()) {
      set_carno(from.carno());
    }
    if (from.has_cartype()) {
      set_cartype(from.cartype());
    }
    if (from.has_carvalue()) {
      set_carvalue(from.carvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void estate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void estate_info::CopyFrom(const estate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estate_info::IsInitialized() const {

  return true;
}

void estate_info::Swap(estate_info* other) {
  if (other != this) {
    std::swap(purchaseyear_, other->purchaseyear_);
    std::swap(photo_, other->photo_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(monthavg_, other->monthavg_);
    std::swap(housetype_, other->housetype_);
    std::swap(houseprovince_, other->houseprovince_);
    std::swap(housecity_, other->housecity_);
    std::swap(housearea_, other->housearea_);
    std::swap(houseaddress_, other->houseaddress_);
    std::swap(housespace_, other->housespace_);
    std::swap(housevalue_, other->housevalue_);
    std::swap(houseloan_, other->houseloan_);
    std::swap(carno_, other->carno_);
    std::swap(cartype_, other->cartype_);
    std::swap(carvalue_, other->carvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata estate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = estate_info_descriptor_;
  metadata.reflection = estate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_trace::kApplyTypeFieldNumber;
const int verify_trace::kUserTypeIdFieldNumber;
const int verify_trace::kDegreeTypeFieldNumber;
const int verify_trace::kGraduateSchoolFieldNumber;
const int verify_trace::kGraduateDateFieldNumber;
const int verify_trace::kMajorFieldNumber;
#endif  // !_MSC_VER

verify_trace::verify_trace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.verify_trace)
}

void verify_trace::InitAsDefaultInstance() {
}

verify_trace::verify_trace(const verify_trace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.verify_trace)
}

void verify_trace::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  applytype_ = 0;
  usertypeid_ = 0;
  degreetype_ = 0;
  graduateschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graduatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  major_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_trace::~verify_trace() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.verify_trace)
  SharedDtor();
}

void verify_trace::SharedDtor() {
  if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduateschool_;
  }
  if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduatedate_;
  }
  if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete major_;
  }
  if (this != default_instance_) {
  }
}

void verify_trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_trace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_trace_descriptor_;
}

const verify_trace& verify_trace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

verify_trace* verify_trace::default_instance_ = NULL;

verify_trace* verify_trace::New() const {
  return new verify_trace;
}

void verify_trace::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<verify_trace*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(applytype_, usertypeid_);
    degreetype_ = 0;
    if (has_graduateschool()) {
      if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graduateschool_->clear();
      }
    }
    if (has_graduatedate()) {
      if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        graduatedate_->clear();
      }
    }
    if (has_major()) {
      if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        major_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.verify_trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ApplyType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserTypeId;
        break;
      }

      // optional int32 UserTypeId = 2;
      case 2: {
        if (tag == 16) {
         parse_UserTypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertypeid_)));
          set_has_usertypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DegreeType;
        break;
      }

      // optional int32 DegreeType = 3;
      case 3: {
        if (tag == 24) {
         parse_DegreeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degreetype_)));
          set_has_degreetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GraduateSchool;
        break;
      }

      // optional bytes GraduateSchool = 4;
      case 4: {
        if (tag == 34) {
         parse_GraduateSchool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graduateschool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GraduateDate;
        break;
      }

      // optional bytes GraduateDate = 5;
      case 5: {
        if (tag == 42) {
         parse_GraduateDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graduatedate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Major;
        break;
      }

      // optional bytes Major = 6;
      case 6: {
        if (tag == 50) {
         parse_Major:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_major()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.verify_trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.verify_trace)
  return false;
#undef DO_
}

void verify_trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.verify_trace)
  // optional int32 ApplyType = 1;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->applytype(), output);
  }

  // optional int32 UserTypeId = 2;
  if (has_usertypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usertypeid(), output);
  }

  // optional int32 DegreeType = 3;
  if (has_degreetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->degreetype(), output);
  }

  // optional bytes GraduateSchool = 4;
  if (has_graduateschool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->graduateschool(), output);
  }

  // optional bytes GraduateDate = 5;
  if (has_graduatedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->graduatedate(), output);
  }

  // optional bytes Major = 6;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->major(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.verify_trace)
}

::google::protobuf::uint8* verify_trace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.verify_trace)
  // optional int32 ApplyType = 1;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->applytype(), target);
  }

  // optional int32 UserTypeId = 2;
  if (has_usertypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usertypeid(), target);
  }

  // optional int32 DegreeType = 3;
  if (has_degreetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->degreetype(), target);
  }

  // optional bytes GraduateSchool = 4;
  if (has_graduateschool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->graduateschool(), target);
  }

  // optional bytes GraduateDate = 5;
  if (has_graduatedate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->graduatedate(), target);
  }

  // optional bytes Major = 6;
  if (has_major()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->major(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.verify_trace)
  return target;
}

int verify_trace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ApplyType = 1;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applytype());
    }

    // optional int32 UserTypeId = 2;
    if (has_usertypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertypeid());
    }

    // optional int32 DegreeType = 3;
    if (has_degreetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degreetype());
    }

    // optional bytes GraduateSchool = 4;
    if (has_graduateschool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graduateschool());
    }

    // optional bytes GraduateDate = 5;
    if (has_graduatedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graduatedate());
    }

    // optional bytes Major = 6;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->major());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_trace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_trace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_trace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_trace::MergeFrom(const verify_trace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_usertypeid()) {
      set_usertypeid(from.usertypeid());
    }
    if (from.has_degreetype()) {
      set_degreetype(from.degreetype());
    }
    if (from.has_graduateschool()) {
      set_graduateschool(from.graduateschool());
    }
    if (from.has_graduatedate()) {
      set_graduatedate(from.graduatedate());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_trace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_trace::CopyFrom(const verify_trace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_trace::IsInitialized() const {

  return true;
}

void verify_trace::Swap(verify_trace* other) {
  if (other != this) {
    std::swap(applytype_, other->applytype_);
    std::swap(usertypeid_, other->usertypeid_);
    std::swap(degreetype_, other->degreetype_);
    std::swap(graduateschool_, other->graduateschool_);
    std::swap(graduatedate_, other->graduatedate_);
    std::swap(major_, other->major_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_trace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_trace_descriptor_;
  metadata.reflection = verify_trace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_access_detail::kPageNameFieldNumber;
const int page_access_detail::kAccessCountFieldNumber;
const int page_access_detail::kDurationFieldNumber;
const int page_access_detail::kAccessCountRateFieldNumber;
#endif  // !_MSC_VER

page_access_detail::page_access_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_access_detail)
}

void page_access_detail::InitAsDefaultInstance() {
}

page_access_detail::page_access_detail(const page_access_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_access_detail)
}

void page_access_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_count_ = 0;
  duration_ = 0;
  access_count_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_access_detail::~page_access_detail() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_access_detail)
  SharedDtor();
}

void page_access_detail::SharedDtor() {
  if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_name_;
  }
  if (this != default_instance_) {
  }
}

void page_access_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_access_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_access_detail_descriptor_;
}

const page_access_detail& page_access_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_access_detail* page_access_detail::default_instance_ = NULL;

page_access_detail* page_access_detail::New() const {
  return new page_access_detail;
}

void page_access_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<page_access_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(access_count_, access_count_rate_);
    if (has_page_name()) {
      if (page_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_access_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_access_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes page_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_count;
        break;
      }

      // optional int32 access_count = 2;
      case 2: {
        if (tag == 16) {
         parse_access_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_count_)));
          set_has_access_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional int32 duration = 3;
      case 3: {
        if (tag == 24) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_access_count_rate;
        break;
      }

      // optional float access_count_rate = 4;
      case 4: {
        if (tag == 37) {
         parse_access_count_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &access_count_rate_)));
          set_has_access_count_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_access_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_access_detail)
  return false;
#undef DO_
}

void page_access_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_access_detail)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_name(), output);
  }

  // optional int32 access_count = 2;
  if (has_access_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->access_count(), output);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // optional float access_count_rate = 4;
  if (has_access_count_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->access_count_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_access_detail)
}

::google::protobuf::uint8* page_access_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_access_detail)
  // optional bytes page_name = 1;
  if (has_page_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_name(), target);
  }

  // optional int32 access_count = 2;
  if (has_access_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->access_count(), target);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // optional float access_count_rate = 4;
  if (has_access_count_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->access_count_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_access_detail)
  return target;
}

int page_access_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes page_name = 1;
    if (has_page_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->page_name());
    }

    // optional int32 access_count = 2;
    if (has_access_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_count());
    }

    // optional int32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional float access_count_rate = 4;
    if (has_access_count_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_access_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_access_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_access_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_access_detail::MergeFrom(const page_access_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_name()) {
      set_page_name(from.page_name());
    }
    if (from.has_access_count()) {
      set_access_count(from.access_count());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_access_count_rate()) {
      set_access_count_rate(from.access_count_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_access_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_access_detail::CopyFrom(const page_access_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_access_detail::IsInitialized() const {

  return true;
}

void page_access_detail::Swap(page_access_detail* other) {
  if (other != this) {
    std::swap(page_name_, other->page_name_);
    std::swap(access_count_, other->access_count_);
    std::swap(duration_, other->duration_);
    std::swap(access_count_rate_, other->access_count_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_access_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_access_detail_descriptor_;
  metadata.reflection = page_access_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_access_details_ask::kStartDateFieldNumber;
const int page_access_details_ask::kEndDateFieldNumber;
const int page_access_details_ask::kNumOfPageFieldNumber;
const int page_access_details_ask::kCurrPageNoFieldNumber;
const int page_access_details_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

page_access_details_ask::page_access_details_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_access_details_ask)
}

void page_access_details_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

page_access_details_ask::page_access_details_ask(const page_access_details_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_access_details_ask)
}

void page_access_details_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numofpage_ = 0;
  currpageno_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_access_details_ask::~page_access_details_ask() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_access_details_ask)
  SharedDtor();
}

void page_access_details_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void page_access_details_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_access_details_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_access_details_ask_descriptor_;
}

const page_access_details_ask& page_access_details_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_access_details_ask* page_access_details_ask::default_instance_ = NULL;

page_access_details_ask* page_access_details_ask::New() const {
  return new page_access_details_ask;
}

void page_access_details_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<page_access_details_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(numofpage_, currpageno_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_access_details_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_access_details_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numOfPage;
        break;
      }

      // optional int32 numOfPage = 3;
      case 3: {
        if (tag == 24) {
         parse_numOfPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numofpage_)));
          set_has_numofpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_currPageNo;
        break;
      }

      // optional int32 currPageNo = 4;
      case 4: {
        if (tag == 32) {
         parse_currPageNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currpageno_)));
          set_has_currpageno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_access_details_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_access_details_ask)
  return false;
#undef DO_
}

void page_access_details_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_access_details_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional int32 numOfPage = 3;
  if (has_numofpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numofpage(), output);
  }

  // optional int32 currPageNo = 4;
  if (has_currpageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currpageno(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_access_details_ask)
}

::google::protobuf::uint8* page_access_details_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_access_details_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional int32 numOfPage = 3;
  if (has_numofpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numofpage(), target);
  }

  // optional int32 currPageNo = 4;
  if (has_currpageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currpageno(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_access_details_ask)
  return target;
}

int page_access_details_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional int32 numOfPage = 3;
    if (has_numofpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numofpage());
    }

    // optional int32 currPageNo = 4;
    if (has_currpageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currpageno());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_access_details_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_access_details_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_access_details_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_access_details_ask::MergeFrom(const page_access_details_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_numofpage()) {
      set_numofpage(from.numofpage());
    }
    if (from.has_currpageno()) {
      set_currpageno(from.currpageno());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_access_details_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_access_details_ask::CopyFrom(const page_access_details_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_access_details_ask::IsInitialized() const {

  return true;
}

void page_access_details_ask::Swap(page_access_details_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(numofpage_, other->numofpage_);
    std::swap(currpageno_, other->currpageno_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_access_details_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_access_details_ask_descriptor_;
  metadata.reflection = page_access_details_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int page_access_details_ans::kTotalCountFieldNumber;
const int page_access_details_ans::kDetailsFieldNumber;
const int page_access_details_ans::kResultFieldNumber;
#endif  // !_MSC_VER

page_access_details_ans::page_access_details_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UBAS_PageView.page_access_details_ans)
}

void page_access_details_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

page_access_details_ans::page_access_details_ans(const page_access_details_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UBAS_PageView.page_access_details_ans)
}

void page_access_details_ans::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

page_access_details_ans::~page_access_details_ans() {
  // @@protoc_insertion_point(destructor:UBAS_PageView.page_access_details_ans)
  SharedDtor();
}

void page_access_details_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void page_access_details_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* page_access_details_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return page_access_details_ans_descriptor_;
}

const page_access_details_ans& page_access_details_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UBAS_5fPageView_2eproto();
  return *default_instance_;
}

page_access_details_ans* page_access_details_ans::default_instance_ = NULL;

page_access_details_ans* page_access_details_ans::New() const {
  return new page_access_details_ans;
}

void page_access_details_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_count_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool page_access_details_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UBAS_PageView.page_access_details_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // repeated .UBAS_PageView.page_access_detail details = 2;
      case 2: {
        if (tag == 18) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UBAS_PageView.page_access_details_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UBAS_PageView.page_access_details_ans)
  return false;
#undef DO_
}

void page_access_details_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UBAS_PageView.page_access_details_ans)
  // optional int32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_count(), output);
  }

  // repeated .UBAS_PageView.page_access_detail details = 2;
  for (int i = 0; i < this->details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(i), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UBAS_PageView.page_access_details_ans)
}

::google::protobuf::uint8* page_access_details_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UBAS_PageView.page_access_details_ans)
  // optional int32 total_count = 1;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_count(), target);
  }

  // repeated .UBAS_PageView.page_access_detail details = 2;
  for (int i = 0; i < this->details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->details(i), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UBAS_PageView.page_access_details_ans)
  return target;
}

int page_access_details_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .UBAS_PageView.page_access_detail details = 2;
  total_size += 1 * this->details_size();
  for (int i = 0; i < this->details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void page_access_details_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const page_access_details_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const page_access_details_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void page_access_details_ans::MergeFrom(const page_access_details_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  details_.MergeFrom(from.details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void page_access_details_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void page_access_details_ans::CopyFrom(const page_access_details_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool page_access_details_ans::IsInitialized() const {

  return true;
}

void page_access_details_ans::Swap(page_access_details_ans* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    details_.Swap(&other->details_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata page_access_details_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = page_access_details_ans_descriptor_;
  metadata.reflection = page_access_details_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UBAS_PageView

// @@protoc_insertion_point(global_scope)
