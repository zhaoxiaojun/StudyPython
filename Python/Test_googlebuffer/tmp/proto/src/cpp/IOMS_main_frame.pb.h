// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IOMS_main_frame.proto

#ifndef PROTOBUF_IOMS_5fmain_5fframe_2eproto__INCLUDED
#define PROTOBUF_IOMS_5fmain_5fframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace IOMS_main_frame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

class credit_request_monitor_ask;
class credit_request_monitor;
class credit_request_monitor_ans;
class credit_response_monitor_ask;
class credit_response_monitor;
class credit_response_monitor_ans;
class fraud_request_monitor_ask;
class fraud_request_monitor;
class fraud_request_monitor_ans;
class fraud_response_monitor_ask;
class fraud_response_monitor;
class fraud_response_monitor_ans;
class configuration_amend_ask;
class configuration_amend_ans;

// ===================================================================

class credit_request_monitor_ask : public ::google::protobuf::Message {
 public:
  credit_request_monitor_ask();
  virtual ~credit_request_monitor_ask();

  credit_request_monitor_ask(const credit_request_monitor_ask& from);

  inline credit_request_monitor_ask& operator=(const credit_request_monitor_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_request_monitor_ask& default_instance();

  void Swap(credit_request_monitor_ask* other);

  // implements Message ----------------------------------------------

  credit_request_monitor_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_request_monitor_ask& from);
  void MergeFrom(const credit_request_monitor_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 handle_type = 1;
  inline bool has_handle_type() const;
  inline void clear_handle_type();
  static const int kHandleTypeFieldNumber = 1;
  inline ::google::protobuf::int32 handle_type() const;
  inline void set_handle_type(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.credit_request_monitor_ask)
 private:
  inline void set_has_handle_type();
  inline void clear_has_handle_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 handle_type_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_request_monitor_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_request_monitor : public ::google::protobuf::Message {
 public:
  credit_request_monitor();
  virtual ~credit_request_monitor();

  credit_request_monitor(const credit_request_monitor& from);

  inline credit_request_monitor& operator=(const credit_request_monitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_request_monitor& default_instance();

  void Swap(credit_request_monitor* other);

  // implements Message ----------------------------------------------

  credit_request_monitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_request_monitor& from);
  void MergeFrom(const credit_request_monitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const void* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // optional int32 handle_type = 3;
  inline bool has_handle_type() const;
  inline void clear_handle_type();
  static const int kHandleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 handle_type() const;
  inline void set_handle_type(::google::protobuf::int32 value);

  // optional bytes json = 4;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 4;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.credit_request_monitor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_handle_type();
  inline void clear_has_handle_type();
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* update_time_;
  ::std::string* json_;
  ::google::protobuf::int32 handle_type_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_request_monitor* default_instance_;
};
// -------------------------------------------------------------------

class credit_request_monitor_ans : public ::google::protobuf::Message {
 public:
  credit_request_monitor_ans();
  virtual ~credit_request_monitor_ans();

  credit_request_monitor_ans(const credit_request_monitor_ans& from);

  inline credit_request_monitor_ans& operator=(const credit_request_monitor_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_request_monitor_ans& default_instance();

  void Swap(credit_request_monitor_ans* other);

  // implements Message ----------------------------------------------

  credit_request_monitor_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_request_monitor_ans& from);
  void MergeFrom(const credit_request_monitor_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IOMS_main_frame.credit_request_monitor credit_req_monitor_list = 1;
  inline int credit_req_monitor_list_size() const;
  inline void clear_credit_req_monitor_list();
  static const int kCreditReqMonitorListFieldNumber = 1;
  inline const ::IOMS_main_frame::credit_request_monitor& credit_req_monitor_list(int index) const;
  inline ::IOMS_main_frame::credit_request_monitor* mutable_credit_req_monitor_list(int index);
  inline ::IOMS_main_frame::credit_request_monitor* add_credit_req_monitor_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_request_monitor >&
      credit_req_monitor_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_request_monitor >*
      mutable_credit_req_monitor_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.credit_request_monitor_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_request_monitor > credit_req_monitor_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_request_monitor_ans* default_instance_;
};
// -------------------------------------------------------------------

class credit_response_monitor_ask : public ::google::protobuf::Message {
 public:
  credit_response_monitor_ask();
  virtual ~credit_response_monitor_ask();

  credit_response_monitor_ask(const credit_response_monitor_ask& from);

  inline credit_response_monitor_ask& operator=(const credit_response_monitor_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_response_monitor_ask& default_instance();

  void Swap(credit_response_monitor_ask* other);

  // implements Message ----------------------------------------------

  credit_response_monitor_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_response_monitor_ask& from);
  void MergeFrom(const credit_response_monitor_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 handle_type = 1;
  inline bool has_handle_type() const;
  inline void clear_handle_type();
  static const int kHandleTypeFieldNumber = 1;
  inline ::google::protobuf::int32 handle_type() const;
  inline void set_handle_type(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.credit_response_monitor_ask)
 private:
  inline void set_has_handle_type();
  inline void clear_has_handle_type();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 handle_type_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_response_monitor_ask* default_instance_;
};
// -------------------------------------------------------------------

class credit_response_monitor : public ::google::protobuf::Message {
 public:
  credit_response_monitor();
  virtual ~credit_response_monitor();

  credit_response_monitor(const credit_response_monitor& from);

  inline credit_response_monitor& operator=(const credit_response_monitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_response_monitor& default_instance();

  void Swap(credit_response_monitor* other);

  // implements Message ----------------------------------------------

  credit_response_monitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_response_monitor& from);
  void MergeFrom(const credit_response_monitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes inset_time = 2;
  inline bool has_inset_time() const;
  inline void clear_inset_time();
  static const int kInsetTimeFieldNumber = 2;
  inline const ::std::string& inset_time() const;
  inline void set_inset_time(const ::std::string& value);
  inline void set_inset_time(const char* value);
  inline void set_inset_time(const void* value, size_t size);
  inline ::std::string* mutable_inset_time();
  inline ::std::string* release_inset_time();
  inline void set_allocated_inset_time(::std::string* inset_time);

  // optional bytes json = 3;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 3;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.credit_response_monitor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_inset_time();
  inline void clear_has_inset_time();
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* inset_time_;
  ::std::string* json_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_response_monitor* default_instance_;
};
// -------------------------------------------------------------------

class credit_response_monitor_ans : public ::google::protobuf::Message {
 public:
  credit_response_monitor_ans();
  virtual ~credit_response_monitor_ans();

  credit_response_monitor_ans(const credit_response_monitor_ans& from);

  inline credit_response_monitor_ans& operator=(const credit_response_monitor_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const credit_response_monitor_ans& default_instance();

  void Swap(credit_response_monitor_ans* other);

  // implements Message ----------------------------------------------

  credit_response_monitor_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const credit_response_monitor_ans& from);
  void MergeFrom(const credit_response_monitor_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IOMS_main_frame.credit_response_monitor credit_rsp_monitor_list = 1;
  inline int credit_rsp_monitor_list_size() const;
  inline void clear_credit_rsp_monitor_list();
  static const int kCreditRspMonitorListFieldNumber = 1;
  inline const ::IOMS_main_frame::credit_response_monitor& credit_rsp_monitor_list(int index) const;
  inline ::IOMS_main_frame::credit_response_monitor* mutable_credit_rsp_monitor_list(int index);
  inline ::IOMS_main_frame::credit_response_monitor* add_credit_rsp_monitor_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_response_monitor >&
      credit_rsp_monitor_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_response_monitor >*
      mutable_credit_rsp_monitor_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.credit_response_monitor_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_response_monitor > credit_rsp_monitor_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static credit_response_monitor_ans* default_instance_;
};
// -------------------------------------------------------------------

class fraud_request_monitor_ask : public ::google::protobuf::Message {
 public:
  fraud_request_monitor_ask();
  virtual ~fraud_request_monitor_ask();

  fraud_request_monitor_ask(const fraud_request_monitor_ask& from);

  inline fraud_request_monitor_ask& operator=(const fraud_request_monitor_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fraud_request_monitor_ask& default_instance();

  void Swap(fraud_request_monitor_ask* other);

  // implements Message ----------------------------------------------

  fraud_request_monitor_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fraud_request_monitor_ask& from);
  void MergeFrom(const fraud_request_monitor_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.fraud_request_monitor_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static fraud_request_monitor_ask* default_instance_;
};
// -------------------------------------------------------------------

class fraud_request_monitor : public ::google::protobuf::Message {
 public:
  fraud_request_monitor();
  virtual ~fraud_request_monitor();

  fraud_request_monitor(const fraud_request_monitor& from);

  inline fraud_request_monitor& operator=(const fraud_request_monitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fraud_request_monitor& default_instance();

  void Swap(fraud_request_monitor* other);

  // implements Message ----------------------------------------------

  fraud_request_monitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fraud_request_monitor& from);
  void MergeFrom(const fraud_request_monitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uniqueid = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 1;
  inline ::google::protobuf::int32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::int32 value);

  // optional bytes request_json = 2;
  inline bool has_request_json() const;
  inline void clear_request_json();
  static const int kRequestJsonFieldNumber = 2;
  inline const ::std::string& request_json() const;
  inline void set_request_json(const ::std::string& value);
  inline void set_request_json(const char* value);
  inline void set_request_json(const void* value, size_t size);
  inline ::std::string* mutable_request_json();
  inline ::std::string* release_request_json();
  inline void set_allocated_request_json(::std::string* request_json);

  // optional int32 model_type = 3;
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 3;
  inline ::google::protobuf::int32 model_type() const;
  inline void set_model_type(::google::protobuf::int32 value);

  // optional bytes inset_time = 4;
  inline bool has_inset_time() const;
  inline void clear_inset_time();
  static const int kInsetTimeFieldNumber = 4;
  inline const ::std::string& inset_time() const;
  inline void set_inset_time(const ::std::string& value);
  inline void set_inset_time(const char* value);
  inline void set_inset_time(const void* value, size_t size);
  inline ::std::string* mutable_inset_time();
  inline ::std::string* release_inset_time();
  inline void set_allocated_inset_time(::std::string* inset_time);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.fraud_request_monitor)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_request_json();
  inline void clear_has_request_json();
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_inset_time();
  inline void clear_has_inset_time();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_json_;
  ::google::protobuf::int32 uniqueid_;
  ::google::protobuf::int32 model_type_;
  ::std::string* inset_time_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static fraud_request_monitor* default_instance_;
};
// -------------------------------------------------------------------

class fraud_request_monitor_ans : public ::google::protobuf::Message {
 public:
  fraud_request_monitor_ans();
  virtual ~fraud_request_monitor_ans();

  fraud_request_monitor_ans(const fraud_request_monitor_ans& from);

  inline fraud_request_monitor_ans& operator=(const fraud_request_monitor_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fraud_request_monitor_ans& default_instance();

  void Swap(fraud_request_monitor_ans* other);

  // implements Message ----------------------------------------------

  fraud_request_monitor_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fraud_request_monitor_ans& from);
  void MergeFrom(const fraud_request_monitor_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IOMS_main_frame.fraud_request_monitor fraud_req_monitor_list = 1;
  inline int fraud_req_monitor_list_size() const;
  inline void clear_fraud_req_monitor_list();
  static const int kFraudReqMonitorListFieldNumber = 1;
  inline const ::IOMS_main_frame::fraud_request_monitor& fraud_req_monitor_list(int index) const;
  inline ::IOMS_main_frame::fraud_request_monitor* mutable_fraud_req_monitor_list(int index);
  inline ::IOMS_main_frame::fraud_request_monitor* add_fraud_req_monitor_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_request_monitor >&
      fraud_req_monitor_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_request_monitor >*
      mutable_fraud_req_monitor_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.fraud_request_monitor_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_request_monitor > fraud_req_monitor_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static fraud_request_monitor_ans* default_instance_;
};
// -------------------------------------------------------------------

class fraud_response_monitor_ask : public ::google::protobuf::Message {
 public:
  fraud_response_monitor_ask();
  virtual ~fraud_response_monitor_ask();

  fraud_response_monitor_ask(const fraud_response_monitor_ask& from);

  inline fraud_response_monitor_ask& operator=(const fraud_response_monitor_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fraud_response_monitor_ask& default_instance();

  void Swap(fraud_response_monitor_ask* other);

  // implements Message ----------------------------------------------

  fraud_response_monitor_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fraud_response_monitor_ask& from);
  void MergeFrom(const fraud_response_monitor_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.fraud_response_monitor_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static fraud_response_monitor_ask* default_instance_;
};
// -------------------------------------------------------------------

class fraud_response_monitor : public ::google::protobuf::Message {
 public:
  fraud_response_monitor();
  virtual ~fraud_response_monitor();

  fraud_response_monitor(const fraud_response_monitor& from);

  inline fraud_response_monitor& operator=(const fraud_response_monitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fraud_response_monitor& default_instance();

  void Swap(fraud_response_monitor* other);

  // implements Message ----------------------------------------------

  fraud_response_monitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fraud_response_monitor& from);
  void MergeFrom(const fraud_response_monitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uniqueid = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 1;
  inline ::google::protobuf::int32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::int32 value);

  // optional bytes request_json = 2;
  inline bool has_request_json() const;
  inline void clear_request_json();
  static const int kRequestJsonFieldNumber = 2;
  inline const ::std::string& request_json() const;
  inline void set_request_json(const ::std::string& value);
  inline void set_request_json(const char* value);
  inline void set_request_json(const void* value, size_t size);
  inline ::std::string* mutable_request_json();
  inline ::std::string* release_request_json();
  inline void set_allocated_request_json(::std::string* request_json);

  // optional bytes model_name = 3;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 3;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const void* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional bytes model_result = 4;
  inline bool has_model_result() const;
  inline void clear_model_result();
  static const int kModelResultFieldNumber = 4;
  inline const ::std::string& model_result() const;
  inline void set_model_result(const ::std::string& value);
  inline void set_model_result(const char* value);
  inline void set_model_result(const void* value, size_t size);
  inline ::std::string* mutable_model_result();
  inline ::std::string* release_model_result();
  inline void set_allocated_model_result(::std::string* model_result);

  // optional bytes result_json = 5;
  inline bool has_result_json() const;
  inline void clear_result_json();
  static const int kResultJsonFieldNumber = 5;
  inline const ::std::string& result_json() const;
  inline void set_result_json(const ::std::string& value);
  inline void set_result_json(const char* value);
  inline void set_result_json(const void* value, size_t size);
  inline ::std::string* mutable_result_json();
  inline ::std::string* release_result_json();
  inline void set_allocated_result_json(::std::string* result_json);

  // optional bytes real_name = 6;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 6;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobilePhone = 7;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 7;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes id_card = 8;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 8;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional int32 model_type = 9;
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 9;
  inline ::google::protobuf::int32 model_type() const;
  inline void set_model_type(::google::protobuf::int32 value);

  // optional bytes error_info = 10;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 10;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const void* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // optional bytes result_time = 11;
  inline bool has_result_time() const;
  inline void clear_result_time();
  static const int kResultTimeFieldNumber = 11;
  inline const ::std::string& result_time() const;
  inline void set_result_time(const ::std::string& value);
  inline void set_result_time(const char* value);
  inline void set_result_time(const void* value, size_t size);
  inline ::std::string* mutable_result_time();
  inline ::std::string* release_result_time();
  inline void set_allocated_result_time(::std::string* result_time);

  // optional int32 status = 12;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 12;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes appid = 13;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 13;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const void* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // optional bytes version = 14;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 14;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.fraud_response_monitor)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_request_json();
  inline void clear_has_request_json();
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_model_result();
  inline void clear_has_model_result();
  inline void set_has_result_json();
  inline void clear_has_result_json();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_error_info();
  inline void clear_has_error_info();
  inline void set_has_result_time();
  inline void clear_has_result_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_json_;
  ::std::string* model_name_;
  ::std::string* model_result_;
  ::std::string* result_json_;
  ::google::protobuf::int32 uniqueid_;
  ::google::protobuf::int32 model_type_;
  ::std::string* real_name_;
  ::std::string* mobilephone_;
  ::std::string* id_card_;
  ::std::string* error_info_;
  ::std::string* result_time_;
  ::std::string* appid_;
  ::std::string* version_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static fraud_response_monitor* default_instance_;
};
// -------------------------------------------------------------------

class fraud_response_monitor_ans : public ::google::protobuf::Message {
 public:
  fraud_response_monitor_ans();
  virtual ~fraud_response_monitor_ans();

  fraud_response_monitor_ans(const fraud_response_monitor_ans& from);

  inline fraud_response_monitor_ans& operator=(const fraud_response_monitor_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fraud_response_monitor_ans& default_instance();

  void Swap(fraud_response_monitor_ans* other);

  // implements Message ----------------------------------------------

  fraud_response_monitor_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fraud_response_monitor_ans& from);
  void MergeFrom(const fraud_response_monitor_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IOMS_main_frame.fraud_response_monitor fraud_rsp_monitor_list = 1;
  inline int fraud_rsp_monitor_list_size() const;
  inline void clear_fraud_rsp_monitor_list();
  static const int kFraudRspMonitorListFieldNumber = 1;
  inline const ::IOMS_main_frame::fraud_response_monitor& fraud_rsp_monitor_list(int index) const;
  inline ::IOMS_main_frame::fraud_response_monitor* mutable_fraud_rsp_monitor_list(int index);
  inline ::IOMS_main_frame::fraud_response_monitor* add_fraud_rsp_monitor_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_response_monitor >&
      fraud_rsp_monitor_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_response_monitor >*
      mutable_fraud_rsp_monitor_list();

  // optional .common.errorinfo error = 14;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 14;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.fraud_response_monitor_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_response_monitor > fraud_rsp_monitor_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static fraud_response_monitor_ans* default_instance_;
};
// -------------------------------------------------------------------

class configuration_amend_ask : public ::google::protobuf::Message {
 public:
  configuration_amend_ask();
  virtual ~configuration_amend_ask();

  configuration_amend_ask(const configuration_amend_ask& from);

  inline configuration_amend_ask& operator=(const configuration_amend_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const configuration_amend_ask& default_instance();

  void Swap(configuration_amend_ask* other);

  // implements Message ----------------------------------------------

  configuration_amend_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const configuration_amend_ask& from);
  void MergeFrom(const configuration_amend_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes configuration = 1;
  inline bool has_configuration() const;
  inline void clear_configuration();
  static const int kConfigurationFieldNumber = 1;
  inline const ::std::string& configuration() const;
  inline void set_configuration(const ::std::string& value);
  inline void set_configuration(const char* value);
  inline void set_configuration(const void* value, size_t size);
  inline ::std::string* mutable_configuration();
  inline ::std::string* release_configuration();
  inline void set_allocated_configuration(::std::string* configuration);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.configuration_amend_ask)
 private:
  inline void set_has_configuration();
  inline void clear_has_configuration();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* configuration_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static configuration_amend_ask* default_instance_;
};
// -------------------------------------------------------------------

class configuration_amend_ans : public ::google::protobuf::Message {
 public:
  configuration_amend_ans();
  virtual ~configuration_amend_ans();

  configuration_amend_ans(const configuration_amend_ans& from);

  inline configuration_amend_ans& operator=(const configuration_amend_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const configuration_amend_ans& default_instance();

  void Swap(configuration_amend_ans* other);

  // implements Message ----------------------------------------------

  configuration_amend_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const configuration_amend_ans& from);
  void MergeFrom(const configuration_amend_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:IOMS_main_frame.configuration_amend_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_AssignDesc_IOMS_5fmain_5fframe_2eproto();
  friend void protobuf_ShutdownFile_IOMS_5fmain_5fframe_2eproto();

  void InitAsDefaultInstance();
  static configuration_amend_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// credit_request_monitor_ask

// optional int32 handle_type = 1;
inline bool credit_request_monitor_ask::has_handle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_request_monitor_ask::set_has_handle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_request_monitor_ask::clear_has_handle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_request_monitor_ask::clear_handle_type() {
  handle_type_ = 0;
  clear_has_handle_type();
}
inline ::google::protobuf::int32 credit_request_monitor_ask::handle_type() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor_ask.handle_type)
  return handle_type_;
}
inline void credit_request_monitor_ask::set_handle_type(::google::protobuf::int32 value) {
  set_has_handle_type();
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_request_monitor_ask.handle_type)
}

// optional .common.common_ask_header ask_header = 2;
inline bool credit_request_monitor_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_request_monitor_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_request_monitor_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_request_monitor_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& credit_request_monitor_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* credit_request_monitor_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_request_monitor_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* credit_request_monitor_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void credit_request_monitor_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_request_monitor_ask.ask_header)
}

// -------------------------------------------------------------------

// credit_request_monitor

// optional bytes id = 1;
inline bool credit_request_monitor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_request_monitor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_request_monitor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_request_monitor::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& credit_request_monitor::id() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor.id)
  return *id_;
}
inline void credit_request_monitor::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_request_monitor.id)
}
inline void credit_request_monitor::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.credit_request_monitor.id)
}
inline void credit_request_monitor::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.credit_request_monitor.id)
}
inline ::std::string* credit_request_monitor::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_request_monitor.id)
  return id_;
}
inline ::std::string* credit_request_monitor::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_request_monitor::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_request_monitor.id)
}

// optional bytes update_time = 2;
inline bool credit_request_monitor::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_request_monitor::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_request_monitor::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_request_monitor::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& credit_request_monitor::update_time() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor.update_time)
  return *update_time_;
}
inline void credit_request_monitor::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_request_monitor.update_time)
}
inline void credit_request_monitor::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.credit_request_monitor.update_time)
}
inline void credit_request_monitor::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.credit_request_monitor.update_time)
}
inline ::std::string* credit_request_monitor::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_request_monitor.update_time)
  return update_time_;
}
inline ::std::string* credit_request_monitor::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_request_monitor::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_request_monitor.update_time)
}

// optional int32 handle_type = 3;
inline bool credit_request_monitor::has_handle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_request_monitor::set_has_handle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_request_monitor::clear_has_handle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_request_monitor::clear_handle_type() {
  handle_type_ = 0;
  clear_has_handle_type();
}
inline ::google::protobuf::int32 credit_request_monitor::handle_type() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor.handle_type)
  return handle_type_;
}
inline void credit_request_monitor::set_handle_type(::google::protobuf::int32 value) {
  set_has_handle_type();
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_request_monitor.handle_type)
}

// optional bytes json = 4;
inline bool credit_request_monitor::has_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void credit_request_monitor::set_has_json() {
  _has_bits_[0] |= 0x00000008u;
}
inline void credit_request_monitor::clear_has_json() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void credit_request_monitor::clear_json() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& credit_request_monitor::json() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor.json)
  return *json_;
}
inline void credit_request_monitor::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_request_monitor.json)
}
inline void credit_request_monitor::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.credit_request_monitor.json)
}
inline void credit_request_monitor::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.credit_request_monitor.json)
}
inline ::std::string* credit_request_monitor::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_request_monitor.json)
  return json_;
}
inline ::std::string* credit_request_monitor::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_request_monitor::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_request_monitor.json)
}

// -------------------------------------------------------------------

// credit_request_monitor_ans

// repeated .IOMS_main_frame.credit_request_monitor credit_req_monitor_list = 1;
inline int credit_request_monitor_ans::credit_req_monitor_list_size() const {
  return credit_req_monitor_list_.size();
}
inline void credit_request_monitor_ans::clear_credit_req_monitor_list() {
  credit_req_monitor_list_.Clear();
}
inline const ::IOMS_main_frame::credit_request_monitor& credit_request_monitor_ans::credit_req_monitor_list(int index) const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor_ans.credit_req_monitor_list)
  return credit_req_monitor_list_.Get(index);
}
inline ::IOMS_main_frame::credit_request_monitor* credit_request_monitor_ans::mutable_credit_req_monitor_list(int index) {
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_request_monitor_ans.credit_req_monitor_list)
  return credit_req_monitor_list_.Mutable(index);
}
inline ::IOMS_main_frame::credit_request_monitor* credit_request_monitor_ans::add_credit_req_monitor_list() {
  // @@protoc_insertion_point(field_add:IOMS_main_frame.credit_request_monitor_ans.credit_req_monitor_list)
  return credit_req_monitor_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_request_monitor >&
credit_request_monitor_ans::credit_req_monitor_list() const {
  // @@protoc_insertion_point(field_list:IOMS_main_frame.credit_request_monitor_ans.credit_req_monitor_list)
  return credit_req_monitor_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_request_monitor >*
credit_request_monitor_ans::mutable_credit_req_monitor_list() {
  // @@protoc_insertion_point(field_mutable_list:IOMS_main_frame.credit_request_monitor_ans.credit_req_monitor_list)
  return &credit_req_monitor_list_;
}

// optional .common.errorinfo error = 2;
inline bool credit_request_monitor_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_request_monitor_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_request_monitor_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_request_monitor_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_request_monitor_ans::error() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_request_monitor_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_request_monitor_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_request_monitor_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_request_monitor_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_request_monitor_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_request_monitor_ans.error)
}

// -------------------------------------------------------------------

// credit_response_monitor_ask

// optional int32 handle_type = 1;
inline bool credit_response_monitor_ask::has_handle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_response_monitor_ask::set_has_handle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_response_monitor_ask::clear_has_handle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_response_monitor_ask::clear_handle_type() {
  handle_type_ = 0;
  clear_has_handle_type();
}
inline ::google::protobuf::int32 credit_response_monitor_ask::handle_type() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor_ask.handle_type)
  return handle_type_;
}
inline void credit_response_monitor_ask::set_handle_type(::google::protobuf::int32 value) {
  set_has_handle_type();
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_response_monitor_ask.handle_type)
}

// optional .common.common_ask_header ask_header = 2;
inline bool credit_response_monitor_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_response_monitor_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_response_monitor_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_response_monitor_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& credit_response_monitor_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* credit_response_monitor_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_response_monitor_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* credit_response_monitor_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void credit_response_monitor_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_response_monitor_ask.ask_header)
}

// -------------------------------------------------------------------

// credit_response_monitor

// optional bytes id = 1;
inline bool credit_response_monitor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void credit_response_monitor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void credit_response_monitor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void credit_response_monitor::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& credit_response_monitor::id() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor.id)
  return *id_;
}
inline void credit_response_monitor::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_response_monitor.id)
}
inline void credit_response_monitor::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.credit_response_monitor.id)
}
inline void credit_response_monitor::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.credit_response_monitor.id)
}
inline ::std::string* credit_response_monitor::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_response_monitor.id)
  return id_;
}
inline ::std::string* credit_response_monitor::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_response_monitor::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_response_monitor.id)
}

// optional bytes inset_time = 2;
inline bool credit_response_monitor::has_inset_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_response_monitor::set_has_inset_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_response_monitor::clear_has_inset_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_response_monitor::clear_inset_time() {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_->clear();
  }
  clear_has_inset_time();
}
inline const ::std::string& credit_response_monitor::inset_time() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor.inset_time)
  return *inset_time_;
}
inline void credit_response_monitor::set_inset_time(const ::std::string& value) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_response_monitor.inset_time)
}
inline void credit_response_monitor::set_inset_time(const char* value) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.credit_response_monitor.inset_time)
}
inline void credit_response_monitor::set_inset_time(const void* value, size_t size) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.credit_response_monitor.inset_time)
}
inline ::std::string* credit_response_monitor::mutable_inset_time() {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_response_monitor.inset_time)
  return inset_time_;
}
inline ::std::string* credit_response_monitor::release_inset_time() {
  clear_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inset_time_;
    inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_response_monitor::set_allocated_inset_time(::std::string* inset_time) {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inset_time_;
  }
  if (inset_time) {
    set_has_inset_time();
    inset_time_ = inset_time;
  } else {
    clear_has_inset_time();
    inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_response_monitor.inset_time)
}

// optional bytes json = 3;
inline bool credit_response_monitor::has_json() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void credit_response_monitor::set_has_json() {
  _has_bits_[0] |= 0x00000004u;
}
inline void credit_response_monitor::clear_has_json() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void credit_response_monitor::clear_json() {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& credit_response_monitor::json() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor.json)
  return *json_;
}
inline void credit_response_monitor::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.credit_response_monitor.json)
}
inline void credit_response_monitor::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.credit_response_monitor.json)
}
inline void credit_response_monitor::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.credit_response_monitor.json)
}
inline ::std::string* credit_response_monitor::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_response_monitor.json)
  return json_;
}
inline ::std::string* credit_response_monitor::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void credit_response_monitor::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_response_monitor.json)
}

// -------------------------------------------------------------------

// credit_response_monitor_ans

// repeated .IOMS_main_frame.credit_response_monitor credit_rsp_monitor_list = 1;
inline int credit_response_monitor_ans::credit_rsp_monitor_list_size() const {
  return credit_rsp_monitor_list_.size();
}
inline void credit_response_monitor_ans::clear_credit_rsp_monitor_list() {
  credit_rsp_monitor_list_.Clear();
}
inline const ::IOMS_main_frame::credit_response_monitor& credit_response_monitor_ans::credit_rsp_monitor_list(int index) const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor_ans.credit_rsp_monitor_list)
  return credit_rsp_monitor_list_.Get(index);
}
inline ::IOMS_main_frame::credit_response_monitor* credit_response_monitor_ans::mutable_credit_rsp_monitor_list(int index) {
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_response_monitor_ans.credit_rsp_monitor_list)
  return credit_rsp_monitor_list_.Mutable(index);
}
inline ::IOMS_main_frame::credit_response_monitor* credit_response_monitor_ans::add_credit_rsp_monitor_list() {
  // @@protoc_insertion_point(field_add:IOMS_main_frame.credit_response_monitor_ans.credit_rsp_monitor_list)
  return credit_rsp_monitor_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_response_monitor >&
credit_response_monitor_ans::credit_rsp_monitor_list() const {
  // @@protoc_insertion_point(field_list:IOMS_main_frame.credit_response_monitor_ans.credit_rsp_monitor_list)
  return credit_rsp_monitor_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::credit_response_monitor >*
credit_response_monitor_ans::mutable_credit_rsp_monitor_list() {
  // @@protoc_insertion_point(field_mutable_list:IOMS_main_frame.credit_response_monitor_ans.credit_rsp_monitor_list)
  return &credit_rsp_monitor_list_;
}

// optional .common.errorinfo error = 2;
inline bool credit_response_monitor_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void credit_response_monitor_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void credit_response_monitor_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void credit_response_monitor_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& credit_response_monitor_ans::error() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.credit_response_monitor_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* credit_response_monitor_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.credit_response_monitor_ans.error)
  return error_;
}
inline ::common::errorinfo* credit_response_monitor_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void credit_response_monitor_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.credit_response_monitor_ans.error)
}

// -------------------------------------------------------------------

// fraud_request_monitor_ask

// optional .common.common_ask_header ask_header = 1;
inline bool fraud_request_monitor_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fraud_request_monitor_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fraud_request_monitor_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fraud_request_monitor_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& fraud_request_monitor_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* fraud_request_monitor_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_request_monitor_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* fraud_request_monitor_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void fraud_request_monitor_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_request_monitor_ask.ask_header)
}

// -------------------------------------------------------------------

// fraud_request_monitor

// optional int32 uniqueid = 1;
inline bool fraud_request_monitor::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fraud_request_monitor::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fraud_request_monitor::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fraud_request_monitor::clear_uniqueid() {
  uniqueid_ = 0;
  clear_has_uniqueid();
}
inline ::google::protobuf::int32 fraud_request_monitor::uniqueid() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor.uniqueid)
  return uniqueid_;
}
inline void fraud_request_monitor::set_uniqueid(::google::protobuf::int32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_request_monitor.uniqueid)
}

// optional bytes request_json = 2;
inline bool fraud_request_monitor::has_request_json() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fraud_request_monitor::set_has_request_json() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fraud_request_monitor::clear_has_request_json() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fraud_request_monitor::clear_request_json() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_->clear();
  }
  clear_has_request_json();
}
inline const ::std::string& fraud_request_monitor::request_json() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor.request_json)
  return *request_json_;
}
inline void fraud_request_monitor::set_request_json(const ::std::string& value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_request_monitor.request_json)
}
inline void fraud_request_monitor::set_request_json(const char* value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_request_monitor.request_json)
}
inline void fraud_request_monitor::set_request_json(const void* value, size_t size) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_request_monitor.request_json)
}
inline ::std::string* fraud_request_monitor::mutable_request_json() {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_request_monitor.request_json)
  return request_json_;
}
inline ::std::string* fraud_request_monitor::release_request_json() {
  clear_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_json_;
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_request_monitor::set_allocated_request_json(::std::string* request_json) {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (request_json) {
    set_has_request_json();
    request_json_ = request_json;
  } else {
    clear_has_request_json();
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_request_monitor.request_json)
}

// optional int32 model_type = 3;
inline bool fraud_request_monitor::has_model_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fraud_request_monitor::set_has_model_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fraud_request_monitor::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fraud_request_monitor::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::google::protobuf::int32 fraud_request_monitor::model_type() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor.model_type)
  return model_type_;
}
inline void fraud_request_monitor::set_model_type(::google::protobuf::int32 value) {
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_request_monitor.model_type)
}

// optional bytes inset_time = 4;
inline bool fraud_request_monitor::has_inset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fraud_request_monitor::set_has_inset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fraud_request_monitor::clear_has_inset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fraud_request_monitor::clear_inset_time() {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_->clear();
  }
  clear_has_inset_time();
}
inline const ::std::string& fraud_request_monitor::inset_time() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor.inset_time)
  return *inset_time_;
}
inline void fraud_request_monitor::set_inset_time(const ::std::string& value) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_request_monitor.inset_time)
}
inline void fraud_request_monitor::set_inset_time(const char* value) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_request_monitor.inset_time)
}
inline void fraud_request_monitor::set_inset_time(const void* value, size_t size) {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  inset_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_request_monitor.inset_time)
}
inline ::std::string* fraud_request_monitor::mutable_inset_time() {
  set_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inset_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_request_monitor.inset_time)
  return inset_time_;
}
inline ::std::string* fraud_request_monitor::release_inset_time() {
  clear_has_inset_time();
  if (inset_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inset_time_;
    inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_request_monitor::set_allocated_inset_time(::std::string* inset_time) {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inset_time_;
  }
  if (inset_time) {
    set_has_inset_time();
    inset_time_ = inset_time;
  } else {
    clear_has_inset_time();
    inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_request_monitor.inset_time)
}

// optional int32 status = 5;
inline bool fraud_request_monitor::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fraud_request_monitor::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fraud_request_monitor::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fraud_request_monitor::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 fraud_request_monitor::status() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor.status)
  return status_;
}
inline void fraud_request_monitor::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_request_monitor.status)
}

// -------------------------------------------------------------------

// fraud_request_monitor_ans

// repeated .IOMS_main_frame.fraud_request_monitor fraud_req_monitor_list = 1;
inline int fraud_request_monitor_ans::fraud_req_monitor_list_size() const {
  return fraud_req_monitor_list_.size();
}
inline void fraud_request_monitor_ans::clear_fraud_req_monitor_list() {
  fraud_req_monitor_list_.Clear();
}
inline const ::IOMS_main_frame::fraud_request_monitor& fraud_request_monitor_ans::fraud_req_monitor_list(int index) const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor_ans.fraud_req_monitor_list)
  return fraud_req_monitor_list_.Get(index);
}
inline ::IOMS_main_frame::fraud_request_monitor* fraud_request_monitor_ans::mutable_fraud_req_monitor_list(int index) {
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_request_monitor_ans.fraud_req_monitor_list)
  return fraud_req_monitor_list_.Mutable(index);
}
inline ::IOMS_main_frame::fraud_request_monitor* fraud_request_monitor_ans::add_fraud_req_monitor_list() {
  // @@protoc_insertion_point(field_add:IOMS_main_frame.fraud_request_monitor_ans.fraud_req_monitor_list)
  return fraud_req_monitor_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_request_monitor >&
fraud_request_monitor_ans::fraud_req_monitor_list() const {
  // @@protoc_insertion_point(field_list:IOMS_main_frame.fraud_request_monitor_ans.fraud_req_monitor_list)
  return fraud_req_monitor_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_request_monitor >*
fraud_request_monitor_ans::mutable_fraud_req_monitor_list() {
  // @@protoc_insertion_point(field_mutable_list:IOMS_main_frame.fraud_request_monitor_ans.fraud_req_monitor_list)
  return &fraud_req_monitor_list_;
}

// optional .common.errorinfo error = 2;
inline bool fraud_request_monitor_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fraud_request_monitor_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fraud_request_monitor_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fraud_request_monitor_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& fraud_request_monitor_ans::error() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_request_monitor_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* fraud_request_monitor_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_request_monitor_ans.error)
  return error_;
}
inline ::common::errorinfo* fraud_request_monitor_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void fraud_request_monitor_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_request_monitor_ans.error)
}

// -------------------------------------------------------------------

// fraud_response_monitor_ask

// optional .common.common_ask_header ask_header = 1;
inline bool fraud_response_monitor_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fraud_response_monitor_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fraud_response_monitor_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fraud_response_monitor_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& fraud_response_monitor_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* fraud_response_monitor_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* fraud_response_monitor_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void fraud_response_monitor_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor_ask.ask_header)
}

// -------------------------------------------------------------------

// fraud_response_monitor

// optional int32 uniqueid = 1;
inline bool fraud_response_monitor::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fraud_response_monitor::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fraud_response_monitor::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fraud_response_monitor::clear_uniqueid() {
  uniqueid_ = 0;
  clear_has_uniqueid();
}
inline ::google::protobuf::int32 fraud_response_monitor::uniqueid() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.uniqueid)
  return uniqueid_;
}
inline void fraud_response_monitor::set_uniqueid(::google::protobuf::int32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.uniqueid)
}

// optional bytes request_json = 2;
inline bool fraud_response_monitor::has_request_json() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fraud_response_monitor::set_has_request_json() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fraud_response_monitor::clear_has_request_json() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fraud_response_monitor::clear_request_json() {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_->clear();
  }
  clear_has_request_json();
}
inline const ::std::string& fraud_response_monitor::request_json() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.request_json)
  return *request_json_;
}
inline void fraud_response_monitor::set_request_json(const ::std::string& value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.request_json)
}
inline void fraud_response_monitor::set_request_json(const char* value) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.request_json)
}
inline void fraud_response_monitor::set_request_json(const void* value, size_t size) {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  request_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.request_json)
}
inline ::std::string* fraud_response_monitor::mutable_request_json() {
  set_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.request_json)
  return request_json_;
}
inline ::std::string* fraud_response_monitor::release_request_json() {
  clear_has_request_json();
  if (request_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_json_;
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_request_json(::std::string* request_json) {
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (request_json) {
    set_has_request_json();
    request_json_ = request_json;
  } else {
    clear_has_request_json();
    request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.request_json)
}

// optional bytes model_name = 3;
inline bool fraud_response_monitor::has_model_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fraud_response_monitor::set_has_model_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fraud_response_monitor::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fraud_response_monitor::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& fraud_response_monitor::model_name() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.model_name)
  return *model_name_;
}
inline void fraud_response_monitor::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.model_name)
}
inline void fraud_response_monitor::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.model_name)
}
inline void fraud_response_monitor::set_model_name(const void* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.model_name)
}
inline ::std::string* fraud_response_monitor::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.model_name)
  return model_name_;
}
inline ::std::string* fraud_response_monitor::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.model_name)
}

// optional bytes model_result = 4;
inline bool fraud_response_monitor::has_model_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fraud_response_monitor::set_has_model_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fraud_response_monitor::clear_has_model_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fraud_response_monitor::clear_model_result() {
  if (model_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_result_->clear();
  }
  clear_has_model_result();
}
inline const ::std::string& fraud_response_monitor::model_result() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.model_result)
  return *model_result_;
}
inline void fraud_response_monitor::set_model_result(const ::std::string& value) {
  set_has_model_result();
  if (model_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_result_ = new ::std::string;
  }
  model_result_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.model_result)
}
inline void fraud_response_monitor::set_model_result(const char* value) {
  set_has_model_result();
  if (model_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_result_ = new ::std::string;
  }
  model_result_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.model_result)
}
inline void fraud_response_monitor::set_model_result(const void* value, size_t size) {
  set_has_model_result();
  if (model_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_result_ = new ::std::string;
  }
  model_result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.model_result)
}
inline ::std::string* fraud_response_monitor::mutable_model_result() {
  set_has_model_result();
  if (model_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.model_result)
  return model_result_;
}
inline ::std::string* fraud_response_monitor::release_model_result() {
  clear_has_model_result();
  if (model_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_result_;
    model_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_model_result(::std::string* model_result) {
  if (model_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_result_;
  }
  if (model_result) {
    set_has_model_result();
    model_result_ = model_result;
  } else {
    clear_has_model_result();
    model_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.model_result)
}

// optional bytes result_json = 5;
inline bool fraud_response_monitor::has_result_json() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fraud_response_monitor::set_has_result_json() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fraud_response_monitor::clear_has_result_json() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fraud_response_monitor::clear_result_json() {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_->clear();
  }
  clear_has_result_json();
}
inline const ::std::string& fraud_response_monitor::result_json() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.result_json)
  return *result_json_;
}
inline void fraud_response_monitor::set_result_json(const ::std::string& value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.result_json)
}
inline void fraud_response_monitor::set_result_json(const char* value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.result_json)
}
inline void fraud_response_monitor::set_result_json(const void* value, size_t size) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.result_json)
}
inline ::std::string* fraud_response_monitor::mutable_result_json() {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.result_json)
  return result_json_;
}
inline ::std::string* fraud_response_monitor::release_result_json() {
  clear_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_json_;
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_result_json(::std::string* result_json) {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (result_json) {
    set_has_result_json();
    result_json_ = result_json;
  } else {
    clear_has_result_json();
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.result_json)
}

// optional bytes real_name = 6;
inline bool fraud_response_monitor::has_real_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fraud_response_monitor::set_has_real_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fraud_response_monitor::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fraud_response_monitor::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& fraud_response_monitor::real_name() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.real_name)
  return *real_name_;
}
inline void fraud_response_monitor::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.real_name)
}
inline void fraud_response_monitor::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.real_name)
}
inline void fraud_response_monitor::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.real_name)
}
inline ::std::string* fraud_response_monitor::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.real_name)
  return real_name_;
}
inline ::std::string* fraud_response_monitor::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.real_name)
}

// optional bytes mobilePhone = 7;
inline bool fraud_response_monitor::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fraud_response_monitor::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fraud_response_monitor::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fraud_response_monitor::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& fraud_response_monitor::mobilephone() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.mobilePhone)
  return *mobilephone_;
}
inline void fraud_response_monitor::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.mobilePhone)
}
inline void fraud_response_monitor::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.mobilePhone)
}
inline void fraud_response_monitor::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.mobilePhone)
}
inline ::std::string* fraud_response_monitor::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.mobilePhone)
  return mobilephone_;
}
inline ::std::string* fraud_response_monitor::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.mobilePhone)
}

// optional bytes id_card = 8;
inline bool fraud_response_monitor::has_id_card() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fraud_response_monitor::set_has_id_card() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fraud_response_monitor::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fraud_response_monitor::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& fraud_response_monitor::id_card() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.id_card)
  return *id_card_;
}
inline void fraud_response_monitor::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.id_card)
}
inline void fraud_response_monitor::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.id_card)
}
inline void fraud_response_monitor::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.id_card)
}
inline ::std::string* fraud_response_monitor::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.id_card)
  return id_card_;
}
inline ::std::string* fraud_response_monitor::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.id_card)
}

// optional int32 model_type = 9;
inline bool fraud_response_monitor::has_model_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void fraud_response_monitor::set_has_model_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void fraud_response_monitor::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void fraud_response_monitor::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::google::protobuf::int32 fraud_response_monitor::model_type() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.model_type)
  return model_type_;
}
inline void fraud_response_monitor::set_model_type(::google::protobuf::int32 value) {
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.model_type)
}

// optional bytes error_info = 10;
inline bool fraud_response_monitor::has_error_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void fraud_response_monitor::set_has_error_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void fraud_response_monitor::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void fraud_response_monitor::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& fraud_response_monitor::error_info() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.error_info)
  return *error_info_;
}
inline void fraud_response_monitor::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.error_info)
}
inline void fraud_response_monitor::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.error_info)
}
inline void fraud_response_monitor::set_error_info(const void* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.error_info)
}
inline ::std::string* fraud_response_monitor::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.error_info)
  return error_info_;
}
inline ::std::string* fraud_response_monitor::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.error_info)
}

// optional bytes result_time = 11;
inline bool fraud_response_monitor::has_result_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void fraud_response_monitor::set_has_result_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void fraud_response_monitor::clear_has_result_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void fraud_response_monitor::clear_result_time() {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_->clear();
  }
  clear_has_result_time();
}
inline const ::std::string& fraud_response_monitor::result_time() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.result_time)
  return *result_time_;
}
inline void fraud_response_monitor::set_result_time(const ::std::string& value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.result_time)
}
inline void fraud_response_monitor::set_result_time(const char* value) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.result_time)
}
inline void fraud_response_monitor::set_result_time(const void* value, size_t size) {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  result_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.result_time)
}
inline ::std::string* fraud_response_monitor::mutable_result_time() {
  set_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.result_time)
  return result_time_;
}
inline ::std::string* fraud_response_monitor::release_result_time() {
  clear_has_result_time();
  if (result_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_time_;
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_result_time(::std::string* result_time) {
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (result_time) {
    set_has_result_time();
    result_time_ = result_time;
  } else {
    clear_has_result_time();
    result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.result_time)
}

// optional int32 status = 12;
inline bool fraud_response_monitor::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void fraud_response_monitor::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void fraud_response_monitor::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void fraud_response_monitor::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 fraud_response_monitor::status() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.status)
  return status_;
}
inline void fraud_response_monitor::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.status)
}

// optional bytes appid = 13;
inline bool fraud_response_monitor::has_appid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void fraud_response_monitor::set_has_appid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void fraud_response_monitor::clear_has_appid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void fraud_response_monitor::clear_appid() {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& fraud_response_monitor::appid() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.appid)
  return *appid_;
}
inline void fraud_response_monitor::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.appid)
}
inline void fraud_response_monitor::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.appid)
}
inline void fraud_response_monitor::set_appid(const void* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.appid)
}
inline ::std::string* fraud_response_monitor::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.appid)
  return appid_;
}
inline ::std::string* fraud_response_monitor::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.appid)
}

// optional bytes version = 14;
inline bool fraud_response_monitor::has_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void fraud_response_monitor::set_has_version() {
  _has_bits_[0] |= 0x00002000u;
}
inline void fraud_response_monitor::clear_has_version() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void fraud_response_monitor::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& fraud_response_monitor::version() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor.version)
  return *version_;
}
inline void fraud_response_monitor::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.fraud_response_monitor.version)
}
inline void fraud_response_monitor::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.fraud_response_monitor.version)
}
inline void fraud_response_monitor::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.fraud_response_monitor.version)
}
inline ::std::string* fraud_response_monitor::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor.version)
  return version_;
}
inline ::std::string* fraud_response_monitor::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void fraud_response_monitor::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor.version)
}

// -------------------------------------------------------------------

// fraud_response_monitor_ans

// repeated .IOMS_main_frame.fraud_response_monitor fraud_rsp_monitor_list = 1;
inline int fraud_response_monitor_ans::fraud_rsp_monitor_list_size() const {
  return fraud_rsp_monitor_list_.size();
}
inline void fraud_response_monitor_ans::clear_fraud_rsp_monitor_list() {
  fraud_rsp_monitor_list_.Clear();
}
inline const ::IOMS_main_frame::fraud_response_monitor& fraud_response_monitor_ans::fraud_rsp_monitor_list(int index) const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor_ans.fraud_rsp_monitor_list)
  return fraud_rsp_monitor_list_.Get(index);
}
inline ::IOMS_main_frame::fraud_response_monitor* fraud_response_monitor_ans::mutable_fraud_rsp_monitor_list(int index) {
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor_ans.fraud_rsp_monitor_list)
  return fraud_rsp_monitor_list_.Mutable(index);
}
inline ::IOMS_main_frame::fraud_response_monitor* fraud_response_monitor_ans::add_fraud_rsp_monitor_list() {
  // @@protoc_insertion_point(field_add:IOMS_main_frame.fraud_response_monitor_ans.fraud_rsp_monitor_list)
  return fraud_rsp_monitor_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_response_monitor >&
fraud_response_monitor_ans::fraud_rsp_monitor_list() const {
  // @@protoc_insertion_point(field_list:IOMS_main_frame.fraud_response_monitor_ans.fraud_rsp_monitor_list)
  return fraud_rsp_monitor_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IOMS_main_frame::fraud_response_monitor >*
fraud_response_monitor_ans::mutable_fraud_rsp_monitor_list() {
  // @@protoc_insertion_point(field_mutable_list:IOMS_main_frame.fraud_response_monitor_ans.fraud_rsp_monitor_list)
  return &fraud_rsp_monitor_list_;
}

// optional .common.errorinfo error = 14;
inline bool fraud_response_monitor_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fraud_response_monitor_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fraud_response_monitor_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fraud_response_monitor_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& fraud_response_monitor_ans::error() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.fraud_response_monitor_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* fraud_response_monitor_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.fraud_response_monitor_ans.error)
  return error_;
}
inline ::common::errorinfo* fraud_response_monitor_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void fraud_response_monitor_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.fraud_response_monitor_ans.error)
}

// -------------------------------------------------------------------

// configuration_amend_ask

// optional bytes configuration = 1;
inline bool configuration_amend_ask::has_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void configuration_amend_ask::set_has_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void configuration_amend_ask::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void configuration_amend_ask::clear_configuration() {
  if (configuration_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configuration_->clear();
  }
  clear_has_configuration();
}
inline const ::std::string& configuration_amend_ask::configuration() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.configuration_amend_ask.configuration)
  return *configuration_;
}
inline void configuration_amend_ask::set_configuration(const ::std::string& value) {
  set_has_configuration();
  if (configuration_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configuration_ = new ::std::string;
  }
  configuration_->assign(value);
  // @@protoc_insertion_point(field_set:IOMS_main_frame.configuration_amend_ask.configuration)
}
inline void configuration_amend_ask::set_configuration(const char* value) {
  set_has_configuration();
  if (configuration_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configuration_ = new ::std::string;
  }
  configuration_->assign(value);
  // @@protoc_insertion_point(field_set_char:IOMS_main_frame.configuration_amend_ask.configuration)
}
inline void configuration_amend_ask::set_configuration(const void* value, size_t size) {
  set_has_configuration();
  if (configuration_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configuration_ = new ::std::string;
  }
  configuration_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IOMS_main_frame.configuration_amend_ask.configuration)
}
inline ::std::string* configuration_amend_ask::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configuration_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.configuration_amend_ask.configuration)
  return configuration_;
}
inline ::std::string* configuration_amend_ask::release_configuration() {
  clear_has_configuration();
  if (configuration_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = configuration_;
    configuration_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void configuration_amend_ask::set_allocated_configuration(::std::string* configuration) {
  if (configuration_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configuration_;
  }
  if (configuration) {
    set_has_configuration();
    configuration_ = configuration;
  } else {
    clear_has_configuration();
    configuration_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.configuration_amend_ask.configuration)
}

// optional .common.common_ask_header ask_header = 2;
inline bool configuration_amend_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void configuration_amend_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void configuration_amend_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void configuration_amend_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& configuration_amend_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.configuration_amend_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* configuration_amend_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.configuration_amend_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* configuration_amend_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void configuration_amend_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.configuration_amend_ask.ask_header)
}

// -------------------------------------------------------------------

// configuration_amend_ans

// optional .common.result_info result = 1;
inline bool configuration_amend_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void configuration_amend_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void configuration_amend_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void configuration_amend_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& configuration_amend_ans::result() const {
  // @@protoc_insertion_point(field_get:IOMS_main_frame.configuration_amend_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* configuration_amend_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:IOMS_main_frame.configuration_amend_ans.result)
  return result_;
}
inline ::common::result_info* configuration_amend_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void configuration_amend_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:IOMS_main_frame.configuration_amend_ans.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IOMS_main_frame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IOMS_5fmain_5fframe_2eproto__INCLUDED
