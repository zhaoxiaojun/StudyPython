// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QDP_IMP.proto

#ifndef PROTOBUF_QDP_5fIMP_2eproto__INCLUDED
#define PROTOBUF_QDP_5fIMP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace QDP_IMP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QDP_5fIMP_2eproto();
void protobuf_AssignDesc_QDP_5fIMP_2eproto();
void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

class user_basic_info;
class blacklist_info;
class reptile_data_statistics_info;
class reptile_data_detail_info;
class reptile_basic_info;
class reptile_monitoring_ask;
class reptile_monitoring_ans;
class reptile_monitoring_manage_ask;
class reptile_monitoring_manage_ans;
class reptile_data_statistics_ask;
class reptile_data_statistics_ans;
class reptile_data_detail_ask;
class reptile_data_detail_ans;
class reptile_conf_info;
class reptile_conf_query_ask;
class reptile_conf_query_ans;
class reptile_conf_edit_ask;
class reptile_conf_edit_ans;
class blacklist_statistics_ask;
class blacklis_statistics_info;
class blacklist_statistics_ans;
class data_sources_info;
class data_sources_ask;
class data_sources_ans;
class blacklist_ask;
class blacklist_ans;

// ===================================================================

class user_basic_info : public ::google::protobuf::Message {
 public:
  user_basic_info();
  virtual ~user_basic_info();

  user_basic_info(const user_basic_info& from);

  inline user_basic_info& operator=(const user_basic_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_basic_info& default_instance();

  void Swap(user_basic_info* other);

  // implements Message ----------------------------------------------

  user_basic_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_basic_info& from);
  void MergeFrom(const user_basic_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes real_name = 2;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 2;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional int32 age = 4;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 4;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional .common.sex sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::common::sex sex() const;
  inline void set_sex(::common::sex value);

  // optional .common.user_id_type id_type = 6;
  inline bool has_id_type() const;
  inline void clear_id_type();
  static const int kIdTypeFieldNumber = 6;
  inline ::common::user_id_type id_type() const;
  inline void set_id_type(::common::user_id_type value);

  // optional bytes id_no = 7;
  inline bool has_id_no() const;
  inline void clear_id_no();
  static const int kIdNoFieldNumber = 7;
  inline const ::std::string& id_no() const;
  inline void set_id_no(const ::std::string& value);
  inline void set_id_no(const char* value);
  inline void set_id_no(const void* value, size_t size);
  inline ::std::string* mutable_id_no();
  inline ::std::string* release_id_no();
  inline void set_allocated_id_no(::std::string* id_no);

  // optional bytes id_addr = 8;
  inline bool has_id_addr() const;
  inline void clear_id_addr();
  static const int kIdAddrFieldNumber = 8;
  inline const ::std::string& id_addr() const;
  inline void set_id_addr(const ::std::string& value);
  inline void set_id_addr(const char* value);
  inline void set_id_addr(const void* value, size_t size);
  inline ::std::string* mutable_id_addr();
  inline ::std::string* release_id_addr();
  inline void set_allocated_id_addr(::std::string* id_addr);

  // optional bytes email = 9;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 9;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const void* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional bytes house_addr = 10;
  inline bool has_house_addr() const;
  inline void clear_house_addr();
  static const int kHouseAddrFieldNumber = 10;
  inline const ::std::string& house_addr() const;
  inline void set_house_addr(const ::std::string& value);
  inline void set_house_addr(const char* value);
  inline void set_house_addr(const void* value, size_t size);
  inline ::std::string* mutable_house_addr();
  inline ::std::string* release_house_addr();
  inline void set_allocated_house_addr(::std::string* house_addr);

  // optional bytes company_name = 11;
  inline bool has_company_name() const;
  inline void clear_company_name();
  static const int kCompanyNameFieldNumber = 11;
  inline const ::std::string& company_name() const;
  inline void set_company_name(const ::std::string& value);
  inline void set_company_name(const char* value);
  inline void set_company_name(const void* value, size_t size);
  inline ::std::string* mutable_company_name();
  inline ::std::string* release_company_name();
  inline void set_allocated_company_name(::std::string* company_name);

  // optional bytes company_addr = 12;
  inline bool has_company_addr() const;
  inline void clear_company_addr();
  static const int kCompanyAddrFieldNumber = 12;
  inline const ::std::string& company_addr() const;
  inline void set_company_addr(const ::std::string& value);
  inline void set_company_addr(const char* value);
  inline void set_company_addr(const void* value, size_t size);
  inline ::std::string* mutable_company_addr();
  inline ::std::string* release_company_addr();
  inline void set_allocated_company_addr(::std::string* company_addr);

  // optional bytes company_tel = 13;
  inline bool has_company_tel() const;
  inline void clear_company_tel();
  static const int kCompanyTelFieldNumber = 13;
  inline const ::std::string& company_tel() const;
  inline void set_company_tel(const ::std::string& value);
  inline void set_company_tel(const char* value);
  inline void set_company_tel(const void* value, size_t size);
  inline ::std::string* mutable_company_tel();
  inline ::std::string* release_company_tel();
  inline void set_allocated_company_tel(::std::string* company_tel);

  // repeated .common.relation_contact contact_list = 14;
  inline int contact_list_size() const;
  inline void clear_contact_list();
  static const int kContactListFieldNumber = 14;
  inline const ::common::relation_contact& contact_list(int index) const;
  inline ::common::relation_contact* mutable_contact_list(int index);
  inline ::common::relation_contact* add_contact_list();
  inline const ::google::protobuf::RepeatedPtrField< ::common::relation_contact >&
      contact_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::common::relation_contact >*
      mutable_contact_list();

  // @@protoc_insertion_point(class_scope:QDP_IMP.user_basic_info)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_id_type();
  inline void clear_has_id_type();
  inline void set_has_id_no();
  inline void clear_has_id_no();
  inline void set_has_id_addr();
  inline void clear_has_id_addr();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_house_addr();
  inline void clear_has_house_addr();
  inline void set_has_company_name();
  inline void clear_has_company_name();
  inline void set_has_company_addr();
  inline void clear_has_company_addr();
  inline void set_has_company_tel();
  inline void clear_has_company_tel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::google::protobuf::int32 age_;
  int sex_;
  ::std::string* id_no_;
  ::std::string* id_addr_;
  ::std::string* email_;
  ::std::string* house_addr_;
  ::std::string* company_name_;
  ::std::string* company_addr_;
  ::std::string* company_tel_;
  ::google::protobuf::RepeatedPtrField< ::common::relation_contact > contact_list_;
  int id_type_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static user_basic_info* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_info : public ::google::protobuf::Message {
 public:
  blacklist_info();
  virtual ~blacklist_info();

  blacklist_info(const blacklist_info& from);

  inline blacklist_info& operator=(const blacklist_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_info& default_instance();

  void Swap(blacklist_info* other);

  // implements Message ----------------------------------------------

  blacklist_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_info& from);
  void MergeFrom(const blacklist_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QDP_IMP.user_basic_info user_basic_info = 1;
  inline bool has_user_basic_info() const;
  inline void clear_user_basic_info();
  static const int kUserBasicInfoFieldNumber = 1;
  inline const ::QDP_IMP::user_basic_info& user_basic_info() const;
  inline ::QDP_IMP::user_basic_info* mutable_user_basic_info();
  inline ::QDP_IMP::user_basic_info* release_user_basic_info();
  inline void set_allocated_user_basic_info(::QDP_IMP::user_basic_info* user_basic_info);

  // optional double borrow_total = 2;
  inline bool has_borrow_total() const;
  inline void clear_borrow_total();
  static const int kBorrowTotalFieldNumber = 2;
  inline double borrow_total() const;
  inline void set_borrow_total(double value);

  // optional double has_also_total = 3;
  inline bool has_has_also_total() const;
  inline void clear_has_also_total();
  static const int kHasAlsoTotalFieldNumber = 3;
  inline double has_also_total() const;
  inline void set_has_also_total(double value);

  // optional int32 overdue_count = 4;
  inline bool has_overdue_count() const;
  inline void clear_overdue_count();
  static const int kOverdueCountFieldNumber = 4;
  inline ::google::protobuf::int32 overdue_count() const;
  inline void set_overdue_count(::google::protobuf::int32 value);

  // optional double overdue_total = 5;
  inline bool has_overdue_total() const;
  inline void clear_overdue_total();
  static const int kOverdueTotalFieldNumber = 5;
  inline double overdue_total() const;
  inline void set_overdue_total(double value);

  // optional int32 overdue_day = 6;
  inline bool has_overdue_day() const;
  inline void clear_overdue_day();
  static const int kOverdueDayFieldNumber = 6;
  inline ::google::protobuf::int32 overdue_day() const;
  inline void set_overdue_day(::google::protobuf::int32 value);

  // optional bytes repayment_state = 7;
  inline bool has_repayment_state() const;
  inline void clear_repayment_state();
  static const int kRepaymentStateFieldNumber = 7;
  inline const ::std::string& repayment_state() const;
  inline void set_repayment_state(const ::std::string& value);
  inline void set_repayment_state(const char* value);
  inline void set_repayment_state(const void* value, size_t size);
  inline ::std::string* mutable_repayment_state();
  inline ::std::string* release_repayment_state();
  inline void set_allocated_repayment_state(::std::string* repayment_state);

  // optional double also_late_fee = 8;
  inline bool has_also_late_fee() const;
  inline void clear_also_late_fee();
  static const int kAlsoLateFeeFieldNumber = 8;
  inline double also_late_fee() const;
  inline void set_also_late_fee(double value);

  // optional double also_urgent_fee = 9;
  inline bool has_also_urgent_fee() const;
  inline void clear_also_urgent_fee();
  static const int kAlsoUrgentFeeFieldNumber = 9;
  inline double also_urgent_fee() const;
  inline void set_also_urgent_fee(double value);

  // optional bytes cheat_severity = 10;
  inline bool has_cheat_severity() const;
  inline void clear_cheat_severity();
  static const int kCheatSeverityFieldNumber = 10;
  inline const ::std::string& cheat_severity() const;
  inline void set_cheat_severity(const ::std::string& value);
  inline void set_cheat_severity(const char* value);
  inline void set_cheat_severity(const void* value, size_t size);
  inline ::std::string* mutable_cheat_severity();
  inline ::std::string* release_cheat_severity();
  inline void set_allocated_cheat_severity(::std::string* cheat_severity);

  // optional bytes data_sources = 11;
  inline bool has_data_sources() const;
  inline void clear_data_sources();
  static const int kDataSourcesFieldNumber = 11;
  inline const ::std::string& data_sources() const;
  inline void set_data_sources(const ::std::string& value);
  inline void set_data_sources(const char* value);
  inline void set_data_sources(const void* value, size_t size);
  inline ::std::string* mutable_data_sources();
  inline ::std::string* release_data_sources();
  inline void set_allocated_data_sources(::std::string* data_sources);

  // optional bytes data_url = 12;
  inline bool has_data_url() const;
  inline void clear_data_url();
  static const int kDataUrlFieldNumber = 12;
  inline const ::std::string& data_url() const;
  inline void set_data_url(const ::std::string& value);
  inline void set_data_url(const char* value);
  inline void set_data_url(const void* value, size_t size);
  inline ::std::string* mutable_data_url();
  inline ::std::string* release_data_url();
  inline void set_allocated_data_url(::std::string* data_url);

  // optional bytes record_date = 13;
  inline bool has_record_date() const;
  inline void clear_record_date();
  static const int kRecordDateFieldNumber = 13;
  inline const ::std::string& record_date() const;
  inline void set_record_date(const ::std::string& value);
  inline void set_record_date(const char* value);
  inline void set_record_date(const void* value, size_t size);
  inline ::std::string* mutable_record_date();
  inline ::std::string* release_record_date();
  inline void set_allocated_record_date(::std::string* record_date);

  // @@protoc_insertion_point(class_scope:QDP_IMP.blacklist_info)
 private:
  inline void set_has_user_basic_info();
  inline void clear_has_user_basic_info();
  inline void set_has_borrow_total();
  inline void clear_has_borrow_total();
  inline void set_has_has_also_total();
  inline void clear_has_has_also_total();
  inline void set_has_overdue_count();
  inline void clear_has_overdue_count();
  inline void set_has_overdue_total();
  inline void clear_has_overdue_total();
  inline void set_has_overdue_day();
  inline void clear_has_overdue_day();
  inline void set_has_repayment_state();
  inline void clear_has_repayment_state();
  inline void set_has_also_late_fee();
  inline void clear_has_also_late_fee();
  inline void set_has_also_urgent_fee();
  inline void clear_has_also_urgent_fee();
  inline void set_has_cheat_severity();
  inline void clear_has_cheat_severity();
  inline void set_has_data_sources();
  inline void clear_has_data_sources();
  inline void set_has_data_url();
  inline void clear_has_data_url();
  inline void set_has_record_date();
  inline void clear_has_record_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QDP_IMP::user_basic_info* user_basic_info_;
  double borrow_total_;
  double has_also_total_;
  double overdue_total_;
  ::google::protobuf::int32 overdue_count_;
  ::google::protobuf::int32 overdue_day_;
  ::std::string* repayment_state_;
  double also_late_fee_;
  double also_urgent_fee_;
  ::std::string* cheat_severity_;
  ::std::string* data_sources_;
  ::std::string* data_url_;
  ::std::string* record_date_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static blacklist_info* default_instance_;
};
// -------------------------------------------------------------------

class reptile_data_statistics_info : public ::google::protobuf::Message {
 public:
  reptile_data_statistics_info();
  virtual ~reptile_data_statistics_info();

  reptile_data_statistics_info(const reptile_data_statistics_info& from);

  inline reptile_data_statistics_info& operator=(const reptile_data_statistics_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_data_statistics_info& default_instance();

  void Swap(reptile_data_statistics_info* other);

  // implements Message ----------------------------------------------

  reptile_data_statistics_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_data_statistics_info& from);
  void MergeFrom(const reptile_data_statistics_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional bytes website_name = 2;
  inline bool has_website_name() const;
  inline void clear_website_name();
  static const int kWebsiteNameFieldNumber = 2;
  inline const ::std::string& website_name() const;
  inline void set_website_name(const ::std::string& value);
  inline void set_website_name(const char* value);
  inline void set_website_name(const void* value, size_t size);
  inline ::std::string* mutable_website_name();
  inline ::std::string* release_website_name();
  inline void set_allocated_website_name(::std::string* website_name);

  // optional bytes crawl_site = 3;
  inline bool has_crawl_site() const;
  inline void clear_crawl_site();
  static const int kCrawlSiteFieldNumber = 3;
  inline const ::std::string& crawl_site() const;
  inline void set_crawl_site(const ::std::string& value);
  inline void set_crawl_site(const char* value);
  inline void set_crawl_site(const void* value, size_t size);
  inline ::std::string* mutable_crawl_site();
  inline ::std::string* release_crawl_site();
  inline void set_allocated_crawl_site(::std::string* crawl_site);

  // optional int32 modify_total = 4;
  inline bool has_modify_total() const;
  inline void clear_modify_total();
  static const int kModifyTotalFieldNumber = 4;
  inline ::google::protobuf::int32 modify_total() const;
  inline void set_modify_total(::google::protobuf::int32 value);

  // optional int32 add_total = 5;
  inline bool has_add_total() const;
  inline void clear_add_total();
  static const int kAddTotalFieldNumber = 5;
  inline ::google::protobuf::int32 add_total() const;
  inline void set_add_total(::google::protobuf::int32 value);

  // optional int32 access_page_total = 6;
  inline bool has_access_page_total() const;
  inline void clear_access_page_total();
  static const int kAccessPageTotalFieldNumber = 6;
  inline ::google::protobuf::int32 access_page_total() const;
  inline void set_access_page_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_data_statistics_info)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_website_name();
  inline void clear_has_website_name();
  inline void set_has_crawl_site();
  inline void clear_has_crawl_site();
  inline void set_has_modify_total();
  inline void clear_has_modify_total();
  inline void set_has_add_total();
  inline void clear_has_add_total();
  inline void set_has_access_page_total();
  inline void clear_has_access_page_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* website_name_;
  ::google::protobuf::int32 reptile_id_;
  ::google::protobuf::int32 modify_total_;
  ::std::string* crawl_site_;
  ::google::protobuf::int32 add_total_;
  ::google::protobuf::int32 access_page_total_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_data_statistics_info* default_instance_;
};
// -------------------------------------------------------------------

class reptile_data_detail_info : public ::google::protobuf::Message {
 public:
  reptile_data_detail_info();
  virtual ~reptile_data_detail_info();

  reptile_data_detail_info(const reptile_data_detail_info& from);

  inline reptile_data_detail_info& operator=(const reptile_data_detail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_data_detail_info& default_instance();

  void Swap(reptile_data_detail_info* other);

  // implements Message ----------------------------------------------

  reptile_data_detail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_data_detail_info& from);
  void MergeFrom(const reptile_data_detail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes get_date = 1;
  inline bool has_get_date() const;
  inline void clear_get_date();
  static const int kGetDateFieldNumber = 1;
  inline const ::std::string& get_date() const;
  inline void set_get_date(const ::std::string& value);
  inline void set_get_date(const char* value);
  inline void set_get_date(const void* value, size_t size);
  inline ::std::string* mutable_get_date();
  inline ::std::string* release_get_date();
  inline void set_allocated_get_date(::std::string* get_date);

  // optional int32 modify_total = 2;
  inline bool has_modify_total() const;
  inline void clear_modify_total();
  static const int kModifyTotalFieldNumber = 2;
  inline ::google::protobuf::int32 modify_total() const;
  inline void set_modify_total(::google::protobuf::int32 value);

  // optional int32 add_total = 3;
  inline bool has_add_total() const;
  inline void clear_add_total();
  static const int kAddTotalFieldNumber = 3;
  inline ::google::protobuf::int32 add_total() const;
  inline void set_add_total(::google::protobuf::int32 value);

  // optional int32 access_page_total = 4;
  inline bool has_access_page_total() const;
  inline void clear_access_page_total();
  static const int kAccessPageTotalFieldNumber = 4;
  inline ::google::protobuf::int32 access_page_total() const;
  inline void set_access_page_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_data_detail_info)
 private:
  inline void set_has_get_date();
  inline void clear_has_get_date();
  inline void set_has_modify_total();
  inline void clear_has_modify_total();
  inline void set_has_add_total();
  inline void clear_has_add_total();
  inline void set_has_access_page_total();
  inline void clear_has_access_page_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* get_date_;
  ::google::protobuf::int32 modify_total_;
  ::google::protobuf::int32 add_total_;
  ::google::protobuf::int32 access_page_total_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_data_detail_info* default_instance_;
};
// -------------------------------------------------------------------

class reptile_basic_info : public ::google::protobuf::Message {
 public:
  reptile_basic_info();
  virtual ~reptile_basic_info();

  reptile_basic_info(const reptile_basic_info& from);

  inline reptile_basic_info& operator=(const reptile_basic_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_basic_info& default_instance();

  void Swap(reptile_basic_info* other);

  // implements Message ----------------------------------------------

  reptile_basic_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_basic_info& from);
  void MergeFrom(const reptile_basic_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional bytes website_name = 2;
  inline bool has_website_name() const;
  inline void clear_website_name();
  static const int kWebsiteNameFieldNumber = 2;
  inline const ::std::string& website_name() const;
  inline void set_website_name(const ::std::string& value);
  inline void set_website_name(const char* value);
  inline void set_website_name(const void* value, size_t size);
  inline ::std::string* mutable_website_name();
  inline ::std::string* release_website_name();
  inline void set_allocated_website_name(::std::string* website_name);

  // optional bytes crawl_site = 3;
  inline bool has_crawl_site() const;
  inline void clear_crawl_site();
  static const int kCrawlSiteFieldNumber = 3;
  inline const ::std::string& crawl_site() const;
  inline void set_crawl_site(const ::std::string& value);
  inline void set_crawl_site(const char* value);
  inline void set_crawl_site(const void* value, size_t size);
  inline ::std::string* mutable_crawl_site();
  inline ::std::string* release_crawl_site();
  inline void set_allocated_crawl_site(::std::string* crawl_site);

  // optional bytes ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional bytes schedule = 5;
  inline bool has_schedule() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 5;
  inline const ::std::string& schedule() const;
  inline void set_schedule(const ::std::string& value);
  inline void set_schedule(const char* value);
  inline void set_schedule(const void* value, size_t size);
  inline ::std::string* mutable_schedule();
  inline ::std::string* release_schedule();
  inline void set_allocated_schedule(::std::string* schedule);

  // optional bytes reptile_status = 6;
  inline bool has_reptile_status() const;
  inline void clear_reptile_status();
  static const int kReptileStatusFieldNumber = 6;
  inline const ::std::string& reptile_status() const;
  inline void set_reptile_status(const ::std::string& value);
  inline void set_reptile_status(const char* value);
  inline void set_reptile_status(const void* value, size_t size);
  inline ::std::string* mutable_reptile_status();
  inline ::std::string* release_reptile_status();
  inline void set_allocated_reptile_status(::std::string* reptile_status);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_basic_info)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_website_name();
  inline void clear_has_website_name();
  inline void set_has_crawl_site();
  inline void clear_has_crawl_site();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_schedule();
  inline void clear_has_schedule();
  inline void set_has_reptile_status();
  inline void clear_has_reptile_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* website_name_;
  ::std::string* crawl_site_;
  ::std::string* ip_;
  ::std::string* schedule_;
  ::std::string* reptile_status_;
  ::google::protobuf::int32 reptile_id_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_basic_info* default_instance_;
};
// -------------------------------------------------------------------

class reptile_monitoring_ask : public ::google::protobuf::Message {
 public:
  reptile_monitoring_ask();
  virtual ~reptile_monitoring_ask();

  reptile_monitoring_ask(const reptile_monitoring_ask& from);

  inline reptile_monitoring_ask& operator=(const reptile_monitoring_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_monitoring_ask& default_instance();

  void Swap(reptile_monitoring_ask* other);

  // implements Message ----------------------------------------------

  reptile_monitoring_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_monitoring_ask& from);
  void MergeFrom(const reptile_monitoring_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_monitoring_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_monitoring_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_monitoring_ans : public ::google::protobuf::Message {
 public:
  reptile_monitoring_ans();
  virtual ~reptile_monitoring_ans();

  reptile_monitoring_ans(const reptile_monitoring_ans& from);

  inline reptile_monitoring_ans& operator=(const reptile_monitoring_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_monitoring_ans& default_instance();

  void Swap(reptile_monitoring_ans* other);

  // implements Message ----------------------------------------------

  reptile_monitoring_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_monitoring_ans& from);
  void MergeFrom(const reptile_monitoring_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.reptile_basic_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::reptile_basic_info& list(int index) const;
  inline ::QDP_IMP::reptile_basic_info* mutable_list(int index);
  inline ::QDP_IMP::reptile_basic_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_basic_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_basic_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_monitoring_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_basic_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_monitoring_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_monitoring_manage_ask : public ::google::protobuf::Message {
 public:
  reptile_monitoring_manage_ask();
  virtual ~reptile_monitoring_manage_ask();

  reptile_monitoring_manage_ask(const reptile_monitoring_manage_ask& from);

  inline reptile_monitoring_manage_ask& operator=(const reptile_monitoring_manage_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_monitoring_manage_ask& default_instance();

  void Swap(reptile_monitoring_manage_ask* other);

  // implements Message ----------------------------------------------

  reptile_monitoring_manage_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_monitoring_manage_ask& from);
  void MergeFrom(const reptile_monitoring_manage_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional int32 operation = 2;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 2;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_monitoring_manage_ask)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 reptile_id_;
  ::google::protobuf::int32 operation_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_monitoring_manage_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_monitoring_manage_ans : public ::google::protobuf::Message {
 public:
  reptile_monitoring_manage_ans();
  virtual ~reptile_monitoring_manage_ans();

  reptile_monitoring_manage_ans(const reptile_monitoring_manage_ans& from);

  inline reptile_monitoring_manage_ans& operator=(const reptile_monitoring_manage_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_monitoring_manage_ans& default_instance();

  void Swap(reptile_monitoring_manage_ans* other);

  // implements Message ----------------------------------------------

  reptile_monitoring_manage_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_monitoring_manage_ans& from);
  void MergeFrom(const reptile_monitoring_manage_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_monitoring_manage_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_monitoring_manage_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_data_statistics_ask : public ::google::protobuf::Message {
 public:
  reptile_data_statistics_ask();
  virtual ~reptile_data_statistics_ask();

  reptile_data_statistics_ask(const reptile_data_statistics_ask& from);

  inline reptile_data_statistics_ask& operator=(const reptile_data_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_data_statistics_ask& default_instance();

  void Swap(reptile_data_statistics_ask* other);

  // implements Message ----------------------------------------------

  reptile_data_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_data_statistics_ask& from);
  void MergeFrom(const reptile_data_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_data_statistics_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_data_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_data_statistics_ans : public ::google::protobuf::Message {
 public:
  reptile_data_statistics_ans();
  virtual ~reptile_data_statistics_ans();

  reptile_data_statistics_ans(const reptile_data_statistics_ans& from);

  inline reptile_data_statistics_ans& operator=(const reptile_data_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_data_statistics_ans& default_instance();

  void Swap(reptile_data_statistics_ans* other);

  // implements Message ----------------------------------------------

  reptile_data_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_data_statistics_ans& from);
  void MergeFrom(const reptile_data_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.reptile_data_statistics_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::reptile_data_statistics_info& list(int index) const;
  inline ::QDP_IMP::reptile_data_statistics_info* mutable_list(int index);
  inline ::QDP_IMP::reptile_data_statistics_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_statistics_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_statistics_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_data_statistics_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_statistics_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_data_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_data_detail_ask : public ::google::protobuf::Message {
 public:
  reptile_data_detail_ask();
  virtual ~reptile_data_detail_ask();

  reptile_data_detail_ask(const reptile_data_detail_ask& from);

  inline reptile_data_detail_ask& operator=(const reptile_data_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_data_detail_ask& default_instance();

  void Swap(reptile_data_detail_ask* other);

  // implements Message ----------------------------------------------

  reptile_data_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_data_detail_ask& from);
  void MergeFrom(const reptile_data_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional int32 page_num = 2;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 2;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 3;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 3;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 4;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 4;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_data_detail_ask)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 reptile_id_;
  ::google::protobuf::int32 page_num_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_data_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_data_detail_ans : public ::google::protobuf::Message {
 public:
  reptile_data_detail_ans();
  virtual ~reptile_data_detail_ans();

  reptile_data_detail_ans(const reptile_data_detail_ans& from);

  inline reptile_data_detail_ans& operator=(const reptile_data_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_data_detail_ans& default_instance();

  void Swap(reptile_data_detail_ans* other);

  // implements Message ----------------------------------------------

  reptile_data_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_data_detail_ans& from);
  void MergeFrom(const reptile_data_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.reptile_data_detail_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::reptile_data_detail_info& list(int index) const;
  inline ::QDP_IMP::reptile_data_detail_info* mutable_list(int index);
  inline ::QDP_IMP::reptile_data_detail_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_detail_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_detail_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_data_detail_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_detail_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_data_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_conf_info : public ::google::protobuf::Message {
 public:
  reptile_conf_info();
  virtual ~reptile_conf_info();

  reptile_conf_info(const reptile_conf_info& from);

  inline reptile_conf_info& operator=(const reptile_conf_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_conf_info& default_instance();

  void Swap(reptile_conf_info* other);

  // implements Message ----------------------------------------------

  reptile_conf_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_conf_info& from);
  void MergeFrom(const reptile_conf_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reptile_id = 1;
  inline bool has_reptile_id() const;
  inline void clear_reptile_id();
  static const int kReptileIdFieldNumber = 1;
  inline ::google::protobuf::int32 reptile_id() const;
  inline void set_reptile_id(::google::protobuf::int32 value);

  // optional int32 start_interval = 2;
  inline bool has_start_interval() const;
  inline void clear_start_interval();
  static const int kStartIntervalFieldNumber = 2;
  inline ::google::protobuf::int32 start_interval() const;
  inline void set_start_interval(::google::protobuf::int32 value);

  // optional int32 get_interval = 3;
  inline bool has_get_interval() const;
  inline void clear_get_interval();
  static const int kGetIntervalFieldNumber = 3;
  inline ::google::protobuf::int32 get_interval() const;
  inline void set_get_interval(::google::protobuf::int32 value);

  // optional bytes reptile_desc = 4;
  inline bool has_reptile_desc() const;
  inline void clear_reptile_desc();
  static const int kReptileDescFieldNumber = 4;
  inline const ::std::string& reptile_desc() const;
  inline void set_reptile_desc(const ::std::string& value);
  inline void set_reptile_desc(const char* value);
  inline void set_reptile_desc(const void* value, size_t size);
  inline ::std::string* mutable_reptile_desc();
  inline ::std::string* release_reptile_desc();
  inline void set_allocated_reptile_desc(::std::string* reptile_desc);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_conf_info)
 private:
  inline void set_has_reptile_id();
  inline void clear_has_reptile_id();
  inline void set_has_start_interval();
  inline void clear_has_start_interval();
  inline void set_has_get_interval();
  inline void clear_has_get_interval();
  inline void set_has_reptile_desc();
  inline void clear_has_reptile_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 reptile_id_;
  ::google::protobuf::int32 start_interval_;
  ::std::string* reptile_desc_;
  ::google::protobuf::int32 get_interval_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_conf_info* default_instance_;
};
// -------------------------------------------------------------------

class reptile_conf_query_ask : public ::google::protobuf::Message {
 public:
  reptile_conf_query_ask();
  virtual ~reptile_conf_query_ask();

  reptile_conf_query_ask(const reptile_conf_query_ask& from);

  inline reptile_conf_query_ask& operator=(const reptile_conf_query_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_conf_query_ask& default_instance();

  void Swap(reptile_conf_query_ask* other);

  // implements Message ----------------------------------------------

  reptile_conf_query_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_conf_query_ask& from);
  void MergeFrom(const reptile_conf_query_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 page_num = 1;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 1;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 2;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 2;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_conf_query_ask)
 private:
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_conf_query_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_conf_query_ans : public ::google::protobuf::Message {
 public:
  reptile_conf_query_ans();
  virtual ~reptile_conf_query_ans();

  reptile_conf_query_ans(const reptile_conf_query_ans& from);

  inline reptile_conf_query_ans& operator=(const reptile_conf_query_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_conf_query_ans& default_instance();

  void Swap(reptile_conf_query_ans* other);

  // implements Message ----------------------------------------------

  reptile_conf_query_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_conf_query_ans& from);
  void MergeFrom(const reptile_conf_query_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.reptile_conf_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::reptile_conf_info& list(int index) const;
  inline ::QDP_IMP::reptile_conf_info* mutable_list(int index);
  inline ::QDP_IMP::reptile_conf_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_conf_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_conf_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_conf_query_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_conf_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_conf_query_ans* default_instance_;
};
// -------------------------------------------------------------------

class reptile_conf_edit_ask : public ::google::protobuf::Message {
 public:
  reptile_conf_edit_ask();
  virtual ~reptile_conf_edit_ask();

  reptile_conf_edit_ask(const reptile_conf_edit_ask& from);

  inline reptile_conf_edit_ask& operator=(const reptile_conf_edit_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_conf_edit_ask& default_instance();

  void Swap(reptile_conf_edit_ask* other);

  // implements Message ----------------------------------------------

  reptile_conf_edit_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_conf_edit_ask& from);
  void MergeFrom(const reptile_conf_edit_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QDP_IMP.reptile_conf_info reptile_conf = 1;
  inline bool has_reptile_conf() const;
  inline void clear_reptile_conf();
  static const int kReptileConfFieldNumber = 1;
  inline const ::QDP_IMP::reptile_conf_info& reptile_conf() const;
  inline ::QDP_IMP::reptile_conf_info* mutable_reptile_conf();
  inline ::QDP_IMP::reptile_conf_info* release_reptile_conf();
  inline void set_allocated_reptile_conf(::QDP_IMP::reptile_conf_info* reptile_conf);

  // optional .common.common_ask_header ask_header = 2;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 2;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_conf_edit_ask)
 private:
  inline void set_has_reptile_conf();
  inline void clear_has_reptile_conf();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QDP_IMP::reptile_conf_info* reptile_conf_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_conf_edit_ask* default_instance_;
};
// -------------------------------------------------------------------

class reptile_conf_edit_ans : public ::google::protobuf::Message {
 public:
  reptile_conf_edit_ans();
  virtual ~reptile_conf_edit_ans();

  reptile_conf_edit_ans(const reptile_conf_edit_ans& from);

  inline reptile_conf_edit_ans& operator=(const reptile_conf_edit_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reptile_conf_edit_ans& default_instance();

  void Swap(reptile_conf_edit_ans* other);

  // implements Message ----------------------------------------------

  reptile_conf_edit_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reptile_conf_edit_ans& from);
  void MergeFrom(const reptile_conf_edit_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.reptile_conf_edit_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static reptile_conf_edit_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_statistics_ask : public ::google::protobuf::Message {
 public:
  blacklist_statistics_ask();
  virtual ~blacklist_statistics_ask();

  blacklist_statistics_ask(const blacklist_statistics_ask& from);

  inline blacklist_statistics_ask& operator=(const blacklist_statistics_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_statistics_ask& default_instance();

  void Swap(blacklist_statistics_ask* other);

  // implements Message ----------------------------------------------

  blacklist_statistics_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_statistics_ask& from);
  void MergeFrom(const blacklist_statistics_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional .common.common_ask_header ask_header = 3;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 3;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.blacklist_statistics_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static blacklist_statistics_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklis_statistics_info : public ::google::protobuf::Message {
 public:
  blacklis_statistics_info();
  virtual ~blacklis_statistics_info();

  blacklis_statistics_info(const blacklis_statistics_info& from);

  inline blacklis_statistics_info& operator=(const blacklis_statistics_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklis_statistics_info& default_instance();

  void Swap(blacklis_statistics_info* other);

  // implements Message ----------------------------------------------

  blacklis_statistics_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklis_statistics_info& from);
  void MergeFrom(const blacklis_statistics_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes website_name = 1;
  inline bool has_website_name() const;
  inline void clear_website_name();
  static const int kWebsiteNameFieldNumber = 1;
  inline const ::std::string& website_name() const;
  inline void set_website_name(const ::std::string& value);
  inline void set_website_name(const char* value);
  inline void set_website_name(const void* value, size_t size);
  inline ::std::string* mutable_website_name();
  inline ::std::string* release_website_name();
  inline void set_allocated_website_name(::std::string* website_name);

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QDP_IMP.blacklis_statistics_info)
 private:
  inline void set_has_website_name();
  inline void clear_has_website_name();
  inline void set_has_total_number();
  inline void clear_has_total_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* website_name_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static blacklis_statistics_info* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_statistics_ans : public ::google::protobuf::Message {
 public:
  blacklist_statistics_ans();
  virtual ~blacklist_statistics_ans();

  blacklist_statistics_ans(const blacklist_statistics_ans& from);

  inline blacklist_statistics_ans& operator=(const blacklist_statistics_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_statistics_ans& default_instance();

  void Swap(blacklist_statistics_ans* other);

  // implements Message ----------------------------------------------

  blacklist_statistics_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_statistics_ans& from);
  void MergeFrom(const blacklist_statistics_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.blacklis_statistics_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::blacklis_statistics_info& list(int index) const;
  inline ::QDP_IMP::blacklis_statistics_info* mutable_list(int index);
  inline ::QDP_IMP::blacklis_statistics_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklis_statistics_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklis_statistics_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.blacklist_statistics_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklis_statistics_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static blacklist_statistics_ans* default_instance_;
};
// -------------------------------------------------------------------

class data_sources_info : public ::google::protobuf::Message {
 public:
  data_sources_info();
  virtual ~data_sources_info();

  data_sources_info(const data_sources_info& from);

  inline data_sources_info& operator=(const data_sources_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data_sources_info& default_instance();

  void Swap(data_sources_info* other);

  // implements Message ----------------------------------------------

  data_sources_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const data_sources_info& from);
  void MergeFrom(const data_sources_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes website_id = 1;
  inline bool has_website_id() const;
  inline void clear_website_id();
  static const int kWebsiteIdFieldNumber = 1;
  inline const ::std::string& website_id() const;
  inline void set_website_id(const ::std::string& value);
  inline void set_website_id(const char* value);
  inline void set_website_id(const void* value, size_t size);
  inline ::std::string* mutable_website_id();
  inline ::std::string* release_website_id();
  inline void set_allocated_website_id(::std::string* website_id);

  // optional bytes website_name = 2;
  inline bool has_website_name() const;
  inline void clear_website_name();
  static const int kWebsiteNameFieldNumber = 2;
  inline const ::std::string& website_name() const;
  inline void set_website_name(const ::std::string& value);
  inline void set_website_name(const char* value);
  inline void set_website_name(const void* value, size_t size);
  inline ::std::string* mutable_website_name();
  inline ::std::string* release_website_name();
  inline void set_allocated_website_name(::std::string* website_name);

  // @@protoc_insertion_point(class_scope:QDP_IMP.data_sources_info)
 private:
  inline void set_has_website_id();
  inline void clear_has_website_id();
  inline void set_has_website_name();
  inline void clear_has_website_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* website_id_;
  ::std::string* website_name_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static data_sources_info* default_instance_;
};
// -------------------------------------------------------------------

class data_sources_ask : public ::google::protobuf::Message {
 public:
  data_sources_ask();
  virtual ~data_sources_ask();

  data_sources_ask(const data_sources_ask& from);

  inline data_sources_ask& operator=(const data_sources_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data_sources_ask& default_instance();

  void Swap(data_sources_ask* other);

  // implements Message ----------------------------------------------

  data_sources_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const data_sources_ask& from);
  void MergeFrom(const data_sources_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.data_sources_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static data_sources_ask* default_instance_;
};
// -------------------------------------------------------------------

class data_sources_ans : public ::google::protobuf::Message {
 public:
  data_sources_ans();
  virtual ~data_sources_ans();

  data_sources_ans(const data_sources_ans& from);

  inline data_sources_ans& operator=(const data_sources_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data_sources_ans& default_instance();

  void Swap(data_sources_ans* other);

  // implements Message ----------------------------------------------

  data_sources_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const data_sources_ans& from);
  void MergeFrom(const data_sources_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.data_sources_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::data_sources_info& list(int index) const;
  inline ::QDP_IMP::data_sources_info* mutable_list(int index);
  inline ::QDP_IMP::data_sources_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::data_sources_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::data_sources_info >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.data_sources_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::data_sources_info > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static data_sources_ans* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_ask : public ::google::protobuf::Message {
 public:
  blacklist_ask();
  virtual ~blacklist_ask();

  blacklist_ask(const blacklist_ask& from);

  inline blacklist_ask& operator=(const blacklist_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_ask& default_instance();

  void Swap(blacklist_ask* other);

  // implements Message ----------------------------------------------

  blacklist_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_ask& from);
  void MergeFrom(const blacklist_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_date = 1;
  inline bool has_start_date() const;
  inline void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  inline const ::std::string& start_date() const;
  inline void set_start_date(const ::std::string& value);
  inline void set_start_date(const char* value);
  inline void set_start_date(const void* value, size_t size);
  inline ::std::string* mutable_start_date();
  inline ::std::string* release_start_date();
  inline void set_allocated_start_date(::std::string* start_date);

  // optional bytes end_date = 2;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  inline const ::std::string& end_date() const;
  inline void set_end_date(const ::std::string& value);
  inline void set_end_date(const char* value);
  inline void set_end_date(const void* value, size_t size);
  inline ::std::string* mutable_end_date();
  inline ::std::string* release_end_date();
  inline void set_allocated_end_date(::std::string* end_date);

  // optional bytes website_id = 3;
  inline bool has_website_id() const;
  inline void clear_website_id();
  static const int kWebsiteIdFieldNumber = 3;
  inline const ::std::string& website_id() const;
  inline void set_website_id(const ::std::string& value);
  inline void set_website_id(const char* value);
  inline void set_website_id(const void* value, size_t size);
  inline ::std::string* mutable_website_id();
  inline ::std::string* release_website_id();
  inline void set_allocated_website_id(::std::string* website_id);

  // optional int32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 5;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 5;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // optional .common.common_ask_header ask_header = 6;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 6;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:QDP_IMP.blacklist_ask)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_website_id();
  inline void clear_has_website_id();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* start_date_;
  ::std::string* end_date_;
  ::std::string* website_id_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  ::common::common_ask_header* ask_header_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static blacklist_ask* default_instance_;
};
// -------------------------------------------------------------------

class blacklist_ans : public ::google::protobuf::Message {
 public:
  blacklist_ans();
  virtual ~blacklist_ans();

  blacklist_ans(const blacklist_ans& from);

  inline blacklist_ans& operator=(const blacklist_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blacklist_ans& default_instance();

  void Swap(blacklist_ans* other);

  // implements Message ----------------------------------------------

  blacklist_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blacklist_ans& from);
  void MergeFrom(const blacklist_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QDP_IMP.blacklist_info list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::QDP_IMP::blacklist_info& list(int index) const;
  inline ::QDP_IMP::blacklist_info* mutable_list(int index);
  inline ::QDP_IMP::blacklist_info* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklist_info >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklist_info >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:QDP_IMP.blacklist_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklist_info > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_QDP_5fIMP_2eproto();
  friend void protobuf_AssignDesc_QDP_5fIMP_2eproto();
  friend void protobuf_ShutdownFile_QDP_5fIMP_2eproto();

  void InitAsDefaultInstance();
  static blacklist_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// user_basic_info

// optional bytes user_id = 1;
inline bool user_basic_info::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_basic_info::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_basic_info::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_basic_info::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& user_basic_info::user_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.user_id)
  return *user_id_;
}
inline void user_basic_info::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.user_id)
}
inline void user_basic_info::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.user_id)
}
inline void user_basic_info::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.user_id)
}
inline ::std::string* user_basic_info::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.user_id)
  return user_id_;
}
inline ::std::string* user_basic_info::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.user_id)
}

// optional bytes real_name = 2;
inline bool user_basic_info::has_real_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_basic_info::set_has_real_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_basic_info::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_basic_info::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& user_basic_info::real_name() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.real_name)
  return *real_name_;
}
inline void user_basic_info::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.real_name)
}
inline void user_basic_info::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.real_name)
}
inline void user_basic_info::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.real_name)
}
inline ::std::string* user_basic_info::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.real_name)
  return real_name_;
}
inline ::std::string* user_basic_info::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.real_name)
}

// optional bytes mobile_phone = 3;
inline bool user_basic_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_basic_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_basic_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_basic_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_basic_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.mobile_phone)
  return *mobile_phone_;
}
inline void user_basic_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.mobile_phone)
}
inline void user_basic_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.mobile_phone)
}
inline void user_basic_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.mobile_phone)
}
inline ::std::string* user_basic_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_basic_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.mobile_phone)
}

// optional int32 age = 4;
inline bool user_basic_info::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_basic_info::set_has_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_basic_info::clear_has_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_basic_info::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 user_basic_info::age() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.age)
  return age_;
}
inline void user_basic_info::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.age)
}

// optional .common.sex sex = 5;
inline bool user_basic_info::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_basic_info::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_basic_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_basic_info::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::common::sex user_basic_info::sex() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.sex)
  return static_cast< ::common::sex >(sex_);
}
inline void user_basic_info::set_sex(::common::sex value) {
  assert(::common::sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.sex)
}

// optional .common.user_id_type id_type = 6;
inline bool user_basic_info::has_id_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_basic_info::set_has_id_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_basic_info::clear_has_id_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_basic_info::clear_id_type() {
  id_type_ = 0;
  clear_has_id_type();
}
inline ::common::user_id_type user_basic_info::id_type() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.id_type)
  return static_cast< ::common::user_id_type >(id_type_);
}
inline void user_basic_info::set_id_type(::common::user_id_type value) {
  assert(::common::user_id_type_IsValid(value));
  set_has_id_type();
  id_type_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.id_type)
}

// optional bytes id_no = 7;
inline bool user_basic_info::has_id_no() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_basic_info::set_has_id_no() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_basic_info::clear_has_id_no() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_basic_info::clear_id_no() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_->clear();
  }
  clear_has_id_no();
}
inline const ::std::string& user_basic_info::id_no() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.id_no)
  return *id_no_;
}
inline void user_basic_info::set_id_no(const ::std::string& value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.id_no)
}
inline void user_basic_info::set_id_no(const char* value) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.id_no)
}
inline void user_basic_info::set_id_no(const void* value, size_t size) {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  id_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.id_no)
}
inline ::std::string* user_basic_info::mutable_id_no() {
  set_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.id_no)
  return id_no_;
}
inline ::std::string* user_basic_info::release_id_no() {
  clear_has_id_no();
  if (id_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_no_;
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_id_no(::std::string* id_no) {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (id_no) {
    set_has_id_no();
    id_no_ = id_no;
  } else {
    clear_has_id_no();
    id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.id_no)
}

// optional bytes id_addr = 8;
inline bool user_basic_info::has_id_addr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_basic_info::set_has_id_addr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_basic_info::clear_has_id_addr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_basic_info::clear_id_addr() {
  if (id_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_addr_->clear();
  }
  clear_has_id_addr();
}
inline const ::std::string& user_basic_info::id_addr() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.id_addr)
  return *id_addr_;
}
inline void user_basic_info::set_id_addr(const ::std::string& value) {
  set_has_id_addr();
  if (id_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_addr_ = new ::std::string;
  }
  id_addr_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.id_addr)
}
inline void user_basic_info::set_id_addr(const char* value) {
  set_has_id_addr();
  if (id_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_addr_ = new ::std::string;
  }
  id_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.id_addr)
}
inline void user_basic_info::set_id_addr(const void* value, size_t size) {
  set_has_id_addr();
  if (id_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_addr_ = new ::std::string;
  }
  id_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.id_addr)
}
inline ::std::string* user_basic_info::mutable_id_addr() {
  set_has_id_addr();
  if (id_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.id_addr)
  return id_addr_;
}
inline ::std::string* user_basic_info::release_id_addr() {
  clear_has_id_addr();
  if (id_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_addr_;
    id_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_id_addr(::std::string* id_addr) {
  if (id_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_addr_;
  }
  if (id_addr) {
    set_has_id_addr();
    id_addr_ = id_addr;
  } else {
    clear_has_id_addr();
    id_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.id_addr)
}

// optional bytes email = 9;
inline bool user_basic_info::has_email() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_basic_info::set_has_email() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_basic_info::clear_has_email() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_basic_info::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& user_basic_info::email() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.email)
  return *email_;
}
inline void user_basic_info::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.email)
}
inline void user_basic_info::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.email)
}
inline void user_basic_info::set_email(const void* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.email)
}
inline ::std::string* user_basic_info::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.email)
  return email_;
}
inline ::std::string* user_basic_info::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.email)
}

// optional bytes house_addr = 10;
inline bool user_basic_info::has_house_addr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_basic_info::set_has_house_addr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_basic_info::clear_has_house_addr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_basic_info::clear_house_addr() {
  if (house_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    house_addr_->clear();
  }
  clear_has_house_addr();
}
inline const ::std::string& user_basic_info::house_addr() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.house_addr)
  return *house_addr_;
}
inline void user_basic_info::set_house_addr(const ::std::string& value) {
  set_has_house_addr();
  if (house_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    house_addr_ = new ::std::string;
  }
  house_addr_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.house_addr)
}
inline void user_basic_info::set_house_addr(const char* value) {
  set_has_house_addr();
  if (house_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    house_addr_ = new ::std::string;
  }
  house_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.house_addr)
}
inline void user_basic_info::set_house_addr(const void* value, size_t size) {
  set_has_house_addr();
  if (house_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    house_addr_ = new ::std::string;
  }
  house_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.house_addr)
}
inline ::std::string* user_basic_info::mutable_house_addr() {
  set_has_house_addr();
  if (house_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    house_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.house_addr)
  return house_addr_;
}
inline ::std::string* user_basic_info::release_house_addr() {
  clear_has_house_addr();
  if (house_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = house_addr_;
    house_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_house_addr(::std::string* house_addr) {
  if (house_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete house_addr_;
  }
  if (house_addr) {
    set_has_house_addr();
    house_addr_ = house_addr;
  } else {
    clear_has_house_addr();
    house_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.house_addr)
}

// optional bytes company_name = 11;
inline bool user_basic_info::has_company_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_basic_info::set_has_company_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_basic_info::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_basic_info::clear_company_name() {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_->clear();
  }
  clear_has_company_name();
}
inline const ::std::string& user_basic_info::company_name() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.company_name)
  return *company_name_;
}
inline void user_basic_info::set_company_name(const ::std::string& value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.company_name)
}
inline void user_basic_info::set_company_name(const char* value) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.company_name)
}
inline void user_basic_info::set_company_name(const void* value, size_t size) {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  company_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.company_name)
}
inline ::std::string* user_basic_info::mutable_company_name() {
  set_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.company_name)
  return company_name_;
}
inline ::std::string* user_basic_info::release_company_name() {
  clear_has_company_name();
  if (company_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_name_;
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_company_name(::std::string* company_name) {
  if (company_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_name_;
  }
  if (company_name) {
    set_has_company_name();
    company_name_ = company_name;
  } else {
    clear_has_company_name();
    company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.company_name)
}

// optional bytes company_addr = 12;
inline bool user_basic_info::has_company_addr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_basic_info::set_has_company_addr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_basic_info::clear_has_company_addr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_basic_info::clear_company_addr() {
  if (company_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_addr_->clear();
  }
  clear_has_company_addr();
}
inline const ::std::string& user_basic_info::company_addr() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.company_addr)
  return *company_addr_;
}
inline void user_basic_info::set_company_addr(const ::std::string& value) {
  set_has_company_addr();
  if (company_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_addr_ = new ::std::string;
  }
  company_addr_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.company_addr)
}
inline void user_basic_info::set_company_addr(const char* value) {
  set_has_company_addr();
  if (company_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_addr_ = new ::std::string;
  }
  company_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.company_addr)
}
inline void user_basic_info::set_company_addr(const void* value, size_t size) {
  set_has_company_addr();
  if (company_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_addr_ = new ::std::string;
  }
  company_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.company_addr)
}
inline ::std::string* user_basic_info::mutable_company_addr() {
  set_has_company_addr();
  if (company_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.company_addr)
  return company_addr_;
}
inline ::std::string* user_basic_info::release_company_addr() {
  clear_has_company_addr();
  if (company_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_addr_;
    company_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_company_addr(::std::string* company_addr) {
  if (company_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_addr_;
  }
  if (company_addr) {
    set_has_company_addr();
    company_addr_ = company_addr;
  } else {
    clear_has_company_addr();
    company_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.company_addr)
}

// optional bytes company_tel = 13;
inline bool user_basic_info::has_company_tel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void user_basic_info::set_has_company_tel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void user_basic_info::clear_has_company_tel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void user_basic_info::clear_company_tel() {
  if (company_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_tel_->clear();
  }
  clear_has_company_tel();
}
inline const ::std::string& user_basic_info::company_tel() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.company_tel)
  return *company_tel_;
}
inline void user_basic_info::set_company_tel(const ::std::string& value) {
  set_has_company_tel();
  if (company_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_tel_ = new ::std::string;
  }
  company_tel_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.user_basic_info.company_tel)
}
inline void user_basic_info::set_company_tel(const char* value) {
  set_has_company_tel();
  if (company_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_tel_ = new ::std::string;
  }
  company_tel_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.user_basic_info.company_tel)
}
inline void user_basic_info::set_company_tel(const void* value, size_t size) {
  set_has_company_tel();
  if (company_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_tel_ = new ::std::string;
  }
  company_tel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.user_basic_info.company_tel)
}
inline ::std::string* user_basic_info::mutable_company_tel() {
  set_has_company_tel();
  if (company_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    company_tel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.company_tel)
  return company_tel_;
}
inline ::std::string* user_basic_info::release_company_tel() {
  clear_has_company_tel();
  if (company_tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = company_tel_;
    company_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_company_tel(::std::string* company_tel) {
  if (company_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete company_tel_;
  }
  if (company_tel) {
    set_has_company_tel();
    company_tel_ = company_tel;
  } else {
    clear_has_company_tel();
    company_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.user_basic_info.company_tel)
}

// repeated .common.relation_contact contact_list = 14;
inline int user_basic_info::contact_list_size() const {
  return contact_list_.size();
}
inline void user_basic_info::clear_contact_list() {
  contact_list_.Clear();
}
inline const ::common::relation_contact& user_basic_info::contact_list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.user_basic_info.contact_list)
  return contact_list_.Get(index);
}
inline ::common::relation_contact* user_basic_info::mutable_contact_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.user_basic_info.contact_list)
  return contact_list_.Mutable(index);
}
inline ::common::relation_contact* user_basic_info::add_contact_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.user_basic_info.contact_list)
  return contact_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::relation_contact >&
user_basic_info::contact_list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.user_basic_info.contact_list)
  return contact_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::relation_contact >*
user_basic_info::mutable_contact_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.user_basic_info.contact_list)
  return &contact_list_;
}

// -------------------------------------------------------------------

// blacklist_info

// optional .QDP_IMP.user_basic_info user_basic_info = 1;
inline bool blacklist_info::has_user_basic_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_info::set_has_user_basic_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_info::clear_has_user_basic_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_info::clear_user_basic_info() {
  if (user_basic_info_ != NULL) user_basic_info_->::QDP_IMP::user_basic_info::Clear();
  clear_has_user_basic_info();
}
inline const ::QDP_IMP::user_basic_info& blacklist_info::user_basic_info() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.user_basic_info)
  return user_basic_info_ != NULL ? *user_basic_info_ : *default_instance_->user_basic_info_;
}
inline ::QDP_IMP::user_basic_info* blacklist_info::mutable_user_basic_info() {
  set_has_user_basic_info();
  if (user_basic_info_ == NULL) user_basic_info_ = new ::QDP_IMP::user_basic_info;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_info.user_basic_info)
  return user_basic_info_;
}
inline ::QDP_IMP::user_basic_info* blacklist_info::release_user_basic_info() {
  clear_has_user_basic_info();
  ::QDP_IMP::user_basic_info* temp = user_basic_info_;
  user_basic_info_ = NULL;
  return temp;
}
inline void blacklist_info::set_allocated_user_basic_info(::QDP_IMP::user_basic_info* user_basic_info) {
  delete user_basic_info_;
  user_basic_info_ = user_basic_info;
  if (user_basic_info) {
    set_has_user_basic_info();
  } else {
    clear_has_user_basic_info();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_info.user_basic_info)
}

// optional double borrow_total = 2;
inline bool blacklist_info::has_borrow_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_info::set_has_borrow_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_info::clear_has_borrow_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_info::clear_borrow_total() {
  borrow_total_ = 0;
  clear_has_borrow_total();
}
inline double blacklist_info::borrow_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.borrow_total)
  return borrow_total_;
}
inline void blacklist_info::set_borrow_total(double value) {
  set_has_borrow_total();
  borrow_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.borrow_total)
}

// optional double has_also_total = 3;
inline bool blacklist_info::has_has_also_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_info::set_has_has_also_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_info::clear_has_has_also_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_info::clear_has_also_total() {
  has_also_total_ = 0;
  clear_has_has_also_total();
}
inline double blacklist_info::has_also_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.has_also_total)
  return has_also_total_;
}
inline void blacklist_info::set_has_also_total(double value) {
  set_has_has_also_total();
  has_also_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.has_also_total)
}

// optional int32 overdue_count = 4;
inline bool blacklist_info::has_overdue_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blacklist_info::set_has_overdue_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blacklist_info::clear_has_overdue_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blacklist_info::clear_overdue_count() {
  overdue_count_ = 0;
  clear_has_overdue_count();
}
inline ::google::protobuf::int32 blacklist_info::overdue_count() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.overdue_count)
  return overdue_count_;
}
inline void blacklist_info::set_overdue_count(::google::protobuf::int32 value) {
  set_has_overdue_count();
  overdue_count_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.overdue_count)
}

// optional double overdue_total = 5;
inline bool blacklist_info::has_overdue_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blacklist_info::set_has_overdue_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blacklist_info::clear_has_overdue_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blacklist_info::clear_overdue_total() {
  overdue_total_ = 0;
  clear_has_overdue_total();
}
inline double blacklist_info::overdue_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.overdue_total)
  return overdue_total_;
}
inline void blacklist_info::set_overdue_total(double value) {
  set_has_overdue_total();
  overdue_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.overdue_total)
}

// optional int32 overdue_day = 6;
inline bool blacklist_info::has_overdue_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blacklist_info::set_has_overdue_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blacklist_info::clear_has_overdue_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blacklist_info::clear_overdue_day() {
  overdue_day_ = 0;
  clear_has_overdue_day();
}
inline ::google::protobuf::int32 blacklist_info::overdue_day() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.overdue_day)
  return overdue_day_;
}
inline void blacklist_info::set_overdue_day(::google::protobuf::int32 value) {
  set_has_overdue_day();
  overdue_day_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.overdue_day)
}

// optional bytes repayment_state = 7;
inline bool blacklist_info::has_repayment_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void blacklist_info::set_has_repayment_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void blacklist_info::clear_has_repayment_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void blacklist_info::clear_repayment_state() {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_->clear();
  }
  clear_has_repayment_state();
}
inline const ::std::string& blacklist_info::repayment_state() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.repayment_state)
  return *repayment_state_;
}
inline void blacklist_info::set_repayment_state(const ::std::string& value) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.repayment_state)
}
inline void blacklist_info::set_repayment_state(const char* value) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_info.repayment_state)
}
inline void blacklist_info::set_repayment_state(const void* value, size_t size) {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  repayment_state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_info.repayment_state)
}
inline ::std::string* blacklist_info::mutable_repayment_state() {
  set_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repayment_state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_info.repayment_state)
  return repayment_state_;
}
inline ::std::string* blacklist_info::release_repayment_state() {
  clear_has_repayment_state();
  if (repayment_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repayment_state_;
    repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_info::set_allocated_repayment_state(::std::string* repayment_state) {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_state_;
  }
  if (repayment_state) {
    set_has_repayment_state();
    repayment_state_ = repayment_state;
  } else {
    clear_has_repayment_state();
    repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_info.repayment_state)
}

// optional double also_late_fee = 8;
inline bool blacklist_info::has_also_late_fee() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void blacklist_info::set_has_also_late_fee() {
  _has_bits_[0] |= 0x00000080u;
}
inline void blacklist_info::clear_has_also_late_fee() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void blacklist_info::clear_also_late_fee() {
  also_late_fee_ = 0;
  clear_has_also_late_fee();
}
inline double blacklist_info::also_late_fee() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.also_late_fee)
  return also_late_fee_;
}
inline void blacklist_info::set_also_late_fee(double value) {
  set_has_also_late_fee();
  also_late_fee_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.also_late_fee)
}

// optional double also_urgent_fee = 9;
inline bool blacklist_info::has_also_urgent_fee() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void blacklist_info::set_has_also_urgent_fee() {
  _has_bits_[0] |= 0x00000100u;
}
inline void blacklist_info::clear_has_also_urgent_fee() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void blacklist_info::clear_also_urgent_fee() {
  also_urgent_fee_ = 0;
  clear_has_also_urgent_fee();
}
inline double blacklist_info::also_urgent_fee() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.also_urgent_fee)
  return also_urgent_fee_;
}
inline void blacklist_info::set_also_urgent_fee(double value) {
  set_has_also_urgent_fee();
  also_urgent_fee_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.also_urgent_fee)
}

// optional bytes cheat_severity = 10;
inline bool blacklist_info::has_cheat_severity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void blacklist_info::set_has_cheat_severity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void blacklist_info::clear_has_cheat_severity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void blacklist_info::clear_cheat_severity() {
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_->clear();
  }
  clear_has_cheat_severity();
}
inline const ::std::string& blacklist_info::cheat_severity() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.cheat_severity)
  return *cheat_severity_;
}
inline void blacklist_info::set_cheat_severity(const ::std::string& value) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.cheat_severity)
}
inline void blacklist_info::set_cheat_severity(const char* value) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_info.cheat_severity)
}
inline void blacklist_info::set_cheat_severity(const void* value, size_t size) {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  cheat_severity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_info.cheat_severity)
}
inline ::std::string* blacklist_info::mutable_cheat_severity() {
  set_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cheat_severity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_info.cheat_severity)
  return cheat_severity_;
}
inline ::std::string* blacklist_info::release_cheat_severity() {
  clear_has_cheat_severity();
  if (cheat_severity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cheat_severity_;
    cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_info::set_allocated_cheat_severity(::std::string* cheat_severity) {
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cheat_severity_;
  }
  if (cheat_severity) {
    set_has_cheat_severity();
    cheat_severity_ = cheat_severity;
  } else {
    clear_has_cheat_severity();
    cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_info.cheat_severity)
}

// optional bytes data_sources = 11;
inline bool blacklist_info::has_data_sources() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void blacklist_info::set_has_data_sources() {
  _has_bits_[0] |= 0x00000400u;
}
inline void blacklist_info::clear_has_data_sources() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void blacklist_info::clear_data_sources() {
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_->clear();
  }
  clear_has_data_sources();
}
inline const ::std::string& blacklist_info::data_sources() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.data_sources)
  return *data_sources_;
}
inline void blacklist_info::set_data_sources(const ::std::string& value) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.data_sources)
}
inline void blacklist_info::set_data_sources(const char* value) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_info.data_sources)
}
inline void blacklist_info::set_data_sources(const void* value, size_t size) {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  data_sources_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_info.data_sources)
}
inline ::std::string* blacklist_info::mutable_data_sources() {
  set_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_sources_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_info.data_sources)
  return data_sources_;
}
inline ::std::string* blacklist_info::release_data_sources() {
  clear_has_data_sources();
  if (data_sources_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_sources_;
    data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_info::set_allocated_data_sources(::std::string* data_sources) {
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_sources_;
  }
  if (data_sources) {
    set_has_data_sources();
    data_sources_ = data_sources;
  } else {
    clear_has_data_sources();
    data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_info.data_sources)
}

// optional bytes data_url = 12;
inline bool blacklist_info::has_data_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void blacklist_info::set_has_data_url() {
  _has_bits_[0] |= 0x00000800u;
}
inline void blacklist_info::clear_has_data_url() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void blacklist_info::clear_data_url() {
  if (data_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_url_->clear();
  }
  clear_has_data_url();
}
inline const ::std::string& blacklist_info::data_url() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.data_url)
  return *data_url_;
}
inline void blacklist_info::set_data_url(const ::std::string& value) {
  set_has_data_url();
  if (data_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_url_ = new ::std::string;
  }
  data_url_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.data_url)
}
inline void blacklist_info::set_data_url(const char* value) {
  set_has_data_url();
  if (data_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_url_ = new ::std::string;
  }
  data_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_info.data_url)
}
inline void blacklist_info::set_data_url(const void* value, size_t size) {
  set_has_data_url();
  if (data_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_url_ = new ::std::string;
  }
  data_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_info.data_url)
}
inline ::std::string* blacklist_info::mutable_data_url() {
  set_has_data_url();
  if (data_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_info.data_url)
  return data_url_;
}
inline ::std::string* blacklist_info::release_data_url() {
  clear_has_data_url();
  if (data_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_url_;
    data_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_info::set_allocated_data_url(::std::string* data_url) {
  if (data_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_url_;
  }
  if (data_url) {
    set_has_data_url();
    data_url_ = data_url;
  } else {
    clear_has_data_url();
    data_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_info.data_url)
}

// optional bytes record_date = 13;
inline bool blacklist_info::has_record_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void blacklist_info::set_has_record_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void blacklist_info::clear_has_record_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void blacklist_info::clear_record_date() {
  if (record_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_date_->clear();
  }
  clear_has_record_date();
}
inline const ::std::string& blacklist_info::record_date() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_info.record_date)
  return *record_date_;
}
inline void blacklist_info::set_record_date(const ::std::string& value) {
  set_has_record_date();
  if (record_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_date_ = new ::std::string;
  }
  record_date_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_info.record_date)
}
inline void blacklist_info::set_record_date(const char* value) {
  set_has_record_date();
  if (record_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_date_ = new ::std::string;
  }
  record_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_info.record_date)
}
inline void blacklist_info::set_record_date(const void* value, size_t size) {
  set_has_record_date();
  if (record_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_date_ = new ::std::string;
  }
  record_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_info.record_date)
}
inline ::std::string* blacklist_info::mutable_record_date() {
  set_has_record_date();
  if (record_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_info.record_date)
  return record_date_;
}
inline ::std::string* blacklist_info::release_record_date() {
  clear_has_record_date();
  if (record_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = record_date_;
    record_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_info::set_allocated_record_date(::std::string* record_date) {
  if (record_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_date_;
  }
  if (record_date) {
    set_has_record_date();
    record_date_ = record_date;
  } else {
    clear_has_record_date();
    record_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_info.record_date)
}

// -------------------------------------------------------------------

// reptile_data_statistics_info

// optional int32 reptile_id = 1;
inline bool reptile_data_statistics_info::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_data_statistics_info::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_data_statistics_info::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_data_statistics_info::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_data_statistics_info::reptile_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_info.reptile_id)
  return reptile_id_;
}
inline void reptile_data_statistics_info::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_statistics_info.reptile_id)
}

// optional bytes website_name = 2;
inline bool reptile_data_statistics_info::has_website_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_data_statistics_info::set_has_website_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_data_statistics_info::clear_has_website_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_data_statistics_info::clear_website_name() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_->clear();
  }
  clear_has_website_name();
}
inline const ::std::string& reptile_data_statistics_info::website_name() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_info.website_name)
  return *website_name_;
}
inline void reptile_data_statistics_info::set_website_name(const ::std::string& value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_statistics_info.website_name)
}
inline void reptile_data_statistics_info::set_website_name(const char* value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_data_statistics_info.website_name)
}
inline void reptile_data_statistics_info::set_website_name(const void* value, size_t size) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_data_statistics_info.website_name)
}
inline ::std::string* reptile_data_statistics_info::mutable_website_name() {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_statistics_info.website_name)
  return website_name_;
}
inline ::std::string* reptile_data_statistics_info::release_website_name() {
  clear_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = website_name_;
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_data_statistics_info::set_allocated_website_name(::std::string* website_name) {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (website_name) {
    set_has_website_name();
    website_name_ = website_name;
  } else {
    clear_has_website_name();
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_statistics_info.website_name)
}

// optional bytes crawl_site = 3;
inline bool reptile_data_statistics_info::has_crawl_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_data_statistics_info::set_has_crawl_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_data_statistics_info::clear_has_crawl_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_data_statistics_info::clear_crawl_site() {
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_->clear();
  }
  clear_has_crawl_site();
}
inline const ::std::string& reptile_data_statistics_info::crawl_site() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_info.crawl_site)
  return *crawl_site_;
}
inline void reptile_data_statistics_info::set_crawl_site(const ::std::string& value) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_statistics_info.crawl_site)
}
inline void reptile_data_statistics_info::set_crawl_site(const char* value) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_data_statistics_info.crawl_site)
}
inline void reptile_data_statistics_info::set_crawl_site(const void* value, size_t size) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_data_statistics_info.crawl_site)
}
inline ::std::string* reptile_data_statistics_info::mutable_crawl_site() {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_statistics_info.crawl_site)
  return crawl_site_;
}
inline ::std::string* reptile_data_statistics_info::release_crawl_site() {
  clear_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = crawl_site_;
    crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_data_statistics_info::set_allocated_crawl_site(::std::string* crawl_site) {
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crawl_site_;
  }
  if (crawl_site) {
    set_has_crawl_site();
    crawl_site_ = crawl_site;
  } else {
    clear_has_crawl_site();
    crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_statistics_info.crawl_site)
}

// optional int32 modify_total = 4;
inline bool reptile_data_statistics_info::has_modify_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_data_statistics_info::set_has_modify_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_data_statistics_info::clear_has_modify_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_data_statistics_info::clear_modify_total() {
  modify_total_ = 0;
  clear_has_modify_total();
}
inline ::google::protobuf::int32 reptile_data_statistics_info::modify_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_info.modify_total)
  return modify_total_;
}
inline void reptile_data_statistics_info::set_modify_total(::google::protobuf::int32 value) {
  set_has_modify_total();
  modify_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_statistics_info.modify_total)
}

// optional int32 add_total = 5;
inline bool reptile_data_statistics_info::has_add_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reptile_data_statistics_info::set_has_add_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reptile_data_statistics_info::clear_has_add_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reptile_data_statistics_info::clear_add_total() {
  add_total_ = 0;
  clear_has_add_total();
}
inline ::google::protobuf::int32 reptile_data_statistics_info::add_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_info.add_total)
  return add_total_;
}
inline void reptile_data_statistics_info::set_add_total(::google::protobuf::int32 value) {
  set_has_add_total();
  add_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_statistics_info.add_total)
}

// optional int32 access_page_total = 6;
inline bool reptile_data_statistics_info::has_access_page_total() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void reptile_data_statistics_info::set_has_access_page_total() {
  _has_bits_[0] |= 0x00000020u;
}
inline void reptile_data_statistics_info::clear_has_access_page_total() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void reptile_data_statistics_info::clear_access_page_total() {
  access_page_total_ = 0;
  clear_has_access_page_total();
}
inline ::google::protobuf::int32 reptile_data_statistics_info::access_page_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_info.access_page_total)
  return access_page_total_;
}
inline void reptile_data_statistics_info::set_access_page_total(::google::protobuf::int32 value) {
  set_has_access_page_total();
  access_page_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_statistics_info.access_page_total)
}

// -------------------------------------------------------------------

// reptile_data_detail_info

// optional bytes get_date = 1;
inline bool reptile_data_detail_info::has_get_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_data_detail_info::set_has_get_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_data_detail_info::clear_has_get_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_data_detail_info::clear_get_date() {
  if (get_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_date_->clear();
  }
  clear_has_get_date();
}
inline const ::std::string& reptile_data_detail_info::get_date() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_info.get_date)
  return *get_date_;
}
inline void reptile_data_detail_info::set_get_date(const ::std::string& value) {
  set_has_get_date();
  if (get_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_date_ = new ::std::string;
  }
  get_date_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_info.get_date)
}
inline void reptile_data_detail_info::set_get_date(const char* value) {
  set_has_get_date();
  if (get_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_date_ = new ::std::string;
  }
  get_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_data_detail_info.get_date)
}
inline void reptile_data_detail_info::set_get_date(const void* value, size_t size) {
  set_has_get_date();
  if (get_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_date_ = new ::std::string;
  }
  get_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_data_detail_info.get_date)
}
inline ::std::string* reptile_data_detail_info::mutable_get_date() {
  set_has_get_date();
  if (get_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    get_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_detail_info.get_date)
  return get_date_;
}
inline ::std::string* reptile_data_detail_info::release_get_date() {
  clear_has_get_date();
  if (get_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = get_date_;
    get_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_data_detail_info::set_allocated_get_date(::std::string* get_date) {
  if (get_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete get_date_;
  }
  if (get_date) {
    set_has_get_date();
    get_date_ = get_date;
  } else {
    clear_has_get_date();
    get_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_detail_info.get_date)
}

// optional int32 modify_total = 2;
inline bool reptile_data_detail_info::has_modify_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_data_detail_info::set_has_modify_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_data_detail_info::clear_has_modify_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_data_detail_info::clear_modify_total() {
  modify_total_ = 0;
  clear_has_modify_total();
}
inline ::google::protobuf::int32 reptile_data_detail_info::modify_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_info.modify_total)
  return modify_total_;
}
inline void reptile_data_detail_info::set_modify_total(::google::protobuf::int32 value) {
  set_has_modify_total();
  modify_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_info.modify_total)
}

// optional int32 add_total = 3;
inline bool reptile_data_detail_info::has_add_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_data_detail_info::set_has_add_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_data_detail_info::clear_has_add_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_data_detail_info::clear_add_total() {
  add_total_ = 0;
  clear_has_add_total();
}
inline ::google::protobuf::int32 reptile_data_detail_info::add_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_info.add_total)
  return add_total_;
}
inline void reptile_data_detail_info::set_add_total(::google::protobuf::int32 value) {
  set_has_add_total();
  add_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_info.add_total)
}

// optional int32 access_page_total = 4;
inline bool reptile_data_detail_info::has_access_page_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_data_detail_info::set_has_access_page_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_data_detail_info::clear_has_access_page_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_data_detail_info::clear_access_page_total() {
  access_page_total_ = 0;
  clear_has_access_page_total();
}
inline ::google::protobuf::int32 reptile_data_detail_info::access_page_total() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_info.access_page_total)
  return access_page_total_;
}
inline void reptile_data_detail_info::set_access_page_total(::google::protobuf::int32 value) {
  set_has_access_page_total();
  access_page_total_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_info.access_page_total)
}

// -------------------------------------------------------------------

// reptile_basic_info

// optional int32 reptile_id = 1;
inline bool reptile_basic_info::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_basic_info::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_basic_info::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_basic_info::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_basic_info::reptile_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_basic_info.reptile_id)
  return reptile_id_;
}
inline void reptile_basic_info::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_basic_info.reptile_id)
}

// optional bytes website_name = 2;
inline bool reptile_basic_info::has_website_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_basic_info::set_has_website_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_basic_info::clear_has_website_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_basic_info::clear_website_name() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_->clear();
  }
  clear_has_website_name();
}
inline const ::std::string& reptile_basic_info::website_name() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_basic_info.website_name)
  return *website_name_;
}
inline void reptile_basic_info::set_website_name(const ::std::string& value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_basic_info.website_name)
}
inline void reptile_basic_info::set_website_name(const char* value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_basic_info.website_name)
}
inline void reptile_basic_info::set_website_name(const void* value, size_t size) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_basic_info.website_name)
}
inline ::std::string* reptile_basic_info::mutable_website_name() {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_basic_info.website_name)
  return website_name_;
}
inline ::std::string* reptile_basic_info::release_website_name() {
  clear_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = website_name_;
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_website_name(::std::string* website_name) {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (website_name) {
    set_has_website_name();
    website_name_ = website_name;
  } else {
    clear_has_website_name();
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_basic_info.website_name)
}

// optional bytes crawl_site = 3;
inline bool reptile_basic_info::has_crawl_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_basic_info::set_has_crawl_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_basic_info::clear_has_crawl_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_basic_info::clear_crawl_site() {
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_->clear();
  }
  clear_has_crawl_site();
}
inline const ::std::string& reptile_basic_info::crawl_site() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_basic_info.crawl_site)
  return *crawl_site_;
}
inline void reptile_basic_info::set_crawl_site(const ::std::string& value) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_basic_info.crawl_site)
}
inline void reptile_basic_info::set_crawl_site(const char* value) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_basic_info.crawl_site)
}
inline void reptile_basic_info::set_crawl_site(const void* value, size_t size) {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  crawl_site_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_basic_info.crawl_site)
}
inline ::std::string* reptile_basic_info::mutable_crawl_site() {
  set_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    crawl_site_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_basic_info.crawl_site)
  return crawl_site_;
}
inline ::std::string* reptile_basic_info::release_crawl_site() {
  clear_has_crawl_site();
  if (crawl_site_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = crawl_site_;
    crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_crawl_site(::std::string* crawl_site) {
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crawl_site_;
  }
  if (crawl_site) {
    set_has_crawl_site();
    crawl_site_ = crawl_site;
  } else {
    clear_has_crawl_site();
    crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_basic_info.crawl_site)
}

// optional bytes ip = 4;
inline bool reptile_basic_info::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_basic_info::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_basic_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_basic_info::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& reptile_basic_info::ip() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_basic_info.ip)
  return *ip_;
}
inline void reptile_basic_info::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_basic_info.ip)
}
inline void reptile_basic_info::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_basic_info.ip)
}
inline void reptile_basic_info::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_basic_info.ip)
}
inline ::std::string* reptile_basic_info::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_basic_info.ip)
  return ip_;
}
inline ::std::string* reptile_basic_info::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_basic_info.ip)
}

// optional bytes schedule = 5;
inline bool reptile_basic_info::has_schedule() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reptile_basic_info::set_has_schedule() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reptile_basic_info::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reptile_basic_info::clear_schedule() {
  if (schedule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schedule_->clear();
  }
  clear_has_schedule();
}
inline const ::std::string& reptile_basic_info::schedule() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_basic_info.schedule)
  return *schedule_;
}
inline void reptile_basic_info::set_schedule(const ::std::string& value) {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schedule_ = new ::std::string;
  }
  schedule_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_basic_info.schedule)
}
inline void reptile_basic_info::set_schedule(const char* value) {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schedule_ = new ::std::string;
  }
  schedule_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_basic_info.schedule)
}
inline void reptile_basic_info::set_schedule(const void* value, size_t size) {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schedule_ = new ::std::string;
  }
  schedule_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_basic_info.schedule)
}
inline ::std::string* reptile_basic_info::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schedule_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_basic_info.schedule)
  return schedule_;
}
inline ::std::string* reptile_basic_info::release_schedule() {
  clear_has_schedule();
  if (schedule_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = schedule_;
    schedule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_schedule(::std::string* schedule) {
  if (schedule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schedule_;
  }
  if (schedule) {
    set_has_schedule();
    schedule_ = schedule;
  } else {
    clear_has_schedule();
    schedule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_basic_info.schedule)
}

// optional bytes reptile_status = 6;
inline bool reptile_basic_info::has_reptile_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void reptile_basic_info::set_has_reptile_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void reptile_basic_info::clear_has_reptile_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void reptile_basic_info::clear_reptile_status() {
  if (reptile_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_status_->clear();
  }
  clear_has_reptile_status();
}
inline const ::std::string& reptile_basic_info::reptile_status() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_basic_info.reptile_status)
  return *reptile_status_;
}
inline void reptile_basic_info::set_reptile_status(const ::std::string& value) {
  set_has_reptile_status();
  if (reptile_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_status_ = new ::std::string;
  }
  reptile_status_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_basic_info.reptile_status)
}
inline void reptile_basic_info::set_reptile_status(const char* value) {
  set_has_reptile_status();
  if (reptile_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_status_ = new ::std::string;
  }
  reptile_status_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_basic_info.reptile_status)
}
inline void reptile_basic_info::set_reptile_status(const void* value, size_t size) {
  set_has_reptile_status();
  if (reptile_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_status_ = new ::std::string;
  }
  reptile_status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_basic_info.reptile_status)
}
inline ::std::string* reptile_basic_info::mutable_reptile_status() {
  set_has_reptile_status();
  if (reptile_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_basic_info.reptile_status)
  return reptile_status_;
}
inline ::std::string* reptile_basic_info::release_reptile_status() {
  clear_has_reptile_status();
  if (reptile_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reptile_status_;
    reptile_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_basic_info::set_allocated_reptile_status(::std::string* reptile_status) {
  if (reptile_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_status_;
  }
  if (reptile_status) {
    set_has_reptile_status();
    reptile_status_ = reptile_status;
  } else {
    clear_has_reptile_status();
    reptile_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_basic_info.reptile_status)
}

// -------------------------------------------------------------------

// reptile_monitoring_ask

// optional .common.common_ask_header ask_header = 1;
inline bool reptile_monitoring_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_monitoring_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_monitoring_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_monitoring_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& reptile_monitoring_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* reptile_monitoring_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_monitoring_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* reptile_monitoring_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void reptile_monitoring_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_monitoring_ask.ask_header)
}

// -------------------------------------------------------------------

// reptile_monitoring_ans

// repeated .QDP_IMP.reptile_basic_info list = 1;
inline int reptile_monitoring_ans::list_size() const {
  return list_.size();
}
inline void reptile_monitoring_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::reptile_basic_info& reptile_monitoring_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::reptile_basic_info* reptile_monitoring_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_monitoring_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::reptile_basic_info* reptile_monitoring_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.reptile_monitoring_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_basic_info >&
reptile_monitoring_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.reptile_monitoring_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_basic_info >*
reptile_monitoring_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.reptile_monitoring_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool reptile_monitoring_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_monitoring_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_monitoring_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_monitoring_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_monitoring_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_monitoring_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_monitoring_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_monitoring_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_monitoring_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_monitoring_ans.error)
}

// -------------------------------------------------------------------

// reptile_monitoring_manage_ask

// optional int32 reptile_id = 1;
inline bool reptile_monitoring_manage_ask::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_monitoring_manage_ask::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_monitoring_manage_ask::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_monitoring_manage_ask::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_monitoring_manage_ask::reptile_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_manage_ask.reptile_id)
  return reptile_id_;
}
inline void reptile_monitoring_manage_ask::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_monitoring_manage_ask.reptile_id)
}

// optional int32 operation = 2;
inline bool reptile_monitoring_manage_ask::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_monitoring_manage_ask::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_monitoring_manage_ask::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_monitoring_manage_ask::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
inline ::google::protobuf::int32 reptile_monitoring_manage_ask::operation() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_manage_ask.operation)
  return operation_;
}
inline void reptile_monitoring_manage_ask::set_operation(::google::protobuf::int32 value) {
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_monitoring_manage_ask.operation)
}

// optional .common.common_ask_header ask_header = 3;
inline bool reptile_monitoring_manage_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_monitoring_manage_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_monitoring_manage_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_monitoring_manage_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& reptile_monitoring_manage_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_manage_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* reptile_monitoring_manage_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_monitoring_manage_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* reptile_monitoring_manage_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void reptile_monitoring_manage_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_monitoring_manage_ask.ask_header)
}

// -------------------------------------------------------------------

// reptile_monitoring_manage_ans

// optional .common.errorinfo error = 1;
inline bool reptile_monitoring_manage_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_monitoring_manage_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_monitoring_manage_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_monitoring_manage_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_monitoring_manage_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_monitoring_manage_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_monitoring_manage_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_monitoring_manage_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_monitoring_manage_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_monitoring_manage_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_monitoring_manage_ans.error)
}

// -------------------------------------------------------------------

// reptile_data_statistics_ask

// optional .common.common_ask_header ask_header = 1;
inline bool reptile_data_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_data_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_data_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_data_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& reptile_data_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* reptile_data_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* reptile_data_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void reptile_data_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// reptile_data_statistics_ans

// repeated .QDP_IMP.reptile_data_statistics_info list = 1;
inline int reptile_data_statistics_ans::list_size() const {
  return list_.size();
}
inline void reptile_data_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::reptile_data_statistics_info& reptile_data_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::reptile_data_statistics_info* reptile_data_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::reptile_data_statistics_info* reptile_data_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.reptile_data_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_statistics_info >&
reptile_data_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.reptile_data_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_statistics_info >*
reptile_data_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.reptile_data_statistics_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool reptile_data_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_data_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_data_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_data_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_data_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_data_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_data_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_data_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_statistics_ans.error)
}

// -------------------------------------------------------------------

// reptile_data_detail_ask

// optional int32 reptile_id = 1;
inline bool reptile_data_detail_ask::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_data_detail_ask::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_data_detail_ask::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_data_detail_ask::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_data_detail_ask::reptile_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ask.reptile_id)
  return reptile_id_;
}
inline void reptile_data_detail_ask::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_ask.reptile_id)
}

// optional int32 page_num = 2;
inline bool reptile_data_detail_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_data_detail_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_data_detail_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_data_detail_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 reptile_data_detail_ask::page_num() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ask.page_num)
  return page_num_;
}
inline void reptile_data_detail_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_ask.page_num)
}

// optional int32 cur_page = 3;
inline bool reptile_data_detail_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_data_detail_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_data_detail_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_data_detail_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 reptile_data_detail_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ask.cur_page)
  return cur_page_;
}
inline void reptile_data_detail_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 4;
inline bool reptile_data_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_data_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_data_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_data_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& reptile_data_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* reptile_data_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* reptile_data_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void reptile_data_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_detail_ask.ask_header)
}

// -------------------------------------------------------------------

// reptile_data_detail_ans

// repeated .QDP_IMP.reptile_data_detail_info list = 1;
inline int reptile_data_detail_ans::list_size() const {
  return list_.size();
}
inline void reptile_data_detail_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::reptile_data_detail_info& reptile_data_detail_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::reptile_data_detail_info* reptile_data_detail_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_detail_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::reptile_data_detail_info* reptile_data_detail_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.reptile_data_detail_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_detail_info >&
reptile_data_detail_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.reptile_data_detail_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_data_detail_info >*
reptile_data_detail_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.reptile_data_detail_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool reptile_data_detail_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_data_detail_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_data_detail_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_data_detail_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 reptile_data_detail_ans::total_number() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ans.total_number)
  return total_number_;
}
inline void reptile_data_detail_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_data_detail_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool reptile_data_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_data_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_data_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_data_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_data_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_data_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_data_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_data_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_data_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_data_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_data_detail_ans.error)
}

// -------------------------------------------------------------------

// reptile_conf_info

// optional int32 reptile_id = 1;
inline bool reptile_conf_info::has_reptile_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_conf_info::set_has_reptile_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_conf_info::clear_has_reptile_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_conf_info::clear_reptile_id() {
  reptile_id_ = 0;
  clear_has_reptile_id();
}
inline ::google::protobuf::int32 reptile_conf_info::reptile_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_info.reptile_id)
  return reptile_id_;
}
inline void reptile_conf_info::set_reptile_id(::google::protobuf::int32 value) {
  set_has_reptile_id();
  reptile_id_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_info.reptile_id)
}

// optional int32 start_interval = 2;
inline bool reptile_conf_info::has_start_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_conf_info::set_has_start_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_conf_info::clear_has_start_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_conf_info::clear_start_interval() {
  start_interval_ = 0;
  clear_has_start_interval();
}
inline ::google::protobuf::int32 reptile_conf_info::start_interval() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_info.start_interval)
  return start_interval_;
}
inline void reptile_conf_info::set_start_interval(::google::protobuf::int32 value) {
  set_has_start_interval();
  start_interval_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_info.start_interval)
}

// optional int32 get_interval = 3;
inline bool reptile_conf_info::has_get_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_conf_info::set_has_get_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_conf_info::clear_has_get_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_conf_info::clear_get_interval() {
  get_interval_ = 0;
  clear_has_get_interval();
}
inline ::google::protobuf::int32 reptile_conf_info::get_interval() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_info.get_interval)
  return get_interval_;
}
inline void reptile_conf_info::set_get_interval(::google::protobuf::int32 value) {
  set_has_get_interval();
  get_interval_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_info.get_interval)
}

// optional bytes reptile_desc = 4;
inline bool reptile_conf_info::has_reptile_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reptile_conf_info::set_has_reptile_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reptile_conf_info::clear_has_reptile_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reptile_conf_info::clear_reptile_desc() {
  if (reptile_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_desc_->clear();
  }
  clear_has_reptile_desc();
}
inline const ::std::string& reptile_conf_info::reptile_desc() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_info.reptile_desc)
  return *reptile_desc_;
}
inline void reptile_conf_info::set_reptile_desc(const ::std::string& value) {
  set_has_reptile_desc();
  if (reptile_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_desc_ = new ::std::string;
  }
  reptile_desc_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_info.reptile_desc)
}
inline void reptile_conf_info::set_reptile_desc(const char* value) {
  set_has_reptile_desc();
  if (reptile_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_desc_ = new ::std::string;
  }
  reptile_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.reptile_conf_info.reptile_desc)
}
inline void reptile_conf_info::set_reptile_desc(const void* value, size_t size) {
  set_has_reptile_desc();
  if (reptile_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_desc_ = new ::std::string;
  }
  reptile_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.reptile_conf_info.reptile_desc)
}
inline ::std::string* reptile_conf_info::mutable_reptile_desc() {
  set_has_reptile_desc();
  if (reptile_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reptile_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_info.reptile_desc)
  return reptile_desc_;
}
inline ::std::string* reptile_conf_info::release_reptile_desc() {
  clear_has_reptile_desc();
  if (reptile_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reptile_desc_;
    reptile_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reptile_conf_info::set_allocated_reptile_desc(::std::string* reptile_desc) {
  if (reptile_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_desc_;
  }
  if (reptile_desc) {
    set_has_reptile_desc();
    reptile_desc_ = reptile_desc;
  } else {
    clear_has_reptile_desc();
    reptile_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_conf_info.reptile_desc)
}

// -------------------------------------------------------------------

// reptile_conf_query_ask

// optional int32 page_num = 1;
inline bool reptile_conf_query_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_conf_query_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_conf_query_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_conf_query_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 reptile_conf_query_ask::page_num() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_query_ask.page_num)
  return page_num_;
}
inline void reptile_conf_query_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_query_ask.page_num)
}

// optional int32 cur_page = 2;
inline bool reptile_conf_query_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_conf_query_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_conf_query_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_conf_query_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 reptile_conf_query_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_query_ask.cur_page)
  return cur_page_;
}
inline void reptile_conf_query_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_query_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 3;
inline bool reptile_conf_query_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_conf_query_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_conf_query_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_conf_query_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& reptile_conf_query_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_query_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* reptile_conf_query_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_query_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* reptile_conf_query_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void reptile_conf_query_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_conf_query_ask.ask_header)
}

// -------------------------------------------------------------------

// reptile_conf_query_ans

// repeated .QDP_IMP.reptile_conf_info list = 1;
inline int reptile_conf_query_ans::list_size() const {
  return list_.size();
}
inline void reptile_conf_query_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::reptile_conf_info& reptile_conf_query_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_query_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::reptile_conf_info* reptile_conf_query_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_query_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::reptile_conf_info* reptile_conf_query_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.reptile_conf_query_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_conf_info >&
reptile_conf_query_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.reptile_conf_query_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::reptile_conf_info >*
reptile_conf_query_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.reptile_conf_query_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool reptile_conf_query_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_conf_query_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_conf_query_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_conf_query_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 reptile_conf_query_ans::total_number() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_query_ans.total_number)
  return total_number_;
}
inline void reptile_conf_query_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.reptile_conf_query_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool reptile_conf_query_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reptile_conf_query_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reptile_conf_query_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reptile_conf_query_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_conf_query_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_query_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_conf_query_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_query_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_conf_query_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_conf_query_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_conf_query_ans.error)
}

// -------------------------------------------------------------------

// reptile_conf_edit_ask

// optional .QDP_IMP.reptile_conf_info reptile_conf = 1;
inline bool reptile_conf_edit_ask::has_reptile_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_conf_edit_ask::set_has_reptile_conf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_conf_edit_ask::clear_has_reptile_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_conf_edit_ask::clear_reptile_conf() {
  if (reptile_conf_ != NULL) reptile_conf_->::QDP_IMP::reptile_conf_info::Clear();
  clear_has_reptile_conf();
}
inline const ::QDP_IMP::reptile_conf_info& reptile_conf_edit_ask::reptile_conf() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_edit_ask.reptile_conf)
  return reptile_conf_ != NULL ? *reptile_conf_ : *default_instance_->reptile_conf_;
}
inline ::QDP_IMP::reptile_conf_info* reptile_conf_edit_ask::mutable_reptile_conf() {
  set_has_reptile_conf();
  if (reptile_conf_ == NULL) reptile_conf_ = new ::QDP_IMP::reptile_conf_info;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_edit_ask.reptile_conf)
  return reptile_conf_;
}
inline ::QDP_IMP::reptile_conf_info* reptile_conf_edit_ask::release_reptile_conf() {
  clear_has_reptile_conf();
  ::QDP_IMP::reptile_conf_info* temp = reptile_conf_;
  reptile_conf_ = NULL;
  return temp;
}
inline void reptile_conf_edit_ask::set_allocated_reptile_conf(::QDP_IMP::reptile_conf_info* reptile_conf) {
  delete reptile_conf_;
  reptile_conf_ = reptile_conf;
  if (reptile_conf) {
    set_has_reptile_conf();
  } else {
    clear_has_reptile_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_conf_edit_ask.reptile_conf)
}

// optional .common.common_ask_header ask_header = 2;
inline bool reptile_conf_edit_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reptile_conf_edit_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reptile_conf_edit_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reptile_conf_edit_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& reptile_conf_edit_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_edit_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* reptile_conf_edit_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_edit_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* reptile_conf_edit_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void reptile_conf_edit_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_conf_edit_ask.ask_header)
}

// -------------------------------------------------------------------

// reptile_conf_edit_ans

// optional .common.errorinfo error = 1;
inline bool reptile_conf_edit_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reptile_conf_edit_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reptile_conf_edit_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reptile_conf_edit_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& reptile_conf_edit_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.reptile_conf_edit_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* reptile_conf_edit_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.reptile_conf_edit_ans.error)
  return error_;
}
inline ::common::errorinfo* reptile_conf_edit_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void reptile_conf_edit_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.reptile_conf_edit_ans.error)
}

// -------------------------------------------------------------------

// blacklist_statistics_ask

// optional bytes start_date = 1;
inline bool blacklist_statistics_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_statistics_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_statistics_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_statistics_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& blacklist_statistics_ask::start_date() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_statistics_ask.start_date)
  return *start_date_;
}
inline void blacklist_statistics_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_statistics_ask.start_date)
}
inline void blacklist_statistics_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_statistics_ask.start_date)
}
inline void blacklist_statistics_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_statistics_ask.start_date)
}
inline ::std::string* blacklist_statistics_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_statistics_ask.start_date)
  return start_date_;
}
inline ::std::string* blacklist_statistics_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_statistics_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_statistics_ask.start_date)
}

// optional bytes end_date = 2;
inline bool blacklist_statistics_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_statistics_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_statistics_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_statistics_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& blacklist_statistics_ask::end_date() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_statistics_ask.end_date)
  return *end_date_;
}
inline void blacklist_statistics_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_statistics_ask.end_date)
}
inline void blacklist_statistics_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_statistics_ask.end_date)
}
inline void blacklist_statistics_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_statistics_ask.end_date)
}
inline ::std::string* blacklist_statistics_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_statistics_ask.end_date)
  return end_date_;
}
inline ::std::string* blacklist_statistics_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_statistics_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_statistics_ask.end_date)
}

// optional .common.common_ask_header ask_header = 3;
inline bool blacklist_statistics_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_statistics_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_statistics_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_statistics_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_statistics_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_statistics_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_statistics_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_statistics_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_statistics_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_statistics_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_statistics_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklis_statistics_info

// optional bytes website_name = 1;
inline bool blacklis_statistics_info::has_website_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklis_statistics_info::set_has_website_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklis_statistics_info::clear_has_website_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklis_statistics_info::clear_website_name() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_->clear();
  }
  clear_has_website_name();
}
inline const ::std::string& blacklis_statistics_info::website_name() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklis_statistics_info.website_name)
  return *website_name_;
}
inline void blacklis_statistics_info::set_website_name(const ::std::string& value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklis_statistics_info.website_name)
}
inline void blacklis_statistics_info::set_website_name(const char* value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklis_statistics_info.website_name)
}
inline void blacklis_statistics_info::set_website_name(const void* value, size_t size) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklis_statistics_info.website_name)
}
inline ::std::string* blacklis_statistics_info::mutable_website_name() {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklis_statistics_info.website_name)
  return website_name_;
}
inline ::std::string* blacklis_statistics_info::release_website_name() {
  clear_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = website_name_;
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklis_statistics_info::set_allocated_website_name(::std::string* website_name) {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (website_name) {
    set_has_website_name();
    website_name_ = website_name;
  } else {
    clear_has_website_name();
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklis_statistics_info.website_name)
}

// optional int32 total_number = 2;
inline bool blacklis_statistics_info::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklis_statistics_info::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklis_statistics_info::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklis_statistics_info::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 blacklis_statistics_info::total_number() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklis_statistics_info.total_number)
  return total_number_;
}
inline void blacklis_statistics_info::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklis_statistics_info.total_number)
}

// -------------------------------------------------------------------

// blacklist_statistics_ans

// repeated .QDP_IMP.blacklis_statistics_info list = 1;
inline int blacklist_statistics_ans::list_size() const {
  return list_.size();
}
inline void blacklist_statistics_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::blacklis_statistics_info& blacklist_statistics_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_statistics_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::blacklis_statistics_info* blacklist_statistics_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_statistics_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::blacklis_statistics_info* blacklist_statistics_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.blacklist_statistics_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklis_statistics_info >&
blacklist_statistics_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.blacklist_statistics_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklis_statistics_info >*
blacklist_statistics_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.blacklist_statistics_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool blacklist_statistics_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_statistics_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_statistics_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_statistics_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 blacklist_statistics_ans::total_number() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_statistics_ans.total_number)
  return total_number_;
}
inline void blacklist_statistics_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_statistics_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool blacklist_statistics_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_statistics_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_statistics_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_statistics_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_statistics_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_statistics_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_statistics_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_statistics_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_statistics_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_statistics_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_statistics_ans.error)
}

// -------------------------------------------------------------------

// data_sources_info

// optional bytes website_id = 1;
inline bool data_sources_info::has_website_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void data_sources_info::set_has_website_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void data_sources_info::clear_has_website_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void data_sources_info::clear_website_id() {
  if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_->clear();
  }
  clear_has_website_id();
}
inline const ::std::string& data_sources_info::website_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.data_sources_info.website_id)
  return *website_id_;
}
inline void data_sources_info::set_website_id(const ::std::string& value) {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  website_id_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.data_sources_info.website_id)
}
inline void data_sources_info::set_website_id(const char* value) {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  website_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.data_sources_info.website_id)
}
inline void data_sources_info::set_website_id(const void* value, size_t size) {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  website_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.data_sources_info.website_id)
}
inline ::std::string* data_sources_info::mutable_website_id() {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.data_sources_info.website_id)
  return website_id_;
}
inline ::std::string* data_sources_info::release_website_id() {
  clear_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = website_id_;
    website_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void data_sources_info::set_allocated_website_id(::std::string* website_id) {
  if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_id_;
  }
  if (website_id) {
    set_has_website_id();
    website_id_ = website_id;
  } else {
    clear_has_website_id();
    website_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.data_sources_info.website_id)
}

// optional bytes website_name = 2;
inline bool data_sources_info::has_website_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void data_sources_info::set_has_website_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void data_sources_info::clear_has_website_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void data_sources_info::clear_website_name() {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_->clear();
  }
  clear_has_website_name();
}
inline const ::std::string& data_sources_info::website_name() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.data_sources_info.website_name)
  return *website_name_;
}
inline void data_sources_info::set_website_name(const ::std::string& value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.data_sources_info.website_name)
}
inline void data_sources_info::set_website_name(const char* value) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.data_sources_info.website_name)
}
inline void data_sources_info::set_website_name(const void* value, size_t size) {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  website_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.data_sources_info.website_name)
}
inline ::std::string* data_sources_info::mutable_website_name() {
  set_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.data_sources_info.website_name)
  return website_name_;
}
inline ::std::string* data_sources_info::release_website_name() {
  clear_has_website_name();
  if (website_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = website_name_;
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void data_sources_info::set_allocated_website_name(::std::string* website_name) {
  if (website_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_name_;
  }
  if (website_name) {
    set_has_website_name();
    website_name_ = website_name;
  } else {
    clear_has_website_name();
    website_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.data_sources_info.website_name)
}

// -------------------------------------------------------------------

// data_sources_ask

// optional .common.common_ask_header ask_header = 1;
inline bool data_sources_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void data_sources_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void data_sources_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void data_sources_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& data_sources_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.data_sources_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* data_sources_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.data_sources_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* data_sources_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void data_sources_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.data_sources_ask.ask_header)
}

// -------------------------------------------------------------------

// data_sources_ans

// repeated .QDP_IMP.data_sources_info list = 1;
inline int data_sources_ans::list_size() const {
  return list_.size();
}
inline void data_sources_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::data_sources_info& data_sources_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.data_sources_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::data_sources_info* data_sources_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.data_sources_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::data_sources_info* data_sources_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.data_sources_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::data_sources_info >&
data_sources_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.data_sources_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::data_sources_info >*
data_sources_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.data_sources_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool data_sources_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void data_sources_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void data_sources_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void data_sources_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& data_sources_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.data_sources_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* data_sources_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.data_sources_ans.error)
  return error_;
}
inline ::common::errorinfo* data_sources_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void data_sources_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.data_sources_ans.error)
}

// -------------------------------------------------------------------

// blacklist_ask

// optional bytes start_date = 1;
inline bool blacklist_ask::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blacklist_ask::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blacklist_ask::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blacklist_ask::clear_start_date() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_->clear();
  }
  clear_has_start_date();
}
inline const ::std::string& blacklist_ask::start_date() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ask.start_date)
  return *start_date_;
}
inline void blacklist_ask::set_start_date(const ::std::string& value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_ask.start_date)
}
inline void blacklist_ask::set_start_date(const char* value) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_ask.start_date)
}
inline void blacklist_ask::set_start_date(const void* value, size_t size) {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  start_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_ask.start_date)
}
inline ::std::string* blacklist_ask::mutable_start_date() {
  set_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_ask.start_date)
  return start_date_;
}
inline ::std::string* blacklist_ask::release_start_date() {
  clear_has_start_date();
  if (start_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_date_;
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_ask::set_allocated_start_date(::std::string* start_date) {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (start_date) {
    set_has_start_date();
    start_date_ = start_date;
  } else {
    clear_has_start_date();
    start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_ask.start_date)
}

// optional bytes end_date = 2;
inline bool blacklist_ask::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_ask::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_ask::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_ask::clear_end_date() {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_->clear();
  }
  clear_has_end_date();
}
inline const ::std::string& blacklist_ask::end_date() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ask.end_date)
  return *end_date_;
}
inline void blacklist_ask::set_end_date(const ::std::string& value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_ask.end_date)
}
inline void blacklist_ask::set_end_date(const char* value) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_ask.end_date)
}
inline void blacklist_ask::set_end_date(const void* value, size_t size) {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_ask.end_date)
}
inline ::std::string* blacklist_ask::mutable_end_date() {
  set_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_ask.end_date)
  return end_date_;
}
inline ::std::string* blacklist_ask::release_end_date() {
  clear_has_end_date();
  if (end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_date_;
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_ask::set_allocated_end_date(::std::string* end_date) {
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (end_date) {
    set_has_end_date();
    end_date_ = end_date;
  } else {
    clear_has_end_date();
    end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_ask.end_date)
}

// optional bytes website_id = 3;
inline bool blacklist_ask::has_website_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_ask::set_has_website_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_ask::clear_has_website_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_ask::clear_website_id() {
  if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_->clear();
  }
  clear_has_website_id();
}
inline const ::std::string& blacklist_ask::website_id() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ask.website_id)
  return *website_id_;
}
inline void blacklist_ask::set_website_id(const ::std::string& value) {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  website_id_->assign(value);
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_ask.website_id)
}
inline void blacklist_ask::set_website_id(const char* value) {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  website_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:QDP_IMP.blacklist_ask.website_id)
}
inline void blacklist_ask::set_website_id(const void* value, size_t size) {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  website_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QDP_IMP.blacklist_ask.website_id)
}
inline ::std::string* blacklist_ask::mutable_website_id() {
  set_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    website_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_ask.website_id)
  return website_id_;
}
inline ::std::string* blacklist_ask::release_website_id() {
  clear_has_website_id();
  if (website_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = website_id_;
    website_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void blacklist_ask::set_allocated_website_id(::std::string* website_id) {
  if (website_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete website_id_;
  }
  if (website_id) {
    set_has_website_id();
    website_id_ = website_id;
  } else {
    clear_has_website_id();
    website_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_ask.website_id)
}

// optional int32 page_num = 4;
inline bool blacklist_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blacklist_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blacklist_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blacklist_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 blacklist_ask::page_num() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ask.page_num)
  return page_num_;
}
inline void blacklist_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_ask.page_num)
}

// optional int32 cur_page = 5;
inline bool blacklist_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blacklist_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blacklist_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blacklist_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 blacklist_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ask.cur_page)
  return cur_page_;
}
inline void blacklist_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_ask.cur_page)
}

// optional .common.common_ask_header ask_header = 6;
inline bool blacklist_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blacklist_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blacklist_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blacklist_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& blacklist_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* blacklist_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* blacklist_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void blacklist_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_ask.ask_header)
}

// -------------------------------------------------------------------

// blacklist_ans

// repeated .QDP_IMP.blacklist_info list = 1;
inline int blacklist_ans::list_size() const {
  return list_.size();
}
inline void blacklist_ans::clear_list() {
  list_.Clear();
}
inline const ::QDP_IMP::blacklist_info& blacklist_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ans.list)
  return list_.Get(index);
}
inline ::QDP_IMP::blacklist_info* blacklist_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_ans.list)
  return list_.Mutable(index);
}
inline ::QDP_IMP::blacklist_info* blacklist_ans::add_list() {
  // @@protoc_insertion_point(field_add:QDP_IMP.blacklist_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklist_info >&
blacklist_ans::list() const {
  // @@protoc_insertion_point(field_list:QDP_IMP.blacklist_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::QDP_IMP::blacklist_info >*
blacklist_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:QDP_IMP.blacklist_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool blacklist_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blacklist_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blacklist_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blacklist_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 blacklist_ans::total_number() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ans.total_number)
  return total_number_;
}
inline void blacklist_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:QDP_IMP.blacklist_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool blacklist_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blacklist_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blacklist_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blacklist_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& blacklist_ans::error() const {
  // @@protoc_insertion_point(field_get:QDP_IMP.blacklist_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* blacklist_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:QDP_IMP.blacklist_ans.error)
  return error_;
}
inline ::common::errorinfo* blacklist_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void blacklist_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:QDP_IMP.blacklist_ans.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QDP_IMP

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QDP_5fIMP_2eproto__INCLUDED
