// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFP_reptile_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AFP_reptile_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AFP_reptile_control {

namespace {

const ::google::protobuf::Descriptor* reptile_basic_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_basic_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_config_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_config_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* schedule_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  schedule_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_reptile_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_reptile_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_schedule_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_schedule_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_reptile_config_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_reptile_config_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* set_reptile_config_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  set_reptile_config_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_operation_status_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_operation_status_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_operation_status_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_operation_status_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_abnormal_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_abnormal_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_history_record_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_history_record_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_history_record_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_history_record_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_heartbeat_monitoring_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_heartbeat_monitoring_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* reptile_heartbeat_monitoring_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reptile_heartbeat_monitoring_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* operation_status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto() {
  protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AFP_reptile_control.proto");
  GOOGLE_CHECK(file != NULL);
  reptile_basic_info_descriptor_ = file->message_type(0);
  static const int reptile_basic_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, reptile_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, crawl_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, status_),
  };
  reptile_basic_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_basic_info_descriptor_,
      reptile_basic_info::default_instance_,
      reptile_basic_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_basic_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_basic_info));
  reptile_config_info_descriptor_ = file->message_type(1);
  static const int reptile_config_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, reptile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, reptile_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, mongodb_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, mongodb_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, mongodb_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, trigger_interval_),
  };
  reptile_config_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_config_info_descriptor_,
      reptile_config_info::default_instance_,
      reptile_config_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_config_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_config_info));
  schedule_info_descriptor_ = file->message_type(2);
  static const int schedule_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(schedule_info, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(schedule_info, webpage_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(schedule_info, invalid_webpage_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(schedule_info, valid_webpage_count_),
  };
  schedule_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      schedule_info_descriptor_,
      schedule_info::default_instance_,
      schedule_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(schedule_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(schedule_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(schedule_info));
  set_reptile_config_descriptor_ = file->message_type(3);
  static const int set_reptile_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config, config_info_),
  };
  set_reptile_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_reptile_config_descriptor_,
      set_reptile_config::default_instance_,
      set_reptile_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_reptile_config));
  reptile_history_descriptor_ = file->message_type(4);
  static const int reptile_history_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, new_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, update_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, webpage_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, time_),
  };
  reptile_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_history_descriptor_,
      reptile_history::default_instance_,
      reptile_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_history));
  reptile_info_ask_descriptor_ = file->message_type(5);
  static const int reptile_info_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ask, info_),
  };
  reptile_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_info_ask_descriptor_,
      reptile_info_ask::default_instance_,
      reptile_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_info_ask));
  reptile_info_ans_descriptor_ = file->message_type(6);
  static const int reptile_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ans, info_),
  };
  reptile_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_info_ans_descriptor_,
      reptile_info_ans::default_instance_,
      reptile_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_info_ans));
  reptile_schedule_ask_descriptor_ = file->message_type(7);
  static const int reptile_schedule_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_schedule_ask, schedule_),
  };
  reptile_schedule_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_schedule_ask_descriptor_,
      reptile_schedule_ask::default_instance_,
      reptile_schedule_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_schedule_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_schedule_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_schedule_ask));
  set_reptile_config_ask_descriptor_ = file->message_type(8);
  static const int set_reptile_config_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ask, config_),
  };
  set_reptile_config_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_reptile_config_ask_descriptor_,
      set_reptile_config_ask::default_instance_,
      set_reptile_config_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_reptile_config_ask));
  set_reptile_config_ans_descriptor_ = file->message_type(9);
  static const int set_reptile_config_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ans, error_),
  };
  set_reptile_config_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      set_reptile_config_ans_descriptor_,
      set_reptile_config_ans::default_instance_,
      set_reptile_config_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_reptile_config_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(set_reptile_config_ans));
  reptile_operation_status_ask_descriptor_ = file->message_type(10);
  static const int reptile_operation_status_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ask, info_),
  };
  reptile_operation_status_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_operation_status_ask_descriptor_,
      reptile_operation_status_ask::default_instance_,
      reptile_operation_status_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_operation_status_ask));
  reptile_operation_status_ans_descriptor_ = file->message_type(11);
  static const int reptile_operation_status_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ans, error_),
  };
  reptile_operation_status_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_operation_status_ans_descriptor_,
      reptile_operation_status_ans::default_instance_,
      reptile_operation_status_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_operation_status_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_operation_status_ans));
  reptile_abnormal_ask_descriptor_ = file->message_type(12);
  static const int reptile_abnormal_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_abnormal_ask, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_abnormal_ask, abnormal_info_),
  };
  reptile_abnormal_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_abnormal_ask_descriptor_,
      reptile_abnormal_ask::default_instance_,
      reptile_abnormal_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_abnormal_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_abnormal_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_abnormal_ask));
  reptile_history_record_ask_descriptor_ = file->message_type(13);
  static const int reptile_history_record_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ask, reptile_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ask, time_),
  };
  reptile_history_record_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_history_record_ask_descriptor_,
      reptile_history_record_ask::default_instance_,
      reptile_history_record_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_history_record_ask));
  reptile_history_record_ans_descriptor_ = file->message_type(14);
  static const int reptile_history_record_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ans, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ans, error_),
  };
  reptile_history_record_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_history_record_ans_descriptor_,
      reptile_history_record_ans::default_instance_,
      reptile_history_record_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_history_record_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_history_record_ans));
  reptile_heartbeat_monitoring_ask_descriptor_ = file->message_type(15);
  static const int reptile_heartbeat_monitoring_ask_offsets_[1] = {
  };
  reptile_heartbeat_monitoring_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_heartbeat_monitoring_ask_descriptor_,
      reptile_heartbeat_monitoring_ask::default_instance_,
      reptile_heartbeat_monitoring_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_heartbeat_monitoring_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_heartbeat_monitoring_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_heartbeat_monitoring_ask));
  reptile_heartbeat_monitoring_ans_descriptor_ = file->message_type(16);
  static const int reptile_heartbeat_monitoring_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_heartbeat_monitoring_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_heartbeat_monitoring_ans, error_),
  };
  reptile_heartbeat_monitoring_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reptile_heartbeat_monitoring_ans_descriptor_,
      reptile_heartbeat_monitoring_ans::default_instance_,
      reptile_heartbeat_monitoring_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_heartbeat_monitoring_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reptile_heartbeat_monitoring_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reptile_heartbeat_monitoring_ans));
  operation_status_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AFP_5freptile_5fcontrol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_basic_info_descriptor_, &reptile_basic_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_config_info_descriptor_, &reptile_config_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    schedule_info_descriptor_, &schedule_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_reptile_config_descriptor_, &set_reptile_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_history_descriptor_, &reptile_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_info_ask_descriptor_, &reptile_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_info_ans_descriptor_, &reptile_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_schedule_ask_descriptor_, &reptile_schedule_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_reptile_config_ask_descriptor_, &set_reptile_config_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    set_reptile_config_ans_descriptor_, &set_reptile_config_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_operation_status_ask_descriptor_, &reptile_operation_status_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_operation_status_ans_descriptor_, &reptile_operation_status_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_abnormal_ask_descriptor_, &reptile_abnormal_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_history_record_ask_descriptor_, &reptile_history_record_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_history_record_ans_descriptor_, &reptile_history_record_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_heartbeat_monitoring_ask_descriptor_, &reptile_heartbeat_monitoring_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reptile_heartbeat_monitoring_ans_descriptor_, &reptile_heartbeat_monitoring_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto() {
  delete reptile_basic_info::default_instance_;
  delete reptile_basic_info_reflection_;
  delete reptile_config_info::default_instance_;
  delete reptile_config_info_reflection_;
  delete schedule_info::default_instance_;
  delete schedule_info_reflection_;
  delete set_reptile_config::default_instance_;
  delete set_reptile_config_reflection_;
  delete reptile_history::default_instance_;
  delete reptile_history_reflection_;
  delete reptile_info_ask::default_instance_;
  delete reptile_info_ask_reflection_;
  delete reptile_info_ans::default_instance_;
  delete reptile_info_ans_reflection_;
  delete reptile_schedule_ask::default_instance_;
  delete reptile_schedule_ask_reflection_;
  delete set_reptile_config_ask::default_instance_;
  delete set_reptile_config_ask_reflection_;
  delete set_reptile_config_ans::default_instance_;
  delete set_reptile_config_ans_reflection_;
  delete reptile_operation_status_ask::default_instance_;
  delete reptile_operation_status_ask_reflection_;
  delete reptile_operation_status_ans::default_instance_;
  delete reptile_operation_status_ans_reflection_;
  delete reptile_abnormal_ask::default_instance_;
  delete reptile_abnormal_ask_reflection_;
  delete reptile_history_record_ask::default_instance_;
  delete reptile_history_record_ask_reflection_;
  delete reptile_history_record_ans::default_instance_;
  delete reptile_history_record_ans_reflection_;
  delete reptile_heartbeat_monitoring_ask::default_instance_;
  delete reptile_heartbeat_monitoring_ask_reflection_;
  delete reptile_heartbeat_monitoring_ans::default_instance_;
  delete reptile_heartbeat_monitoring_ans_reflection_;
}

void protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031AFP_reptile_control.proto\022\023AFP_reptile"
    "_control\032\014common.proto\"\225\001\n\022reptile_basic"
    "_info\022\022\n\nreptile_id\030\001 \001(\005\022\024\n\014reptile_nam"
    "e\030\002 \001(\014\022\022\n\nCrawl_site\030\003 \001(\014\022\n\n\002ip\030\004 \001(\014\022"
    "5\n\006status\030\005 \001(\0162%.AFP_reptile_control.op"
    "eration_status\"\260\001\n\023reptile_config_info\022\022"
    "\n\nreptile_id\030\001 \001(\005\022\024\n\014reptile_name\030\002 \001(\014"
    "\022\027\n\017mongodb_address\030\003 \001(\014\022\024\n\014mongodb_por"
    "t\030\004 \001(\005\022\024\n\014mongodb_name\030\005 \001(\014\022\020\n\010interva"
    "l\030\006 \001(\005\022\030\n\020trigger_interval\030\007 \001(\005\"\227\001\n\rsc"
    "hedule_info\0225\n\004info\030\001 \001(\0132\'.AFP_reptile_"
    "control.reptile_basic_info\022\023\n\013webpage_su"
    "m\030\002 \001(\005\022\035\n\025invalid_webpage_count\030\003 \001(\005\022\033"
    "\n\023valid_webpage_count\030\004 \001(\005\"\220\001\n\022set_rept"
    "ile_config\022;\n\nbasic_info\030\001 \001(\0132\'.AFP_rep"
    "tile_control.reptile_basic_info\022=\n\013confi"
    "g_info\030\002 \001(\0132(.AFP_reptile_control.repti"
    "le_config_info\"\224\001\n\017reptile_history\0225\n\004in"
    "fo\030\001 \001(\0132\'.AFP_reptile_control.reptile_b"
    "asic_info\022\020\n\010new_data\030\002 \001(\005\022\023\n\013update_da"
    "ta\030\003 \001(\005\022\025\n\rwebpage_count\030\004 \001(\005\022\014\n\004time\030"
    "\005 \001(\014\"I\n\020reptile_info_ask\0225\n\004info\030\001 \003(\0132"
    "\'.AFP_reptile_control.reptile_basic_info"
    "\"l\n\020reptile_info_ans\022 \n\005error\030\001 \001(\0132\021.co"
    "mmon.errorinfo\0226\n\004info\030\002 \003(\0132(.AFP_repti"
    "le_control.reptile_config_info\"L\n\024reptil"
    "e_schedule_ask\0224\n\010schedule\030\001 \003(\0132\".AFP_r"
    "eptile_control.schedule_info\"Q\n\026set_rept"
    "ile_config_ask\0227\n\006config\030\001 \003(\0132\'.AFP_rep"
    "tile_control.set_reptile_config\"q\n\026set_r"
    "eptile_config_ans\0225\n\004info\030\001 \003(\0132\'.AFP_re"
    "ptile_control.reptile_basic_info\022 \n\005erro"
    "r\030\002 \001(\0132\021.common.errorinfo\"U\n\034reptile_op"
    "eration_status_ask\0225\n\004info\030\001 \003(\0132\'.AFP_r"
    "eptile_control.reptile_basic_info\"w\n\034rep"
    "tile_operation_status_ans\0225\n\004info\030\001 \003(\0132"
    "\'.AFP_reptile_control.reptile_basic_info"
    "\022 \n\005error\030\002 \001(\0132\021.common.errorinfo\"d\n\024re"
    "ptile_abnormal_ask\0225\n\004info\030\001 \003(\0132\'.AFP_r"
    "eptile_control.reptile_basic_info\022\025\n\rabn"
    "ormal_info\030\002 \001(\014\"@\n\032reptile_history_reco"
    "rd_ask\022\024\n\014reptile_name\030\001 \001(\014\022\014\n\004time\030\002 \001"
    "(\014\"t\n\032reptile_history_record_ans\0224\n\006reco"
    "rd\030\001 \003(\0132$.AFP_reptile_control.reptile_h"
    "istory\022 \n\005error\030\002 \001(\0132\021.common.errorinfo"
    "\"\"\n reptile_heartbeat_monitoring_ask\"{\n "
    "reptile_heartbeat_monitoring_ans\0225\n\004info"
    "\030\001 \003(\0132\'.AFP_reptile_control.reptile_bas"
    "ic_info\022 \n\005error\030\002 \001(\0132\021.common.errorinf"
    "o*.\n\020operation_status\022\014\n\010starting\020\000\022\014\n\010c"
    "loseing\020\001", 2009);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AFP_reptile_control.proto", &protobuf_RegisterTypes);
  reptile_basic_info::default_instance_ = new reptile_basic_info();
  reptile_config_info::default_instance_ = new reptile_config_info();
  schedule_info::default_instance_ = new schedule_info();
  set_reptile_config::default_instance_ = new set_reptile_config();
  reptile_history::default_instance_ = new reptile_history();
  reptile_info_ask::default_instance_ = new reptile_info_ask();
  reptile_info_ans::default_instance_ = new reptile_info_ans();
  reptile_schedule_ask::default_instance_ = new reptile_schedule_ask();
  set_reptile_config_ask::default_instance_ = new set_reptile_config_ask();
  set_reptile_config_ans::default_instance_ = new set_reptile_config_ans();
  reptile_operation_status_ask::default_instance_ = new reptile_operation_status_ask();
  reptile_operation_status_ans::default_instance_ = new reptile_operation_status_ans();
  reptile_abnormal_ask::default_instance_ = new reptile_abnormal_ask();
  reptile_history_record_ask::default_instance_ = new reptile_history_record_ask();
  reptile_history_record_ans::default_instance_ = new reptile_history_record_ans();
  reptile_heartbeat_monitoring_ask::default_instance_ = new reptile_heartbeat_monitoring_ask();
  reptile_heartbeat_monitoring_ans::default_instance_ = new reptile_heartbeat_monitoring_ans();
  reptile_basic_info::default_instance_->InitAsDefaultInstance();
  reptile_config_info::default_instance_->InitAsDefaultInstance();
  schedule_info::default_instance_->InitAsDefaultInstance();
  set_reptile_config::default_instance_->InitAsDefaultInstance();
  reptile_history::default_instance_->InitAsDefaultInstance();
  reptile_info_ask::default_instance_->InitAsDefaultInstance();
  reptile_info_ans::default_instance_->InitAsDefaultInstance();
  reptile_schedule_ask::default_instance_->InitAsDefaultInstance();
  set_reptile_config_ask::default_instance_->InitAsDefaultInstance();
  set_reptile_config_ans::default_instance_->InitAsDefaultInstance();
  reptile_operation_status_ask::default_instance_->InitAsDefaultInstance();
  reptile_operation_status_ans::default_instance_->InitAsDefaultInstance();
  reptile_abnormal_ask::default_instance_->InitAsDefaultInstance();
  reptile_history_record_ask::default_instance_->InitAsDefaultInstance();
  reptile_history_record_ans::default_instance_->InitAsDefaultInstance();
  reptile_heartbeat_monitoring_ask::default_instance_->InitAsDefaultInstance();
  reptile_heartbeat_monitoring_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AFP_5freptile_5fcontrol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AFP_5freptile_5fcontrol_2eproto {
  StaticDescriptorInitializer_AFP_5freptile_5fcontrol_2eproto() {
    protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  }
} static_descriptor_initializer_AFP_5freptile_5fcontrol_2eproto_;
const ::google::protobuf::EnumDescriptor* operation_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operation_status_descriptor_;
}
bool operation_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_basic_info::kReptileIdFieldNumber;
const int reptile_basic_info::kReptileNameFieldNumber;
const int reptile_basic_info::kCrawlSiteFieldNumber;
const int reptile_basic_info::kIpFieldNumber;
const int reptile_basic_info::kStatusFieldNumber;
#endif  // !_MSC_VER

reptile_basic_info::reptile_basic_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_basic_info)
}

void reptile_basic_info::InitAsDefaultInstance() {
}

reptile_basic_info::reptile_basic_info(const reptile_basic_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_basic_info)
}

void reptile_basic_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reptile_id_ = 0;
  reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crawl_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_basic_info::~reptile_basic_info() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_basic_info)
  SharedDtor();
}

void reptile_basic_info::SharedDtor() {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_name_;
  }
  if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete crawl_site_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void reptile_basic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_basic_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_basic_info_descriptor_;
}

const reptile_basic_info& reptile_basic_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_basic_info* reptile_basic_info::default_instance_ = NULL;

reptile_basic_info* reptile_basic_info::New() const {
  return new reptile_basic_info;
}

void reptile_basic_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_basic_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(reptile_id_, status_);
    if (has_reptile_name()) {
      if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reptile_name_->clear();
      }
    }
    if (has_crawl_site()) {
      if (crawl_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        crawl_site_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_basic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_basic_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reptile_name;
        break;
      }

      // optional bytes reptile_name = 2;
      case 2: {
        if (tag == 18) {
         parse_reptile_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reptile_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Crawl_site;
        break;
      }

      // optional bytes Crawl_site = 3;
      case 3: {
        if (tag == 26) {
         parse_Crawl_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crawl_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional bytes ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .AFP_reptile_control.operation_status status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_reptile_control::operation_status_IsValid(value)) {
            set_status(static_cast< ::AFP_reptile_control::operation_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_basic_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_basic_info)
  return false;
#undef DO_
}

void reptile_basic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_basic_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional bytes reptile_name = 2;
  if (has_reptile_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reptile_name(), output);
  }

  // optional bytes Crawl_site = 3;
  if (has_crawl_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->crawl_site(), output);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ip(), output);
  }

  // optional .AFP_reptile_control.operation_status status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_basic_info)
}

::google::protobuf::uint8* reptile_basic_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_basic_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional bytes reptile_name = 2;
  if (has_reptile_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reptile_name(), target);
  }

  // optional bytes Crawl_site = 3;
  if (has_crawl_site()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->crawl_site(), target);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // optional .AFP_reptile_control.operation_status status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_basic_info)
  return target;
}

int reptile_basic_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional bytes reptile_name = 2;
    if (has_reptile_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reptile_name());
    }

    // optional bytes Crawl_site = 3;
    if (has_crawl_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crawl_site());
    }

    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional .AFP_reptile_control.operation_status status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_basic_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_basic_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_basic_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_basic_info::MergeFrom(const reptile_basic_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_reptile_name()) {
      set_reptile_name(from.reptile_name());
    }
    if (from.has_crawl_site()) {
      set_crawl_site(from.crawl_site());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_basic_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_basic_info::CopyFrom(const reptile_basic_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_basic_info::IsInitialized() const {

  return true;
}

void reptile_basic_info::Swap(reptile_basic_info* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(reptile_name_, other->reptile_name_);
    std::swap(crawl_site_, other->crawl_site_);
    std::swap(ip_, other->ip_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_basic_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_basic_info_descriptor_;
  metadata.reflection = reptile_basic_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_config_info::kReptileIdFieldNumber;
const int reptile_config_info::kReptileNameFieldNumber;
const int reptile_config_info::kMongodbAddressFieldNumber;
const int reptile_config_info::kMongodbPortFieldNumber;
const int reptile_config_info::kMongodbNameFieldNumber;
const int reptile_config_info::kIntervalFieldNumber;
const int reptile_config_info::kTriggerIntervalFieldNumber;
#endif  // !_MSC_VER

reptile_config_info::reptile_config_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_config_info)
}

void reptile_config_info::InitAsDefaultInstance() {
}

reptile_config_info::reptile_config_info(const reptile_config_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_config_info)
}

void reptile_config_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reptile_id_ = 0;
  reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongodb_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongodb_port_ = 0;
  mongodb_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = 0;
  trigger_interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_config_info::~reptile_config_info() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_config_info)
  SharedDtor();
}

void reptile_config_info::SharedDtor() {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_name_;
  }
  if (mongodb_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mongodb_address_;
  }
  if (mongodb_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mongodb_name_;
  }
  if (this != default_instance_) {
  }
}

void reptile_config_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_config_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_config_info_descriptor_;
}

const reptile_config_info& reptile_config_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_config_info* reptile_config_info::default_instance_ = NULL;

reptile_config_info* reptile_config_info::New() const {
  return new reptile_config_info;
}

void reptile_config_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_config_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(reptile_id_, mongodb_port_);
    ZR_(interval_, trigger_interval_);
    if (has_reptile_name()) {
      if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reptile_name_->clear();
      }
    }
    if (has_mongodb_address()) {
      if (mongodb_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mongodb_address_->clear();
      }
    }
    if (has_mongodb_name()) {
      if (mongodb_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mongodb_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_config_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_config_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reptile_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reptile_id_)));
          set_has_reptile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reptile_name;
        break;
      }

      // optional bytes reptile_name = 2;
      case 2: {
        if (tag == 18) {
         parse_reptile_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reptile_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mongodb_address;
        break;
      }

      // optional bytes mongodb_address = 3;
      case 3: {
        if (tag == 26) {
         parse_mongodb_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mongodb_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mongodb_port;
        break;
      }

      // optional int32 mongodb_port = 4;
      case 4: {
        if (tag == 32) {
         parse_mongodb_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mongodb_port_)));
          set_has_mongodb_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mongodb_name;
        break;
      }

      // optional bytes mongodb_name = 5;
      case 5: {
        if (tag == 42) {
         parse_mongodb_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mongodb_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_interval;
        break;
      }

      // optional int32 interval = 6;
      case 6: {
        if (tag == 48) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_trigger_interval;
        break;
      }

      // optional int32 trigger_interval = 7;
      case 7: {
        if (tag == 56) {
         parse_trigger_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_interval_)));
          set_has_trigger_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_config_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_config_info)
  return false;
#undef DO_
}

void reptile_config_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_config_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reptile_id(), output);
  }

  // optional bytes reptile_name = 2;
  if (has_reptile_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reptile_name(), output);
  }

  // optional bytes mongodb_address = 3;
  if (has_mongodb_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mongodb_address(), output);
  }

  // optional int32 mongodb_port = 4;
  if (has_mongodb_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mongodb_port(), output);
  }

  // optional bytes mongodb_name = 5;
  if (has_mongodb_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->mongodb_name(), output);
  }

  // optional int32 interval = 6;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->interval(), output);
  }

  // optional int32 trigger_interval = 7;
  if (has_trigger_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->trigger_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_config_info)
}

::google::protobuf::uint8* reptile_config_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_config_info)
  // optional int32 reptile_id = 1;
  if (has_reptile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reptile_id(), target);
  }

  // optional bytes reptile_name = 2;
  if (has_reptile_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reptile_name(), target);
  }

  // optional bytes mongodb_address = 3;
  if (has_mongodb_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mongodb_address(), target);
  }

  // optional int32 mongodb_port = 4;
  if (has_mongodb_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mongodb_port(), target);
  }

  // optional bytes mongodb_name = 5;
  if (has_mongodb_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->mongodb_name(), target);
  }

  // optional int32 interval = 6;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->interval(), target);
  }

  // optional int32 trigger_interval = 7;
  if (has_trigger_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->trigger_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_config_info)
  return target;
}

int reptile_config_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reptile_id = 1;
    if (has_reptile_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reptile_id());
    }

    // optional bytes reptile_name = 2;
    if (has_reptile_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reptile_name());
    }

    // optional bytes mongodb_address = 3;
    if (has_mongodb_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mongodb_address());
    }

    // optional int32 mongodb_port = 4;
    if (has_mongodb_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mongodb_port());
    }

    // optional bytes mongodb_name = 5;
    if (has_mongodb_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mongodb_name());
    }

    // optional int32 interval = 6;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional int32 trigger_interval = 7;
    if (has_trigger_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_config_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_config_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_config_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_config_info::MergeFrom(const reptile_config_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_id()) {
      set_reptile_id(from.reptile_id());
    }
    if (from.has_reptile_name()) {
      set_reptile_name(from.reptile_name());
    }
    if (from.has_mongodb_address()) {
      set_mongodb_address(from.mongodb_address());
    }
    if (from.has_mongodb_port()) {
      set_mongodb_port(from.mongodb_port());
    }
    if (from.has_mongodb_name()) {
      set_mongodb_name(from.mongodb_name());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_trigger_interval()) {
      set_trigger_interval(from.trigger_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_config_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_config_info::CopyFrom(const reptile_config_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_config_info::IsInitialized() const {

  return true;
}

void reptile_config_info::Swap(reptile_config_info* other) {
  if (other != this) {
    std::swap(reptile_id_, other->reptile_id_);
    std::swap(reptile_name_, other->reptile_name_);
    std::swap(mongodb_address_, other->mongodb_address_);
    std::swap(mongodb_port_, other->mongodb_port_);
    std::swap(mongodb_name_, other->mongodb_name_);
    std::swap(interval_, other->interval_);
    std::swap(trigger_interval_, other->trigger_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_config_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_config_info_descriptor_;
  metadata.reflection = reptile_config_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int schedule_info::kInfoFieldNumber;
const int schedule_info::kWebpageSumFieldNumber;
const int schedule_info::kInvalidWebpageCountFieldNumber;
const int schedule_info::kValidWebpageCountFieldNumber;
#endif  // !_MSC_VER

schedule_info::schedule_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.schedule_info)
}

void schedule_info::InitAsDefaultInstance() {
  info_ = const_cast< ::AFP_reptile_control::reptile_basic_info*>(&::AFP_reptile_control::reptile_basic_info::default_instance());
}

schedule_info::schedule_info(const schedule_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.schedule_info)
}

void schedule_info::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  webpage_sum_ = 0;
  invalid_webpage_count_ = 0;
  valid_webpage_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

schedule_info::~schedule_info() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.schedule_info)
  SharedDtor();
}

void schedule_info::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void schedule_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* schedule_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return schedule_info_descriptor_;
}

const schedule_info& schedule_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

schedule_info* schedule_info::default_instance_ = NULL;

schedule_info* schedule_info::New() const {
  return new schedule_info;
}

void schedule_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<schedule_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(webpage_sum_, valid_webpage_count_);
    if (has_info()) {
      if (info_ != NULL) info_->::AFP_reptile_control::reptile_basic_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool schedule_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.schedule_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_webpage_sum;
        break;
      }

      // optional int32 webpage_sum = 2;
      case 2: {
        if (tag == 16) {
         parse_webpage_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &webpage_sum_)));
          set_has_webpage_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invalid_webpage_count;
        break;
      }

      // optional int32 invalid_webpage_count = 3;
      case 3: {
        if (tag == 24) {
         parse_invalid_webpage_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invalid_webpage_count_)));
          set_has_invalid_webpage_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_valid_webpage_count;
        break;
      }

      // optional int32 valid_webpage_count = 4;
      case 4: {
        if (tag == 32) {
         parse_valid_webpage_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_webpage_count_)));
          set_has_valid_webpage_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.schedule_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.schedule_info)
  return false;
#undef DO_
}

void schedule_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.schedule_info)
  // optional .AFP_reptile_control.reptile_basic_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional int32 webpage_sum = 2;
  if (has_webpage_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->webpage_sum(), output);
  }

  // optional int32 invalid_webpage_count = 3;
  if (has_invalid_webpage_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->invalid_webpage_count(), output);
  }

  // optional int32 valid_webpage_count = 4;
  if (has_valid_webpage_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->valid_webpage_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.schedule_info)
}

::google::protobuf::uint8* schedule_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.schedule_info)
  // optional .AFP_reptile_control.reptile_basic_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional int32 webpage_sum = 2;
  if (has_webpage_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->webpage_sum(), target);
  }

  // optional int32 invalid_webpage_count = 3;
  if (has_invalid_webpage_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->invalid_webpage_count(), target);
  }

  // optional int32 valid_webpage_count = 4;
  if (has_valid_webpage_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->valid_webpage_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.schedule_info)
  return target;
}

int schedule_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_reptile_control.reptile_basic_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 webpage_sum = 2;
    if (has_webpage_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webpage_sum());
    }

    // optional int32 invalid_webpage_count = 3;
    if (has_invalid_webpage_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invalid_webpage_count());
    }

    // optional int32 valid_webpage_count = 4;
    if (has_valid_webpage_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_webpage_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void schedule_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const schedule_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const schedule_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void schedule_info::MergeFrom(const schedule_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::AFP_reptile_control::reptile_basic_info::MergeFrom(from.info());
    }
    if (from.has_webpage_sum()) {
      set_webpage_sum(from.webpage_sum());
    }
    if (from.has_invalid_webpage_count()) {
      set_invalid_webpage_count(from.invalid_webpage_count());
    }
    if (from.has_valid_webpage_count()) {
      set_valid_webpage_count(from.valid_webpage_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void schedule_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void schedule_info::CopyFrom(const schedule_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool schedule_info::IsInitialized() const {

  return true;
}

void schedule_info::Swap(schedule_info* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(webpage_sum_, other->webpage_sum_);
    std::swap(invalid_webpage_count_, other->invalid_webpage_count_);
    std::swap(valid_webpage_count_, other->valid_webpage_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata schedule_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = schedule_info_descriptor_;
  metadata.reflection = schedule_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_reptile_config::kBasicInfoFieldNumber;
const int set_reptile_config::kConfigInfoFieldNumber;
#endif  // !_MSC_VER

set_reptile_config::set_reptile_config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.set_reptile_config)
}

void set_reptile_config::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::AFP_reptile_control::reptile_basic_info*>(&::AFP_reptile_control::reptile_basic_info::default_instance());
  config_info_ = const_cast< ::AFP_reptile_control::reptile_config_info*>(&::AFP_reptile_control::reptile_config_info::default_instance());
}

set_reptile_config::set_reptile_config(const set_reptile_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.set_reptile_config)
}

void set_reptile_config::SharedCtor() {
  _cached_size_ = 0;
  basic_info_ = NULL;
  config_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_reptile_config::~set_reptile_config() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.set_reptile_config)
  SharedDtor();
}

void set_reptile_config::SharedDtor() {
  if (this != default_instance_) {
    delete basic_info_;
    delete config_info_;
  }
}

void set_reptile_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_reptile_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_reptile_config_descriptor_;
}

const set_reptile_config& set_reptile_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

set_reptile_config* set_reptile_config::default_instance_ = NULL;

set_reptile_config* set_reptile_config::New() const {
  return new set_reptile_config;
}

void set_reptile_config::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::AFP_reptile_control::reptile_basic_info::Clear();
    }
    if (has_config_info()) {
      if (config_info_ != NULL) config_info_->::AFP_reptile_control::reptile_config_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_reptile_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.set_reptile_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_reptile_control.reptile_basic_info basic_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config_info;
        break;
      }

      // optional .AFP_reptile_control.reptile_config_info config_info = 2;
      case 2: {
        if (tag == 18) {
         parse_config_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.set_reptile_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.set_reptile_config)
  return false;
#undef DO_
}

void set_reptile_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.set_reptile_config)
  // optional .AFP_reptile_control.reptile_basic_info basic_info = 1;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic_info(), output);
  }

  // optional .AFP_reptile_control.reptile_config_info config_info = 2;
  if (has_config_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.set_reptile_config)
}

::google::protobuf::uint8* set_reptile_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.set_reptile_config)
  // optional .AFP_reptile_control.reptile_basic_info basic_info = 1;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic_info(), target);
  }

  // optional .AFP_reptile_control.reptile_config_info config_info = 2;
  if (has_config_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.set_reptile_config)
  return target;
}

int set_reptile_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_reptile_control.reptile_basic_info basic_info = 1;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // optional .AFP_reptile_control.reptile_config_info config_info = 2;
    if (has_config_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_reptile_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_reptile_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_reptile_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_reptile_config::MergeFrom(const set_reptile_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic_info()) {
      mutable_basic_info()->::AFP_reptile_control::reptile_basic_info::MergeFrom(from.basic_info());
    }
    if (from.has_config_info()) {
      mutable_config_info()->::AFP_reptile_control::reptile_config_info::MergeFrom(from.config_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_reptile_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_reptile_config::CopyFrom(const set_reptile_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_reptile_config::IsInitialized() const {

  return true;
}

void set_reptile_config::Swap(set_reptile_config* other) {
  if (other != this) {
    std::swap(basic_info_, other->basic_info_);
    std::swap(config_info_, other->config_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_reptile_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_reptile_config_descriptor_;
  metadata.reflection = set_reptile_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_history::kInfoFieldNumber;
const int reptile_history::kNewDataFieldNumber;
const int reptile_history::kUpdateDataFieldNumber;
const int reptile_history::kWebpageCountFieldNumber;
const int reptile_history::kTimeFieldNumber;
#endif  // !_MSC_VER

reptile_history::reptile_history()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_history)
}

void reptile_history::InitAsDefaultInstance() {
  info_ = const_cast< ::AFP_reptile_control::reptile_basic_info*>(&::AFP_reptile_control::reptile_basic_info::default_instance());
}

reptile_history::reptile_history(const reptile_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_history)
}

void reptile_history::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = NULL;
  new_data_ = 0;
  update_data_ = 0;
  webpage_count_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_history::~reptile_history() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_history)
  SharedDtor();
}

void reptile_history::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void reptile_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_history_descriptor_;
}

const reptile_history& reptile_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_history* reptile_history::default_instance_ = NULL;

reptile_history* reptile_history::New() const {
  return new reptile_history;
}

void reptile_history::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reptile_history*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(new_data_, update_data_);
    if (has_info()) {
      if (info_ != NULL) info_->::AFP_reptile_control::reptile_basic_info::Clear();
    }
    webpage_count_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_data;
        break;
      }

      // optional int32 new_data = 2;
      case 2: {
        if (tag == 16) {
         parse_new_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_data_)));
          set_has_new_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_data;
        break;
      }

      // optional int32 update_data = 3;
      case 3: {
        if (tag == 24) {
         parse_update_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_data_)));
          set_has_update_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_webpage_count;
        break;
      }

      // optional int32 webpage_count = 4;
      case 4: {
        if (tag == 32) {
         parse_webpage_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &webpage_count_)));
          set_has_webpage_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // optional bytes time = 5;
      case 5: {
        if (tag == 42) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_history)
  return false;
#undef DO_
}

void reptile_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_history)
  // optional .AFP_reptile_control.reptile_basic_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional int32 new_data = 2;
  if (has_new_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_data(), output);
  }

  // optional int32 update_data = 3;
  if (has_update_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->update_data(), output);
  }

  // optional int32 webpage_count = 4;
  if (has_webpage_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->webpage_count(), output);
  }

  // optional bytes time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_history)
}

::google::protobuf::uint8* reptile_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_history)
  // optional .AFP_reptile_control.reptile_basic_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional int32 new_data = 2;
  if (has_new_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_data(), target);
  }

  // optional int32 update_data = 3;
  if (has_update_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->update_data(), target);
  }

  // optional int32 webpage_count = 4;
  if (has_webpage_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->webpage_count(), target);
  }

  // optional bytes time = 5;
  if (has_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_history)
  return target;
}

int reptile_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_reptile_control.reptile_basic_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 new_data = 2;
    if (has_new_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_data());
    }

    // optional int32 update_data = 3;
    if (has_update_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_data());
    }

    // optional int32 webpage_count = 4;
    if (has_webpage_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->webpage_count());
    }

    // optional bytes time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_history::MergeFrom(const reptile_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::AFP_reptile_control::reptile_basic_info::MergeFrom(from.info());
    }
    if (from.has_new_data()) {
      set_new_data(from.new_data());
    }
    if (from.has_update_data()) {
      set_update_data(from.update_data());
    }
    if (from.has_webpage_count()) {
      set_webpage_count(from.webpage_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_history::CopyFrom(const reptile_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_history::IsInitialized() const {

  return true;
}

void reptile_history::Swap(reptile_history* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(new_data_, other->new_data_);
    std::swap(update_data_, other->update_data_);
    std::swap(webpage_count_, other->webpage_count_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_history_descriptor_;
  metadata.reflection = reptile_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_info_ask::kInfoFieldNumber;
#endif  // !_MSC_VER

reptile_info_ask::reptile_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_info_ask)
}

void reptile_info_ask::InitAsDefaultInstance() {
}

reptile_info_ask::reptile_info_ask(const reptile_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_info_ask)
}

void reptile_info_ask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_info_ask::~reptile_info_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_info_ask)
  SharedDtor();
}

void reptile_info_ask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reptile_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_info_ask_descriptor_;
}

const reptile_info_ask& reptile_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_info_ask* reptile_info_ask::default_instance_ = NULL;

reptile_info_ask* reptile_info_ask::New() const {
  return new reptile_info_ask;
}

void reptile_info_ask::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_info_ask)
  return false;
#undef DO_
}

void reptile_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_info_ask)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_info_ask)
}

::google::protobuf::uint8* reptile_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_info_ask)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_info_ask)
  return target;
}

int reptile_info_ask::ByteSize() const {
  int total_size = 0;

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_info_ask::MergeFrom(const reptile_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_info_ask::CopyFrom(const reptile_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_info_ask::IsInitialized() const {

  return true;
}

void reptile_info_ask::Swap(reptile_info_ask* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_info_ask_descriptor_;
  metadata.reflection = reptile_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_info_ans::kErrorFieldNumber;
const int reptile_info_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

reptile_info_ans::reptile_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_info_ans)
}

void reptile_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_info_ans::reptile_info_ans(const reptile_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_info_ans)
}

void reptile_info_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_info_ans::~reptile_info_ans() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_info_ans)
  SharedDtor();
}

void reptile_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_info_ans_descriptor_;
}

const reptile_info_ans& reptile_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_info_ans* reptile_info_ans::default_instance_ = NULL;

reptile_info_ans* reptile_info_ans::New() const {
  return new reptile_info_ans;
}

void reptile_info_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .AFP_reptile_control.reptile_config_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_info_ans)
  return false;
#undef DO_
}

void reptile_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_info_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // repeated .AFP_reptile_control.reptile_config_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_info_ans)
}

::google::protobuf::uint8* reptile_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_info_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // repeated .AFP_reptile_control.reptile_config_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_info_ans)
  return target;
}

int reptile_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_reptile_control.reptile_config_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_info_ans::MergeFrom(const reptile_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_info_ans::CopyFrom(const reptile_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_info_ans::IsInitialized() const {

  return true;
}

void reptile_info_ans::Swap(reptile_info_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_info_ans_descriptor_;
  metadata.reflection = reptile_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_schedule_ask::kScheduleFieldNumber;
#endif  // !_MSC_VER

reptile_schedule_ask::reptile_schedule_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_schedule_ask)
}

void reptile_schedule_ask::InitAsDefaultInstance() {
}

reptile_schedule_ask::reptile_schedule_ask(const reptile_schedule_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_schedule_ask)
}

void reptile_schedule_ask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_schedule_ask::~reptile_schedule_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_schedule_ask)
  SharedDtor();
}

void reptile_schedule_ask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reptile_schedule_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_schedule_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_schedule_ask_descriptor_;
}

const reptile_schedule_ask& reptile_schedule_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_schedule_ask* reptile_schedule_ask::default_instance_ = NULL;

reptile_schedule_ask* reptile_schedule_ask::New() const {
  return new reptile_schedule_ask;
}

void reptile_schedule_ask::Clear() {
  schedule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_schedule_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_schedule_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.schedule_info schedule = 1;
      case 1: {
        if (tag == 10) {
         parse_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_schedule;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_schedule_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_schedule_ask)
  return false;
#undef DO_
}

void reptile_schedule_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_schedule_ask)
  // repeated .AFP_reptile_control.schedule_info schedule = 1;
  for (int i = 0; i < this->schedule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schedule(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_schedule_ask)
}

::google::protobuf::uint8* reptile_schedule_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_schedule_ask)
  // repeated .AFP_reptile_control.schedule_info schedule = 1;
  for (int i = 0; i < this->schedule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schedule(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_schedule_ask)
  return target;
}

int reptile_schedule_ask::ByteSize() const {
  int total_size = 0;

  // repeated .AFP_reptile_control.schedule_info schedule = 1;
  total_size += 1 * this->schedule_size();
  for (int i = 0; i < this->schedule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schedule(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_schedule_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_schedule_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_schedule_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_schedule_ask::MergeFrom(const reptile_schedule_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  schedule_.MergeFrom(from.schedule_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_schedule_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_schedule_ask::CopyFrom(const reptile_schedule_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_schedule_ask::IsInitialized() const {

  return true;
}

void reptile_schedule_ask::Swap(reptile_schedule_ask* other) {
  if (other != this) {
    schedule_.Swap(&other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_schedule_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_schedule_ask_descriptor_;
  metadata.reflection = reptile_schedule_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_reptile_config_ask::kConfigFieldNumber;
#endif  // !_MSC_VER

set_reptile_config_ask::set_reptile_config_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.set_reptile_config_ask)
}

void set_reptile_config_ask::InitAsDefaultInstance() {
}

set_reptile_config_ask::set_reptile_config_ask(const set_reptile_config_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.set_reptile_config_ask)
}

void set_reptile_config_ask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_reptile_config_ask::~set_reptile_config_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.set_reptile_config_ask)
  SharedDtor();
}

void set_reptile_config_ask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void set_reptile_config_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_reptile_config_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_reptile_config_ask_descriptor_;
}

const set_reptile_config_ask& set_reptile_config_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

set_reptile_config_ask* set_reptile_config_ask::default_instance_ = NULL;

set_reptile_config_ask* set_reptile_config_ask::New() const {
  return new set_reptile_config_ask;
}

void set_reptile_config_ask::Clear() {
  config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_reptile_config_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.set_reptile_config_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.set_reptile_config config = 1;
      case 1: {
        if (tag == 10) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_config;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.set_reptile_config_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.set_reptile_config_ask)
  return false;
#undef DO_
}

void set_reptile_config_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.set_reptile_config_ask)
  // repeated .AFP_reptile_control.set_reptile_config config = 1;
  for (int i = 0; i < this->config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.set_reptile_config_ask)
}

::google::protobuf::uint8* set_reptile_config_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.set_reptile_config_ask)
  // repeated .AFP_reptile_control.set_reptile_config config = 1;
  for (int i = 0; i < this->config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.set_reptile_config_ask)
  return target;
}

int set_reptile_config_ask::ByteSize() const {
  int total_size = 0;

  // repeated .AFP_reptile_control.set_reptile_config config = 1;
  total_size += 1 * this->config_size();
  for (int i = 0; i < this->config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_reptile_config_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_reptile_config_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_reptile_config_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_reptile_config_ask::MergeFrom(const set_reptile_config_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_.MergeFrom(from.config_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_reptile_config_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_reptile_config_ask::CopyFrom(const set_reptile_config_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_reptile_config_ask::IsInitialized() const {

  return true;
}

void set_reptile_config_ask::Swap(set_reptile_config_ask* other) {
  if (other != this) {
    config_.Swap(&other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_reptile_config_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_reptile_config_ask_descriptor_;
  metadata.reflection = set_reptile_config_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int set_reptile_config_ans::kInfoFieldNumber;
const int set_reptile_config_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

set_reptile_config_ans::set_reptile_config_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.set_reptile_config_ans)
}

void set_reptile_config_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

set_reptile_config_ans::set_reptile_config_ans(const set_reptile_config_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.set_reptile_config_ans)
}

void set_reptile_config_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

set_reptile_config_ans::~set_reptile_config_ans() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.set_reptile_config_ans)
  SharedDtor();
}

void set_reptile_config_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void set_reptile_config_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_reptile_config_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return set_reptile_config_ans_descriptor_;
}

const set_reptile_config_ans& set_reptile_config_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

set_reptile_config_ans* set_reptile_config_ans::default_instance_ = NULL;

set_reptile_config_ans* set_reptile_config_ans::New() const {
  return new set_reptile_config_ans;
}

void set_reptile_config_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool set_reptile_config_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.set_reptile_config_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.set_reptile_config_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.set_reptile_config_ans)
  return false;
#undef DO_
}

void set_reptile_config_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.set_reptile_config_ans)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.set_reptile_config_ans)
}

::google::protobuf::uint8* set_reptile_config_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.set_reptile_config_ans)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.set_reptile_config_ans)
  return target;
}

int set_reptile_config_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_reptile_config_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const set_reptile_config_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const set_reptile_config_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void set_reptile_config_ans::MergeFrom(const set_reptile_config_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void set_reptile_config_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_reptile_config_ans::CopyFrom(const set_reptile_config_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_reptile_config_ans::IsInitialized() const {

  return true;
}

void set_reptile_config_ans::Swap(set_reptile_config_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata set_reptile_config_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = set_reptile_config_ans_descriptor_;
  metadata.reflection = set_reptile_config_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_operation_status_ask::kInfoFieldNumber;
#endif  // !_MSC_VER

reptile_operation_status_ask::reptile_operation_status_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_operation_status_ask)
}

void reptile_operation_status_ask::InitAsDefaultInstance() {
}

reptile_operation_status_ask::reptile_operation_status_ask(const reptile_operation_status_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_operation_status_ask)
}

void reptile_operation_status_ask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_operation_status_ask::~reptile_operation_status_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_operation_status_ask)
  SharedDtor();
}

void reptile_operation_status_ask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reptile_operation_status_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_operation_status_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_operation_status_ask_descriptor_;
}

const reptile_operation_status_ask& reptile_operation_status_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_operation_status_ask* reptile_operation_status_ask::default_instance_ = NULL;

reptile_operation_status_ask* reptile_operation_status_ask::New() const {
  return new reptile_operation_status_ask;
}

void reptile_operation_status_ask::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_operation_status_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_operation_status_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_operation_status_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_operation_status_ask)
  return false;
#undef DO_
}

void reptile_operation_status_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_operation_status_ask)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_operation_status_ask)
}

::google::protobuf::uint8* reptile_operation_status_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_operation_status_ask)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_operation_status_ask)
  return target;
}

int reptile_operation_status_ask::ByteSize() const {
  int total_size = 0;

  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_operation_status_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_operation_status_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_operation_status_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_operation_status_ask::MergeFrom(const reptile_operation_status_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_operation_status_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_operation_status_ask::CopyFrom(const reptile_operation_status_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_operation_status_ask::IsInitialized() const {

  return true;
}

void reptile_operation_status_ask::Swap(reptile_operation_status_ask* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_operation_status_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_operation_status_ask_descriptor_;
  metadata.reflection = reptile_operation_status_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_operation_status_ans::kInfoFieldNumber;
const int reptile_operation_status_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_operation_status_ans::reptile_operation_status_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_operation_status_ans)
}

void reptile_operation_status_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_operation_status_ans::reptile_operation_status_ans(const reptile_operation_status_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_operation_status_ans)
}

void reptile_operation_status_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_operation_status_ans::~reptile_operation_status_ans() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_operation_status_ans)
  SharedDtor();
}

void reptile_operation_status_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_operation_status_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_operation_status_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_operation_status_ans_descriptor_;
}

const reptile_operation_status_ans& reptile_operation_status_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_operation_status_ans* reptile_operation_status_ans::default_instance_ = NULL;

reptile_operation_status_ans* reptile_operation_status_ans::New() const {
  return new reptile_operation_status_ans;
}

void reptile_operation_status_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_operation_status_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_operation_status_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_operation_status_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_operation_status_ans)
  return false;
#undef DO_
}

void reptile_operation_status_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_operation_status_ans)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_operation_status_ans)
}

::google::protobuf::uint8* reptile_operation_status_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_operation_status_ans)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_operation_status_ans)
  return target;
}

int reptile_operation_status_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_operation_status_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_operation_status_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_operation_status_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_operation_status_ans::MergeFrom(const reptile_operation_status_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_operation_status_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_operation_status_ans::CopyFrom(const reptile_operation_status_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_operation_status_ans::IsInitialized() const {

  return true;
}

void reptile_operation_status_ans::Swap(reptile_operation_status_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_operation_status_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_operation_status_ans_descriptor_;
  metadata.reflection = reptile_operation_status_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_abnormal_ask::kInfoFieldNumber;
const int reptile_abnormal_ask::kAbnormalInfoFieldNumber;
#endif  // !_MSC_VER

reptile_abnormal_ask::reptile_abnormal_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_abnormal_ask)
}

void reptile_abnormal_ask::InitAsDefaultInstance() {
}

reptile_abnormal_ask::reptile_abnormal_ask(const reptile_abnormal_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_abnormal_ask)
}

void reptile_abnormal_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  abnormal_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_abnormal_ask::~reptile_abnormal_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_abnormal_ask)
  SharedDtor();
}

void reptile_abnormal_ask::SharedDtor() {
  if (abnormal_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abnormal_info_;
  }
  if (this != default_instance_) {
  }
}

void reptile_abnormal_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_abnormal_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_abnormal_ask_descriptor_;
}

const reptile_abnormal_ask& reptile_abnormal_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_abnormal_ask* reptile_abnormal_ask::default_instance_ = NULL;

reptile_abnormal_ask* reptile_abnormal_ask::New() const {
  return new reptile_abnormal_ask;
}

void reptile_abnormal_ask::Clear() {
  if (has_abnormal_info()) {
    if (abnormal_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      abnormal_info_->clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_abnormal_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_abnormal_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_abnormal_info;
        break;
      }

      // optional bytes abnormal_info = 2;
      case 2: {
        if (tag == 18) {
         parse_abnormal_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_abnormal_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_abnormal_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_abnormal_ask)
  return false;
#undef DO_
}

void reptile_abnormal_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_abnormal_ask)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional bytes abnormal_info = 2;
  if (has_abnormal_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->abnormal_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_abnormal_ask)
}

::google::protobuf::uint8* reptile_abnormal_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_abnormal_ask)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional bytes abnormal_info = 2;
  if (has_abnormal_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->abnormal_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_abnormal_ask)
  return target;
}

int reptile_abnormal_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes abnormal_info = 2;
    if (has_abnormal_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->abnormal_info());
    }

  }
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_abnormal_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_abnormal_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_abnormal_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_abnormal_ask::MergeFrom(const reptile_abnormal_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_abnormal_info()) {
      set_abnormal_info(from.abnormal_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_abnormal_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_abnormal_ask::CopyFrom(const reptile_abnormal_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_abnormal_ask::IsInitialized() const {

  return true;
}

void reptile_abnormal_ask::Swap(reptile_abnormal_ask* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(abnormal_info_, other->abnormal_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_abnormal_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_abnormal_ask_descriptor_;
  metadata.reflection = reptile_abnormal_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_history_record_ask::kReptileNameFieldNumber;
const int reptile_history_record_ask::kTimeFieldNumber;
#endif  // !_MSC_VER

reptile_history_record_ask::reptile_history_record_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_history_record_ask)
}

void reptile_history_record_ask::InitAsDefaultInstance() {
}

reptile_history_record_ask::reptile_history_record_ask(const reptile_history_record_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_history_record_ask)
}

void reptile_history_record_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reptile_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_history_record_ask::~reptile_history_record_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_history_record_ask)
  SharedDtor();
}

void reptile_history_record_ask::SharedDtor() {
  if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reptile_name_;
  }
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void reptile_history_record_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_history_record_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_history_record_ask_descriptor_;
}

const reptile_history_record_ask& reptile_history_record_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_history_record_ask* reptile_history_record_ask::default_instance_ = NULL;

reptile_history_record_ask* reptile_history_record_ask::New() const {
  return new reptile_history_record_ask;
}

void reptile_history_record_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reptile_name()) {
      if (reptile_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reptile_name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_history_record_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_history_record_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reptile_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reptile_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional bytes time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_history_record_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_history_record_ask)
  return false;
#undef DO_
}

void reptile_history_record_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_history_record_ask)
  // optional bytes reptile_name = 1;
  if (has_reptile_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->reptile_name(), output);
  }

  // optional bytes time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_history_record_ask)
}

::google::protobuf::uint8* reptile_history_record_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_history_record_ask)
  // optional bytes reptile_name = 1;
  if (has_reptile_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reptile_name(), target);
  }

  // optional bytes time = 2;
  if (has_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_history_record_ask)
  return target;
}

int reptile_history_record_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reptile_name = 1;
    if (has_reptile_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reptile_name());
    }

    // optional bytes time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_history_record_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_history_record_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_history_record_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_history_record_ask::MergeFrom(const reptile_history_record_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reptile_name()) {
      set_reptile_name(from.reptile_name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_history_record_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_history_record_ask::CopyFrom(const reptile_history_record_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_history_record_ask::IsInitialized() const {

  return true;
}

void reptile_history_record_ask::Swap(reptile_history_record_ask* other) {
  if (other != this) {
    std::swap(reptile_name_, other->reptile_name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_history_record_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_history_record_ask_descriptor_;
  metadata.reflection = reptile_history_record_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_history_record_ans::kRecordFieldNumber;
const int reptile_history_record_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_history_record_ans::reptile_history_record_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_history_record_ans)
}

void reptile_history_record_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_history_record_ans::reptile_history_record_ans(const reptile_history_record_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_history_record_ans)
}

void reptile_history_record_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_history_record_ans::~reptile_history_record_ans() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_history_record_ans)
  SharedDtor();
}

void reptile_history_record_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_history_record_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_history_record_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_history_record_ans_descriptor_;
}

const reptile_history_record_ans& reptile_history_record_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_history_record_ans* reptile_history_record_ans::default_instance_ = NULL;

reptile_history_record_ans* reptile_history_record_ans::New() const {
  return new reptile_history_record_ans;
}

void reptile_history_record_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_history_record_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_history_record_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_history record = 1;
      case 1: {
        if (tag == 10) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_history_record_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_history_record_ans)
  return false;
#undef DO_
}

void reptile_history_record_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_history_record_ans)
  // repeated .AFP_reptile_control.reptile_history record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_history_record_ans)
}

::google::protobuf::uint8* reptile_history_record_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_history_record_ans)
  // repeated .AFP_reptile_control.reptile_history record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_history_record_ans)
  return target;
}

int reptile_history_record_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_reptile_control.reptile_history record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_history_record_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_history_record_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_history_record_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_history_record_ans::MergeFrom(const reptile_history_record_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_history_record_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_history_record_ans::CopyFrom(const reptile_history_record_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_history_record_ans::IsInitialized() const {

  return true;
}

void reptile_history_record_ans::Swap(reptile_history_record_ans* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_history_record_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_history_record_ans_descriptor_;
  metadata.reflection = reptile_history_record_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

reptile_heartbeat_monitoring_ask::reptile_heartbeat_monitoring_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
}

void reptile_heartbeat_monitoring_ask::InitAsDefaultInstance() {
}

reptile_heartbeat_monitoring_ask::reptile_heartbeat_monitoring_ask(const reptile_heartbeat_monitoring_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
}

void reptile_heartbeat_monitoring_ask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_heartbeat_monitoring_ask::~reptile_heartbeat_monitoring_ask() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  SharedDtor();
}

void reptile_heartbeat_monitoring_ask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reptile_heartbeat_monitoring_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_heartbeat_monitoring_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_heartbeat_monitoring_ask_descriptor_;
}

const reptile_heartbeat_monitoring_ask& reptile_heartbeat_monitoring_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_heartbeat_monitoring_ask* reptile_heartbeat_monitoring_ask::default_instance_ = NULL;

reptile_heartbeat_monitoring_ask* reptile_heartbeat_monitoring_ask::New() const {
  return new reptile_heartbeat_monitoring_ask;
}

void reptile_heartbeat_monitoring_ask::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_heartbeat_monitoring_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  return false;
#undef DO_
}

void reptile_heartbeat_monitoring_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
}

::google::protobuf::uint8* reptile_heartbeat_monitoring_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  return target;
}

int reptile_heartbeat_monitoring_ask::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_heartbeat_monitoring_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_heartbeat_monitoring_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_heartbeat_monitoring_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_heartbeat_monitoring_ask::MergeFrom(const reptile_heartbeat_monitoring_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_heartbeat_monitoring_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_heartbeat_monitoring_ask::CopyFrom(const reptile_heartbeat_monitoring_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_heartbeat_monitoring_ask::IsInitialized() const {

  return true;
}

void reptile_heartbeat_monitoring_ask::Swap(reptile_heartbeat_monitoring_ask* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_heartbeat_monitoring_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_heartbeat_monitoring_ask_descriptor_;
  metadata.reflection = reptile_heartbeat_monitoring_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reptile_heartbeat_monitoring_ans::kInfoFieldNumber;
const int reptile_heartbeat_monitoring_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

reptile_heartbeat_monitoring_ans::reptile_heartbeat_monitoring_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
}

void reptile_heartbeat_monitoring_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

reptile_heartbeat_monitoring_ans::reptile_heartbeat_monitoring_ans(const reptile_heartbeat_monitoring_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
}

void reptile_heartbeat_monitoring_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reptile_heartbeat_monitoring_ans::~reptile_heartbeat_monitoring_ans() {
  // @@protoc_insertion_point(destructor:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  SharedDtor();
}

void reptile_heartbeat_monitoring_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void reptile_heartbeat_monitoring_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reptile_heartbeat_monitoring_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reptile_heartbeat_monitoring_ans_descriptor_;
}

const reptile_heartbeat_monitoring_ans& reptile_heartbeat_monitoring_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5freptile_5fcontrol_2eproto();
  return *default_instance_;
}

reptile_heartbeat_monitoring_ans* reptile_heartbeat_monitoring_ans::default_instance_ = NULL;

reptile_heartbeat_monitoring_ans* reptile_heartbeat_monitoring_ans::New() const {
  return new reptile_heartbeat_monitoring_ans;
}

void reptile_heartbeat_monitoring_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reptile_heartbeat_monitoring_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_reptile_control.reptile_basic_info info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  return false;
#undef DO_
}

void reptile_heartbeat_monitoring_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
}

::google::protobuf::uint8* reptile_heartbeat_monitoring_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  return target;
}

int reptile_heartbeat_monitoring_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_reptile_control.reptile_basic_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reptile_heartbeat_monitoring_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reptile_heartbeat_monitoring_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reptile_heartbeat_monitoring_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reptile_heartbeat_monitoring_ans::MergeFrom(const reptile_heartbeat_monitoring_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reptile_heartbeat_monitoring_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reptile_heartbeat_monitoring_ans::CopyFrom(const reptile_heartbeat_monitoring_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reptile_heartbeat_monitoring_ans::IsInitialized() const {

  return true;
}

void reptile_heartbeat_monitoring_ans::Swap(reptile_heartbeat_monitoring_ans* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reptile_heartbeat_monitoring_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reptile_heartbeat_monitoring_ans_descriptor_;
  metadata.reflection = reptile_heartbeat_monitoring_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFP_reptile_control

// @@protoc_insertion_point(global_scope)
